language: py
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ i - paren_stack[-1])\n                else:\n                    max_depth =\
    \ max(max_depth, i - paren_stack[-1])\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7ao2wf8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu7ao2wf8.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7ao2wf8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpu7ao2wf8.py\", line 22, in parse_nested_parens\n\
    \    max_depth = max(max_depth, i - paren_stack[-1])\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError(\"Invalid parentheses\
    \ string\")\n            else:\n                paren_stack.pop()\n          \
    \      if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            raise ValueError(\"Invalid parentheses string\")\n\
    \    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8opz7x8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq8opz7x8.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq8opz7x8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpq8opz7x8.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError(\"Invalid parentheses string\")\nValueError: Invalid parentheses\
    \ string\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8wpdmii.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf8wpdmii.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpf8wpdmii.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        nesting = len(paren_stack)\n                if nesting > max_nesting:\n\
    \                    max_nesting = nesting\n                paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstv5kyaf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpstv5kyaf.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpstv5kyaf.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        elif\
    \ c == ' ':\n            if len(paren_stack) > max_depth:\n                max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5nh4qvk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmph5nh4qvk.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph5nh4qvk.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38mngu1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp38mngu1g.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp38mngu1g.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            last_open_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, i - last_open_paren)\n   \
    \         else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyor3pw_2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyor3pw_2.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyor3pw_2.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxwwjjyb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdxwwjjyb.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdxwwjjyb.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wjsl5wk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9wjsl5wk.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9wjsl5wk.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                nesting = len(paren_stack)\n\
    \                if nesting > max_nesting:\n                    max_nesting =\
    \ nesting\n                paren_stack.pop()\n        else:\n            raise\
    \ ValueError('Invalid character')\n    return max_nesting\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp872htvbv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp872htvbv.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp872htvbv.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp872htvbv.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError('Invalid character')\nValueError: Invalid character\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            nesting = len(paren_stack)\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa3y9vdt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqa3y9vdt.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqa3y9vdt.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                depth = len(paren_stack)\n\
    \                paren_stack.pop()\n                if depth > max_depth:\n  \
    \                  max_depth = depth\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_a5my8w.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpm_a5my8w.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm_a5my8w.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Invalid paren string\")\n            last_paren_index = paren_stack.pop()\n  \
    \          max_depth = max(max_depth, len(paren_stack))\n            i = last_paren_index\n\
    \        else:\n            raise ValueError(\"Invalid paren string\")\n    return\
    \ max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc884ngv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgc884ngv.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgc884ngv.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpgc884ngv.py\", line 23, in parse_nested_parens\n\
    \    raise ValueError(\"Invalid paren string\")\nValueError: Invalid paren string\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyaex11k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpiyaex11k.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpiyaex11k.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return paren_stack\n       \
    \     else:\n                paren_stack.append(paren_count)\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfowmf3q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdfowmf3q.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdfowmf3q.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        paren_stack.pop()\n                if len(paren_stack) > max_depth:\n\
    \                    max_depth = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaun0e5kf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpaun0e5kf.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpaun0e5kf.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            pass\n    return max_depth\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc31a4f1_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc31a4f1_.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpc31a4f1_.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni6wb5ow.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpni6wb5ow.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpni6wb5ow.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, char in enumerate(paren_string):\n        if\
    \ char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n\
    \            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                nesting = len(paren_stack)\
    \ - len(paren_stack.pop())\n                if nesting > max_nesting:\n      \
    \              max_nesting = nesting\n    return [max_nesting] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpal24ovfe.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpal24ovfe.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpal24ovfe.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpal24ovfe.py\", line 20, in parse_nested_parens\n\
    \    nesting = len(paren_stack) - len(paren_stack.pop())\nTypeError: object of\
    \ type 'int' has no len()\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            else:\n                paren_stack.pop()\n           \
    \     if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq247gk9h.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq247gk9h.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq247gk9h.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at index {}'.format(i))\n            else:\n           \
    \     paren_stack.pop()\n                if len(paren_stack) > max_depth:\n  \
    \                  max_depth = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt2nisi0y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpt2nisi0y.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpt2nisi0y.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpet23yrz6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpet23yrz6.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpet23yrz6.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxwwjjyb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdxwwjjyb.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdxwwjjyb.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(i)\n\
    \        elif c == ')':\n            if len(paren_stack) == 0:\n             \
    \   raise ValueError('Mismatched parentheses')\n            else:\n          \
    \      paren_stack.pop()\n    return [len(paren_stack)] * len(paren_stack)\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2kj0lbyx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2kj0lbyx.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2kj0lbyx.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            continue\n\n    return [len(paren_stack)] * max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkg5vtlhe.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpkg5vtlhe.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkg5vtlhe.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception('Invalid\
    \ input')\n            else:\n                paren_stack.pop()\n            \
    \    if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp09xdkjil.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp09xdkjil.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp09xdkjil.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count < 0:\n                raise ValueError('Invalid parentheses')\n\
    \            if paren_count == 0:\n                return paren_stack\n      \
    \  else:\n            pass\n    raise ValueError('Invalid parentheses')\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1bjl5fz5.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1bjl5fz5.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1bjl5fz5.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return []\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkeogsif6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkeogsif6.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkeogsif6.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError(\"Mismatched\
    \ parentheses\")\n            else:\n                paren_stack.pop()\n     \
    \           if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphme4a4cr.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmphme4a4cr.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphme4a4cr.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n\
    \            else:\n                result.append(paren_stack.pop())\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpro4_s6gc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpro4_s6gc.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpro4_s6gc.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == max_depth:\n                    max_depth\
    \ = max(max_depth, len(paren_stack))\n        else:\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, 1)\n            else:\n  \
    \              max_depth = max(max_depth, len(paren_stack))\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo38ijmd9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpo38ijmd9.py\", line 36,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpo38ijmd9.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n        elif c == ' ':\n\
    \            if len(paren_stack) > max_depth:\n                max_depth = len(paren_stack)\n\
    \    return [len(paren_stack)] * max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8zlw2b9k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8zlw2b9k.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp8zlw2b9k.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Invalid input')\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)] * len(paren_stack)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8u434hr0.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8u434hr0.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp8u434hr0.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, char in enumerate(paren_string):\n        if\
    \ char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n\
    \            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            nesting = len(paren_stack)\n            if\
    \ nesting > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5u7_1_4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpz5u7_1_4.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz5u7_1_4.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni6wb5ow.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpni6wb5ow.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpni6wb5ow.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            last_paren = paren_stack.pop()\n      \
    \      if len(paren_stack) == 0:\n                max_depth = max(max_depth, i\
    \ - last_paren)\n            else:\n                max_depth = max(max_depth,\
    \ i - paren_stack[-1])\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnid188lf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnid188lf.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnid188lf.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            nesting = len(paren_stack)\n            paren_stack.pop()\n\
    \            if nesting > max_nesting:\n                max_nesting = nesting\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4i3fwp3p.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4i3fwp3p.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4i3fwp3p.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \  if len(paren_stack) > max_depth:\n            max_depth = len(paren_stack)\n\
    \    return [max_depth - len(paren_stack) + 1] * max_depth\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi8aiz0il.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi8aiz0il.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi8aiz0il.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Invalid input\")\n            else:\n                paren_stack.pop()\n     \
    \           if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppy97s6lg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmppy97s6lg.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppy97s6lg.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        else:\n\
    \            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvs_anfa.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplvs_anfa.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplvs_anfa.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmplvs_anfa.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError('Mismatched parentheses')\nValueError: Mismatched parentheses\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihb5qexd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpihb5qexd.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpihb5qexd.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [i - 1] + [j - 1 for\
    \ j in paren_stack]\n            else:\n                paren_stack.pop()\n  \
    \  return [i - 1] + [j - 1 for j in paren_stack]\n\ndef check(candidate):\n  \
    \  assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8pw21n0f.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp8pw21n0f.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp8pw21n0f.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [max(x, y) for x, y in\
    \ zip(paren_stack, paren_stack[1:])]\n            else:\n                paren_stack.pop()\n\
    \    return [0]\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vifrks6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1vifrks6.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1vifrks6.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38mngu1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp38mngu1g.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp38mngu1g.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni6wb5ow.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpni6wb5ow.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpni6wb5ow.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ input')\n            else:\n                paren_stack.pop()\n        elif\
    \ char == ' ':\n            if len(paren_stack) == 0:\n                max_depth\
    \ = max(max_depth, len(paren_stack))\n            else:\n                paren_stack.append(i)\n\
    \    return [len(paren_stack)] * max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnnawux3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpnnawux3c.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnnawux3c.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, char in enumerate(paren_string):\n        if\
    \ char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n\
    \            if len(paren_stack) == 0:\n                raise ValueError(\"Mismatched\
    \ parentheses\")\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1jdbt9h4.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1jdbt9h4.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1jdbt9h4.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(0)\n\
    \            else:\n                result.append(len(paren_stack) - 1)\n    \
    \        paren_stack.pop()\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkw5bhjcr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkw5bhjcr.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkw5bhjcr.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Mismatched parentheses')\n        \
    \    paren_stack.pop()\n    return len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7hgfql5y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp7hgfql5y.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7hgfql5y.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38mngu1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp38mngu1g.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp38mngu1g.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return paren_stack[::-1]\n \
    \       else:\n            continue\n    return paren_stack[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdf90gx4c.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdf90gx4c.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdf90gx4c.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7z579lg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi7z579lg.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi7z579lg.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            paren_stack.pop()\n            if len(paren_stack)\
    \ > max_depth:\n                max_depth = len(paren_stack)\n        elif char\
    \ == ' ':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n    return [max_depth - len(paren_stack) + 1] * max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuk46lqsq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuk46lqsq.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuk46lqsq.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpuk46lqsq.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError('Invalid parentheses string')\nValueError: Invalid parentheses\
    \ string\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            last_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ > max_depth:\n                max_depth = len(paren_stack)\n            if len(paren_stack)\
    \ == 0:\n                break\n            i = last_paren\n        else:\n  \
    \          raise ValueError('Invalid character in parens string')\n    return\
    \ [max_depth]\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpack3kq9b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpack3kq9b.py\", line 35,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpack3kq9b.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            last_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ > 0:\n                max_depth = max(max_depth, len(paren_stack))\n       \
    \     else:\n                max_depth = max(max_depth, i - last_paren)\n    return\
    \ [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxkfv1nv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprxkfv1nv.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprxkfv1nv.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Unbalanced parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmk04epv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpvmk04epv.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvmk04epv.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8wpdmii.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf8wpdmii.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpf8wpdmii.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \  if len(paren_stack) > max_depth:\n            max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfjlvvgl3.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfjlvvgl3.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpfjlvvgl3.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                return [0]\n            else:\n                paren_stack.pop()\n\
    \    return [len(paren_stack)]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq52h_v4n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq52h_v4n.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq52h_v4n.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            else:\n                paren_stack.pop()\n           \
    \     if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        elif c == ' ':\n            if len(paren_stack) > 0:\n              \
    \  continue\n            else:\n                raise ValueError('Invalid parentheses\
    \ string')\n    return max_depth\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ysjorr7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp5ysjorr7.py\", line 36,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5ysjorr7.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp5ysjorr7.py\", line 27, in parse_nested_parens\n\
    \    raise ValueError('Invalid parentheses string')\nValueError: Invalid parentheses\
    \ string\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            last_index = paren_stack.pop()\n         \
    \   if len(paren_stack) > max_depth:\n                max_depth = len(paren_stack)\n\
    \            if len(paren_stack) == 0:\n                return [max_depth]\n \
    \           else:\n                return [max_depth, last_index]\n    raise ValueError('Invalid\
    \ parentheses string')\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp36eoqp0s.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp36eoqp0s.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp36eoqp0s.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            nesting = len(paren_stack)\n            paren_stack.pop()\n\
    \            if nesting > max_nesting:\n                max_nesting = nesting\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwcx6gey5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpwcx6gey5.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwcx6gey5.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        elif\
    \ c == ' ':\n            if len(paren_stack) > max_depth:\n                max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe33hr62v.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe33hr62v.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpe33hr62v.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, char in enumerate(paren_string):\n        if\
    \ char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n\
    \            if len(paren_stack) == 0:\n                raise Exception('Invalid\
    \ parentheses')\n            else:\n                nesting = len(paren_stack)\
    \ - len(paren_stack.pop())\n                if nesting > max_nesting:\n      \
    \              max_nesting = nesting\n    return [max_nesting] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7yob17sh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp7yob17sh.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7yob17sh.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp7yob17sh.py\", line 20, in parse_nested_parens\n\
    \    nesting = len(paren_stack) - len(paren_stack.pop())\nTypeError: object of\
    \ type 'int' has no len()\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n\
    \            else:\n                result.append(paren_stack.pop())\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpro4_s6gc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpro4_s6gc.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpro4_s6gc.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Unexpected ')' at index \" + str(i) + \" in \" + paren_string)\n            else:\n\
    \                paren_stack.pop()\n                if len(paren_stack) > max_depth:\n\
    \                    max_depth = len(paren_stack)\n        else:\n           \
    \ if len(paren_stack) > max_depth:\n                max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzjv7vedy.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpzjv7vedy.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzjv7vedy.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \        else:\n            raise ValueError('Invalid character')\n    if len(paren_stack)\
    \ > 0:\n        raise ValueError('Mismatched parentheses')\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxri_0rw3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxri_0rw3.py\", line 35,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxri_0rw3.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpxri_0rw3.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError('Invalid character')\nValueError: Invalid character\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [max(x, y) for x, y in\
    \ zip(paren_stack, paren_stack[1:])]\n            else:\n                paren_stack.pop()\n\
    \    return [0]\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1vifrks6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1vifrks6.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1vifrks6.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [max(x, y) for x, y in\
    \ zip(paren_stack, paren_stack[1:])]\n            else:\n                paren_stack.pop()\n\
    \    return []\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvqvhs0b.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuvqvhs0b.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuvqvhs0b.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n        if len(paren_stack)\
    \ > max_depth:\n            max_depth = len(paren_stack)\n    return [len(paren_stack)\
    \ - 1] * max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzw99sf5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxzw99sf5.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxzw99sf5.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                nesting = len(paren_stack)\n             \
    \   if nesting > max_nesting:\n                    max_nesting = nesting\n   \
    \             paren_stack.pop()\n        else:\n            raise ValueError('Invalid\
    \ character')\n    if len(paren_stack) > 0:\n        raise ValueError('Mismatched\
    \ parentheses')\n    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprne778q6.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmprne778q6.py\", line 36,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprne778q6.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmprne778q6.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError('Invalid character')\nValueError: Invalid character\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpihb5qexd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpihb5qexd.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpihb5qexd.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7z579lg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi7z579lg.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi7z579lg.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            last_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, i - last_paren)\n        \
    \    else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rw0umuz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2rw0umuz.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2rw0umuz.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            nesting = len(paren_stack)\n            if\
    \ nesting > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1a45bplv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp1a45bplv.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1a45bplv.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if len(paren_stack) > 0 and paren_count == paren_stack[-1]:\n    \
    \            paren_stack.pop()\n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxylu1oe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbxylu1oe.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbxylu1oe.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n        else:\n            if len(paren_stack) == 0:\n \
    \               raise ValueError(\"Mismatched parentheses\")\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbr1baerb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbr1baerb.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbr1baerb.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpbr1baerb.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError(\"Mismatched parentheses\")\nValueError: Mismatched parentheses\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ == 0:\n                    max_depth = max(max_depth, len(paren_stack))\n  \
    \              else:\n                    max_depth = max(max_depth, len(paren_stack))\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz58dh6l6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpz58dh6l6.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz58dh6l6.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n        if len(paren_stack)\
    \ > max_depth:\n            max_depth = len(paren_stack)\n    return [len(paren_stack)\
    \ - 1] * max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzw99sf5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxzw99sf5.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxzw99sf5.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(i)\n\
    \        elif c == ')':\n            if len(paren_stack) == 0:\n             \
    \   raise ValueError('Invalid parentheses')\n            paren_stack.pop()\n \
    \   return [len(paren_stack) for _ in range(len(paren_string))]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpij_vb6rt.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpij_vb6rt.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpij_vb6rt.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            last_paren_index = paren_stack.pop()\n   \
    \         if len(paren_stack) > 0:\n                max_depth = max(max_depth,\
    \ len(paren_stack))\n            else:\n                max_depth = max(max_depth,\
    \ i - last_paren_index)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp233d3gsl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp233d3gsl.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp233d3gsl.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        elif\
    \ c == ' ':\n            if len(paren_stack) > max_depth:\n                max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5nh4qvk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmph5nh4qvk.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph5nh4qvk.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError(\"Mismatched parentheses\"\
    )\n            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ == max_depth:\n                    max_depth = 0\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdn3uf85s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpdn3uf85s.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdn3uf85s.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        nesting = len(paren_stack) - len(paren_stack.pop())\n               \
    \ if nesting > max_nesting:\n                    max_nesting = nesting\n    return\
    \ [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzahyfwa.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqzahyfwa.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqzahyfwa.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqzahyfwa.py\", line 20, in parse_nested_parens\n\
    \    nesting = len(paren_stack) - len(paren_stack.pop())\nTypeError: object of\
    \ type 'int' has no len()\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return paren_stack\n       \
    \     else:\n                paren_stack.append(paren_count)\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfowmf3q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdfowmf3q.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdfowmf3q.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            last_paren_index = paren_stack.pop()\n   \
    \         max_depth = max(max_depth, len(paren_stack))\n            i = last_paren_index\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme2y33a2.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpme2y33a2.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpme2y33a2.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                nesting = len(paren_stack)\n\
    \                if nesting > max_nesting:\n                    max_nesting =\
    \ nesting\n                paren_stack.pop()\n    if len(paren_stack) != 0:\n\
    \        raise ValueError('Mismatched parentheses')\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr9ep6lww.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr9ep6lww.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpr9ep6lww.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            nesting = len(paren_stack) - 1\n            if nesting > max_nesting:\n\
    \                max_nesting = nesting\n            paren_stack.pop()\n      \
    \  else:\n            raise ValueError('Invalid character in input')\n    return\
    \ [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tm0mx7m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6tm0mx7m.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6tm0mx7m.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp6tm0mx7m.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError('Invalid character in input')\nValueError: Invalid character\
    \ in input\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            nesting = len(paren_stack) - 1\n            if nesting > max_nesting:\n\
    \                max_nesting = nesting\n            paren_stack.pop()\n    return\
    \ [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ydnaave.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6ydnaave.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6ydnaave.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [max(x, y) for x, y in\
    \ zip(paren_stack, paren_stack[1:])]\n            else:\n                paren_stack.pop()\n\
    \    return []\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvqvhs0b.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuvqvhs0b.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuvqvhs0b.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            last_paren_index = paren_stack.pop()\n   \
    \         if len(paren_stack) > 0:\n                max_depth = max(max_depth,\
    \ len(paren_stack))\n            else:\n                max_depth = max(max_depth,\
    \ i - last_paren_index)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp233d3gsl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp233d3gsl.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp233d3gsl.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                return [0]\n            else:\n                paren_stack.pop()\n\
    \    return [len(paren_stack)]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq52h_v4n.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpq52h_v4n.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq52h_v4n.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqivevpjo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqivevpjo.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqivevpjo.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, char in enumerate(paren_string):\n        if\
    \ char == '(':\n            paren_stack.append(i)\n        elif char == ')':\n\
    \            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    if len(paren_stack) != 0:\n        raise ValueError('Mismatched parentheses')\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5muo1jg8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5muo1jg8.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5muo1jg8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            continue\n    return [max_depth] * len(paren_stack)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uem_rjh.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp2uem_rjh.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2uem_rjh.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if len(paren_stack) == 0:\n                return [paren_count]\n\
    \            else:\n                return [paren_stack.pop()] + parse_nested_parens(paren_string[i:])\n\
    \    return [paren_count]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcq43jpkf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcq43jpkf.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpcq43jpkf.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            last_paren_index = paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, i - last_paren_index)\n  \
    \          else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptod8kvcs.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmptod8kvcs.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptod8kvcs.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpndha5gpv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpndha5gpv.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpndha5gpv.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxwwjjyb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdxwwjjyb.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdxwwjjyb.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n        else:\n            continue\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9bhhz1fs.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp9bhhz1fs.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9bhhz1fs.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38mngu1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp38mngu1g.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp38mngu1g.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \        else:\n            raise ValueError('Invalid character')\n    return\
    \ max_nesting\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmenlpbwk.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpmenlpbwk.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmenlpbwk.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpmenlpbwk.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError('Invalid character')\nValueError: Invalid character\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            last_paren_index = paren_stack.pop()\n   \
    \         max_depth = max(max_depth, len(paren_stack))\n            if len(paren_stack)\
    \ == 0:\n                break\n            else:\n                paren_stack[-1]\
    \ = last_paren_index\n    return [max_depth] + list(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4rm3427.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpx4rm3427.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx4rm3427.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        paren_stack.pop()\n                if len(paren_stack) > max_depth:\n\
    \                    max_depth = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaun0e5kf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpaun0e5kf.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpaun0e5kf.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                raise ValueError(\"Invalid\
    \ input string\")\n            last_index = paren_stack.pop()\n            nesting_level\
    \ = len(paren_stack)\n            if nesting_level > 0:\n                nesting_level\
    \ += 1\n            return [nesting_level, last_index]\n    raise ValueError(\"\
    Invalid input string\")\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmq1bhk0n.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpmq1bhk0n.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmq1bhk0n.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n\
    \            else:\n                result.append(paren_stack.pop())\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpro4_s6gc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpro4_s6gc.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpro4_s6gc.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Unexpected closing\
    \ parenthesis at position {}'.format(i))\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return [len(paren_stack)] * max_depth\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp30iewe9b.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp30iewe9b.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp30iewe9b.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i, c in enumerate(paren_string):\n        if c == '(':\n\
    \            paren_stack.append(i)\n        elif c == ')':\n            if len(paren_stack)\
    \ == 0:\n                result.append(0)\n            else:\n               \
    \ result.append(len(paren_stack) - 1)\n            paren_stack.pop()\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps_q2l2dn.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmps_q2l2dn.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmps_q2l2dn.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ == 0:\n                    max_depth = max(max_depth, len(paren_stack))\n  \
    \              else:\n                    max_depth = max(max_depth, len(paren_stack))\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwmw6va3s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwmw6va3s.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwmw6va3s.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ input')\n            else:\n                paren_stack.pop()\n            \
    \    if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiauu5301.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpiauu5301.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpiauu5301.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            nesting = len(paren_stack) - 1\n            if nesting > max_nesting:\n\
    \                max_nesting = nesting\n            paren_stack.pop()\n      \
    \  else:\n            raise ValueError('Invalid character in parens string')\n\
    \    if len(paren_stack) > 0:\n        raise ValueError('Mismatched parentheses')\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkdc3w9kv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpkdc3w9kv.py\", line 35,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkdc3w9kv.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkdc3w9kv.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError('Invalid character in parens string')\nValueError: Invalid\
    \ character in parens string\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            last_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, i - last_paren)\n        \
    \    else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2rw0umuz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2rw0umuz.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2rw0umuz.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9w8ocw5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph9w8ocw5.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph9w8ocw5.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError(\"Invalid parentheses\
    \ string\")\n            else:\n                paren_stack.pop()\n          \
    \      if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            continue\n    return [max_depth] * len(paren_stack)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsl5sr3__.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpsl5sr3__.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsl5sr3__.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                nesting = len(paren_stack)\n\
    \                if nesting > max_nesting:\n                    max_nesting =\
    \ nesting\n                paren_stack.pop()\n        else:\n            raise\
    \ ValueError('Invalid character in paren string')\n    if len(paren_stack) > 0:\n\
    \        raise ValueError('Mismatched parentheses')\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7w_mz7np.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp7w_mz7np.py\", line 36,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7w_mz7np.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp7w_mz7np.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError('Invalid character in paren string')\nValueError: Invalid\
    \ character in paren string\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis')\n            nesting = len(paren_stack)\n            if\
    \ nesting > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9o2hns2j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9o2hns2j.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9o2hns2j.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxme48fsa.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxme48fsa.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxme48fsa.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for paren in paren_string.split():\n        if paren ==\
    \ '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n  \
    \          if len(paren_stack) > 0:\n                result.append(len(paren_stack))\n\
    \                paren_stack.pop()\n            else:\n                raise ValueError('Invalid\
    \ parentheses')\n    return result\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk19aqqy6.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpk19aqqy6.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpk19aqqy6.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            else:\n                paren_stack.pop()\n           \
    \     if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            pass\n    return [max_depth] * len(paren_stack)\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghor76uy.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpghor76uy.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpghor76uy.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ == max_depth:\n                    max_depth = 0\n                    for j\
    \ in range(i - 1, -1, -1):\n                        if paren_string[j] == '(':\n\
    \                            max_depth += 1\n                        elif paren_string[j]\
    \ == ')':\n                            max_depth -= 1\n                      \
    \  if max_depth == 0:\n                            break\n                max_depth\
    \ += 1\n    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n \
    \   assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp154pxef.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpp154pxef.py\", line 39,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpp154pxef.py\"\
    , line 34, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Invalid parentheses')\n           \
    \ last_paren_index = paren_stack.pop()\n            if len(paren_stack) == 0:\n\
    \                return [i - last_paren_index]\n            else:\n          \
    \      return [i - last_paren_index, paren_stack[-1]]\n    raise ValueError('Invalid\
    \ parentheses')\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_yjx6g_n.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_yjx6g_n.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_yjx6g_n.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for paren in paren_string.split():\n        if paren ==\
    \ '(':\n            paren_stack.append(paren)\n        elif paren == ')':\n  \
    \          if len(paren_stack) > 0:\n                result.append(len(paren_stack))\n\
    \                paren_stack.pop()\n            else:\n                raise ValueError('Mismatched\
    \ parentheses')\n    if len(paren_stack) > 0:\n        raise ValueError('Mismatched\
    \ parentheses')\n    return result\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgoyn2q1u.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgoyn2q1u.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgoyn2q1u.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Invalid input')\n            else:\n\
    \                paren_stack.pop()\n    return len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpta2zfdbz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpta2zfdbz.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpta2zfdbz.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ input')\n            last_paren_index = paren_stack.pop()\n            nested_parens\
    \ = len(paren_stack)\n            if nested_parens > 0:\n                nested_parens\
    \ += 1\n            return [nested_parens, last_paren_index]\n    raise ValueError('Invalid\
    \ input')\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu64ezsds.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu64ezsds.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu64ezsds.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            nesting = len(paren_stack) - 1\n            if nesting > max_nesting:\n\
    \                max_nesting = nesting\n            paren_stack.pop()\n    return\
    \ [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ydnaave.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6ydnaave.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6ydnaave.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Unbalanced parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == max_depth:\n                    max_depth\
    \ = max(max_depth, len(paren_stack))\n    return [max_depth - len(paren_stack)\
    \ + 1] * max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mjx55n2.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp4mjx55n2.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4mjx55n2.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError(\"Mismatched\
    \ parentheses\")\n            paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, len(paren_stack))\n      \
    \  else:\n            if len(paren_stack) == 0:\n                max_depth = max(max_depth,\
    \ 1)\n            else:\n                max_depth = max(max_depth, len(paren_stack))\n\
    \n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmply26sfe9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmply26sfe9.py\", line 36,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmply26sfe9.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split(' '):\n        if paren == '(':\n       \
    \     paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Invalid parentheses string')\n    \
    \        else:\n                paren_stack.pop()\n    return len(paren_stack)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnj6xi9z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpmnj6xi9z.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmnj6xi9z.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxwwjjyb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdxwwjjyb.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdxwwjjyb.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n            paren_count += 1\n    \
    \    elif c == ')':\n            if len(paren_stack) == 0:\n                raise\
    \ ValueError('Unbalanced parentheses')\n            paren_count -= 1\n       \
    \     paren_stack.pop()\n        if len(paren_stack) == paren_count:\n       \
    \     return paren_stack\n    raise ValueError('Unbalanced parentheses')\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp491ts6ms.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp491ts6ms.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp491ts6ms.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise Exception('Mismatched parentheses')\n         \
    \   last_paren_index = paren_stack.pop()\n            if len(paren_stack) == 0:\n\
    \                return [i - last_paren_index]\n            else:\n          \
    \      return [i - last_paren_index, i - paren_stack[-1]]\n    raise Exception('Mismatched\
    \ parentheses')\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbabfpthg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbabfpthg.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbabfpthg.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                return [i]\n            else:\n                paren_stack.pop()\n\
    \    return [len(paren_stack)]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7cgh2vus.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp7cgh2vus.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7cgh2vus.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n\
    \            else:\n                result.append(paren_stack.pop())\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpro4_s6gc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpro4_s6gc.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpro4_s6gc.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n    return\
    \ [len(paren_stack)] + [len(paren_stack) - i for i in range(1, len(paren_stack))]\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvk_sd_qw.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvk_sd_qw.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvk_sd_qw.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception(\"\
    Invalid input\")\n            else:\n                paren_stack.pop()\n     \
    \           if len(paren_stack) == max_depth:\n                    max_depth =\
    \ max(max_depth, len(paren_stack))\n    return [max_depth] * len(paren_stack)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcazyllc_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpcazyllc_.py\", line 31,\
    \ in test_check\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError(\"Invalid input\"\
    )\n            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        elif\
    \ c == ' ':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Invalid input\")\n    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7vz9bxiv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp7vz9bxiv.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7vz9bxiv.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp7vz9bxiv.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError(\"Invalid input\")\nValueError: Invalid input\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Mismatched parentheses')\n        \
    \    else:\n                paren_stack.pop()\n    return len(paren_stack)\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsd6z8yzt.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsd6z8yzt.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsd6z8yzt.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38mngu1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp38mngu1g.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp38mngu1g.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            last_paren_index = paren_stack.pop()\n          \
    \  if len(paren_stack) == 0:\n                max_depth = max(max_depth, i - last_paren_index)\n\
    \            else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphu_gl775.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmphu_gl775.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphu_gl775.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return paren_stack\n       \
    \     paren_stack.append(paren_count)\n    return paren_stack\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnxkwp8ve.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpnxkwp8ve.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnxkwp8ve.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(i)\n\
    \        elif c == ')':\n            if len(paren_stack) == 0:\n             \
    \   return [i]\n            else:\n                paren_stack.pop()\n    return\
    \ [len(paren_stack)]\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpliuyll35.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpliuyll35.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpliuyll35.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            continue\n\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwwj0852u.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpwwj0852u.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwwj0852u.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqivevpjo.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqivevpjo.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqivevpjo.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5nihlgq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpn5nihlgq.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpn5nihlgq.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            else:\n                paren_stack.pop()\n        if len(paren_stack)\
    \ > max_depth:\n            max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmlfu8l6.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzmlfu8l6.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzmlfu8l6.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n                else:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return max_depth\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4fyv_d1g.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp4fyv_d1g.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4fyv_d1g.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n        else:\n            continue\n\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcypckn7a.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcypckn7a.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpcypckn7a.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [max(x, y) for x, y in\
    \ zip(paren_stack, paren_stack[1:])]\n            else:\n                paren_stack.pop()\n\
    \    return [paren_count]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzm5nbl4q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpzm5nbl4q.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzm5nbl4q.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        paren_stack.pop()\n                if len(paren_stack) == 0:\n      \
    \              max_depth = max(max_depth, len(paren_stack))\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf7zwyfq5.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf7zwyfq5.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpf7zwyfq5.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n        else:\n            continue\n    return [max_depth]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgcbbo27b.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgcbbo27b.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgcbbo27b.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [i]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpal_xtb6e.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpal_xtb6e.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpal_xtb6e.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            nesting = len(paren_stack) - 1\n            if nesting > max_nesting:\n\
    \                max_nesting = nesting\n            paren_stack.pop()\n    return\
    \ [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ydnaave.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6ydnaave.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6ydnaave.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n\
    \            else:\n                result.append(paren_stack.pop())\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpro4_s6gc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpro4_s6gc.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpro4_s6gc.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, c in enumerate(paren_string):\n        if c == '(':\n            paren_stack.append(i)\n\
    \        elif c == ')':\n            if len(paren_stack) == 0:\n             \
    \   raise ValueError('Invalid parentheses string')\n            last_paren_index\
    \ = paren_stack.pop()\n            nesting_level = len(paren_stack)\n        \
    \    if nesting_level > 0:\n                nesting_level += 1\n            yield\
    \ nesting_level\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qnbxwnb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_qnbxwnb.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_qnbxwnb.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError(\"Invalid input\
    \ string\")\n            last_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, i - last_paren)\n        \
    \    else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplnzphu1x.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplnzphu1x.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplnzphu1x.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsg8w1jbe.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsg8w1jbe.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsg8w1jbe.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                return []\n            else:\n                paren_stack.pop()\n\
    \    return [len(paren_stack)] * len(paren_stack)\n\ndef check(candidate):\n \
    \   assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpja5kmnpf.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpja5kmnpf.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpja5kmnpf.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpni6wb5ow.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpni6wb5ow.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpni6wb5ow.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(0)\n\
    \            else:\n                result.append(len(paren_stack) - 1)\n    \
    \        paren_stack.pop()\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkw5bhjcr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkw5bhjcr.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkw5bhjcr.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ input string')\n            nesting = len(paren_stack)\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    if len(paren_stack) > 0:\n        raise ValueError('Invalid input string')\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd1_cy1wl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpd1_cy1wl.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd1_cy1wl.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Invalid parentheses string')\n    \
    \        else:\n                paren_stack.pop()\n    return [len(paren_stack)\
    \ for _ in range(len(paren_string))]\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5dgd0y12.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5dgd0y12.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5dgd0y12.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(0)\n\
    \            else:\n                result.append(len(paren_stack))\n        \
    \        paren_stack.pop()\n    return result\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmuypj87i.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmuypj87i.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpmuypj87i.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                result.append(i)\n\
    \            else:\n                result.append(paren_stack.pop())\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpro4_s6gc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpro4_s6gc.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpro4_s6gc.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return []\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkeogsif6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkeogsif6.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkeogsif6.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Unbalanced parenthesis\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hqe1a2y.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_hqe1a2y.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_hqe1a2y.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn5nihlgq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpn5nihlgq.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpn5nihlgq.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ len(paren_stack))\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcmqprpn.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbcmqprpn.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbcmqprpn.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Mismatched parentheses')\n        \
    \    else:\n                paren_stack.pop()\n    return [len(paren_stack)] +\
    \ [len(paren_stack) - 1] * (len(paren_stack) - 1)\n\ndef check(candidate):\n \
    \   assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcl4aiiyp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcl4aiiyp.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpcl4aiiyp.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for i, char in enumerate(paren_string):\n        if char\
    \ == '(':\n            paren_stack.append(i)\n        elif char == ')':\n    \
    \        if len(paren_stack) == 0:\n                raise Exception('Mismatched\
    \ parentheses')\n            result.append(len(paren_stack) - 1)\n           \
    \ paren_stack.pop()\n    if len(paren_stack) != 0:\n        raise Exception('Mismatched\
    \ parentheses')\n    return result\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo3gsvi8o.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo3gsvi8o.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpo3gsvi8o.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            last_index = paren_stack.pop()\n            if len(paren_stack)\
    \ > max_depth:\n                max_depth = len(paren_stack)\n            if len(paren_stack)\
    \ == 0:\n                break\n            i = last_index\n        else:\n  \
    \          continue\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy0ipz26y.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy0ipz26y.py\", line 35,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpy0ipz26y.py\"\
    , line 30, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        elif\
    \ c == ' ':\n            if len(paren_stack) > 0:\n                continue\n\
    \            else:\n                raise ValueError('Invalid parentheses')\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fvc7502.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp6fvc7502.py\", line 36,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6fvc7502.py\"\
    , line 31, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp6fvc7502.py\", line 27, in parse_nested_parens\n\
    \    raise ValueError('Invalid parentheses')\nValueError: Invalid parentheses\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return [max(x, y) for x, y in\
    \ zip(paren_stack, paren_stack[1:])]\n            else:\n                paren_stack.pop()\n\
    \    return []\n\ndef check(candidate):\n    assert candidate('(()()) ((())) ()\
    \ ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvqvhs0b.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuvqvhs0b.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuvqvhs0b.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460314
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for paren in paren_string.split():\n        if paren == '(':\n          \
    \  paren_stack.append(paren)\n        elif paren == ')':\n            if len(paren_stack)\
    \ > 0:\n                paren_stack.pop()\n            else:\n               \
    \ return [0]\n    return [len(paren_stack)]\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsokgq4ge.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsokgq4ge.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsokgq4ge.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            last_paren_index = paren_stack.pop()\n          \
    \  if len(paren_stack) > max_depth:\n                max_depth = len(paren_stack)\n\
    \            if len(paren_stack) == 0:\n                return [max_depth]\n \
    \           else:\n                return [max_depth, last_paren_index]\n    raise\
    \ ValueError('Mismatched parentheses')\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4arpelsr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp4arpelsr.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4arpelsr.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    result = []\n    for p in paren_string.split():\n        if p == '(':\n \
    \           paren_stack.append(p)\n        elif p == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Mismatched parentheses')\n        \
    \    result.append(len(paren_stack))\n            paren_stack.pop()\n        else:\n\
    \            raise ValueError('Invalid input')\n    if len(paren_stack) > 0:\n\
    \        raise ValueError('Mismatched parentheses')\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1clv7_2v.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1clv7_2v.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1clv7_2v.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp1clv7_2v.py\", line 22, in parse_nested_parens\n\
    \    raise ValueError('Invalid input')\nValueError: Invalid input\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ input')\n            last_paren_index = paren_stack.pop()\n            if len(paren_stack)\
    \ > max_depth:\n                max_depth = len(paren_stack)\n            if len(paren_stack)\
    \ == 0:\n                break\n            else:\n                i = last_paren_index\n\
    \    return [max_depth] * max_depth\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpagt0iea0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpagt0iea0.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpagt0iea0.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i, char in enumerate(paren_string):\n        if char == '(':\n      \
    \      paren_stack.append(i)\n        elif char == ')':\n            if len(paren_stack)\
    \ == 0:\n                raise ValueError('Invalid parentheses string')\n    \
    \        else:\n                paren_stack.pop()\n    return [len(paren_stack)]\
    \ * len(paren_string)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa1t3g62x.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa1t3g62x.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpa1t3g62x.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            else:\n                paren_stack.pop()\n           \
    \     if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeceks93n.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpeceks93n.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeceks93n.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpeceks93n.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError('Invalid parentheses string')\nValueError: Invalid parentheses\
    \ string\n"
  stdout: ''
  timestamp: 1662460316
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7z579lg.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpi7z579lg.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpi7z579lg.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460313
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsg8w1jbe.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsg8w1jbe.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsg8w1jbe.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1662460315
