language: py
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise Exception(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) == 0:\n                    max_depth = max(max_depth,\
    \ i - paren_stack[-1])\n                else:\n                    max_depth =\
    \ max(max_depth, i - paren_stack[-1])\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7ao2wf8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu7ao2wf8.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7ao2wf8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpu7ao2wf8.py\", line 22, in parse_nested_parens\n\
    \    max_depth = max(max_depth, i - paren_stack[-1])\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError(\"Invalid parentheses\
    \ string\")\n            else:\n                paren_stack.pop()\n          \
    \      if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            raise ValueError(\"Invalid parentheses string\")\n\
    \    return [max_depth] * len(paren_stack)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8opz7x8.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpq8opz7x8.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq8opz7x8.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpq8opz7x8.py\", line 24, in parse_nested_parens\n\
    \    raise ValueError(\"Invalid parentheses string\")\nValueError: Invalid parentheses\
    \ string\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8wpdmii.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpf8wpdmii.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpf8wpdmii.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        nesting = len(paren_stack)\n                if nesting > max_nesting:\n\
    \                    max_nesting = nesting\n                paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstv5kyaf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpstv5kyaf.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpstv5kyaf.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n        elif\
    \ c == ' ':\n            if len(paren_stack) > max_depth:\n                max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph5nh4qvk.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmph5nh4qvk.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph5nh4qvk.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Mismatched parentheses\")\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp38mngu1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp38mngu1g.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp38mngu1g.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses\
    \ string')\n            last_open_paren = paren_stack.pop()\n            if len(paren_stack)\
    \ == 0:\n                max_depth = max(max_depth, i - last_open_paren)\n   \
    \         else:\n                max_depth = max(max_depth, i - paren_stack[-1])\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyor3pw_2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpyor3pw_2.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyor3pw_2.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Mismatched parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdxwwjjyb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdxwwjjyb.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdxwwjjyb.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i, c in enumerate(paren_string):\n        if c ==\
    \ '(':\n            paren_stack.append(i)\n        elif c == ')':\n          \
    \  if len(paren_stack) == 0:\n                raise ValueError('Invalid parentheses')\n\
    \            else:\n                paren_stack.pop()\n                if len(paren_stack)\
    \ > max_depth:\n                    max_depth = len(paren_stack)\n    return [max_depth]\
    \ * len(paren_stack)\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wjsl5wk.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9wjsl5wk.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9wjsl5wk.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                nesting = len(paren_stack)\n\
    \                if nesting > max_nesting:\n                    max_nesting =\
    \ nesting\n                paren_stack.pop()\n        else:\n            raise\
    \ ValueError('Invalid character')\n    return max_nesting\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp872htvbv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp872htvbv.py\", line 34,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp872htvbv.py\"\
    , line 29, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp872htvbv.py\", line 25, in parse_nested_parens\n\
    \    raise ValueError('Invalid character')\nValueError: Invalid character\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxiikgt22.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpxiikgt22.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxiikgt22.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unbalanced\
    \ parentheses')\n            nesting = len(paren_stack)\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqa3y9vdt.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpqa3y9vdt.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqa3y9vdt.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    for i in range(len(paren_string)):\n        if paren_string[i] == '(':\n\
    \            paren_stack.append(i)\n        elif paren_string[i] == ')':\n   \
    \         if len(paren_stack) == 0:\n                return [0]\n            else:\n\
    \                paren_stack.pop()\n    return [len(paren_stack)]\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkaa535_h.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpkaa535_h.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkaa535_h.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                depth = len(paren_stack)\n\
    \                paren_stack.pop()\n                if depth > max_depth:\n  \
    \                  max_depth = depth\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_a5my8w.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpm_a5my8w.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm_a5my8w.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError(\"\
    Invalid paren string\")\n            last_paren_index = paren_stack.pop()\n  \
    \          max_depth = max(max_depth, len(paren_stack))\n            i = last_paren_index\n\
    \        else:\n            raise ValueError(\"Invalid paren string\")\n    return\
    \ max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgc884ngv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgc884ngv.py\", line 32,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgc884ngv.py\"\
    , line 27, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpgc884ngv.py\", line 23, in parse_nested_parens\n\
    \    raise ValueError(\"Invalid paren string\")\nValueError: Invalid paren string\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_nesting = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses')\n            nesting = len(paren_stack) - 1\n            if nesting\
    \ > max_nesting:\n                max_nesting = nesting\n            paren_stack.pop()\n\
    \    return [max_nesting] * len(paren_string)\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiyaex11k.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpiyaex11k.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpiyaex11k.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    paren_count = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(paren_count)\n            paren_count\
    \ += 1\n        elif paren_string[i] == ')':\n            paren_count -= 1\n \
    \           if paren_count == 0:\n                return paren_stack\n       \
    \     else:\n                paren_stack.append(paren_count)\n    return paren_stack\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfowmf3q.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdfowmf3q.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdfowmf3q.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Unexpected\
    \ closing parenthesis at position {}'.format(i))\n            else:\n        \
    \        paren_stack.pop()\n                if len(paren_stack) > max_depth:\n\
    \                    max_depth = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaun0e5kf.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpaun0e5kf.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpaun0e5kf.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            else:\n                paren_stack.pop()\n\
    \                if len(paren_stack) > max_depth:\n                    max_depth\
    \ = len(paren_stack)\n    return [max_depth] * len(paren_string)\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7uhy34d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpu7uhy34d.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu7uhy34d.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984036
- exit_code: 1
  program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
    \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n    paren_stack = []\n\
    \    max_depth = 0\n    for i in range(len(paren_string)):\n        if paren_string[i]\
    \ == '(':\n            paren_stack.append(i)\n        elif paren_string[i] ==\
    \ ')':\n            if len(paren_stack) == 0:\n                raise ValueError('Mismatched\
    \ parentheses')\n            else:\n                paren_stack.pop()\n      \
    \          if len(paren_stack) > max_depth:\n                    max_depth = len(paren_stack)\n\
    \        else:\n            pass\n    return max_depth\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc31a4f1_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpc31a4f1_.py\", line 33,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpc31a4f1_.py\"\
    , line 28, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984037
