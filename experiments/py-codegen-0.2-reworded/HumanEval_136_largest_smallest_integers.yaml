name: HumanEval_136_largest_smallest_integers
language: py
prompt: "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst:\
  \ List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function\
  \ that returns a tuple (a, b), where 'a' is\n    the largest of negative integers,\
  \ and 'b' is the smallest\n    of positive integers in a list.\n    If there is\
  \ no negative or positive integers, return them as None.\n\n    Examples:\n    >>>\
  \ largest_smallest_integers([2, 4, 1, 3, 5, 7]) \n    (None, 1)\n    >>> largest_smallest_integers([])\
  \ \n    (None, None)\n    >>> largest_smallest_integers([0]) \n    (None, None)\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None,\
  \ 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1,\
  \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) ==\
  \ (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert\
  \ candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n   \
  \ assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3,\
  \ -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n\
  \    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\ndef test_check():\n\
  \    check(largest_smallest_integers)\n\ntest_check()\n"
completions: ["    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n\
    \            if a is None:\n                a = i\n            else:\n       \
    \         a = max(a, i)\n        else:\n            if b is None:\n          \
    \      b = i\n            else:\n                b = min(b, i)\n    return a,\
    \ b\n
  "    a = b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n\
    \                a = i\n            else:\n                a = max(a, i)\n   \
    \     else:\n            if b is None:\n                b = i\n            else:\n\
    \                b = min(b, i)\n    return a, b\n", "    if len(lst) == 0:\n \
    \       return (None, None)\n    neg_ints = [i for i in lst if i < 0]\n    pos_ints\
    \ = [i for i in lst if i > 0]\n    if len(neg_ints) > 0:\n        return (max(neg_ints),\
    \ min(pos_ints))\n    else:\n        return (None, None)\n<|endoftext|><|python|>#\
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                      ", "  \
    \  return max(filter(lambda x: x < 0, lst)), min(filter(lambda x: x > 0, lst))\n",
  "    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n            if\
    \ a is None:\n                a = i\n            else:\n                a = max(a,\
    \ i)\n        else:\n            if b is None:\n                b = i\n      \
    \      else:\n                b = min(b, i)\n    return a, b\n", "    a = None\n\
    \    b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n\
    \                a = i\n            else:\n                a = max(a, i)\n   \
    \     else:\n            if b is None:\n                b = i\n            else:\n\
    \                b = min(b, i)\n    return a, b\n", "    def largest_smallest_integers_helper(lst:\
    \ List[int]) -> Tuple[Optional[int], Optional[int]]:\n        if len(lst) == 0:\n\
    \            return (None, None)\n        if len(lst) == 1:\n            return\
    \ (lst[0], lst[0])\n        if lst[0] < 0:\n            return (None, lst[0])\n\
    \        if lst[-1] > 0:\n            return (lst[-1], None)\n        return (lst[-1],\
    \ lst[0])\n    return largest_smallest_integers_helper(lst)\n", "    if len(lst)\
    \ == 0:\n        return (None, None)\n    a = None\n    b = None\n    for i in\
    \ lst:\n        if i < 0:\n            if a is None:\n                a = i\n\
    \            else:\n                a = max(a, i)\n        else:\n           \
    \ if b is None:\n                b = i\n            else:\n                b =\
    \ min(b, i)\n    return (a, b)\n", "    if len(lst) == 0:\n        return (None,\
    \ None)\n    \n    a = None\n    b = None\n    for i in lst:\n        if a is\
    \ None or i < a:\n            a = i\n        if b is None or i > b:\n        \
    \    b = i\n    return (a, b)\n", "    \n    a = None\n    b = None\n    for i\
    \ in lst:\n        if a is None and i < 0:\n            a = i\n        elif b\
    \ is None and i > 0:\n            b = i\n        elif a is not None and b is not\
    \ None and i < 0 and i > 0:\n            return (a, b)\n    return (a, b)\n",
  "    if len(lst) == 0:\n        return (None, None)\n    \n    neg_ints = [x for\
    \ x in lst if x < 0]\n    pos_ints = [x for x in lst if x > 0]\n    \n    if len(neg_ints)\
    \ == 0 and len(pos_ints) == 0:\n        return (None, None)\n    \n    if len(neg_ints)\
    \ == 0:\n        return (None, min(pos_ints))\n    \n    if len(pos_ints) == 0:\n\
    \        return (max(neg_ints), None)\n    \n    return (max(neg_ints), min(pos_ints))\n\
    <|endoftext|><|python|>#", "    if len(lst) == 0:\n        return (None, None)\n\
    \    a = None\n    b = None\n    for i in lst:\n        if i < 0:\n          \
    \  if a is None:\n                a = i\n            else:\n                a\
    \ = max(a, i)\n        else:\n            if b is None:\n                b = i\n\
    \            else:\n                b = min(b, i)\n    return (a, b)\n", "   \
    \ def largest_smallest_integers_helper(lst: List[int]) -> Tuple[Optional[int],\
    \ Optional[int]]:\n        if len(lst) == 0:\n            return (None, None)\n\
    \        if len(lst) == 1:\n            return (lst[0], lst[0])\n        if lst[0]\
    \ < 0:\n            return (None, lst[0])\n        if lst[-1] > 0:\n         \
    \   return (lst[-1], None)\n        return (lst[0], lst[-1])\n    return largest_smallest_integers_helper(lst)\n",
  "    a = b = None\n    for i in lst:\n        if i < 0:\n            if a is None:\n\
    \                a = i\n            else:\n                a = max(a, i)\n   \
    \     else:\n            if b is None:\n                b = i\n            else:\n\
    \                b = min(b, i)\n    return a, b\n", "    a = None\n    b = None\n\
    \    for i in lst:\n        if i < 0:\n            if a is None:\n           \
    \     a = i\n            else:\n                a = max(a, i)\n        else:\n\
    \            if b is None:\n                b = i\n            else:\n       \
    \         b = min(b, i)\n    return a, b\n
  "    if len(lst) == 0:\n        return (None, None)\n    if len(lst) == 1:\n   \
    \     return (None, lst[0])\n    if lst[0] < 0:\n        return (lst[0], lst[1])\n\
    \    if lst[-1] > 0:\n        return (lst[-1], lst[0])\n    return (None, None)\n\
    <|endoftext|><|python|>#", "    \n    #                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                          ", "    def largest_smallest_integers_helper(lst:\
    \ List[int]) -> Tuple[Optional[int], Optional[int]]:\n        if not lst:\n  \
    \          return (None, None)\n        if len(lst) == 1:\n            return\
    \ (lst[0], lst[0])\n        if lst[0] < 0:\n            return (lst[0], lst[1])\n\
    \        if lst[-1] > 0:\n            return (lst[-1], lst[0])\n        return\
    \ (None, None)\n    return largest_smallest_integers_helper(lst)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
