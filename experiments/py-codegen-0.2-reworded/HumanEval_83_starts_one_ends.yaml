name: HumanEval_83_starts_one_ends
language: py
prompt: "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer\
  \ n, return the count of the numbers of n-digit\n    positive integers that start\
  \ or end with 1.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1) == 1\n    assert candidate(2)\
  \ == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert\
  \ candidate(5) == 18000\n\ndef test_check():\n    check(starts_one_ends)\n\ntest_check()\n"
completions: ["    if n == 1:\n        return 1\n    return starts_one_ends(n - 1)\
    \ + starts_one_ends(n - 2)\n\n", "    count = 0\n    for i in range(1, 10):\n\
    \        for j in range(1, 10):\n            k = i * j\n            if k > n:\n\
    \                break\n            if k == n:\n                count += 1\n \
    \           elif k == 1:\n                count += 1\n            elif k > 1:\n\
    \                count += starts_one_ends(n - k)\n    return count\n\n", "   \
    \ if n == 1:\n        return 1\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n\n", "    if n == 1:\n        return 1\n    return starts_one_ends(n -\
    \ 1) + starts_one_ends(n - 2)\n\n", "    count = 0\n    for i in range(10, n +\
    \ 1):\n        if i % 2 == 0:\n            continue\n        for j in range(1,\
    \ 10):\n            if i - j >= 0 and i - j < n:\n                count += 1\n\
    \            if i + j >= 0 and i + j < n:\n                count += 1\n    return\
    \ count\n\n", "    return sum(1 if n == len(str(i)) and i > 0 and i % 10 == 1\
    \ else 0 for i in range(1, 10 ** n + 1))\n\n", "    return sum(1 if i % 10 ==\
    \ 1 else 0 for i in range(n))\n\n", "    if n == 1:\n        return 1\n    return\
    \ starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\n", "    if n == 1:\n    \
    \    return 1\n    return sum(starts_one_ends(n - 1) for _ in range(n))\n\n",
  "    return sum(\n        1 if n == len(str(i)) and i > 0 and i % 10 == 1 else 0\n\
    \        for i in range(10 ** (n - 1), 10 ** n)\n    )\n\n", "    count = 0\n\
    \    for i in range(1, 10):\n        for j in range(1, 10):\n            if i\
    \ == 1 and j == 1:\n                continue\n            if i == 1 or j == 1:\n\
    \                count += starts_ends(n - 1)\n    return count\n\n", "    if n\
    \ == 1:\n        return 1\n    return starts_one_ends(n - 1) + starts_one_ends(n\
    \ - 2)\n\n", "    count = 0\n    for i in range(1, 10):\n        for j in range(1,\
    \ 10):\n            if i == 1 and j == 1:\n                continue\n        \
    \    if i == 1 or j == 1:\n                count += starts_ends(n - 1)\n    return\
    \ count\n\n", "    if n == 1:\n        return 1\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n\n", "    return sum(\n        1 if n == 1 else\
    \ 0\n        for i in range(1, 10)\n        for j in range(1, 10)\n        if\
    \ i + j * 10 ** (n - 1) == 1\n    )\n\n", "    if n == 1:\n        return 1\n\
    \    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\n", "    count =\
    \ 0\n    for i in range(n):\n        if i == 0:\n            count += 1\n    \
    \    else:\n            count += sum(1 for j in range(i) if j == 0)\n    return\
    \ count\n\n", "    if n == 1:\n        return 1\n    return starts_one_ends(n\
    \ - 1) + starts_one_ends(n - 2)\n\n", "    return sum(\n        (n - 1) * (n -\
    \ 2) // 2 * (n - 1) // (n - 2) // (n - 3) // (n - 4) // (n - 5) // (n - 6) //\
    \ (n - 7) // (n - 8) // (n - 9) // (n - 10) // (n - 11) // (n - 12) // (n - 13)\
    \ // (n - 14) // (n - 15) // (n - 16) // (n - 17) // (n - 18) // (n - 19) // (n\
    \ - 20) // (n - 21) // (n - 22) // (n - 23) // (n - 24) // (n - 25) // (n - 26)\
    \ // (n - 27) // (n - 28) // (n - 29) // (n - 30) // (n - 31) // (n - 32) // (n\
    \ - 33) // (n - 34) // (n - 35) // (n - 36) // (n - 37) // (n - 38) // (n - 39)\
    \ // (n - 40) // (n - 41) // (n - 42) // (n - 43) // (n - 44) // (n - 45) // (n\
    \ - 46) // (n - 47) // (n - 48) // (n - 49) // (n - 50) // (n - 51) // (n - 52)\
    \ // (n - 53) // (n - 54) // (n - 55) // (n - 56) // (n - 57) // (n - 58) // (n\
    \ - 59) // (n - 60) // (n - 61) // (n - 62) // (n - 63) // (n - 64) // (n - 65)\
    \ // (n - 66) // (n - 67) // (n - 68) // (n - 69) // (n - 70) // (n - 71) // (n\
    \ - 72) // (n - 73) // (n - 74) // (n - 75) // (n - 76) // (n - 77) // (n - 78)\
    \ // (n - 79) // (n - 80) // (n - 81) // (n - 82) //", "    if n == 1:\n     \
    \   return 1\n    return starts_one_ends(n - 1) + starts_one_ends(n - 2)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
