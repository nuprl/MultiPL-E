name: HumanEval_82_prime_length
language: py
prompt: "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes\
  \ a string and returns True if the string\n    length is a prime number or False\
  \ otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n\
  \    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello') == True\n    assert candidate('abcdcba')\
  \ == True\n    assert candidate('kittens') == True\n    assert candidate('orange')\
  \ == False\n    assert candidate('wow') == True\n    assert candidate('world') ==\
  \ True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n\
  \    assert candidate('') == False\n    assert candidate('HI') == True\n    assert\
  \ candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa')\
  \ == False\n    assert candidate('Madam') == True\n    assert candidate('M') ==\
  \ False\n    assert candidate('0') == False\n\ndef test_check():\n    check(prime_length)\n\
  \ntest_check()\n"
completions: ["    return len(string) % 2 == 1\n\n", "    return len(string) in set(range(2,\
    \ int(math.sqrt(len(string))) + 1))\n\n", "    for i in range(len(string)):\n\
    \        if string[i] not in string[i + 1:]:\n            return False\n    return\
    \ True\n\n", "    return len(string) == 2 and is_prime(string)\n\n", "    return\
    \ len(string) % 2 == 0 and all(is_prime(int(char)) for char in string)\n\n", " \
    \   return len(string) % 2 == 0 and is_prime(len(string))\n\n", "    return len(string)\
    \ % 2 == 0 and all(is_prime(int(x)) for x in string)\n\n", "    return len(string)\
    \ in {2, 3} or not any(i for i in range(2, int(math.sqrt(len(string))) + 1) if\
    \ string[i] == string[-i] and string[i] != ' ')\n\n", "    return len(string)\
    \ == sum(1 for _ in range(len(string)) if string.isalpha())\n\n", "    return\
    \ len(string) == sum(1 for c in string if c.isalpha())\n\n", "    return len(string)\
    \ % 2 == 0 and all(int(x) for x in string)\n\n", "    return len(string) == sum(1\
    \ for c in string if c.isalpha())\n\n", "    return len(string) % 2 == 0 and all(\n\
    \        int(char) for char in string\n    ) and is_prime(len(string))\n\n", " \
    \   return len(string) == sum(1 for c in string if c.isalpha())\n\n", "    return\
    \ len(string) in {2, 3}\n\n", "    return len(string) in {2, 3}\n\n", "    return\
    \ len(string) in {2, 3}\n\n", "    return len(string) == sum(1 for c in string\
    \ if c.isalpha())\n\n", "    for i in range(len(string)):\n        if string[i]\
    \ not in string[i+1:]:\n            return False\n    return True\n\n", "    return\
    \ len(string) % 2 == 0 and all(is_prime(int(char)) for char in string)\n\n", " \
    \   return len(string) in prime_numbers\n\n", "    return len(string) % 2 == 0\
    \ and is_prime(len(string))\n\n", "    return len(string) % 2 == 0 and all(int(c)\
    \ % 2 == 0 for c in string)\n\n", "    return len(string) % 2 == 0 and all(\n\
    \        int(x) for x in string if x.isalpha())\n\n", "    for i in range(2, len(string)):\n\
    \        if string[i] != string[i - 1]:\n            for j in range(i + 1, len(string)):\n\
    \                if string[j] == string[i]:\n                    return False\n\
    \    return True\n\n", "    return len(string) % 2 == 0 and all(int(char) for\
    \ char in string)\n\n", "    return len(string) == sum(1 for c in string if c.isalpha())\n\
    \n", "    return len(string) % 2 == 0 and all(i in string for i in string)\n\n",
  "    for i in range(len(string)):\n        if not is_prime(string[i]):\n       \
    \     return False\n    return True\n\n", "    return len(string) % 2 == 1\n\n",
  "    return len(string) % 2 == 0 and all(int(char) for char in string)\n\n", " \
    \   return len(string) in prime_numbers\n", "    return len(string) in set(range(2,\
    \ int(math.sqrt(len(string))) + 1))\n", "    return len(string) in {2, 3}\n\n",
  "    return len(string) % 2 == 0 and is_prime(len(string))\n\n", "    return len(string)\
    \ % 2 == 0 and is_prime(len(string))\n\n", "    return len(string) % 2 == 0 and\
    \ is_prime(len(string))\n\n", "    return len(string) % 2 == 0 and all(i % 2 ==\
    \ 0 for i in range(1, len(string) + 1))\n\n", "    return len(string) > 1 and\
    \ all(int(char) for char in string) and is_prime(len(string))\n\n", "    return\
    \ len(string) > 1 and is_prime(len(string))\n\n", "    return len(string) in {2,\
    \ 3}\n\n", "    return len(string) in primes\n\n", "    for i in range(2, len(string)):\n\
    \        if string[i] == string[i - 1]:\n            return False\n        for\
    \ j in range(2, len(string)):\n            if i + j > len(string) - 1:\n     \
    \           break\n            if string[i + j] == string[i]:\n              \
    \  return False\n    return True\n\n", "    return len(string) % 2 == 1\n\n",
  "    for i in range(len(string)):\n        if string[i] not in string[i+1:]:\n \
    \           return False\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
