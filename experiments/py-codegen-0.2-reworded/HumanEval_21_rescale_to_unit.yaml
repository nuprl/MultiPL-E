name: HumanEval_21_rescale_to_unit
language: py
prompt: "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n\
  \    \"\"\" Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n    such that the smallest number will become 0 and the largest\
  \ will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n \
  \   assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0,\
  \ 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0,\
  \ 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0,\
  \ 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n\ndef test_check():\n    check(rescale_to_unit)\n\
  \ntest_check()\n"
completions: ["    min_val = min(numbers)\n    max_val = max(numbers)\n    return\
    \ [x - min_val for x in numbers] / (max_val - min_val)\n", "    min_val = min(numbers)\n\
    \    max_val = max(numbers)\n    return [x - min_val for x in numbers] / (max_val\
    \ - min_val)\n", "    min_val = min(numbers)\n    max_val = max(numbers)\n   \
    \ return [x - min_val for x in numbers] / (max_val - min_val)\n", "    return\
    \ [n / max(numbers) for n in numbers]\n", "    if len(numbers) < 2:\n        raise\
    \ ValueError(\"Need at least two numbers to rescale\")\n    min_val = numbers[0]\n\
    \    max_val = numbers[0]\n    for number in numbers:\n        if number < min_val:\n\
    \            min_val = number\n        if number > max_val:\n            max_val\
    \ = number\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n\
    \    scale = 1.0 / (max_val - min_val)\n    return [number * scale - min_val for\
    \ number in numbers]\n", "    return [x / max(numbers) for x in numbers]\n", " \
    \   numbers = sorted(numbers)\n    min_value = numbers[0]\n    max_value = numbers[-1]\n\
    \    if min_value == max_value:\n        return [0.0] * len(numbers)\n    scale\
    \ = 1.0 / (max_value - min_value)\n    return [n * scale for n in numbers]\n",
  "    min_value = min(numbers)\n    max_value = max(numbers)\n    return [n - min_value\
    \ for n in numbers]\n", "    return [n / max(numbers) for n in numbers]\n", " \
    \   return [n / max(numbers) for n in numbers]\n", "    min_val = min(numbers)\n\
    \    max_val = max(numbers)\n    return [x - min_val for x in numbers] / (max_val\
    \ - min_val)\n", "    min_val = min(numbers)\n    max_val = max(numbers)\n   \
    \ return [n - min_val for n in numbers]\n", "    numbers = sorted(numbers)\n \
    \   if numbers[0] == numbers[1]:\n        return [0.0] + numbers\n    else:\n\
    \        return [0.0] + [n / (numbers[-1] - numbers[0]) for n in numbers]\n",
  "    min_val = min(numbers)\n    max_val = max(numbers)\n    return [x - min_val\
    \ for x in numbers] / (max_val - min_val)\n", "    if len(numbers) < 2:\n    \
    \    raise ValueError(\"Cannot rescale to unit, list of numbers is too small\"\
    )\n    min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n\
    \        return [0.0] * len(numbers)\n    return [float(x - min_val) / (max_val\
    \ - min_val) for x in numbers]\n", "    min_val = min(numbers)\n    max_val =\
    \ max(numbers)\n    return [n - min_val for n in numbers]\n", "    if len(numbers)\
    \ < 2:\n        raise ValueError(\"Need at least two numbers to rescale\")\n \
    \   min_val = numbers[0]\n    max_val = numbers[0]\n    for number in numbers:\n\
    \        if number < min_val:\n            min_val = number\n        if number\
    \ > max_val:\n            max_val = number\n    if max_val == min_val:\n     \
    \   return [0.0] * len(numbers)\n    scale = 1.0 / (max_val - min_val)\n    return\
    \ [number * scale - min_val for number in numbers]\n", "    return [n / max(numbers)\
    \ for n in numbers]\n", "    min_value = min(numbers)\n    max_value = max(numbers)\n\
    \    return [x - min_value for x in numbers] / (max_value - min_value)\n", " \
    \   min_val = min(numbers)\n    max_val = max(numbers)\n    return [x - min_val\
    \ for x in numbers] / (max_val - min_val)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
