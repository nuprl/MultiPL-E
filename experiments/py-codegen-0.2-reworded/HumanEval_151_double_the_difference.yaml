name: HumanEval_151_double_the_difference
language: py
prompt: "from typing import List\n\ndef double_the_difference(lst: List[float]) ->\
  \ int:\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the\
  \ numbers\n    in the list that are odd. Ignore numbers that are negative or not\
  \ integers.\n    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>>\
  \ double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n\
  \    81\n    >>> double_the_difference([0])\n    0  \n   \n    If the input list\
  \ is empty, return 0.\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([]) == 0\n    assert candidate([5.0,\
  \ 4.0]) == 25\n    assert candidate([0.1, 0.2, 0.3]) == 0\n    assert candidate([-10.0,\
  \ -20.0, -30.0]) == 0\n    assert candidate([-1.0, -2.0, 8.0]) == 0\n    assert\
  \ candidate([0.2, 3.0, 5.0]) == 34\n    assert candidate([-9.0, -7.0, -5.0, -3.0,\
  \ -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165\n\ndef test_check():\n    check(double_the_difference)\n\
  \ntest_check()\n"
completions: ["    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for\
    \ num in lst:\n        if num < 0 or not isinstance(num, int):\n            continue\n\
    \        total += num * num\n    \n    return total\n", "    if len(lst) == 0:\n\
    \        return 0\n    \n    sum_of_squares = 0\n    for num in lst:\n       \
    \ if num >= 0 and num % 1 == 0:\n            sum_of_squares += num * num\n   \
    \ \n    return sum_of_squares\n", "    \n    if len(lst) == 0:\n        return\
    \ 0\n    \n    total = 0\n    for num in lst:\n        if num > 0 and num % 1\
    \ == 0:\n            total += num * num\n    return total\n", "    if len(lst)\
    \ == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n        if\
    \ num > 0 and num % 1 == 0:\n            total += num * num\n    return total\n",
  "    \n    return sum([x**2 for x in lst if x > 0 and x % 1 == 0])\n    ", "   \
    \ if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n\
    \        if num > 0 and num % 1 == 0:\n            total += num * num\n    return\
    \ total\n", "    if len(lst) == 0:\n        return 0\n    \n    total = 0\n  \
    \  for num in lst:\n        if num < 0 or not isinstance(num, int):\n        \
    \    continue\n        total += num * num\n    \n    return total\n", "    return\
    \ sum([x**2 for x in lst if x > 0 and x % 1 == 0])\n", "    if len(lst) == 0:\n\
    \        return 0\n    \n    total = 0\n    for num in lst:\n        if num >\
    \ 0 and num % 1 == 0:\n            total += num * num\n    return total\n", " \
    \   \n    if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for i\
    \ in lst:\n        if i < 0 or not i.is_integer():\n            continue\n   \
    \     total += i * i\n    return total\n", "    if len(lst) == 0:\n        return\
    \ 0\n    \n    total = 0\n    for num in lst:\n        if num >= 0 and num % 1\
    \ == 0:\n            total += num * num\n    return total\n", "    return sum([i**2\
    \ for i in lst if i > 0 and i % 1 == 0])\n", "    return sum([x**2 for x in lst\
    \ if x > 0 and x % 1 == 0])\n", "    if len(lst) == 0:\n        return 0\n   \
    \ \n    sum_of_squares = 0\n    for num in lst:\n        if num >= 0 and num %\
    \ 1 == 0:\n            sum_of_squares += num * num\n    \n    return sum_of_squares\n",
  "    \n    return sum([x**2 for x in lst if x > 0 and x % 1 == 0])\n    ", "   \
    \ if len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n\
    \        if num > 0 and num % 1 == 0:\n            total += num * num\n    return\
    \ total\n", "    if len(lst) == 0:\n        return 0\n    \n    total = 0\n  \
    \  for num in lst:\n        if num > 0 and num % 1 == 0:\n            total +=\
    \ num * num\n    return total\n", "    return sum(x * x for x in lst if x > 0\
    \ and x % 1 == 0)\n", "    if len(lst) == 0:\n        return 0\n    \n    total\
    \ = 0\n    for num in lst:\n        if num < 0:\n            continue\n      \
    \  if not isinstance(num, int):\n            continue\n        if num % 2 == 0:\n\
    \            continue\n        total += num * num\n    return total\n", "    if\
    \ len(lst) == 0:\n        return 0\n    \n    total = 0\n    for num in lst:\n\
    \        if num >= 0 and num % 1 == 0:\n            total += num * num\n    \n\
    \    return total\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
