language: py
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4woclacl.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp4woclacl.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4woclacl.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                               \ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe7cxuc4m.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpe7cxuc4m.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpe7cxuc4m.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iomou4i.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmp0iomou4i.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0iomou4i.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4woclacl.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp4woclacl.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4woclacl.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    #                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \     \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpst4xxiac.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpst4xxiac.py\", line 49,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpst4xxiac.py\", line 39, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    else:\n        return [arr[0], arr[0] % 2]\n\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnr2vjvct.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpnr2vjvct.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnr2vjvct.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_value = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_value:\n            min_value = arr[i]\n\
    \            min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpse6ez3gx.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpse6ez3gx.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpse6ez3gx.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smalest_value:\n       \
    \         smalest_value = arr[i]\n                smalest_index = i\n    return\
    \ [smalest_value, smalest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp98i_87ke.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp98i_87ke.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp98i_87ke.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < smalest_value:\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n    return [smalest_value, smalest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd_05gxt.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpzd_05gxt.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzd_05gxt.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], 1]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffwyt2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp18ffwyt2.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp18ffwyt2.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    \n    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyadl040e.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpyadl040e.py\", line 61,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyadl040e.py\", line 52, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4woclacl.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp4woclacl.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4woclacl.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvui1ol_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpcvui1ol_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcvui1ol_.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvui1ol_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpcvui1ol_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcvui1ol_.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    else:\n        return [arr[0], arr[0] % 2]\n\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnr2vjvct.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpnr2vjvct.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnr2vjvct.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < smalest_value:\n            smalest_value\
    \ = arr[i]\n            smalest_index = i\n    return [smalest_value, smalest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd_05gxt.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpzd_05gxt.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpzd_05gxt.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4ykqnd3.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpa4ykqnd3.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpa4ykqnd3.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    \n    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpho1atauq.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmpho1atauq.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpho1atauq.py\", line 56, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            smalest_value = arr[i]\n           \
    \ smalest_index = i\n    return [smalest_value, smalest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5vl34pm.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpd5vl34pm.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpd5vl34pm.py\", line 52, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4ykqnd3.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpa4ykqnd3.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpa4ykqnd3.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], 1]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffwyt2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp18ffwyt2.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp18ffwyt2.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_value = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n           \
    \     min_value = arr[i]\n                min_index = i\n        else:\n     \
    \       if arr[i] < min_value:\n                min_value = arr[i]\n         \
    \       min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdj9d189.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpvdj9d189.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpvdj9d189.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smalest_value:\n       \
    \         smalest_value = arr[i]\n                smalest_index = i\n    return\
    \ [smalest_value, smalest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp98i_87ke.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp98i_87ke.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp98i_87ke.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return arr\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjtl2o_s.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmptjtl2o_s.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptjtl2o_s.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_index = min(arr, key=lambda x: x % 2)\n    return [min_index, arr.index(min_index)]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9xk733_i.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmp9xk733_i.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp9xk733_i.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_even = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even\
    \ = arr[i]\n            smallest_index = i\n    return [smallest_even, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0_02py_.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpz0_02py_.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz0_02py_.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppztu56no.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppztu56no.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppztu56no.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smalest_value:\n       \
    \         smalest_value = arr[i]\n                smalest_index = i\n    return\
    \ [smalest_value, smalest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp98i_87ke.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp98i_87ke.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp98i_87ke.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    \n    min_value = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n           \
    \     min_value = arr[i]\n                min_index = i\n        else:\n     \
    \       break\n    return [min_value, min_index]\n\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4lpp0ll3.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmp4lpp0ll3.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4lpp0ll3.py\", line 54, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            smalest_value = arr[i]\n           \
    \ smalest_index = i\n        else:\n            if arr[i] < smalest_value:\n \
    \               smalest_value = arr[i]\n                smalest_index = i\n  \
    \  return [smalest_value, smalest_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps9t8hi7c.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmps9t8hi7c.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmps9t8hi7c.py\", line 56, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    \n    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwiwj2hlz.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpwiwj2hlz.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwiwj2hlz.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], 1]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffwyt2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp18ffwyt2.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp18ffwyt2.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            smalest_value = arr[i]\n           \
    \ smalest_index = i\n    return [smalest_value, smalest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8eoaoz59.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmp8eoaoz59.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp8eoaoz59.py\", line 52, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(len(arr)):\n   \
    \     if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n               \
    \ min_even = arr[i]\n                min_index = i\n    return [min_even, min_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfrcag6m.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpkfrcag6m.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpkfrcag6m.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    \n    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_value:\n            min_value = arr[i]\n\
    \            min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0rr0yzjp.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp0rr0yzjp.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp0rr0yzjp.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return arr\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjtl2o_s.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmptjtl2o_s.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptjtl2o_s.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4woclacl.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp4woclacl.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4woclacl.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(len(arr)):\n   \
    \     if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n               \
    \ min_even = arr[i]\n                min_index = i\n        else:\n          \
    \  if arr[i] < min_even:\n                min_even = arr[i]\n                min_index\
    \ = i\n    return [min_even, min_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj37n8nub.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpj37n8nub.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpj37n8nub.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2mecxtf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx2mecxtf.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx2mecxtf.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2mecxtf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx2mecxtf.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx2mecxtf.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_value:\n            min_value = arr[i]\n\
    \            min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4remsrs.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpj4remsrs.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpj4remsrs.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_even = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even\
    \ = arr[i]\n            smallest_index = i\n    return [smallest_even, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0_02py_.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpz0_02py_.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpz0_02py_.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_value = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n           \
    \     min_value = arr[i]\n                min_index = i\n        else:\n     \
    \       if arr[i] < min_value:\n                min_value = arr[i]\n         \
    \       min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdj9d189.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpvdj9d189.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpvdj9d189.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    else:\n        min_index = 0\n        min_value = arr[0]\n        for i in\
    \ range(1, len(arr)):\n            if arr[i] % 2 == 0 and arr[i] < min_value:\n\
    \                min_value = arr[i]\n                min_index = i\n        return\
    \ [min_value, min_index]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9fh_exfm.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp9fh_exfm.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp9fh_exfm.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2mecxtf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx2mecxtf.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx2mecxtf.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4ykqnd3.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpa4ykqnd3.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpa4ykqnd3.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    if arr[0] % 2 == 1:\n        return [arr[0],\
    \ 1]\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    if arr[0] % 2 ==\
    \ 1:\n        return [arr[0], 1]\n    if arr[0] % 2 == 0:\n        return [arr[0],\
    \ 0]\n    if arr[0] % 2 == 1:\n        return [arr[0], 1]\n    if arr[0] % 2 ==\
    \ 0:\n        return [arr[0], 0]\n    if arr[0] % 2 == 1:\n        return [arr[0],\
    \ 1]\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    if arr[0] % 2 ==\
    \ 1:\n        return [arr[0], 1]\n    if arr[0] % 2 == 0:\n        return [arr[0],\
    \ 0]\n    if arr[0] % 2 == 1:\n        return [arr[0], 1]\n    if arr[0] % 2 ==\
    \ 0:\n        return [arr[0], 0]\n    if arr[0] % 2 == 1:\n        return [arr[0],\
    \ 1]\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    if arr[0] % 2 ==\
    \ 1:\n        return [arr[0], 1]\n    if arr[0] % 2 == 0:\n        return [arr[0],\
    \ 0]\n    if arr[0] % 2 == 1:\n        return [arr[0], 1]\n    if arr[0] % 2 ==\
    \ 0:\n        return [arr[0], 0]\n    if arr[0] % 2 == 1:\n        return [arr[0],\
    \ 1]\n    if arr[0] % 2 == 0:\n        return [arr[0], 0]\n    if arr[0] % 2 ==\
    \ 1\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpef407zms.py\", line 84\n    if arr[0] % 2 == 1\n     \
    \                 ^\nSyntaxError: expected ':'\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    if arr[0] > arr[1]:\n        return [arr[1],\
    \ 1]\n    if arr[0] < arr[1]:\n        return [arr[0], 0]\n    return [arr[0],\
    \ 1]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n   \
    \ assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert\
    \ candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5,\
    \ 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7,\
    \ 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpvwts45.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmpwpvwts45.py\", line 61,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpwpvwts45.py\", line 51, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    else:\n        smalest_value = arr[0]\n        smalest_index = 0\n      \
    \  for i in range(1, len(arr)):\n            if arr[i] % 2 == 0 and arr[i] < smalest_value:\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \       return [smalest_value, smalest_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudp4a_1u.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpudp4a_1u.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpudp4a_1u.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2mecxtf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx2mecxtf.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx2mecxtf.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n    return [min_even, min_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphbcd1__0.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphbcd1__0.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphbcd1__0.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_value:\n            min_value = arr[i]\n\
    \            min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4remsrs.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpj4remsrs.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpj4remsrs.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    if arr[0] > arr[1]:\n        return [arr[1],\
    \ 1]\n    else:\n        return [arr[0], 0]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe77y1srf.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpe77y1srf.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpe77y1srf.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_value:\n            min_value = arr[i]\n\
    \            min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj4remsrs.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpj4remsrs.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpj4remsrs.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvui1ol_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpcvui1ol_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcvui1ol_.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     break\n    return [min_even, min_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvj8v_g6.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpyvj8v_g6.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyvj8v_g6.py\", line 53, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2mecxtf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx2mecxtf.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx2mecxtf.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_index = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n           \
    \     min_value = arr[i]\n                min_index = i\n        else:\n     \
    \       if arr[i] < min_value:\n                min_value = arr[i]\n         \
    \       min_index = i\n    return [min_value, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2koet5n.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpn2koet5n.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpn2koet5n.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvui1ol_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpcvui1ol_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcvui1ol_.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], arr[0] - 1]\n\n\
    def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1,\
    \ 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0,\
    \ 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpulho9yqf.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmpulho9yqf.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpulho9yqf.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    if arr[0] % 2 == 1:\n        return [arr[0],\
    \ 1]\n    return [arr[0], 0]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnbs4654j.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpnbs4654j.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnbs4654j.py\", line 49, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    for i in range(1, len(arr)):\n        if arr[i]\
    \ % 2 == 0:\n            return [arr[i], i]\n    return [arr[0], 0]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4x_3g607.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp4x_3g607.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4x_3g607.py\", line 50, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    \n    min_even = arr[0]\n    min_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n    return [min_even, min_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp59mljeu4.py\", line\
    \ 63, in <module>\n    test_check()\n  File \"/tmp/tmp59mljeu4.py\", line 61,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp59mljeu4.py\", line 52, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return arr\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjtl2o_s.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmptjtl2o_s.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptjtl2o_s.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_even = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n       \
    \         smallest_even = arr[i]\n                smallest_index = i\n       \
    \ else:\n            if arr[i] < smallest_even:\n                smallest_even\
    \ = arr[i]\n                smallest_index = i\n    return [smallest_even, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaut2dulv.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpaut2dulv.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpaut2dulv.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoky0vnw5.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpoky0vnw5.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpoky0vnw5.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_even = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_even:\n       \
    \         smallest_even = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_even, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qewdy37.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp_qewdy37.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp_qewdy37.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvui1ol_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpcvui1ol_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcvui1ol_.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], arr[0] - arr[0]\
    \ % 2]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n \
    \   assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n  \
    \  assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8n2g03f5.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp8n2g03f5.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp8n2g03f5.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            smalest_value = arr[i]\n           \
    \ smalest_index = i\n    return [smalest_value, smalest_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5vl34pm.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmpd5vl34pm.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpd5vl34pm.py\", line 52, in\
    \ check\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return arr\n\ndef check(candidate):\n \
    \   assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjtl2o_s.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmptjtl2o_s.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmptjtl2o_s.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    else:\n        smalest_value = arr[0]\n        smalest_index = 0\n      \
    \  for i in range(1, len(arr)):\n            if arr[i] % 2 == 0 and arr[i] < smalest_value:\n\
    \                smalest_value = arr[i]\n                smalest_index = i\n \
    \       return [smalest_value, smalest_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudp4a_1u.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpudp4a_1u.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpudp4a_1u.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4woclacl.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmp4woclacl.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp4woclacl.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1661984012
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], arr[0] - arr[0]\
    \ % 2]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n \
    \   assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n  \
    \  assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2,\
    \ 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n  \
    \  assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1])\
    \ == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8n2g03f5.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp8n2g03f5.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp8n2g03f5.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    else:\n        return [arr[0], arr[0] % 2]\n\ndef check(candidate):\n   \
    \ assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnr2vjvct.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpnr2vjvct.py\", line 54,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpnr2vjvct.py\", line 44, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], 1]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffwyt2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp18ffwyt2.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp18ffwyt2.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    return [arr[i] for i in range(len(arr)) if arr[i] % 2 == 0][0]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2mecxtf.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpx2mecxtf.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpx2mecxtf.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     break\n    return [min_even, min_index]\n\ndef check(candidate):\n    assert\
    \ candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n\
    \    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0,\
    \ 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvj8v_g6.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpyvj8v_g6.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpyvj8v_g6.py\", line 53, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    if arr[0] > arr[1]:\n        return [arr[0],\
    \ 0]\n    if arr[0] == arr[1]:\n        return [arr[0], 1]\n    if arr[0] < arr[1]:\n\
    \        return [arr[1], 1]\n    return [arr[0], 0]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcnc42b06.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpcnc42b06.py\", line 63,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcnc42b06.py\", line 53, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], 1]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffwyt2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp18ffwyt2.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp18ffwyt2.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphruvfwwd.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmphruvfwwd.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmphruvfwwd.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_value = arr[0]\n    min_index = 0\n    for i in range(len(arr)):\n  \
    \      if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n             \
    \   min_value = arr[i]\n                min_index = i\n    return [min_value,\
    \ min_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2,\
    \ 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n\
    \    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpswfdw4b0.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpswfdw4b0.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpswfdw4b0.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        return [arr[0], 1]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18ffwyt2.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmp18ffwyt2.py\", line 58,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp18ffwyt2.py\", line 48, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < smallest_value:\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n    return [smallest_value, smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppztu56no.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppztu56no.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppztu56no.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0]\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1_n51fj.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpq1_n51fj.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpq1_n51fj.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    if len(arr) == 1:\n        return [arr[0], 0]\n    if arr[0] % 2 == 0:\n\
    \        return [arr[0], 0]\n    else:\n        smallest_index = 0\n        smallest_value\
    \ = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] % 2 ==\
    \ 0:\n                if arr[i] < smallest_value:\n                    smallest_value\
    \ = arr[i]\n                    smallest_index = i\n        return [arr[smallest_index],\
    \ smallest_index]\n\ndef check(candidate):\n    assert candidate([4, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4u8qily.py\", line\
    \ 67, in <module>\n    test_check()\n  File \"/tmp/tmp_4u8qily.py\", line 65,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmp_4u8qily.py\", line 55, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662891951
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n    return\
    \ [smallest_value, smallest_index]\n\ndef check(candidate):\n    assert candidate([4,\
    \ 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvui1ol_.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmpcvui1ol_.py\", line 60,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpcvui1ol_.py\", line 51, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smallest_value = arr[0]\n    smallest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smallest_value:\n      \
    \          smallest_value = arr[i]\n                smallest_index = i\n     \
    \   else:\n            return [arr[i], i]\n    return [arr[smallest_index], smallest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpifc0fa5u.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpifc0fa5u.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpifc0fa5u.py\", line 52, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662891951
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    return [arr[i] for i in range(len(arr))\
    \ if arr[i] % 2 == 0][0]\n\ndef check(candidate):\n    assert candidate([4, 2,\
    \ 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuob9970z.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpuob9970z.py\", line 51,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpuob9970z.py\", line 41, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    smalest_value = arr[0]\n    smalest_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < smalest_value:\n       \
    \         smalest_value = arr[i]\n                smalest_index = i\n        else:\n\
    \            if arr[i] < smalest_value:\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n    return [smalest_value, smalest_index]\n\
    \ndef check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
    \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
    \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
    \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6,\
    \ 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
    \    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpno3munjx.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmpno3munjx.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpno3munjx.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662891951
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0 and arr[i] < min_even:\n            min_even = arr[i]\n\
    \            min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx_tjjfv.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmppx_tjjfv.py\", line 59,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmppx_tjjfv.py\", line 50, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_even = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_even:\n            \
    \    min_even = arr[i]\n                min_index = i\n        else:\n       \
    \     if arr[i] < min_even:\n                min_even = arr[i]\n             \
    \   min_index = i\n    return [min_even, min_index]\n\ndef check(candidate):\n\
    \    assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) ==\
    \ [2, 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4,\
    \ 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert\
    \ candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) ==\
    \ [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqwhanyf.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmplqwhanyf.py\", line 64,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmplqwhanyf.py\", line 55, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    # Your code here\n    if len(arr) == 0:\n        return []\n\
    \    min_value = arr[0]\n    min_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] % 2 == 0:\n            if arr[i] < min_value:\n           \
    \     min_value = arr[i]\n                min_index = i\n        else:\n     \
    \       break\n    return [min_value, min_index]\n\ndef check(candidate):\n  \
    \  assert candidate([4, 2, 3]) == [2, 1]\n    assert candidate([1, 2, 3]) == [2,\
    \ 1]\n    assert candidate([]) == []\n    assert candidate([5, 0, 3, 0, 4, 2])\
    \ == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5,\
    \ 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert\
    \ candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjo3d1da6.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpjo3d1da6.py\", line 62,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpjo3d1da6.py\", line 53, in\
    \ check\n    assert candidate([1, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662891951
- exit_code: 1
  program: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n \
    \   \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
    \ integer nodes\n    your task is to pluck one of the nodes and return it.\n \
    \   The plucked node should be the node with the smallest even value.\n    If\
    \ multiple nodes with the same smallest even value are found return the node that\
    \ has smallest index.\n\n    The plucked node should be returned in a list, [\
    \ smalest_value, its index ],\n    If there are no even values or the given array\
    \ is empty, return [].\n\n    Example 1:\n    >>> pluck([4,2,3])\n    [2, 1]\n\
    \    Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    \n    Example 2:\n    >>> pluck([1,2,3])\n    [2, 1]\n    Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index.\n\n    Example 3:\n    >>>\
    \ pluck([])\n    []\n    \n    Example 4:\n    >>> pluck([5, 0, 3, 0, 4, 2])\n\
    \    [0, 1]\n    Explanation: 0 is the smallest value, but  there are two zeros,\n\
    \                 so we will choose the first zero, which has the smallest index.\n\
    \n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([4, 2, 3])\
    \ == [2, 1]\n    assert candidate([1, 2, 3]) == [2, 1]\n    assert candidate([])\
    \ == []\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1,\
    \ 2, 3, 0, 5, 3]) == [0, 3]\n    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n\
    \    assert candidate([7, 6, 7, 1]) == [6, 1]\n    assert candidate([7, 9, 7,\
    \ 1]) == []\n\ndef test_check():\n    check(pluck)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa4ykqnd3.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpa4ykqnd3.py\", line 50,\
    \ in test_check\n    check(pluck)\n  File \"/tmp/tmpa4ykqnd3.py\", line 40, in\
    \ check\n    assert candidate([4, 2, 3]) == [2, 1]\nAssertionError\n"
  stdout: ''
  timestamp: 1662863068
