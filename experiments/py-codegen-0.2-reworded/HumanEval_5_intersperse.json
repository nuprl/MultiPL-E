{
  "name": "HumanEval_5_intersperse",
  "language": "py",
  "prompt": "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n\ndef test_check():\n    check(intersperse)\n\ntest_check()\n",
  "completions": [
    "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    return [delimeter] + numbers + [delimeter] + [numbers[0]]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0]] + [delimeter] + intersperse(numbers[1:], delimeter)\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    if len(numbers) == 1:\n        return [numbers[0]]\n    return [numbers[0]] + intersperse(numbers[1:], delimeter)\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    if len(numbers) == 0:\n        return []\n    elif len(numbers) == 1:\n        return [numbers[0]]\n    else:\n        return [numbers[0]] + intersperse(numbers[1:], delimeter) + [numbers[-1]]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n",
    "    return [delimeter] + numbers + [delimeter]\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}