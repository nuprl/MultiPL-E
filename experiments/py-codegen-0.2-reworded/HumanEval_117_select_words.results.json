{
  "language": "py",
  "name": "HumanEval_117_select_words",
  "results": [
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n        else:\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpknpq4v69.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpknpq4v69.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpknpq4v69.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \nndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt2seiali.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpt2seiali.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpt2seiali.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            words.append(s[i:i+n])\n            i += n - 1\n        else:\n            words.append(s[i:i+n])\n            i += n\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp24j4iwt_.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmp24j4iwt_.py\", line 44, in test_check\n    check(select_words)\n  File \"/tmp/tmp24j4iwt_.py\", line 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = [w for w in words if len(w) > 0]\n            continue\n        if s[i] in 'aeiou':\n            if len(words) > 0:\n                words = [w for w in words if len(w) > 0]\n            continue\n        if len(words) > 0:\n            words = [w for w in words if len(w) > 0]\n        words.append(s[i:i+1])\n    if len(words) > 0:\n        words = [w for w in words if len(w) > 0]\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp75vu277e.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmp75vu277e.py\", line 48, in test_check\n    check(select_words)\n  File \"/tmp/tmp75vu277e.py\", line 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2zacxijm.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2zacxijm.py\", line 32, in test_check\n    check(select_words)\n  File \"/tmp/tmp2zacxijm.py\", line 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    #\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2zacxijm.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmp2zacxijm.py\", line 32, in test_check\n    check(select_words)\n  File \"/tmp/tmp2zacxijm.py\", line 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpznrl6gu8.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpznrl6gu8.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpznrl6gu8.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            return words\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        words.append(s[i])\n        for j in range(i+1, len(s)):\n            if s[j] not in 'abcdefghijklmnopqrstuvwxyz':\n                break\n            words.append(s[j])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpazzjlw_s.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpazzjlw_s.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpazzjlw_s.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n            continue\n        if s[i] not in 'aeiou':\n            continue\n        if len(words) == n:\n            words.pop()\n        words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoallt5dp.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpoallt5dp.py\", line 44, in test_check\n    check(select_words)\n  File \"/tmp/tmpoallt5dp.py\", line 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        \n        if s[i] in 'aeiou':\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n        else:\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr5oxou_8.py\", line 51, in <module>\n    test_check()\n  File \"/tmp/tmpr5oxou_8.py\", line 49, in test_check\n    check(select_words)\n  File \"/tmp/tmpr5oxou_8.py\", line 40, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n        if i + n >= len(s):\n            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp99j2823k.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp99j2823k.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp99j2823k.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\nndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpqlrbjjdm.py\", line 34, in <module>\n    test_check()\n  File \"/tmp/tmpqlrbjjdm.py\", line 32, in test_check\n    check(select_words)\n  File \"/tmp/tmpqlrbjjdm.py\", line 23, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word) == n and len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgommlswx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpgommlswx.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpgommlswx.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhzbtyf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8uhzbtyf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8uhzbtyf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk1dzoaw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpk1dzoaw7.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpk1dzoaw7.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk1dzoaw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpk1dzoaw7.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpk1dzoaw7.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) < n:\n                words.append(s[i:i+1])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps_svfe6j.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmps_svfe6j.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmps_svfe6j.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            return words\n        if s[i] in 'aeiou':\n            words.append(s[i])\n        else:\n            for j in range(i, len(s)):\n                if s[j] in 'aeiou':\n                    words.append(s[j])\n                    break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgscjckj7.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpgscjckj7.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpgscjckj7.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s for s in s.split() if len(s) == n and len(set(s)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpt24oq782.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpt24oq782.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpt24oq782.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) == n:\n                break\n            words.append(s[i])\n        else:\n            if len(words) == n:\n                break\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpyss07ezg.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpyss07ezg.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpyss07ezg.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if i + n < len(s):\n            if s[i:i+n] in ['a', 'e', 'i', 'o', 'u']:\n                words.append(s[i:i+n])\n            else:\n                words.append(s[i])\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp_lm_4so9.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmp_lm_4so9.py\", line 44, in test_check\n    check(select_words)\n  File \"/tmp/tmp_lm_4so9.py\", line 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhzbtyf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8uhzbtyf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8uhzbtyf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            words = []\n        else:\n            if len(words) < n:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpakstvf4w.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpakstvf4w.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmpakstvf4w.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhzbtyf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8uhzbtyf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8uhzbtyf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) < n:\n            words.append(s[i:i+1])\n        else:\n            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppfjc1mi8.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmppfjc1mi8.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmppfjc1mi8.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) < n:\n                words.append(s[i])\n        else:\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1bqoxgxl.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmp1bqoxgxl.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmp1bqoxgxl.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            words.append(s[i:i+n])\n            i += n - 1\n        else:\n            words.append(s[i:i+n])\n            i += n\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpr29dlp25.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpr29dlp25.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpr29dlp25.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                words.pop()\n            continue\n        words.append(s[i])\n        if len(words) == n:\n            words.pop()\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp1dumwt15.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp1dumwt15.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp1dumwt15.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpznrl6gu8.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpznrl6gu8.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpznrl6gu8.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                break\n            else:\n                continue\n        else:\n            if len(words) == n:\n                words.append(s[i:i+n])\n                break\n            else:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdw0e8n6g.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpdw0e8n6g.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpdw0e8n6g.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        else:\n            if s[i:i+n] in words:\n                continue\n            else:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpebsxjx5y.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpebsxjx5y.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpebsxjx5y.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                break\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2pkz8gag.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp2pkz8gag.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp2pkz8gag.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            break\n        if s[i] in 'aeiou':\n            words.append(s[i])\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2ii2u4is.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp2ii2u4is.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmp2ii2u4is.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    # Your code here\n    \n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvn8iufyd.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpvn8iufyd.py\", line 36, in test_check\n    check(select_words)\n  File \"/tmp/tmpvn8iufyd.py\", line 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n        else:\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpknpq4v69.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpknpq4v69.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpknpq4v69.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            return words\n        if s[i] in 'aeiou':\n            words.append(s[i])\n        else:\n            for j in range(i, len(s)):\n                if s[j] in 'aeiou':\n                    words.append(s[j])\n                    break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgscjckj7.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpgscjckj7.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpgscjckj7.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if n == 0:\n                words.append(s[i:])\n                break\n            n -= 1\n        else:\n            if n == 0:\n                words.append(s[i:])\n                break\n            n -= 1\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpe18ji83o.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmpe18ji83o.py\", line 47, in test_check\n    check(select_words)\n  File \"/tmp/tmpe18ji83o.py\", line 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj_8mpj6s.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpj_8mpj6s.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpj_8mpj6s.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhzbtyf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8uhzbtyf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8uhzbtyf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = []\n            continue\n        if s[i] == ' ':\n            continue\n        if len(words) == 0:\n            words.append(s[i])\n        else:\n            if len(words) == n:\n                words.append(s[i])\n            else:\n                words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpbom4a4mm.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmpbom4a4mm.py\", line 48, in test_check\n    check(select_words)\n  File \"/tmp/tmpbom4a4mm.py\", line 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == 0:\n                words.append(s[i])\n            else:\n                if len(words) < n:\n                    words.append(s[i])\n                else:\n                    break\n        else:\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpw2u4mi4r.py\", line 55, in <module>\n    test_check()\n  File \"/tmp/tmpw2u4mi4r.py\", line 53, in test_check\n    check(select_words)\n  File \"/tmp/tmpw2u4mi4r.py\", line 44, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = []\n            continue\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            break\n        words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7q9i1bob.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmp7q9i1bob.py\", line 44, in test_check\n    check(select_words)\n  File \"/tmp/tmp7q9i1bob.py\", line 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if n == 0:\n                words.append(s[i:])\n                break\n            n -= 1\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq1oewd9i.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpq1oewd9i.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpq1oewd9i.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpk1dzoaw7.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpk1dzoaw7.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpk1dzoaw7.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = []\n        else:\n            if len(words) == 0:\n                words.append(s[i])\n            else:\n                if len(words) == n:\n                    words.append(s[i])\n                else:\n                    words = []\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmphjsaywsb.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmphjsaywsb.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmphjsaywsb.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            return words\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpa0v9cbbi.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpa0v9cbbi.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmpa0v9cbbi.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = []\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                words.append(s[i:i+1])\n                continue\n            if len(words) > 0:\n                words = []\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpm4fuxahw.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpm4fuxahw.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpm4fuxahw.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i+1:])\n                break\n        else:\n            if len(words) > 0:\n                words.append(s[i:])\n                break\n            else:\n                words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp18iotodd.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmp18iotodd.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmp18iotodd.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] == ' ':\n            words.append(s[i:i+n])\n            i += n\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8a_tpavw.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8a_tpavw.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8a_tpavw.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpao53b6rr.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpao53b6rr.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpao53b6rr.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj_8mpj6s.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpj_8mpj6s.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpj_8mpj6s.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            break\n        if s[i] not in 'aeiou':\n            continue\n        words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp14alyc6w.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp14alyc6w.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp14alyc6w.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhzbtyf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8uhzbtyf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8uhzbtyf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i+1:])\n                break\n        else:\n            if len(words) > 0:\n                words.append(s[i:])\n                break\n            else:\n                words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmplet8nu3_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmplet8nu3_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmplet8nu3_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        if len(words) == n:\n            break\n        if len(words) == 0:\n            words.append(s[i])\n        else:\n            if s[i] in words:\n                words.remove(s[i])\n            else:\n                words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4a4kwzqz.py\", line 50, in <module>\n    test_check()\n  File \"/tmp/tmp4a4kwzqz.py\", line 48, in test_check\n    check(select_words)\n  File \"/tmp/tmp4a4kwzqz.py\", line 39, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n        else:\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpoxmepxtf.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpoxmepxtf.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpoxmepxtf.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # TODO: implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp7kcwi4qx.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmp7kcwi4qx.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmp7kcwi4qx.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv4g11_gr.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpv4g11_gr.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmpv4g11_gr.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word) == n and len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgommlswx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpgommlswx.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpgommlswx.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            s = s[i+1:]\n            n = n - 1\n        else:\n            n = n + 1\n    if len(words) > 0:\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdzo_i_ie.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpdzo_i_ie.py\", line 44, in test_check\n    check(select_words)\n  File \"/tmp/tmpdzo_i_ie.py\", line 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\n  File \"/tmp/tmpdzo_i_ie.py\", line 23, in select_words\n    if s[i] == ' ':\nIndexError: string index out of range\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # TODO: implement the function\n    pass\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxk9etdto.py\", line 36, in <module>\n    test_check()\n  File \"/tmp/tmpxk9etdto.py\", line 34, in test_check\n    check(select_words)\n  File \"/tmp/tmpxk9etdto.py\", line 25, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) < n:\n                words.append(s[i:i+1])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmps_svfe6j.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmps_svfe6j.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmps_svfe6j.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(s[i:i+n])\n            i += n - 1\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp13851yxb.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp13851yxb.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp13851yxb.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3u3uelot.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp3u3uelot.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp3u3uelot.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                break\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp91etatrf.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp91etatrf.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp91etatrf.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if len(words) == n:\n            break\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgylavbhf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpgylavbhf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmpgylavbhf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n        else:\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpknpq4v69.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpknpq4v69.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpknpq4v69.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2acthe3n.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp2acthe3n.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmp2acthe3n.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj_8mpj6s.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpj_8mpj6s.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpj_8mpj6s.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n        else:\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2i_cz230.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmp2i_cz230.py\", line 47, in test_check\n    check(select_words)\n  File \"/tmp/tmp2i_cz230.py\", line 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            words = []\n        else:\n            if len(words) == 0:\n                words.append(s[i:i+n])\n            else:\n                if len(words[-1]) + 1 == n:\n                    words.append(s[i:i+n])\n                else:\n                    words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp6nyujvt7.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmp6nyujvt7.py\", line 47, in test_check\n    check(select_words)\n  File \"/tmp/tmp6nyujvt7.py\", line 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                break\n            else:\n                continue\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        if len(words) == n:\n            break\n        words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpszxxq6w0.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpszxxq6w0.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpszxxq6w0.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                break\n            else:\n                continue\n        else:\n            if len(words) == n:\n                words.append(s[i:i+n])\n                break\n            else:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdw0e8n6g.py\", line 48, in <module>\n    test_check()\n  File \"/tmp/tmpdw0e8n6g.py\", line 46, in test_check\n    check(select_words)\n  File \"/tmp/tmpdw0e8n6g.py\", line 37, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) < n:\n                words.append(s[i])\n        else:\n            if len(words) < n:\n                words.append(s[i])\n            else:\n                break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp0ceymixe.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmp0ceymixe.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmp0ceymixe.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n                break\n        else:\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpja0l85u_.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpja0l85u_.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpja0l85u_.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        else:\n            words.append(s[i])\n    for i in range(len(words)):\n        if len(words[i]) == n:\n            return words\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpidl2ypdx.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpidl2ypdx.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpidl2ypdx.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                break\n            else:\n                continue\n        else:\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpx28t_obc.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpx28t_obc.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmpx28t_obc.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            words.append(s[i:i+n])\n            i += n - 1\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp13851yxb.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp13851yxb.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp13851yxb.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        else:\n            words.append(s[i])\n            if len(words) == n:\n                return words\n            for j in range(i+1, len(s)):\n                if s[j] == ' ':\n                    continue\n                else:\n                    words.append(s[j])\n                    if len(words) == n:\n                        return words\n                    for k in range(j+1, len(s)):\n                        if s[k] == ' ':\n                            continue\n                        else:\n                            words.append(s[k])\n                            if len(words) == n:\n                                return words\n                            for l in range(k+1, len(s)):\n                                if s[l] == ' ':\n                                    continue\n                                else:\n                                    words.append(s[l])\n                                    if len(words) == n:\n                                        return words\n                                    for m in range(l+1, len(s)):\n                                        if s[m] == ' ':\n                                            continue\n                                        else:\n                                            words.append(s[m])\n                                            if len(words) == n:\n                                                return words\n                                            for n in range(m+1, len(s)):\n                                                if s[n] == ' ':\n                                                    continue\n                                                else:\n                                                    words.append(s[n])\n                                                    if len(words) == n:\n                                                        return words\n                                                    for o in range(n+1, len(s)):\n                                                        if s[o] == ' ':\n                                                            continue\n                                                        else:\n                                                            words.append(s[o])\n                                                            if len(words) == n:\n                                                                return\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp9iut_7n2.py\", line 84, in <module>\n    test_check()\n  File \"/tmp/tmp9iut_7n2.py\", line 82, in test_check\n    check(select_words)\n  File \"/tmp/tmp9iut_7n2.py\", line 73, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = words[:len(words) - 1]\n            continue\n        if s[i] == ' ':\n            continue\n        if len(words) < n:\n            words.append(s[i])\n        else:\n            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdeksltkp.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpdeksltkp.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpdeksltkp.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            words = []\n        else:\n            words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv4s5x64l.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpv4s5x64l.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpv4s5x64l.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i+1:])\n                break\n        else:\n            if len(words) == 0:\n                words.append(s[i:])\n            else:\n                if len(words[-1]) + 1 == n:\n                    words.append(s[i:])\n                else:\n                    words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8rxai_v_.py\", line 49, in <module>\n    test_check()\n  File \"/tmp/tmp8rxai_v_.py\", line 47, in test_check\n    check(select_words)\n  File \"/tmp/tmp8rxai_v_.py\", line 38, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words = []\n            continue\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) == n:\n                words.append(s[i])\n            else:\n                words = []\n                words.append(s[i])\n        else:\n            if len(words) == n:\n                words.append(s[i])\n            else:\n                words = []\n                words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpxhrllt95.py\", line 55, in <module>\n    test_check()\n  File \"/tmp/tmpxhrllt95.py\", line 53, in test_check\n    check(select_words)\n  File \"/tmp/tmpxhrllt95.py\", line 44, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s) - n + 1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpdfcna3gl.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpdfcna3gl.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpdfcna3gl.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp8uhzbtyf.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmp8uhzbtyf.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmp8uhzbtyf.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    # Your code here\n    \n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvn8iufyd.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpvn8iufyd.py\", line 36, in test_check\n    check(select_words)\n  File \"/tmp/tmpvn8iufyd.py\", line 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [word for word in s.split() if len(word) == n and len(set(word)) == n]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpgommlswx.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmpgommlswx.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmpgommlswx.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    # Your code here\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                break\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpykjcxuj_.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmpykjcxuj_.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmpykjcxuj_.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    return [s[i:i+n] for i in range(len(s)-n+1)]\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3ddv6g36.py\", line 35, in <module>\n    test_check()\n  File \"/tmp/tmp3ddv6g36.py\", line 33, in test_check\n    check(select_words)\n  File \"/tmp/tmp3ddv6g36.py\", line 24, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984002
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:])\n                break\n        else:\n            if len(words) > 0:\n                words.append(s[i:])\n            else:\n                words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipghomat.py\", line 46, in <module>\n    test_check()\n  File \"/tmp/tmpipghomat.py\", line 44, in test_check\n    check(select_words)\n  File \"/tmp/tmpipghomat.py\", line 35, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    if len(s) == 0:\n        return words\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp2acthe3n.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmp2acthe3n.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmp2acthe3n.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            words.append(s[i:i+n])\n            break\n        if s[i] in 'bcdfghjklmnpqrstvwxyz':\n            words.append(s[i:i+n])\n            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmptw0nzvmm.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmptw0nzvmm.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmptw0nzvmm.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        if len(words) < n:\n            words.append(s[i:i+1])\n        else:\n            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv4qw28_3.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpv4qw28_3.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpv4qw28_3.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3u3uelot.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp3u3uelot.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp3u3uelot.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp3u3uelot.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmp3u3uelot.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmp3u3uelot.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'abcdefghijklmnopqrstuvwxyz':\n            if len(words) == n:\n                return words\n            words.append(s[i:i+1])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpj_8mpj6s.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpj_8mpj6s.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpj_8mpj6s.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                break\n            else:\n                words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmppgh23d2d.py\", line 44, in <module>\n    test_check()\n  File \"/tmp/tmppgh23d2d.py\", line 42, in test_check\n    check(select_words)\n  File \"/tmp/tmppgh23d2d.py\", line 33, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] in 'aeiou':\n            if len(words) == n:\n                return words\n            words.append(s[i])\n        else:\n            if len(words) == n:\n                return words\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpknpq4v69.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpknpq4v69.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpknpq4v69.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i] not in 'abcdefghijklmnopqrstuvwxyz':\n            continue\n        if len(words) < n:\n            words.append(s[i:i+1])\n        else:\n            break\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpv4qw28_3.py\", line 45, in <module>\n    test_check()\n  File \"/tmp/tmpv4qw28_3.py\", line 43, in test_check\n    check(select_words)\n  File \"/tmp/tmpv4qw28_3.py\", line 34, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n        else:\n            if len(words) > 0:\n                words.append(s[i:i+n])\n            else:\n                words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpp8umwl8a.py\", line 47, in <module>\n    test_check()\n  File \"/tmp/tmpp8umwl8a.py\", line 45, in test_check\n    check(select_words)\n  File \"/tmp/tmpp8umwl8a.py\", line 36, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863499
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    \n    # Your code here\n    \n    return []\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpvn8iufyd.py\", line 38, in <module>\n    test_check()\n  File \"/tmp/tmpvn8iufyd.py\", line 36, in test_check\n    check(select_words)\n  File \"/tmp/tmpvn8iufyd.py\", line 27, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpipw_k4pe.py\", line 40, in <module>\n    test_check()\n  File \"/tmp/tmpipw_k4pe.py\", line 38, in test_check\n    check(select_words)\n  File \"/tmp/tmpipw_k4pe.py\", line 29, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            if len(words) == n:\n                return words\n            words = []\n        else:\n            words.append(s[i])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmpq2780ack.py\", line 43, in <module>\n    test_check()\n  File \"/tmp/tmpq2780ack.py\", line 41, in test_check\n    check(select_words)\n  File \"/tmp/tmpq2780ack.py\", line 32, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1661984001
    },
    {
      "exit_code": 1,
      "program": "from typing import List\n\ndef select_words(s: str, n: int) -> List[str]:\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    >>> select_words(\"Mary had a little lamb\", 4)\n    [\"little\"]\n    >>> select_words(\"Mary had a little lamb\", 3)\n    [\"Mary\", \"lamb\"]\n    >>> select_words(\"simple white space\", 2)\n    []\n    >>> select_words(\"Hello world\", 4)\n    [\"world\"]\n    >>> select_words(\"Uncle sam\", 3)\n    [\"Uncle\"]\n    \"\"\"\n    words = []\n    for i in range(len(s)):\n        if s[i] == ' ':\n            continue\n        if s[i:i+n] in words:\n            continue\n        words.append(s[i:i+n])\n    return words\n\ndef check(candidate):\n    assert candidate('Mary had a little lamb', 4) == ['little']\n    assert candidate('Mary had a little lamb', 3) == ['Mary', 'lamb']\n    assert candidate('simple white space', 2) == []\n    assert candidate('Hello world', 4) == ['world']\n    assert candidate('Uncle sam', 3) == ['Uncle']\n    assert candidate('', 4) == []\n    assert candidate('a b c d e f', 1) == ['b', 'c', 'd', 'f']\n\ndef test_check():\n    check(select_words)\n\ntest_check()\n",
      "status": "Exception",
      "stderr": "Traceback (most recent call last):\n  File \"/tmp/tmp4q4_7aqh.py\", line 42, in <module>\n    test_check()\n  File \"/tmp/tmp4q4_7aqh.py\", line 40, in test_check\n    check(select_words)\n  File \"/tmp/tmp4q4_7aqh.py\", line 31, in check\n    assert candidate('Mary had a little lamb', 4) == ['little']\nAssertionError\n",
      "stdout": "",
      "timestamp": 1662863498
    }
  ]
}