name: HumanEval_142_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\
  \"\"\"\n    This function will take a list of integers. For all entries in the list,\
  \ the function shall square the integer entry if its index is a \n    multiple of\
  \ 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple\
  \ of 3. The function will not \n    change the entries in the list whose indexes\
  \ are not a multiple of 3 or 4. The function shall then return the sum of all entries.\
  \ \n    \n    Examples:\n    >>> lst \n    [1,2,3] \n    >>> lst \n    []  \n  \
  \  >>> lst \n    [-1,-5,2,-1,-5]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1,\
  \ 4, 9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1, 1, 1, 1,\
  \ 1, 1, 1, 1, 1]) == 9\n    assert candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1])\
  \ == -3\n    assert candidate([0]) == 0\n    assert candidate([-1, -5, 2, -1, -5])\
  \ == -126\n    assert candidate([-56, -99, 1, 0, -2]) == 3030\n    assert candidate([-1,\
  \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26,\
  \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3,\
  \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
  \ -1448\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    return sum([x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for\
    \ i, x in enumerate(lst)])\n", "    return sum([i**2 for i in lst if i%3==0 or\
    \ i%4==0])\n", "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n     \
    \       sum += i * i\n        elif i % 4 == 0 and i % 3 != 0:\n            sum\
    \ += i * i * i\n    return sum\n", "    return sum([x**2 for x in lst if x % 3\
    \ == 0 or x % 4 == 0])\n", "    return sum([x**2 for x in lst if x%3==0]) + sum([x**3\
    \ for x in lst if x%4==0 and x%3!=0])\n", "    return sum([i**2 for i in lst if\
    \ i%3==0 or i%4==0])\n", "    return sum([i**2 if i%3==0 else i**3 if i%4==0 else\
    \ i for i in lst])\n", "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n\
    \            sum += i * i\n        elif i % 4 == 0 and i % 3 != 0:\n         \
    \   sum += i * i * i\n    return sum\n", "    sum = 0\n    for i in lst:\n   \
    \     if i % 3 == 0:\n            sum += i * i\n        elif i % 4 == 0 and i\
    \ % 3 != 0:\n            sum += i * i * i\n    return sum\n", "    return sum([i**2\
    \ for i in lst if i%3==0 or i%4==0])\n", "    return sum([i**2 for i in lst if\
    \ i%3==0 or i%4==0])\n", "    return sum([i**2 for i in lst if i%3==0 or i%4==0])\n",
  "    return sum([x**2 for x in lst if x % 3 == 0 or x % 4 == 0])\n", "    return\
    \ sum([i**2 if i % 3 == 0 else i**3 if i % 4 == 0 else i for i in lst])\n", " \
    \   sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i *\
    \ i\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += i * i * i\n \
    \   return sum\n", "    return sum([i**2 for i in lst if i%3==0 or i%4==0])\n",
  "    sum = 0\n    for i in lst:\n        if i % 3 == 0:\n            sum += i *\
    \ i\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += i * i * i\n \
    \   return sum\n", "    total = 0\n    for i in lst:\n        if i % 3 == 0:\n\
    \            total += i * i\n        elif i % 4 == 0 and i % 3 != 0:\n       \
    \     total += i * i * i\n    return total\n", "    return sum([x**2 for x in\
    \ lst if x%3==0 or x%4==0])\n", "    total = 0\n    for i in lst:\n        if\
    \ i % 3 == 0:\n            total += i * i\n        elif i % 4 == 0 and i % 3 !=\
    \ 0:\n            total += i * i * i\n    return total\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
