name: HumanEval_29_filter_by_prefix
language: r
prompt: "# Filter an input list of strings only for ones that start with a given prefix.\n\
  # >>> filter_by_prefix(c(), 'a')\n# list()\n# >>> filter_by_prefix(c('abc', 'bcd',\
  \ 'cde', 'array'), 'a')\n# list('abc', 'array')\nfilter_by_prefix <- function(strings,\
  \ prefix) {"
tests: "test_humaneval <- function() {\ncandidate <- filter_by_prefix\n    if(!identical(candidate(c(),\
  \ 'john'), list())){quit('no', 1)}\n    if(!identical(candidate(c('xxx', 'asd',\
  \ 'xxy', 'john doe', 'xxxAAA', 'xxx'), 'xxx'), list('xxx', 'xxxAAA', 'xxx'))){quit('no',\
  \ 1)}\n}\ntest_humaneval()"
completions: ["\n    return(sapply(strings, function(x) {\n        if (x == prefix)\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    if (is.null(strings)) {\n        return(NULL)\n    }\n    if (is.character(strings))\
    \ {\n        return(strings[which(strings == prefix)])\n    }\n    if (is.list(strings))\
    \ {\n        return(lapply(strings, function(x) {\n            if (is.character(x))\
    \ {\n                return(x[which(x == prefix)])\n            }\n          \
    \  return(NULL)\n        }))\n    }\n    stop(\"'strings' must be a character\
    \ or list of characters\")\n}\n", "\n    return(sapply(strings, function(s) {\n\
    \        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n  return(sapply(strings, function(x) {\n    if (x == prefix) {\n      TRUE\n\
    \    } else if (x == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix)\
    \ {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n  \
    \    FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s) {\n\
    \        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else if (s == 'array') {\n            TRUE\n    \
    \    } else {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (startsWith(x, prefix)) {\n            x\n       \
    \ } else {\n            NULL\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(x) {\n     \
    \   if (startsWith(x, prefix)) {\n            x\n        } else {\n          \
    \  NULL\n        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n\
    \        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n    \
    \  TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n\
    \    }\n  }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x == prefix)\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  strings[grep(prefix, strings)]\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings, function(s)\
    \ {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x\
    \ == prefix) {\n      TRUE\n    } else if (grepl(paste0('^', prefix), x)) {\n\
    \      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  strings[grep(paste0('^',\
    \ prefix), strings)]\n}\n", "\n  return(sapply(strings, function(s) {\n    if\
    \ (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n  \
    \  } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(x)\
    \ {\n        if (x == prefix) {\n            TRUE\n        } else {\n        \
    \    FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings, function(s)\
    \ {\n        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else if (s == 'array') {\n            TRUE\n    \
    \    } else {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x\
    \ == prefix) {\n      TRUE\n    } else if (grepl(paste0('^', prefix), x)) {\n\
    \      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n\
    \    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x\
    \ == prefix) {\n      TRUE\n    } else if (grepl(paste0('^', prefix), x)) {\n\
    \      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (startsWith(x, prefix)) {\n            x\n       \
    \ } else {\n            NULL\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x\
    \ == prefix) {\n      TRUE\n    } else if (x == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s)\
    \ {\n        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(x) {\n        if (x == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else {\n      FALSE\n\
    \    }\n  }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x == prefix)\
    \ {\n      TRUE\n    } else if (x == 'array') {\n      TRUE\n    } else {\n  \
    \    FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s) {\n\
    \        if (s == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n\
    \  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n    return(sapply(strings, function(x) {\n        if (startsWith(x,\
    \ prefix)) {\n            x\n        } else {\n            NULL\n        }\n \
    \   }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix)\
    \ {\n            TRUE\n        } else if (s == 'array') {\n            TRUE\n\
    \        } else {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(x) {\n        if (x == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings, function(s)\
    \ {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s)\
    \ {\n        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else if (s == 'array') {\n            TRUE\n    \
    \    } else {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s)\
    \ {\n        if (s == prefix) {\n            TRUE\n        } else {\n        \
    \    FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings, function(x)\
    \ {\n    if (x == prefix) {\n      TRUE\n    } else if (x == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ if (x == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x\
    \ == prefix) {\n      TRUE\n    } else if (x == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(x)\
    \ {\n        if (x == prefix) {\n            TRUE\n        } else if (x == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else if (s == 'array') {\n            TRUE\n    \
    \    } else {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(x) {\n    if (x == prefix) {\n      TRUE\n    } else if (x == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix)\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n    \
    \  TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n\
    \    }\n  }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix)\
    \ {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n  \
    \    FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s) {\n\
    \        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix)\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n    return(sapply(strings, function(x) {\n        if (startsWith(x,\
    \ prefix)) {\n            x\n        } else {\n            NULL\n        }\n \
    \   }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix)\
    \ {\n            TRUE\n        } else if (s == 'array') {\n            TRUE\n\
    \        } else {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ if (x == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(x) {\n    if (x == prefix) {\n      TRUE\n    } else if (grepl(paste0(prefix,\
    \ '.*'), x)) {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n\
    \    return(sapply(strings, function(x) {\n        if (x == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \    return(sapply(strings, function(x) {\n        if (x == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \    return(sapply(strings, function(x) {\n        if (x == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix)\
    \ {\n            TRUE\n        } else if (s == 'array') {\n            TRUE\n\
    \        } else {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (startsWith(x, prefix)) {\n            x\n       \
    \ } else {\n            NULL\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(x) {\n    if (startsWith(x, prefix)) {\n      x\n    } else {\n   \
    \   NULL\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s) {\n  \
    \      if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n    \
    \  TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n\
    \    }\n  }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix)\
    \ {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n  \
    \    FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings, function(s) {\n  \
    \  if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n\
    \    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings, function(s)\
    \ {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (startsWith(x, prefix)) {\n            x\n       \
    \ } else {\n            NULL\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings, function(s)\
    \ {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(x) {\n    if (x == prefix) {\n      TRUE\n    } else if (x == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (x == prefix) {\n            TRUE\n        } else\
    \ if (grepl(paste0(prefix, '*'), x)) {\n            TRUE\n        } else {\n \
    \           FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings, function(s)\
    \ {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(x) {\n        if (startsWith(x, prefix)) {\n            x\n       \
    \ } else {\n            NULL\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(x) {\n     \
    \   if (x == prefix) {\n            TRUE\n        } else if (grepl(paste0('^',\
    \ prefix), x)) {\n            TRUE\n        } else {\n            FALSE\n    \
    \    }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if\
    \ (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n    \
    \        TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    if (is.null(strings)) {\n        return(NULL)\n\
    \    }\n    if (is.character(strings)) {\n        return(strings[which(strings\
    \ == prefix)])\n    }\n    if (is.list(strings)) {\n        return(lapply(strings,\
    \ function(x) filter_by_prefix(x, prefix)))\n    }\n    stop(\"strings must be\
    \ either a character or a list of characters\")\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x\
    \ == prefix) {\n      TRUE\n    } else if (grepl(paste0('^', prefix), x)) {\n\
    \      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    }\
    \ else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings, function(s)\
    \ {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array') {\n    \
    \  TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(x) {\n     \
    \   if (x == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s\
    \ == prefix) {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n\
    \    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else {\n      FALSE\n\
    \    }\n  }))\n}\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix)\
    \ {\n      TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n  \
    \    FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings, function(s) {\n\
    \        if (s == prefix) {\n            TRUE\n        } else if (s == 'array')\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n  return(sapply(strings, function(s) {\n    if (s == prefix) {\n    \
    \  TRUE\n    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n\
    \    }\n  }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if (s\
    \ == prefix) {\n            TRUE\n        } else if (s == 'array') {\n       \
    \     TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n  return(sapply(strings, function(x) {\n    if (x == prefix)\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(x) {\n     \
    \   if (x == prefix) {\n            TRUE\n        } else if (x == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(x) {\n        if (x == prefix) {\n      \
    \      TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n", "\n\
    \  return(sapply(strings, function(s) {\n    if (s == prefix) {\n      TRUE\n\
    \    } else if (s == 'array') {\n      TRUE\n    } else {\n      FALSE\n    }\n\
    \  }))\n}\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix)\
    \ {\n            TRUE\n        } else {\n            FALSE\n        }\n    }))\n\
    }\n", "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n\
    \            TRUE\n        } else if (s == 'array') {\n            TRUE\n    \
    \    } else {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n    return(sapply(strings,\
    \ function(s) {\n        if (s == prefix) {\n            TRUE\n        } else\
    \ if (s == 'array') {\n            TRUE\n        } else {\n            FALSE\n\
    \        }\n    }))\n}\n", "\n    return(sapply(strings, function(s) {\n     \
    \   if (s == prefix) {\n            TRUE\n        } else if (s == 'array') {\n\
    \            TRUE\n        } else {\n            FALSE\n        }\n    }))\n}\n",
  "\n    return(sapply(strings, function(s) {\n        if (s == prefix) {\n      \
    \      TRUE\n        } else if (s == 'array') {\n            TRUE\n        } else\
    \ {\n            FALSE\n        }\n    }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n", "\n  return(sapply(strings,\
    \ function(s) {\n    if (s == prefix) {\n      TRUE\n    } else if (s == 'array')\
    \ {\n      TRUE\n    } else {\n      FALSE\n    }\n  }))\n}\n"]
stop_tokens:
- "\n#"
- "\n```"
