{
  "name": "HumanEval_95_check_dict_case",
  "language": "r",
  "prompt": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {",
  "tests": "test_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "results": [
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.null(key) || !is.character(key)) {\n      return(FALSE)\n    }\n    if (any(key != toupper(key) & key != tolower(key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (any(str_sub(key, 1, 1) != str_sub(key, 1, 1))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "Error in str_sub(key, 1, 1) : could not find function \"str_sub\"\nCalls: test_humaneval -> candidate\nExecution halted\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && is.character(dict[[key]])) {\n            if (any(toupper(key) != toupper(dict[[key]]))) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && !is.character(key)) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.null(key) && is.character(dict[[key]])) {\n      if (tolower(dict[[key]]) != tolower(key)) {\n        return(FALSE)\n      }\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in dict) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.null(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(key != toupper(key) & key != tolower(key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.null(key) || is.na(key)) {\n            return(FALSE)\n        }\n        if (is.character(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (any(toupper(key) != toupper(dict[[key]]))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (any(str_sub(key, 1, 1) != str_sub(key, 1, 1))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "Error in str_sub(key, 1, 1) : could not find function \"str_sub\"\nCalls: test_humaneval -> candidate\nExecution halted\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(key != toupper(key) & key != tolower(key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (any(str_to_lower(key) != str_to_lower(dict[[key]]))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "Error in str_to_lower(key) : could not find function \"str_to_lower\"\nCalls: test_humaneval -> candidate\nExecution halted\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in dict) {\n        if (is.character(key) && !is.null(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.null(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(c(toupper(key), tolower(key)) != key)) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.null(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.null(key) && any(toupper(key) != key)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(key != toupper(key) & key != tolower(key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(c(toupper(key), tolower(key)) != key)) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.null(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key)) {\n            if (any(toupper(key) != key)) {\n                return(FALSE)\n            }\n        } else {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.null(key) || is.na(key)) {\n      return(FALSE)\n    }\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (any(toupper(key) != toupper(dict[[key]]))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.null(key) && !is.character(key)) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.null(key) && is.character(dict[[key]])) {\n            if (tolower(dict[[key]]) != tolower(key)) {\n                return(FALSE)\n            }\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (any(toupper(key) != toupper(dict[[key]]))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.null(key) || !is.character(key)) {\n      return(FALSE)\n    }\n    if (any(!is.lower(key) & !is.upper(key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "Error in is.lower(key) : could not find function \"is.lower\"\nCalls: test_humaneval -> candidate\nExecution halted\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(dict[[key]]) && !is.character(key)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.null(key) || is.na(key)) {\n      return(FALSE)\n    }\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in dict) {\n        if (is.character(key) && !is.null(key) && any(toupper(key) != key)) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(key != toupper(key) & key != tolower(key))) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in dict) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n    if (is.null(dict)) {\n        return(FALSE)\n    }\n    for (key in names(dict)) {\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n        if (is.character(key) && !is.character(dict[[key]])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key)) {\n      if (any(toupper(key) != key)) {\n        return(FALSE)\n      }\n    } else {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (!is.character(key) || !is.character(dict[[key]])) {\n      return(FALSE)\n    }\n    if (tolower(key) != key) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Given a named list, return TRUE if all keys are strings in lower \n# case or all keys are strings in upper case, else return FALSE.\n# The function should return FALSE is the given named list is empty.\n# Examples:\n# >>> check_dict_case(list('a' = 'apple', 'b' = 'banana'))\n# TRUE\n# >>> check_dict_case(list('a' = 'apple', 'A' = 'banana', 'B' = 'banana'))\n# FALSE\n# >>> check_dict_case(list('a' = 'apple', 8 = 'banana', 'a' = 'apple'))\n# FALSE\n# >>> check_dict_case(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston'))\n# FALSE\n# >>> check_dict_case(list('STATE' = 'NC', 'ZIP' = '12345'))\n# TRUE\ncheck_dict_case <- function(dict) {\n  if (is.null(dict)) {\n    return(FALSE)\n  }\n  for (key in names(dict)) {\n    if (is.character(key) && !is.null(key) && any(c(toupper(key), tolower(key)) != key)) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ntest_humaneval <- function() {\ncandidate <- check_dict_case\n    if(!identical(candidate(list('p' = 'pineapple', 'b' = 'banana')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', 'A' = 'banana', 'B' = 'banana')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('p' = 'pineapple', '5' = 'banana', 'a' = 'apple')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('Name' = 'John', 'Age' = '36', 'City' = 'Houston')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list('STATE' = 'NC', 'ZIP' = '12345')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list('fruit' = 'Orange', 'taste' = 'Sweet')), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list()), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293101,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}