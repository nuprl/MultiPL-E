{
  "name": "HumanEval_99_closest_integer",
  "language": "r",
  "prompt": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {",
  "tests": "test_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "results": [
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (abs(value) == 2) {\n    return(value)\n  }\n  if (abs(value) == 3) {\n    return(value)\n  }\n  if (abs(value) == 4) {\n    return(value)\n  }\n  if (abs(value) == 5) {\n    return(value)\n  }\n  if (abs(value) == 6) {\n    return(value)\n  }\n  if (abs(value) == 7) {\n    return(value)\n  }\n  if (abs(value) == 8) {\n    return(value)\n  }\n  if (abs(value) == 9) {\n    return(value)\n  }\n  if (abs(value) == 10) {\n    return(value)\n  }\n  if (abs(value) == 11) {\n    return(value)\n  }\n  if (abs(value) == 12) {\n    return(value)\n  }\n  if (abs(value) == 13) {\n    return(value)\n  }\n  if (abs(value) == 14) {\n    return(value)\n  }\n  if (abs(value) == 15) {\n    return(value)\n  }\n  if (abs(value) == 16) {\n    return(value)\n  }\n  if (abs(value) == 17) {\n    return(value)\n  }\n  if (abs(value) == 18) {\n    return(value)\n  }\n  if (abs(value) == 19) {\n    return(value)\n  }\n  if (abs(value) == 20) {\n    return(value)\n  \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    }\n    if (abs(value) == 21) {\n        return(value)\n    }\n    if (abs(value) == 22) {\n        return(value)\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(floor(value + 0.5))\n    }\n    return(ceiling(value - 0.5))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    if (abs(value) < 1) {\n      return(round(value))\n    } else {\n      return(round(value, 1))\n    }\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(floor(value))\n    }\n    return(ceiling(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    stop(\"Invalid value\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n\n  # If the value is still not an integer, return it\n  if (!is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    stop(\"Value is not a string or a numeric value\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a string, convert it to a number\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n\n  # If the value is a character, return the closest integer\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a boolean, return the closest integer\n  if (is.logical(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(value))\n  }\n\n  # If the value is a complex number, return the closest integer\n  if (is.complex(value)) {\n    return(as.integer(\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"}\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(round(value))\n  }\n  if (value < 0) {\n    return(round(value - 1))\n  }\n  return(round(value + 1))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (abs(value) < 1) {\n      return(round(value))\n    } else {\n      return(round(value + (value > 0) * .5))\n    }\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value is not a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(floor(value))\n  }\n  return(ceiling(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (abs(value) < 1) {\n      return(value)\n    }\n    else {\n      return(round(value))\n    }\n  }\n  else {\n    return(NA)\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # Your code here\n    return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) < 2) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) < 3) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) < 4) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) < 5) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) < 6) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) < 7) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) < 8) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) < 9) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) < 10) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) < 11) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # your code here\n    return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (abs(value) < 1) {\n      return(value)\n    } else {\n      return(round(value))\n    }\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a string, convert it to a number\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a string, convert it to a number\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a string, convert it to a number\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(0)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return the closest integer\n  if (is.na(value)) {\n    return(\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"}\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value must be a string or numeric.\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value is not a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value is not a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(round(value))\n    }\n    if (abs(value) == 2) {\n        return(round(value))\n    }\n    if (abs(value) == 3) {\n        return(round(value))\n    }\n    if (abs(value) == 4) {\n        return(round(value))\n    }\n    if (abs(value) == 5) {\n        return(round(value))\n    }\n    if (abs(value) == 6) {\n        return(round(value))\n    }\n    if (abs(value) == 7) {\n        return(round(value))\n    }\n    if (abs(value) == 8) {\n        return(round(value))\n    }\n    if (abs(value) == 9) {\n        return(round(value))\n    }\n    if (abs(value) == 10) {\n        return(round(value))\n    }\n    if (abs(value) == 11) {\n        return(round(value))\n    }\n    if (abs(value) == 12) {\n        return(round(value))\n    }\n    if (abs(value) == 13) {\n        return(round(value))\n    }\n    if (abs(value) == 14) {\n        return(round(value))\n    }\n    if (abs(value) == 15) {\n        return(round(value))\n    }\n    if (abs(value) == 16) {\n        return(round(value))\n    }\n    if (abs(value) == 17) {\n        return(round(value))\n    }\n    if (abs(value) == 18) {\n        return(round(value))\n    }\n    if (abs\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"    if (abs\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return NA\n  else {\n    return(NA)\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    if (value == 0) {\n      return(0)\n    }\n    if (abs(value) < 1) {\n      return(round(value))\n    }\n    if (abs(value) == 1) {\n      return(as.integer(value))\n    }\n    if (abs(value) > 1) {\n      return(round(value))\n    }\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value < 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  }\n  return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (abs(value) == 2) {\n    return(value)\n  }\n  if (abs(value) == 3) {\n    return(value)\n  }\n  if (abs(value) == 4) {\n    return(value)\n  }\n  if (abs(value) == 5) {\n    return(value)\n  }\n  if (abs(value) == 6) {\n    return(value)\n  }\n  if (abs(value) == 7) {\n    return(value)\n  }\n  if (abs(value) == 8) {\n    return(value)\n  }\n  if (abs(value) == 9) {\n    return(value)\n  }\n  if (abs(value) == 10) {\n    return(value)\n  }\n  if (abs(value) == 11) {\n    return(value)\n  }\n  if (abs(value) == 12) {\n    return(value)\n  }\n  if (abs(value) == 13) {\n    return(value)\n  }\n  if (abs(value) == 14) {\n    return(value)\n  }\n  if (abs(value) == 15) {\n    return(value)\n  }\n  if (abs(value) == 16) {\n    return(value)\n  }\n  if (abs(value) == 17) {\n    return(value)\n  }\n  if (abs(value) == 18) {\n    return(value)\n  }\n  if (abs(value) == 19) {\n    return(value)\n  }\n  if (abs(value) == 20) {\n    return(value)\n  \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(round(value))\n  }\n  if (abs(value) > 1) {\n    return(round(value + 1))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  }\n  return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(floor(value))\n    } else {\n        return(ceiling(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.integer(value)) {\n        return(value)\n    }\n    if (is.double(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid value passed to closest_integer\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(0)\n    }\n    if (abs(value) == 2) {\n        return(1)\n    }\n    if (abs(value) == 3) {\n        return(2)\n    }\n    if (abs(value) == 4) {\n        return(3)\n    }\n    if (abs(value) == 5) {\n        return(4)\n    }\n    if (abs(value) == 6) {\n        return(5)\n    }\n    if (abs(value) == 7) {\n        return(6)\n    }\n    if (abs(value) == 8) {\n        return(7)\n    }\n    if (abs(value) == 9) {\n        return(8)\n    }\n    if (abs(value) == 10) {\n        return(9)\n    }\n    if (abs(value) == 11) {\n        return(10)\n    }\n    if (abs(value) == 12) {\n        return(11)\n    }\n    if (abs(value) == 13) {\n        return(12)\n    }\n    if (abs(value) == 14) {\n        return(13)\n    }\n    if (abs(value) == 15) {\n        return(14)\n    }\n    if (abs(value) == 16) {\n        return(15)\n    }\n    if (abs(value) == 17) {\n        return(16)\n    }\n    if (abs(value) == 18) {\n        return(17)\n    }\n    if (abs(value) == 19) {\n        return(18)\n    }\n    if (abs(value) == 20) {\n        return(19)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    } else if (abs(value) < 1) {\n        return(value)\n    } else {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    } else if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n  # If the value is a decimal, round it away from zero\n  if (is.double(value)) {\n    return(round(value))\n  }\n  # If the value is a fraction, round it away from zero\n  if (is.fraction(value)) {\n    return(round(value))\n  }\n  # If the value is a complex number, round it away from zero\n  if (is.complex(value)) {\n    return(round(value))\n  }\n  # If the value is a character, return it\n  if (is.character(value)) {\n    return(value)\n  }\n  # If the value is a list, return it\n  if (is.list(value)) {\n    return(value)\n  }\n  # If the value is a function, return it\n  if (is.function(value)) {\n    return(value)\n  }\n  # If the value is a symbol, return it\n  if (is.symbol(value)) {\n    return(value)\n  }\n  # If the value is a vector, return it\n  if (is.vector(value)) {\n    return(value)\n  }\n  # If the value is a matrix, return it\n  if (is.matrix(value)) {\n    return(value)\n  }\n  # If the value is a data frame, return it\n  if (is.data.frame(value)) {\n    return(value)\n  }\n  # If the value is a list of lists, return it\n  if (is.list(value) && is.list(value[[1]])) {\n    return(value)\n  }\n  # If the value is a list of vectors, return it\n  if (is.list(value) && is.vector(value[[1]])) {\n    return(value\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"    return(value\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(floor(value))\n  }\n  return(ceiling(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # Your code here\n    return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # Your code here\n    return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    }\n    if (value < 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.numeric(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(floor(value))\n  }\n  return(ceiling(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(round(value))\n    }\n    if (abs(value) > 1) {\n        return(round(value))\n    }\n    if (abs(value) == 2) {\n        return(round(value))\n    }\n    if (abs(value) == 3) {\n        return(round(value))\n    }\n    if (abs(value) == 4) {\n        return(round(value))\n    }\n    if (abs(value) == 5) {\n        return(round(value))\n    }\n    if (abs(value) == 6) {\n        return(round(value))\n    }\n    if (abs(value) == 7) {\n        return(round(value))\n    }\n    if (abs(value) == 8) {\n        return(round(value))\n    }\n    if (abs(value) == 9) {\n        return(round(value))\n    }\n    if (abs(value) == 10) {\n        return(round(value))\n    }\n    if (abs(value) == 11) {\n        return(round(value))\n    }\n    if (abs(value) == 12) {\n        return(round(value))\n    }\n    if (abs(value) == 13) {\n        return(round(value))\n    }\n    if (abs(value) == 14) {\n        return(round(value))\n    }\n    if (abs(value) == 15) {\n        return(round(value))\n    }\n    if (abs(value) == 16) {\n        return(round(value))\n    }\n    if (abs(value) == 17) {\n        return(round(value))\n    }\n    if (abs\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"    if (abs\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(floor(value + 0.5))\n    }\n    return(ceiling(value - 0.5))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(floor(value + 0.5))\n  } else {\n    return(ceiling(value - 0.5))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.numeric(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) > 1) {\n        return(round(value))\n    }\n    if (abs(value) == 1.5) {\n        return(round(value))\n    }\n    if (abs(value) == 2) {\n        return(round(value))\n    }\n    if (abs(value) == 2.5) {\n        return(round(value))\n    }\n    if (abs(value) == 3) {\n        return(round(value))\n    }\n    if (abs(value) == 3.5) {\n        return(round(value))\n    }\n    if (abs(value) == 4) {\n        return(round(value))\n    }\n    if (abs(value) == 4.5) {\n        return(round(value))\n    }\n    if (abs(value) == 5) {\n        return(round(value))\n    }\n    if (abs(value) == 5.5) {\n        return(round(value))\n    }\n    if (abs(value) == 6) {\n        return(round(value))\n    }\n    if (abs(value) == 6.5) {\n        return(round(value))\n    }\n    if (abs(value) == 7) {\n        return(round(value))\n    }\n    if (abs(value) == 7.5) {\n        return(round(value))\n    }\n    if (abs(value) == 8) {\n        return(round(value))\n    }\n    if (abs(value) == 8.5) {\n        return(round(value))\n    }\n    if (abs(value) == 9) {\n        \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.numeric(value)) {\n        if (abs(value) < 1) {\n            return(round(value))\n        } else {\n            return(round(value, -1))\n        }\n    }\n    return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) < 2) {\n        return(round(value))\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) < 3) {\n        return(round(value))\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) < 4) {\n        return(round(value))\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) < 5) {\n        return(round(value))\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) < 6) {\n        return(round(value))\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) < 7) {\n        return(round(value))\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) < 8) {\n        return(round(value))\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) < 9) {\n        return(round(value))\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) < 10) {\n        return(round(value))\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (value < 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # Your code here\n    return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid value passed to closest_integer\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # Convert the value to a number\n    value <- as.numeric(value)\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value)) {\n        return(value)\n    }\n    # If the value is a number, return it\n    if (is.numeric(value)) {\n        return(value)\n    }\n    # If the value is not a number, return it\n    if (!is.numeric(value\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"    if (!is.numeric(value\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid value given to closest_integer\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (abs(value) < 1) {\n      return(value)\n    } else {\n      return(round(value))\n    }\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n\n  # If the value is not a number, return it\n  if (!is.numeric(value\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"  if (!is.numeric(value\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(NA)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(NA)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(NA)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(NA)\n  }\n  \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  }\n  return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n  # If the value is not a number, return it\n  if (is.na(value)) {\n    return(value)\n  }\n  # If the value is a number, return it\n  if (is.numeric(value)) {\n    return(value)\n  }\n  # If the value is not a number, return NA\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    # Your code here\n    return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value is not a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.numeric(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (value == 0) {\n      return(0)\n    }\n    if (abs(value) < 1) {\n      return(value)\n    }\n    if (abs(value) == 1) {\n      return(value)\n    }\n    if (abs(value) == 2) {\n      return(value)\n    }\n    if (abs(value) == 3) {\n      return(value)\n    }\n    if (abs(value) == 4) {\n      return(value)\n    }\n    if (abs(value) == 5) {\n      return(value)\n    }\n    if (abs(value) == 6) {\n      return(value)\n    }\n    if (abs(value) == 7) {\n      return(value)\n    }\n    if (abs(value) == 8) {\n      return(value)\n    }\n    if (abs(value) == 9) {\n      return(value)\n    }\n    if (abs(value) == 10) {\n      return(value)\n    }\n    if (abs(value) == 11) {\n      return(value)\n    }\n    if (abs(value) == 12) {\n      return(value)\n    }\n    if (abs(value) == 13) {\n      return(value)\n    }\n    if (abs(value) == 14) {\n      return(value)\n    }\n    if (abs(value) == 15) {\n      return(value)\n    }\n    if (abs(value) == 16) {\n      return(value)\n    }\n    if (abs(value) == 17) {\n      return(value)\n    }\n    if (abs(value) == 18) {\n      return(value)\n    }\n    if (abs(value) == 19) {\n      return(value)\n    }\n    if (abs(value) == 20) {\n      return(value\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"      return(value\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.numeric(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Your code here\n  return(as.integer(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        if (length(value) == 1) {\n            return(value)\n        }\n        if (abs(value) < 1) {\n            return(round(value))\n        }\n        if (abs(value) == 1) {\n            return(value)\n        }\n        if (abs(value) > 1) {\n            return(round(value))\n        }\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (value == 0) {\n    return(0)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  }\n  return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.numeric(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.integer(value)) {\n        return(value)\n    }\n    if (is.double(value)) {\n        return(round(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        if (abs(value) < 1) {\n            return(round(value))\n        }\n        else {\n            return(round(value, 1))\n        }\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.numeric(value)) {\n        if (value == 0) {\n            return(0)\n        }\n        if (abs(value) < 1) {\n            return(round(value))\n        }\n        if (value > 0) {\n            return(ceiling(value))\n        }\n        return(floor(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    stop(\"Invalid input type\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(value)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (abs(value) == 2) {\n    return(value)\n  }\n  if (abs(value) == 3) {\n    return(value)\n  }\n  if (abs(value) == 4) {\n    return(value)\n  }\n  if (abs(value) == 5) {\n    return(value)\n  }\n  if (abs(value) == 6) {\n    return(value)\n  }\n  if (abs(value) == 7) {\n    return(value)\n  }\n  if (abs(value) == 8) {\n    return(value)\n  }\n  if (abs(value) == 9) {\n    return(value)\n  }\n  if (abs(value) == 10) {\n    return(value)\n  }\n  if (abs(value) == 11) {\n    return(value)\n  }\n  if (abs(value) == 12) {\n    return(value)\n  }\n  if (abs(value) == 13) {\n    return(value)\n  }\n  if (abs(value) == 14) {\n    return(value)\n  }\n  if (abs(value) == 15) {\n    return(value)\n  }\n  if (abs(value) == 16) {\n    return(value)\n  }\n  if (abs(value) == 17) {\n    return(value)\n  }\n  if (abs(value) == 18) {\n    return(value)\n  }\n  if (abs(value) == 19) {\n    return(value)\n  }\n  if (abs(value) == 20) {\n    return(value)\n  \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Invalid value passed to closest_integer\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (value == 0) {\n        return(0)\n    } else if (value > 0) {\n        return(floor(value))\n    } else {\n        return(ceiling(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.numeric(value)) {\n        if (value == 0) {\n            return(0)\n        }\n        if (abs(value) == 1) {\n            return(value)\n        }\n        if (value > 0) {\n            return(ceiling(value))\n        }\n        return(floor(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.finite(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    stop(\"Invalid input\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(round(value))\n    }\n    if (abs(value) < 2) {\n        return(round(value))\n    }\n    if (abs(value) == 2) {\n        return(round(value))\n    }\n    if (abs(value) < 3) {\n        return(round(value))\n    }\n    if (abs(value) == 3) {\n        return(round(value))\n    }\n    if (abs(value) < 4) {\n        return(round(value))\n    }\n    if (abs(value) == 4) {\n        return(round(value))\n    }\n    if (abs(value) < 5) {\n        return(round(value))\n    }\n    if (abs(value) == 5) {\n        return(round(value))\n    }\n    if (abs(value) < 6) {\n        return(round(value))\n    }\n    if (abs(value) == 6) {\n        return(round(value))\n    }\n    if (abs(value) < 7) {\n        return(round(value))\n    }\n    if (abs(value) == 7) {\n        return(round(value))\n    }\n    if (abs(value) < 8) {\n        return(round(value))\n    }\n    if (abs(value) == 8) {\n        return(round(value))\n    }\n    if (abs(value) < 9) {\n        return(round(value))\n    }\n    if (abs(value) == 9) {\n        return(round(value))\n    }\n    if (abs(value) < 10) {\n        return(round(value))\n    }\n    if (abs\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"    if (abs\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(value)\n  }\n  if (abs(value) == 2) {\n    return(value)\n  }\n  if (abs(value) == 3) {\n    return(value)\n  }\n  if (abs(value) == 4) {\n    return(value)\n  }\n  if (abs(value) == 5) {\n    return(value)\n  }\n  if (abs(value) == 6) {\n    return(value)\n  }\n  if (abs(value) == 7) {\n    return(value)\n  }\n  if (abs(value) == 8) {\n    return(value)\n  }\n  if (abs(value) == 9) {\n    return(value)\n  }\n  if (abs(value) == 10) {\n    return(value)\n  }\n  if (abs(value) == 11) {\n    return(value)\n  }\n  if (abs(value) == 12) {\n    return(value)\n  }\n  if (abs(value) == 13) {\n    return(value)\n  }\n  if (abs(value) == 14) {\n    return(value)\n  }\n  if (abs(value) == 15) {\n    return(value)\n  }\n  if (abs(value) == 16) {\n    return(value)\n  }\n  if (abs(value) == 17) {\n    return(value)\n  }\n  if (abs(value) == 18) {\n    return(value)\n  }\n  if (abs(value) == 19) {\n    return(value)\n  }\n  if (abs(value) == 20) {\n    return(value)\n  }\n  if (abs(value) == 21) {\n    return(value)\n  \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(round(value))\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  }\n  return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (value == 0) {\n      return(0)\n    }\n    if (abs(value) < 1) {\n      return(value)\n    }\n    if (value < 0) {\n      return(ceiling(value))\n    }\n    return(floor(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.numeric(value)) {\n        if (abs(value) < 1) {\n            return(value)\n        } else {\n            return(round(value))\n        }\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.numeric(value)) {\n    if (value == 0) {\n      return(0)\n    }\n    if (abs(value) < 1) {\n      return(round(value))\n    }\n    if (value > 0) {\n      return(ceiling(value))\n    } else {\n      return(floor(value))\n    }\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.integer(value)) {\n        return(value)\n    }\n    if (is.double(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    } else {\n        return(floor(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value is not a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(floor(value + 0.5))\n    }\n    return(ceiling(value - 0.5))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        if (abs(value) < 1) {\n            return(value)\n        } else {\n            return(round(value))\n        }\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (value == 0) {\n        return(0)\n    }\n    if (value > 0) {\n        return(ceiling(value))\n    }\n    return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    value <- as.numeric(value)\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(value)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (abs(value) < 1) {\n        return(value)\n    }\n    if (abs(value) == 1) {\n        return(value)\n    }\n    if (abs(value) == 2) {\n        return(value)\n    }\n    if (abs(value) == 3) {\n        return(value)\n    }\n    if (abs(value) == 4) {\n        return(value)\n    }\n    if (abs(value) == 5) {\n        return(value)\n    }\n    if (abs(value) == 6) {\n        return(value)\n    }\n    if (abs(value) == 7) {\n        return(value)\n    }\n    if (abs(value) == 8) {\n        return(value)\n    }\n    if (abs(value) == 9) {\n        return(value)\n    }\n    if (abs(value) == 10) {\n        return(value)\n    }\n    if (abs(value) == 11) {\n        return(value)\n    }\n    if (abs(value) == 12) {\n        return(value)\n    }\n    if (abs(value) == 13) {\n        return(value)\n    }\n    if (abs(value) == 14) {\n        return(value)\n    }\n    if (abs(value) == 15) {\n        return(value)\n    }\n    if (abs(value) == 16) {\n        return(value)\n    }\n    if (abs(value) == 17) {\n        return(value)\n    }\n    if (abs(value) == 18) {\n        return(value)\n    }\n    if (abs(value) == 19) {\n        return(value)\n    }\n    if (abs(value) == 20) {\n        return(value)\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(NA)\n    }\n    \ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "Error: unexpected end of input\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    value <- as.numeric(value)\n  }\n  if (is.null(value)) {\n    return(NA)\n  }\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.nan(value)) {\n    return(NA)\n  }\n  if (is.infinite(value)) {\n    return(NA)\n  }\n  if (is.finite(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  } else if (value > 0) {\n    return(floor(value))\n  } else {\n    return(ceiling(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (abs(value) == 1) {\n    return(round(value))\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  }\n  return(floor(value))\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n\n  # If the value is not a number, return it\n  if (is.na(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n\n  # If the value is still not an integer, return it\n  if (is.na(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n\n  # If the value is still not an integer, return it\n  if (is.na(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n\n  # If the value is still not an integer, return it\n  if (is.na(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n\n  # If the value is still not an integer, return it\n  if (is.na(value)) {\n    return(value)\n  }\n\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n\n  # If the value is still not an integer, return it\n  if (is.na(value\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "Error: unexpected symbol in:\n\"  if (is.na(value\ntest_humaneval\"\nExecution halted\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        value <- as.numeric(value)\n    }\n    if (is.null(value)) {\n        return(NA)\n    }\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.nan(value)) {\n        return(NA)\n    }\n    if (is.infinite(value)) {\n        return(NA)\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  # Convert the value to a number\n  value <- as.numeric(value)\n  # If the value is not a number, return it\n  if (is.na(value)) {\n    return(value)\n  }\n  # If the value is an integer, return it\n  if (is.integer(value)) {\n    return(value)\n  }\n  # If the value is not an integer, round it away from zero\n  value <- round(value, digits = 1)\n  # If the value is still not an integer, return it\n  if (is.na(value)) {\n    return(value)\n  }\n  # If the value is equidistant from two integers, return the one that is\n  # the farthest from zero\n  if (abs(value - round(value, digits = 1)) == 0) {\n    if (value > 0) {\n      return(round(value, digits = 1))\n    } else {\n      return(round(value, digits = 1) * -1)\n    }\n  }\n  # If the value is not equidistant from two integers, return it\n  return(value)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  } else if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.integer(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293162,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        return(round(value))\n    }\n    stop(\"Value is not a string or a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n    if (is.na(value)) {\n        return(NA)\n    }\n    if (is.character(value)) {\n        return(as.integer(value))\n    }\n    if (is.numeric(value)) {\n        if (value == 0) {\n            return(0)\n        }\n        if (abs(value) == 1) {\n            return(value)\n        }\n        if (value > 0) {\n            return(floor(value))\n        }\n        return(ceiling(value))\n    }\n    return(NA)\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  value <- as.numeric(value)\n  if (value == 0) {\n    return(0)\n  }\n  if (abs(value) < 1) {\n    return(value)\n  }\n  if (value > 0) {\n    return(ceiling(value))\n  } else {\n    return(floor(value))\n  }\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293163,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    },
    {
      "program": "# Create a function that takes a value (string) representing a number\n# and returns the closest integer to it. If the number is equidistant\n# from two integers, round it away from zero.\n# Examples\n# >>> closest_integer('10')\n# 10\n# >>> closest_integer('15.3')\n# 15\n# Note:\n# Rounding away from zero means that if the given number is equidistant\n# from two integers, the one you should return is the one that is the\n# farthest from zero. For example closest_integer(\"14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\nclosest_integer <- function(value) {\n  if (is.na(value)) {\n    return(NA)\n  }\n  if (is.character(value)) {\n    return(as.numeric(value))\n  }\n  if (is.numeric(value)) {\n    return(round(value))\n  }\n  stop(\"Value is not a number\")\n}\n\ntest_humaneval <- function() {\ncandidate <- closest_integer\n    if(!identical(candidate('10'), 10)){quit('no', 1)}\n    if(!identical(candidate('14.5'), 15)){quit('no', 1)}\n    if(!identical(candidate('-15.5'), -16)){quit('no', 1)}\n    if(!identical(candidate('15.3'), 15)){quit('no', 1)}\n    if(!identical(candidate('0'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
      "timestamp": 1664293164,
      "stdout": "",
      "stderr": "",
      "exit_code": 1,
      "status": "AssertionError"
    }
  ]
}