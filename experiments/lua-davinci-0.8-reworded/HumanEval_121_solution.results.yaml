name: HumanEval_121_solution
language: lua
results:
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  local sum = 0\n  for i, v in\
    \ ipairs(lst) do\n    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt7obo8g.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpmt7obo8g.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local sum = 0\n    for i\
    \ = 1, #lst do\n        if (lst[i] % 2 ~= 0) and (i % 2 == 0) then\n         \
    \   sum = sum + lst[i]\n        end\n    end\n    return sum\nend\nreturn solution\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpqbe15ert.lua:19: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local sum = 0\n    for i,\
    \ v in ipairs(lst) do\n        if i % 2 == 0 and v % 2 == 1 then\n           \
    \ sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzm7kly2.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmptzm7kly2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  return 12\nend\nreturn solution\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmphocilsau.lua:13: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16x2bw2y.lua:16:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp16x2bw2y.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local sum = 0\n    for i\
    \ = 1, #lst do\n        if lst[i] % 2 == 1 and i % 2 == 0 then\n            sum\
    \ = sum + lst[i]\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagta_4lc.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpagta_4lc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  local sum = 0\n  for i, v in\
    \ ipairs(lst) do\n    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0oychuoa.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp0oychuoa.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  sum = 0\n  for i,v in ipairs(lst)\
    \ do\n    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqw9ea1v.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpeqw9ea1v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local sum = 0\n    for i\
    \ = 1, #lst do\n        if math.fmod(i, 2) == 0 and math.fmod(lst[i], 2) == 1\
    \ then\n            sum = sum + lst[i]\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09n3fc81.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp09n3fc81.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local sum = 0\n    for i,\
    \ v in ipairs(lst) do\n        if v % 2 == 1 and i % 2 == 0 then\n           \
    \ sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrck6b2v.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmphrck6b2v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  local sum = 0\n  for i, v in\
    \ ipairs(lst) do\n    if v % 2 == 1 and i % 2 == 0 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9rd1t4q.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmps9rd1t4q.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local sum = 0\n    for i,\
    \ v in ipairs(lst) do\n        if v % 2 == 1 and i % 2 == 0 then\n           \
    \ sum = sum + v\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgt1egqcs.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpgt1egqcs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n\tlocal sum = 0\n\tfor i, value\
    \ in ipairs(lst) do\n\t\tif math.fmod(i, 2) == 0 and math.fmod(value, 2) == 1\
    \ then\n\t\t\tsum = sum + value\n\t\tend\n\tend\n\treturn sum\nend\nreturn solution\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp_zaw6gzh.lua:19: <eof> expected near 'lu'\n"
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  return reduce(\n    function(acc,\
    \ elem, idx)\n      if idx % 2 == 0 and elem % 2 == 1 then\n        return acc\
    \ + elem\n      else\n        return acc\n      end\n    end,\n    0,\n    lst\n\
    \  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo03ynmjq.lua:10:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpo03ynmjq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpo03ynmjq.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local res = 0\n    for i\
    \ = 1, #lst do\n        if i % 2 == 0 and lst[i] % 2 == 1 then\n            res\
    \ = res + lst[i]\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpltsh2lnb.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpltsh2lnb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  local sum = 0\n  for k, v in\
    \ ipairs(lst) do\n    if k % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h05a6d4.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp_h05a6d4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local res = 0\n    for i,\
    \ v in ipairs(lst) do\n        if i % 2 == 0 and v % 2 == 1 then\n           \
    \ res = res + v\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8nxg2mw.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpz8nxg2mw.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n    local odd_elements = 0\n\
    \    for i = 1, #lst do\n        if i % 2 == 0 and lst[i] % 2 == 1 then\n    \
    \        odd_elements = odd_elements + lst[i]\n        end\n    end\n    return\
    \ odd_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwovjlk4v.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwovjlk4v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  local ret = 0\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1 then\n      ret = ret + lst[i]\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpteij9ljs.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpteij9ljs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7,\
    \ 1})\n-- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13,\
    \ 24, 321})\n-- 0\nlocal function solution(lst)\n  local sum = 0\n  for i, v in\
    \ ipairs(lst) do\n    if v % 2 == 1 and i % 2 == 0 then\n      sum = sum + v\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5nykuok.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpi5nykuok.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
