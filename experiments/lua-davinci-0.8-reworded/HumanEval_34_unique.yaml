name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local r = {}\n  for _,v in ipairs(l) do\n    if not r[v] then r[v]\
    \ = true end\n  end\n  return table.keys(r)\nend", "  local hash = {}\n  local\
    \ res = {}\n  for _, v in ipairs(l) do\n    if not hash[v] then\n      res[#res+1]\
    \ = v\n      hash[v] = true\n    end\n  end\n  return res\nend", "  local vals\
    \ = {}\n  for _, v in ipairs(l) do\n    vals[v] = true\n  end\n  local uniqued\
    \ = {}\n  for v in pairs(vals) do\n    table.insert(uniqued, v)\n  end\n  table.sort(uniqued)\n\
    \  return uniqued\nend", "    local ret = {}\n    for _, val in ipairs(l) do\n\
    \        if not ret[val] then\n            table.insert(ret, val)\n          \
    \  ret[val] = true\n        end\n    end\n    return ret\nend", "\tif not l then\
    \ return {} end\n\tlocal unique = {}\n\tfor v in each(l) do\n\t\tif not contains(unique,\
    \ v) then\n\t\t\tunique[#unique+1] = v\n\t\tend\n\tend\n\treturn unique\nend\n\
    M.unique = unique", "\tlocal res = {}\n\tfor _, v in ipairs(l) do\n\t\tif not\
    \ find(res, v) then\n\t\t\tres[#res+1] = v\n\t\tend\n\tend\n\treturn res\nend",
  "    assert(isarray(l), \"expected an array, got \" .. type(l))\n    local ret =\
    \ {}\n    local seen = {}\n    for _, v in ipairs(l) do\n        if not seen[v]\
    \ then\n            table.insert(ret, v)\n            seen[v] = true\n       \
    \ end\n    end\n    return ret\nend", "\tlocal r = {}\n\tlocal has = {}\n\tfor\
    \ _, v in ipairs(l) do\n\t\tif not has[v] then\n\t\t\tr[#r+1] = v\n\t\t\thas[v]\
    \ = true\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn r\nend", "  local r = {}\n\
    \  for _, v in ipairs(l) do\n    if not tcontains(r, v) then\n      tinsert(r,\
    \ v)\n    end\n  end\n  return r\nend", "    local n = {}\n    for _, v in ipairs(l)\
    \ do\n        n[v] = true\n    end\n    local m = {}\n    for k, _ in pairs(n)\
    \ do\n        m[#m + 1] = k\n    end\n    table.sort(m)\n    return m\nend", " \
    \   if type(l) ~= \"table\" then return l end\n    local r = {}\n    for _,x in\
    \ ipairs(l) do\n        r[x] = x\n    end\n    local o = {}\n    for _,x in pairs(r)\
    \ do\n        o[#o+1] = x\n    end\n    return o\nend", "    local out = {}\n\
    \    for _, v in ipairs(l) do\n        if not set.contains(out, v) then\n    \
    \        out[#out + 1] = v\n        end\n    end\n    table.sort(out)\n    return\
    \ out\nend", "\tlocal a = {}\n\tfor _, v in ipairs(l) do\n\t\tif not a[v] then\
    \ a[v] = true end\n\tend\n\tlocal i = 0\n\treturn function()\n\t\ti = i + 1\n\t\
    \tfor k, v in pairs(a) do\n\t\t\tif i == 1 then return k end\n\t\t\ta[k] = nil\n\
    \t\tend\n\tend\nend", "  local u = {}\n  for _, x in ipairs(l) do\n    u[x] =\
    \ true\n  end\n  return table.sortkeys(u)\nend", "  assert(type(l) == \"table\"\
    , \"expected a table, got \" .. type(l))\n  local s = {}\n  for k, v in pairs(l)\
    \ do\n    if (not _indexOf(s, v)) then s[#s + 1] = v end\n  end\n  _sort(s)\n\
    \  return s\nend", "    local r = {}\n    for _, v in ipairs(l) do\n        r[v]\
    \ = true\n    end\n    local ri = 0\n    local rt = {}\n    for k, _ in pairs(r)\
    \ do\n        ri = ri + 1\n        rt[ri] = k\n    end\n    table.sort(rt)\n \
    \   return rt\nend", "    local res = {}\n    for i = 1, #l do\n        local\
    \ elem = l[i]\n        if not contains(res, elem) then\n            res[#res +\
    \ 1] = elem\n        end\n    end\n    return res\nend", "    local r = {}\n \
    \   for _, v in ipairs(l) do\n        if r[v] == nil then\n            r[v] =\
    \ true\n            table.insert(r, v)\n        end\n    end\n    return r\nend",
  "\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\tr[v] = true\n\tend\n\treturn table.keys(r)\n\
    end", "    local res = {}\n    local used = {}\n    for _, v in ipairs(l) do\n\
    \        if not used[v] then\n            res[#res + 1] = v\n            used[v]\
    \ = true\n        end\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
