name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given a table arr of integers and you need to return\n-- sum of\
  \ magnitudes of integers multiplied by product of all signs\n-- of each number in\
  \ the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n--\
  \ Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
  -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #arr == 0 then return nil end\n  local prod = 1\n  local sum =\
    \ 0\n  for _, v in ipairs(arr) do\n    prod = prod * math.sign(v)\n    sum = sum\
    \ + math.abs(v)\n  end\n  return prod * sum\nend", "  local abs_sum = 0\n  local\
    \ prod = 1\n  for i, v in ipairs(arr) do\n    if v == 0 then\n      return 0\n\
    \    end\n    abs_sum = abs_sum + math.abs(v)\n    prod = prod * (v > 0 and 1\
    \ or -1)\n  end\n  return abs_sum * prod\nend", "  local product = 1\n  local\
    \ sum = 0\n  if #arr > 0 then\n    for _, v in ipairs(arr) do\n      local sign\
    \ = v < 0 and -1 or v > 0 and 1 or 0\n      product = product * sign\n      sum\
    \ = sum + math.abs(v)\n    end\n    return product * sum\n  end\nend", "    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ -v\n    else\n      prod = prod * 0\n      sum = sum + 0\n    end\n  end\n \
    \ return prod * sum\nend", "    local prod = 1\n    local sum = 0\n    for i,\
    \ v in ipairs(arr) do\n        if v < 0 then\n            prod = prod * -1\n \
    \       elseif v > 0 then\n            prod = prod * 1\n        else\n       \
    \     prod = prod * 0\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    if sum == 0 then\n        return nil\n    end\n    return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)\n  end\n\
    \  return prod * sum\nend", "  local sum = 0\n  local count_zero = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n    else\n      count_zero = count_zero + 1\n \
    \   end\n  end\n  if sum == 0 and count_zero > 0 then\n    return 0\n  elseif\
    \ count_zero > 0 then\n    return -sum\n  else\n    return sum\n  end\nend", " \
    \ if #arr == 0 then return nil end\n  local prod, sum = 1, 0\n  for i, v in ipairs(arr)\
    \ do\n    prod = prod * math.sign(v)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod * sum\nend", "    if #arr == 0 then return nil end\n    local s = 1\n \
    \   local p = 1\n    for _, x in ipairs(arr) do\n        s = s + math.abs(x)\n\
    \        if x ~= 0 then p = p * math.sign(x) end\n    end\n    return s * p\n\
    end", "  local res = 0\n  local signs = 1\n  if #arr == 0 then return nil end\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      res = res + v\n    elseif\
    \ v < 0 then\n      res = res - v\n      signs = signs * -1\n    end\n  end\n\
    \  return res * signs\nend", "  local p = 1\n  local s = 0\n  for _, n in ipairs(arr)\
    \ do\n    if n < 0 then\n      p = p * -1\n    elseif n > 0 then\n      s = s\
    \ + n\n    end\n  end\n  return (s > 0) and p * s or nil\nend", "  local prod,\
    \ sum = 1, 0\n  for i, n in ipairs(arr) do\n    prod = prod * (n > 0 and 1 or\
    \ (n < 0 and -1 or 0))\n    sum = sum + math.abs(n)\n  end\n  return prod * sum\n\
    end", "  local sum, sign = 0, 1\n  for _, n in ipairs(arr) do\n    local num =\
    \ tonumber(n)\n    if num > 0 then\n      sum = sum + num\n    elseif num < 0\
    \ then\n      sum = sum - num\n      sign = sign * -1\n    end\n  end\n  return\
    \ sum * sign\nend", "  local ret = 1\n  for _,i in ipairs(arr) do\n    if i >\
    \ 0 then\n      ret = ret * 1\n    elseif i < 0 then\n      ret = ret * -1\n \
    \   else\n      ret = ret * 0\n    end\n  end\n  local s = 0\n  for _,i in ipairs(arr)\
    \ do\n    s = s + math.abs(i)\n  end\n  return s * ret\nend", "  local prod =\
    \ 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v < 0 and\
    \ -1 or (v > 0 and 1 or 0))\n    sum = sum + math.abs(v)\n  end\n  return sum\
    \ * prod\nend", "    if #arr == 0 then return nil end\n    local sum, prod = 0,\
    \ 1\n    for _, v in ipairs(arr) do\n        local sign = math.sign(v)\n     \
    \   if sign == 0 then\n            return 0\n        end\n        sum = sum +\
    \ math.abs(v)\n        prod = prod * sign\n    end\n    return sum * prod\nend",
  "    if #arr == 0 then return nil end\n    local x = 0\n    for i = 1, #arr do\n\
    \        if arr[i] == 0 then\n            x = x + 1\n        elseif arr[i] < 0\
    \ then\n            x = x + arr[i]\n        else\n            x = x + arr[i]\n\
    \        end\n    end\n    return x\nend", "  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    local sign = (v == 0) and 0 or (v > 0 and 1\
    \ or -1)\n    prod = prod * sign\n    sum = sum + math.abs(v)\n  end\n  return\
    \ (prod == 0) and 0 or (prod * sum)\nend", "    local sum = 0\n    local sgn =\
    \ 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n            sgn =\
    \ sgn * (v > 0 and 1 or -1)\n            sum = sum + math.abs(v)\n        end\n\
    \    end\n    return sum * sgn\nend", "  if #arr == 0 then return nil end\n  local\
    \ sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    if v > 0 then prod = prod * 1 end\n    if v < 0 then prod = prod * -1 end\n\
    \  end\n  return sum * prod\nend", "  local signs, product = {}, 1\n  for _, v\
    \ in ipairs(arr) do\n    local sign = v > 0 and 1 or v < 0 and -1 or 0\n    product\
    \ = product * sign\n    table.insert(signs, sign)\n  end\n  if not signs[1] then\
    \ return end\n  local mags = map(math.abs, arr)\n  return foldl(mul, product,\
    \ mags)\nend", "  if not arr[1] then return nil end\n  local result = 0\n  for\
    \ _, x in ipairs(arr) do\n    if x > 0 then\n      result = result + x\n    elseif\
    \ x < 0 then\n      result = result - x\n    end\n  end\n  return result\nend",
  "  local prod = 1\n  local sum = 0\n  for _, n in ipairs(arr) do\n    if n > 0 then\n\
    \      prod = prod * 1\n      sum = sum + n\n    elseif n < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + -n\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend", "\tif #arr == 0 then return nil end\n\tlocal\
    \ mult = 1\n\tlocal sum = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] < 0 then\n\t\t\
    \tmult = mult * -1\n\t\tend\n\t\tsum = sum + math.abs(arr[i])\n\tend\n\treturn\
    \ sum * mult\nend", "    if (#arr == 0) then return nil end\n    local sum = 0\n\
    \    local prod = 1\n    for i, val in ipairs(arr) do\n        sum = sum + math.abs(val)\n\
    \        if (val == 0) then\n            prod = 0\n        else\n            prod\
    \ = prod * (val / math.abs(val))\n        end\n    end\n    return sum * prod\n\
    end", "    local prod = 1\n    local sum = 0\n    for i = 1, #arr do\n       \
    \ local x = arr[i]\n        if x > 0 then\n            prod = prod * 1\n     \
    \   elseif x < 0 then\n            prod = prod * -1\n        else\n          \
    \  prod = prod * 0\n        end\n        sum = sum + math.abs(x)\n    end\n  \
    \  return sum * prod\nend", "  local r, n = 1, 0\n  for _, v in ipairs(arr) do\n\
    \    n = n + math.abs(v)\n    if v ~= 0 then\n      r = r * v / math.abs(v)\n\
    \    end\n  end\n  return n * r\nend", "  local m = 1\n  local s = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v < 0 then m = m - 1 elseif v > 0 then m = m + 1\
    \ end\n    s = s + math.abs(v)\n  end\n  return s * m\nend", "    if #arr == 0\
    \ then return nil end\n    local res = 0\n    local ps = 1\n    for _, v in ipairs(arr)\
    \ do\n        if v ~= 0 then\n            res = res + math.abs(v)\n          \
    \  ps = ps * math.sign(v)\n        end\n    end\n    return res * ps\nend", " \
    \ local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    prod = prod\
    \ * (v > 0 and 1 or (v < 0 and -1 or 0))\n    sum = sum + math.abs(v)\n  end\n\
    \  return prod ~= 0 and sum * prod or nil\nend", "    if not arr then return nil\
    \ end\n    local sum, prod = 0, 1\n    for _,v in ipairs(arr) do\n        local\
    \ m = math.abs(v)\n        local s = 1\n        if v < 0 then s = -1 end\n   \
    \     if v == 0 then s = 0 end\n        sum = sum + m\n        prod = prod * s\n\
    \    end\n    return sum * prod\nend", "    if #arr == 0 then return nil end\n\
    \    local rv = 0\n    for _,v in ipairs(arr) do\n        if v > 0 then\n    \
    \        rv = rv + v\n        elseif v < 0 then\n            rv = rv - v\n   \
    \     end\n    end\n    return rv\nend", "    if #arr == 0 then return nil end\n\
    \    local prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ == 0 then\n            sum = sum + 0\n        elseif arr[i] > 0 then\n     \
    \       prod = prod * 1\n            sum = sum + arr[i]\n        else\n      \
    \      prod = prod * -1\n            sum = sum + math.abs(arr[i])\n        end\n\
    \    end\n    return sum * prod\nend", "  local sum = 0\n  local prod = 1\n  if\
    \ #arr > 0 then\n    for i = 1, #arr do\n      if arr[i] < 0 then\n        prod\
    \ = prod * -1\n      elseif arr[i] == 0 then\n        prod = 0\n      end\n  \
    \    sum = sum + math.abs(arr[i])\n    end\n    return sum * prod\n  end\nend",
  "  local prod = 1\n  local magnitudes = 0\n  for _, value in ipairs(arr) do\n  \
    \  if value == 0 then\n      prod = 0\n    elseif value > 0 then\n      prod =\
    \ prod * 1\n    else\n      prod = prod * -1\n    end\n    if value > 0 then\n\
    \      magnitudes = magnitudes + value\n    else\n      magnitudes = magnitudes\
    \ - value\n    end\n  end\n  if #arr > 0 then\n    return prod * magnitudes\n\
    \  else\n    return nil\n  end\nend", "  -- your code here\nend", "  local res\
    \ = 0\n  local sign = 1\n  for _,v in ipairs(arr) do\n    if v > 0 then\n    \
    \  res = res + v\n    elseif v < 0 then\n      res = res - v\n      sign = sign\
    \ * -1\n    end\n  end\n  return sign * res or nil\nend", "  if next(arr) == nil\
    \ then return nil end\n  local signs, magnitudes = 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    if v < 0 then signs = signs * -1 end\n    magnitudes = magnitudes +\
    \ math.abs(v)\n  end\n  return signs * magnitudes\nend", "  local ret = 0\n  for\
    \ i, v in ipairs(arr) do\n    if v > 0 then\n      ret = ret + v\n    elseif v\
    \ < 0 then\n      ret = ret - v\n    end\n  end\n  return ret * (arr[1] > 0 and\
    \ 1 or arr[1] < 0 and -1 or 0)\nend", "\tlocal sum, product = 0, 1\n\tfor _, v\
    \ in ipairs(arr) do\n\t\tsum = sum + math.abs(v)\n\t\tif v < 0 then\n\t\t\tproduct\
    \ = product * -1\n\t\telseif v == 0 then\n\t\t\tproduct = 0\n\t\tend\n\tend\n\t\
    return sum * product\nend", "  if #arr == 0 then return nil end\n  local sum =\
    \ 0\n  local mult = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n     \
    \ sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      mult = mult\
    \ * -1\n    end\n  end\n  return sum * mult\nend", "  local sum, prod = 0, 1\n\
    \  for _, n in ipairs(arr) do\n    if n > 0 then\n      sum = sum + n\n    elseif\
    \ n < 0 then\n      sum = sum - n\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend", "  local product = 1\n  local sum = 0\n  if #arr == 0 then\
    \ return nil end\n  for i = 1, #arr do\n    local num = arr[i]\n    if num > 0\
    \ then\n      product = product * 1\n    elseif num < 0 then\n      product =\
    \ product * -1\n    else\n      product = product * 0\n    end\n    sum = sum\
    \ + math.abs(num)\n  end\n  return sum * product\nend", "  if #arr == 0 then return\
    \ nil end\n  local prod, sum = 1, 0\n  for i, v in ipairs(arr) do\n    prod =\
    \ prod * (v == 0 and 1 or v/math.abs(v))\n    sum = sum + math.abs(v)\n  end\n\
    \  return prod * sum\nend", "  local prod = 1\n  local sum = 0\n  if #arr == 0\
    \ then return nil end\n  for i = 1, #arr do\n    local sign = math.sign(arr[i])\n\
    \    prod = prod * sign\n    sum = sum + math.abs(arr[i])\n  end\n  return sum\
    \ * prod\nend", "  if #arr == 0 then return nil end\n  local prod, sum = 1, 0\n\
    \  for _, v in ipairs(arr) do\n    prod = prod * (v < 0 and -1 or v > 0 and 1\
    \ or 0)\n    sum = sum + math.abs(v)\n  end\n  return prod * sum\nend", "  if\
    \ not arr then return nil end\n  local p, s = 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    if v < 0 then\n      p = p * -1\n    elseif v > 0 then\n      s = s\
    \ + v\n    end\n  end\n  return p * s\nend", "  if not arr[1] then return nil\
    \ end\n  local product = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n  \
    \  if v > 0 then\n      product = product * 1\n      sum = sum + v\n    elseif\
    \ v < 0 then\n      product = product * -1\n      sum = sum + math.abs(v)\n  \
    \  else\n      product = product * 0\n    end\n  end\n  return sum * product\n\
    end", "    local res = 1\n    for _, v in ipairs(arr) do\n        if v < 0 then\n\
    \            res = res * -1\n        elseif v > 0 then\n            res = res\
    \ * 1\n        else\n            res = res * 0\n        end\n    end\n    return\
    \ res\nend", "    if #arr == 0 then return nil end\n    local pos, neg, zer =\
    \ 0, 0, 0\n    for i, v in ipairs(arr) do\n        if v > 0 then pos = pos + 1\n\
    \        elseif v < 0 then neg = neg + 1\n        else zer = zer + 1 end\n   \
    \ end\n    local prod = 2 ^ neg\n    if pos > 0 then prod = prod * 2 end\n   \
    \ if zer > 0 then prod = 0 end\n    local sum = 0\n    for i, v in ipairs(arr)\
    \ do\n        sum = sum + math.abs(v)\n    end\n    return sum * prod\nend", " \
    \   if #arr == 0 then return nil end\n    local product = 1\n    local sum = 0\n\
    \    for i, v in ipairs(arr) do\n        if v > 0 then\n            product =\
    \ product * 1\n        elseif v < 0 then\n            product = product * -1\n\
    \        else\n            product = product * 0\n        end\n        sum = sum\
    \ + math.abs(v)\n    end\n    return sum * product\nend", "    local prod = 0\n\
    \    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod\
    \ + 1\n        elseif v < 0 then\n            prod = prod - 1\n        end\n \
    \   end\n    local sum = 0\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n    end\n    return prod == 0 and nil or sum * prod\nend", " \
    \   local sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * math.sign(v)\n    end\n    return sum *\
    \ prod\nend", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v < 0 then\n            prod = prod * -1\n        elseif v >\
    \ 0 then\n            prod = prod * 1\n        else\n            prod = prod *\
    \ 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return sum * prod\n\
    end", "    local sum, mult = 0, 1\n    for _, v in ipairs(arr) do\n        sum\
    \ = sum + math.abs(v)\n        mult = mult * (v == 0 and 1 or (v > 0 and 1 or\
    \ -1))\n    end\n    return sum * mult\nend", "  local prod = 1\n  local sum =\
    \ 0\n  for _, v in ipairs(arr) do\n    if v < 0 then\n      prod = prod * -1\n\
    \    elseif v == 0 then\n      prod = 0\n    end\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend", "    local sum = 0\n    local product = 1\n\
    \    if #arr == 0 then\n        return nil\n    end\n    for i = 1, #arr do\n\
    \        if arr[i] == 0 then\n            product = product * 0\n        elseif\
    \ arr[i] > 0 then\n            product = product * 1\n        else\n         \
    \   product = product * -1\n        end\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return sum * product\nend", "    local signs = {[-1] = -1, [0] =\
    \ 0, [1] = 1}\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n  \
    \      sum = sum + math.abs(v)\n        prod = prod * signs[v]\n    end\n    return\
    \ prod * sum\nend", "  local prod, sum = 1, 0\n  for i, v in ipairs(arr) do\n\
    \    prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod == 0 and nil or prod * sum\nend", "  -- your code here\n\
    end", "    if next(arr) == nil then\n        return nil\n    end\n    local ret\
    \ = 0\n    local sign = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            ret = ret + v\n        elseif v < 0 then\n            ret = ret -\
    \ v\n            sign = sign * -1\n        end\n    end\n    return ret * sign\n\
    end", "    if #arr < 1 then return nil end\n    local res = 0\n    for _, v in\
    \ ipairs(arr) do\n        if v > 0 then\n            res = res + v\n        elseif\
    \ v < 0 then\n            res = res - v\n        end\n    end\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            prod\
    \ = prod * 1\n        elseif v < 0 then\n            prod = prod * -1\n      \
    \  else\n            prod = prod * 0\n        end\n    end\n    return res * prod\n\
    end", "  local prod = 1\n  local mags = 0\n  if #arr == 0 then return nil end\n\
    \  for _,v in ipairs(arr) do\n    if v < 0 then prod = prod * -1 end\n    if v\
    \ ~= 0 then mags = mags + math.abs(v) end\n  end\n  return mags * prod\nend",
  "    local mult, sum = 1, 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n\
    \            mult = mult * 1\n        elseif arr[i] < 0 then\n            mult\
    \ = mult * -1\n        else\n            mult = mult * 0\n        end\n      \
    \  sum = sum + math.abs(arr[i])\n    end\n    return sum * mult == 0 and nil or\
    \ sum * mult\nend", "  local prod, sum = 1, 0\n  for i = 1, #arr do\n    local\
    \ sign = signum(arr[i])\n    prod = prod * sign\n    sum = sum + abs(arr[i])\n\
    \  end\n  return prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    if arr[i] < 0 then\n      prod = prod * -1\n    elseif arr[i]\
    \ > 0 then\n      prod = prod * 1\n    else\n      prod = prod * 0\n    end\n\
    \    sum = sum + math.abs(arr[i])\n  end\n  return prod * sum\nend", "  local\
    \ prod = 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v\
    \ < 0 and -1 or v > 0 and 1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod ~= 0 and prod * sum or nil\nend", "  if #arr == 0 then return nil end\n\
    \  local ret, zeroes = 1, 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\
    \ zeroes = zeroes + 1\n    else ret = ret * sign(v) end\n  end\n  return zeroes\
    \ == #arr and 0 or ret * sum(map(fabs, arr))\nend", "    local s = 1\n    local\
    \ sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n           \
    \ s = s * 1\n        elseif v < 0 then\n            s = s * -1\n        else\n\
    \            s = s * 0\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    return s * sum\nend", "  if #arr == 0 then return nil end\n  local sum =\
    \ 0\n  local prod = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      sum\
    \ = sum + arr[i]\n    elseif arr[i] < 0 then\n      sum = sum - arr[i]\n     \
    \ prod = prod * -1\n    end\n  end\n  return sum * prod\nend", "  local sum =\
    \ 0\n  local prod = 1\n  for _, e in ipairs(arr) do\n    local sign = e > 0 and\
    \ 1 or e < 0 and -1 or 0\n    prod = prod * sign\n    if prod == 0 then return\
    \ 0 end\n    sum = sum + math.abs(e)\n  end\n  return prod * sum\nend", "  if\
    \ #arr == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for _, v\
    \ in ipairs(arr) do\n    if v < 0 then\n      prod = prod * -1\n      sum = sum\
    \ + v * -1\n    elseif v > 0 then\n      sum = sum + v\n    end\n  end\n  return\
    \ sum * prod\nend", "    local prod = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        local s = v < 0 and -1 or (v > 0 and 1 or 0)\n        prod = prod\
    \ * s\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\nend",
  "    local sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n       \
    \ if v < 0 then\n            prod = prod * -1\n        elseif v == 0 then\n  \
    \          prod = 0\n        end\n        sum = sum + math.abs(v)\n    end\n \
    \   return prod * sum\nend", "  local sign = 1\n  local sum = 0\n  local product\
    \ = 1\n  for i, v in ipairs(arr) do\n    if arr[i] > 0 then\n      sum = sum +\
    \ arr[i]\n    elseif arr[i] < 0 then\n      sum = sum + arr[i]\n      sign = sign\
    \ * -1\n    else\n      product = 0\n    end\n  end\n  product = product * sign\n\
    \  return sum * product\nend", "  if #arr == 0 then return nil end\n  local res\
    \ = 1\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      res\
    \ = res * 1\n    elseif n < 0 then\n      res = res * -1\n    else\n      res\
    \ = res * 0\n    end\n  end\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ n = arr[i]\n    if n > 0 then\n      sum = sum + n\n    elseif n < 0 then\n\
    \      sum = sum - n\n    end\n  end\n  return sum * res\nend", "\tlocal prod\
    \ = 1\n\tlocal sum = 0\n\tfor _, n in ipairs(arr) do\n\t\tlocal sign = n >= 0\
    \ and 1 or -1\n\t\tprod = prod * sign\n\t\tsum = sum + math.abs(n)\n\tend\n\t\
    return prod * sum\nend", "\tlocal a = 1\n\tlocal b = 0\n\tfor i = 1, #arr do\n\
    \t\tif arr[i] == 0 then\n\t\t\ta = 0\n\t\telseif arr[i] < 0 then\n\t\t\ta = a\
    \ + 1\n\t\telse\n\t\t\tb = b + arr[i]\n\t\tend\n\tend\n\treturn (a % 2) == 0 and\
    \ b or -b\nend", "  if #arr == 0 then return nil end\n  local s = 1\n  local t\
    \ = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      t = t + arr[i]\n  \
    \  elseif arr[i] < 0 then\n      t = t - arr[i]\n      s = s * -1\n    end\n \
    \ end\n  return t * s\nend", "  local prod = 1\n  local sum = 0\n  if not arr\
    \ then return nil end\n  for _, v in ipairs(arr) do\n    if v == 0 then prod =\
    \ 0\n    elseif v > 0 then sum = sum + v\n    elseif v < 0 then sum = sum - v\
    \ end\n  end\n  return prod * sum\nend", "    if #arr == 0 then return nil end\n\
    \    local prod, sum = 1, 0\n    for i, v in ipairs(arr) do\n        prod = prod\
    \ * (v > 0 and 1 or v < 0 and -1 or 0)\n        sum = sum + math.abs(v)\n    end\n\
    \    return prod * sum\nend", "    if #arr == 0 then return nil end\n    local\
    \ res = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            res = res + v\n        elseif v < 0 then\n            res\
    \ = res - v\n            prod = prod * -1\n        end\n    end\n    return res\
    \ * prod\nend", "  if #arr == 0 then return nil end\n  local product = 1\n  local\
    \ sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      product = product\
    \ * 1\n      sum = sum + v\n    elseif v < 0 then\n      product = product * -1\n\
    \      sum = sum + -v\n    else\n      product = product * 0\n    end\n  end\n\
    \  return sum * product\nend", "  local sum = 0\n  local product = 1\n  for i,\
    \ v in ipairs(arr) do\n    if v == 0 then\n      return 0\n    elseif v > 0 then\n\
    \      sum = sum + v\n    else\n      sum = sum - v\n      product = product *\
    \ -1\n    end\n  end\n  return sum * product\nend", "  if #arr == 0 then return\
    \ nil end\n  local abs_sum = 0\n  local sign_prod = 1\n  for _, a in ipairs(arr)\
    \ do\n    if a > 0 then\n      abs_sum = abs_sum + a\n    elseif a < 0 then\n\
    \      abs_sum = abs_sum - a\n      sign_prod = sign_prod * -1\n    end\n  end\n\
    \  return abs_sum * sign_prod\nend", "    local prod, sum = 1, 0\n    for i, e\
    \ in ipairs(arr) do\n        prod = prod * sgn(e)\n        sum = sum + abs(e)\n\
    \    end\n    return (prod ~= 0) and prod * sum or 0\nend", "  local sign = 1\n\
    \  local abs  = 0\n  local prod = 1\n  for _,n in ipairs(arr) do\n    sign = sign\
    \ * (n >= 0 and 1 or -1)\n    abs  = abs  + math.abs(n)\n    prod = prod * n\n\
    \  end\n  return prod * abs * sign\nend", "  local t = {}\n  local ret = 1\n \
    \ for _, v in ipairs(arr) do\n    if v == 0 then\n      table.insert(t, 0)\n \
    \   elseif v > 0 then\n      table.insert(t, 1)\n    else\n      table.insert(t,\
    \ -1)\n    end\n  end\n  for _, v in ipairs(t) do\n    ret = ret * v\n  end\n\
    \  return ret\nend", "  -- your code here\nend", "  local signs = {0, -1, 1}\n\
    \  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ > 0 and 1 or arr[i] < 0 and -1 or 0\n    prod = prod * signs[sign + 2]\n   \
    \ sum = sum + math.abs(arr[i])\n  end\n  return sum * prod\nend", "\tif #arr ==\
    \ 0 then return nil end\n\tlocal prod = 1\n\tlocal sum = 0\n\tfor _, v in ipairs(arr)\
    \ do\n\t\tif v == 0 then prod = 0 end\n\t\tif v > 0 then prod = prod * 1\n\t\t\
    elseif v < 0 then prod = prod * -1 end\n\t\tsum = sum + math.abs(v)\n\tend\n\t\
    return sum * prod\nend", "  local sum, mul = 0, 1\n  for _, v in ipairs(arr) do\n\
    \    if v < 0 then\n      mul = mul * -1\n    elseif v == 0 then\n      return\
    \ 0\n    end\n    sum = sum + math.abs(v)\n  end\n  return sum * mul\nend", " \
    \   local sum, product = 0, 1\n    for _,v in ipairs(arr) do\n        local sign\
    \ = v == 0 and 0 or v > 0 and 1 or -1\n        product = product * sign\n    \
    \    sum = sum + math.abs(v)\n    end\n    return product == 0 and nil or sum\
    \ * product\nend", "    local sum, product = 0, 1\n    for _, num in ipairs(arr)\
    \ do\n        sum = sum + math.abs(num)\n        if num > 0 then\n           \
    \ product = product * 1\n        elseif num < 0 then\n            product = product\
    \ * -1\n        else\n            product = product * 0\n        end\n    end\n\
    \    return sum * product == 0 and nil or sum * product\nend", "  local magnitude\
    \ = 0\n  local sign = 1\n  for _, num in ipairs(arr) do\n    if num < 0 then\n\
    \      sign = sign * -1\n    end\n    magnitude = magnitude + math.abs(num)\n\
    \  end\n  return (sign * magnitude) or nil\nend", "    local p, s = 1, 0\n   \
    \ for _, v in ipairs(arr) do\n        local a = math.abs(v)\n        if a > 0\
    \ then\n            p = p * (v / a)\n            s = s + a\n        end\n    end\n\
    \    return s * p\nend", "  local sum, prod = 0, 1\n  for i = 1, #arr do\n   \
    \ if arr[i] > 0 then\n      sum = sum + arr[i]\n    elseif arr[i] < 0 then\n \
    \     sum = sum - arr[i]\n      prod = prod * -1\n    else\n      prod = 0\n \
    \   end\n  end\n  return prod * sum\nend", "\tlocal result, p = 0, 1\n\tfor _,\
    \ v in ipairs(arr) do\n\t\tif v == 0 then\n\t\t\tp = 0\n\t\t\tbreak\n\t\telseif\
    \ v < 0 then\n\t\t\tp = -p\n\t\tend\n\t\tresult = result + math.abs(v)\n\tend\n\
    \treturn result * p\nend", "  local sum = 0\n  local product = 1\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n\
    \      sum = sum - v\n      product = product * -1\n    end\n  end\n  return sum\
    \ * product\nend", "    if #arr == 0 then return nil end\n    local sum = 0\n\
    \    local product = 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        if v > 0 then\n            product = product * 1\n        elseif v <\
    \ 0 then\n            product = product * -1\n        else\n            product\
    \ = product * 0\n        end\n    end\n    return sum * product\nend", "  local\
    \ prod, sum = 1, 0\n  for _, v in ipairs(arr) do\n    prod = prod * (v == 0 and\
    \ 0 or v / math.abs(v))\n    sum = sum + math.abs(v)\n  end\n  return prod ==\
    \ 0 and nil or prod * sum\nend", "  local acc = 1\n  local sum = 0\n  for _, v\
    \ in ipairs(arr) do\n    acc = acc * (v > 0 and 1 or v < 0 and -1 or 0)\n    sum\
    \ = sum + math.abs(v)\n  end\n  return sum * acc\nend", "  if arr == nil or #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local sign = 1\n  for _, i in ipairs(arr)\
    \ do\n    if i < 0 then\n      sign = sign * -1\n    elseif i > 0 then\n     \
    \ sign = sign * 1\n    else\n      sign = 0\n    end\n    sum = sum + math.abs(i)\n\
    \  end\n  return sum * sign\nend", "  local result = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      result = result + v\n    elseif v < 0 then\n  \
    \    result = result - v\n    end\n  end\n  return result == 0 and nil or result\n\
    end", "    local result = 0\n    for _, v in ipairs(arr) do\n        result =\
    \ result + v * v * (v > 0 and 1 or (v < 0 and -1 or 0))\n    end\n    return result\n\
    end", "  local sum, prod = 0, 1\n  for _, value in ipairs(arr) do\n    local sign\
    \ = value > 0 and 1 or (value < 0 and -1 or 0)\n    sum = sum + math.abs(value)\n\
    \    prod = prod * sign\n  end\n  return prod * sum\nend", "    local prod, res\
    \ = 1, 0\n    for i, v in ipairs(arr) do\n        prod = prod * (v == 0 and 1\
    \ or v / math.abs(v))\n        res = res + math.abs(v)\n    end\n    return (res\
    \ == 0 and nil or res * prod)\nend", "    local prod, sum = 1, 0\n    for i, v\
    \ in ipairs(arr) do\n        local sign = v == 0 and 0 or v / math.abs(v)\n  \
    \      prod = prod * sign\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod == 0 and nil or prod * sum\nend", "  local prod, sum = 1, 0\n  for _, val\
    \ in ipairs(arr) do\n    prod = prod * (val == 0 and 0 or (val > 0 and 1 or -1))\n\
    \    sum = sum + math.abs(val)\n  end\n  return prod ~= 0 and sum * prod or nil\n\
    end", "  local sum = 0\n  local product = 1\n  if #arr == 0 then return nil end\n\
    \  for _, i in ipairs(arr) do\n    if i > 0 then\n      sum = sum + i\n    elseif\
    \ i < 0 then\n      sum = sum - i\n      product = product * -1\n    end\n  end\n\
    \  return sum * product\nend", "  local s = 1\n  local m = 0\n  for i = 1, #arr\
    \ do\n    if arr[i] > 0 then\n      s = s * 1\n      m = m + arr[i]\n    elseif\
    \ arr[i] < 0 then\n      s = s * -1\n      m = m + arr[i] * -1\n    else\n   \
    \   s = s * 0\n    end\n  end\n  return m * s\nend", "    if #arr == 0 then return\
    \ nil end\n    local prod = 1\n    local sum = 0\n    for i = 1, #arr do\n   \
    \     if arr[i] > 0 then\n            prod = prod * 1\n            sum = sum +\
    \ arr[i]\n        elseif arr[i] < 0 then\n            prod = prod * -1\n     \
    \       sum = sum + -arr[i]\n        else\n            prod = prod * 0\n     \
    \   end\n    end\n    return prod * sum\nend", "  local s, p = 0, 1\n  for _,\
    \ n in ipairs(arr) do\n    s = s + math.abs(n)\n    p = p * (n < 0 and -1 or n\
    \ > 0 and 1 or 0)\n  end\n  return p == 0 and nil or s * p\nend", "  local sign,\
    \ mag = 1, 0\n  for _, v in ipairs(arr) do\n    local n = math.abs(v)\n    if\
    \ n > 0 then\n      mag = mag + n\n      sign = sign * (v / n)\n    end\n  end\n\
    \  return mag * sign\nend", "    local mult = 1\n    local sum = 0\n    for _,\
    \ v in ipairs(arr) do\n        if v > 0 then\n            mult = mult * 1\n  \
    \      elseif v < 0 then\n            mult = mult * -1\n        else\n       \
    \     mult = mult * 0\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    return mult * sum\nend", "  if #arr == 0 then return nil end\n  local sum,\
    \ prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      sum = sum\
    \ + v\n    elseif v < 0 then\n      sum = sum - v\n      prod = prod * -1\n  \
    \  end\n  end\n  return sum * prod\nend", "  if next(arr) == nil then return nil\
    \ end\n  local signs, magnitudes = {}, {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] >= 0 and 1 or -1\n    table.insert(signs, sign)\n    table.insert(magnitudes,\
    \ math.abs(arr[i]))\n  end\n  local sum = 0\n  for i = 1, #magnitudes do\n   \
    \ sum = sum + magnitudes[i]\n  end\n  local prod = 1\n  for i = 1, #signs do\n\
    \    prod = prod * signs[i]\n  end\n  return sum * prod\nend", "  local s, p =\
    \ 0, 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      s = s + v\n   \
    \ elseif v < 0 then\n      s = s - v\n      p = p * -1\n    end\n  end\n  return\
    \ s * p == 0 and nil or s * p\nend", "  if #arr == 0 then return nil end\n  local\
    \ sum = 0\n  local p = 1\n  for _,v in ipairs(arr) do\n    local s = v/math.abs(v)\n\
    \    p = p * s\n    sum = sum + math.abs(v)\n  end\n  return sum * p\nend", " \
    \   local sum = 0\n    local prod = 1\n    if #arr == 0 then\n        return nil\n\
    \    end\n    for _, v in ipairs(arr) do\n        local sign = (v > 0 and 1) or\
    \ (v < 0 and -1) or 0\n        sum = sum + math.abs(v)\n        prod = prod *\
    \ sign\n    end\n    return sum * prod\nend", "    local sum = 0\n    local prod\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v < 0 then\n            prod\
    \ = prod * -1\n        elseif v > 0 then\n            prod = prod * 1\n      \
    \  else\n            prod = prod * 0\n        end\n        sum = sum + math.abs(v)\n\
    \    end\n    return sum * prod\nend", "    local prodsign = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        prodsign = prodsign * ((v < 0)\
    \ and -1 or (v > 0) and 1 or 0)\n        sum = sum + math.abs(v)\n    end\n  \
    \  return prodsign * sum\nend", "  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    prod = prod * (v < 0 and -1 or v > 0 and\
    \ 1 or 0)\n  end\n  return prod ~= 0 and sum * prod or nil\nend", "    local positive,\
    \ negative, zero = 0, 0, 0\n    for _,v in ipairs(arr) do\n        if v > 0 then\n\
    \            positive = positive + 1\n        elseif v < 0 then\n            negative\
    \ = negative + 1\n        else\n            zero = zero + 1\n        end\n   \
    \ end\n    if zero == #arr then\n        return 0\n    end\n    local val = 1\n\
    \    for i = 1, #arr do\n        val = val * (positive > 0 and 1 or -1)\n    \
    \    if positive > 0 then\n            positive = positive - 1\n        else\n\
    \            negative = negative - 1\n        end\n    end\n    local sum = 0\n\
    \    for _,v in ipairs(arr) do\n        sum = sum + math.abs(v)\n    end\n   \
    \ return sum * val\nend", "    local prod, sum = 1, 0\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            prod = prod * 1\n            sum = sum\
    \ + v\n        elseif v < 0 then\n            prod = prod * -1\n            sum\
    \ = sum + -v\n        end\n    end\n    return prod * sum\nend", "    if next(arr)\
    \ == nil then\n        return nil\n    end\n    local prod = 1\n    local sum\
    \ = 0\n    for _, num in ipairs(arr) do\n        if num < 0 then\n           \
    \ prod = prod * -1\n        elseif num > 0 then\n            prod = prod * 1\n\
    \        else\n            prod = prod * 0\n        end\n        sum = sum + math.abs(num)\n\
    \    end\n    return sum * prod\nend", "  if #arr == 0 then return nil end\n \
    \ local abs_sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    local\
    \ sign = (v == 0) and 0 or v / math.abs(v)\n    prod = prod * sign\n    abs_sum\
    \ = abs_sum + math.abs(v)\n  end\n  return abs_sum * prod\nend", "  local sum,\
    \ prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod =\
    \ 0\n    elseif v > 0 then\n      sum = sum + v\n    else\n      sum = sum - v\n\
    \      prod = prod * -1\n    end\n  end\n  return prod * sum\nend", "  if next(arr)\
    \ == nil then return nil end\n  local prod = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    prod = prod * sign(v)\n    sum = sum + math.abs(v)\n  end\n\
    \  return prod * sum\nend", "    if #arr == 0 then return nil end\n    local signs\
    \ = 1\n    local magnitudes = 0\n    for _, v in ipairs(arr) do\n        if v\
    \ == 0 then\n            signs = 0\n            break\n        elseif v > 0 then\n\
    \            signs = signs * 1\n        else\n            signs = signs * -1\n\
    \        end\n        magnitudes = magnitudes + math.abs(v)\n    end\n    return\
    \ signs * magnitudes\nend\nreturn prod_signs", "    if #arr == 0 then return nil\
    \ end\n    local res = 0\n    local signs = 1\n    for i = 1, #arr do\n      \
    \  if arr[i] < 0 then\n            signs = signs * -1\n        elseif arr[i] >\
    \ 0 then\n            signs = signs * 1\n        else\n            signs = signs\
    \ * 0\n        end\n        res = res + math.abs(arr[i])\n    end\n    return\
    \ res * signs\nend", "    if #arr == 0 then return nil end\n    local prod = 1\n\
    \    local sum = 0\n    for _, v in ipairs(arr) do\n        prod = prod * v /\
    \ math.abs(v)\n        sum = sum + math.abs(v)\n    end\n    return prod * sum\n\
    end", "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    local\
    \ n = math.abs(v)\n    sum = sum + n\n    if v > 0 then\n      prod = prod * 1\n\
    \    elseif v < 0 then\n      prod = prod * -1\n    else\n      prod = prod *\
    \ 0\n    end\n  end\n  return sum * prod\nend", "    local res = 1\n    for _,\
    \ x in ipairs(arr) do\n        res = res * (x >= 0 and 1 or x == 0 and 0 or -1)\n\
    \    end\n    local sum = 0\n    for _, x in ipairs(arr) do\n        sum = sum\
    \ + math.abs(x)\n    end\n    return sum * res\nend", "  local function prod(x,\
    \ y) return x * y end\n  local function sign(n)\n    if n == 0 then return 0 end\n\
    \    return n / math.abs(n)\n  end\n  local function mag(n) return math.abs(n)\
    \ end\n  if #arr == 0 then return nil end\n  return mag(reduce(arr, op[\"+\"],\
    \ 0)) * reduce(map(arr, sign), prod, 1)\nend", "  local prod = 1\n  local sum\
    \ = 0\n  if #arr > 0 then\n    for i = 1, #arr do\n      local v = arr[i]\n  \
    \    if v > 0 then\n        prod = prod * 1\n      elseif v < 0 then\n       \
    \ prod = prod * -1\n      else\n        prod = prod * 0\n      end\n      sum\
    \ = sum + math.abs(v)\n    end\n    return sum * prod\n  end\nend", "  local result\
    \ = 1\n  for i = 1, #arr do\n    if arr[i] == 0 then\n      return 0\n    elseif\
    \ arr[i] < 0 then\n      result = result * -1\n    end\n  end\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  end\n  return sum *\
    \ result\nend", "  local prod = 1\n  local sum = 0\n  if #arr == 0 then return\
    \ nil end\n  for i, val in ipairs(arr) do\n    if val < 0 then prod = prod * -1\
    \ end\n    if val ~= 0 then sum = sum + math.abs(val) end\n  end\n  return prod\
    \ * sum\nend", "    local sum = 0\n    local prod = 1\n    if #arr == 0 then\n\
    \        return nil\n    end\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v > 0 then\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            prod = prod * -1\n        else\n            prod = prod\
    \ * 0\n        end\n    end\n    return sum * prod\nend", "  if #arr == 0 then\
    \ return nil end\n  local res = 1\n  for i, v in ipairs(arr) do\n    res = res\
    \ * (v > 0 and 1 or v < 0 and -1 or 0)\n  end\n  local sum = 0\n  for i, v in\
    \ ipairs(arr) do\n    sum = sum + math.abs(v)\n  end\n  return sum * res\nend",
  "  if arr == nil or #arr == 0 then return nil end\n  local prod = 1\n  local sum\
    \ = 0\n  for i, item in ipairs(arr) do\n    if item > 0 then\n      prod = prod\
    \ * 1\n      sum = sum + item\n    elseif item < 0 then\n      prod = prod * -1\n\
    \      sum = sum + math.abs(item)\n    end\n  end\n  return prod * sum\nend",
  "  local sum = 0\n  local total = 1\n  for i = 1, #arr do\n    local s = sign(arr[i])\n\
    \    if s ~= 0 then\n      sum = sum + abs(arr[i])\n      total = total * s\n\
    \    end\n  end\n  return total == 0 and nil or sum * total\nend", "    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            sum = sum + -v\n            prod = prod * -1\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return sum *\
    \ prod\nend", "  if #arr == 0 then return nil end\n  local pos = 0\n  local neg\
    \ = 0\n  local zero = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      pos\
    \ = pos + 1\n    elseif arr[i] < 0 then\n      neg = neg + 1\n    else\n     \
    \ zero = zero + 1\n    end\n  end\n  if zero > 0 then return 0 end\n  local res\
    \ = 1\n  for i = 1, pos do\n    res = res * 1\n  end\n  for i = 1, neg do\n  \
    \  res = res * -1\n  end\n  return res\nend", "  if not arr then return nil end\n\
    \  local mult = 1\n  local summ = 0\n  for _, value in ipairs(arr) do\n    summ\
    \ = summ + math.abs(value)\n    if value > 0 then\n      mult = mult * 1\n   \
    \ elseif value < 0 then\n      mult = mult * -1\n    else\n      mult = mult *\
    \ 0\n    end\n  end\n  return summ * mult\nend", "    local sum = 0\n    local\
    \ prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        if v < 0 then\n            prod = prod * -1\n        elseif v > 0 then\n\
    \            prod = prod * 1\n        else\n            prod = prod * 0\n    \
    \    end\n    end\n    return sum * prod\nend", "    local result = 0\n    for\
    \ _, v in ipairs(arr) do\n        result = result + math.abs(v) * prod_signs_sign(v)\n\
    \    end\n    return result == 0 and nil or result\nend", "  local r = 0\n  local\
    \ p = 1\n  for _, n in ipairs(arr) do\n    if n == 0 then\n      p = 0\n    else\n\
    \      r = r + math.abs(n)\n      p = p * (n > 0 and 1 or -1)\n    end\n  end\n\
    \  return r * p\nend", "    local prod = 1\n    local sum = 0\n    for _, v in\
    \ ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n       \
    \ elseif v < 0 then\n            prod = prod * -1\n        else\n            prod\
    \ = prod * 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend", "  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then\n      prod = 0\n    elseif v > 0 then\n      prod =\
    \ prod * 1\n    else\n      prod = prod * -1\n    end\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend", "  -- your code here\nend", "  if #arr == 0\
    \ then return nil end\n  local prod = 1\n  local sum = 0\n  for _, a in ipairs(arr)\
    \ do\n    prod = prod * (a > 0 and 1 or a < 0 and -1 or 0)\n    sum = sum + math.abs(a)\n\
    \  end\n  return prod * sum\nend", "  if #arr == 0 then return nil end\n  local\
    \ n = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      n = n + arr[i]\n\
    \    elseif arr[i] < 0 then\n      n = n - arr[i]\n    end\n  end\n  return n\n\
    end", "  if not arr then return nil end\n  local sign = 1\n  local sum = 0\n \
    \ for _, num in ipairs(arr) do\n    if num < 0 then\n      sign = sign * -1\n\
    \    elseif num > 0 then\n      sum = sum + num\n    end\n  end\n  return sum\
    \ * sign\nend", "  if not arr then return nil end\n  local prod = 1\n  local sum\
    \ = 0\n  for _, n in ipairs(arr) do\n    prod = prod * (n < 0 and -1 or n > 0\
    \ and 1 or 0)\n    sum = sum + math.abs(n)\n  end\n  return prod * sum\nend",
  "  if #arr == 0 then return nil end\n  local prod, sum = 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    prod = prod * (v == 0 and 1 or (v > 0 and 1 or -1))\n    sum = sum +\
    \ math.abs(v)\n  end\n  return prod * sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      sum = sum + 1\n    else\n      sum = sum + math.abs(v)\n      prod = prod\
    \ * (v > 0 and 1 or -1)\n    end\n  end\n  return sum * prod\nend", "  local prod\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = signum(arr[i])\n\
    \    prod = prod * sign\n    sum = sum + abs(arr[i])\n  end\n  return prod * sum\n\
    end", "    local n = 0\n    for _, v in ipairs(arr) do\n        if v < 0 then\n\
    \            n = n - 1\n        elseif v > 0 then\n            n = n + 1\n   \
    \     end\n    end\n    if n == 0 then\n        return 0\n    end\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n    end\n\
    \    return sum * n\nend", "  if #arr == 0 then return nil end\n  local result\
    \ = 0\n  local sign = 1\n  for _, n in ipairs(arr) do\n    if n > 0 then\n   \
    \   result = result + n\n    elseif n < 0 then\n      result = result - n\n  \
    \    sign = sign * -1\n    end\n  end\n  return result * sign\nend", "    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * math.sign(v)\n    end\n    return prod\
    \ * sum\nend", "  local s = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      s = 0\n      break\n    elseif v > 0 then\n      s = s + 1\n    else\n\
    \      s = s - 1\n    end\n  end\n  local n = 1\n  for _, v in ipairs(arr) do\n\
    \    n = n + math.abs(v)\n  end\n  return s * n\nend", "    local prod, n = 1,\
    \ 0\n    for _, val in ipairs(arr) do\n        local sign = val == 0 and 0 or\
    \ (val > 0 and 1 or -1)\n        prod = prod * sign\n        n = n + math.abs(val)\n\
    \    end\n    return prod ~= 0 and prod * n or nil\nend", "    local prod = 1\n\
    \    local sum = 0\n    if not arr then return nil end\n    for _,v in ipairs(arr)\
    \ do\n        if v > 0 then\n            prod = prod * 1\n            sum = sum\
    \ + v\n        elseif v < 0 then\n            prod = prod * -1\n            sum\
    \ = sum + math.abs(v)\n        elseif v == 0 then\n            prod = prod * 0\n\
    \        end\n    end\n    return sum * prod\nend", "    local sum, product =\
    \ 0, 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            sum\
    \ = sum + v\n        elseif v < 0 then\n            sum = sum - v\n          \
    \  product = product * -1\n        end\n    end\n    return sum * product == 0\
    \ and nil or sum * product\nend", "  local res = 1\n  for _, v in ipairs(arr)\
    \ do\n    res = res * v / math.abs(v)\n  end\n  if res == 1/0 then return nil\
    \ end\n  return res * sum(abs(arr))\nend", "  if #arr == 0 then return nil end\n\
    \  local res = 1\n  for _, v in ipairs(arr) do\n    res = res * sign(v)\n  end\n\
    \  return res * math.abs(get_sum(arr))\nend", "    if #arr == 0 then return nil\
    \ end\n    local sum = 0\n    local c = 1\n    for _, x in ipairs(arr) do\n  \
    \      local sign = 1\n        if x < 0 then sign = -1 end\n        c = c * sign\n\
    \        sum = sum + math.abs(x)\n    end\n    return sum * c\nend", "    if #arr\
    \ == 0 then return nil end\n    local s = 0\n    local p = 1\n    for _, v in\
    \ ipairs(arr) do\n        s = s + math.abs(v)\n        if v > 0 then\n       \
    \     p = p * 1\n        elseif v < 0 then\n            p = p * -1\n        else\n\
    \            p = 0\n        end\n    end\n    return s * p\nend", "  local sign\
    \ = 0\n  local mag = 0\n  for _, v in ipairs(arr) do\n    local sign2 = 0\n  \
    \  if v < 0 then\n      sign2 = -1\n    elseif v > 0 then\n      sign2 = 1\n \
    \   end\n    sign = sign + sign2\n    mag = mag + math.abs(v)\n  end\n  if sign\
    \ == 0 then\n    return 0\n  else\n    return sign * mag\n  end\nend", "  if next(arr)\
    \ == nil then return nil end\n  local signs = {1, -1, 0}\n  local sum = 0\n  for\
    \ i = 1, #arr do\n    local sign = arr[i]\n    local mag = math.abs(arr[i])\n\
    \    sum = sum + mag * signs[sign + 2]\n  end\n  return sum\nend", "  local sum\
    \ = 0\n  local prod = 1\n  for _,n in ipairs(arr) do\n    if n == 0 then\n   \
    \   prod = 0\n    elseif n > 0 then\n      sum = sum + n\n    else\n      sum\
    \ = sum - n\n      prod = prod * -1\n    end\n  end\n  return prod * sum\nend",
  "  if #arr == 0 then return nil end\n  local sign = function(x)\n    if x > 0 then\
    \ return 1 end\n    if x < 0 then return -1 end\n    return 0\n  end\n  local\
    \ res = 1\n  for i = 1, #arr do\n    res = res * sign(arr[i])\n  end\n  if res\
    \ < 0 then res = -res end\n  return res * arr:sum(abs)\nend", "  local magn =\
    \ 0\n  local prod = 1\n  if #arr == 0 then return nil end\n  for i,v in ipairs(arr)\
    \ do\n    magn = magn + math.abs(v)\n    if v > 0 then prod = prod * 1\n    elseif\
    \ v < 0 then prod = prod * -1\n    else prod = prod * 0 end\n  end\n  return magn\
    \ * prod\nend", "  local sign = 1\n  local mag = 0\n  if #arr == 0 then return\
    \ nil end\n  for _, v in ipairs(arr) do\n    sign = sign * (v > 0 and 1 or (v\
    \ < 0 and -1 or 0))\n    mag = mag + math.abs(v)\n  end\n  return sign * mag\n\
    end", "  local m = 1\n  local s = 0\n  for _, v in ipairs(arr) do\n    if v >\
    \ 0 then\n      m = m * 1\n    elseif v < 0 then\n      m = m * -1\n    else\n\
    \      m = m * 0\n    end\n    s = s + math.abs(v)\n  end\n  return s * m\nend",
  "    -- your code here\n    --[[\n    if table.getn(arr) == 0 then\n        return\
    \ nil\n    end\n    return -1\n    --]]\n    local a = 0\n    local b = 1\n  \
    \  for i,v in ipairs(arr) do\n        if v == 0 then\n            a = a\n    \
    \    elseif v > 0 then\n            a = a + v\n            b = b * 1\n       \
    \ else\n            a = a + -v\n            b = b * -1\n        end\n    end\n\
    \    if table.getn(arr) == 0 then\n        return nil\n    end\n    return a *\
    \ b\nend", "    local sum, product = 0, 1\n    for _, num in ipairs(arr) do\n\
    \        sum = sum + math.abs(num)\n        if num ~= 0 then\n            product\
    \ = product * num / math.abs(num)\n        end\n    end\n    return (product ~=\
    \ 1) and (sum * product) or nil\nend", "    if #arr == 0 then return nil end\n\
    \    local signs = {}\n    for _, v in ipairs(arr) do\n        local sign = math.sign(v)\n\
    \        table.insert(signs, sign)\n    end\n    local prod = 1\n    for _, v\
    \ in ipairs(signs) do\n        prod = prod * v\n    end\n    local sum = 0\n \
    \   for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n    end\n   \
    \ return sum * prod\nend", "    local len = #arr\n    if len == 0 then\n     \
    \   return nil\n    end\n    local sign = 1\n    local magn = 0\n    for i = 1,\
    \ len do\n        local num = arr[i]\n        if num == 0 then\n            return\
    \ 0\n        elseif num < 0 then\n            sign = sign * -1\n        end\n\
    \        magn = magn + math.abs(num)\n    end\n    return sign * magn\nend", " \
    \ if #arr == 0 then return nil end\n  local sign_prod = 1\n  local sum = 0\n \
    \ for _, v in ipairs(arr) do\n    sign_prod = sign_prod * (v < 0 and -1 or v >\
    \ 0 and 1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return sign_prod * sum\n\
    end", "  if #arr == 0 then return nil end\n  local function sign(n) return (n\
    \ > 0 and 1) or (n < 0 and -1) or 0 end\n  local function magnitude(n) return\
    \ math.abs(n) end\n  local signProd = 1\n  local magnitudeSum = 0\n  for _, n\
    \ in ipairs(arr) do\n    signProd = signProd * sign(n)\n    magnitudeSum = magnitudeSum\
    \ + magnitude(n)\n  end\n  return signProd * magnitudeSum\nend", "  local sum\
    \ = 0\n  local mult = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      sum\
    \ = sum + arr[i]\n    elseif arr[i] < 0 then\n      sum = sum - arr[i]\n     \
    \ mult = mult * -1\n    else\n      mult = 0\n    end\n  end\n  return sum * mult\n\
    end", "  local s = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n\
    \    if n == 0 then\n      s = 0\n    elseif n < 0 then\n      s = -s\n    end\n\
    \    sum = sum + math.abs(n)\n  end\n  return s * sum\nend", "  if #arr == 0 then\
    \ return nil end\n  local res = 0\n  local sign = 1\n  for _, v in ipairs(arr)\
    \ do\n    local av = math.abs(v)\n    if av ~= 0 then\n      res = res + av\n\
    \      sign = sign * (v / av)\n    end\n  end\n  return res * sign\nend", "  local\
    \ _sum = 0\n  local _prod = 1\n  for _, n in ipairs(arr) do\n    if n < 0 then\n\
    \      _prod = _prod * -1\n    elseif n == 0 then\n      _prod = 0\n    end\n\
    \    _sum = _sum + math.abs(n)\n  end\n  return _prod * _sum\nend", "  if #arr\
    \ == 0 then return nil end\n  local result = 0\n  local product = 1\n  for _,\
    \ n in ipairs(arr) do\n    result = result + math.abs(n)\n    if n > 0 then\n\
    \      product = product * 1\n    elseif n < 0 then\n      product = product *\
    \ -1\n    else\n      product = product * 0\n    end\n  end\n  return result *\
    \ product\nend", "  local res = 1\n  for _, v in ipairs(arr) do\n    if v < 0\
    \ then\n      res = res * -1\n    elseif v > 0 then\n      res = res * 1\n   \
    \ else\n      res = res * 0\n    end\n  end\n  local res_sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    res_sum = res_sum + math.abs(v)\n  end\n  return res * res_sum\n\
    end", "  if #arr == 0 then return nil end\n  local res = 0\n  local mult = 1\n\
    \  for _,v in ipairs(arr) do\n    if v > 0 then\n      res = res + v\n    elseif\
    \ v < 0 then\n      res = res - v\n      mult = mult * -1\n    end\n  end\n  return\
    \ res * mult\nend", "    if #arr == 0 then return nil end\n    local product =\
    \ 1\n    local sum = 0\n    for _, i in ipairs(arr) do\n        if i > 0 then\n\
    \            product = product * 1\n            sum = sum + i\n        elseif\
    \ i < 0 then\n            product = product * -1\n            sum = sum + -i\n\
    \        else\n            product = product * 0\n        end\n    end\n    return\
    \ sum * product\nend", "    local sgn = 1\n    local val = 0\n    for _, v in\
    \ ipairs(arr) do\n        if v > 0 then\n            sgn = sgn * 1\n        elseif\
    \ v < 0 then\n            sgn = sgn * -1\n        else\n            sgn = sgn\
    \ * 0\n        end\n        val = val + math.abs(v)\n    end\n    if val > 0 then\n\
    \        return val * sgn\n    else\n        return nil\n    end\nend", "  if\
    \ not arr then return nil end\n  local signs = {\n    pos = 1,\n    neg = 1,\n\
    \    zero = 1\n  }\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      signs.pos\
    \ = signs.pos * 1\n      signs.neg = signs.neg * 1\n      signs.zero = signs.zero\
    \ * 1\n    elseif v < 0 then\n      signs.pos = signs.pos * -1\n      signs.neg\
    \ = signs.neg * -1\n      signs.zero = signs.zero * 1\n    else\n      signs.pos\
    \ = signs.pos * 0\n      signs.neg = signs.neg * 0\n      signs.zero = signs.zero\
    \ * 0\n    end\n  end\n  local prod = signs.pos * signs.neg * signs.zero\n  if\
    \ prod == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(arr) do\n\
    \    sum = sum + math.abs(v)\n  end\n  return sum * prod\nend", "    local res\
    \ = nil\n    if arr and arr[1] then\n        res = 0\n        for i = 1, #arr\
    \ do\n            res = res + math.abs(arr[i]) * math.sign(arr[i])\n        end\n\
    \    end\n    return res\nend", "  local prod = 1\n  local sum = 0\n  for _,v\
    \ in ipairs(arr) do\n    prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n  \
    \  sum = sum + math.abs(v)\n  end\n  return prod * sum\nend", "\tif not arr[1]\
    \ then return nil end\n\tlocal neg, zero, pos = 0, 0, 0\n\tfor _, v in ipairs(arr)\
    \ do\n\t\tif v < 0 then neg = neg + 1\n\t\telseif v == 0 then zero = zero + 1\n\
    \t\telse pos = pos + 1 end\n\tend\n\tif neg % 2 == 0 then\n\t\tif zero > 0 then\
    \ return 0\n\t\telse return pos\n\t\tend\n\telse\n\t\treturn -(pos + neg)\n\t\
    end\nend", "    local product = 1\n    local sum = 0\n    for i = 1, #arr do\n\
    \        if arr[i] > 0 then\n            product = product * 1\n        elseif\
    \ arr[i] < 0 then\n            product = product * -1\n        else\n        \
    \    product = product * 0\n        end\n        sum = sum + math.abs(arr[i])\n\
    \    end\n    return sum * product\nend", "  if #arr == 0 then return nil end\n\
    \  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    prod = prod\
    \ * (v > 0 and 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n  end\n \
    \ return prod * sum\nend", "    if next(arr) == nil then\n        return nil\n\
    \    end\n    local product = 1\n    local sum = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v > 0 then\n            product = product * 1\n        elseif\
    \ v < 0 then\n            product = product * -1\n        else\n            product\
    \ = product * 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return\
    \ sum * product\nend", "  local res = 0\n  local sign = 1\n  if #arr > 0 then\n\
    \    for _, v in ipairs(arr) do\n      res = res + math.abs(v)\n      if v > 0\
    \ then\n        sign = sign * 1\n      elseif v < 0 then\n        sign = sign\
    \ * -1\n      else\n        sign = sign * 0\n      end\n    end\n    return res\
    \ * sign\n  end\n  return nil\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
