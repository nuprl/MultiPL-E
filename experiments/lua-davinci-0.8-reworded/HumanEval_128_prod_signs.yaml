name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given a table arr of integers and you need to return\n-- sum of\
  \ magnitudes of integers multiplied by product of all signs\n-- of each number in\
  \ the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n--\
  \ Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
  -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #arr == 0 then return nil end\n  local prod = 1\n  local sum =\
    \ 0\n  for _, v in ipairs(arr) do\n    prod = prod * math.sign(v)\n    sum = sum\
    \ + math.abs(v)\n  end\n  return prod * sum\nend", "  local abs_sum = 0\n  local\
    \ prod = 1\n  for i, v in ipairs(arr) do\n    if v == 0 then\n      return 0\n\
    \    end\n    abs_sum = abs_sum + math.abs(v)\n    prod = prod * (v > 0 and 1\
    \ or -1)\n  end\n  return abs_sum * prod\nend", "  local product = 1\n  local\
    \ sum = 0\n  if #arr > 0 then\n    for _, v in ipairs(arr) do\n      local sign\
    \ = v < 0 and -1 or v > 0 and 1 or 0\n      product = product * sign\n      sum\
    \ = sum + math.abs(v)\n    end\n    return product * sum\n  end\nend", "    if\
    \ #arr == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend", "  local prod = 1\n  local sum = 0\n  for\
    \ _, v in ipairs(arr) do\n    if v > 0 then\n      prod = prod * 1\n      sum\
    \ = sum + v\n    elseif v < 0 then\n      prod = prod * -1\n      sum = sum +\
    \ -v\n    else\n      prod = prod * 0\n      sum = sum + 0\n    end\n  end\n \
    \ return prod * sum\nend", "    local prod = 1\n    local sum = 0\n    for i,\
    \ v in ipairs(arr) do\n        if v < 0 then\n            prod = prod * -1\n \
    \       elseif v > 0 then\n            prod = prod * 1\n        else\n       \
    \     prod = prod * 0\n        end\n        sum = sum + math.abs(v)\n    end\n\
    \    if sum == 0 then\n        return nil\n    end\n    return sum * prod\nend",
  "  local sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum\
    \ + math.abs(v)\n    prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)\n  end\n\
    \  return prod * sum\nend", "  local sum = 0\n  local count_zero = 0\n  for _,\
    \ v in ipairs(arr) do\n    if v > 0 then\n      sum = sum + v\n    elseif v <\
    \ 0 then\n      sum = sum - v\n    else\n      count_zero = count_zero + 1\n \
    \   end\n  end\n  if sum == 0 and count_zero > 0 then\n    return 0\n  elseif\
    \ count_zero > 0 then\n    return -sum\n  else\n    return sum\n  end\nend", " \
    \ if #arr == 0 then return nil end\n  local prod, sum = 1, 0\n  for i, v in ipairs(arr)\
    \ do\n    prod = prod * math.sign(v)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod * sum\nend", "    if #arr == 0 then return nil end\n    local s = 1\n \
    \   local p = 1\n    for _, x in ipairs(arr) do\n        s = s + math.abs(x)\n\
    \        if x ~= 0 then p = p * math.sign(x) end\n    end\n    return s * p\n\
    end", "  local res = 0\n  local signs = 1\n  if #arr == 0 then return nil end\n\
    \  for _, v in ipairs(arr) do\n    if v > 0 then\n      res = res + v\n    elseif\
    \ v < 0 then\n      res = res - v\n      signs = signs * -1\n    end\n  end\n\
    \  return res * signs\nend", "  local p = 1\n  local s = 0\n  for _, n in ipairs(arr)\
    \ do\n    if n < 0 then\n      p = p * -1\n    elseif n > 0 then\n      s = s\
    \ + n\n    end\n  end\n  return (s > 0) and p * s or nil\nend", "  local prod,\
    \ sum = 1, 0\n  for i, n in ipairs(arr) do\n    prod = prod * (n > 0 and 1 or\
    \ (n < 0 and -1 or 0))\n    sum = sum + math.abs(n)\n  end\n  return prod * sum\n\
    end", "  local sum, sign = 0, 1\n  for _, n in ipairs(arr) do\n    local num =\
    \ tonumber(n)\n    if num > 0 then\n      sum = sum + num\n    elseif num < 0\
    \ then\n      sum = sum - num\n      sign = sign * -1\n    end\n  end\n  return\
    \ sum * sign\nend", "  local ret = 1\n  for _,i in ipairs(arr) do\n    if i >\
    \ 0 then\n      ret = ret * 1\n    elseif i < 0 then\n      ret = ret * -1\n \
    \   else\n      ret = ret * 0\n    end\n  end\n  local s = 0\n  for _,i in ipairs(arr)\
    \ do\n    s = s + math.abs(i)\n  end\n  return s * ret\nend", "  local prod =\
    \ 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v < 0 and\
    \ -1 or (v > 0 and 1 or 0))\n    sum = sum + math.abs(v)\n  end\n  return sum\
    \ * prod\nend", "    if #arr == 0 then return nil end\n    local sum, prod = 0,\
    \ 1\n    for _, v in ipairs(arr) do\n        local sign = math.sign(v)\n     \
    \   if sign == 0 then\n            return 0\n        end\n        sum = sum +\
    \ math.abs(v)\n        prod = prod * sign\n    end\n    return sum * prod\nend",
  "    if #arr == 0 then return nil end\n    local x = 0\n    for i = 1, #arr do\n\
    \        if arr[i] == 0 then\n            x = x + 1\n        elseif arr[i] < 0\
    \ then\n            x = x + arr[i]\n        else\n            x = x + arr[i]\n\
    \        end\n    end\n    return x\nend", "  local prod = 1\n  local sum = 0\n\
    \  for _, v in ipairs(arr) do\n    local sign = (v == 0) and 0 or (v > 0 and 1\
    \ or -1)\n    prod = prod * sign\n    sum = sum + math.abs(v)\n  end\n  return\
    \ (prod == 0) and 0 or (prod * sum)\nend", "    local sum = 0\n    local sgn =\
    \ 1\n    for _, v in ipairs(arr) do\n        if v ~= 0 then\n            sgn =\
    \ sgn * (v > 0 and 1 or -1)\n            sum = sum + math.abs(v)\n        end\n\
    \    end\n    return sum * sgn\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
