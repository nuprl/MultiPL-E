name: HumanEval_105_by_length
language: lua
prompt: "-- Given a table of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n-- reverse the resulting table, and then replace each digit by its\
  \ corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2, 1,\
  \ 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
  \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
  -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1, -1,\
  \ 55})\n-- {'One'}\nlocal function by_length(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
  \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
  \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
  \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
  \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
  \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "    local result = {}\n    for i = 1, #arr do\n        if arr[i]\
    \ >= 1 and arr[i] <= 9 then\n            table.insert(result, arr[i])\n      \
    \  end\n    end\n    table.sort(result)\n    table.reverse(result)\n    for i\
    \ = 1, #result do\n        if result[i] == 1 then\n            result[i] = \"\
    One\"\n        elseif result[i] == 2 then\n            result[i] = \"Two\"\n \
    \       elseif result[i] == 3 then\n            result[i] = \"Three\"\n      \
    \  elseif result[i] == 4 then\n            result[i] = \"Four\"\n        elseif\
    \ result[i] == 5 then\n            result[i] = \"Five\"\n        elseif result[i]\
    \ == 6 then\n            result[i] = \"Six\"\n        elseif result[i] == 7 then\n\
    \            result[i] = \"Seven\"\n        elseif result[i] == 8 then\n     \
    \       result[i] = \"Eight\"\n        elseif result[i] == 9 then\n          \
    \  result[i] = \"Nine\"\n        end\n    end\n    return result\nend", end, " \
    \   local r = {}\n    for i = 1, #arr do\n        if arr[i] < 1 or arr[i] > 9\
    \ then\n            goto continue\n        end\n        r[#r + 1] = arr[i]\n \
    \       ::continue::\n    end\n    table.sort(r)\n    local sorted = {}\n    for\
    \ i = #r, 1, -1 do\n        sorted[#sorted + 1] = r[i]\n    end\n    local names\
    \ = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'}\n\
    \    for i = 1, #sorted do\n        sorted[i] = names[sorted[i]]\n    end\n  \
    \  return sorted\nend", "  -- TODO: Implement this function!\n  return {}\nend",
  "  -- your code here\nend", "\tlocal ret = {}\n\tlocal tmp = {}\n\tfor _, v in ipairs(arr)\
    \ do\n\t\tif v >= 1 and v <= 9 then\n\t\t\ttable.insert(tmp, v)\n\t\tend\n\tend\n\
    \ttable.sort(tmp)\n\tfor i = #tmp, 1, -1 do\n\t\ttable.insert(ret, string_of_num[tmp[i]])\n\
    \tend\n\treturn ret\nend", "  local res = {}\n  for _, v in ipairs(arr) do\n \
    \   local str = \"\"\n    for i = 0, 9 do\n      if v == i then\n        str =\
    \ reverse[i]\n      end\n    end\n    table.insert(res, str)\n  end\n  return\
    \ res\nend", "  local r = {}\n  local function name(k)\n    if k == 1 then return\
    \ 'One'\n    elseif k == 2 then return 'Two'\n    elseif k == 3 then return 'Three'\n\
    \    elseif k == 4 then return 'Four'\n    elseif k == 5 then return 'Five'\n\
    \    elseif k == 6 then return 'Six'\n    elseif k == 7 then return 'Seven'\n\
    \    elseif k == 8 then return 'Eight'\n    elseif k == 9 then return 'Nine'\n\
    \    end\n  end\n  for i = 1, #arr do\n    if arr[i] >= 1 and arr[i] <= 9 then\n\
    \      table.insert(r, name(arr[i]))\n    end\n  end\n  table.sort(r)\n  local\
    \ result = {}\n  for i = #r, 1, -1 do\n    table.insert(result, r[i])\n  end\n\
    \  return result\nend", "    local digits = {\"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    local ans = {}\n   \
    \ for i = 1, #arr do\n        local digit = arr[i]\n        if digit >= 1 and\
    \ digit <= 9 then\n            ans[#ans + 1] = digits[digit]\n        end\n  \
    \  end\n    reverse(ans)\n    return ans\nend", end, "    table.sort(arr)\n  \
    \  table.reverse(arr)\n    local result = {}\n    for i = 1, #arr do\n       \
    \ if arr[i] >= 1 and arr[i] <= 9 then\n            table.insert(result, arr[i])\n\
    \        end\n    end\n    for i = 1, #result do\n        if result[i] == 1 then\n\
    \            result[i] = \"One\"\n        elseif result[i] == 2 then\n       \
    \     result[i] = \"Two\"\n        elseif result[i] == 3 then\n            result[i]\
    \ = \"Three\"\n        elseif result[i] == 4 then\n            result[i] = \"\
    Four\"\n        elseif result[i] == 5 then\n            result[i] = \"Five\"\n\
    \        elseif result[i] == 6 then\n            result[i] = \"Six\"\n       \
    \ elseif result[i] == 7 then\n            result[i] = \"Seven\"\n        elseif\
    \ result[i] == 8 then\n            result[i] = \"Eight\"\n        elseif result[i]\
    \ == 9 then\n            result[i] = \"Nine\"\n        end\n    end\n    return\
    \ result\nend", "    local out = {}\n    for i, v in ipairs(arr) do\n        if\
    \ v > 0 and v < 10 then\n            table.insert(out, v)\n        end\n    end\n\
    \    table.sort(out)\n    for i, v in ipairs(out) do\n        out[i] = get_english_number(v)\n\
    \    end\n    return reverse(out)\nend", "  local t = {}\n  local str = \"OneTwoThreeFourFiveSixSevenEightNine\"\
    \n  for i, v in ipairs(arr) do\n    if v > 0 and v < 10 then\n      table.insert(t,\
    \ str:sub(v*4-3, v*4))\n    end\n  end\n  table.sort(t)\n  return t\nend", " \
    \   local dict = {'', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    local res = {}\n    for i = 1, #arr do\n        if arr[i] < 1 or\
    \ arr[i] > 9 then\n            goto continue\n        end\n        res[#res +\
    \ 1] = dict[arr[i] + 1]\n        ::continue::\n    end\n    for i = 1, #res /\
    \ 2 do\n        res[i], res[#res - i + 1] = res[#res - i + 1], res[i]\n    end\n\
    \    return res\nend", "  local result = {}\n  for _, v in ipairs(arr) do\n  \
    \  if v >= 1 and v <= 9 then\n      table.insert(result, v)\n    end\n  end\n\
    \  table.sort(result)\n  for i = 1, #result do\n    result[i] = nums[result[i]]\n\
    \  end\n  return result\nend", "    local ans = {}\n    for i = 1, 9 do\n    \
    \    for _, x in ipairs(arr) do\n            if x == i then\n                table.insert(ans,\
    \ conv(i))\n            end\n        end\n    end\n    return ans\nend", "   \
    \ local names = {'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',\
    \ 'Nine'}\n    local valid_numbers = {}\n    for _, number in ipairs(arr) do\n\
    \        if number > 0 and number < 10 then\n            table.insert(valid_numbers,\
    \ number)\n        end\n    end\n    table.sort(valid_numbers)\n    local result\
    \ = {}\n    for i = #valid_numbers, 1, -1 do\n        table.insert(result, names[valid_numbers[i]])\n\
    \    end\n    return result\nend", "    local res = {}\n    local words = {\n\
    \        [1] = \"One\",\n        [2] = \"Two\",\n        [3] = \"Three\",\n  \
    \      [4] = \"Four\",\n        [5] = \"Five\",\n        [6] = \"Six\",\n    \
    \    [7] = \"Seven\",\n        [8] = \"Eight\",\n        [9] = \"Nine\"\n    }\n\
    \    for i = 1, #arr do\n        local n = arr[i]\n        if n >= 1 and n <=\
    \ 9 then\n            res[#res + 1] = n\n        end\n    end\n    table.sort(res)\n\
    \    for i = 1, #res do\n        res[i] = words[res[i]]\n    end\n    return res\n\
    end", "    local map = {\n        [1] = \"One\",\n        [2] = \"Two\",\n   \
    \     [3] = \"Three\",\n        [4] = \"Four\",\n        [5] = \"Five\",\n   \
    \     [6] = \"Six\",\n        [7] = \"Seven\",\n        [8] = \"Eight\",\n   \
    \     [9] = \"Nine\"\n    }\n    table.sort(arr)\n    local result = {}\n    for\
    \ _,v in ipairs(arr) do\n        if v >= 1 and v <= 9 then\n            table.insert(result,\
    \ 1, map[v])\n        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
