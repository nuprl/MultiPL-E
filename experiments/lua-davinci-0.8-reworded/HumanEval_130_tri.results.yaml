name: HumanEval_130_tri
language: lua
results:
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfaf9aok.lua:23:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmpcfaf9aok.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    local function h(x)\n        if x\
    \ == 1 then return 3\n        elseif x % 2 == 0 then return 1 + x / 2\n      \
    \  else return h(x - 1) + h(x - 2) + h(x + 1)\n        end\n    end\n    local\
    \ t = {}\n    for i = 1, n + 1 do t[i] = h(i) end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q3y3r_8.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: {3, 2, 8, 3}\nstack traceback:\n\t/tmp/tmp7q3y3r_8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n\tlocal t = {1, 3, 2}\n\tfor i = 4, n\
    \ + 1 do\n\t\tif i % 2 == 0 then\n\t\t\tt[i] = 1 + i / 2\n\t\telse\n\t\t\tt[i]\
    \ = t[i - 1] + t[i - 2] + t[i + 1]\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbhureg4.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 3, 2, 3}\nstack traceback:\n\t/tmp/tmpvbhureg4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    assert(n >= 0)\n    local t = {1,\
    \ 3, 2}\n    for i = 4, n + 1 do\n        t[i] = t[i - 1] + t[i - 2] + t[i + 1]\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzy9y0exw.lua:21:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpzy9y0exw.lua:21: in local 'candidate'\n\t/tmp/tmpzy9y0exw.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptri2jqhf.lua:24:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmptri2jqhf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n  if n == 0 then return {} end\n  local\
    \ r = {1, 3, 2}\n  for i = 4, n + 1 do\n    if i % 2 == 0 then\n      r[i] = 1\
    \ + i / 2\n    else\n      r[i] = r[i - 1] + r[i - 2] + r[i + 1]\n    end\n  end\n\
    \  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiknxk7dj.lua:33:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 3, 2, 3}\nstack traceback:\n\t/tmp/tmpiknxk7dj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    local t = {0, 1, 3}\n    for i = 1,\
    \ n do\n        if i%2 == 0 then\n            t[i + 1] = 1 + i / 2\n        else\n\
    \            t[i + 1] = t[i] + t[i - 1] + t[i + 2]\n        end\n    end\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd2bbrv3q.lua:23:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpd2bbrv3q.lua:23: in local 'candidate'\n\t/tmp/tmpd2bbrv3q.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    local r, i = {1, 3, 2}, 3\n    while\
    \ i <= n do\n        r[i + 1] = ((i % 2 == 0) and (1 + i / 2) or (r[i] + r[i -\
    \ 1] + r[i + 1]))\n        i = i + 1\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwm1_pbu3.lua:20:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpwm1_pbu3.lua:20: in local 'candidate'\n\t/tmp/tmpwm1_pbu3.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n  local result = {1, 3, 2}\n  for i =\
    \ 1, n - 2 do\n    result[i + 3] = result[i + 2] + result[i + 1] + result[i]\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5z7txk9.lua:28:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 3, 2, 6}\nstack traceback:\n\t/tmp/tmpq5z7txk9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    local out = {1, 3, 2}\n    for i =\
    \ 3, n do\n        out[i + 1] = (i % 2 == 0) and (1 + i / 2) or (out[i] + out[i\
    \ - 1] + out[i + 1])\n    end\n    return out\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5n_he7wy.lua:20:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp5n_he7wy.lua:20: in local 'candidate'\n\t/tmp/tmp5n_he7wy.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    local res = {1, 3, 2}\n    for i =\
    \ 4, n + 1 do\n        if i % 2 == 0 then\n            res[i] = 1 + i / 2\n  \
    \      else\n            res[i] = res[i - 1] + res[i - 2] + res[i + 1]\n     \
    \   end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwaal00qy.lua:32:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 3, 2, 3}\nstack traceback:\n\t/tmp/tmpwaal00qy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    -- Code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3),\
    \ {1, 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsr47941.lua:24:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmpgsr47941.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n    local t = {[0] = 1, [1] = 3, [2] =\
    \ 2}\n    for i = 3, n do\n        t[i] = 1 + i / 2\n        if i % 2 == 1 then\n\
    \            t[i] = t[i] + t[i - 1] + t[i - 2] + t[i + 1]\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswc7ao86.lua:22:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpswc7ao86.lua:22: in local 'candidate'\n\t/tmp/tmpswc7ao86.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fft32bj.lua:23:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmp3fft32bj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n\tlocal t = {3}\n\tlocal a, b, c = 3,\
    \ 2, 1\n\tfor i = 1, n do\n\t\ta, b, c = c, a, a + b + c\n\t\tt[i + 1] = c\n\t\
    end\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2h0bcq3.lua:30:\
    \ expected: {1, 3, 2, 8}\nactual: {3, 6, 10, 17}\nstack traceback:\n\t/tmp/tmpi2h0bcq3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfr_baz48.lua:24:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmpfr_baz48.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n  local tri = {1, 3, 2}\n  if n < 2 then\
    \ return {} end\n  if n == 2 then return {1, 3, 2} end\n  if n == 3 then return\
    \ {1, 3, 2, 8} end\n  for i = 4, n do\n    tri[i] = tri[i - 1] + tri[i - 2] +\
    \ tri[i + 1]\n  end\n  return tri\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelhxzpk5.lua:23:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpelhxzpk5.lua:23: in local 'candidate'\n\t/tmp/tmpelhxzpk5.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0cg56qe.lua:23:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmpn0cg56qe.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = tri\n    lu.assertEquals(candidate(3), {1,\
    \ 3, 2, 8})\n    lu.assertEquals(candidate(4), {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5),\
    \ {1, 3, 2, 8, 3, 15})\n    lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15,\
    \ 4})\n    lu.assertEquals(candidate(7), {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8),\
    \ {1, 3, 2, 8, 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sa2hdqw.lua:24:\
    \ expected: {1, 3, 2, 8}\nactual: nil\nstack traceback:\n\t/tmp/tmp4sa2hdqw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
    \ in \n-- the last couple centuries. However, what people don't know is Tribonacci\
    \ sequence.\n-- Tribonacci sequence is defined by the recurrence:\n-- tri(1) =\
    \ 3\n-- tri(n) = 1 + n / 2, if n is even.\n-- tri(n) =  tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1), if n is odd.\n-- For example:\n-- tri(2) = 1 + (2 / 2) = 2\n--\
    \ tri(4) = 3\n-- tri(3) = tri(2) + tri(1) + tri(4)\n-- = 2 + 3 + 3 = 8 \n-- You\
    \ are given a non-negative integer number n, you have to a return a table of the\
    \ \n-- first n + 1 numbers of the Tribonacci sequence.\n-- Examples:\n-- >>> tri(3)\n\
    -- {1, 3, 2, 8}\nlocal function tri(n)\n\tif not n then\n\t\treturn nil\n\tend\n\
    \tif n == 0 then\n\t\treturn {1}\n\tend\n\tlocal t = {1, 3, 2}\n\tlocal k = #t\n\
    \tfor i = 3, n do\n\t\tif i % 2 == 0 then\n\t\t\tt[k + 1] = 1 + i / 2\n\t\telse\n\
    \t\t\tt[k + 1] = t[k] + t[k - 1] + t[k - 2]\n\t\tend\n\t\tk = k + 1\n\tend\n\t\
    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = tri\n    lu.assertEquals(candidate(3), {1, 3, 2, 8})\n    lu.assertEquals(candidate(4),\
    \ {1, 3, 2, 8, 3})\n    lu.assertEquals(candidate(5), {1, 3, 2, 8, 3, 15})\n \
    \   lu.assertEquals(candidate(6), {1, 3, 2, 8, 3, 15, 4})\n    lu.assertEquals(candidate(7),\
    \ {1, 3, 2, 8, 3, 15, 4, 24})\n    lu.assertEquals(candidate(8), {1, 3, 2, 8,\
    \ 3, 15, 4, 24, 5})\n    lu.assertEquals(candidate(9), {1, 3, 2, 8, 3, 15, 4,\
    \ 24, 5, 35})\n    lu.assertEquals(candidate(20), {1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11})\n    lu.assertEquals(candidate(0),\
    \ {1})\n    lu.assertEquals(candidate(1), {1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbf0f15xn.lua:40:\
    \ expected: {1, 3, 2, 8}\nactual: {1, 3, 2, 6}\nstack traceback:\n\t/tmp/tmpbf0f15xn.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
