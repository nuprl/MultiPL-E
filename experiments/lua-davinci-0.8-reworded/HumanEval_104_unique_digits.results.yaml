language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local even = {}\n    local result = {}\n\
    \    -- YOUR CODE HERE\n    for i = 1, #x do\n        local number = x[i]\n  \
    \      local evenDigit = false\n        while (number > 0) do\n            local\
    \ digit = number % 10\n            if (digit % 2 == 0) then\n                evenDigit\
    \ = true\n                break\n            end\n            number = math.floor(number\
    \ / 10)\n        end\n        if (evenDigit == false) then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    return {number | number <- x, unique(number_to_table(number))}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8l3j18zo.lua:10:\
    \ attempt to perform bitwise operation on a nil value (global 'number')\nstack\
    \ traceback:\n\t/tmp/tmp8l3j18zo.lua:10: in local 'candidate'\n\t/tmp/tmp8l3j18zo.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    -- use string.match to check even\n    if not string.match(tostring(v), '%d*[02468]%d*')\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv601g4uk.lua:23:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpv601g4uk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function has_even_digit(n)\n\t\tlocal\
    \ function is_even(d)\n\t\t\treturn d % 2 == 0\n\t\tend\n\t\tlocal function has_even_digit_helper(m)\n\
    \t\t\tif m == 0 then return false end\n\t\t\treturn is_even(m % 10) or has_even_digit_helper(math.floor(m\
    \ / 10))\n\t\tend\n\t\treturn has_even_digit_helper(n)\n\tend\n\tlocal function\
    \ unique_digits_helper(xs, acc)\n\t\tif #xs == 0 then return acc end\n\t\tif not\
    \ has_even_digit(xs[1]) then\n\t\t\ttable.insert(acc, xs[1])\n\t\tend\n\t\treturn\
    \ unique_digits_helper(array.tail(xs), acc)\n\tend\n\treturn unique_digits_helper(x,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6bx2vd2.lua:25:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmpe6bx2vd2.lua:25:\
    \ in function </tmp/tmpe6bx2vd2.lua:20>\n\t(...tail calls...)\n\t/tmp/tmpe6bx2vd2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local unique = true\n        while v > 0 do\n            if (v % 10)\
    \ % 2 == 0 then\n                unique = false\n                break\n     \
    \       end\n            v = math.floor(v / 10)\n        end\n        if unique\
    \ then\n            table.insert(t, x)\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two table values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local s = {}\n   for i = 1, #x do\n      local\
    \ n = x[i]\n      local ok = true\n      while n > 0 do\n         if n % 2 ==\
    \ 0 then\n            ok = false\n            break\n         end\n         n\
    \ = math.floor(n / 10)\n      end\n      if ok then\n         s[#s + 1] = x[i]\n\
    \      end\n   end\n   table.sort(s)\n   return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for num in string.gmatch(tostring(x[i]),\
    \ \"%d\") do\n            if num % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal output = {}\n\tfor i, v in ipairs(x)\
    \ do\n\t\tlocal isUnique = true\n\t\tfor num in tostring(v):gmatch(\".\") do\n\
    \t\t\tif tonumber(num) % 2 == 0 then\n\t\t\t\tisUnique = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif isUnique then\n\t\t\ttable.insert(output, v)\n\t\t\
    end\n\tend\n\ttable.sort(output)\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local r = {}\n    for _, n in ipairs(x) do\n\
    \        local is_unique = true\n        local m = n\n        while m > 0 do\n\
    \            if m % 2 == 0 then\n                is_unique = false\n         \
    \       break\n            end\n            m = m // 10\n        end\n       \
    \ if is_unique then\n            table.insert(r, n)\n        end\n    end\n  \
    \  table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndtnink8.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpndtnink8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local cnt = 0\n        for i = 1, #tostring(v) do\n            local\
    \ d = tonumber(tostring(v):sub(i, i))\n            if d % 2 == 0 then\n      \
    \          cnt = cnt + 1\n            end\n        end\n        if cnt == 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local str = tostring(x[i])\n        local has_even = false\n        for\
    \ j = 1, #str do\n            if string.find(str, '0') or string.find(str, '2')\
    \ or string.find(str, '4') or string.find(str, '6') or string.find(str, '8') then\n\
    \                has_even = true\n                break\n            end\n   \
    \     end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\t\n\tfor i = 1, #x do\n\
    \t\t-- for each element in x\n\t\tlocal current = x[i]\n\t\tlocal has_even = false\n\
    \t\t\n\t\twhile current > 0 do\n\t\t\t-- for each digit in the element\n\t\t\t\
    local digit = current % 10\n\t\t\t\n\t\t\tif digit % 2 == 0 then\n\t\t\t\t-- if\
    \ the digit is even, break\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\t\t\n\t\t\tcurrent = math.floor(current / 10)\n\t\tend\n\t\t\n\t\tif not has_even\
    \ then\n\t\t\t-- if the element doesn't have even digits, add it to the result\n\
    \t\t\ttable.insert(result, x[i])\n\t\tend\n\tend\n\t\n\ttable.sort(result)\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal sorted_x = {}\n\tfor i,v in ipairs(x)\
    \ do\n\t\tif tostring(v):match(\"%d+\") == tostring(v):match(\"[13579]+\") then\n\
    \t\t\ttable.insert(sorted_x, v)\n\t\tend\n\tend\n\ttable.sort(sorted_x)\n\treturn\
    \ sorted_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tlocal function has_even_digit(i)\n\
    \t\twhile i > 0 do\n\t\t\tif i % 2 == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\
    \t\t\ti = i / 10\n\t\tend\n\t\treturn false\n\tend\n\tfor i = 1, #x do\n\t\tif\
    \ not has_even_digit(x[i]) then\n\t\t\tres[#res + 1] = x[i]\n\t\tend\n\tend\n\t\
    table.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef1vs62p.lua:33:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpef1vs62p.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function has_even_digit(n)\n\t\twhile\
    \ n > 0 do\n\t\t\tif (n % 10) % 2 == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\
    \t\tn = math.floor(n / 10)\n\t\tend\n\t\treturn false\n\tend\n\tlocal y = {}\n\
    \tfor _, n in ipairs(x) do\n\t\tif not has_even_digit(n) then\n\t\t\ttable.insert(y,\
    \ n)\n\t\tend\n\tend\n\ttable.sort(y)\n\treturn y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local s = tostring(x[i])\n    local unique = true\n    for j = 1, #s do\n  \
    \    if tonumber(s:sub(j, j)) % 2 == 0 then\n        unique = false\n        break\n\
    \      end\n    end\n    if unique then\n      table.insert(result, x[i])\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4s150b2.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpr4s150b2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbm6ev1.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmperbm6ev1.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if type(x) ~= \"table\" then\n    return \"\
    invalid input. table expected.\"\n  end\n  local t = {}\n  for _,n in ipairs(x)\
    \ do\n    local flag = true\n    while n ~= 0 do\n      local d = n % 10\n   \
    \   if d % 2 == 0 then\n        flag = false\n        break\n      end\n     \
    \ n = math.floor(n / 10)\n    end\n    if flag then\n      table.insert(t, _)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqxuf1pa.lua:34:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpaqxuf1pa.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    -- Check\
    \ if number has even digits\n    local num = x[i]\n    while num > 0 do\n    \
    \  if (num % 10) % 2 == 0 then\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if num == 0 then\n      table.insert(t, x[i])\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7ewj_tt.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpp7ewj_tt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local k = tostring(v)\n    if not k:match('[%d2468]') then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeztkf1y.lua:24:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpgeztkf1y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function only_odd_digits(n)\n     \
    \   while n > 0 do\n            if n % 2 == 0 then\n                return false\n\
    \            end\n            n = math.floor(n / 10)\n        end\n        return\
    \ true\n    end\n    local function sort_func(a, b)\n        return a < b\n  \
    \  end\n    local result = {}\n    for _, n in ipairs(x) do\n        if only_odd_digits(n)\
    \ then\n            table.insert(result, n)\n        end\n    end\n    table.sort(result,\
    \ sort_func)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function has_even_digit(number)\n   \
    \ local number_str = tostring(number)\n    for digit in number_str:gmatch(\"%d\"\
    ) do\n      if (tonumber(digit) % 2 == 0) then\n        return true\n      end\n\
    \    end\n    return false\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpol2vhhnn.lua:29: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tx = merge_sort(x)\n\tfor i = #x, 1, -1 do\n\
    \t\tif string.find(tostring(x[i]), \"%d*[02468]%d*\") then\n\t\t\ttable.remove(x,\
    \ i)\n\t\tend\n\tend\n\treturn x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5nw0z028.lua:10:\
    \ attempt to call a nil value (global 'merge_sort')\nstack traceback:\n\t/tmp/tmp5nw0z028.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5nw0z028.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local temp = {}\n  local\
    \ index = 1\n  local helper = true\n  local temp_str\n  local temp_digit\n  for\
    \ i,v in ipairs(x) do\n    -- change v to string\n    temp_str = tostring(v)\n\
    \    helper = true\n    for i = 1,#temp_str do\n      temp_digit = tonumber(temp_str:sub(i,i))\n\
    \      if temp_digit == nil then\n        error(\"Table should only contains integer\"\
    )\n      end\n      if temp_digit%2 == 0 then\n        helper = false\n      \
    \  break\n      end\n    end\n    if helper then\n      temp[index] = v\n    \
    \  index = index + 1\n    end\n  end\n  -- sort the table\n  for i = 1,#temp do\n\
    \    for j = i+1,#temp do\n      if temp[i] > temp[j] then\n        local temp_val\
    \ = temp[i]\n        temp[i] = temp[j]\n        temp[j] = temp_val\n      end\n\
    \    end\n  end\n  -- transform temp table to result table\n  for i,v in ipairs(temp)\
    \ do\n    result[i] = v\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        if not string.find(tostring(v), \"%d*[24680]%d*\") then\n      \
    \      table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            local\
    \ digit = v % 10\n            if digit % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpli5a3214.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpli5a3214.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local is_unique = true\n        for d in tostring(v):gmatch('%d') do\n\
    \            if is_even(tonumber(d)) then\n                is_unique = false\n\
    \                break\n            end\n        end\n        if is_unique then\n\
    \            table.insert(t, v)\n        end\n    end\n    table.sort(t)\n   \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprt4pd5vk.lua:14:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmprt4pd5vk.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmprt4pd5vk.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_ok(n)\n    while n > 0 do\n\
    \      if n % 2 == 0 then return false end\n      n = math.floor(n / 10)\n   \
    \ end\n    return true\n  end\n  local result = {}\n  for i = 1, #x do\n    if\
    \ is_ok(x[i]) then result[#result + 1] = x[i] end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpud36d7bs.lua:27:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpud36d7bs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, num in ipairs(x)\
    \ do\n    if tostring(num):match(\"[24680]\") == nil then\n      table.insert(result,\
    \ num)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- write your code here\n    local result\
    \ = {}\n    for i,v in ipairs(x) do\n        local n  = v\n        local unique\
    \ = true\n        while n > 0 do\n            if n % 2 == 0 then\n           \
    \     unique = false\n                break\n            end\n            n =\
    \ math.floor(n / 10)\n        end\n        if unique then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local s = {}\n    for _, n in ipairs(x) do\n\
    \        local unique = true\n        while n > 0 do\n            if n % 2 ==\
    \ 0 then\n                unique = false\n                break\n            end\n\
    \            n = math.floor(n / 10)\n        end\n        if unique then\n   \
    \         table.insert(s, _)\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbeggu9de.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpbeggu9de.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function even_digits(y)\n    local function\
    \ has_even_digit(y)\n      y = tostring(y)\n      for i = 1, #y do\n        if\
    \ y:sub(i, i) % 2 == 0 then\n          return true\n        end\n      end\n \
    \     return false\n    end\n    if not has_even_digit(y) then\n      return y\n\
    \    end\n  end\n  return table.sort(filter(even_digits, x))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7k_mcm_.lua:24:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmph7k_mcm_.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmph7k_mcm_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal odd_digits = {}\n\tfor k, v in pairs(x)\
    \ do\n\t\tif string.match(tostring(v), \"%d%d\") then\n\t\t\ttable.insert(odd_digits,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(odd_digits)\n\treturn odd_digits\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyydux7o.lua:23:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmpfyydux7o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local y = {}\n  for _, v in ipairs(x) do\n\
    \    local even = false\n    for j in string.gmatch(tostring(v), \"[24680]\")\
    \ do\n      even = true\n      break\n    end\n    if not even then\n      table.insert(y,\
    \ v)\n    end\n  end\n  return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfrisxra.lua:27:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpmfrisxra.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even = false\n    while v > 0 do\n      local d = v % 10\n\
    \      if d % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      v = (v - d) / 10\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5wn1wog.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0.0, 0.0, 0.0}\nstack traceback:\n\t/tmp/tmpt5wn1wog.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, v in ipairs(x)\
    \ do\n        local is_odd = true\n        while v > 0 do\n            if v %\
    \ 2 == 0 then\n                is_odd = false\n                break\n       \
    \     end\n            v = math.floor(v / 10)\n        end\n        if is_odd\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfsdikxn7.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpfsdikxn7.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal r = {}\n\tfor _,n in ipairs(x) do\n\t\
    \tlocal is_all_odd = true\n\t\twhile n > 0 do\n\t\t\tlocal d = n % 10\n\t\t\t\
    if d % 2 == 0 then\n\t\t\t\tis_all_odd = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\
    \tn = (n - d) / 10\n\t\tend\n\t\tif is_all_odd then\n\t\t\ttable.insert(r, x[_])\n\
    \t\tend\n\tend\n\ttable.sort(r)\n\treturn r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local x_str = tostring(x[i])\n        local has_even = false\n      \
    \  for j = 1, #x_str do\n            if x_str:sub(j, j) % 2 == 0 then\n      \
    \          has_even = true\n                break\n            end\n        end\n\
    \        if not has_even then\n            table.insert(result, x[i])\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal d, z, r = {}\n\tfor i, v in ipairs(x)\
    \ do\n\t\tlocal c = true\n\t\tfor j = 0, 9 do\n\t\t\tif tostring(v):find(tostring(j),\
    \ 1, true) and (j % 2 == 0) then\n\t\t\t\tc = false\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif c then\n\t\t\tz = true\n\t\t\ttable.insert(d, v)\n\t\tend\n\t\
    end\n\tif z then\n\t\ttable.sort(d)\n\t\treturn d\n\tend\n\treturn {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local y = {}\n    for _,v in ipairs(x) do\n\
    \        local is_unique = true\n        local s = tostring(v)\n        for i\
    \ = 1, #s do\n            if tonumber(s:sub(i,i)) % 2 == 0 then\n            \
    \    is_unique = false\n                break\n            end\n        end\n\
    \        if is_unique then\n            table.insert(y, v)\n        end\n    end\n\
    \    table.sort(y)\n    return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local even = false\n        while v > 0 do\n            if v % 2 == 0\
    \ then\n                even = true\n                break\n            end\n\
    \            v = math.floor(v / 10)\n        end\n        if not even then\n \
    \           table.insert(t, x[i])\n        end\n    end\n    table.sort(t)\n \
    \   return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local unique = {}\n  for i = 1, #x do\n   \
    \ if not string.find(tostring(x[i]), \"%d+[02468]\") then\n      table.insert(unique,\
    \ x[i])\n    end\n  end\n  return unique\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_v6gn4sl.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp_v6gn4sl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    local function has_even_digit(i)\n\
    \        while i > 0 do\n            local r = i % 10\n            if r % 2 ==\
    \ 0 then\n                return true\n            end\n            i = (i - r)\
    \ / 10\n        end\n        return false\n    end\n    for _, v in ipairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local res = {}\n   for i = 1, #x do\n    \
    \  if tonumber(string.gsub(tostring(x[i]), \"[2468]\", \"\")) == x[i] then\n \
    \        res[#res + 1] = x[i]\n      end\n   end\n   table.sort(res)\n   return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcq2r10gf.lua:12:\
    \ bad argument #2 to 'tonumber' (base out of range)\nstack traceback:\n\t/tmp/tmpcq2r10gf.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcq2r10gf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    --implement here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9fdki6cp.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp9fdki6cp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_odd(a)\n    local r = tostring(a)\n\
    \    for i = 1, #r do\n      if tonumber(r:sub(i, i)) % 2 == 0 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\n  local r = {}\n  for i =\
    \ 1, #x do\n    if is_odd(x[i]) then\n      r[#r + 1] = x[i]\n    end\n  end\n\
    \  table.sort(r)\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp553xhl9_.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp553xhl9_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local y = {}\n    for i = 1, #x do\n    \
    \    if not has_even_digit(x[i]) then \n            table.insert(y, x[i])\n  \
    \      end\n    end\n    table.sort(y)\n    return y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx43li0_5.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpx43li0_5.lua:12: in local 'candidate'\n\t/tmp/tmpx43li0_5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local new_list = {}\n    for i, v in ipairs(x)\
    \ do\n        local count = 0\n        for i = 0, 9 do\n            local str\
    \ = tostring(v)\n            if string.find(str, tostring(i)) then\n         \
    \       count = count + 1\n            end\n        end\n        if count == 1\
    \ then\n            table.insert(new_list, v)\n        end\n    end\n    table.sort(new_list)\n\
    \    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq52v62n.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1, 33}\nstack traceback:\n\t/tmp/tmpmq52v62n.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i,v in ipairs(x) do\n\
    \    if not is_even_digit(v) then\n      table.insert(result, v)\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_rbwlch3.lua:12:\
    \ attempt to call a nil value (global 'is_even_digit')\nstack traceback:\n\t/tmp/tmp_rbwlch3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_rbwlch3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    local i = 1\n    for\
    \ _, num in ipairs(x) do\n        local is_odd = true\n        while num > 0 do\n\
    \            if ((num % 10) % 2) == 0 then\n                is_odd = false\n \
    \               break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if is_odd then\n            res[i] = _\n            i =\
    \ i + 1\n        end\n    end\n    table.sort(res)\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvbnq22u.lua:33:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpgvbnq22u.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local results = {}\n  for i = 1, #x do\n  \
    \  local num = x[i]\n    local is_unique = true\n    while num > 0 do\n      local\
    \ digit = num % 10\n      if digit % 2 == 0 then\n        is_unique = false\n\
    \        break\n      end\n      num = math.floor(num / 10)\n    end\n    if is_unique\
    \ then\n      table.insert(results, x[i])\n    end\n  end\n  table.sort(results)\n\
    \  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        if v < 10 or v % 2 == 1 then\n            res[#res + 1] = v\n  \
    \      else\n            while v > 0 do\n                if v % 2 == 0 then\n\
    \                    break\n                end\n                v = math.floor(v\
    \ / 10)\n            end\n            if v == 0 then\n                res[#res\
    \ + 1] = x[_]\n            end\n        end\n    end\n    table.sort(res)\n  \
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h_iyudh.lua:34:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmp6h_iyudh.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- YOUR CODE HERE\n  local sorted_table = {}\n\
    \  for i,v in ipairs(x) do\n    if unique_digits_check(v) then\n      sorted_table[#sorted_table+1]\
    \ = v\n    end\n  end\n  return sorted_table\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_qwpl2t.lua:13:\
    \ attempt to call a nil value (global 'unique_digits_check')\nstack traceback:\n\
    \t/tmp/tmpf_qwpl2t.lua:13: in local 'candidate'\n\t/tmp/tmpf_qwpl2t.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i,n in ipairs(x)\
    \ do\n        if not has_even_digit(n) then\n            res[#res+1] = n\n   \
    \     end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyryv8tfm.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpyryv8tfm.lua:12: in local 'candidate'\n\t/tmp/tmpyryv8tfm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local results = {}\n    for _, value in ipairs(x)\
    \ do\n        local has_even_digits = false\n        for char in tostring(value):gmatch('%d')\
    \ do\n            if tonumber(char) % 2 == 0 then\n                has_even_digits\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even_digits then\n            table.insert(results, value)\n        end\n\
    \    end\n    table.sort(results)\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        if is_digit_unique(v) then\n            table.insert(res, v)\n \
    \       end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9r_jly3t.lua:12:\
    \ attempt to call a nil value (global 'is_digit_unique')\nstack traceback:\n\t\
    /tmp/tmp9r_jly3t.lua:12: in local 'candidate'\n\t/tmp/tmp9r_jly3t.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function iterator(x)\n    local digits\
    \ = {string.byte(x, 1, -1)}\n    for i = 1, #digits do\n      if digits[i] % 2\
    \ == 0 then\n        return\n      end\n    end\n    return tonumber(x)\n  end\n\
    \  return {iterator(num) for num in all(x)}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeitmfzki.lua:19: ''}'' expected near ''for''

    '
  stdout: ''
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  return error(\"Implement me!\")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj59c5ztq.lua:10:\
    \ Implement me!\nstack traceback:\n\t/tmp/tmpj59c5ztq.lua:10: in local 'candidate'\n\
    \t/tmp/tmpj59c5ztq.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local digits = {}\n    for i = 1, #x do\n\
    \        local number = x[i]\n        local flag = true\n        while (number\
    \ > 0) do\n            local digit = number % 10\n            if (digit % 2 ==\
    \ 0) then\n                flag = false\n                break\n            end\n\
    \            number = math.floor(number / 10)\n        end\n        if (flag)\
    \ then\n            table.insert(digits, x[i])\n        end\n    end\n    table.sort(digits)\n\
    \    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    return __unique_digits(x, {})\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpynoibw5i.lua:10:\
    \ attempt to call a nil value (global '__unique_digits')\nstack traceback:\n\t\
    /tmp/tmpynoibw5i.lua:10: in local 'candidate'\n\t/tmp/tmpynoibw5i.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    if _has_even_digit(v) then goto continue end\n    table.insert(result,\
    \ v)\n    ::continue::\n  end\n  table.sort(result)\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkidrgow4.lua:12:\
    \ attempt to call a nil value (global '_has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpkidrgow4.lua:12: in local 'candidate'\n\t/tmp/tmpkidrgow4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tfor _,v in ipairs(x) do\n\
    \t\tlocal flag = true\n\t\twhile v > 0 do\n\t\t\tif v % 2 == 0 then\n\t\t\t\t\
    flag = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\
    \t\tif flag then\n\t\t\ttable.insert(result, _)\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplupa4nix.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmplupa4nix.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local r = {}\n    for i = 1, #x do\n    \
    \    local y = x[i]\n        local z = false\n        for j = 1, 9, 2 do\n   \
    \         if string.find(tostring(y), j) then\n                z = true\n    \
    \            break\n            end\n        end\n        if not z then\n    \
    \        table.insert(r, y)\n        end\n    end\n    table.sort(r)\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnyq4yta.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpmnyq4yta.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i = 1, #x do\n    \
    \    local even_digits = false\n        for j = 1, #tostring(x[i]) do\n      \
    \      if (tonumber(tostring(x[i]):sub(j, j)) % 2 == 0) then\n               \
    \ even_digits = true\n                break\n            end\n        end\n  \
    \      if not even_digits then\n            table.insert(t, x[i])\n        end\n\
    \    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for _, v in ipairs(x) do\n\
    \    if v == 0 then\n      table.insert(t, v)\n    else\n      local has_even_digit\
    \ = false\n      while v > 0 do\n        if (v % 10) % 2 == 0 then\n         \
    \ has_even_digit = true\n          break\n        end\n        v = math.floor(v\
    \ / 10)\n      end\n      if not has_even_digit then\n        table.insert(t,\
    \ v)\n      end\n    end\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvo998mbu.lua:35:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpvo998mbu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local r = {}\n    for _,v in ipairs(x) do\n\
    \        local even = false\n        for d in tostring(v):gmatch('%d') do\n  \
    \          if tonumber(d) % 2 == 0 then\n                even = true\n       \
    \         break\n            end\n        end\n        if not even then\n    \
    \        table.insert(r, v)\n        end\n    end\n    table.sort(r)\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46nr47yn.lua:16:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp46nr47yn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d_e906o.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp5d_e906o.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i, v in ipairs(x)\
    \ do\n        local even = false\n        while v > 0 do\n            if (v %\
    \ 10) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ even then\n            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- YOUR CODE HERE\n    return {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxaw0jttx.lua:17:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpxaw0jttx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  local found = false\n  for\
    \ _, v in ipairs(x) do\n    local t = tostring(v)\n    for j = 1, #t do\n    \
    \  if tonumber(t:sub(j, j)) % 2 == 0 then\n        found = true\n        break\n\
    \      end\n    end\n    if not found then\n      table.insert(res, v)\n    end\n\
    \    found = false\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjfz4g8sc.lua:31:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpjfz4g8sc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    local unique = true\n    local vs = tostring(v)\n    for i = 1, #vs do\n\
    \      if band(vs:byte(i), 1) == 0 then\n        unique = false\n        break\n\
    \      end\n    end\n    if unique then\n      res[#res + 1] = v\n    end\n  end\n\
    \  return sort(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspskbdhx.lua:15:\
    \ attempt to call a nil value (global 'band')\nstack traceback:\n\t/tmp/tmpspskbdhx.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpspskbdhx.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function str_has_even_digit(x)\n\t\t\
    -- Auxiliary function\n\t\tlocal s = tostring(x)\n\t\tfor d in s:gmatch('%d')\
    \ do\n\t\t\tif (tonumber(d) % 2) == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\
    \tend\n\t\treturn false\n\tend\n\tlocal res = {}\n\tfor _, v in ipairs(x) do\n\
    \t\tif not str_has_even_digit(v) then\n\t\t\ttable.insert(res, v)\n\t\tend\n\t\
    end\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local result = {}\n   for i, n in ipairs(x)\
    \ do\n      local even_digit = false\n      for d in tostring(n):gmatch(\"%d\"\
    ) do\n         if tonumber(d) % 2 == 0 then\n            even_digit = true\n \
    \           break\n         end\n      end\n      if not even_digit then\n   \
    \      table.insert(result, n)\n      end\n   end\n   table.sort(result)\n   return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    local function evenDigit(n)\n\
    \        while n > 0 do\n            if n % 2 == 0 then\n                return\
    \ true\n            end\n            n = math.floor(n / 10)\n        end\n   \
    \     return false\n    end\n    for _, v in ipairs(x) do\n        if not evenDigit(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- TODO: Student code goes here\n    local\
    \ uniqueDigits = {}\n    for _, digit in ipairs(x) do\n        local isUnique\
    \ = true\n        for d in tostring(digit):gmatch(\"%d\") do\n            if (tonumber(d)\
    \ % 2 == 0) then\n                isUnique = false\n                break\n  \
    \          end\n        end\n        if (isUnique) then\n            table.insert(uniqueDigits,\
    \ digit)\n        end\n    end\n    table.sort(uniqueDigits)\n    return uniqueDigits\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    --[[\n        Implementation 1 (not most\
    \ efficient):\n        1. Find all unique digits of all numbers:\n           \
    \ a. Iterate over each number in table `x`\n            b. Iterate over each character\
    \ in number\n            c. Add each character to a set\n        2. Iterate over\
    \ numbers in table `x`\n            a. Iterate over characters in each number\n\
    \            b. Check if each character is in the set\n            c. If not all\
    \ characters are in the set, discard number\n        3. Sort and return the set\n\
    \    ]]\n    local digits = {}\n    for _,v in ipairs(x) do\n        for c in\
    \ tostring(v):gmatch(\".\") do\n            digits[c] = true\n        end\n  \
    \  end\n    local valid = {}\n    for _,v in ipairs(x) do\n        local validNum\
    \ = true\n        for c in tostring(v):gmatch(\".\") do\n            if not digits[c]\
    \ then\n                validNum = false\n                break\n            end\n\
    \        end\n        if validNum then\n            table.insert(valid, v)\n \
    \       end\n    end\n    table.sort(valid)\n    return valid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_duss5ok.lua:48:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmp_duss5ok.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local unique = {}\n    for _, v in ipairs(x)\
    \ do\n        if not v:match('[02468]') then\n            table.insert(unique,\
    \ v)\n        end\n    end\n    table.sort(unique)\n    return unique\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfvo29sm.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmppfvo29sm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppfvo29sm.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tfor i, v in ipairs(x) do\n\
    \t\tlocal str = tostring(v)\n\t\tlocal is_unique = true\n\t\tfor j = 1, str:len()\
    \ do\n\t\t\tif tonumber(str:sub(j, j)) % 2 == 0 then\n\t\t\t\tis_unique = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_unique then\n\t\t\ttable.insert(res,\
    \ v)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62ttkp66.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp62ttkp66.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, x in ipairs(x) do\n\
    \    local flag = true\n    while x > 0 do\n      if (x % 10) % 2 == 0 then\n\
    \        flag = false\n        break\n      end\n      x = math.floor(x / 10)\n\
    \    end\n    if flag then\n      table.insert(res, x)\n    end\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxjtcrpu.lua:30:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpoxjtcrpu.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, num in ipairs(x) do\n\
    \    local flg = false\n    for c in string.gmatch(tostring(num), \"%d\") do\n\
    \      if (tonumber(c) % 2 == 0) then\n        flg = true\n        break\n   \
    \   end\n    end\n    if (not flg) then\n      table.insert(res, num)\n    end\n\
    \  end\n  return table.sort(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpid8t6ujq.lua:29:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpid8t6ujq.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function find_even_digit(n)\n     \
    \   for char in tostring(n):gmatch\".\" do\n            if tonumber(char) % 2\
    \ == 0 then\n                return true\n            end\n        end\n     \
    \   return false\n    end\n    local res = {}\n    for _, num in ipairs(x) do\n\
    \        if not find_even_digit(num) then\n            table.insert(res, num)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for k, v in pairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdg5e9qa1.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpdg5e9qa1.lua:12: in local 'candidate'\n\t/tmp/tmpdg5e9qa1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _,value in ipairs(x)\
    \ do\n    if not string.find(tostring(value),'%d%d') then\n      table.insert(result,value)\n\
    \    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qufk45i.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8qufk45i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tif type(x) ~= \"table\" then return {} end\n\
    \t\n\tlocal has_even_digit = {}\n\tlocal res = {}\n\tfor i = 1, #x do\n\t\tif\
    \ type(x[i]) ~= \"number\" then break end\n\t\t\n\t\tlocal n = x[i]\n\t\tlocal\
    \ digit = {}\n\t\twhile n > 0 do\n\t\t\ttable.insert(digit, n % 10)\n\t\t\tn =\
    \ math.floor(n / 10)\n\t\tend\n\t\t\n\t\tlocal found = false\n\t\tfor i = 1, #digit\
    \ do\n\t\t\tif digit[i] % 2 == 0 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\t\n\t\tif not found then\n\t\t\tres[#res + 1] = x[i]\n\t\t\
    end\n\tend\n\t\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp750fn8qg.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp750fn8qg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal y = {}\n\tfor i,v in ipairs(x) do\n\t\
    \tif tonumber(tostring(v):match(\"[02468]\") or 0) == 0 then\n\t\t\ttable.insert(y,\
    \ v)\n\t\tend\n\tend\n\treturn y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejlbkq1r.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpejlbkq1r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local output = {}\n  for i = 1, #x do\n   \
    \ if string.find(tostring(x[i]), '[24680]') == nil then\n      table.insert(output,\
    \ x[i])\n    end\n  end\n  table.sort(output)\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for k, v in pairs(x) do\n\
    \    if even_only(v) then\n      table.insert(ret, v)\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu1dltwy.lua:12:\
    \ attempt to call a nil value (global 'even_only')\nstack traceback:\n\t/tmp/tmpzu1dltwy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzu1dltwy.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tfor i,v in ipairs(x) do\n\
    \t\tif \tv ~= 0 and \n\t\t\tv/1 == v/1 and \n\t\t\tmath.floor(v/10) == math.floor(v/10)\
    \ and \n\t\t\tmath.floor(v/100) == math.floor(v/100) and \n\t\t\tmath.floor(v/1000)\
    \ == math.floor(v/1000) and \n\t\t\tmath.floor(v/10000) == math.floor(v/10000)\
    \ and \n\t\t\tmath.floor(v/100000) == math.floor(v/100000) and \n\t\t\tmath.floor(v/1000000)\
    \ == math.floor(v/1000000) and \n\t\t\tmath.floor(v/10000000) == math.floor(v/10000000)\
    \ and \n\t\t\tmath.floor(v/100000000) == math.floor(v/100000000) and \n\t\t\t\
    math.floor(v/1000000000) == math.floor(v/1000000000) and \n\t\t\tmath.floor(v/10000000000)\
    \ == math.floor(v/10000000000) and \n\t\t\tmath.floor(v/100000000000) == math.floor(v/100000000000)\
    \ and \n\t\t\tmath.floor(v/1000000000000) == math.floor(v/1000000000000) and \n\
    \t\t\tmath.floor(v/10000000000000) == math.floor(v/10000000000000) and \n\t\t\t\
    math.floor(v/100000000000000) == math.floor(v/100000000000000) and \n\t\t\tmath.floor(v/1000000000000000)\
    \ == math.floor(v/1000000000000000) and \n\t\t\tmath.floor(v/10000000000000000)\
    \ == math.floor(v/10000000000000000) and \n\t\t\tmath.floor(v/100000000000000000)\
    \ == math.floor(v/100000000000000000) and \n\t\t\tmath.floor(v/1000000000000000000)\
    \ == math.floor(v/1000000000000000000) then\n\t\t\tresult[#\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29lksj7c.lua:33: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  return {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5uztyf0.lua:16:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpt5uztyf0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local tab = {}\n  for i,v in ipairs(x) do\n\
    \    local str = tostring(v)\n    local unique = true\n    for digit in str:gmatch(\"\
    %d\") do\n      if tonumber(digit) % 2 == 0 then\n        unique = false\n   \
    \     break\n      end\n    end\n    if unique then\n      table.insert(tab, v)\n\
    \    end\n  end\n  table.sort(tab)\n  return tab\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for k, v in pairs(x)\
    \ do\n        local n = tostring(v)\n        local is_odd = true\n        for\
    \ i = 1, #n do\n            if tonumber(n:sub(i, i)) % 2 == 0 then\n         \
    \       is_odd = false\n                break\n            end\n        end\n\
    \        if is_odd then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal a = {}\n\tfor k,v in pairs(x) do\n\t\t\
    if not v:find(\"[02468]\") then\n\t\t\ttable.insert(a,v)\n\t\tend\n\tend\n\ttable.sort(a)\n\
    \treturn a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoih7f32z.lua:12:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmpoih7f32z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpoih7f32z.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local is_even = false\n    local s = tostring(x[i])\n    for j = 1, #s do\n\
    \      if tonumber(s:sub(j, j)) % 2 == 0 then\n        is_even = true\n      \
    \  break\n      end\n    end\n    if not is_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- TODO: implement this function.\n  local\
    \ result={}\n  for _,item in ipairs(x) do\n    local flag=true\n    for d in (tostring(item)):gmatch('%d')\
    \ do\n      if d%2==0 then\n        flag=false\n        break\n      end\n   \
    \ end\n    if flag then table.insert(result,item) end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local\
    \ n = x[i]\n    if not has_even_digit(n) then\n      table.insert(res, n)\n  \
    \  end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8yaz1pk7.lua:13:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp8yaz1pk7.lua:13: in local 'candidate'\n\t/tmp/tmp8yaz1pk7.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for k, v in pairs(x)\
    \ do\n        local t = tostring(v)\n        local flag = true\n        for i\
    \ = 1, #t do\n            if tonumber(t:sub(i, i)) % 2 == 0 then\n           \
    \     flag = false\n                break\n            end\n        end\n    \
    \    if flag then\n            table.insert(res, v)\n        end\n    end\n  \
    \  table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal sorted = {}\n\tfor _, i in ipairs(x)\
    \ do\n\t\tlocal has_even = false\n\t\tfor d in string.gmatch(tostring(i), '%d')\
    \ do\n\t\t\tif tonumber(d) % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(sorted, i)\n\t\
    \tend\n\tend\n\ttable.sort(sorted)\n\treturn sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function is_unique(i)\n        while\
    \ i > 0 do\n            if i % 2 == 0 then\n                return false\n   \
    \         end\n            i = math.floor(i / 10)\n        end\n        return\
    \ true\n    end\n    local res = {}\n    for _, i in ipairs(x) do\n        if\
    \ is_unique(i) then\n            table.insert(res, i)\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tfor _, v in ipairs(x)\
    \ do\n\t\tlocal is_even = false\n\t\tfor _, c in utf8.codes(tostring(v)) do\n\t\
    \t\tif (c % 2 == 0) then\n\t\t\t\tis_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\t\tif (not is_even) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\
    \ttable.sort(result)\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i,v in ipairs(x) do\n\
    \    local even = false\n    while v > 0 do\n      local d = v % 10\n      if\
    \ d % 2 == 0 then\n        even = true\n        break\n      end\n      v = math.floor(v\
    \ / 10)\n    end\n    if not even then\n      table.insert(result, x[i])\n   \
    \ end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\
    \tif #tostring(v):gsub(\"[02468]\", \"\") == #tostring(v) then\n\t\t\ttable.insert(t,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tfor i = 1, #x do\n\t\t\
    local has_odd = true\n\t\tlocal number = x[i]\n\t\twhile number > 0 do\n\t\t\t\
    local digit = number % 10\n\t\t\tif digit % 2 == 0 then\n\t\t\t\thas_odd = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\tnumber = math.floor(number / 10)\n\t\tend\n\t\t\
    if has_odd then\n\t\t\ttable.insert(result, x[i])\n\t\tend\n\tend\n\ttable.sort(result)\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local n = 0\n  for i =\
    \ 1, #x do\n    if has_unique_digits(x[i]) then\n      n = n + 1\n      result[n]\
    \ = x[i]\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0xlskbp.lua:13:\
    \ attempt to call a nil value (global 'has_unique_digits')\nstack traceback:\n\
    \t/tmp/tmpu0xlskbp.lua:13: in local 'candidate'\n\t/tmp/tmpu0xlskbp.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal num = {}\n\tfor _, v in ipairs(x) do\n\
    \t\tlocal k = 0\n\t\tlocal l = math.floor(math.log10(v) + 1)\n\t\twhile l > 0\
    \ do\n\t\t\tlocal i = v % 10\n\t\t\tif i % 2 == 0 then\n\t\t\t\tk = k + 1\n\t\t\
    \tend\n\t\t\tv = math.floor(v / 10)\n\t\t\tl = l - 1\n\t\tend\n\t\tif k == 0 then\n\
    \t\t\ttable.insert(num, _)\n\t\tend\n\tend\n\tlocal y = {}\n\tfor _, v in ipairs(num)\
    \ do\n\t\ttable.insert(y, x[v])\n\tend\n\ttable.sort(y)\n\treturn y\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal r = {}\n\tlocal i, j = 1, 1\n\twhile\
    \ i <= #x do\n\t\tif math.fmod(x[i], 2) == 1 then\n\t\t\tr[j] = x[i]\n\t\t\tj\
    \ = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\ttable.sort(r)\n\treturn r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox5t9ibq.lua:27:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpox5t9ibq.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    -- Check if there is an even digit in the number v.\n    if type(v) == \"\
    number\" and not v:match(\"[02468]\") then\n      table.insert(res, v)\n    end\n\
    \  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp648wav1n.lua:13:\
    \ attempt to index a number value (local 'v')\nstack traceback:\n\t/tmp/tmp648wav1n.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp648wav1n.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tfor i,v in ipairs(x) do\n\
    \t\tlocal is_even_digit = false\n\t\tfor i = 1, string.len(tostring(v)) do\n\t\
    \t\tif tonumber(string.sub(tostring(v), i, i)) % 2 == 0 then\n\t\t\t\tis_even_digit\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not is_even_digit then\n\t\
    \t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local to_sort = {}\n  for _, v in ipairs(x)\
    \ do\n    local is_odd = true\n    while v > 0 do\n      if (v % 10) % 2 == 0\
    \ then\n        is_odd = false\n        break\n      end\n      v = math.floor(v\
    \ / 10)\n    end\n    if is_odd then\n      table.insert(to_sort, v)\n    end\n\
    \  end\n  table.sort(to_sort)\n  return to_sort\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8ckajnu.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpn8ckajnu.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, i in ipairs(x) do\n\
    \    local is_unique = true\n    while i > 0 do\n      local digit = i % 10\n\
    \      if digit % 2 == 0 then\n        is_unique = false\n        break\n    \
    \  end\n      i = (i - digit) / 10\n    end\n    if is_unique then\n      table.insert(res,\
    \ x[_])\n    end\n  end\n  table.sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function helper(y)\n    if y == 0 then\n\
    \      return 0\n    else\n      local a = y % 10\n      if a % 2 == 0 then\n\
    \        return 1\n      else\n        return helper(y // 10)\n      end\n   \
    \ end\n  end\n  local result = {}\n  for k, v in ipairs(x) do\n    if helper(v)\
    \ == 0 then\n      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t, v = {}, 1\n\tfor i = 1, #x do\n\t\t\
    for d in string.gmatch(tostring(x[i]), \"%d\") do\n\t\t\tv = tonumber(d)\n\t\t\
    \tif v % 2 == 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif v % 2 ~= 0 then\n\
    \t\t\ttable.insert(t, x[i])\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    local\
    \ a = tostring(x[i])\n    local flag = false\n    for j = 1, #a do\n      if string.sub(a,\
    \ j, j) == '2' then\n        flag = true\n        break\n      end\n    end\n\
    \    if not flag then\n      table.insert(t, x[i])\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp622fplbg.lua:32:\
    \ expected: {}\nactual: {10}\nstack traceback:\n\t/tmp/tmp622fplbg.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\tlocal temp = {}\n\tfor\
    \ k,v in pairs(x) do\n\t\ttable.insert(temp, v)\n\tend\n\tfor _,v in pairs(temp)\
    \ do\n\t\tif tostring(v):match(\"%d%d\") then\n\t\t\tif tostring(v):match(\"%d%d\"\
    ):match(\"%d\") then\n\t\t\t\tif tostring(v):match(\"%d%d\"):match(\"%d\") % 2\
    \ == 0 then\n\t\t\t\t\tbreak\n\t\t\t\telse\n\t\t\t\t\ttable.insert(result, v)\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\ttable.insert(result, v)\n\t\t\tend\n\t\telse\n\
    \t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyux4w2vp.lua:37:\
    \ expected: {1, 15, 33}\nactual: {1, 15, 33, 1422}\nstack traceback:\n\t/tmp/tmpyux4w2vp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal r = {}\n\tfor i, v in ipairs(x) do\n\t\
    \tif not string.find(tostring(v), '%d?[02468]') then\n\t\t\ttable.insert(r, v)\n\
    \t\tend\n\tend\n\ttable.sort(r)\n\treturn r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      if not has_even_digit(x[i]) then\n            res[#res + 1] = x[i]\n  \
    \      end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88aume42.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp88aume42.lua:12: in local 'candidate'\n\t/tmp/tmp88aume42.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function even(n)\n        while n >\
    \ 0 do\n            local d = n % 10\n            if d % 2 == 0 then\n       \
    \         return false\n            end\n            n = math.floor(n / 10)\n\
    \        end\n        return true\n    end\n    local t = {}\n    for _, i in\
    \ ipairs(x) do\n        if even(i) then\n            table.insert(t, i)\n    \
    \    end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local digits={}\n  local str=\"\"\n  local\
    \ flag=0\n  for i=1,#x do\n    str=tostring(x[i])\n    flag=0\n    for j=1,#str\
    \ do\n      if tonumber(str:sub(j,j))%2==0 then\n        flag=1\n        break\n\
    \      end\n    end\n    if flag==0 then\n      table.insert(digits,x[i])\n  \
    \  end\n  end\n  table.sort(digits)\n  return digits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for _, v in ipairs(x) do\n\
    \    if v < 10 or (v < 100 and v % 2 ~= 0) or (v < 1000 and v % 2 ~= 0 and math.floor(v\
    \ / 10) % 2 ~= 0) or (v < 10000 and v % 2 ~= 0 and math.floor(v / 10) % 2 ~= 0\
    \ and math.floor(v / 100) % 2 ~= 0) then\n      table.insert(t, v)\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpugy0sint.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpugy0sint.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal pos = {}\n\tfor i,v in ipairs(x) do\n\
    \t\tif unique(tostring(v)) then pos[#pos+1] = v end\n\tend\n\ttable.sort(pos)\n\
    \treturn pos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1z2ul986.lua:12:\
    \ attempt to call a nil value (global 'unique')\nstack traceback:\n\t/tmp/tmp1z2ul986.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1z2ul986.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- YOUR CODE HERE\n    return {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxaw0jttx.lua:17:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpxaw0jttx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local str = tostring(x[i])\n        local is_odd = true\n        for\
    \ j = 1, #str do\n            if tonumber(str:sub(j, j)) % 2 == 0 then\n     \
    \           is_odd = false\n                break\n            end\n        end\n\
    \        if is_odd then\n            table.insert(result, x[i])\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    x = copy_array(x)\n    local last_index =\
    \ x.length\n    for i=1,x.length do\n        if has_even_digit(x[i]) then\n  \
    \          x[i] = x[last_index]\n            last_index = last_index - 1\n   \
    \     end\n    end\n    return sort_asc(x, 1, last_index)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcykob4vk.lua:10:\
    \ attempt to call a nil value (global 'copy_array')\nstack traceback:\n\t/tmp/tmpcykob4vk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcykob4vk.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ flag = true\n\t\tlocal val = tostring(x[i])\n\t\tfor j = 1, #val do\n\t\t\t\
    if tonumber(val:sub(j, j)) % 2 == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(res, x[i])\n\t\tend\n\
    \tend\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  return {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5uztyf0.lua:16:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpt5uztyf0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even_digit = false\n        for d in tostring(v):gmatch(\"\
    %d\") do\n            d = tonumber(d)\n            if d % 2 == 0 then\n      \
    \          has_even_digit = true\n                break\n            end\n   \
    \     end\n        if not has_even_digit then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  \n  -- [[ Fill in the code here ]]\n  local\
    \ ret = {}\n  local j = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp66c6m5uf.lua:24: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 ~= 0 then\n            table.insert(res, x[i])\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6czfplil.lua:24:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmp6czfplil.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local result = {}\n   for i = 1, #x do\n \
    \     local flag = true\n      local num = x[i]\n      while (num > 0) do\n  \
    \       local digit = num % 10\n         if (digit % 2 == 0) then\n          \
    \  flag = false\n            break\n         end\n         num = math.floor(num\
    \ / 10)\n      end\n      if (flag) then\n         table.insert(result, x[i])\n\
    \      end\n   end\n   table.sort(result)\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- TODO: Implement it.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a21wy6z.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp8a21wy6z.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    local i, j\n    local\
    \ cnt = 0\n    local n = #x\n    local contains_even_digit\n    for i = 1, n do\n\
    \        contains_even_digit = false\n        for j = 1, string.len(tostring(x[i]))\
    \ do\n            if is_even(tonumber(string.sub(tostring(x[i]), j, j))) then\n\
    \                contains_even_digit = true\n                break\n         \
    \   end\n        end\n        if not contains_even_digit then\n            result[cnt+1]\
    \ = x[i]\n            cnt = cnt + 1\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5s2itq8.lua:18:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmpz5s2itq8.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpz5s2itq8.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Implement your solution here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf7d3o317.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpf7d3o317.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, value in ipairs(x)\
    \ do\n        local unique = true\n        local num = value\n        while num\
    \ > 0 do\n            if num % 2 == 0 then\n                unique = false\n \
    \               break\n            end\n            num = math.floor(num / 10)\n\
    \        end\n        if unique then\n            table.insert(result, value)\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local temp = {}\n    for i = 1, #x do\n \
    \       local num = x[i]\n        local isAllDigitsOdd = true\n        while num\
    \ > 0 do\n            local digit = num % 10\n            if (digit % 2 == 0)\
    \ then\n                isAllDigitsOdd = false\n                break\n      \
    \      end\n            num = math.floor(num / 10)\n        end\n        if isAllDigitsOdd\
    \ then\n            table.insert(temp, x[i])\n        end\n    end\n    table.sort(temp)\n\
    \    return temp\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46nr47yn.lua:16:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp46nr47yn.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local x_copy = {}\n    local t = {}\n   \
    \ local j = 1\n    local i = 1\n    for key, value in pairs(x) do\n        x_copy[key]\
    \ = value\n    end\n    table.sort(x_copy)\n    for key, value in pairs(x_copy)\
    \ do\n        if value < 10 then\n            t[i] = value\n            i = i\
    \ + 1\n        else\n            local is_unique = true\n            for v in\
    \ tostring(value):gmatch(\"%d\") do\n                if tonumber(v) % 2 == 0 then\n\
    \                    is_unique = false\n                    break\n          \
    \      end\n            end\n            if is_unique then\n                t[i]\
    \ = value\n                i = i + 1\n            end\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for _, num in ipairs(x)\
    \ do\n        local numstr = tostring(num)\n        if not string.find(numstr,\
    \ \"[24680]\") then\n            table.insert(result, num)\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 ~= 0 then \n            res[#res + 1] = x[i]\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj7jlkm0.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpzj7jlkm0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tprint(\"unique_digits\")\n\tlocal t = {}\n\t\
    for _, v in ipairs(x) do\n\t\tlocal has_even = false\n\t\tfor _, digit in ipairs(to_digits(v))\
    \ do\n\t\t\tif digit % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(t, v)\n\t\tend\n\
    \tend\n\ttable.sort(t)\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "unique_digits\nE\nTests with errors:\n------------------\n1) test_humaneval\n\
    /tmp/tmp0ml9qolb.lua:14: attempt to call a nil value (global 'to_digits')\nstack\
    \ traceback:\n\t/tmp/tmp0ml9qolb.lua:14: in local 'candidate'\n\t/tmp/tmp0ml9qolb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- x is a table, each element of which is\
    \ an integer\n    -- write your code here\n    result = {}\n    for i = 1, #x\
    \ do\n        local in_str = tostring(x[i])\n        local even = false\n    \
    \    for j = 1, #in_str do\n            if tonumber(in_str:sub(j, j)) % 2 == 0\
    \ then\n                even = true\n                break\n            end\n\
    \        end\n        if not even then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmizbrru.lua:32:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpgmizbrru.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local digits = {}\n    for _,v in ipairs(x)\
    \ do\n        local even = false\n        while v > 0 do\n            local d\
    \ = v % 10\n            if d % 2 == 0 then\n                even = true\n    \
    \            break\n            end\n            v = math.floor(v / 10)\n    \
    \    end\n        if not even then\n            table.insert(digits, v)\n    \
    \    end\n    end\n    return digits\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9l1jr5e.lua:31:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp_9l1jr5e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\t-- Get the digits\n\tx = digits(x)\n\t-- Filter\
    \ even numbers\n\tx = filter(x, function(v)\n\t\treturn v % 2 ~= 0\n\tend)\n\t\
    -- Sort the table\n\tx = sort(x)\n\t-- Return it\n\treturn x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpf_6f2k.lua:11:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpxpf_6f2k.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxpf_6f2k.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function unique(x)\n\t\tlocal a = {}\n\
    \t\tlocal function dig(y)\n\t\t\twhile y > 0 do\n\t\t\t\tlocal d = y % 10\n\t\t\
    \t\tif d % 2 == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\ty = (y -\
    \ d) / 10\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\tfor i, v in ipairs(x) do\n\
    \t\t\tif unique(v) then\n\t\t\t\ttable.insert(a, v)\n\t\t\tend\n\t\tend\n\t\t\
    return a\n\tend\n\treturn unique(x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a number value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\t-- implement me!\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1inmdzxb.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp1inmdzxb.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local xi = tostring(x[i])\n    local has_even = false\n    for j = 1, #xi do\n\
    \      if tonumber(xi:sub(j, j)) % 2 == 0 then\n        has_even = true\n    \
    \    break\n      end\n    end\n    if not has_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local results = {}\n  for _, num in ipairs(x)\
    \ do\n    if num % 2 ~= 0 then\n      table.insert(results, num)\n    end\n  end\n\
    \  table.sort(results)\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl57erq3l.lua:24:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpl57erq3l.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for i, v in ipairs(x) do\n\
    \        local b = true\n        while v > 0 do\n            if v % 2 == 0 then\n\
    \                b = false\n                break\n            end\n         \
    \   v = math.floor(v / 10)\n        end\n        if b then\n            table.insert(t,\
    \ x[i])\n        end\n    end\n    table.sort(t)\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local list = {}\n  for key, value in pairs(x)\
    \ do\n    local is_unique = true\n    while value > 0 do\n      local digit =\
    \ value % 10\n      if digit % 2 == 0 then\n        is_unique = false\n      \
    \  break\n      end\n      value = math.floor(value / 10)\n    end\n    if is_unique\
    \ then\n      table.insert(list, key, value)\n    end\n  end\n  return list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5c_v2r7.lua:22:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpg5c_v2r7.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpg5c_v2r7.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tlocal x = x or {}\n\tfor\
    \ i = 1, #x do\n\t\tif x[i] > 9 then\n\t\t\tif math.floor(x[i] % 10) % 2 ~= 0\
    \ and math.floor(x[i] / 10) % 2 ~= 0 then\n\t\t\t\ttable.insert(res, x[i])\n\t\
    \t\tend\n\t\telse\n\t\t\tif x[i] % 2 ~= 0 then\n\t\t\t\ttable.insert(res, x[i])\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5whfhzvk.lua:29:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmp5whfhzvk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local result = {}\n   local pass = true\n\
    \   for _, value in ipairs(x) do\n      if value < 10 then\n         table.insert(result,\
    \ value)\n      else\n         for digit in tostring(value):gmatch(\"%d\") do\n\
    \            if tonumber(digit) % 2 == 0 then\n               pass = false\n \
    \              break\n            end\n         end\n         if pass then\n \
    \           table.insert(result, value)\n         end\n         pass = true\n\
    \      end\n   end\n   table.sort(result)\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal unique_number = {}\n\tfor i,n in ipairs(x)\
    \ do\n\t\tif tonumber(n) and not n:match(\"[24680]\") then\n\t\t\ttable.insert(unique_number,\
    \ n)\n\t\tend\n\tend\n\ttable.sort(unique_number)\n\treturn unique_number\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmhva9wrd.lua:12:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpmhva9wrd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmhva9wrd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local sorted = {}\n  for _, v in ipairs(x)\
    \ do\n    local toString = tostring(v)\n    local evenFlag = true\n    for i =\
    \ 1, #toString do\n      if tonumber(toString:sub(i, i)) % 2 == 0 then\n     \
    \   evenFlag = false\n        break\n      end\n    end\n    if evenFlag then\n\
    \      table.insert(sorted, v)\n    end\n  end\n  table.sort(sorted)\n  return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\
    \tlocal n = true\n\t\twhile v > 0 do\n\t\t\tif (v % 10) % 2 == 0 then\n\t\t\t\t\
    n = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\
    \tif n then\n\t\t\ttable.insert(t, x[_])\n\t\tend\n\tend\n\treturn t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj6r129a.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpmj6r129a.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h74d0xp.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmp7h74d0xp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal tbl = {}\n\tfor _,y in ipairs(x) do\n\
    \t\tif y ~= 0 and (y % 2) ~= 0 then\n\t\t\ttbl[#tbl+1] = y\n\t\tend\n\tend\n\t\
    table.sort(tbl)\n\treturn tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxntlu_c2.lua:24:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpxntlu_c2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local new_x = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        for d in tostring(v):gmatch('%d')\
    \ do\n            if d % 2 == 0 then\n                has_even = true\n      \
    \          break\n            end\n        end\n        if not has_even then\n\
    \            table.insert(new_x, v)\n        end\n    end\n    table.sort(new_x)\n\
    \    return new_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for _,v in ipairs(x) do\n\
    \    if tostring(v):find(\"[24680]\") == nil then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqq1uur9.lua:22:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmphqq1uur9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local set = {}\n  for i, v in ipairs(x) do\n\
    \    local even_digit = 0\n    for digit in string.gmatch(tostring(v), \"[02468]\"\
    ) do\n      even_digit = even_digit + 1\n    end\n    if even_digit == 0 then\n\
    \      table.insert(set, v)\n    end\n  end\n  table.sort(set)\n  return set\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function check_no_even(num)\n\t\twhile\
    \ num > 0 do\n\t\t\tif num % 2 == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    \tnum = num // 10\n\t\tend\n\t\treturn true\n\tend\n\tlocal function compare(a,\
    \ b)\n\t\treturn a < b\n\tend\n\tlocal result = {}\n\tfor i = 1, #x do\n\t\tif\
    \ check_no_even(x[i]) then\n\t\t\ttable.insert(result, x[i])\n\t\tend\n\tend\n\
    \ttable.sort(result, compare)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for _,v in ipairs(x)\
    \ do\n        local s = string.format(\"%d\", v)\n        local ok = true\n  \
    \      for c in s:gmatch(\"%d\") do\n            if tonumber(c) % 2 == 0 then\n\
    \                ok = false\n                break\n            end\n        end\n\
    \        if ok then\n            table.insert(ret, v)\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngmgm4pu.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpngmgm4pu.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local tab = {}\n    for k, v in pairs(x)\
    \ do\n        local flag = true\n        while v ~= 0 do\n            local d\
    \ = v % 10\n            if d % 2 == 0 then\n                flag = false\n   \
    \             break\n            end\n            v = (v - d) / 10\n        end\n\
    \        if flag then\n            table.insert(tab, k)\n        end\n    end\n\
    \    table.sort(tab)\n    local ret = {}\n    for k, v in pairs(tab) do\n    \
    \    table.insert(ret, x[v])\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzkfeg0aw.lua:36:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpzkfeg0aw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  -- Write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0nurge_.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpt0nurge_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ans = {}\n  for _,i in ipairs(x) do\n\
    \    if not has_even_digit(i) then\n      table.insert(ans, i)\n    end\n  end\n\
    \  table.sort(ans)\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp313_6abf.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmp313_6abf.lua:12: in local 'candidate'\n\t/tmp/tmp313_6abf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local even_digits = {0, 2, 4, 6, 8}\n   \
    \ local result = {}\n    local is_unique = true\n    for i = 1, #x do\n      \
    \  local number = x[i]\n        is_unique = true\n        while number > 0 do\n\
    \            local modulo = number % 10\n            for j = 1, #even_digits do\n\
    \                if modulo == even_digits[j] then\n                    is_unique\
    \ = false\n                    break\n                end\n            end\n \
    \           number = math.floor(number / 10)\n        end\n        if is_unique\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local function has_even_digit(n)\n      \
    \  local function has_even_digit(n)\n            local d = n % 10\n          \
    \  if d == 0 or d == 2 or d == 4 or d == 6 or d == 8 then\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    end\n        while n > 0 do\n            if has_even_digit(n) then\n    \
    \            return true\n            end\n            n = n // 10\n        end\n\
    \        return false\n    end\n    local ans = {}\n    for i = 1, #x do\n   \
    \     if not has_even_digit(x[i]) then\n            ans[#ans + 1] = x[i]\n   \
    \     end\n    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze5kcvs3.lua:39:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpze5kcvs3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tfor i = 1, #x do\n\t\tlocal\
    \ tmp = {}\n\t\twhile x[i] > 0 do\n\t\t\ttmp[#tmp + 1] = x[i] % 10\n\t\t\tx[i]\
    \ = math.floor(x[i] / 10)\n\t\tend\n\t\tfor j = 1, #tmp do\n\t\t\tif tmp[j] %\
    \ 2 == 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif j == #tmp then\n\t\t\t\tres[#res\
    \ + 1] = table.concat(tmp):reverse()\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res)\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9_so6kt.lua:33:\
    \ expected: {1, 15, 33}\nactual: {\"1\", \"15\", \"33\"}\nstack traceback:\n\t\
    /tmp/tmpx9_so6kt.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ans = {}\n    for _, v in ipairs(x)\
    \ do\n        local has_even = false\n        while v > 0 do\n            if (v\
    \ % 10) % 2 == 0 then\n                has_even = true\n                break\n\
    \            end\n            v = math.floor(v / 10)\n        end\n        if\
    \ not has_even then\n            table.insert(ans, _)\n        end\n    end\n\
    \    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyfax6mhq.lua:30:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpyfax6mhq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local sorted_table = {}\n    for i,v in ipairs(x)\
    \ do\n        local s = tostring(v)\n        local even_digits = false\n     \
    \   for c in s:gmatch(\".\") do\n            if tonumber(c) % 2 == 0 then\n  \
    \              even_digits = true\n                break\n            end\n  \
    \      end\n        if not even_digits then\n            table.insert(sorted_table,\
    \ v)\n        end\n    end\n    return sorted_table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwz8n7ky.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpzwz8n7ky.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndtnink8.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpndtnink8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    if\
    \ (x[i] - math.floor(x[i] / 10) * 10) % 2 == 1 then\n      table.insert(res, x[i])\n\
    \    end\n  end\n  if #res == 0 then\n    return {}\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4kssb7l.lua:27:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpj4kssb7l.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i, v in ipairs(x)\
    \ do\n        local str = tostring(v)\n        local even_flag = false\n     \
    \   for i = 1, #str do\n            if (str:sub(i, i) % 2 == 0) then\n       \
    \         even_flag = true\n                break\n            end\n        end\n\
    \        if (not even_flag) then\n            table.insert(result, v)\n      \
    \  end\n    end\n    table.sort(result)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- Write your code here\n    local result\
    \ = {}\n    for _,v in ipairs(x) do\n        if v%2 == 1 then\n            local\
    \ flag = true\n            while v ~= 0 do\n                if v%10%2 == 0 then\n\
    \                    flag = false\n                    break\n               \
    \ end\n                v = math.floor(v/10)\n            end\n            if flag\
    \ then table.insert(result, v) end\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajuupp74.lua:32:\
    \ expected: {1, 15, 33}\nactual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmpajuupp74.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tfor _, n in ipairs(x) do\n\
    \t\tlocal has_even = false\n\t\twhile n > 0 do\n\t\t\tlocal d = n % 10\n\t\t\t\
    if d % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\
    n = math.floor(n / 10)\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(res,\
    \ x[_])\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local unique = {}\n  for _, n in ipairs(x)\
    \ do\n    -- convert number to string\n    local number = tostring(n)\n    --\
    \ flag to tell whether it has even digit or not\n    local flag = false\n    for\
    \ i = 1, #number do\n      -- convert char to number\n      local digit = tonumber(number:sub(i,\
    \ i))\n      if digit % 2 == 0 then\n        flag = true\n        break\n    \
    \  end\n    end\n    if not flag then\n      table.insert(unique, n)\n    end\n\
    \  end\n  -- sort the table\n  table.sort(unique)\n  return unique\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local tab={}\n    for _, v in ipairs(x) do\n\
    \        local digit = v\n        while digit > 0 do\n            if digit % 2\
    \ == 0 then\n                tab[v] = true\n                break\n          \
    \  end\n            digit = math.floor(digit / 10)\n        end\n    end\n   \
    \ local res = {}\n    for _, v in ipairs(x) do\n        if not tab[v] then\n \
    \           table.insert(res, v)\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkq9fto4.lua:33:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpnkq9fto4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local digits = {}\n    for i = 1, #x do\n\
    \        local str = tostring(x[i])\n        if not str:find(\"[02468]\") then\n\
    \            table.insert(digits, x[i])\n        end\n    end\n    table.sort(digits)\n\
    \    return digits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for i = 1, #x do\n    local\
    \ num = x[i]\n    local found = false\n    while num > 0 do\n      local d = num\
    \ % 10\n      if d % 2 == 0 then\n        found = true\n        break\n      end\n\
    \      num = (num - d) / 10\n    end\n    if not found then\n      res[#res +\
    \ 1] = x[i]\n    end\n  end\n  sort(res)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp21qnj0gd.lua:26:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp21qnj0gd.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp21qnj0gd.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  return {x[1], x[2], x[3]}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzomxpc4.lua:16:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422}\nstack traceback:\n\t/tmp/tmpgzomxpc4.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal set = {1, 3, 5, 7, 9}\n\tlocal res =\
    \ {}\n\tlocal flag = true\n\tfor _, value in ipairs(x) do\n\t\tlocal str = tostring(value)\n\
    \t\tfor i = 1, #str do\n\t\t\tlocal digit = tonumber(str:sub(i, i))\n\t\t\tflag\
    \ = flag and set[digit]\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(res, value)\n\
    \t\tend\n\t\tflag = true\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6a9yaf_.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpm6a9yaf_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local allOdd = true\n        for digit in tostring(x[i]):gmatch(\"%d\"\
    ) do\n            if tonumber(digit) % 2 == 0 then\n                allOdd = false\n\
    \                break\n            end\n        end\n        if allOdd then\n\
    \            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    if v % 2 ~= 0 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcem14sa.lua:24:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpqcem14sa.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local y = {}\n    for _, v in ipairs(x) do\n\
    \        if not string.find(tostring(v), '2', 1, true) and\n           not string.find(tostring(v),\
    \ '4', 1, true) and\n           not string.find(tostring(v), '6', 1, true) and\n\
    \           not string.find(tostring(v), '8', 1, true) then\n            table.insert(y,\
    \ v)\n        end\n    end\n    return y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptivn041e.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmptivn041e.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    x = as_array(x)\n    local y = {}\n    for\
    \ i, xi in ipairs(x) do\n        if tostring(xi):match(\"[24680]\") == nil then\n\
    \            table.insert(y, xi)\n        end\n    end\n    return as_set(y)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjf8mkzdb.lua:10:\
    \ attempt to call a nil value (global 'as_array')\nstack traceback:\n\t/tmp/tmpjf8mkzdb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjf8mkzdb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\
    \tlocal has_even = false\n\t\tfor i in tostring(v):gmatch(\"%d\") do\n\t\t\tif\
    \ i % 2 == 0 then\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\tif not has_even then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  return {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5uztyf0.lua:16:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpt5uztyf0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      local even = false\n        for j = 1, #tostring(x[i]) do\n           \
    \ if tonumber(tostring(x[i]):sub(j, j)) % 2 == 0 then\n                even =\
    \ true\n                break\n            end\n        end\n        if not even\
    \ then\n            table.insert(ret, x[i])\n        end\n    end\n    table.sort(ret)\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal t, i = {}, 1\n\tfor _, v in ipairs(x)\
    \ do\n\t\tif v < 10 or tonumber(tostring(v):gsub(\"[24680]\", \"\")) == v then\n\
    \t\t\tt[i] = v\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq3ztpk1.lua:12:\
    \ bad argument #2 to 'tonumber' (base out of range)\nstack traceback:\n\t/tmp/tmpbq3ztpk1.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbq3ztpk1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for _,v in ipairs(x) do\n \
    \   if v < 10 then\n      table.insert(t, v)\n    else\n      local sum = 0\n\
    \      while v > 0 do\n        sum = sum + v % 10\n        v = math.floor(v /\
    \ 10)\n      end\n      if sum % 2 == 1 then\n        table.insert(t, x[_])\n\
    \      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhcxqj66.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1422, 1}\nstack traceback:\n\t/tmp/tmpmhcxqj66.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   -- Sorted list of unique elements.\n   local\
    \ y = {}\n   -- Auxiliary table to keep track of how many times a number has \n\
    \   -- already been inserted into y.\n   local z = {}\n   for i, v in ipairs(x)\
    \ do\n      -- True if v has at least one even digit.\n      local even = false\n\
    \      -- Process each digit of v.\n      while v > 0 do\n         -- Read the\
    \ last digit of v.\n         local d = v % 10\n         -- Remove the last digit\
    \ of v.\n         v = math.floor(v / 10)\n         -- True if d is even.\n   \
    \      even = even or (d % 2 == 0)\n      end\n      -- True if even is false\
    \ and v hasn't been inserted into y.\n      if not even and z[v] == nil then\n\
    \         -- Insert v into y.\n         table.insert(y, v)\n         -- Keep track\
    \ of the number of times v has been inserted into y.\n         z[v] = 1\n    \
    \  end\n   end\n   -- Sort table y in increasing order.\n   table.sort(y)\n  \
    \ return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposmz188j.lua:43:\
    \ expected: {1, 15, 33}\nactual: {0}\nstack traceback:\n\t/tmp/tmposmz188j.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local y = {}\n    for i, v in ipairs(x) do\n\
    \        local noEven = true\n        for j = 1, #tostring(v) do\n           \
    \ if tonumber(tostring(v):sub(j, j)) % 2 == 0 then\n                noEven = false\n\
    \                break\n            end\n        end\n        if noEven then\n\
    \            table.insert(y, v)\n        end\n    end\n    table.sort(y)\n   \
    \ return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local r = {}\n    local a = {}\n    for _,i\
    \ in ipairs(x) do\n        if i%2==0 then\n            table.insert(r,i)\n   \
    \     else\n            table.insert(a,i)\n        end\n    end\n    return a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylozn1cv.lua:25:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpylozn1cv.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local u = {}\n    for _,v in ipairs(x) do\n\
    \        local found = false\n        while v > 0 do\n            local d = v\
    \ % 10\n            if d % 2 == 0 then\n                found = true\n       \
    \         break\n            end\n            v = (v - d) / 10\n        end\n\
    \        if not found then\n            table.insert(u, _)\n        end\n    end\n\
    \    return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2tnr6sn.lua:31:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpz2tnr6sn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local t = {}\n   for i = 1, #x do\n      local\
    \ s = tostring(x[i])\n      local ok = true\n      for j = 1, #s do\n        \
    \ if s:sub(j, j) % 2 == 0 then\n            ok = false\n            break\n  \
    \       end\n      end\n      if ok then\n         t[#t + 1] = x[i]\n      end\n\
    \   end\n   table.sort(t)\n   return t\nend\nM.unique_digits = unique_digits\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp18yymn_6.lua:27: attempt to index a nil value (global 'M')\n\
    stack traceback:\n\t/tmp/tmp18yymn_6.lua:27: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659977959
- exit_code: 0
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if (#x == 0) then return {} end\n  local result\
    \ = {}\n  for i, j in ipairs(x) do\n    local num = math.abs(j)\n    local flag\
    \ = true\n    while (num ~= 0) do\n      if ((num % 10) % 2 == 0) then\n     \
    \   flag = false\n        break\n      end\n      num = math.floor(num / 10)\n\
    \    end\n    if (flag) then table.insert(result, j) end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for k, v in pairs(x)\
    \ do\n        if not has_even_digit(v) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return sort_table(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuxj_apk8.lua:12:\
    \ attempt to call a nil value (global 'has_even_digit')\nstack traceback:\n\t\
    /tmp/tmpuxj_apk8.lua:12: in local 'candidate'\n\t/tmp/tmpuxj_apk8.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\t-- Convert the table to string and split it\
    \ by each number.\n\tlocal t = {}\n\tlocal s = table.concat(x)\n\tfor k in string.gmatch(s,\
    \ \"%d+\") do\n\t\tt[#t+1] = k\n\tend\n\t-- Check each number for even digits\
    \ and remove it from table.\n\tfor i, v in ipairs(t) do\n\t\tfor k in string.gmatch(v,\
    \ \"%d\") do\n\t\t\tif tonumber(k) % 2 == 0 then\n\t\t\t\ttable.remove(t, i)\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t-- Check if table is empty then return\
    \ it.\n\tif #t == 0 then\n\t\treturn t\n\tend\n\t-- Sort the table\n\ttable.sort(t)\n\
    \treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc8vr_2k.lua:37:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpnc8vr_2k.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  return {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5uztyf0.lua:16:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpt5uztyf0.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977959
