name: HumanEval_104_unique_digits
language: lua
results:
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local even = {}\n    local result = {}\n\
    \    -- YOUR CODE HERE\n    for i = 1, #x do\n        local number = x[i]\n  \
    \      local evenDigit = false\n        while (number > 0) do\n            local\
    \ digit = number % 10\n            if (digit % 2 == 0) then\n                evenDigit\
    \ = true\n                break\n            end\n            number = math.floor(number\
    \ / 10)\n        end\n        if (evenDigit == false) then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    return {number | number <- x, unique(number_to_table(number))}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8l3j18zo.lua:10:\
    \ attempt to perform bitwise operation on a nil value (global 'number')\nstack\
    \ traceback:\n\t/tmp/tmp8l3j18zo.lua:10: in local 'candidate'\n\t/tmp/tmp8l3j18zo.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local res = {}\n  for _, v in ipairs(x) do\n\
    \    -- use string.match to check even\n    if not string.match(tostring(v), '%d*[02468]%d*')\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv601g4uk.lua:23:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpv601g4uk.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function has_even_digit(n)\n\t\tlocal\
    \ function is_even(d)\n\t\t\treturn d % 2 == 0\n\t\tend\n\t\tlocal function has_even_digit_helper(m)\n\
    \t\t\tif m == 0 then return false end\n\t\t\treturn is_even(m % 10) or has_even_digit_helper(math.floor(m\
    \ / 10))\n\t\tend\n\t\treturn has_even_digit_helper(n)\n\tend\n\tlocal function\
    \ unique_digits_helper(xs, acc)\n\t\tif #xs == 0 then return acc end\n\t\tif not\
    \ has_even_digit(xs[1]) then\n\t\t\ttable.insert(acc, xs[1])\n\t\tend\n\t\treturn\
    \ unique_digits_helper(array.tail(xs), acc)\n\tend\n\treturn unique_digits_helper(x,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6bx2vd2.lua:25:\
    \ attempt to index a nil value (global 'array')\nstack traceback:\n\t/tmp/tmpe6bx2vd2.lua:25:\
    \ in function </tmp/tmpe6bx2vd2.lua:20>\n\t(...tail calls...)\n\t/tmp/tmpe6bx2vd2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local t = {}\n    for _, v in ipairs(x) do\n\
    \        local unique = true\n        while v > 0 do\n            if (v % 10)\
    \ % 2 == 0 then\n                unique = false\n                break\n     \
    \       end\n            v = math.floor(v / 10)\n        end\n        if unique\
    \ then\n            table.insert(t, x)\n        end\n    end\n    table.sort(t)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\nattempt to\
    \ compare two table values\nstack traceback:\n\nRan 1 tests in 0.000 seconds,\
    \ 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n   local s = {}\n   for i = 1, #x do\n      local\
    \ n = x[i]\n      local ok = true\n      while n > 0 do\n         if n % 2 ==\
    \ 0 then\n            ok = false\n            break\n         end\n         n\
    \ = math.floor(n / 10)\n      end\n      if ok then\n         s[#s + 1] = x[i]\n\
    \      end\n   end\n   table.sort(s)\n   return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local result = {}\n    for i = 1, #x do\n\
    \        local has_even = false\n        for num in string.gmatch(tostring(x[i]),\
    \ \"%d\") do\n            if num % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal output = {}\n\tfor i, v in ipairs(x)\
    \ do\n\t\tlocal isUnique = true\n\t\tfor num in tostring(v):gmatch(\".\") do\n\
    \t\t\tif tonumber(num) % 2 == 0 then\n\t\t\t\tisUnique = false\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif isUnique then\n\t\t\ttable.insert(output, v)\n\t\t\
    end\n\tend\n\ttable.sort(output)\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local r = {}\n    for _, n in ipairs(x) do\n\
    \        local is_unique = true\n        local m = n\n        while m > 0 do\n\
    \            if m % 2 == 0 then\n                is_unique = false\n         \
    \       break\n            end\n            m = m // 10\n        end\n       \
    \ if is_unique then\n            table.insert(r, n)\n        end\n    end\n  \
    \  table.sort(r)\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndtnink8.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpndtnink8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for _, v in ipairs(x)\
    \ do\n        local cnt = 0\n        for i = 1, #tostring(v) do\n            local\
    \ d = tonumber(tostring(v):sub(i, i))\n            if d % 2 == 0 then\n      \
    \          cnt = cnt + 1\n            end\n        end\n        if cnt == 0 then\n\
    \            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local res = {}\n    for i = 1, #x do\n  \
    \      local str = tostring(x[i])\n        local has_even = false\n        for\
    \ j = 1, #str do\n            if string.find(str, '0') or string.find(str, '2')\
    \ or string.find(str, '4') or string.find(str, '6') or string.find(str, '8') then\n\
    \                has_even = true\n                break\n            end\n   \
    \     end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal result = {}\n\t\n\tfor i = 1, #x do\n\
    \t\t-- for each element in x\n\t\tlocal current = x[i]\n\t\tlocal has_even = false\n\
    \t\t\n\t\twhile current > 0 do\n\t\t\t-- for each digit in the element\n\t\t\t\
    local digit = current % 10\n\t\t\t\n\t\t\tif digit % 2 == 0 then\n\t\t\t\t-- if\
    \ the digit is even, break\n\t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\t\t\n\t\t\tcurrent = math.floor(current / 10)\n\t\tend\n\t\t\n\t\tif not has_even\
    \ then\n\t\t\t-- if the element doesn't have even digits, add it to the result\n\
    \t\t\ttable.insert(result, x[i])\n\t\tend\n\tend\n\t\n\ttable.sort(result)\n\t\
    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal sorted_x = {}\n\tfor i,v in ipairs(x)\
    \ do\n\t\tif tostring(v):match(\"%d+\") == tostring(v):match(\"[13579]+\") then\n\
    \t\t\ttable.insert(sorted_x, v)\n\t\tend\n\tend\n\ttable.sort(sorted_x)\n\treturn\
    \ sorted_x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal res = {}\n\tlocal function has_even_digit(i)\n\
    \t\twhile i > 0 do\n\t\t\tif i % 2 == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\
    \t\t\ti = i / 10\n\t\tend\n\t\treturn false\n\tend\n\tfor i = 1, #x do\n\t\tif\
    \ not has_even_digit(x[i]) then\n\t\t\tres[#res + 1] = x[i]\n\t\tend\n\tend\n\t\
    table.sort(res)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpef1vs62p.lua:33:\
    \ expected: {}\nactual: {323}\nstack traceback:\n\t/tmp/tmpef1vs62p.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n\tlocal function has_even_digit(n)\n\t\twhile\
    \ n > 0 do\n\t\t\tif (n % 10) % 2 == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\
    \t\tn = math.floor(n / 10)\n\t\tend\n\t\treturn false\n\tend\n\tlocal y = {}\n\
    \tfor _, n in ipairs(x) do\n\t\tif not has_even_digit(n) then\n\t\t\ttable.insert(y,\
    \ n)\n\t\tend\n\tend\n\ttable.sort(y)\n\treturn y\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local s = tostring(x[i])\n    local unique = true\n    for j = 1, #s do\n  \
    \    if tonumber(s:sub(j, j)) % 2 == 0 then\n        unique = false\n        break\n\
    \      end\n    end\n    if unique then\n      table.insert(result, x[i])\n  \
    \  end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4s150b2.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpr4s150b2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbm6ev1.lua:16:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmperbm6ev1.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  if type(x) ~= \"table\" then\n    return \"\
    invalid input. table expected.\"\n  end\n  local t = {}\n  for _,n in ipairs(x)\
    \ do\n    local flag = true\n    while n ~= 0 do\n      local d = n % 10\n   \
    \   if d % 2 == 0 then\n        flag = false\n        break\n      end\n     \
    \ n = math.floor(n / 10)\n    end\n    if flag then\n      table.insert(t, _)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqxuf1pa.lua:34:\
    \ expected: {1, 15, 33}\nactual: {1, 2, 4}\nstack traceback:\n\t/tmp/tmpaqxuf1pa.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    -- Check\
    \ if number has even digits\n    local num = x[i]\n    while num > 0 do\n    \
    \  if (num % 10) % 2 == 0 then\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if num == 0 then\n      table.insert(t, x[i])\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7ewj_tt.lua:30:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1}\nstack traceback:\n\t/tmp/tmpp7ewj_tt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
