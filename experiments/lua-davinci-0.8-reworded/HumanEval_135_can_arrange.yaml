name: HumanEval_135_can_arrange
language: lua
prompt: "-- Create a function which returns the largest index of an element which\n\
  -- is not greater than or equal to the element immediately preceding it. If\n--\
  \ no such element exists then return -1. The given table will not contain\n-- duplicate\
  \ values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n-- >>> can_arrange({1,\
  \ 2, 3})\n-- -1\nlocal function can_arrange(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
  \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n\
  \    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
  \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local index = -1\n  for i = 1, #arr - 1 do\n    if arr[i] < arr[i\
    \ + 1] then\n      index = i\n    end\n  end\n  return index\nend", "    local\
    \ max, length = 0, #arr\n    for i = 1, length do\n        if arr[i] <= max then\n\
    \            return i - 1\n        end\n        max = arr[i]\n    end\n    return\
    \ -1\nend", end, "  local last, max_idx = 0, -1\n  for i, v in ipairs(arr) do\n\
    \    if v > last then\n      max_idx = i\n      last = v\n    end\n  end\n  return\
    \ max_idx - 1\nend", "  -- YOUR CODE HERE\nend", "  local n = #arr\n  local idx\
    \ = n\n  for i = n - 1, 1, -1 do\n    if arr[i] <= arr[i + 1] then\n      idx\
    \ = i\n    else\n      break\n    end\n  end\n  return idx == n and -1 or idx\n\
    end", "    return -1\nend", "    local a = arr\n    local k = #a\n    local i\
    \ = 0\n    for j = 1, k - 1 do\n        if a[j] > a[j + 1] then\n            i\
    \ = j\n        end\n    end\n    return i - 1\nend", "  local max = -1\n  for\
    \ i, v in ipairs(arr) do\n    if v < arr[i-1] then\n      max = math.max(max,\
    \ i-1)\n    end\n  end\n  return max\nend", "    local previous, index = 0, -1\n\
    \    for i, current in ipairs(arr) do\n        if current < previous then\n  \
    \          return index\n        end\n        if current > previous then\n   \
    \         index = i\n        end\n        previous = current\n    end\n    return\
    \ index\nend", "    local g, s = {}, {}\n    for _, v in ipairs(arr) do\n    \
    \    table.insert(g, v)\n        table.insert(s, v)\n    end\n    table.sort(g)\n\
    \    table.sort(s, function(a, b) return a > b end)\n    local m, k = 0, -1\n\
    \    for i = 1, #arr do\n        if g[i] ~= s[i] then\n            m = m + 1\n\
    \            k = i\n        end\n    end\n    if m ~= 1 then\n        return -1\n\
    \    end\n    for i = k, #arr do\n        if g[i] ~= s[i] then\n            return\
    \ -1\n        end\n    end\n    return k - 1\nend", "  local last_val = -1\n \
    \ local index = -1\n  for i, v in ipairs(arr) do\n    if v > last_val then\n \
    \     index = i\n      last_val = v\n    end\n  end\n  return index - 1\nend",
  "\tlocal max_ind = -1\n\tlocal current_max = 0\n\tfor i = 1, #arr do\n\t\tif arr[i]\
    \ > current_max then\n\t\t\tcurrent_max = arr[i]\n\t\t\tmax_ind = i\n\t\tend\n\
    \tend\n\treturn max_ind\nend", "    local index, max = 0, -1\n    for i = 1, #arr\
    \ do\n        if arr[i] < max then\n            return index\n        end\n  \
    \      if arr[i] > max then\n            max = arr[i]\n            index = i\n\
    \        end\n    end\n    return -1\nend", "  local l = #arr\n  for i = l - 1,\
    \ 1, -1 do\n    if arr[i] > arr[i + 1] then\n      return i\n    end\n  end\n\
    \  return -1\nend", "    local cur_max = arr[1]\n    local cur_max_idx = 1\n \
    \   for i, v in ipairs(arr) do\n        if v <= cur_max then\n            return\
    \ i - 1\n        end\n        cur_max = v\n        cur_max_idx = i\n    end\n\
    \    return -1\nend", "    local last_value = arr[1]\n    local last_index = 1\n\
    \    for i = 2, #arr do\n        if arr[i] > last_value then\n            last_value\
    \ = arr[i]\n            last_index = i\n        end\n    end\n    return last_index\n\
    end", "\t-- TODO: Implement me\nend", "  for i = #arr - 1, 1, -1 do\n    if arr[i]\
    \ < arr[i + 1] then\n      return i\n    end\n  end\n  return -1\nend", "  local\
    \ last = arr[1] - 1\n  for i = #arr, 1, -1 do\n    if arr[i] < last then\n   \
    \   return i\n    end\n    last = arr[i]\n  end\n  return -1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
