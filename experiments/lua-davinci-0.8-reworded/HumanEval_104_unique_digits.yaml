name: HumanEval_104_unique_digits
language: lua
prompt: "-- Given a table of positive integers x. return a sorted table of all \n\
  -- elements that hasn't any even digit.\n-- Note: Returned table should be sorted\
  \ in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33, 1422, 1})\n\
  -- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\nlocal function\
  \ unique_digits(x)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
  \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
  \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
  \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local even = {}\n    local result = {}\n    -- YOUR CODE HERE\n\
    \    for i = 1, #x do\n        local number = x[i]\n        local evenDigit =\
    \ false\n        while (number > 0) do\n            local digit = number % 10\n\
    \            if (digit % 2 == 0) then\n                evenDigit = true\n    \
    \            break\n            end\n            number = math.floor(number /\
    \ 10)\n        end\n        if (evenDigit == false) then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "    return {number | number <- x, unique(number_to_table(number))}\nend", "  local\
    \ res = {}\n  for _, v in ipairs(x) do\n    -- use string.match to check even\n\
    \    if not string.match(tostring(v), '%d*[02468]%d*') then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "\tlocal function has_even_digit(n)\n\
    \t\tlocal function is_even(d)\n\t\t\treturn d % 2 == 0\n\t\tend\n\t\tlocal function\
    \ has_even_digit_helper(m)\n\t\t\tif m == 0 then return false end\n\t\t\treturn\
    \ is_even(m % 10) or has_even_digit_helper(math.floor(m / 10))\n\t\tend\n\t\t\
    return has_even_digit_helper(n)\n\tend\n\tlocal function unique_digits_helper(xs,\
    \ acc)\n\t\tif #xs == 0 then return acc end\n\t\tif not has_even_digit(xs[1])\
    \ then\n\t\t\ttable.insert(acc, xs[1])\n\t\tend\n\t\treturn unique_digits_helper(array.tail(xs),\
    \ acc)\n\tend\n\treturn unique_digits_helper(x, {})\nend", "    local t = {}\n\
    \    for _, v in ipairs(x) do\n        local unique = true\n        while v >\
    \ 0 do\n            if (v % 10) % 2 == 0 then\n                unique = false\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if unique then\n            table.insert(t, x)\n       \
    \ end\n    end\n    table.sort(t)\n    return t\nend", "   local s = {}\n   for\
    \ i = 1, #x do\n      local n = x[i]\n      local ok = true\n      while n > 0\
    \ do\n         if n % 2 == 0 then\n            ok = false\n            break\n\
    \         end\n         n = math.floor(n / 10)\n      end\n      if ok then\n\
    \         s[#s + 1] = x[i]\n      end\n   end\n   table.sort(s)\n   return s\n\
    end", "    local result = {}\n    for i = 1, #x do\n        local has_even = false\n\
    \        for num in string.gmatch(tostring(x[i]), \"%d\") do\n            if num\
    \ % 2 == 0 then\n                has_even = true\n                break\n    \
    \        end\n        end\n        if not has_even then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    table.sort(result)\n    return result\nend",
  "\tlocal output = {}\n\tfor i, v in ipairs(x) do\n\t\tlocal isUnique = true\n\t\t\
    for num in tostring(v):gmatch(\".\") do\n\t\t\tif tonumber(num) % 2 == 0 then\n\
    \t\t\t\tisUnique = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif isUnique then\n\
    \t\t\ttable.insert(output, v)\n\t\tend\n\tend\n\ttable.sort(output)\n\treturn\
    \ output\nend", "    local r = {}\n    for _, n in ipairs(x) do\n        local\
    \ is_unique = true\n        local m = n\n        while m > 0 do\n            if\
    \ m % 2 == 0 then\n                is_unique = false\n                break\n\
    \            end\n            m = m // 10\n        end\n        if is_unique then\n\
    \            table.insert(r, n)\n        end\n    end\n    table.sort(r)\n   \
    \ return r\nend", "    -- your code here\nend", "    local res = {}\n    for _,\
    \ v in ipairs(x) do\n        local cnt = 0\n        for i = 1, #tostring(v) do\n\
    \            local d = tonumber(tostring(v):sub(i, i))\n            if d % 2 ==\
    \ 0 then\n                cnt = cnt + 1\n            end\n        end\n      \
    \  if cnt == 0 then\n            table.insert(res, v)\n        end\n    end\n\
    \    table.sort(res)\n    return res\nend", "    local res = {}\n    for i = 1,\
    \ #x do\n        local str = tostring(x[i])\n        local has_even = false\n\
    \        for j = 1, #str do\n            if string.find(str, '0') or string.find(str,\
    \ '2') or string.find(str, '4') or string.find(str, '6') or string.find(str, '8')\
    \ then\n                has_even = true\n                break\n            end\n\
    \        end\n        if not has_even then\n            table.insert(res, x[i])\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend", "\tlocal result\
    \ = {}\n\t\n\tfor i = 1, #x do\n\t\t-- for each element in x\n\t\tlocal current\
    \ = x[i]\n\t\tlocal has_even = false\n\t\t\n\t\twhile current > 0 do\n\t\t\t--\
    \ for each digit in the element\n\t\t\tlocal digit = current % 10\n\t\t\t\n\t\t\
    \tif digit % 2 == 0 then\n\t\t\t\t-- if the digit is even, break\n\t\t\t\thas_even\
    \ = true\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\n\t\t\tcurrent = math.floor(current\
    \ / 10)\n\t\tend\n\t\t\n\t\tif not has_even then\n\t\t\t-- if the element doesn't\
    \ have even digits, add it to the result\n\t\t\ttable.insert(result, x[i])\n\t\
    \tend\n\tend\n\t\n\ttable.sort(result)\n\treturn result\nend", "\tlocal sorted_x\
    \ = {}\n\tfor i,v in ipairs(x) do\n\t\tif tostring(v):match(\"%d+\") == tostring(v):match(\"\
    [13579]+\") then\n\t\t\ttable.insert(sorted_x, v)\n\t\tend\n\tend\n\ttable.sort(sorted_x)\n\
    \treturn sorted_x\nend", "\tlocal res = {}\n\tlocal function has_even_digit(i)\n\
    \t\twhile i > 0 do\n\t\t\tif i % 2 == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\
    \t\t\ti = i / 10\n\t\tend\n\t\treturn false\n\tend\n\tfor i = 1, #x do\n\t\tif\
    \ not has_even_digit(x[i]) then\n\t\t\tres[#res + 1] = x[i]\n\t\tend\n\tend\n\t\
    table.sort(res)\n\treturn res\nend", "\tlocal function has_even_digit(n)\n\t\t\
    while n > 0 do\n\t\t\tif (n % 10) % 2 == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\
    \t\t\tn = math.floor(n / 10)\n\t\tend\n\t\treturn false\n\tend\n\tlocal y = {}\n\
    \tfor _, n in ipairs(x) do\n\t\tif not has_even_digit(n) then\n\t\t\ttable.insert(y,\
    \ n)\n\t\tend\n\tend\n\ttable.sort(y)\n\treturn y\nend", "  local result = {}\n\
    \  for i = 1, #x do\n    local s = tostring(x[i])\n    local unique = true\n \
    \   for j = 1, #s do\n      if tonumber(s:sub(j, j)) % 2 == 0 then\n        unique\
    \ = false\n        break\n      end\n    end\n    if unique then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  return result\nend", "    -- YOUR CODE HERE\nend",
  "  if type(x) ~= \"table\" then\n    return \"invalid input. table expected.\"\n\
    \  end\n  local t = {}\n  for _,n in ipairs(x) do\n    local flag = true\n   \
    \ while n ~= 0 do\n      local d = n % 10\n      if d % 2 == 0 then\n        flag\
    \ = false\n        break\n      end\n      n = math.floor(n / 10)\n    end\n \
    \   if flag then\n      table.insert(t, _)\n    end\n  end\n  return t\nend",
  "  local t = {}\n  for i = 1, #x do\n    -- Check if number has even digits\n  \
    \  local num = x[i]\n    while num > 0 do\n      if (num % 10) % 2 == 0 then\n\
    \        break\n      end\n      num = math.floor(num / 10)\n    end\n    if num\
    \ == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  return t\nend", " \
    \ local result = {}\n  for _, v in ipairs(x) do\n    local k = tostring(v)\n \
    \   if not k:match('[%d2468]') then\n      table.insert(result, v)\n    end\n\
    \  end\n  table.sort(result)\n  return result\nend", "    local function only_odd_digits(n)\n\
    \        while n > 0 do\n            if n % 2 == 0 then\n                return\
    \ false\n            end\n            n = math.floor(n / 10)\n        end\n  \
    \      return true\n    end\n    local function sort_func(a, b)\n        return\
    \ a < b\n    end\n    local result = {}\n    for _, n in ipairs(x) do\n      \
    \  if only_odd_digits(n) then\n            table.insert(result, n)\n        end\n\
    \    end\n    table.sort(result, sort_func)\n    return result\nend", "  local\
    \ function has_even_digit(number)\n    local number_str = tostring(number)\n \
    \   for digit in number_str:gmatch(\"%d\") do\n      if (tonumber(digit) % 2 ==\
    \ 0) then\n        return true\n      end\n    end\n    return false\n  end",
  "\tx = merge_sort(x)\n\tfor i = #x, 1, -1 do\n\t\tif string.find(tostring(x[i]),\
    \ \"%d*[02468]%d*\") then\n\t\t\ttable.remove(x, i)\n\t\tend\n\tend\n\treturn\
    \ x\nend", "  local result = {}\n  local temp = {}\n  local index = 1\n  local\
    \ helper = true\n  local temp_str\n  local temp_digit\n  for i,v in ipairs(x)\
    \ do\n    -- change v to string\n    temp_str = tostring(v)\n    helper = true\n\
    \    for i = 1,#temp_str do\n      temp_digit = tonumber(temp_str:sub(i,i))\n\
    \      if temp_digit == nil then\n        error(\"Table should only contains integer\"\
    )\n      end\n      if temp_digit%2 == 0 then\n        helper = false\n      \
    \  break\n      end\n    end\n    if helper then\n      temp[index] = v\n    \
    \  index = index + 1\n    end\n  end\n  -- sort the table\n  for i = 1,#temp do\n\
    \    for j = i+1,#temp do\n      if temp[i] > temp[j] then\n        local temp_val\
    \ = temp[i]\n        temp[i] = temp[j]\n        temp[j] = temp_val\n      end\n\
    \    end\n  end\n  -- transform temp table to result table\n  for i,v in ipairs(temp)\
    \ do\n    result[i] = v\n  end\n  return result\nend", "    local result = {}\n\
    \    for i, v in ipairs(x) do\n        if not string.find(tostring(v), \"%d*[24680]%d*\"\
    ) then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local res = {}\n    for _, v in ipairs(x) do\n\
    \        local has_even = false\n        while v > 0 do\n            local digit\
    \ = v % 10\n            if digit % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n            v = math.floor(v / 10)\n\
    \        end\n        if not has_even then\n            table.insert(res, v)\n\
    \        end\n    end\n    table.sort(res)\n    return res\nend", "    local t\
    \ = {}\n    for _, v in ipairs(x) do\n        local is_unique = true\n       \
    \ for d in tostring(v):gmatch('%d') do\n            if is_even(tonumber(d)) then\n\
    \                is_unique = false\n                break\n            end\n \
    \       end\n        if is_unique then\n            table.insert(t, v)\n     \
    \   end\n    end\n    table.sort(t)\n    return t\nend", "  local function is_ok(n)\n\
    \    while n > 0 do\n      if n % 2 == 0 then return false end\n      n = math.floor(n\
    \ / 10)\n    end\n    return true\n  end\n  local result = {}\n  for i = 1, #x\
    \ do\n    if is_ok(x[i]) then result[#result + 1] = x[i] end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, num in ipairs(x) do\n    if tostring(num):match(\"\
    [24680]\") == nil then\n      table.insert(result, num)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "    -- write your code here\n    local result = {}\n\
    \    for i,v in ipairs(x) do\n        local n  = v\n        local unique = true\n\
    \        while n > 0 do\n            if n % 2 == 0 then\n                unique\
    \ = false\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if unique then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend", " \
    \   local s = {}\n    for _, n in ipairs(x) do\n        local unique = true\n\
    \        while n > 0 do\n            if n % 2 == 0 then\n                unique\
    \ = false\n                break\n            end\n            n = math.floor(n\
    \ / 10)\n        end\n        if unique then\n            table.insert(s, _)\n\
    \        end\n    end\n    return s\nend", "  local function even_digits(y)\n\
    \    local function has_even_digit(y)\n      y = tostring(y)\n      for i = 1,\
    \ #y do\n        if y:sub(i, i) % 2 == 0 then\n          return true\n       \
    \ end\n      end\n      return false\n    end\n    if not has_even_digit(y) then\n\
    \      return y\n    end\n  end\n  return table.sort(filter(even_digits, x))\n\
    end", "\tlocal odd_digits = {}\n\tfor k, v in pairs(x) do\n\t\tif string.match(tostring(v),\
    \ \"%d%d\") then\n\t\t\ttable.insert(odd_digits, v)\n\t\tend\n\tend\n\ttable.sort(odd_digits)\n\
    \treturn odd_digits\nend", "  local y = {}\n  for _, v in ipairs(x) do\n    local\
    \ even = false\n    for j in string.gmatch(tostring(v), \"[24680]\") do\n    \
    \  even = true\n      break\n    end\n    if not even then\n      table.insert(y,\
    \ v)\n    end\n  end\n  return y\nend", "  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    local has_even = false\n    while v > 0 do\n      local d = v % 10\n\
    \      if d % 2 == 0 then\n        has_even = true\n        break\n      end\n\
    \      v = (v - d) / 10\n    end\n    if not has_even then\n      table.insert(result,\
    \ v)\n    end\n  end\n  table.sort(result)\n  return result\nend", "    local\
    \ result = {}\n    for _, v in ipairs(x) do\n        local is_odd = true\n   \
    \     while v > 0 do\n            if v % 2 == 0 then\n                is_odd =\
    \ false\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if is_odd then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend", "\t\
    local r = {}\n\tfor _,n in ipairs(x) do\n\t\tlocal is_all_odd = true\n\t\twhile\
    \ n > 0 do\n\t\t\tlocal d = n % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\tis_all_odd\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tn = (n - d) / 10\n\t\tend\n\t\tif is_all_odd\
    \ then\n\t\t\ttable.insert(r, x[_])\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn\
    \ r\nend", "    local result = {}\n    for i = 1, #x do\n        local x_str =\
    \ tostring(x[i])\n        local has_even = false\n        for j = 1, #x_str do\n\
    \            if x_str:sub(j, j) % 2 == 0 then\n                has_even = true\n\
    \                break\n            end\n        end\n        if not has_even\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "\tlocal d, z, r = {}\n\tfor i, v in ipairs(x) do\n\t\
    \tlocal c = true\n\t\tfor j = 0, 9 do\n\t\t\tif tostring(v):find(tostring(j),\
    \ 1, true) and (j % 2 == 0) then\n\t\t\t\tc = false\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif c then\n\t\t\tz = true\n\t\t\ttable.insert(d, v)\n\t\tend\n\t\
    end\n\tif z then\n\t\ttable.sort(d)\n\t\treturn d\n\tend\n\treturn {}\nend", " \
    \   local y = {}\n    for _,v in ipairs(x) do\n        local is_unique = true\n\
    \        local s = tostring(v)\n        for i = 1, #s do\n            if tonumber(s:sub(i,i))\
    \ % 2 == 0 then\n                is_unique = false\n                break\n  \
    \          end\n        end\n        if is_unique then\n            table.insert(y,\
    \ v)\n        end\n    end\n    table.sort(y)\n    return y\nend", "    local\
    \ t = {}\n    for i, v in ipairs(x) do\n        local even = false\n        while\
    \ v > 0 do\n            if v % 2 == 0 then\n                even = true\n    \
    \            break\n            end\n            v = math.floor(v / 10)\n    \
    \    end\n        if not even then\n            table.insert(t, x[i])\n      \
    \  end\n    end\n    table.sort(t)\n    return t\nend", "  local unique = {}\n\
    \  for i = 1, #x do\n    if not string.find(tostring(x[i]), \"%d+[02468]\") then\n\
    \      table.insert(unique, x[i])\n    end\n  end\n  return unique\nend", "  \
    \  local result = {}\n    local function has_even_digit(i)\n        while i >\
    \ 0 do\n            local r = i % 10\n            if r % 2 == 0 then\n       \
    \         return true\n            end\n            i = (i - r) / 10\n       \
    \ end\n        return false\n    end\n    for _, v in ipairs(x) do\n        if\
    \ not has_even_digit(v) then\n            table.insert(result, v)\n        end\n\
    \    end\n    table.sort(result)\n    return result\nend", "   local res = {}\n\
    \   for i = 1, #x do\n      if tonumber(string.gsub(tostring(x[i]), \"[2468]\"\
    , \"\")) == x[i] then\n         res[#res + 1] = x[i]\n      end\n   end\n   table.sort(res)\n\
    \   return res\nend", "    --implement here\nend", "  local function is_odd(a)\n\
    \    local r = tostring(a)\n    for i = 1, #r do\n      if tonumber(r:sub(i, i))\
    \ % 2 == 0 then\n        return false\n      end\n    end\n    return true\n \
    \ end\n  local r = {}\n  for i = 1, #x do\n    if is_odd(x[i]) then\n      r[#r\
    \ + 1] = x[i]\n    end\n  end\n  table.sort(r)\n  return r\nend", "  -- Your code\
    \ here\nend", "    local y = {}\n    for i = 1, #x do\n        if not has_even_digit(x[i])\
    \ then \n            table.insert(y, x[i])\n        end\n    end\n    table.sort(y)\n\
    \    return y\nend", "    local new_list = {}\n    for i, v in ipairs(x) do\n\
    \        local count = 0\n        for i = 0, 9 do\n            local str = tostring(v)\n\
    \            if string.find(str, tostring(i)) then\n                count = count\
    \ + 1\n            end\n        end\n        if count == 1 then\n            table.insert(new_list,\
    \ v)\n        end\n    end\n    table.sort(new_list)\n    return new_list\nend",
  "  local result = {}\n  for i,v in ipairs(x) do\n    if not is_even_digit(v) then\n\
    \      table.insert(result, v)\n    end\n  end\n  table.sort(result)\n  return\
    \ result\nend", "    local res = {}\n    local i = 1\n    for _, num in ipairs(x)\
    \ do\n        local is_odd = true\n        while num > 0 do\n            if ((num\
    \ % 10) % 2) == 0 then\n                is_odd = false\n                break\n\
    \            end\n            num = math.floor(num / 10)\n        end\n      \
    \  if is_odd then\n            res[i] = _\n            i = i + 1\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend", "  local results = {}\n \
    \ for i = 1, #x do\n    local num = x[i]\n    local is_unique = true\n    while\
    \ num > 0 do\n      local digit = num % 10\n      if digit % 2 == 0 then\n   \
    \     is_unique = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if is_unique then\n      table.insert(results, x[i])\n \
    \   end\n  end\n  table.sort(results)\n  return results\nend", "    local res\
    \ = {}\n    for _, v in ipairs(x) do\n        if v < 10 or v % 2 == 1 then\n \
    \           res[#res + 1] = v\n        else\n            while v > 0 do\n    \
    \            if v % 2 == 0 then\n                    break\n                end\n\
    \                v = math.floor(v / 10)\n            end\n            if v ==\
    \ 0 then\n                res[#res + 1] = x[_]\n            end\n        end\n\
    \    end\n    table.sort(res)\n    return res\nend", "  -- YOUR CODE HERE\n  local\
    \ sorted_table = {}\n  for i,v in ipairs(x) do\n    if unique_digits_check(v)\
    \ then\n      sorted_table[#sorted_table+1] = v\n    end\n  end\n  return sorted_table\n\
    end", "    local res = {}\n    for i,n in ipairs(x) do\n        if not has_even_digit(n)\
    \ then\n            res[#res+1] = n\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local results = {}\n    for _, value in ipairs(x)\
    \ do\n        local has_even_digits = false\n        for char in tostring(value):gmatch('%d')\
    \ do\n            if tonumber(char) % 2 == 0 then\n                has_even_digits\
    \ = true\n                break\n            end\n        end\n        if not\
    \ has_even_digits then\n            table.insert(results, value)\n        end\n\
    \    end\n    table.sort(results)\n    return results\nend", "    local res =\
    \ {}\n    for _, v in ipairs(x) do\n        if is_digit_unique(v) then\n     \
    \       table.insert(res, v)\n        end\n    end\n    table.sort(res)\n    return\
    \ res\nend", "  local function iterator(x)\n    local digits = {string.byte(x,\
    \ 1, -1)}\n    for i = 1, #digits do\n      if digits[i] % 2 == 0 then\n     \
    \   return\n      end\n    end\n    return tonumber(x)\n  end\n  return {iterator(num)\
    \ for num in all(x)}\nend", "  return error(\"Implement me!\")\nend", "    local\
    \ digits = {}\n    for i = 1, #x do\n        local number = x[i]\n        local\
    \ flag = true\n        while (number > 0) do\n            local digit = number\
    \ % 10\n            if (digit % 2 == 0) then\n                flag = false\n \
    \               break\n            end\n            number = math.floor(number\
    \ / 10)\n        end\n        if (flag) then\n            table.insert(digits,\
    \ x[i])\n        end\n    end\n    table.sort(digits)\n    return digits\nend",
  "    return __unique_digits(x, {})\nend", "  local result = {}\n  for _, v in ipairs(x)\
    \ do\n    if _has_even_digit(v) then goto continue end\n    table.insert(result,\
    \ v)\n    ::continue::\n  end\n  table.sort(result)\n  return result\nend", "\t\
    local result = {}\n\tfor _,v in ipairs(x) do\n\t\tlocal flag = true\n\t\twhile\
    \ v > 0 do\n\t\t\tif v % 2 == 0 then\n\t\t\t\tflag = false\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(result,\
    \ _)\n\t\tend\n\tend\n\treturn result\nend", "    local r = {}\n    for i = 1,\
    \ #x do\n        local y = x[i]\n        local z = false\n        for j = 1, 9,\
    \ 2 do\n            if string.find(tostring(y), j) then\n                z = true\n\
    \                break\n            end\n        end\n        if not z then\n\
    \            table.insert(r, y)\n        end\n    end\n    table.sort(r)\n   \
    \ return r\nend", "    local t = {}\n    for i = 1, #x do\n        local even_digits\
    \ = false\n        for j = 1, #tostring(x[i]) do\n            if (tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0) then\n                even_digits = true\n                break\n\
    \            end\n        end\n        if not even_digits then\n            table.insert(t,\
    \ x[i])\n        end\n    end\n    table.sort(t)\n    return t\nend", "  local\
    \ t = {}\n  for _, v in ipairs(x) do\n    if v == 0 then\n      table.insert(t,\
    \ v)\n    else\n      local has_even_digit = false\n      while v > 0 do\n   \
    \     if (v % 10) % 2 == 0 then\n          has_even_digit = true\n          break\n\
    \        end\n        v = math.floor(v / 10)\n      end\n      if not has_even_digit\
    \ then\n        table.insert(t, v)\n      end\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend", "    local r = {}\n    for _,v in ipairs(x) do\n        local\
    \ even = false\n        for d in tostring(v):gmatch('%d') do\n            if tonumber(d)\
    \ % 2 == 0 then\n                even = true\n                break\n        \
    \    end\n        end\n        if not even then\n            table.insert(r, v)\n\
    \        end\n    end\n    table.sort(r)\n    return r\nend", "    return {}\n\
    end", "  -- your code here\nend", "    local res = {}\n    for i, v in ipairs(x)\
    \ do\n        local even = false\n        while v > 0 do\n            if (v %\
    \ 10) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n            v = math.floor(v / 10)\n        end\n        if not\
    \ even then\n            table.insert(res, x[i])\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    -- YOUR CODE HERE\n    return {}\nend", "  local res\
    \ = {}\n  local found = false\n  for _, v in ipairs(x) do\n    local t = tostring(v)\n\
    \    for j = 1, #t do\n      if tonumber(t:sub(j, j)) % 2 == 0 then\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(res,\
    \ v)\n    end\n    found = false\n  end\n  return res\nend", "  local res = {}\n\
    \  for _, v in ipairs(x) do\n    local unique = true\n    local vs = tostring(v)\n\
    \    for i = 1, #vs do\n      if band(vs:byte(i), 1) == 0 then\n        unique\
    \ = false\n        break\n      end\n    end\n    if unique then\n      res[#res\
    \ + 1] = v\n    end\n  end\n  return sort(res)\nend", "\tlocal function str_has_even_digit(x)\n\
    \t\t-- Auxiliary function\n\t\tlocal s = tostring(x)\n\t\tfor d in s:gmatch('%d')\
    \ do\n\t\t\tif (tonumber(d) % 2) == 0 then\n\t\t\t\treturn true\n\t\t\tend\n\t\
    \tend\n\t\treturn false\n\tend\n\tlocal res = {}\n\tfor _, v in ipairs(x) do\n\
    \t\tif not str_has_even_digit(v) then\n\t\t\ttable.insert(res, v)\n\t\tend\n\t\
    end\n\ttable.sort(res)\n\treturn res\nend", "   local result = {}\n   for i, n\
    \ in ipairs(x) do\n      local even_digit = false\n      for d in tostring(n):gmatch(\"\
    %d\") do\n         if tonumber(d) % 2 == 0 then\n            even_digit = true\n\
    \            break\n         end\n      end\n      if not even_digit then\n  \
    \       table.insert(result, n)\n      end\n   end\n   table.sort(result)\n  \
    \ return result\nend", "    local result = {}\n    local function evenDigit(n)\n\
    \        while n > 0 do\n            if n % 2 == 0 then\n                return\
    \ true\n            end\n            n = math.floor(n / 10)\n        end\n   \
    \     return false\n    end\n    for _, v in ipairs(x) do\n        if not evenDigit(v)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    -- TODO: Student code goes here\n    local uniqueDigits\
    \ = {}\n    for _, digit in ipairs(x) do\n        local isUnique = true\n    \
    \    for d in tostring(digit):gmatch(\"%d\") do\n            if (tonumber(d) %\
    \ 2 == 0) then\n                isUnique = false\n                break\n    \
    \        end\n        end\n        if (isUnique) then\n            table.insert(uniqueDigits,\
    \ digit)\n        end\n    end\n    table.sort(uniqueDigits)\n    return uniqueDigits\n\
    end", "    --[[\n        Implementation 1 (not most efficient):\n        1. Find\
    \ all unique digits of all numbers:\n            a. Iterate over each number in\
    \ table `x`\n            b. Iterate over each character in number\n          \
    \  c. Add each character to a set\n        2. Iterate over numbers in table `x`\n\
    \            a. Iterate over characters in each number\n            b. Check if\
    \ each character is in the set\n            c. If not all characters are in the\
    \ set, discard number\n        3. Sort and return the set\n    ]]\n    local digits\
    \ = {}\n    for _,v in ipairs(x) do\n        for c in tostring(v):gmatch(\".\"\
    ) do\n            digits[c] = true\n        end\n    end\n    local valid = {}\n\
    \    for _,v in ipairs(x) do\n        local validNum = true\n        for c in\
    \ tostring(v):gmatch(\".\") do\n            if not digits[c] then\n          \
    \      validNum = false\n                break\n            end\n        end\n\
    \        if validNum then\n            table.insert(valid, v)\n        end\n \
    \   end\n    table.sort(valid)\n    return valid\nend", "    local unique = {}\n\
    \    for _, v in ipairs(x) do\n        if not v:match('[02468]') then\n      \
    \      table.insert(unique, v)\n        end\n    end\n    table.sort(unique)\n\
    \    return unique\nend", "\tlocal res = {}\n\tfor i, v in ipairs(x) do\n\t\t\
    local str = tostring(v)\n\t\tlocal is_unique = true\n\t\tfor j = 1, str:len()\
    \ do\n\t\t\tif tonumber(str:sub(j, j)) % 2 == 0 then\n\t\t\t\tis_unique = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_unique then\n\t\t\ttable.insert(res,\
    \ v)\n\t\tend\n\tend\n\treturn res\nend", "  local res = {}\n  for _, x in ipairs(x)\
    \ do\n    local flag = true\n    while x > 0 do\n      if (x % 10) % 2 == 0 then\n\
    \        flag = false\n        break\n      end\n      x = math.floor(x / 10)\n\
    \    end\n    if flag then\n      table.insert(res, x)\n    end\n  end\n  return\
    \ res\nend", "  local res = {}\n  for _, num in ipairs(x) do\n    local flg =\
    \ false\n    for c in string.gmatch(tostring(num), \"%d\") do\n      if (tonumber(c)\
    \ % 2 == 0) then\n        flg = true\n        break\n      end\n    end\n    if\
    \ (not flg) then\n      table.insert(res, num)\n    end\n  end\n  return table.sort(res)\n\
    end", "    local function find_even_digit(n)\n        for char in tostring(n):gmatch\"\
    .\" do\n            if tonumber(char) % 2 == 0 then\n                return true\n\
    \            end\n        end\n        return false\n    end\n    local res =\
    \ {}\n    for _, num in ipairs(x) do\n        if not find_even_digit(num) then\n\
    \            table.insert(res, num)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local res = {}\n    for k, v in pairs(x) do\n    \
    \    if not has_even_digit(v) then\n            table.insert(res, v)\n       \
    \ end\n    end\n    table.sort(res)\n    return res\nend", "  local result = {}\n\
    \  for _,value in ipairs(x) do\n    if not string.find(tostring(value),'%d%d')\
    \ then\n      table.insert(result,value)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "\tif type(x) ~= \"table\" then return {} end\n\t\n\t\
    local has_even_digit = {}\n\tlocal res = {}\n\tfor i = 1, #x do\n\t\tif type(x[i])\
    \ ~= \"number\" then break end\n\t\t\n\t\tlocal n = x[i]\n\t\tlocal digit = {}\n\
    \t\twhile n > 0 do\n\t\t\ttable.insert(digit, n % 10)\n\t\t\tn = math.floor(n\
    \ / 10)\n\t\tend\n\t\t\n\t\tlocal found = false\n\t\tfor i = 1, #digit do\n\t\t\
    \tif digit[i] % 2 == 0 then\n\t\t\t\tfound = true\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\t\t\n\t\tif not found then\n\t\t\tres[#res + 1] = x[i]\n\t\tend\n\tend\n\
    \t\n\ttable.sort(res)\n\treturn res\nend", "\t\nend", "\tlocal y = {}\n\tfor i,v\
    \ in ipairs(x) do\n\t\tif tonumber(tostring(v):match(\"[02468]\") or 0) == 0 then\n\
    \t\t\ttable.insert(y, v)\n\t\tend\n\tend\n\treturn y\nend", "  local output =\
    \ {}\n  for i = 1, #x do\n    if string.find(tostring(x[i]), '[24680]') == nil\
    \ then\n      table.insert(output, x[i])\n    end\n  end\n  table.sort(output)\n\
    \  return output\nend", "  local ret = {}\n  for k, v in pairs(x) do\n    if even_only(v)\
    \ then\n      table.insert(ret, v)\n    end\n  end\n  table.sort(ret)\n  return\
    \ ret\nend", "\tlocal result = {}\n\tfor i,v in ipairs(x) do\n\t\tif \tv ~= 0\
    \ and \n\t\t\tv/1 == v/1 and \n\t\t\tmath.floor(v/10) == math.floor(v/10) and\
    \ \n\t\t\tmath.floor(v/100) == math.floor(v/100) and \n\t\t\tmath.floor(v/1000)\
    \ == math.floor(v/1000) and \n\t\t\tmath.floor(v/10000) == math.floor(v/10000)\
    \ and \n\t\t\tmath.floor(v/100000) == math.floor(v/100000) and \n\t\t\tmath.floor(v/1000000)\
    \ == math.floor(v/1000000) and \n\t\t\tmath.floor(v/10000000) == math.floor(v/10000000)\
    \ and \n\t\t\tmath.floor(v/100000000) == math.floor(v/100000000) and \n\t\t\t\
    math.floor(v/1000000000) == math.floor(v/1000000000) and \n\t\t\tmath.floor(v/10000000000)\
    \ == math.floor(v/10000000000) and \n\t\t\tmath.floor(v/100000000000) == math.floor(v/100000000000)\
    \ and \n\t\t\tmath.floor(v/1000000000000) == math.floor(v/1000000000000) and \n\
    \t\t\tmath.floor(v/10000000000000) == math.floor(v/10000000000000) and \n\t\t\t\
    math.floor(v/100000000000000) == math.floor(v/100000000000000) and \n\t\t\tmath.floor(v/1000000000000000)\
    \ == math.floor(v/1000000000000000) and \n\t\t\tmath.floor(v/10000000000000000)\
    \ == math.floor(v/10000000000000000) and \n\t\t\tmath.floor(v/100000000000000000)\
    \ == math.floor(v/100000000000000000) and \n\t\t\tmath.floor(v/1000000000000000000)\
    \ == math.floor(v/1000000000000000000) then\n\t\t\tresult[#", "  return {}\nend",
  "  local tab = {}\n  for i,v in ipairs(x) do\n    local str = tostring(v)\n    local\
    \ unique = true\n    for digit in str:gmatch(\"%d\") do\n      if tonumber(digit)\
    \ % 2 == 0 then\n        unique = false\n        break\n      end\n    end\n \
    \   if unique then\n      table.insert(tab, v)\n    end\n  end\n  table.sort(tab)\n\
    \  return tab\nend", "    local res = {}\n    for k, v in pairs(x) do\n      \
    \  local n = tostring(v)\n        local is_odd = true\n        for i = 1, #n do\n\
    \            if tonumber(n:sub(i, i)) % 2 == 0 then\n                is_odd =\
    \ false\n                break\n            end\n        end\n        if is_odd\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "\tlocal a = {}\n\tfor k,v in pairs(x) do\n\t\tif not v:find(\"\
    [02468]\") then\n\t\t\ttable.insert(a,v)\n\t\tend\n\tend\n\ttable.sort(a)\n\t\
    return a\nend", "  local result = {}\n  for i = 1, #x do\n    local is_even =\
    \ false\n    local s = tostring(x[i])\n    for j = 1, #s do\n      if tonumber(s:sub(j,\
    \ j)) % 2 == 0 then\n        is_even = true\n        break\n      end\n    end\n\
    \    if not is_even then\n      table.insert(result, x[i])\n    end\n  end\n \
    \ table.sort(result)\n  return result\nend", "  -- TODO: implement this function.\n\
    \  local result={}\n  for _,item in ipairs(x) do\n    local flag=true\n    for\
    \ d in (tostring(item)):gmatch('%d') do\n      if d%2==0 then\n        flag=false\n\
    \        break\n      end\n    end\n    if flag then table.insert(result,item)\
    \ end\n  end\n  table.sort(result)\n  return result\nend", "  local res = {}\n\
    \  for i = 1, #x do\n    local n = x[i]\n    if not has_even_digit(n) then\n \
    \     table.insert(res, n)\n    end\n  end\n  table.sort(res)\n  return res\n\
    end", "    local res = {}\n    for k, v in pairs(x) do\n        local t = tostring(v)\n\
    \        local flag = true\n        for i = 1, #t do\n            if tonumber(t:sub(i,\
    \ i)) % 2 == 0 then\n                flag = false\n                break\n   \
    \         end\n        end\n        if flag then\n            table.insert(res,\
    \ v)\n        end\n    end\n    table.sort(res)\n    return res\nend", "\tlocal\
    \ sorted = {}\n\tfor _, i in ipairs(x) do\n\t\tlocal has_even = false\n\t\tfor\
    \ d in string.gmatch(tostring(i), '%d') do\n\t\t\tif tonumber(d) % 2 == 0 then\n\
    \t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not has_even\
    \ then\n\t\t\ttable.insert(sorted, i)\n\t\tend\n\tend\n\ttable.sort(sorted)\n\t\
    return sorted\nend", "    local function is_unique(i)\n        while i > 0 do\n\
    \            if i % 2 == 0 then\n                return false\n            end\n\
    \            i = math.floor(i / 10)\n        end\n        return true\n    end\n\
    \    local res = {}\n    for _, i in ipairs(x) do\n        if is_unique(i) then\n\
    \            table.insert(res, i)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "\tlocal result = {}\n\tfor _, v in ipairs(x) do\n\t\t\
    local is_even = false\n\t\tfor _, c in utf8.codes(tostring(v)) do\n\t\t\tif (c\
    \ % 2 == 0) then\n\t\t\t\tis_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    \tif (not is_even) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\
    \treturn result\nend", "  local result = {}\n  for i,v in ipairs(x) do\n    local\
    \ even = false\n    while v > 0 do\n      local d = v % 10\n      if d % 2 ==\
    \ 0 then\n        even = true\n        break\n      end\n      v = math.floor(v\
    \ / 10)\n    end\n    if not even then\n      table.insert(result, x[i])\n   \
    \ end\n  end\n  table.sort(result)\n  return result\nend", "\tlocal t = {}\n\t\
    for _, v in ipairs(x) do\n\t\tif #tostring(v):gsub(\"[02468]\", \"\") == #tostring(v)\
    \ then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\n\
    end", "\tlocal result = {}\n\tfor i = 1, #x do\n\t\tlocal has_odd = true\n\t\t\
    local number = x[i]\n\t\twhile number > 0 do\n\t\t\tlocal digit = number % 10\n\
    \t\t\tif digit % 2 == 0 then\n\t\t\t\thas_odd = false\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\t\tnumber = math.floor(number / 10)\n\t\tend\n\t\tif has_odd then\n\t\t\ttable.insert(result,\
    \ x[i])\n\t\tend\n\tend\n\ttable.sort(result)\n\treturn result\nend", "  local\
    \ result = {}\n  local n = 0\n  for i = 1, #x do\n    if has_unique_digits(x[i])\
    \ then\n      n = n + 1\n      result[n] = x[i]\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "\tlocal num = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ k = 0\n\t\tlocal l = math.floor(math.log10(v) + 1)\n\t\twhile l > 0 do\n\t\t\
    \tlocal i = v % 10\n\t\t\tif i % 2 == 0 then\n\t\t\t\tk = k + 1\n\t\t\tend\n\t\
    \t\tv = math.floor(v / 10)\n\t\t\tl = l - 1\n\t\tend\n\t\tif k == 0 then\n\t\t\
    \ttable.insert(num, _)\n\t\tend\n\tend\n\tlocal y = {}\n\tfor _, v in ipairs(num)\
    \ do\n\t\ttable.insert(y, x[v])\n\tend\n\ttable.sort(y)\n\treturn y\nend", "\t\
    local r = {}\n\tlocal i, j = 1, 1\n\twhile i <= #x do\n\t\tif math.fmod(x[i],\
    \ 2) == 1 then\n\t\t\tr[j] = x[i]\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\ttable.sort(r)\n\treturn r\nend", "  local res = {}\n  for _, v in ipairs(x)\
    \ do\n    -- Check if there is an even digit in the number v.\n    if type(v)\
    \ == \"number\" and not v:match(\"[02468]\") then\n      table.insert(res, v)\n\
    \    end\n  end\n  table.sort(res)\n  return res\nend", "\tlocal result = {}\n\
    \tfor i,v in ipairs(x) do\n\t\tlocal is_even_digit = false\n\t\tfor i = 1, string.len(tostring(v))\
    \ do\n\t\t\tif tonumber(string.sub(tostring(v), i, i)) % 2 == 0 then\n\t\t\t\t\
    is_even_digit = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not is_even_digit\
    \ then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\ttable.sort(result)\n\t\
    return result\nend", "  local to_sort = {}\n  for _, v in ipairs(x) do\n    local\
    \ is_odd = true\n    while v > 0 do\n      if (v % 10) % 2 == 0 then\n       \
    \ is_odd = false\n        break\n      end\n      v = math.floor(v / 10)\n   \
    \ end\n    if is_odd then\n      table.insert(to_sort, v)\n    end\n  end\n  table.sort(to_sort)\n\
    \  return to_sort\nend", "  local res = {}\n  for _, i in ipairs(x) do\n    local\
    \ is_unique = true\n    while i > 0 do\n      local digit = i % 10\n      if digit\
    \ % 2 == 0 then\n        is_unique = false\n        break\n      end\n      i\
    \ = (i - digit) / 10\n    end\n    if is_unique then\n      table.insert(res,\
    \ x[_])\n    end\n  end\n  table.sort(res)\n  return res\nend", "  local function\
    \ helper(y)\n    if y == 0 then\n      return 0\n    else\n      local a = y %\
    \ 10\n      if a % 2 == 0 then\n        return 1\n      else\n        return helper(y\
    \ // 10)\n      end\n    end\n  end\n  local result = {}\n  for k, v in ipairs(x)\
    \ do\n    if helper(v) == 0 then\n      table.insert(result, v)\n    end\n  end\n\
    \  table.sort(result)\n  return result\nend", "\tlocal t, v = {}, 1\n\tfor i =\
    \ 1, #x do\n\t\tfor d in string.gmatch(tostring(x[i]), \"%d\") do\n\t\t\tv = tonumber(d)\n\
    \t\t\tif v % 2 == 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif v % 2 ~= 0\
    \ then\n\t\t\ttable.insert(t, x[i])\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn\
    \ t\nend", "  local t = {}\n  for i = 1, #x do\n    local a = tostring(x[i])\n\
    \    local flag = false\n    for j = 1, #a do\n      if string.sub(a, j, j) ==\
    \ '2' then\n        flag = true\n        break\n      end\n    end\n    if not\
    \ flag then\n      table.insert(t, x[i])\n    end\n  end\n  table.sort(t)\n  return\
    \ t\nend", "\tlocal result = {}\n\tlocal temp = {}\n\tfor k,v in pairs(x) do\n\
    \t\ttable.insert(temp, v)\n\tend\n\tfor _,v in pairs(temp) do\n\t\tif tostring(v):match(\"\
    %d%d\") then\n\t\t\tif tostring(v):match(\"%d%d\"):match(\"%d\") then\n\t\t\t\t\
    if tostring(v):match(\"%d%d\"):match(\"%d\") % 2 == 0 then\n\t\t\t\t\tbreak\n\t\
    \t\t\telse\n\t\t\t\t\ttable.insert(result, v)\n\t\t\t\tend\n\t\t\telse\n\t\t\t\
    \ttable.insert(result, v)\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(result, v)\n\
    \t\tend\n\tend\n\ttable.sort(result)\n\treturn result\nend", "\tlocal r = {}\n\
    \tfor i, v in ipairs(x) do\n\t\tif not string.find(tostring(v), '%d?[02468]')\
    \ then\n\t\t\ttable.insert(r, v)\n\t\tend\n\tend\n\ttable.sort(r)\n\treturn r\n\
    end", "    local res = {}\n    for i = 1, #x do\n        if not has_even_digit(x[i])\
    \ then\n            res[#res + 1] = x[i]\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "    local function even(n)\n        while n > 0 do\n \
    \           local d = n % 10\n            if d % 2 == 0 then\n               \
    \ return false\n            end\n            n = math.floor(n / 10)\n        end\n\
    \        return true\n    end\n    local t = {}\n    for _, i in ipairs(x) do\n\
    \        if even(i) then\n            table.insert(t, i)\n        end\n    end\n\
    \    table.sort(t)\n    return t\nend", "  local digits={}\n  local str=\"\"\n\
    \  local flag=0\n  for i=1,#x do\n    str=tostring(x[i])\n    flag=0\n    for\
    \ j=1,#str do\n      if tonumber(str:sub(j,j))%2==0 then\n        flag=1\n   \
    \     break\n      end\n    end\n    if flag==0 then\n      table.insert(digits,x[i])\n\
    \    end\n  end\n  table.sort(digits)\n  return digits\nend", "  local t = {}\n\
    \  for _, v in ipairs(x) do\n    if v < 10 or (v < 100 and v % 2 ~= 0) or (v <\
    \ 1000 and v % 2 ~= 0 and math.floor(v / 10) % 2 ~= 0) or (v < 10000 and v % 2\
    \ ~= 0 and math.floor(v / 10) % 2 ~= 0 and math.floor(v / 100) % 2 ~= 0) then\n\
    \      table.insert(t, v)\n    end\n  end\n  return t\nend", "\tlocal pos = {}\n\
    \tfor i,v in ipairs(x) do\n\t\tif unique(tostring(v)) then pos[#pos+1] = v end\n\
    \tend\n\ttable.sort(pos)\n\treturn pos\nend", "    -- YOUR CODE HERE\n    return\
    \ {}\nend", "    local result = {}\n    for i = 1, #x do\n        local str =\
    \ tostring(x[i])\n        local is_odd = true\n        for j = 1, #str do\n  \
    \          if tonumber(str:sub(j, j)) % 2 == 0 then\n                is_odd =\
    \ false\n                break\n            end\n        end\n        if is_odd\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    x = copy_array(x)\n    local last_index = x.length\n\
    \    for i=1,x.length do\n        if has_even_digit(x[i]) then\n            x[i]\
    \ = x[last_index]\n            last_index = last_index - 1\n        end\n    end\n\
    \    return sort_asc(x, 1, last_index)\nend", "\tlocal res = {}\n\tfor i = 1,\
    \ #x do\n\t\tlocal flag = true\n\t\tlocal val = tostring(x[i])\n\t\tfor j = 1,\
    \ #val do\n\t\t\tif tonumber(val:sub(j, j)) % 2 == 0 then\n\t\t\t\tflag = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(res, x[i])\n\
    \t\tend\n\tend\n\ttable.sort(res)\n\treturn res\nend", "  return {}\nend", " \
    \   local res = {}\n    for _, v in ipairs(x) do\n        local has_even_digit\
    \ = false\n        for d in tostring(v):gmatch(\"%d\") do\n            d = tonumber(d)\n\
    \            if d % 2 == 0 then\n                has_even_digit = true\n     \
    \           break\n            end\n        end\n        if not has_even_digit\
    \ then\n            table.insert(res, v)\n        end\n    end\n    table.sort(res)\n\
    \    return res\nend", "  \n  -- [[ Fill in the code here ]]\n  local ret = {}\n\
    \  local j = 1", "    local res = {}\n    for i = 1, #x do\n        if x[i] %\
    \ 2 ~= 0 then\n            table.insert(res, x[i])\n        end\n    end\n   \
    \ table.sort(res)\n    return res\nend", "   local result = {}\n   for i = 1,\
    \ #x do\n      local flag = true\n      local num = x[i]\n      while (num > 0)\
    \ do\n         local digit = num % 10\n         if (digit % 2 == 0) then\n   \
    \         flag = false\n            break\n         end\n         num = math.floor(num\
    \ / 10)\n      end\n      if (flag) then\n         table.insert(result, x[i])\n\
    \      end\n   end\n   table.sort(result)\n   return result\nend", "    -- TODO:\
    \ Implement it.\nend", "    local result = {}\n    local i, j\n    local cnt =\
    \ 0\n    local n = #x\n    local contains_even_digit\n    for i = 1, n do\n  \
    \      contains_even_digit = false\n        for j = 1, string.len(tostring(x[i]))\
    \ do\n            if is_even(tonumber(string.sub(tostring(x[i]), j, j))) then\n\
    \                contains_even_digit = true\n                break\n         \
    \   end\n        end\n        if not contains_even_digit then\n            result[cnt+1]\
    \ = x[i]\n            cnt = cnt + 1\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  -- Implement your solution here\nend", "    local\
    \ result = {}\n    for _, value in ipairs(x) do\n        local unique = true\n\
    \        local num = value\n        while num > 0 do\n            if num % 2 ==\
    \ 0 then\n                unique = false\n                break\n            end\n\
    \            num = math.floor(num / 10)\n        end\n        if unique then\n\
    \            table.insert(result, value)\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "    local temp = {}\n    for i = 1, #x do\n       \
    \ local num = x[i]\n        local isAllDigitsOdd = true\n        while num > 0\
    \ do\n            local digit = num % 10\n            if (digit % 2 == 0) then\n\
    \                isAllDigitsOdd = false\n                break\n            end\n\
    \            num = math.floor(num / 10)\n        end\n        if isAllDigitsOdd\
    \ then\n            table.insert(temp, x[i])\n        end\n    end\n    table.sort(temp)\n\
    \    return temp\nend", "    return {}\nend", "    local x_copy = {}\n    local\
    \ t = {}\n    local j = 1\n    local i = 1\n    for key, value in pairs(x) do\n\
    \        x_copy[key] = value\n    end\n    table.sort(x_copy)\n    for key, value\
    \ in pairs(x_copy) do\n        if value < 10 then\n            t[i] = value\n\
    \            i = i + 1\n        else\n            local is_unique = true\n   \
    \         for v in tostring(value):gmatch(\"%d\") do\n                if tonumber(v)\
    \ % 2 == 0 then\n                    is_unique = false\n                    break\n\
    \                end\n            end\n            if is_unique then\n       \
    \         t[i] = value\n                i = i + 1\n            end\n        end\n\
    \    end\n    return t\nend", "    local result = {}\n    for _, num in ipairs(x)\
    \ do\n        local numstr = tostring(num)\n        if not string.find(numstr,\
    \ \"[24680]\") then\n            table.insert(result, num)\n        end\n    end\n\
    \    table.sort(result)\n    return result\nend", "    local res = {}\n    for\
    \ i = 1, #x do\n        if x[i] % 2 ~= 0 then \n            res[#res + 1] = x[i]\n\
    \        end\n    end\n    return res\nend", "\tprint(\"unique_digits\")\n\tlocal\
    \ t = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even = false\n\t\tfor _, digit\
    \ in ipairs(to_digits(v)) do\n\t\t\tif digit % 2 == 0 then\n\t\t\t\thas_even =\
    \ true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not has_even then\n\t\t\ttable.insert(t,\
    \ v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\nend", "    -- x is a table,\
    \ each element of which is an integer\n    -- write your code here\n    result\
    \ = {}\n    for i = 1, #x do\n        local in_str = tostring(x[i])\n        local\
    \ even = false\n        for j = 1, #in_str do\n            if tonumber(in_str:sub(j,\
    \ j)) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n        end\n        if not even then\n            table.insert(result,\
    \ x[i])\n        end\n    end\n    return result\nend", "    local digits = {}\n\
    \    for _,v in ipairs(x) do\n        local even = false\n        while v > 0\
    \ do\n            local d = v % 10\n            if d % 2 == 0 then\n         \
    \       even = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not even then\n            table.insert(digits,\
    \ v)\n        end\n    end\n    return digits\nend", "\t-- Get the digits\n\t\
    x = digits(x)\n\t-- Filter even numbers\n\tx = filter(x, function(v)\n\t\treturn\
    \ v % 2 ~= 0\n\tend)\n\t-- Sort the table\n\tx = sort(x)\n\t-- Return it\n\treturn\
    \ x\nend", "\tlocal function unique(x)\n\t\tlocal a = {}\n\t\tlocal function dig(y)\n\
    \t\t\twhile y > 0 do\n\t\t\t\tlocal d = y % 10\n\t\t\t\tif d % 2 == 0 then\n\t\
    \t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\ty = (y - d) / 10\n\t\t\tend\n\t\t\t\
    return true\n\t\tend\n\t\tfor i, v in ipairs(x) do\n\t\t\tif unique(v) then\n\t\
    \t\t\ttable.insert(a, v)\n\t\t\tend\n\t\tend\n\t\treturn a\n\tend\n\treturn unique(x)\n\
    end", "\t-- implement me!\nend", "  local result = {}\n  for i = 1, #x do\n  \
    \  local xi = tostring(x[i])\n    local has_even = false\n    for j = 1, #xi do\n\
    \      if tonumber(xi:sub(j, j)) % 2 == 0 then\n        has_even = true\n    \
    \    break\n      end\n    end\n    if not has_even then\n      table.insert(result,\
    \ x[i])\n    end\n  end\n  table.sort(result)\n  return result\nend", "  local\
    \ results = {}\n  for _, num in ipairs(x) do\n    if num % 2 ~= 0 then\n     \
    \ table.insert(results, num)\n    end\n  end\n  table.sort(results)\n  return\
    \ results\nend", "    local t = {}\n    for i, v in ipairs(x) do\n        local\
    \ b = true\n        while v > 0 do\n            if v % 2 == 0 then\n         \
    \       b = false\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if b then\n            table.insert(t, x[i])\n \
    \       end\n    end\n    table.sort(t)\n    return t\nend", "  local list = {}\n\
    \  for key, value in pairs(x) do\n    local is_unique = true\n    while value\
    \ > 0 do\n      local digit = value % 10\n      if digit % 2 == 0 then\n     \
    \   is_unique = false\n        break\n      end\n      value = math.floor(value\
    \ / 10)\n    end\n    if is_unique then\n      table.insert(list, key, value)\n\
    \    end\n  end\n  return list\nend", "\tlocal res = {}\n\tlocal x = x or {}\n\
    \tfor i = 1, #x do\n\t\tif x[i] > 9 then\n\t\t\tif math.floor(x[i] % 10) % 2 ~=\
    \ 0 and math.floor(x[i] / 10) % 2 ~= 0 then\n\t\t\t\ttable.insert(res, x[i])\n\
    \t\t\tend\n\t\telse\n\t\t\tif x[i] % 2 ~= 0 then\n\t\t\t\ttable.insert(res, x[i])\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "   local result = {}\n   local\
    \ pass = true\n   for _, value in ipairs(x) do\n      if value < 10 then\n   \
    \      table.insert(result, value)\n      else\n         for digit in tostring(value):gmatch(\"\
    %d\") do\n            if tonumber(digit) % 2 == 0 then\n               pass =\
    \ false\n               break\n            end\n         end\n         if pass\
    \ then\n            table.insert(result, value)\n         end\n         pass =\
    \ true\n      end\n   end\n   table.sort(result)\n   return result\nend", "\t\
    local unique_number = {}\n\tfor i,n in ipairs(x) do\n\t\tif tonumber(n) and not\
    \ n:match(\"[24680]\") then\n\t\t\ttable.insert(unique_number, n)\n\t\tend\n\t\
    end\n\ttable.sort(unique_number)\n\treturn unique_number\nend", "  local sorted\
    \ = {}\n  for _, v in ipairs(x) do\n    local toString = tostring(v)\n    local\
    \ evenFlag = true\n    for i = 1, #toString do\n      if tonumber(toString:sub(i,\
    \ i)) % 2 == 0 then\n        evenFlag = false\n        break\n      end\n    end\n\
    \    if evenFlag then\n      table.insert(sorted, v)\n    end\n  end\n  table.sort(sorted)\n\
    \  return sorted\nend", "\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal\
    \ n = true\n\t\twhile v > 0 do\n\t\t\tif (v % 10) % 2 == 0 then\n\t\t\t\tn = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\tv = math.floor(v / 10)\n\t\tend\n\t\tif n then\n\
    \t\t\ttable.insert(t, x[_])\n\t\tend\n\tend\n\treturn t\nend", "  -- YOUR CODE\
    \ HERE\nend", "\tlocal tbl = {}\n\tfor _,y in ipairs(x) do\n\t\tif y ~= 0 and\
    \ (y % 2) ~= 0 then\n\t\t\ttbl[#tbl+1] = y\n\t\tend\n\tend\n\ttable.sort(tbl)\n\
    \treturn tbl\nend", "    local new_x = {}\n    for _, v in ipairs(x) do\n    \
    \    local has_even = false\n        for d in tostring(v):gmatch('%d') do\n  \
    \          if d % 2 == 0 then\n                has_even = true\n             \
    \   break\n            end\n        end\n        if not has_even then\n      \
    \      table.insert(new_x, v)\n        end\n    end\n    table.sort(new_x)\n \
    \   return new_x\nend", "  local result = {}\n  for _,v in ipairs(x) do\n    if\
    \ tostring(v):find(\"[24680]\") == nil then\n      table.insert(result, v)\n \
    \   end\n  end\n  return result\nend", "  local set = {}\n  for i, v in ipairs(x)\
    \ do\n    local even_digit = 0\n    for digit in string.gmatch(tostring(v), \"\
    [02468]\") do\n      even_digit = even_digit + 1\n    end\n    if even_digit ==\
    \ 0 then\n      table.insert(set, v)\n    end\n  end\n  table.sort(set)\n  return\
    \ set\nend", "\tlocal function check_no_even(num)\n\t\twhile num > 0 do\n\t\t\t\
    if num % 2 == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tnum = num // 10\n\
    \t\tend\n\t\treturn true\n\tend\n\tlocal function compare(a, b)\n\t\treturn a\
    \ < b\n\tend\n\tlocal result = {}\n\tfor i = 1, #x do\n\t\tif check_no_even(x[i])\
    \ then\n\t\t\ttable.insert(result, x[i])\n\t\tend\n\tend\n\ttable.sort(result,\
    \ compare)\n\treturn result\nend", "    local ret = {}\n    for _,v in ipairs(x)\
    \ do\n        local s = string.format(\"%d\", v)\n        local ok = true\n  \
    \      for c in s:gmatch(\"%d\") do\n            if tonumber(c) % 2 == 0 then\n\
    \                ok = false\n                break\n            end\n        end\n\
    \        if ok then\n            table.insert(ret, v)\n        end\n    end\n\
    \    return ret\nend", "    local tab = {}\n    for k, v in pairs(x) do\n    \
    \    local flag = true\n        while v ~= 0 do\n            local d = v % 10\n\
    \            if d % 2 == 0 then\n                flag = false\n              \
    \  break\n            end\n            v = (v - d) / 10\n        end\n       \
    \ if flag then\n            table.insert(tab, k)\n        end\n    end\n    table.sort(tab)\n\
    \    local ret = {}\n    for k, v in pairs(tab) do\n        table.insert(ret,\
    \ x[v])\n    end\n    return ret\nend", "  -- Write your code here\nend", "  local\
    \ ans = {}\n  for _,i in ipairs(x) do\n    if not has_even_digit(i) then\n   \
    \   table.insert(ans, i)\n    end\n  end\n  table.sort(ans)\n  return ans\nend",
  "    local even_digits = {0, 2, 4, 6, 8}\n    local result = {}\n    local is_unique\
    \ = true\n    for i = 1, #x do\n        local number = x[i]\n        is_unique\
    \ = true\n        while number > 0 do\n            local modulo = number % 10\n\
    \            for j = 1, #even_digits do\n                if modulo == even_digits[j]\
    \ then\n                    is_unique = false\n                    break\n   \
    \             end\n            end\n            number = math.floor(number / 10)\n\
    \        end\n        if is_unique then\n            table.insert(result, x[i])\n\
    \        end\n    end\n    table.sort(result)\n    return result\nend", "    local\
    \ function has_even_digit(n)\n        local function has_even_digit(n)\n     \
    \       local d = n % 10\n            if d == 0 or d == 2 or d == 4 or d == 6\
    \ or d == 8 then\n                return true\n            else\n            \
    \    return false\n            end\n        end\n        while n > 0 do\n    \
    \        if has_even_digit(n) then\n                return true\n            end\n\
    \            n = n // 10\n        end\n        return false\n    end\n    local\
    \ ans = {}\n    for i = 1, #x do\n        if not has_even_digit(x[i]) then\n \
    \           ans[#ans + 1] = x[i]\n        end\n    end\n    return ans\nend",
  "\tlocal res = {}\n\tfor i = 1, #x do\n\t\tlocal tmp = {}\n\t\twhile x[i] > 0 do\n\
    \t\t\ttmp[#tmp + 1] = x[i] % 10\n\t\t\tx[i] = math.floor(x[i] / 10)\n\t\tend\n\
    \t\tfor j = 1, #tmp do\n\t\t\tif tmp[j] % 2 == 0 then\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\t\tif j == #tmp then\n\t\t\t\tres[#res + 1] = table.concat(tmp):reverse()\n\
    \t\t\tend\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn res\nend", "    local ans\
    \ = {}\n    for _, v in ipairs(x) do\n        local has_even = false\n       \
    \ while v > 0 do\n            if (v % 10) % 2 == 0 then\n                has_even\
    \ = true\n                break\n            end\n            v = math.floor(v\
    \ / 10)\n        end\n        if not has_even then\n            table.insert(ans,\
    \ _)\n        end\n    end\n    return ans\nend", "    local sorted_table = {}\n\
    \    for i,v in ipairs(x) do\n        local s = tostring(v)\n        local even_digits\
    \ = false\n        for c in s:gmatch(\".\") do\n            if tonumber(c) % 2\
    \ == 0 then\n                even_digits = true\n                break\n     \
    \       end\n        end\n        if not even_digits then\n            table.insert(sorted_table,\
    \ v)\n        end\n    end\n    return sorted_table\nend", "    -- your code here\n\
    end", "  local res = {}\n  for i = 1, #x do\n    if (x[i] - math.floor(x[i] /\
    \ 10) * 10) % 2 == 1 then\n      table.insert(res, x[i])\n    end\n  end\n  if\
    \ #res == 0 then\n    return {}\n  end\n  table.sort(res)\n  return res\nend",
  "    local result = {}\n    for i, v in ipairs(x) do\n        local str = tostring(v)\n\
    \        local even_flag = false\n        for i = 1, #str do\n            if (str:sub(i,\
    \ i) % 2 == 0) then\n                even_flag = true\n                break\n\
    \            end\n        end\n        if (not even_flag) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    table.sort(result)\n    return result\nend", " \
    \   -- Write your code here\n    local result = {}\n    for _,v in ipairs(x) do\n\
    \        if v%2 == 1 then\n            local flag = true\n            while v\
    \ ~= 0 do\n                if v%10%2 == 0 then\n                    flag = false\n\
    \                    break\n                end\n                v = math.floor(v/10)\n\
    \            end\n            if flag then table.insert(result, v) end\n     \
    \   end\n    end\n    table.sort(result)\n    return result\nend", "\tlocal res\
    \ = {}\n\tfor _, n in ipairs(x) do\n\t\tlocal has_even = false\n\t\twhile n >\
    \ 0 do\n\t\t\tlocal d = n % 10\n\t\t\tif d % 2 == 0 then\n\t\t\t\thas_even = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\tn = math.floor(n / 10)\n\t\tend\n\t\tif not has_even\
    \ then\n\t\t\ttable.insert(res, x[_])\n\t\tend\n\tend\n\ttable.sort(res)\n\treturn\
    \ res\nend", "  local unique = {}\n  for _, n in ipairs(x) do\n    -- convert\
    \ number to string\n    local number = tostring(n)\n    -- flag to tell whether\
    \ it has even digit or not\n    local flag = false\n    for i = 1, #number do\n\
    \      -- convert char to number\n      local digit = tonumber(number:sub(i, i))\n\
    \      if digit % 2 == 0 then\n        flag = true\n        break\n      end\n\
    \    end\n    if not flag then\n      table.insert(unique, n)\n    end\n  end\n\
    \  -- sort the table\n  table.sort(unique)\n  return unique\nend", "    local\
    \ tab={}\n    for _, v in ipairs(x) do\n        local digit = v\n        while\
    \ digit > 0 do\n            if digit % 2 == 0 then\n                tab[v] = true\n\
    \                break\n            end\n            digit = math.floor(digit\
    \ / 10)\n        end\n    end\n    local res = {}\n    for _, v in ipairs(x) do\n\
    \        if not tab[v] then\n            table.insert(res, v)\n        end\n \
    \   end\n    return res\nend", "    local digits = {}\n    for i = 1, #x do\n\
    \        local str = tostring(x[i])\n        if not str:find(\"[02468]\") then\n\
    \            table.insert(digits, x[i])\n        end\n    end\n    table.sort(digits)\n\
    \    return digits\nend", "  local res = {}\n  for i = 1, #x do\n    local num\
    \ = x[i]\n    local found = false\n    while num > 0 do\n      local d = num %\
    \ 10\n      if d % 2 == 0 then\n        found = true\n        break\n      end\n\
    \      num = (num - d) / 10\n    end\n    if not found then\n      res[#res +\
    \ 1] = x[i]\n    end\n  end\n  sort(res)\n  return res\nend", "  return {x[1],\
    \ x[2], x[3]}\nend", "\tlocal set = {1, 3, 5, 7, 9}\n\tlocal res = {}\n\tlocal\
    \ flag = true\n\tfor _, value in ipairs(x) do\n\t\tlocal str = tostring(value)\n\
    \t\tfor i = 1, #str do\n\t\t\tlocal digit = tonumber(str:sub(i, i))\n\t\t\tflag\
    \ = flag and set[digit]\n\t\tend\n\t\tif flag then\n\t\t\ttable.insert(res, value)\n\
    \t\tend\n\t\tflag = true\n\tend\n\treturn res\nend", "    local result = {}\n\
    \    for i = 1, #x do\n        local allOdd = true\n        for digit in tostring(x[i]):gmatch(\"\
    %d\") do\n            if tonumber(digit) % 2 == 0 then\n                allOdd\
    \ = false\n                break\n            end\n        end\n        if allOdd\
    \ then\n            table.insert(result, x[i])\n        end\n    end\n    table.sort(result)\n\
    \    return result\nend", "  local res = {}\n  for _, v in ipairs(x) do\n    if\
    \ v % 2 ~= 0 then\n      table.insert(res, v)\n    end\n  end\n  table.sort(res)\n\
    \  return res\nend", "    local y = {}\n    for _, v in ipairs(x) do\n       \
    \ if not string.find(tostring(v), '2', 1, true) and\n           not string.find(tostring(v),\
    \ '4', 1, true) and\n           not string.find(tostring(v), '6', 1, true) and\n\
    \           not string.find(tostring(v), '8', 1, true) then\n            table.insert(y,\
    \ v)\n        end\n    end\n    return y\nend", "    x = as_array(x)\n    local\
    \ y = {}\n    for i, xi in ipairs(x) do\n        if tostring(xi):match(\"[24680]\"\
    ) == nil then\n            table.insert(y, xi)\n        end\n    end\n    return\
    \ as_set(y)\nend", "\tlocal t = {}\n\tfor _, v in ipairs(x) do\n\t\tlocal has_even\
    \ = false\n\t\tfor i in tostring(v):gmatch(\"%d\") do\n\t\t\tif i % 2 == 0 then\n\
    \t\t\t\thas_even = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif not has_even\
    \ then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\ttable.sort(t)\n\treturn t\n\
    end", "  return {}\nend", "    local ret = {}\n    for i = 1, #x do\n        local\
    \ even = false\n        for j = 1, #tostring(x[i]) do\n            if tonumber(tostring(x[i]):sub(j,\
    \ j)) % 2 == 0 then\n                even = true\n                break\n    \
    \        end\n        end\n        if not even then\n            table.insert(ret,\
    \ x[i])\n        end\n    end\n    table.sort(ret)\n    return ret\nend", "\t\
    local t, i = {}, 1\n\tfor _, v in ipairs(x) do\n\t\tif v < 10 or tonumber(tostring(v):gsub(\"\
    [24680]\", \"\")) == v then\n\t\t\tt[i] = v\n\t\t\ti = i + 1\n\t\tend\n\tend\n\
    \treturn t\nend", "  local t = {}\n  for _,v in ipairs(x) do\n    if v < 10 then\n\
    \      table.insert(t, v)\n    else\n      local sum = 0\n      while v > 0 do\n\
    \        sum = sum + v % 10\n        v = math.floor(v / 10)\n      end\n     \
    \ if sum % 2 == 1 then\n        table.insert(t, x[_])\n      end\n    end\n  end\n\
    \  return t\nend", "   -- Sorted list of unique elements.\n   local y = {}\n \
    \  -- Auxiliary table to keep track of how many times a number has \n   -- already\
    \ been inserted into y.\n   local z = {}\n   for i, v in ipairs(x) do\n      --\
    \ True if v has at least one even digit.\n      local even = false\n      -- Process\
    \ each digit of v.\n      while v > 0 do\n         -- Read the last digit of v.\n\
    \         local d = v % 10\n         -- Remove the last digit of v.\n        \
    \ v = math.floor(v / 10)\n         -- True if d is even.\n         even = even\
    \ or (d % 2 == 0)\n      end\n      -- True if even is false and v hasn't been\
    \ inserted into y.\n      if not even and z[v] == nil then\n         -- Insert\
    \ v into y.\n         table.insert(y, v)\n         -- Keep track of the number\
    \ of times v has been inserted into y.\n         z[v] = 1\n      end\n   end\n\
    \   -- Sort table y in increasing order.\n   table.sort(y)\n   return y\nend",
  "    local y = {}\n    for i, v in ipairs(x) do\n        local noEven = true\n \
    \       for j = 1, #tostring(v) do\n            if tonumber(tostring(v):sub(j,\
    \ j)) % 2 == 0 then\n                noEven = false\n                break\n \
    \           end\n        end\n        if noEven then\n            table.insert(y,\
    \ v)\n        end\n    end\n    table.sort(y)\n    return y\nend", "    local\
    \ r = {}\n    local a = {}\n    for _,i in ipairs(x) do\n        if i%2==0 then\n\
    \            table.insert(r,i)\n        else\n            table.insert(a,i)\n\
    \        end\n    end\n    return a\nend", "    local u = {}\n    for _,v in ipairs(x)\
    \ do\n        local found = false\n        while v > 0 do\n            local d\
    \ = v % 10\n            if d % 2 == 0 then\n                found = true\n   \
    \             break\n            end\n            v = (v - d) / 10\n        end\n\
    \        if not found then\n            table.insert(u, _)\n        end\n    end\n\
    \    return u\nend", "   local t = {}\n   for i = 1, #x do\n      local s = tostring(x[i])\n\
    \      local ok = true\n      for j = 1, #s do\n         if s:sub(j, j) % 2 ==\
    \ 0 then\n            ok = false\n            break\n         end\n      end\n\
    \      if ok then\n         t[#t + 1] = x[i]\n      end\n   end\n   table.sort(t)\n\
    \   return t\nend\nM.unique_digits = unique_digits", "  if (#x == 0) then return\
    \ {} end\n  local result = {}\n  for i, j in ipairs(x) do\n    local num = math.abs(j)\n\
    \    local flag = true\n    while (num ~= 0) do\n      if ((num % 10) % 2 == 0)\
    \ then\n        flag = false\n        break\n      end\n      num = math.floor(num\
    \ / 10)\n    end\n    if (flag) then table.insert(result, j) end\n  end\n  table.sort(result)\n\
    \  return result\nend", "    local result = {}\n    for k, v in pairs(x) do\n\
    \        if not has_even_digit(v) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return sort_table(result)\nend", "\t-- Convert the\
    \ table to string and split it by each number.\n\tlocal t = {}\n\tlocal s = table.concat(x)\n\
    \tfor k in string.gmatch(s, \"%d+\") do\n\t\tt[#t+1] = k\n\tend\n\t-- Check each\
    \ number for even digits and remove it from table.\n\tfor i, v in ipairs(t) do\n\
    \t\tfor k in string.gmatch(v, \"%d\") do\n\t\t\tif tonumber(k) % 2 == 0 then\n\
    \t\t\t\ttable.remove(t, i)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\t-- Check\
    \ if table is empty then return it.\n\tif #t == 0 then\n\t\treturn t\n\tend\n\t\
    -- Sort the table\n\ttable.sort(t)\n\treturn t\nend", "  return {}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
