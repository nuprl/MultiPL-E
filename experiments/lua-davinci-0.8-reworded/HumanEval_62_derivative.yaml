name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\n-- >>>\
  \ derivative({3, 1, 2, 4, 5})\n-- {1, 4, 12, 20}\n-- >>> derivative({1, 2, 3})\n\
  -- {2, 6}\nlocal function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    assert(type(xs) == \"table\")\n    local result = {}\n    for i,\
    \ x in ipairs(xs) do\n        if i > 1 then\n            table.insert(result,\
    \ (i - 1) * x)\n        end\n    end\n    return result\nend", "    local ys =\
    \ {}\n    for i, x in ipairs(xs) do\n        table.insert(ys, i * x)\n    end\n\
    \    return ys\nend", "    local result = {}\n    for i = 2, #xs do\n        table.insert(result,\
    \ (i - 1) * xs[i])\n    end\n    return result\nend", "  local out = {}\n  for\
    \ i = 1, #xs - 1 do\n    out[i] = xs[i] * (i)\n  end\n  return out\nend", "  \
    \  local result = {}\n    for i, x in ipairs(xs) do\n        if i > 1 then\n \
    \           table.insert(result, (i - 1) * x)\n        end\n    end\n    return\
    \ result\nend", "  local res = {}\n  for i = 2, #xs do\n    table.insert(res,\
    \ xs[i] * (i - 1))\n  end\n  return res\nend", "    local xs_new = {}\n    for\
    \ i = 2, #xs do\n        table.insert(xs_new, xs[i] * (i - 1))\n    end\n    return\
    \ xs_new\nend", "  local output = {}\n  for i = #xs, 2, -1 do\n    output[i -\
    \ 1] = i * xs[i]\n  end\n  return output\nend", "\tassert(#xs > 0)\n\tif #xs ==\
    \ 1 then\n\t\treturn {0}\n\tend\n\tlocal dxs = {}\n\tfor i = 1, #xs - 1 do\n\t\
    \tdxs[i] = xs[i] * (i + 1)\n\tend\n\treturn dxs\nend", "    local n = #xs\n  \
    \  assert(n > 0)\n    local ys = {}\n    for i = 1, n - 1 do\n        ys[i] =\
    \ xs[i + 1] * i\n    end\n    return ys\nend", "    local ds = {}\n    for i =\
    \ 1, #xs - 1 do\n        ds[i] = (i + 1) * xs[i + 1]\n    end\n    return ds\n\
    end", "    local dx = { }\n    for d = 1, #xs do\n        dx[d] = xs[d] * d\n\
    \    end\n    return dx\nend", "  local ys = {}\n  for i = 2, #xs do\n    ys[i\
    \ - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend", "    local d = {}\n    local\
    \ n = table.getn(xs) - 1\n    for i = 1, n do\n        d[i] = (i + 1) * xs[i +\
    \ 1]\n    end\n    return d\nend", "    local n = #xs - 1\n    local ys = {}\n\
    \    for i = n, 1, -1 do\n        ys[i] = xs[i] * i\n    end\n    return ys\n\
    end", "  local length = #xs\n  if length == 0 then\n    return {}\n  end\n  local\
    \ out = {}\n  for i = 2, length do\n    out[i - 1] = (i - 1) * xs[i]\n  end\n\
    \  return out\nend", "\tlocal result = {}\n\tfor i = 2, #xs do\n\t\tresult[i -\
    \ 1] = xs[i] * (i - 1)\n\tend\n\treturn result\nend", "  assert(type(xs) == \"\
    table\", \"derivative: xs must be a table\")\n  assert(#xs >= 1, \"derivative:\
    \ the input table must have at least one element\")\n  for i = 1, #xs do\n   \
    \ assert(type(xs[i]) == \"number\",\n           \"derivative: all elements of\
    \ xs must be numbers\")\n  end\n  local new_xs = {}\n  for i = 2, #xs do\n   \
    \ table.insert(new_xs, (i - 1) * xs[i])\n  end\n  return new_xs\nend", "  if #xs\
    \ == 0 then\n    return xs\n  end\n  local ys = {}\n  for i = 1, #xs - 1 do\n\
    \    ys[i] = xs[i] * (i + 1)\n  end\n  return ys\nend", "    if #xs == 0 then\n\
    \        return {}\n    end\n    local dxs = {}\n    for i = #xs, 2, -1 do\n \
    \       dxs[i - 1] = xs[i] * (i - 1)\n    end\n    return dxs\nend", "    local\
    \ dxs = {}\n    for i = 1, #xs - 1 do\n        table.insert(dxs, xs[i] * i)\n\
    \    end\n    return dxs\nend", "    local size = #xs\n    local ys = {}\n   \
    \ for i = 1, size - 1 do\n        ys[i] = xs[i] * (size - i)\n    end\n    return\
    \ ys\nend", "    local dxs = {}\n    for i, x in ipairs(xs) do\n        table.insert(dxs,\
    \ (i - 1) * x)\n    end\n    -- remove the leading zero\n    if #dxs > 0 and dxs[1]\
    \ == 0 then\n        table.remove(dxs, 1)\n    end\n    return dxs\nend", "  local\
    \ ys = {}\n  for i = 2, #xs do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n  return\
    \ ys\nend", "    assert(#xs > 0)\n    local r = {}\n    for i = 1, #xs - 1 do\n\
    \        r[i] = xs[i] * (i)\n    end\n    return r\nend", "    local r, i = {},\
    \ #xs - 1\n    for j = i, 1, -1 do\n        r[j] = xs[j + 1] * i\n        i =\
    \ i - 1\n    end\n    return r\nend", "    local p = #xs\n    local newxs = {}\n\
    \    for i = 1, p - 1 do\n        newxs[i] = xs[i] * (p - i)\n    end\n    return\
    \ newxs\nend", "  local ret = {}\n  for i = 1, #xs - 1 do\n    table.insert(ret,\
    \ xs[i] * i)\n  end\n  return ret\nend", "    assert(#xs > 0)\n    local result\
    \ = {}\n    for i=2,#xs do\n        result[i-1] = (i-1) * xs[i]\n    end\n   \
    \ return result\nend", "    local n = #xs\n    local result = {}\n    for i =\
    \ 2, n do\n        table.insert(result, (i - 1) * xs[i])\n    end\n    return\
    \ result\nend", "    local new = {}\n    local j = 0\n    for i = 1, #xs do\n\
    \        if xs[i] ~= 0 then\n            new[j] = i * xs[i]\n            j = j\
    \ + 1\n        end\n    end\n    return new\nend", "  local deriv = {}\n  for\
    \ i = 1, #xs - 1 do\n    deriv[i] = (i + 1) * xs[i + 1]\n  end\n  return deriv\n\
    end", "    local xsLen = table.getn(xs)\n    local derivativeXs = {}\n    for\
    \ i = 2, xsLen do\n        derivativeXs[i - 1] = xs[i] * (i - 1)\n    end\n  \
    \  return derivativeXs\nend", "  local n = #xs\n  local d = {}\n  for i = 1, n\
    \ - 1 do\n    table.insert(d, xs[i] * (n - i))\n  end\n  return d\nend", "  local\
    \ xs_new = {}\n  for i = 1, #xs - 1 do\n    xs_new[i] = (i + 1) * xs[i + 1]\n\
    \  end\n  return xs_new\nend", "    local c = #xs - 1\n    local r = {}\n    for\
    \ i = 1, c do\n        r[i] = c * xs[i + 1]\n    end\n    return r\nend", "  \
    \  local d = {}\n    local n = #xs\n    for i = 1, n - 1 do\n        d[i] = xs[i]\
    \ * (n - i)\n    end\n    return d\nend", "  local n = #xs\n  local res = {}\n\
    \  for i = 1, n - 1 do\n    res[i] = xs[i] * (n - i)\n  end\n  return res\nend",
  "    local dxs = {}\n    for i, x in ipairs(xs) do\n        dxs[i] = (i - 1) * x\n\
    \    end\n    return dxs\nend", "  local dx = {}\n  for i = 1, #xs do\n    dx[i\
    \ - 1] = i * xs[i]\n  end\n  return dx\nend", "    local d = {}\n    for i = #xs\
    \ - 1, 1, -1 do\n        d[i] = xs[i + 1] * (i + 1)\n    end\n    return d\nend",
  "\tlocal n = #xs\n\tlocal ret = {}\n\tfor i = 1, n-1 do\n\t\tret[i] = (i+1) * xs[i+1]\n\
    \tend\n\treturn ret\nend", "    -- NOTE: remove leading zeros\n    local k = #xs\n\
    \    while k > 0 and xs[k] == 0 do\n        k = k - 1\n    end\n    xs[k + 1]\
    \ = nil", "    local r = {}\n    for i = 1, #xs - 1 do\n        r[i] = xs[i] *\
    \ (i)\n    end\n    return r\nend", "    local n = #xs\n    local result = {}\n\
    \    for i = 1, n - 1 do\n        result[i] = (i + 1) * xs[i + 1]\n    end\n \
    \   return result\nend", "    local dx = {}\n    for i = 1, #xs do\n        dx[i\
    \ - 1] = xs[i] * i\n    end\n    return dx\nend", "  local r = {}\n  for i = 1,\
    \ #xs do\n    table.insert(r, (i - 1) * xs[i])\n  end\n  return r\nend", "   \
    \ if #xs < 2 then\n        return {}\n    end\n    local ret = {}\n    for i =\
    \ 2, #xs do\n        ret[i - 1] = xs[i] * (i - 1)\n    end\n    return ret\nend",
  "    local dxs = {}\n    for i, x in ipairs(xs) do\n        if i > 1 then\n    \
    \        dxs[i - 1] = x * (i - 1)\n        end\n    end\n    return dxs\nend",
  "    local newXs = {}\n    for i, x in ipairs(xs) do\n        newXs[i] = (i - 1)\
    \ * x\n    end\n    return newXs\nend", "    local result = {}\n    for i = 1,\
    \ #xs do\n        table.insert(result, (i - 1) * xs[i])\n    end\n    return result\n\
    end", "  local ys = {}\n  for i = 1, #xs - 1 do\n    ys[i] = (i + 1) * xs[i +\
    \ 1]\n  end\n  return ys\nend", "  local der = {}\n  for i = 1, #xs - 1 do\n \
    \   der[i] = xs[i] * i\n  end\n  return der\nend", "  local ys = {}\n  for i =\
    \ 1, #xs - 1 do\n    ys[i] = (i + 1) * xs[i + 1]\n  end\n  return ys\nend", " \
    \ local result = {}\n  for i = 1, #xs - 1 do\n    table.insert(result, xs[i] *\
    \ i)\n  end\n  return result\nend", "    if #xs == 0 then\n        return xs\n\
    \    end\n    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] = xs[i]\
    \ * (i - 1)\n    end\n    return ys\nend", "    local dxs = {}\n    for i = 1,\
    \ #xs - 1 do\n        dxs[i] = xs[i] * (i + 1)\n    end\n    return dxs\nend",
  "    local result = {}\n    for i = 1, #xs - 1 do\n        result[i] = xs[i] * i\n\
    \    end\n    return result\nend", "    --print(xs)\n    local res = {}\n    for\
    \ i = 2, #xs do\n        res[i - 1] = (i - 1) * xs[i]\n    end\n    return res\n\
    end", "  local n = #xs - 1\n  local ys = {}\n  for i = 0, n - 1 do\n    ys[i]\
    \ = (n - i) * xs[i + 1]\n  end\n  return ys\nend", "\tlocal dxs = {}\n\tfor i\
    \ = 1, #xs - 1 do\n\t\tdxs[i] = xs[i] * i\n\tend\n\treturn dxs\nend", "  local\
    \ n = table.getn(xs)\n  if n < 2 then\n    return {}\n  end\n  local res = {}\n\
    \  for i = 1, n - 1 do\n    res[i] = (i + 1) * xs[i + 1]\n  end\n  return res\n\
    end", "    local d = {}\n    for i = 1, #xs - 1 do\n        table.insert(d, xs[i]\
    \ * i)\n    end\n    return d\nend", "    local result = {}\n    for i, x in ipairs(xs)\
    \ do\n        if i > 1 then\n            result[i - 1] = x * (i - 1)\n       \
    \ end\n    end\n    return result\nend", "  local n = #xs\n  local dxs = {}\n\
    \  for i = 1, n - 1 do\n    dxs[i] = xs[i] * (n - i)\n  end\n  return dxs\nend",
  "    local n = #xs - 1\n    local dxs = {}\n    for i=0,n-1 do\n        dxs[i+1]\
    \ = (n-i) * xs[i+1]\n    end\n    return dxs\nend", "    if #xs == 0 then\n  \
    \      return {}\n    end\n    local result = {}\n    for i = 2, #xs do\n    \
    \    result[i - 1] = xs[i] * (i - 1)\n    end\n    return result\nend", "\tlocal\
    \ dx = {}\n\tlocal power = #xs\n\tfor i = 1, power - 1 do\n\t\ttable.insert(dx,\
    \ xs[i] * (power - i))\n\tend\n\treturn dx\nend", "    local derivative = {}\n\
    \    local n = #xs\n    for i = 1, n - 1 do\n        derivative[i] = xs[i] * (n\
    \ - i)\n    end\n    return derivative\nend", "  local n = #xs - 1\n  local res\
    \ = {}\n  for i = 1, n do\n    res[i] = (i+1) * xs[i+1]\n  end\n  return res\n\
    end", "    local d = {}\n    for i = 2, #xs do\n        table.insert(d, (i - 1)\
    \ * xs[i])\n    end\n    return d\nend", "  local len = #xs\n  if len <= 1 then\n\
    \    return {0}\n  end\n  local ys = {}\n  for i = 2, len do\n    ys[i - 1] =\
    \ xs[i] * (i - 1)\n  end\n  return ys\nend", "\tlocal d = {unpack(xs)}\n\tfor\
    \ i = 1, #d do\n\t\td[i] = d[i] * i\n\tend\n\ttable.remove(d, 1)\n\treturn d\n\
    end", "    local result = {}\n    for i = 1, #xs - 1 do\n        table.insert(result,\
    \ xs[i] * i)\n    end\n    return result\nend", "  local n = #xs\n  local dxs\
    \ = {}\n  for i = 2, n do\n    dxs[i - 1] = xs[i] * (i - 1)\n  end\n  return dxs\n\
    end", "    local a = {}\n    for i = 1, #xs - 1 do\n        table.insert(a, (i+1)\
    \ * xs[i+1])\n    end\n    return a\nend", "    local result = {}\n    for i =\
    \ 1, #xs - 1 do\n        result[i] = xs[i] * (#xs - i)\n    end\n    return result\n\
    end", "  local ds = {}\n  for i = 2, #xs do\n    ds[i - 1] = xs[i] * (i - 1)\n\
    \  end\n  return ds\nend", "\tif #xs < 2 then return {0} end\n\tlocal result =\
    \ {}\n\tfor i = 1, #xs-1 do\n\t\tresult[i] = xs[i+1] * i\n\tend\n\treturn result\n\
    end", "    local dxs = {}\n    for i = 2, #xs do\n        dxs[i - 1] = xs[i] *\
    \ (i - 1)\n    end\n    return dxs\nend", "  local n = #xs - 1\n  local res =\
    \ {}\n  for i = n, 1, -1 do\n    res[i] = xs[i] * n\n    n = n - 1\n  end\n  return\
    \ res\nend", "  if #xs == 0 then\n    return {}\n  end\n  local dxs = {}\n  for\
    \ i, c in ipairs(xs) do\n    dxs[i] = c * (i - 1)\n  end\n  return dxs\nend",
  "\tlocal m = #xs - 1\n\tlocal dxs = {}\n\tfor i = 1, m do\n\t\tdxs[i] = xs[i] *\
    \ i\n\tend\n\treturn dxs\nend", "  local ys = {}\n  for i = 2, #xs do\n    ys[i\
    \ - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend", "  local n = #xs\n  local\
    \ out = { }\n  for i = 1, n - 1 do\n    out[i] = (i + 1) * xs[i + 1]\n  end\n\
    \  return out\nend", "    local function derive(x, i)\n        if i >= #xs then\n\
    \            return 0\n        else\n            return i * xs[i + 1] + derive(x,\
    \ i + 1)\n        end\n    end\n    local deriv = { }\n    for i = 0, #xs - 2\
    \ do\n        deriv[i] = derive(xs[i], i)\n    end\n    return deriv\nend", " \
    \   local dx = {}\n    for i = 1, #xs - 1 do\n        table.insert(dx, xs[i] *\
    \ i)\n    end\n    return dx\nend", "    local len = #xs\n    local ys = {}\n\
    \    for i = 2, len do\n        ys[i - 1] = (i - 1) * xs[i]\n    end\n    return\
    \ ys\nend", "  -- implementation here\nend", "    local res = {}\n    for i =\
    \ 1, #xs - 1 do\n        res[i] = (i + 1) * xs[i + 1]\n    end\n    return res\n\
    end", "    assert(getmetatable(xs) == ffi.typeof(\"double[?]\"))\n    local n\
    \ = #xs - 1\n    assert(n >= 0)\n    if n == 0 then\n        return {0}\n    end\n\
    \    local result = new_array(n)\n    for i = 1, n do\n        result[i-1] = i\
    \ * xs[i]\n    end\n    return result\nend", "  local out = {}\n  local n = #xs\n\
    \  for i = 1, n - 1 do\n    out[i] = xs[i] * (n - i)\n  end\n  return out\nend",
  "    local dxs = {}\n    for i = 2, #xs do\n        table.insert(dxs, (i - 1) *\
    \ xs[i])\n    end\n    return dxs\nend", "\tlocal n = #xs\n\tif n < 2 then\n\t\
    \treturn {}\n\tend\n\tlocal res = {}\n\tfor i = 2, n do\n\t\tres[i - 1] = (i -\
    \ 1) * xs[i]\n\tend\n\treturn res\nend", "  -- YOUR CODE HERE\n  --removes the\
    \ first item from xs\n  local function drop(lst)\n    if #lst == 0 then\n    \
    \  return {}\n    else\n      return {table.unpack(lst, 2)}\n    end\n  end\n\
    \  --multiplies xs by 1,2,3,...\n  local function multiply(lst)\n    if #lst ==\
    \ 0 then\n      return {}\n    else\n      return {table.unpack(lst)}\n    end\n\
    \  end\n  --runs the functions drop and multiply on xs\n  local function run(lst)\n\
    \    if #lst == 0 then\n      return {}\n    else\n      return {multiply(lst)\
    \ * drop(lst)}\n    end\n  end\n  return run(xs)\nend", "  local n = #xs\n  if\
    \ n == 0 then\n    return {}\n  end\n  local dxs = {}\n  for i = 1, n - 1 do\n\
    \    dxs[i] = xs[i + 1] * i\n  end\n  return dxs\nend", "\t--[[\n\t-- TODO: Maybe\
    \ use the following to test for the type of 'xs'.\n\tlocal t = getmetatable(xs)\n\
    \tlocal n = #xs\n\tassert(t == nil or type(t) == 'table' and t.__index == nil,\
    \ 'bad argument #1 to derivative: expected array of numbers')\n\t]]--\n\tlocal\
    \ n = #xs\n\tif n == 0 then\n\t\treturn {}\n\tend\n\tlocal ys = {}\n\tfor i =\
    \ 1, n - 1 do\n\t\tys[i] = xs[i + 1] * i\n\tend\n\treturn ys\nend", "    local\
    \ n = #xs - 1\n    local out = {}\n    for i=0,n-1 do\n        out[i+1] = (n-i)\
    \ * xs[i+1]\n    end\n    return out\nend", "    local dx = {}\n    for i = 2,\
    \ #xs do\n        table.insert(dx, (i - 1) * xs[i])\n    end\n    return dx\n\
    end", "  local dxs = {}\n  for i = 1, #xs do\n    dxs[i] = (i * xs[i])\n  end\n\
    \  return dxs\nend", "    local n = #xs\n    local xs_prime = {}\n    for i =\
    \ 1, n - 1 do\n        table.insert(xs_prime, xs[i] * (n - i))\n    end\n    return\
    \ xs_prime\nend", "    local ys = {}\n    for i = 1, #xs - 1 do\n        table.insert(ys,\
    \ (i + 1) * xs[i + 1])\n    end\n    return ys\nend", "    local ys = {}\n   \
    \ for i = 2, #xs do\n        table.insert(ys, (i - 1) * xs[i])\n    end\n    return\
    \ ys\nend", "    local dxs = {}\n    for i = 1, #xs - 1 do\n        dxs[i] = xs[i]\
    \ * (#xs - i)\n    end\n    return dxs\nend", "    local result = {}\n    local\
    \ n = #xs - 1\n    for i = 1, n do\n        table.insert(result, xs[i] * i)\n\
    \    end\n    return result\nend", "\tlocal n = #xs - 1\n\tlocal ys = {}\n\tfor\
    \ i = 1, n do\n\t\ttable.insert(ys, xs[i + 1] * i)\n\tend\n\treturn ys\nend",
  "  if not xs then return nil end\n  local n = #xs\n  if n == 0 then return {} end\n\
    \  local dxs = {}\n  for i = 1, n - 1 do\n    dxs[i] = xs[i + 1] * i\n  end\n\
    \  return dxs\nend", "  local dxs = {}\n  for i = 2, #xs do\n    table.insert(dxs,\
    \ (i - 1) * xs[i])\n  end\n  return dxs\nend", "    assert(type(xs) == \"table\"\
    , \"Derivative needs a table!\")\n    local dxs = {}\n    for i = 1, #xs - 1 do\n\
    \        dxs[i] = xs[i] * (#xs - i)\n    end\n    return dxs\nend", "    local\
    \ res = {}\n    for i = 1, #xs do\n        res[i] = xs[i] * i\n    end\n    res[#res]\
    \ = nil\n    return res\nend", "    if #xs == 0 then\n        return xs\n    end\n\
    \    if #xs == 1 then\n        return {0}\n    end\n    local result = {}\n  \
    \  for i = 2, #xs do\n        result[i - 1] = (i - 1) * xs[i]\n    end\n    return\
    \ result\nend", "  local dxs = {}\n  for i = 1, #xs - 1 do\n    table.insert(dxs,\
    \ xs[i] * i)\n  end\n  return dxs\nend", "  local len = #xs\n  local ys = {}\n\
    \  for i = 1, len - 1 do\n    ys[i] = xs[i] * (len - i)\n  end\n  return ys\n\
    end", "  local f = #xs - 1\n  local dxs = {}\n  for i = 1, f do\n    dxs[i] =\
    \ xs[i] * f\n    f = f - 1\n  end\n  return dxs\nend", "  local result = {}\n\
    \  local len = #xs\n  for i = 1, len - 1 do\n    result[i] = xs[i] * (len - i)\n\
    \  end\n  return result\nend", "    local n = #xs\n    if n <= 1 then\n      \
    \  return {}\n    end\n    local ys = {}\n    for i = 1, n - 1 do\n        ys[i]\
    \ = (i + 1) * xs[i + 1]\n    end\n    return ys\nend", "\tlocal n = #xs\n\tlocal\
    \ xs2 = {}\n\tlocal i\n\tfor i = 2, n do\n\t\txs2[i - 1] = xs[i] * (i - 1)\n\t\
    end\n\treturn xs2\nend", "  local dxs = {}\n  for i = 1, #xs - 1 do\n    dxs[i]\
    \ = (i + 1) * xs[i + 1]\n  end\n  return dxs\nend", "  local result = {}\n  for\
    \ i = 1, #xs - 1 do\n    result[i] = (i + 1) * xs[i + 1]\n  end\n  return result\n\
    end", "    local result = {}\n    for i = 1, #xs - 1 do\n        result[i] = (i\
    \ + 1) * xs[i + 1]\n    end\n    return result\nend", "\tlocal ret = {}\n\tlocal\
    \ len = #xs\n\tfor i = 1, len-1 do\n\t\tret[i] = xs[i] * (len - i)\n\tend\n\t\
    return ret\nend", "    local ys = {}\n    for k = 2, #xs do\n        ys[k - 1]\
    \ = (k - 1) * xs[k]\n    end\n    return ys\nend", "    local ds = {}\n    for\
    \ i = 1, #xs - 1 do\n        ds[i] = xs[i] * (i)\n    end\n    return ds\nend",
  "  local dxs = {}\n  for i, x in ipairs(xs) do\n    dxs[i] = (i - 1) * x\n  end\n\
    \  return dxs\nend", "    local result = {}\n    local n = #xs\n    if n == 0\
    \ then\n        return result\n    end\n    for i = 1, n - 1 do\n        table.insert(result,\
    \ xs[i] * i)\n    end\n    return result\nend", "    local dxs = {}\n    for i\
    \ = 2, #xs do\n        table.insert(dxs, (i - 1) * xs[i])\n    end\n    return\
    \ dxs\nend", "  local n = #xs\n  local ys = {}\n  for i = 2, n do\n    ys[i -\
    \ 1] = xs[i] * (i - 1)\n  end\n  return ys\nend", "  assert(type(xs) == 'table',\
    \ 'derivative: xs must be a table')\n  local dx = {}\n  for i = 2, #xs do\n  \
    \  dx[i - 1] = xs[i] * (i - 1)\n  end\n  return dx\nend", "    local ys = {}\n\
    \    for i, x in ipairs(xs) do\n        if i > 1 then\n            table.insert(ys,\
    \ (i - 1) * x)\n        end\n    end\n    return ys\nend", "    local dxs = {}\n\
    \    for i = 1, #xs - 1 do\n        dxs[i] = xs[i] * i\n    end\n    return dxs\n\
    end", "  local n = #xs - 1\n  local res = {}\n  for i = 0, n - 1 do\n    res[i\
    \ + 1] = (n - i) * xs[i + 1]\n  end\n  return res\nend", "    -- for a polynomial,\
    \ the derivative of x^n is n * x^(n-1).\n    -- (d/dx)( x^n ) = n * x^(n-1)\n\
    \    -- (d/dx)( a*x^n ) = a*n * x^(n-1)\n    -- (d/dx)( sum_i(a_i*x^i) ) = sum_i(a_i*i\
    \ * x^(i-1))\n    -- if we treat x^0 as 1, then we can let i=0, and\n    -- (d/dx)(\
    \ sum_i(a_i*x^i) ) = sum_i(a_i*i * x^(i-1)) = sum_i(a_i*i * x^i) / x\n    -- this\
    \ will get rid of the x^0 term.\n    local sum = {}\n    for i, a_i in ipairs(xs)\
    \ do\n        local i_a_i = i * a_i\n        if i_a_i ~= 0 then\n            if\
    \ not sum[i] then\n                sum[i] = i_a_i\n            else\n        \
    \        sum[i] = sum[i] + i_a_i\n            end\n        end\n    end\n    return\
    \ sum\nend", "  local dxs = {}\n  for i = 2, #xs do\n    table.insert(dxs, (i\
    \ - 1) * xs[i])\n  end\n  return dxs\nend", "\t-- Your code goes here\n\t-- TODO:\
    \ You must replace this\n\tlocal res = {}\n\tfor i = 1, #xs - 1 do\n\t\tres[i]\
    \ = xs[i] * (i)\n\tend\n\treturn res\nend", "    assert(type(xs) == \"table\"\
    )\n    local dxs = {}\n    for i, x in ipairs(xs) do\n        if i > 1 then\n\
    \            table.insert(dxs, x * (i - 1))\n        end\n    end\n    return\
    \ dxs\nend", "    local n = #xs - 1\n    local ret = {}\n    for i = 1, n do\n\
    \        ret[i] = xs[i] * i\n    end\n    return ret\nend", "    local dxs = {}\n\
    \    for i, x in ipairs(xs) do\n        if i > 1 then table.insert(dxs, i * x)\
    \ end\n    end\n    return dxs\nend", "  local res = {}\n  for i = 1, #xs - 1\
    \ do\n    res[i] = xs[i] * i\n  end\n  return res\nend", "    local der = {}\n\
    \    for i = 1, #xs - 1 do\n        der[i] = xs[i] * i\n    end\n    return der\n\
    end", "  local ys = {}\n  for i = 1, #xs - 1 do\n    ys[i] = xs[i + 1] * i\n \
    \ end\n  return ys\nend", "    local n = #xs\n    local ys = {}\n    for i = 2,\
    \ n do\n        ys[i - 1] = (i - 1) * xs[i]\n    end\n    return ys\nend", " \
    \ if #xs < 2 then\n    return {}\n  end\n  local dxs = {}\n  for i = 1, #xs -\
    \ 1 do\n    dxs[i] = xs[i] * (i)\n  end\n  return dxs\nend", "\tif #xs == 0 then\n\
    \t\treturn xs\n\tend\n\tlocal r = {}\n\tfor i = 1, #xs - 1 do\n\t\tr[i] = xs[i\
    \ + 1] * i\n\tend\n\treturn r\nend", "    local xs = checkCoefs(xs)\n    if #xs\
    \ <= 1 then\n        return {0}\n    end\n    local xs2 = {}\n    for i = 2, #xs\
    \ do\n        xs2[i - 1] = xs[i] * (i - 1)\n    end\n    return xs2\nend", " \
    \ local d = {}\n  for i = 1, #xs - 1 do\n    d[i] = xs[i] * i\n  end\n  return\
    \ d\nend", "    local derivative = {}\n    local n = #xs - 1\n    for i = 1, n\
    \ do\n        derivative[i] = xs[i + 1] * i\n    end\n    return derivative\n\
    end", "  local res = {}\n  for i = 1, #xs - 1 do\n    res[i] = xs[i] * i\n  end\n\
    \  return res\nend", "    local dxs = {}\n    for i = 2, #xs do\n        dxs[i\
    \ - 1] = (i - 1) * xs[i]\n    end\n    return dxs\nend", "    local r = {}\n \
    \   for i = 1, #xs - 1 do\n        table.insert(r, (i) * xs[i + 1])\n    end\n\
    \    return r\nend", "    if #xs == 0 then\n        return {}\n    end\n    local\
    \ d = {}\n    for i = 2, #xs do\n        d[i - 1] = (i - 1) * xs[i]\n    end\n\
    \    return d\nend", "\tlocal dx = {}\n\tfor i, x in ipairs(xs) do\n\t\tif i >\
    \ 1 then\n\t\t\tdx[i - 1] = x * (i - 1)\n\t\tend\n\tend\n\treturn dx\nend", " \
    \ local ret = {}\n  for i = 1, #xs - 1 do\n    ret[i] = (i + 1) * xs[i + 1]\n\
    \  end\n  return ret\nend", "  local n = #xs\n  local result = {}\n  for i = 1,\
    \ n - 1 do\n    result[i] = xs[i] * (n - i)\n  end\n  return result\nend", " \
    \ local n = #xs - 1\n  local res = {}\n  for i = 1, n do\n    res[i] = (i+1) *\
    \ xs[i+1]\n  end\n  return res\nend", "  local res = {}\n  for i = 1, #xs - 1\
    \ do\n    table.insert(res, xs[i] * i)\n  end\n  return res\nend", "  local result\
    \ = {}\n  for i = 1, #xs - 1 do\n    table.insert(result, xs[i] * i)\n  end\n\
    \  return result\nend", "    local result = {}\n    for i = 1, #xs - 1 do\n  \
    \      result[i] = (i + 1) * xs[i + 1]\n    end\n    return result\nend", "\t\
    local dxs = {}\n\tfor i = 1, #xs - 1 do\n\t\tdxs[i] = (i + 1) * xs[i + 1]\n\t\
    end\n\treturn dxs\nend", "  assert(type(xs) == 'table')\n  assert(#xs >= 1)\n\
    \  local out = {}\n  for i = 2, #xs do\n    table.insert(out, (i - 1) * xs[i])\n\
    \  end\n  return out\nend", "    local ys = {}\n    for i = 1, #xs - 1 do\n  \
    \      ys[i] = (i+1) * xs[i+1]\n    end\n    return ys\nend", "    local n = #xs\n\
    \    local ret = {}\n    for i = 1, n - 1 do\n        ret[i] = xs[i] * (n - i)\n\
    \    end\n    return ret\nend", "    local result = {}\n    for i = 1, #xs do\n\
    \        result[i] = (i * xs[i])\n    end\n    return result\nend", "  local n\
    \ = #xs\n  local res = {}\n  for i = 1, n - 1 do\n    res[i] = xs[i] * (n - i)\n\
    \  end\n  return res\nend", "  local dxs = {}\n  for i,x in ipairs(xs) do\n  \
    \  if i == 1 then\n      break\n    end\n    dxs[i-1] = x * i\n  end\n  return\
    \ dxs\nend", "    if #xs == 0 then\n        return {}\n    end\n    local new_xs\
    \ = {}\n    for i = 2, #xs do\n        new_xs[i - 1] = (i - 1) * xs[i]\n    end\n\
    \    return new_xs\nend", "  local m = #xs\n  local dy = {}\n  for i = 1, m -\
    \ 1 do\n    dy[i] = (i+1) * xs[i+1]\n  end\n  return dy\nend", "\tlocal dx = {}\n\
    \tlocal size = table.getn(xs)\n\tlocal i\n\tfor i = 2, size do\n\t\tdx[i - 1]\
    \ = xs[i] * (i - 1)\n\tend\n\treturn dx\nend", "    local result = {}\n    for\
    \ i = 2, #xs do\n        table.insert(result, xs[i] * (i - 1))\n    end\n    return\
    \ result\nend", "  local n = #xs\n  local xs2 = table.create(n - 1)\n  for i =\
    \ 2, n do\n    xs2[i - 1] = (i - 1) * xs[i]\n  end\n  return xs2\nend", "  local\
    \ xs2 = {}\n  for i, x in ipairs(xs) do\n    xs2[i - 1] = x * (i - 1)\n  end\n\
    \  table.remove(xs2, #xs2)\n  return xs2\nend", "    local dxs = {}\n    for i\
    \ = 1, #xs - 1 do\n        table.insert(dxs, (i + 1) * xs[i + 1])\n    end\n \
    \   return dxs\nend", "    local result = {}\n    local len = #xs\n    if len\
    \ > 1 then\n        for i = 1, len - 1 do\n            result[i] = xs[i] * i\n\
    \        end\n    end\n    return result\nend", "  local out = {}\n  for i = 2,\
    \ #xs do\n    out[i - 1] = xs[i] * (i - 1)\n  end\n  return out\nend", "  local\
    \ result = {}\n  for i = 2, #xs do\n    result[i - 1] = xs[i] * (i - 1)\n  end\n\
    \  return result\nend", "    local m = #xs\n    local ys = {}\n    for i = 1,\
    \ m - 1 do\n        ys[i] = (i + 1) * xs[i + 1]\n    end\n    return ys\nend",
  "    local f = function(x) return xs[x + 1] * x end\n    return map(f, range(0,\
    \ #xs - 1))\nend", "  local res = {}\n  for i = 1, #xs - 1 do\n    res[i] = (i\
    \ + 1) * xs[i + 1]\n  end\n  return res\nend", "    local ys = {}\n    for i =\
    \ 1, #xs - 1 do\n        table.insert(ys, (i + 1) * xs[i + 1])\n    end\n    return\
    \ ys\nend", "    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] = (i\
    \ - 1) * xs[i]\n    end\n    return ys\nend", "    local result = {}\n    for\
    \ i = 2, #xs do\n        table.insert(result, (i - 1) * xs[i])\n    end\n    return\
    \ result\nend", "  local r = {}\n  for i = 1, #xs - 1 do\n    table.insert(r,\
    \ (i + 1) * xs[i + 1])\n  end\n  return r\nend", "\tlocal res = {}\n\tfor i =\
    \ 1, #xs - 1 do\n\t\tres[i] = xs[i] * i\n\tend\n\treturn res\nend", "    local\
    \ dx = {}\n    local n = #xs\n    for i = 2, n do\n        dx[i - 1] = xs[i] *\
    \ (i - 1)\n    end\n    return dx\nend", "    local deriv = {}\n    for i = 2,\
    \ #xs do\n        deriv[i - 1] = (i - 1) * xs[i]\n    end\n    return deriv\n\
    end", "\tif #xs < 2 then return {} end\n\tlocal ys = {}\n\tfor i=2,#xs do\n\t\t\
    ys[i-1] = (i-1) * xs[i]\n\tend\n\treturn ys\nend", "    local dx = {}\n    for\
    \ i = 2, #xs do\n        dx[i - 1] = xs[i] * (i - 1)\n    end\n    return dx\n\
    end", "  local n = #xs\n  if n < 2 then\n    return {}\n  end\n  local ys = {}\n\
    \  for i = 2, n do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend",
  "  local xs_ = {}\n  for i = 2, #xs do\n    table.insert(xs_, (i - 1) * xs[i])\n\
    \  end\n  return xs_\nend", "    local n = #xs\n    if n == 0 then\n        return\
    \ { }\n    end\n    local d = 1\n    local dxs = { }\n    for i = 1, n - 1 do\n\
    \        local x = xs[i]\n        dxs[i] = d * x\n        d = d + 1\n    end\n\
    \    return dxs\nend", "\tlocal n = #xs\n\tif n < 2 then\n\t\treturn {0}\n\tend\n\
    \tlocal ys = {}\n\tfor i = 1, n - 1 do\n\t\tys[i] = (i + 1) * xs[i + 1]\n\tend\n\
    \treturn ys\nend", "  local result = {}\n  for i = 1, #xs - 1 do\n    result[i]\
    \ = (i + 1) * xs[i + 1]\n  end\n  return result\nend", "\tlocal len = #xs\n\t\
    local d = { }\n\tfor i = 1, len - 1 do\n\t\td[i] = xs[i] * (len - i)\n\tend\n\t\
    return d\nend", "    -- YOUR CODE HERE\nend", "    local ys = {}\n    for i =\
    \ 2, #xs do\n        ys[i - 1] = xs[i] * (i - 1)\n    end\n    return ys\nend",
  "    local der = {}\n    for i = #xs, 2, -1 do\n        der[i - 1] = i * xs[i]\n\
    \    end\n    return der\nend", "  local res = {}\n  for i = 2, #xs do\n    res[i\
    \ - 1] = xs[i] * (i - 1)\n  end\n  return res\nend", "    local n = #xs\n    local\
    \ ret = {}\n    for i = 2, n do\n        ret[i - 1] = xs[i] * (i - 1)\n    end\n\
    \    return ret\nend", "  local len = #xs\n  local res = {}\n  for i = 1, len-1\
    \ do\n    res[i] = xs[i] * (len - i)\n  end\n  return res\nend", "  local n =\
    \ #xs\n  if n == 0 then\n    return {}\n  end\n  local xs2 = {}\n  for i = 1,\
    \ n - 1 do\n    xs2[i] = xs[i + 1] * i\n  end\n  return xs2\nend", "  local result\
    \ = {}\n  for i = 1, #xs - 1 do\n    result[i] = (i + 1) * xs[i + 1]\n  end\n\
    \  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
