name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\n-- >>>\
  \ derivative({3, 1, 2, 4, 5})\n-- {1, 4, 12, 20}\n-- >>> derivative({1, 2, 3})\n\
  -- {2, 6}\nlocal function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    assert(type(xs) == \"table\")\n    local result = {}\n    for i,\
    \ x in ipairs(xs) do\n        if i > 1 then\n            table.insert(result,\
    \ (i - 1) * x)\n        end\n    end\n    return result\nend", "    local ys =\
    \ {}\n    for i, x in ipairs(xs) do\n        table.insert(ys, i * x)\n    end\n\
    \    return ys\nend", "    local result = {}\n    for i = 2, #xs do\n        table.insert(result,\
    \ (i - 1) * xs[i])\n    end\n    return result\nend", "  local out = {}\n  for\
    \ i = 1, #xs - 1 do\n    out[i] = xs[i] * (i)\n  end\n  return out\nend", "  \
    \  local result = {}\n    for i, x in ipairs(xs) do\n        if i > 1 then\n \
    \           table.insert(result, (i - 1) * x)\n        end\n    end\n    return\
    \ result\nend", "  local res = {}\n  for i = 2, #xs do\n    table.insert(res,\
    \ xs[i] * (i - 1))\n  end\n  return res\nend", "    local xs_new = {}\n    for\
    \ i = 2, #xs do\n        table.insert(xs_new, xs[i] * (i - 1))\n    end\n    return\
    \ xs_new\nend", "  local output = {}\n  for i = #xs, 2, -1 do\n    output[i -\
    \ 1] = i * xs[i]\n  end\n  return output\nend", "\tassert(#xs > 0)\n\tif #xs ==\
    \ 1 then\n\t\treturn {0}\n\tend\n\tlocal dxs = {}\n\tfor i = 1, #xs - 1 do\n\t\
    \tdxs[i] = xs[i] * (i + 1)\n\tend\n\treturn dxs\nend", "    local n = #xs\n  \
    \  assert(n > 0)\n    local ys = {}\n    for i = 1, n - 1 do\n        ys[i] =\
    \ xs[i + 1] * i\n    end\n    return ys\nend", "    local ds = {}\n    for i =\
    \ 1, #xs - 1 do\n        ds[i] = (i + 1) * xs[i + 1]\n    end\n    return ds\n\
    end", "    local dx = { }\n    for d = 1, #xs do\n        dx[d] = xs[d] * d\n\
    \    end\n    return dx\nend", "  local ys = {}\n  for i = 2, #xs do\n    ys[i\
    \ - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend", "    local d = {}\n    local\
    \ n = table.getn(xs) - 1\n    for i = 1, n do\n        d[i] = (i + 1) * xs[i +\
    \ 1]\n    end\n    return d\nend", "    local n = #xs - 1\n    local ys = {}\n\
    \    for i = n, 1, -1 do\n        ys[i] = xs[i] * i\n    end\n    return ys\n\
    end", "  local length = #xs\n  if length == 0 then\n    return {}\n  end\n  local\
    \ out = {}\n  for i = 2, length do\n    out[i - 1] = (i - 1) * xs[i]\n  end\n\
    \  return out\nend", "\tlocal result = {}\n\tfor i = 2, #xs do\n\t\tresult[i -\
    \ 1] = xs[i] * (i - 1)\n\tend\n\treturn result\nend", "  assert(type(xs) == \"\
    table\", \"derivative: xs must be a table\")\n  assert(#xs >= 1, \"derivative:\
    \ the input table must have at least one element\")\n  for i = 1, #xs do\n   \
    \ assert(type(xs[i]) == \"number\",\n           \"derivative: all elements of\
    \ xs must be numbers\")\n  end\n  local new_xs = {}\n  for i = 2, #xs do\n   \
    \ table.insert(new_xs, (i - 1) * xs[i])\n  end\n  return new_xs\nend", "  if #xs\
    \ == 0 then\n    return xs\n  end\n  local ys = {}\n  for i = 1, #xs - 1 do\n\
    \    ys[i] = xs[i] * (i + 1)\n  end\n  return ys\nend", "    if #xs == 0 then\n\
    \        return {}\n    end\n    local dxs = {}\n    for i = #xs, 2, -1 do\n \
    \       dxs[i - 1] = xs[i] * (i - 1)\n    end\n    return dxs\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
