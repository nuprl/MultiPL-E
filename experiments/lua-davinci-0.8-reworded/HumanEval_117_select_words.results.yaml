name: HumanEval_117_select_words
language: lua
results:
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    if #s == 0 then return {} end\n    local words = {}\n\
    \    local word = ''\n    local function count_consonants(s)\n        local consonants\
    \ = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'}\n        local count = 0\n        for i = 1, #s do\n\
    \            for k, v in pairs(consonants) do\n                if s:sub(i, i)\
    \ == v then\n                    count = count + 1\n                end\n    \
    \        end\n        end\n        return count\n    end\n    for i = 1, #s do\n\
    \        if s:sub(i, i) ~= ' ' then\n            word = word .. s:sub(i, i)\n\
    \        else\n            if count_consonants(word) == n then\n             \
    \   table.insert(words, word)\n            end\n            word = ''\n      \
    \  end\n    end\n    if count_consonants(word) == n then\n        table.insert(words,\
    \ word)\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78mxvu9j.lua:53:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp78mxvu9j.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  if #s == 0 then return {} end\n  local s = s:lower()\n\
    \  local consonants = 'bcdfghjklmnpqrstvwxyz'\n  local result = {}\n  for word\
    \ in s:gmatch('%w+') do\n    local count = 0\n    for char in word:gmatch('.')\
    \ do\n      if consonants:find(char) then count = count + 1 end\n    end\n   \
    \ if count == n then table.insert(result, word) end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk7ucizy.lua:36:\
    \ expected: {\"Mary\", \"lamb\"}\nactual: {\"mary\", \"lamb\"}\nstack traceback:\n\
    \t/tmp/tmpxk7ucizy.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cc3psau.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp4cc3psau.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        local nc = 0\n        for c in word:gmatch(\"%a\") do\n            nc\
    \ = nc + (vowels[c] and 0 or 1)\n        end\n        if nc == n then\n      \
    \      t[#t+1] = word\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwtnweboe.lua:22:\
    \ attempt to index a nil value (global 'vowels')\nstack traceback:\n\t/tmp/tmpwtnweboe.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpwtnweboe.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal u = {}\n\tfor w in s:gmatch(\"%S+\"\
    ) do\n\t\tlocal c = 0\n\t\tfor i = 1, w:len() do\n\t\t\tlocal ch = w:sub(i, i)\n\
    \t\t\tif not VOWELS[ch] then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\t\tif c\
    \ == n then\n\t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_fm1oyym.lua:24:\
    \ attempt to index a nil value (global 'VOWELS')\nstack traceback:\n\t/tmp/tmp_fm1oyym.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp_fm1oyym.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    s = s:lower()\n    local word = ''\n    local words\
    \ = {}\n    local vowels = 'aeiou'\n    local count = 0\n    for i = 1, s:len()\
    \ do\n        local letter = s:sub(i, i)\n        if letter ~= ' ' then\n    \
    \        word = word .. letter\n        else\n            for j = 1, vowels:len()\
    \ do\n                if word:find(vowels:sub(j, j)) then\n                  \
    \  count = count + 1\n                end\n            end\n            if count\
    \ == n then\n                table.insert(words, word)\n            end\n    \
    \        word = ''\n            count = 0\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zvl5a57.lua:46:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4zvl5a57.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    -- write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps63jlbe2.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmps63jlbe2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local function is_consonant(c)\n    return not c:match(\"\
    [aeiouAEIOU]\")\n  end\n  local result = {}\n  for word in s:gmatch(\"%S+\") do\n\
    \    local count = 0\n    for i = 1, #word do\n      count = count + (is_consonant(word:sub(i,\
    \ i)) and 1 or 0)\n    end\n    if count == n then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        local count = 0\n        for c in word:gmatch('[^aeiou]') do\n      \
    \      count = count + 1\n        end\n        if count == n then\n          \
    \  table.insert(words, word)\n        end\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjh6nha2.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmjh6nha2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local w = ''\n  for c in s:gmatch('%w')\
    \ do\n    w = w .. c\n  end\n  for wd in w:gmatch('%S+') do\n    if wd:match('[aeiou]')\
    \ then\n      t[#t+1] = wd\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporvaqm6g.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Maryhadalittlelamb\"}\nstack traceback:\n\
    \t/tmp/tmporvaqm6g.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for word in s:gmatch('%w+') do\n\
    \        if #word == n then\n            table.insert(words, word)\n        end\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cpdcdu_.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmp2cpdcdu_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    if s == \"\" then\n        return {}\n    end\n    local\
    \ words = {}\n    local cons = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'}\n    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u', 'y'}\n    for word in s:gmatch(\"%S+\") do\n        local\
    \ cons_cnt = 0\n        for char in word:gmatch(\"%a\") do\n            if (not\
    \ t_contains(vowels, char)) then\n                cons_cnt = cons_cnt + 1\n  \
    \          end\n        end\n        if cons_cnt == n then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgw_5c4fh.lua:27:\
    \ attempt to call a nil value (global 't_contains')\nstack traceback:\n\t/tmp/tmpgw_5c4fh.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpgw_5c4fh.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    if s == \"\" then return words\
    \ end\n    local count = 0\n    for word in s:gmatch(\"%w+\") do\n        for\
    \ letter in word:gmatch(\"%a\") do\n            if letter:find(\"[^aeiouAEIOU]\"\
    ) then count = count + 1 end\n        end\n        if count == n then table.insert(words,\
    \ word) end\n        count = 0\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\t\
    local num = 0\n\t\tfor letter in word:gmatch(\"[^aeiou]\") do\n\t\t\tnum = num\
    \ + 1\n\t\tend\n\t\tif num == n then\n\t\t\ttable.insert(t, word)\n\t\tend\n\t\
    end\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1yxa5z1.lua:38:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpm1yxa5z1.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local word = {}\n    for c in\
    \ s:gmatch\".\" do\n        if c:match(\"%a\") then\n            table.insert(word,\
    \ c)\n        else\n            if #word == n then\n                table.insert(words,\
    \ table.concat(word))\n            end\n            word = {}\n        end\n \
    \   end\n    if #word == n then\n        table.insert(words, table.concat(word))\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvalvwiqk.lua:39:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpvalvwiqk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local w = {}\n    for x in s:gmatch(\"%S+\") do\n  \
    \      if #consonants(x) == n then\n            table.insert(w, x)\n        end\n\
    \    end\n    return w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4uoyvkpu.lua:20:\
    \ attempt to call a nil value (global 'consonants')\nstack traceback:\n\t/tmp/tmp4uoyvkpu.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp4uoyvkpu.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    -- your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps4c2mn1a.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmps4c2mn1a.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\ts:gsub('%w+', function(w)\n\t\tif #w:gsub('[aeiou]',\
    \ '') == n then\n\t\t\tt[#t+1] = w\n\t\tend\n\tend)\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvqqd1b8.lua:34:\
    \ expected: {\"Uncle\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvvqqd1b8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8i7a8pya.lua:23:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp8i7a8pya.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local w = {}\n    local function is_vowel(c)\n\
    \        return c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\n   \
    \ end\n    local function count_consonants(w)\n        local n = 0\n        for\
    \ c in w:gmatch(\"%a\") do\n            if not is_vowel(c) then\n            \
    \    n = n + 1\n            end\n        end\n        return n\n    end\n    for\
    \ m in s:gmatch(\"%w+\") do\n        table.insert(t, m)\n    end\n    for _, w\
    \ in ipairs(t) do\n        if count_consonants(w) == n then\n            table.insert(w,\
    \ w)\n        end\n    end\n    return w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjhctiaoe.lua:37:\
    \ bad argument #1 to 'insert' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpjhctiaoe.lua:37: in local 'candidate'\n\t/tmp/tmpjhctiaoe.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
