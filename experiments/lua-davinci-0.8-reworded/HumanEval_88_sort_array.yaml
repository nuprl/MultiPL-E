name: HumanEval_88_sort_array
language: lua
prompt: "-- Given a table of non-negative integers, return a colua of the given table\
  \ after sorting,\n-- you will sort the given table in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n-- >>> sort_array({5})\n\
  -- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0, 1, 2, 3, 4, 5}\n-- >>> sort_array({2,\
  \ 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2, 1, 0}\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = array[1] + array[#array]\n  local order\n  if sum % 2\
    \ == 0 then\n    order = \"desc\"\n  else\n    order = \"asc\"\n  end\n  table.sort(array,\
    \ function(a, b)\n    if order == \"asc\" then\n      return a < b\n    else\n\
    \      return a > b\n    end\n  end)\n  return array\nend", "    local i = 1\n\
    \    local j = #array\n    local tmp\n    local sum = array[i] + array[j]\n  \
    \  local order = (sum % 2 == 0)\n    while i < j do\n        if order then\n \
    \           if array[i] < array[j] then\n                tmp = array[i]\n    \
    \            array[i] = array[j]\n                array[j] = tmp\n           \
    \ end\n        else\n            if array[i] > array[j] then\n               \
    \ tmp = array[i]\n                array[i] = array[j]\n                array[j]\
    \ = tmp\n            end\n        end\n        i = i + 1\n        j = j - 1\n\
    \    end\n    return array\nend", "    -- Write your code here\n    local len\
    \ = #array\n    if len == 0 or len == 1 then\n        return array\n    end\n\
    \    local first = array[1]\n    local last = array[len]\n    if (first + last)\
    \ % 2 == 0 then\n        for i = 1, len / 2 do\n            array[i], array[len\
    \ - i + 1] = array[len - i + 1], array[i]\n        end\n    end\n    table.sort(array)\n\
    \    return array\nend", "    return array\nend", "    local array1 = {}\n   \
    \ local array2 = {}\n    local array_len = 0\n    local array_sum = 0\n    local\
    \ index = 0\n    local index1 = 0\n    local index2 = 0\n    local i = 0\n   \
    \ local temp = 0\n    for index, value in ipairs(array) do\n        array_len\
    \ = array_len + 1\n        array_sum = array_sum + value\n        if index % 2\
    \ == 0 then\n            index1 = index1 + 1\n            array1[index1] = value\n\
    \        else\n            index2 = index2 + 1\n            array2[index2] = value\n\
    \        end\n    end\n    if array_sum % 2 == 0 then\n        for i = 1, index1\
    \ do\n            for j = i, index1 do\n                if array1[i] < array1[j]\
    \ then\n                    temp = array1[i]\n                    array1[i] =\
    \ array1[j]\n                    array1[j] = temp\n                end\n     \
    \       end\n        end\n        for i = 1, index2 do\n            for j = i,\
    \ index2 do\n                if array2[i] > array2[j] then\n                 \
    \   temp = array2[i]\n                    array2[i] = array2[j]\n            \
    \        array2[j] = temp\n                end\n            end\n        end\n\
    \    else\n        for i = 1, index1 do\n            for j = i, index1 do\n  \
    \              if array1[i] > array1[j] then\n                    temp = array1[i]\n\
    \                    array1[i] = array1[j]\n                    array1[j] = temp\n\
    \                end\n            end\n        end\n        for i = 1, index2\
    \ do\n            for j = i, index2 do\n                if array2[i] < array2[j]\
    \ then\n                    temp = array2[i]\n                    array2[i] =\
    \ array2[j]\n                    array2[j] = temp\n                end\n     \
    \       end\n        end\n    end\n    local array_ret = {}\n    index1 = 0\n\
    \    index2 = 0\n    for i = 1, array_len do\n        if i % 2 == 0 then\n   \
    \        ", "    local t = table.move(array, 1, #array, 1, {})\n    if #t <= 1\
    \ then\n        return t\n    end\n    local v1, v2 = t[1], t[#t]\n    local sum\
    \ = v1 + v2\n    if sum % 2 == 0 then\n        table.sort(t, function(a, b) return\
    \ a > b end)\n    else\n        table.sort(t)\n    end\n    return t\nend", " \
    \   -- Write your code here\n    if #array == 0 then\n        return array\n \
    \   end\n    local sum = array[1] + array[#array]\n    local array_len = #array\n\
    \    if sum % 2 == 0 then\n        for i = 1, array_len - 1 do\n            for\
    \ j = i + 1, array_len do\n                if array[i] < array[j] then\n     \
    \               array[i], array[j] = array[j], array[i]\n                end\n\
    \            end\n        end\n    else\n        for i = 1, array_len - 1 do\n\
    \            for j = i + 1, array_len do\n                if array[i] > array[j]\
    \ then\n                    array[i], array[j] = array[j], array[i]\n        \
    \        end\n            end\n        end\n    end\n    return array\nend", " \
    \   local n = #array\n    local v = 0\n    for i = 1, n do\n        v = v + array[i]\n\
    \    end\n    if v % 2 == 0 then\n        local function compare(a, b)\n     \
    \       return a > b\n        end\n        table.sort(array, compare)\n    else\n\
    \        local function compare(a, b)\n            return a < b\n        end\n\
    \        table.sort(array, compare)\n    end\n    return array\nend", "    --\
    \ your code here\n    table.sort(array)\n    local i, j, tmp = 1, #array, 0\n\
    \    while i < j do\n        tmp = array[i]\n        array[i] = array[j]\n   \
    \     array[j] = tmp\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ array\nend", "    local total = 0\n    for i = 1, #array do\n        total =\
    \ total + array[i]\n    end\n    if total % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local sum = array[1]\
    \ + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array)\n    end\n    return\
    \ array\nend", "  if #array == 0 then\n    return array\n  end\n  if #array ==\
    \ 1 then\n    return array\n  end\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend", "    -- your code here\n    if #array == 0 then\n        return\
    \ array\n    end\n    if #array == 1 then\n        return array\n    end\n   \
    \ if #array % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "  if #array == 0 then\n    return array\n \
    \ end\n  if #array == 1 then\n    return array\n  end\n  if array[1] + array[#array]\
    \ % 2 == 0 then\n    for i = 1, math.floor(#array / 2) do\n      array[i], array[#array\
    \ - i + 1] = array[#array - i + 1], array[i]\n    end\n  end\n  local function\
    \ modifi(a, b)\n    return a < b\n  end\n  table.sort(array, modifi)\n  return\
    \ array\nend", "    if array[1] and array[#array] then\n        if (array[1] +\
    \ array[#array]) % 2 == 0 then\n            array = bubble_sort(array, sort_desc)\n\
    \        else\n            array = bubble_sort(array, sort_asc)\n        end\n\
    \    end\n    return array\nend", "    local function comp(a, b)\n        return\
    \ a < b\n    end\n    if #array == 0 or #array == 1 then\n        return array\n\
    \    end\n    if (array[1] + array[#array]) % 2 == 0 then\n        table.sort(array,\
    \ comp)\n    else\n        table.sort(array, function(a, b) return not comp(a,\
    \ b) end)\n    end\n    return array\nend", "    -- Implement your solution here.\n\
    \    return array\nend", "    if #array < 2 then\n        return array\n    end\n\
    \    local is_odd = (array[1] + array[#array]) % 2 == 1\n    return table.sort(array,\
    \ is_odd and function(a, b) return a < b end or function(a, b) return a > b end)\n\
    end", "    local first_val = array[1]\n    local last_val = array[#array]\n  \
    \  local num = first_val + last_val\n    local result = {}\n    for k, v in pairs(array)\
    \ do\n        result[k] = v\n    end\n    local function odd_sort(a, b)\n    \
    \    return a < b\n    end\n    local function even_sort(a, b)\n        return\
    \ a > b\n    end\n    if num % 2 == 0 then\n        table.sort(result, even_sort)\n\
    \    else\n        table.sort(result, odd_sort)\n    end\n    return result\n\
    end", "    local res = array\n    local first_index_value = array[1]\n    local\
    \ last_index_value = array[#array]\n    local i = 2\n    local n = #array\n  \
    \  local flag = first_index_value + last_index_value\n    if flag % 2 == 0 then\n\
    \        while i <= n do\n            res[i] = array[n + 1 - i]\n            i\
    \ = i + 1\n        end\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
