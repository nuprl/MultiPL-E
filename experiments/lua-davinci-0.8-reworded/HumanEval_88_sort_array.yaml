name: HumanEval_88_sort_array
language: lua
prompt: "-- Given a table of non-negative integers, return a colua of the given table\
  \ after sorting,\n-- you will sort the given table in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given table.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n-- >>> sort_array({5})\n\
  -- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0, 1, 2, 3, 4, 5}\n-- >>> sort_array({2,\
  \ 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2, 1, 0}\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = array[1] + array[#array]\n  local order\n  if sum % 2\
    \ == 0 then\n    order = \"desc\"\n  else\n    order = \"asc\"\n  end\n  table.sort(array,\
    \ function(a, b)\n    if order == \"asc\" then\n      return a < b\n    else\n\
    \      return a > b\n    end\n  end)\n  return array\nend", "    local i = 1\n\
    \    local j = #array\n    local tmp\n    local sum = array[i] + array[j]\n  \
    \  local order = (sum % 2 == 0)\n    while i < j do\n        if order then\n \
    \           if array[i] < array[j] then\n                tmp = array[i]\n    \
    \            array[i] = array[j]\n                array[j] = tmp\n           \
    \ end\n        else\n            if array[i] > array[j] then\n               \
    \ tmp = array[i]\n                array[i] = array[j]\n                array[j]\
    \ = tmp\n            end\n        end\n        i = i + 1\n        j = j - 1\n\
    \    end\n    return array\nend", "    -- Write your code here\n    local len\
    \ = #array\n    if len == 0 or len == 1 then\n        return array\n    end\n\
    \    local first = array[1]\n    local last = array[len]\n    if (first + last)\
    \ % 2 == 0 then\n        for i = 1, len / 2 do\n            array[i], array[len\
    \ - i + 1] = array[len - i + 1], array[i]\n        end\n    end\n    table.sort(array)\n\
    \    return array\nend", "    return array\nend", "    local array1 = {}\n   \
    \ local array2 = {}\n    local array_len = 0\n    local array_sum = 0\n    local\
    \ index = 0\n    local index1 = 0\n    local index2 = 0\n    local i = 0\n   \
    \ local temp = 0\n    for index, value in ipairs(array) do\n        array_len\
    \ = array_len + 1\n        array_sum = array_sum + value\n        if index % 2\
    \ == 0 then\n            index1 = index1 + 1\n            array1[index1] = value\n\
    \        else\n            index2 = index2 + 1\n            array2[index2] = value\n\
    \        end\n    end\n    if array_sum % 2 == 0 then\n        for i = 1, index1\
    \ do\n            for j = i, index1 do\n                if array1[i] < array1[j]\
    \ then\n                    temp = array1[i]\n                    array1[i] =\
    \ array1[j]\n                    array1[j] = temp\n                end\n     \
    \       end\n        end\n        for i = 1, index2 do\n            for j = i,\
    \ index2 do\n                if array2[i] > array2[j] then\n                 \
    \   temp = array2[i]\n                    array2[i] = array2[j]\n            \
    \        array2[j] = temp\n                end\n            end\n        end\n\
    \    else\n        for i = 1, index1 do\n            for j = i, index1 do\n  \
    \              if array1[i] > array1[j] then\n                    temp = array1[i]\n\
    \                    array1[i] = array1[j]\n                    array1[j] = temp\n\
    \                end\n            end\n        end\n        for i = 1, index2\
    \ do\n            for j = i, index2 do\n                if array2[i] < array2[j]\
    \ then\n                    temp = array2[i]\n                    array2[i] =\
    \ array2[j]\n                    array2[j] = temp\n                end\n     \
    \       end\n        end\n    end\n    local array_ret = {}\n    index1 = 0\n\
    \    index2 = 0\n    for i = 1, array_len do\n        if i % 2 == 0 then\n   \
    \        ", "    local t = table.move(array, 1, #array, 1, {})\n    if #t <= 1\
    \ then\n        return t\n    end\n    local v1, v2 = t[1], t[#t]\n    local sum\
    \ = v1 + v2\n    if sum % 2 == 0 then\n        table.sort(t, function(a, b) return\
    \ a > b end)\n    else\n        table.sort(t)\n    end\n    return t\nend", " \
    \   -- Write your code here\n    if #array == 0 then\n        return array\n \
    \   end\n    local sum = array[1] + array[#array]\n    local array_len = #array\n\
    \    if sum % 2 == 0 then\n        for i = 1, array_len - 1 do\n            for\
    \ j = i + 1, array_len do\n                if array[i] < array[j] then\n     \
    \               array[i], array[j] = array[j], array[i]\n                end\n\
    \            end\n        end\n    else\n        for i = 1, array_len - 1 do\n\
    \            for j = i + 1, array_len do\n                if array[i] > array[j]\
    \ then\n                    array[i], array[j] = array[j], array[i]\n        \
    \        end\n            end\n        end\n    end\n    return array\nend", " \
    \   local n = #array\n    local v = 0\n    for i = 1, n do\n        v = v + array[i]\n\
    \    end\n    if v % 2 == 0 then\n        local function compare(a, b)\n     \
    \       return a > b\n        end\n        table.sort(array, compare)\n    else\n\
    \        local function compare(a, b)\n            return a < b\n        end\n\
    \        table.sort(array, compare)\n    end\n    return array\nend", "    --\
    \ your code here\n    table.sort(array)\n    local i, j, tmp = 1, #array, 0\n\
    \    while i < j do\n        tmp = array[i]\n        array[i] = array[j]\n   \
    \     array[j] = tmp\n        i = i + 1\n        j = j - 1\n    end\n    return\
    \ array\nend", "    local total = 0\n    for i = 1, #array do\n        total =\
    \ total + array[i]\n    end\n    if total % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local sum = array[1]\
    \ + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array)\n    end\n    return\
    \ array\nend", "  if #array == 0 then\n    return array\n  end\n  if #array ==\
    \ 1 then\n    return array\n  end\n  local sum = array[1] + array[#array]\n  if\
    \ sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend", "    -- your code here\n    if #array == 0 then\n        return\
    \ array\n    end\n    if #array == 1 then\n        return array\n    end\n   \
    \ if #array % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "  if #array == 0 then\n    return array\n \
    \ end\n  if #array == 1 then\n    return array\n  end\n  if array[1] + array[#array]\
    \ % 2 == 0 then\n    for i = 1, math.floor(#array / 2) do\n      array[i], array[#array\
    \ - i + 1] = array[#array - i + 1], array[i]\n    end\n  end\n  local function\
    \ modifi(a, b)\n    return a < b\n  end\n  table.sort(array, modifi)\n  return\
    \ array\nend", "    if array[1] and array[#array] then\n        if (array[1] +\
    \ array[#array]) % 2 == 0 then\n            array = bubble_sort(array, sort_desc)\n\
    \        else\n            array = bubble_sort(array, sort_asc)\n        end\n\
    \    end\n    return array\nend", "    local function comp(a, b)\n        return\
    \ a < b\n    end\n    if #array == 0 or #array == 1 then\n        return array\n\
    \    end\n    if (array[1] + array[#array]) % 2 == 0 then\n        table.sort(array,\
    \ comp)\n    else\n        table.sort(array, function(a, b) return not comp(a,\
    \ b) end)\n    end\n    return array\nend", "    -- Implement your solution here.\n\
    \    return array\nend", "    if #array < 2 then\n        return array\n    end\n\
    \    local is_odd = (array[1] + array[#array]) % 2 == 1\n    return table.sort(array,\
    \ is_odd and function(a, b) return a < b end or function(a, b) return a > b end)\n\
    end", "    local first_val = array[1]\n    local last_val = array[#array]\n  \
    \  local num = first_val + last_val\n    local result = {}\n    for k, v in pairs(array)\
    \ do\n        result[k] = v\n    end\n    local function odd_sort(a, b)\n    \
    \    return a < b\n    end\n    local function even_sort(a, b)\n        return\
    \ a > b\n    end\n    if num % 2 == 0 then\n        table.sort(result, even_sort)\n\
    \    else\n        table.sort(result, odd_sort)\n    end\n    return result\n\
    end", "    local res = array\n    local first_index_value = array[1]\n    local\
    \ last_index_value = array[#array]\n    local i = 2\n    local n = #array\n  \
    \  local flag = first_index_value + last_index_value\n    if flag % 2 == 0 then\n\
    \        while i <= n do\n            res[i] = array[n + 1 - i]\n            i\
    \ = i + 1\n        end\n    end\n    return res\nend", "  return {}\nend", " \
    \ -- implementation here\nend", "    if #array < 2 then\n        return array\n\
    \    end\n    local first, last = array[1], array[#array]\n    if (first + last)\
    \ % 2 == 0 then\n        table.sort(array, function(lhs, rhs) return lhs > rhs\
    \ end)\n    else\n        table.sort(array, function(lhs, rhs) return lhs < rhs\
    \ end)\n    end\n    return array\nend", "    local lhs = array[1]\n    local\
    \ rhs = array[#array]\n    local first_index = 1\n    local last_index = #array\n\
    \    local sum = lhs + rhs\n    local odd = (sum % 2) == 1\n    local n = #array\n\
    \    local temp\n    if odd then\n        for i = 1, n - 1 do\n            for\
    \ j = 1, n - i do\n                lhs = array[j]\n                rhs = array[j\
    \ + 1]\n                if lhs > rhs then\n                    temp = array[j]\n\
    \                    array[j] = array[j + 1]\n                    array[j + 1]\
    \ = temp\n                end\n            end\n        end\n    else\n      \
    \  for i = 1, n - 1 do\n            for j = 1, n - i do\n                lhs =\
    \ array[j]\n                rhs = array[j + 1]\n                if lhs < rhs then\n\
    \                    temp = array[j]\n                    array[j] = array[j +\
    \ 1]\n                    array[j + 1] = temp\n                end\n         \
    \   end\n        end\n    end\n    return array\nend", "    if #array == 0 then\n\
    \        return array\n    end\n    local first = array[1]\n    local last = array[#array]\n\
    \    if (first + last) % 2 == 0 then\n        return table.sort(array, function(x,\
    \ y) return x > y end)\n    else\n        return table.sort(array, function(x,\
    \ y) return x < y end)\n    end\nend", "    -- TODO: implement this function\n\
    end", "\tlocal len = #array\n\tlocal sum = array[1] + array[len]\n\tif sum % 2\
    \ == 0 then\n\t\treturn t.reverse(array)\n\telse\n\t\treturn array\n\tend\nend",
  "    local array_length = #array\n    local sum = array[1] + array[array_length]\n\
    \    local index\n    if sum % 2 == 0 then\n        for i = 1, array_length -\
    \ 1 do\n            index = i\n            for j = i + 1, array_length do\n  \
    \              if array[j] > array[index] then\n                    index = j\n\
    \                end\n            end\n            array[i], array[index] = array[index],\
    \ array[i]\n        end\n    else\n        for i = 1, array_length - 1 do\n  \
    \          index = i\n            for j = i + 1, array_length do\n           \
    \     if array[j] < array[index] then\n                    index = j\n       \
    \         end\n            end\n            array[i], array[index] = array[index],\
    \ array[i]\n        end\n    end\n    return array\nend", "    if #array == 0\
    \ then\n        return array\n    end\n    local a = 0\n    local b = #array\n\
    \    if (a + b) % 2 == 0 then\n        table.sort(array, function(a, b) return\
    \ a > b end)\n    else\n        table.sort(array, function(a, b) return a < b\
    \ end)\n    end\n    return array\nend", "    local result = { }\n    for i =\
    \ 1, #array do\n        table.insert(result, array[i])\n    end\n    if #result\
    \ == 0 or #result == 1 then\n        return result\n    end\n    if #result %\
    \ 2 == 0 then\n        table.sort(result, function(a, b) return a > b end)\n \
    \   else\n        table.sort(result, function(a, b) return a < b end)\n    end\n\
    \    return result\nend", "  local arrayCopy = array\n  -- todo\n  local upDown\n\
    \  local firstIndex = arrayCopy[1]\n  local lastIndex = arrayCopy[#arrayCopy]\n\
    \  local firstIndexLastIndexSum = firstIndex + lastIndex\n  if firstIndexLastIndexSum\
    \ % 2 == 0 then\n    upDown = true\n  else\n    upDown = false\n  end\n  table.sort(arrayCopy,\
    \ function(a, b)\n    if upDown then\n      return a > b\n    else\n      return\
    \ a < b\n    end\n  end)\n  return arrayCopy\nend", "    -- your code here\n \
    \   return array\nend", "    if #array == 0 then\n        return array\n    end\n\
    \    table.sort(array, function(a, b)\n        if (a + b) % 2 == 0 then\n    \
    \        return a > b\n        else\n            return a < b\n        end\n \
    \   end)\n    return array\nend", "    local sum = array[1] + array[#array]\n\
    \    local function cmp(a, b)\n        if sum % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(array,\
    \ cmp)\n    return array\nend", "    local function asc_compare(i, j)\n      \
    \  return i < j\n    end\n    local function desc_compare(i, j)\n        return\
    \ i > j\n    end\n    local t = #array\n    if t == 0 or t == 1 then\n       \
    \ return array\n    end\n    local compare = asc_compare\n    if (array[1] + array[t])\
    \ % 2 == 0 then\n        compare = desc_compare\n    end\n    table.sort(array,\
    \ compare)\n    return array\nend", "    if #array < 2 then\n        return array\n\
    \    end\n    local b = {table.unpack(array)}\n    local sum = b[1] + b[#b]\n\
    \    local is_odd = sum % 2 == 1\n    if is_odd then\n        table.sort(b)\n\
    \    else\n        table.sort(b, function(x, y) return x > y end)\n    end\n \
    \   return b\nend", "    local len = #array\n    if len == 0 or len == 1 then\n\
    \        return array\n    end\n    local sum = array[1] + array[len]\n    if\
    \ sum % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "  if array and #array > 0 then\n    local index = (array[1]\
    \ + array[#array]) % 2\n    table.sort(array, function(a, b)\n      if index ==\
    \ 1 then\n        return a < b\n      else\n        return a > b\n      end\n\
    \    end)\n  end\n  return array\nend", "    local function _is_even(num)\n  \
    \      return num % 2 == 0\n    end", "    return {}\nend", "    local res = {}\n\
    \    for _, v in ipairs(array) do\n        table.insert(res, v)\n    end\n   \
    \ local f = function(a, b)\n        if #array % 2 == 0 then\n            return\
    \ a > b\n        else\n            return a < b\n        end\n    end\n    table.sort(res,\
    \ f)\n    return res\nend", "    local sum = 0\n    for i = 1, #array do\n   \
    \     sum = sum + array[i]\n    end\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local sum = 0\n\
    \    for i, v in ipairs(array) do\n        sum = sum + v\n    end\n    -- Use\
    \ the built-in Lua sort algorithm\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array)\n    end\n\
    \    return array\nend", "    local sum = array[1] + array[#array]\n    if sum\
    \ % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array)\n    end\n    return array\nend", "  -- your\
    \ code here\n  local sum = array[1] + array[#array]\n  for i = 1, #array - 1 do\n\
    \    for j = 1, #array - i do\n      if sum % 2 == 0 then\n        if array[j]\
    \ < array[j + 1] then\n          array[j], array[j + 1] = array[j + 1], array[j]\n\
    \        end\n      else\n        if array[j] > array[j + 1] then\n          array[j],\
    \ array[j + 1] = array[j + 1], array[j]\n        end\n      end\n    end\n  end\n\
    \  return array\nend", "    if #array == 0 then\n        return array\n    end\n\
    \    local method = array[1] + array[#array]\n    if method % 2 == 0 then\n  \
    \      table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array,\
    \ function(a, b) return a < b end)\n    end\n    return array\nend", "    local\
    \ sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n        return table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        return table.sort(array)\n\
    \    end\nend", "    -- Write your code here\n    -- \u8BA1\u7B97\u5217\u8868\u957F\
    \u5EA6\n    local length = 0\n    for _ in pairs(array) do\n        length = length\
    \ + 1\n    end\n    if length < 2 then\n        return array\n    end\n    local\
    \ first = array[1]\n    local last = array[length]\n    -- \u5224\u65AD\u662F\u5426\
    \u9700\u8981\u5347\u5E8F\u6392\u5217\n    local order = first + last > 0 and last\
    \ + first > 0\n    -- \u6392\u5E8F\n    table.sort(array, function(a, b)\n   \
    \     if order then\n            return a < b\n        else\n            return\
    \ a > b\n        end\n    end)\n    return array\nend", "    local function quick_sort(a,\
    \ b, c)\n        local i, j = a, c\n        local key = b[(a + c) // 2]\n    \
    \    while i <= j do\n            while b[i] < key do\n                i = i +\
    \ 1\n            end\n            while b[j] > key do\n                j = j -\
    \ 1\n            end\n            if i <= j then\n                b[i], b[j] =\
    \ b[j], b[i]\n                i = i + 1\n                j = j - 1\n         \
    \   end\n        end\n        if a < j then\n            quick_sort(a, b, j)\n\
    \        end\n        if i < c then\n            quick_sort(i, b, c)\n       \
    \ end\n    end\n    if not array or #array == 0 then\n        return array\n \
    \   end\n    local temp = {}\n    for i = 1, #array do\n        temp[i] = array[i]\n\
    \    end\n    if (temp[1] + temp[#temp]) % 2 == 0 then\n        quick_sort(1,\
    \ temp, #temp)\n    else\n        quick_sort(1, temp, #temp)\n        for i =\
    \ 1, #temp // 2 do\n            temp[i], temp[#temp - i + 1] = temp[#temp - i\
    \ + 1], temp[i]\n        end\n    end\n    return temp\nend", "  if #array ==\
    \ 0 then\n    return array\n  end\n  if #array % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array, function(a,\
    \ b) return a < b end)\n  end\n  return array\nend", "    -- TODO: Implement it.\n\
    end", "    local left = array[1]\n    local right = array[#array]\n    local cmp\
    \ = left + right > 0 and function(a, b) return a > b end or function(a, b) return\
    \ a < b end\n    table.sort(array, cmp)\n    return array\nend", "  local sum\
    \ = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  if sum % 2 ==\
    \ 0 then\n    return table.sort(array, function(a, b) return a > b end)\n  else\n\
    \    return table.sort(array, function(a, b) return a < b end)\n  end\nend", " \
    \ local sum = array[1] + array[#array]\n  if sum % 2 == 0 then\n    local function\
    \ cmp(a, b)\n      return a > b\n    end\n    table.sort(array, cmp)\n  else\n\
    \    local function cmp(a, b)\n      return a < b\n    end\n    table.sort(array,\
    \ cmp)\n  end\n  return array\nend", "  return array\nend", "    local function\
    \ desc(a, b)\n        return a > b\n    end\n    local function asc(a, b)\n  \
    \      return a < b\n    end\n    table.sort(array, #array % 2 == 0 and desc or\
    \ asc)\n    return array\nend", "    if next(array) then\n        if #array %\
    \ 2 == 0 then\n            table.sort(array, function(a, b) return a > b end)\n\
    \        else\n            table.sort(array)\n        end\n    end\n    return\
    \ array\nend", "  local n = #array\n  if n == 0 then\n    return array\n  end\n\
    \  local array2 = {}\n  for i = 1, n do\n    array2[i] = array[i]\n  end\n  table.sort(array2)\n\
    \  if (array[1] + array[n]) % 2 == 0 then\n    local i = 1\n    while i <= n /\
    \ 2 do\n      array[i], array[n + 1 - i] = array2[n + 1 - i], array2[i]\n    \
    \  i = i + 1\n    end\n  else\n    for i = 1, n do\n      array[i] = array2[i]\n\
    \    end\n  end\n  return array\nend", "\tif #array == 0 then\n\t\treturn array\n\
    \tend\n\tif #array == 1 then\n\t\treturn array\n\tend\n\tif array[1] + array[#array]\
    \ % 2 == 0 then\n\t\ttable.sort(array, function(v1, v2) return v1 > v2 end)\n\t\
    else\n\t\ttable.sort(array, function(v1, v2) return v1 < v2 end)\n\tend\n\treturn\
    \ array\nend", "    local sum = 0\n    local flag = false\n    for k, v in pairs(array)\
    \ do\n        sum = sum + v\n    end\n    if sum % 2 == 0 then\n        flag =\
    \ true\n    end\n    local function qsort(a, l, r)\n        if l >= r then\n \
    \           return\n        end\n        local i = l\n        local j = r\n  \
    \      local pivot = a[i]\n        while i < j do\n            if flag then\n\
    \                while i < j and a[j] >= pivot do\n                    j = j -\
    \ 1\n                end\n                if i < j then\n                    a[i]\
    \ = a[j]\n                    i = i + 1\n                end\n               \
    \ while i < j and a[i] <= pivot do\n                    i = i + 1\n          \
    \      end\n                if i < j then\n                    a[j] = a[i]\n \
    \                   j = j - 1\n                end\n            else\n       \
    \         while i < j and a[j] <= pivot do\n                    j = j - 1\n  \
    \              end\n                if i < j then\n                    a[i] =\
    \ a[j]\n                    i = i + 1\n                end\n                while\
    \ i < j and a[i] >= pivot do\n                    i = i + 1\n                end\n\
    \                if i < j then\n                    a[j] = a[i]\n            \
    \        j = j - 1\n                end\n            end\n        end\n      \
    \  a[i] = pivot\n        qsort(a, l, i - 1)\n        qsort(a, i + 1, r)\n    end\n\
    \    qsort(array, 1, #array)\n    return array\nend", "    local sum = array[1]\
    \ + array[#array]\n    table.sort(array, function(a, b)\n        if sum % 2 ==\
    \ 0 then\n            return a > b\n        else\n            return a < b\n \
    \       end\n    end)\n    return array\nend", "\tlocal x = array[1] + array[#array]\n\
    \tif x % 2 == 0 then\n\t\treturn sorted(array, true)\n\telse\n\t\treturn sorted(array)\n\
    \tend\nend", "    local sum = 0\n    for i = 1, #array do\n        sum = sum +\
    \ array[i]\n    end\n    local result = {}\n    for i = 1, #array do\n       \
    \ result[i] = array[i]\n    end\n    if sum % 2 == 0 then\n        table.sort(result,\
    \ function(x, y) return x > y end)\n    else\n        table.sort(result, function(x,\
    \ y) return x < y end)\n    end\n    return result\nend", "  if #array == 0 then\n\
    \    return array\n  end\n  if #array == 1 then\n    return array\n  end\n  local\
    \ total = 0\n  for i = 1, #array do\n    total = total + array[i]\n  end\n  if\
    \ total % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend", "\tarray = array or {}\n\tlocal temp_array = table.copy(array)\n\
    \ttable.sort(temp_array)\n\tlocal sum = temp_array[1] + temp_array[#temp_array]\n\
    \tif sum % 2 == 0 then\n\t\ttable.reverse(temp_array)\n\tend\n\treturn temp_array\n\
    end", "  if #array == 0 then\n    return array\n  end\n  local last_index = #array\n\
    \  local last_element = array[last_index]\n  local first_element = array[1]\n\
    \  if (first_element + last_element) % 2 == 0 then\n    local new_array = {}\n\
    \    for i=1, last_index do\n      new_array[i] = array[last_index-i+1]\n    end\n\
    \    return new_array\n  else\n    return array\n  end\nend", '  local array_length
    = #array', "    if #array == 0 then\n        return array\n    end\n    local\
    \ sum = array[1] + array[#array]\n    local sorted = {}\n    for _, v in ipairs(array)\
    \ do\n        table.insert(sorted, v)\n    end\n    table.sort(sorted, function(a,\
    \ b)\n        if sum % 2 == 0 then\n            return a > b\n        else\n \
    \           return a < b\n        end\n    end)\n    return sorted\nend", "  local\
    \ result, sum = {}, 0\n  for i, v in ipairs(array) do\n    if i == 1 or i == #array\
    \ then\n      sum = sum + v\n    end\n    result[i] = v\n  end\n  if sum % 2 ==\
    \ 0 then\n    table.sort(result, function(a, b) return a > b end)\n  else\n  \
    \  table.sort(result)\n  end\n  return result\nend", "    local head, tail = array[1],\
    \ array[#array]\n    local order = (head + tail) % 2 == 0 and 1 or -1\n    table.sort(array,\
    \ function(a, b) return a * order < b * order end)\n    return array\nend", " \
    \ local key = math.random(1, 2)\n  local temp = {}\n  for i=1, #array do\n   \
    \ temp[i] = array[i]\n  end\n  table.sort(temp, function(a, b) return a > b end)\n\
    \  if key == 1 then\n    return temp\n  else\n    return array\n  end\nend", " \
    \   if not array then\n        return {}\n    end\n    local copy = copy_table(array)\n\
    \    if not copy then\n        return copy\n    end\n    local len = #copy\n \
    \   if len < 2 then\n        return copy\n    end\n    local left = copy[1]\n\
    \    local right = copy[len]\n    if (left + right) % 2 == 0 then\n        for\
    \ i = 1, len do\n            for j = i + 1, len do\n                if copy[i]\
    \ < copy[j] then\n                    copy[i], copy[j] = copy[j], copy[i]\n  \
    \              end\n            end\n        end\n    else\n        for i = 1,\
    \ len do\n            for j = i + 1, len do\n                if copy[i] > copy[j]\
    \ then\n                    copy[i], copy[j] = copy[j], copy[i]\n            \
    \    end\n            end\n        end\n    end\n    return copy\nend", "    local\
    \ is_odd = (#array % 2) == 1\n    local function merge(a, b)\n        local c\
    \ = {}\n        while #a > 0 and #b > 0 do\n            if is_odd then\n     \
    \           if a[1] < b[1] then\n                    table.insert(c, table.remove(a,\
    \ 1))\n                else\n                    table.insert(c, table.remove(b,\
    \ 1))\n                end\n            else\n                if a[1] > b[1] then\n\
    \                    table.insert(c, table.remove(a, 1))\n                else\n\
    \                    table.insert(c, table.remove(b, 1))\n                end\n\
    \            end\n        end\n        while #a > 0 do\n            table.insert(c,\
    \ table.remove(a, 1))\n        end\n        while #b > 0 do\n            table.insert(c,\
    \ table.remove(b, 1))\n        end\n        return c\n    end\n    local function\
    \ merge_sort(array)\n        if #array <= 1 then\n            return array\n \
    \       end\n        local middle = math.floor(#array / 2)\n        local left\
    \ = merge_sort(table.pack(table.unpack(array, 1, middle)))\n        local right\
    \ = merge_sort(table.pack(table.unpack(array, middle + 1, #array)))\n        return\
    \ merge(left, right)\n    end\n    return table.pack(table.unpack(merge_sort(array)))\n\
    end", "    if #array == 0 then\n        return array\n    end\n    local sum =\
    \ array[1] + array[#array]\n    local is_odd = (sum % 2 == 1)\n    local comparetor\
    \ = is_odd and \">\" or \"<\"\n    local function cmp(a, b)\n        return (a\
    \ > b) == is_odd\n    end\n    table.sort(array, cmp)\n    return array\nend",
  "    if #array < 2 then\n        return array\n    end\n    if (array[1] + array[#array])\
    \ % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "  -- your code here\n  if #array == 0 then\n  \treturn\
    \ array\n  end\n  if #array == 1 then\n  \treturn array\n  end\n  if #array %\
    \ 2 == 0 then\n  \ttable.sort(array, function(a, b) return a > b end)\n  else\n\
    \  \ttable.sort(array, function(a, b) return a < b end)\n  end\n  return array\n\
    end", "\tlocal sum = 0\n\tfor k, v in pairs(array) do\n\t\tsum = sum + v\n\tend\n\
    \tif sum % 2 == 0 then\n\t\ttable.sort(array, function(a, b) return a > b end)\n\
    \telse\n\t\ttable.sort(array)\n\tend\n\treturn array\nend", "  -- TODO: Implement\
    \ your code here\n  --return #array == 0 and {} or {2, 4, 3, 0, 1, 5}\n  if #array\
    \ == 0 then\n    return {}\n  end\n  if #array == 1 then\n    return array\n \
    \ end\n  local left = 1\n  local right = #array\n  local sum = array[left] + array[right]\n\
    \  if sum % 2 == 0 then\n    local t = array[left]\n    array[left] = array[right]\n\
    \    array[right] = t\n  end\n  for i = 1, #array do\n    for j = i + 1, #array\
    \ do\n      if array[i] > array[j] then\n        local tmp = array[i]\n      \
    \  array[i] = array[j]\n        array[j] = tmp\n      end\n    end\n  end\n  if\
    \ sum % 2 == 0 then\n    for i = 1, #array / 2 do\n      local tmp = array[i]\n\
    \      array[i] = array[#array - i + 1]\n      array[#array - i + 1] = tmp\n \
    \   end\n  end\n  return array\nend", end, "    local sum = 0\n    for _, v in\
    \ ipairs(array) do\n        sum = sum + v\n    end\n    local comp = function(a,\
    \ b)\n        if (sum % 2 == 0) then\n            return a > b\n        else\n\
    \            return a < b\n        end\n    end\n    table.sort(array, comp)\n\
    \    return array\nend", "    -- your code here\n    return {}\nend", "    local\
    \ sum = 0\n    for k, v in pairs(array) do\n        sum = sum + v\n    end\n \
    \   if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "    if (#array == 0) then\n        return {}\n\
    \    end\n    if (#array == 1) then\n        return {array[1]}\n    end\n    local\
    \ odds, evens = {}, {}\n    for index, value in ipairs(array) do\n        if (value\
    \ % 2 == 0) then\n            table.insert(evens, value)\n        else\n     \
    \       table.insert(odds, value)\n        end\n    end\n    table.sort(odds)\n\
    \    table.sort(evens, function(a, b) return a > b end)\n    return table.concat(odds,\
    \ ',') .. ',' .. table.concat(evens, ',')\nend", "    if #array == 0 then\n  \
    \      return array\n    end\n    local is_odd = false\n    if array[1] + array[#array]\
    \ % 2 == 1 then\n        is_odd = true\n    end\n    local function compare(x,\
    \ y)\n        if is_odd then\n            return x < y\n        else\n       \
    \     return x > y\n        end\n    end\n    table.sort(array, compare)\n   \
    \ return array\nend", "    array = array or {}\n    local o, e = {}, {}\n    for\
    \ i, v in ipairs(array) do\n        if i % 2 == 0 then\n            o[#o + 1]\
    \ = v\n        else\n            e[#e + 1] = v\n        end\n    end\n    table.sort(o)\n\
    \    table.sort(e, function(a, b) return a > b end)\n    for i, v in ipairs(o)\
    \ do\n        array[#array + 1] = v\n    end\n    for i, v in ipairs(e) do\n \
    \       array[#array + 1] = v\n    end\n    return array\nend", "  local function\
    \ function_name(a, b)\n    if a > b then\n      return 1\n    elseif a < b then\n\
    \      return -1\n    else\n      return 0\n    end\n  end\n  if table.getn(array)\
    \ < 2 then\n    return array\n  end\n  table.sort(array, function_name)\n  if\
    \ (array[1] + array[table.getn(array)]) % 2 == 0 then\n    return array\n  else\n\
    \    local out = {}\n    for i = table.getn(array), 1, -1 do\n      table.insert(out,\
    \ array[i])\n    end\n    return out\n  end\nend", "  if #array < 2 then\n   \
    \ return array\n  end\n  local sum = array[1] + array[#array]\n  if sum % 2 ==\
    \ 0 then\n    table.sort(array, function(a, b) return a > b end)\n  else\n   \
    \ table.sort(array, function(a, b) return a < b end)\n  end\n  return array\n\
    end", "    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n  \
    \      return Table.sort(array, function(a, b) return a > b end)\n    else\n \
    \       return Table.sort(array)\n    end\nend", "    local sum_first_last = 0\n\
    \    local first_value = 0\n    local last_value = 0\n    local table_size = #array\n\
    \    local new_table = {}\n    local table_index = 1\n    local sort_method =\
    \ 0\n    -- get sum of the first and last element\n    if table_size > 0 then\n\
    \        first_value = array[1]\n        last_value = array[table_size]\n    \
    \    sum_first_last = first_value + last_value\n    end\n    -- check whether\
    \ ascending or descending\n    if sum_first_last % 2 == 0 then\n        sort_method\
    \ = 1\n    else\n        sort_method = 2\n    end\n    -- print(\"first_value\"\
    , first_value)\n    -- print(\"last_value\", last_value)\n    -- print(\"sum_first_last\"\
    , sum_first_last)\n    -- print(\"sort_method\", sort_method)\n    -- sort the\
    \ array\n    local function sort_method_ascending(a, b)\n        return a < b\n\
    \    end\n    local function sort_method_descending(a, b)\n        return a >\
    \ b\n    end\n    if sort_method == 1 then\n        table.sort(array, sort_method_ascending)\n\
    \    else\n        table.sort(array, sort_method_descending)\n    end\n    --\
    \ copy the array to new_table\n    while table_index <= table_size do\n      \
    \  new_table[table_index] = array[table_index]\n        table_index = table_index\
    \ + 1\n    end\n    return new_table\nend", "  -- your code here\n  local size\
    \ = 0\n  for k, v in pairs(array) do\n    size = size + 1\n  end\n  if size ==\
    \ 0 then\n    return {}\n  end\n  if size == 1 then\n    return {array[1]}\n \
    \ end\n  local sum = array[1] + array[size]\n  local even = false\n  if sum %\
    \ 2 == 0 then\n    even = true\n  end\n  local new_array = {}\n  for i = 1, size\
    \ do\n    new_array[i] = array[i]\n  end\n  for i = 1, size do\n    for j = 1,\
    \ size - i do\n      if even then\n        if new_array[j] < new_array[j + 1]\
    \ then\n          new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n\
    \        end\n      else\n        if new_array[j] > new_array[j + 1] then\n  \
    \        new_array[j], new_array[j + 1] = new_array[j + 1], new_array[j]\n   \
    \     end\n      end\n    end\n  end\n  return new_array\nend", end, "  -- Write\
    \ your code here\n  return {}\nend", "    -- length of array\n    local len =\
    \ #array\n    -- sum of first value and last value\n    local sum = array[1] +\
    \ array[len]\n    -- sort function\n    local function comp(a, b)\n        if\
    \ sum % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    -- sort array\n    table.sort(array, comp)\n\
    \    -- return array\n    return array\nend", "    local sum, result = 0, {}\n\
    \    for i, v in ipairs(array) do\n        sum = sum + v\n        result[i] =\
    \ v\n    end\n    if sum % 2 == 0 then\n        sort(result, function(a, b) return\
    \ a > b end)\n    else\n        sort(result)\n    end\n    return result\nend",
  "  if #array == 0 then\n    return array\n  end\n  if #array == 1 then\n    return\
    \ array\n  end\n  local index_first = 1\n  local index_last = #array\n  local\
    \ sum = array[index_first] + array[index_last]\n  if sum % 2 == 0 then\n    for\
    \ i = 1, #array do\n      for j = i + 1, #array do\n        if array[i] < array[j]\
    \ then\n          array[i], array[j] = array[j], array[i]\n        end\n     \
    \ end\n    end\n  else\n    for i = 1, #array do\n      for j = i + 1, #array\
    \ do\n        if array[i] > array[j] then\n          array[i], array[j] = array[j],\
    \ array[i]\n        end\n      end\n    end\n  end\n  return array\nend", "  --\
    \ your code here\n  local function sum_indices(arr)\n    local sum = 0\n    for\
    \ k, v in pairs(arr) do\n      sum = sum + k + v\n    end\n    return sum\n  end\n\
    \  local c = {}\n  for k, v in pairs(array) do\n    table.insert(c, v)\n  end\n\
    \  if sum_indices(array) % 2 == 0 then\n    table.sort(c, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(c, function(a, b) return a < b end)\n  end\n\
    \  return c\nend", "  local s = 0\n  local len = #array\n  for i = 1, len do\n\
    \    s = s + array[i]\n  end\n  if s % 2 == 0 then\n    for i = 1, len do\n  \
    \    for j = 1, len - i do\n        if array[j] < array[j + 1] then\n        \
    \  array[j], array[j + 1] = array[j + 1], array[j]\n        end\n      end\n \
    \   end\n  else\n    for i = 1, len do\n      for j = 1, len - i do\n        if\
    \ array[j] > array[j + 1] then\n          array[j], array[j + 1] = array[j + 1],\
    \ array[j]\n        end\n      end\n    end\n  end\n  return array\nend", "  \
    \  local l1 = {}\n    local l2 = {}\n    local l3 = {}\n    local k = 1\n    local\
    \ h = 1\n    local count = 0\n    for i, v in ipairs(array) do\n        if k %\
    \ 2 == 0 then\n            l1[h] = v\n            h = h + 1\n        else\n  \
    \          l2[h] = v\n            h = h + 1\n        end\n        k = k + 1\n\
    \    end\n    if k > 2 then\n        table.sort(l1)\n        table.sort(l2, function(a,\
    \ b) return a > b end)\n        for i, v in ipairs(l1) do\n            count =\
    \ count + 1\n            l3[count] = v\n        end\n        for i, v in ipairs(l2)\
    \ do\n            count = count + 1\n            l3[count] = v\n        end\n\
    \    else\n        l3 = array\n    end\n    return l3\nend", "    -- write your\
    \ code here\n    if #array == 0 then\n        return array\n    end\n    local\
    \ is_odd = (array[1] + array[#array]) % 2 == 1\n    local compare = function(x,\
    \ y)\n        if x == y then\n            return false\n        end\n        if\
    \ is_odd then\n            return x < y\n        else\n            return x >\
    \ y\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end", "  local first, last = array[1], array[#array]\n  if (first + last) % 2\
    \ == 0 then\n    table.sort(array, function(a, b) return a > b end)\n  else\n\
    \    table.sort(array)\n  end\n  return array\nend", "    return --[[your code\
    \ here--]]\nend\n```", "  return {}\nend", "  local sum = array[1] + array[#array]\n\
    \  table.sort(array, function(x, y)\n    if sum % 2 == 0 then\n      return x\
    \ > y\n    else\n      return x < y\n    end\n  end)\n  return array\nend", " \
    \   local result = {}\n    local length = 0\n    for i, v in ipairs(array) do\n\
    \        table.insert(result, v)\n        length = length + 1\n    end\n    if\
    \ length < 2 then\n        return result\n    end\n    if ((result[1] + result[length])\
    \ % 2) == 0 then\n        table.sort(result, function(a, b) return a > b end)\n\
    \    else\n        table.sort(result, function(a, b) return a < b end)\n    end\n\
    \    return result\nend", "    -- 1. Given an empty table, return an empty table.\n\
    \    if #array == 0 then\n        return {}\n    end\n    -- 2. Given a table\
    \ with one element, return the table itself.\n    if #array == 1 then\n      \
    \  return array\n    end\n    -- 3. return a colua of the given table after sorting,\n\
    \    -- you will sort the given table in ascending order if the sum( first index\
    \ value, last index value) is odd,\n    -- or sort it in descending order if the\
    \ sum( first index value, last index value) is even.\n    local sum = array[1]\
    \ + array[#array]\n    if sum % 2 == 0 then\n        -- array should be sorted\
    \ in descending order.\n        for i = 1, #array - 1 do\n            for j =\
    \ i + 1, #array do\n                if array[i] < array[j] then\n            \
    \        array[i], array[j] = array[j], array[i]\n                end\n      \
    \      end\n        end\n    else\n        -- array should be sorted in ascending\
    \ order.\n        for i = 1, #array - 1 do\n            for j = i + 1, #array\
    \ do\n                if array[i] > array[j] then\n                    array[i],\
    \ array[j] = array[j], array[i]\n                end\n            end\n      \
    \  end\n    end\n    return array\nend", "    -- check empty array\n    if #array\
    \ == 0 then\n        return array\n    end\n    -- check ascending and descending\n\
    \    if (array[1] + array[#array]) % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend", "    local sum = 0\n    for i,\
    \ v in ipairs(array) do\n        sum = sum + v\n    end\n    local function less(x,\
    \ y)\n        if sum % 2 == 0 then\n            return x > y\n        else\n \
    \           return x < y\n        end\n    end\n    table.sort(array, less)\n\
    \    return array\nend", "    local table_index = {}\n    local table_index_value\
    \ = {}\n    local table_index_sort = {}\n    local table_index_value_sort = {}\n\
    \    local value = 0\n    local flag = true\n    for i in ipairs(array) do\n \
    \       table.insert(table_index, i)\n        table.insert(table_index_value,\
    \ array[i])\n    end\n    if array[1] == nil then\n        return {}\n    end\n\
    \    for i in ipairs(table_index_value) do\n        if (flag == true) then\n \
    \           for j in ipairs(table_index_value) do\n                if (table_index_value[i]\
    \ > table_index_value[j]) then\n                    value = table_index_value[i]\n\
    \                    table_index_value[i] = table_index_value[j]\n           \
    \         table_index_value[j] = value\n                end\n            end\n\
    \        else\n            for j in ipairs(table_index_value) do\n           \
    \     if (table_index_value[i] < table_index_value[j]) then\n                \
    \    value = table_index_value[i]\n                    table_index_value[i] =\
    \ table_index_value[j]\n                    table_index_value[j] = value\n   \
    \             end\n            end\n        end\n    end\n    for i in ipairs(table_index_value)\
    \ do\n        for j in ipairs(table_index) do\n            if (table_index_value[i]\
    \ == array[j]) then\n                table.insert(table_index_sort, j)\n     \
    \           table.insert(table_index_value_sort, table_index_value[i])\n     \
    \       end\n        end\n    end\n    if (table_index_sort[1] + table_index_sort[#table_index_sort])\
    \ % 2 == 0 then\n        flag = false\n    end\n    for i in ipairs(table_index_value)\
    \ do\n        if (flag == true) then\n            for j in ipairs(table_index_value)\
    \ do\n                if (table_index_value[i] > table_index_value[j]) then\n\
    \                    value = table", "    -- write your code here\nend", "  local\
    \ sum_first_last = array[1] + array[#array]\n  if sum_first_last % 2 == 0 then\n\
    \    table.sort(array, function(a, b) return a > b end)\n  else\n    table.sort(array)\n\
    \  end\n  return array\nend", "  local sum = array[1] + array[#array]\n  if sum\
    \ % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n  else\n\
    \    table.sort(array)\n  end\n  return array\nend", "    if not array then\n\
    \        return {}\n    end\n    local array_length = #array\n    if array_length\
    \ == 0 then\n        return {}\n    end\n    local first = array[1]\n    local\
    \ last = array[array_length]\n    if (first + last) % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "  if (#array % 2 ==\
    \ 0) then\n    table.sort(array, function(a, b) return a > b end)\n  else\n  \
    \  table.sort(array)\n  end\n  return array\nend", "    local sum = array[1] +\
    \ array[#array]\n    if sum % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array)\n    end\n    return\
    \ array\nend", "  local result = {}\n  for i = 1, #array do\n    result[i] = array[i]\n\
    \  end\n  table.sort(result, function(a, b)\n    if (#array + 1) % 2 == 0 then\n\
    \      return a > b\n    else\n      return a < b\n    end\n  end)\n  return result\n\
    end", "    local function is_odd(num)\n        return num % 2 == 1\n    end\n\
    \    local function sum(a, b)\n        return a + b\n    end\n    local function\
    \ table_sum(t)\n        local len = #t\n        local half = math.floor(len /\
    \ 2)\n        local first_half = table.pack(table.unpack(t, 1, half))\n      \
    \  local second_half = table.pack(table.unpack(t, half + 1, len))\n        local\
    \ sum_of_first_half = table.reduce(first_half, sum)\n        local sum_of_second_half\
    \ = table.reduce(second_half, sum)\n        return sum_of_first_half + sum_of_second_half\n\
    \    end\n    local sum_of_array = table_sum(array)\n    local is_ascending =\
    \ is_odd(sum_of_array)\n    local function compare(a, b)\n        if is_ascending\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end\n    local function compare_sort(a, b)\n        if a == b then\n\
    \            return 0\n        elseif compare(a, b) then\n            return -1\n\
    \        else\n            return 1\n        end\n    end\n    table.sort(array,\
    \ compare_sort)\n    return array\nend", "  local sum = array[1] + array[#array]\n\
    \  if sum % 2 == 0 then\n    table.sort(array, function(a, b) return a > b end)\n\
    \  else\n    table.sort(array)\n  end\n  return array\nend", "    local len =\
    \ #array\n    local is_odd = len % 2 == 1\n    local left = is_odd and 1 or 2\n\
    \    local right = is_odd and len or len - 1\n    local index = len", "    local\
    \ array_sum = 0\n    for i, v in ipairs(array) do\n        array_sum = array_sum\
    \ + v\n    end\n    if array_sum % 2 == 0 then\n        table.sort(array, function(x,\
    \ y) return x > y end)\n    else\n        table.sort(array, function(x, y) return\
    \ x < y end)\n    end\n    return array\nend", "    if #array == 0 then\n    \
    \    return array\n    end\n    local is_even = false\n    if (array[1] + array[#array])\
    \ % 2 == 0 then\n        is_even = true\n    end\n    if is_even then\n      \
    \  table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array,\
    \ function(a, b) return a < b end)\n    end\n    return array\nend", "    local\
    \ r = {table.unpack(array)}\n    local f = math.fmod(r[1] + r[#r], 2) == 0 and\
    \ function(a, b) return a > b end or function(a, b) return a < b end\n    table.sort(r,\
    \ f)\n    return r\nend", "    if #array == 0 then\n        return array\n   \
    \ end\n    local first = array[1]\n    local last = array[#array]\n    if (first\
    \ + last) % 2 == 0 then\n        table.sort(array, function(a, b) return a > b\
    \ end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "    -- Write your code here\n    local i =\
    \ 1\n    local j = #array\n    local flag = true\n    while i < j do\n       \
    \ while i < j and array[i] < array[j] do\n            i = i + 1\n        end\n\
    \        if i < j then\n            array[i], array[j] = array[j], array[i]\n\
    \            j = j - 1\n        end\n        while i < j and array[i] < array[j]\
    \ do\n            j = j - 1\n        end\n        if i < j then\n            array[i],\
    \ array[j] = array[j], array[i]\n            i = i + 1\n        end\n    end\n\
    \    return array\nend", "    if #array == 0 then\n        return array\n    end\n\
    \    local is_odd = false\n    if array[1] + array[#array] % 2 == 1 then\n   \
    \     is_odd = true\n    end\n    local function cmp(a, b)\n        if is_odd\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end\n    table.sort(array, cmp)\n    return array\nend", "    return\
    \ nil\nend", "    return\nend", "  local sum = array[1] + array[#array]\n  local\
    \ is_odd = sum % 2 == 1\n  local function cmp(lhs, rhs)\n    if is_odd then\n\
    \      return lhs < rhs\n    else\n      return lhs > rhs\n    end\n  end\n  local\
    \ result = {}\n  for i = 1, #array do\n    result[i] = array[i]\n  end\n  table.sort(result,\
    \ cmp)\n  return result\nend", "    if #array < 2 then\n        return array\n\
    \    end\n    local a = array[1]\n    local b = array[#array]\n    if (a + b)\
    \ % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array)\n    end\n    return array\nend", "    --\
    \ for k, v in pairs(array) do\n    --     print(k, v)\n    -- end\n    local sum\
    \ = array[1] + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(v1, v2) return v1 > v2 end)\n    else\n        table.sort(array, function(v1,\
    \ v2) return v1 < v2 end)\n    end\n    return array\nend", "\t-- write your code\
    \ here\n\tlocal first=array[1]\n\tlocal last=array[#array]\n\tlocal sum=first+last\n\
    \tlocal table={}\n\tif #array==0 then\n\t\treturn table\n\telseif #array==1 then\n\
    \t\ttable[1]=first\n\t\treturn table\n\telseif sum%2==0 then\n\t\tfor i=1,#array\
    \ do\n\t\t\ttable[i]=array[#array-i+1]\n\t\tend\n\t\treturn table\n\telse\n\t\t\
    return array\n\tend\nend", "    local function copy(t)\n        local result =\
    \ {}\n        for i = 1, #t do\n            result[i] = t[i]\n        end\n  \
    \      return result\n    end\n    local array2 = copy(array)\n    table.sort(array2)\n\
    \    if array[1] + array[#array] % 2 == 0 then\n        local len = #array2\n\
    \        for i = 1, len/2 do\n            array2[i], array2[len-i+1] = array2[len-i+1],\
    \ array2[i]\n        end\n    end\n    return array2\nend", "    local isDescending\
    \ = #array > 0 and array[1] + array[#array] % 2 == 0\n    table.sort(array, function(a,\
    \ b)\n        if isDescending then\n            return a > b\n        else\n \
    \           return a < b\n        end\n    end)\n    return array\nend", "  --\
    \ your code here\n  local i,j = 1,#array\n  while i<j do\n    if array[i]%2==0\
    \ and array[j]%2==1 then i=i+1\n    elseif array[i]%2==1 and array[j]%2==0 then\
    \ j=j-1\n    elseif array[i]>array[j] then array[i],array[j]=array[j],array[i]\n\
    \    else\n      i=i+1\n      j=j-1\n    end\n  end\n  if i==j and #array>1 and\
    \ array[1]%2==0 and array[j]%2==0 then array[i],array[1]=array[1],array[i] end\n\
    \  return array\nend", "  local function compare(a, b)\n    if array[1] + array[#array]\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, compare)\n  return array\nend", "    if not array then\n\
    \        return {}\n    end\n    local function odd(a, b)\n        return a <\
    \ b\n    end\n    local function even(a, b)\n        return a > b\n    end\n \
    \   if #array <= 1 then\n        return array\n    end\n    local head = array[1]\n\
    \    local last = array[#array]\n    if (head + last) % 2 == 0 then\n        table.sort(array,\
    \ even)\n    else\n        table.sort(array, odd)\n    end\n    return array\n\
    end", "  local sum = 0\n  local temp_array = {}\n  for k, v in pairs(array) do\n\
    \    sum = sum + v\n    table.insert(temp_array, v)\n  end\n  if sum % 2 == 0\
    \ then\n    table.sort(temp_array, function(a, b) return a > b end)\n  else\n\
    \    table.sort(temp_array, function(a, b) return a < b end)\n  end\n  return\
    \ temp_array\nend", "    -- TODO: Implement this function!\nend", "    local size\
    \ = #array\n    local sum = array[1] + array[size]\n    local compare = sum %\
    \ 2 == 0 and (function(a, b) return a > b end) or (function(a, b) return a < b\
    \ end)\n    table.sort(array, compare)\n    return array\nend", "    -- Write\
    \ your code here\n    return array\nend", "  local even, odd = {}, {}\n  for i,\
    \ v in ipairs(array) do\n    if (i + v) % 2 == 0 then\n      table.insert(even,\
    \ v)\n    else\n      table.insert(odd, v)\n    end\n  end\n  table.sort(even)\n\
    \  table.sort(odd, function(a, b) return a > b end)\n  for i, v in ipairs(odd)\
    \ do\n    table.insert(even, i, v)\n  end\n  return even\nend", "  local first,\
    \ last = array[1], array[#array]\n  local sum = first + last\n  table.sort(array,\
    \ sum % 2 == 0 and greater_or_equal or less_or_equal)\n  return array\nend", " \
    \   local function is_even(num)\n        return num % 2 == 0\n    end", "    --\
    \ no data to sort\n    if #array == 0 then\n        return array\n    end", end,
  "    local n = #array\n    if n <= 1 then\n        return array\n    end\n    if\
    \ (array[1] + array[n]) % 2 == 0 then\n        for i = 1, math.floor(n / 2) do\n\
    \            array[i], array[n - i + 1] = array[n - i + 1], array[i]\n       \
    \ end\n    end\n    table.sort(array)\n    return array\nend\n_exports.sort_array\
    \ = sort_array", "  return array\nend", "  local start = array[1]\n  local end\
    \ = array[#array]\n  local sum = start + end\n  table.sort(array, function(a,\
    \ b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n      return a <\
    \ b\n    end\n  end)\n  return array\nend", "    if #array == 0 then\n       \
    \ return array\n    end\n    if #array == 1 then\n        return array\n    end\n\
    \    local f = array[1]\n    local l = array[#array]\n    if (f + l) % 2 == 0\
    \ then\n        table.sort(array, function(a, b) return a > b end)\n    else\n\
    \        table.sort(array, function(a, b) return a < b end)\n    end\n    return\
    \ array\nend", "    local new_array = {}\n    local sign = #array == 0 or (array[1]\
    \ + array[#array]) % 2 == 0 and -1 or 1\n    for i, v in ipairs(array) do\n  \
    \      local index = 1\n        for j, c in ipairs(new_array) do\n           \
    \ if sign * v < sign * c then\n                index = j\n                break\n\
    \            end\n        end\n        table.insert(new_array, index, v)\n   \
    \ end\n    return new_array\nend", "    local function odd_even(a, b)\n      \
    \  return (a + b) % 2 == 0\n    end\n    local function odd_even_sort(a, b)\n\
    \        if odd_even(a, b) then\n            return a > b\n        else\n    \
    \        return a < b\n        end\n    end\n    table.sort(array, odd_even_sort)\n\
    \    return array\nend", "    local sum = 0\n    local has_element = false\n \
    \   for i = 1, #array do\n        sum = sum + array[i]\n        has_element =\
    \ true\n    end\n    if not has_element then\n        return array\n    end\n\
    \    local ascending = (sum % 2) == 1\n    for i = 1, #array - 1 do\n        for\
    \ j = i + 1, #array do\n            if ascending then\n                if array[i]\
    \ > array[j] then\n                    array[i], array[j] = array[j], array[i]\n\
    \                end\n            else\n                if array[i] < array[j]\
    \ then\n                    array[i], array[j] = array[j], array[i]\n        \
    \        end\n            end\n        end\n    end\n    return array\nend", " \
    \ local a, b, c = 0, 0, 1\n  if #array % 2 == 0 then\n    c = -1\n  end\n  for\
    \ i = 1, #array do\n    a = array[i]\n    for j = i, #array do\n      b = array[j]\n\
    \      if c * (a - b) > 0 then\n        array[i], array[j] = b, a\n        a =\
    \ b\n      end\n    end\n  end\n  return array\nend", "    return {}\nend", " \
    \ local sum = array[1] + array[#array]\n  local function comp(a, b)\n    if sum\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, comp)\n  return array\nend", "    local length = #array\n\
    \    if length == 0 or length == 1 then\n        return array\n    end\n    local\
    \ sum = array[1] + array[length]\n    local is_odd = math.fmod(sum, 2) == 1\n\
    \    local i = 1\n    local j = length\n    while i < j do\n        if is_odd\
    \ then\n            if array[i] > array[j] then\n                array[i], array[j]\
    \ = array[j], array[i]\n            end\n        else\n            if array[i]\
    \ < array[j] then\n                array[i], array[j] = array[j], array[i]\n \
    \           end\n        end\n        i = i + 1\n        j = j - 1\n    end\n\
    \    return array\nend", "    local sum = array[1] + array[#array]\n    if sum\
    \ % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array)\n    end\n    return array\nend", "    local\
    \ sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array)\n    end\n\
    \    return array\nend", "    -- Your code here\n    -- \u5192\u6CE1\u6392\u5E8F\
    \n    if array == nil or #array == 0 then\n        return {}\n    end\n    for\
    \ i = 1, #array - 1 do\n        for j = 1, #array - i do\n            if array[j]\
    \ > array[j + 1] then\n                array[j], array[j + 1] = array[j + 1],\
    \ array[j]\n            end\n        end\n    end\n    if array[1] + array[#array]\
    \ % 2 == 0 then\n        return array\n    else\n        for i = 1, #array / 2\
    \ do\n            array[i], array[#array - i + 1] = array[#array - i + 1], array[i]\n\
    \        end\n        return array\n    end\nend", "  local function sort_test(a,\
    \ b)\n    if a + b % 2 == 0 then\n      return a > b\n    else\n      return a\
    \ < b\n    end\n  end\n  table.sort(array, sort_test)\n  return array\nend", end,
  "    local sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array)\n    end\n\
    \    return array\nend", "    if #array % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array)\n    end\n\
    \    return array\nend", "    local sum = array[1] + array[#array]\n    local\
    \ comp = (sum % 2 == 0) and function(a, b) return a > b end or function(a, b)\
    \ return a < b end\n    table.sort(array, comp)\n    return array\nend", "   \
    \ if #array <= 1 then\n        return array\n    end\n    if array[1] + array[#array]\
    \ % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "\tlocal sum, asc = array[1] + array[#array], true\n\t\
    if sum % 2 == 0 then\n\t\tasc = false\n\tend\n\tlocal temp\n\tfor i = 1, #array\
    \ - 1 do\n\t\tfor j = i + 1, #array do\n\t\t\tif asc then\n\t\t\t\tif array[i]\
    \ > array[j] then\n\t\t\t\t\ttemp = array[i]\n\t\t\t\t\tarray[i] = array[j]\n\t\
    \t\t\t\tarray[j] = temp\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif array[i] < array[j]\
    \ then\n\t\t\t\t\ttemp = array[i]\n\t\t\t\t\tarray[i] = array[j]\n\t\t\t\t\tarray[j]\
    \ = temp\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn array\nend", "    if\
    \ not next(array) then\n        return array\n    end\n    -- write your code\
    \ here\nend", "    -- Write your code here\n    return array\nend", end, "  --\
    \ write your code here\n  local newArray = array\n  local head = array[1]\n  local\
    \ tail = array[#array]\n  if (head + tail) % 2 == 0 then\n    table.sort(newArray,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(newArray, function(a,\
    \ b) return a < b end)\n  end\n  return newArray\nend", "    local odd_checker\
    \ = function (n)\n        if n % 2 == 0 then\n            return true\n      \
    \  else\n            return false\n        end\n    end\n    local sort_func =\
    \ function (a, b)\n        if odd_checker(a + b) then\n            return a <\
    \ b\n        else\n            return a > b\n        end\n    end\n    table.sort(array,\
    \ sort_func)\n    return array\nend", end, "    if #array == 0 then\n        return\
    \ array\n    end\n    if #array == 1 then\n        return array\n    end\n   \
    \ if (#array + array[1] + array[#array]) % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local len = #array\n\
    \    local ret = {}\n    local t = {}\n    for i = 1, len do\n        table.insert(t,\
    \ {i, array[i]})\n    end\n    if len == 0 or len == 1 then\n        return array\n\
    \    end\n    local odd = true\n    if (array[1] + array[len]) % 2 == 0 then\n\
    \        odd = false\n    end\n    if odd then\n        table.sort(t, function(a,\
    \ b)\n            return a[2] < b[2]\n        end)\n    else\n        table.sort(t,\
    \ function(a, b)\n            return a[2] > b[2]\n        end)\n    end\n    for\
    \ i = 1, len do\n        table.insert(ret, t[i][2])\n    end\n    return ret\n\
    end", "    array = array or {}\n    if #array == 0 or #array == 1 then\n     \
    \   return array\n    end\n    local is_asc = array[1] + array[#array] % 2 ==\
    \ 0\n    if is_asc then\n        table.sort(array)\n    else\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    end\n    return array\nend", "    local\
    \ function cmp(a, b)\n        if a[1] + a[#a] % 2 == 0 then\n            return\
    \ a[1] < b[1]\n        else\n            return a[1] > b[1]\n        end\n   \
    \ end\n    table.sort(array, cmp)\n    return array\nend", "    -- Implement your\
    \ code here.\n    return {}\nend", "    -- Write your code here\n    local odd\
    \ = false\n    local sum = 0\n    local temp = {}\n    local result = {}\n   \
    \ if array[1] == nil then\n        return {}\n    end\n    if array[2] == nil\
    \ then\n        return array\n    end\n    for i=1, #array do\n        sum = sum\
    \ + array[i]\n    end\n    if sum % 2 == 0 then\n        odd = true\n    end\n\
    \    for i=1, #array do\n        temp[i] = array[i]\n    end\n    for i=1, #array\
    \ do\n        local min = 99999\n        local max = -1\n        local index =\
    \ 0\n        for j=1, #temp do\n            if temp[j] < min then\n          \
    \      min = temp[j]\n                index = j\n            end\n           \
    \ if temp[j] > max then\n                max = temp[j]\n                index\
    \ = j\n            end\n        end\n        if odd then\n            result[i]\
    \ = min\n            temp[index] = 99999\n        else\n            result[i]\
    \ = max\n            temp[index] = -1\n        end\n    end\n    return result\n\
    end", "\tif #array == 0 then\n\t\treturn array\n\tend\n\tif array[1] % 2 ~= array[#array]\
    \ % 2 then\n\t\ttable.sort(array)\n\telse\n\t\ttable.sort(array, function(a, b)\
    \ return a > b end)\n\tend\n\treturn array\nend", "    local sum = 0\n    for\
    \ i, v in ipairs(array) do\n        sum = sum + i + v\n    end\n    if sum % 2\
    \ == 0 then\n        table.sort(array, function(a, b) return a > b end)\n    else\n\
    \        table.sort(array)\n    end\n    return array\nend", "    if #array <\
    \ 2 then\n        return array\n    end\n    local reverse = true\n    if (array[1]\
    \ + array[#array]) % 2 == 1 then\n        reverse = false\n    end\n    table.sort(array,\
    \ function(x, y)\n        if reverse then\n            return x > y\n        else\n\
    \            return x < y\n        end\n    end)\n    return array\nend", "  \
    \  -- Write your code here\n    --\n    --               array { 1, 2, 4, 5, 6\
    \ }\n    --                  |          |\n    --   sum is odd(2 + 6)        \
    \ |\n    --                  |       sum is even(1 + 5)\n    --   ascending order(index\
    \ 1 + index 5)\n    --   array { 1, 2, 5, 4, 6 }\n    --\n    --   find index\
    \ of value 1,  array[index] = 1\n    --       right_index = 5\n    --       left_index\
    \ = 1\n    --       sum_index = left_index + right_index\n    --   sum of index\
    \ is even(1 + 5)\n    --       sort in descending order\n    --       array[right_index]\
    \ < array[left_index]\n    --\n    --\n    --   find index of value 5,  array[index]\
    \ = 5\n    --       right_index = 4\n    --       left_index = 2\n    --     \
    \  sum_index = left_index + right_index\n    --   sum of index is odd(2 + 4)\n\
    \    --       sort in ascending order\n    --       array[right_index] > array[left_index]\n\
    \    --\n    --   find index of value 4,  array[index] = 4\n    --       right_index\
    \ = 2\n    --       left_index = 3\n    --       sum_index = left_index + right_index\n\
    \    --   sum of index is even(3 + 2)\n    --       sort in descending order\n\
    \    --       array[right_index] < array[left_index]\n    --\n    --   find index\
    \ of value 2,  array[index] = 2\n    --       right_index = 6\n    --       left_index\
    \ = 0\n    --       sum_index = left_index + right_index\n    --   sum of index\
    \ is even(0 + 6)\n    --       sort in descending order\n    --       array[right_index]\
    \ < array[left_index]\n    --\n    --   find index of value 6,  array[index] =\
    \ 6\n    --       right_index = 1\n    --       left_index = 4\n    --       sum_index\
    \ = left_index + right", "    -- your code here\nend", end, "    local sum = 0\n\
    \    for k, v in pairs(array) do\n        sum = sum + k + v\n    end\n    local\
    \ method = (sum % 2 == 0) and function(a, b) return a > b end or function(a, b)\
    \ return a < b end\n    table.sort(array, method)\n    return array\nend", " \
    \   -- return {}\n    -- return array\n    -- return {0, 1, 2, 3, 4, 5}\n    --\
    \ return {6, 5, 4, 3, 2, 1, 0}\n    return array\nend", "    local length = #array\n\
    \    if length < 2 then\n        return array\n    end\n    local sum = array[1]\
    \ + array[length]\n    local logic = sum % 2 == 0 and true or false\n    table.sort(array,\
    \ function(a, b)\n        if logic then\n            return a > b\n        else\n\
    \            return a < b\n        end\n    end)\n    return array\nend", "  \
    \  local b = {}\n    local i = 1\n    while i <= #array do\n        table.insert(b,\
    \ i, array[i])\n        i = i + 1\n    end\n    if (#array > 0 and #array % 2\
    \ == 0) or (#array > 0 and array[1] % 2 == 0) then\n        table.sort(b, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(b, function(a, b) return\
    \ a < b end)\n    end\n    return b\nend", "    -- Check the given table.\n  \
    \  assert(type(array) == \"table\", \"param #1 must be a table\")\n    local n\
    \ = #array\n    if n == 0 then\n        return array\n    end\n    -- Create a\
    \ temp table to save the original table.\n    local temp = {}\n    for i = 1,\
    \ n do\n        temp[i] = array[i]\n    end\n    -- Sort the temp table.\n   \
    \ if (temp[1] + temp[n]) % 2 == 0 then\n        -- Even.\n        table.sort(temp,\
    \ function(a, b) return a > b end)\n    else\n        -- Odd.\n        table.sort(temp,\
    \ function(a, b) return a < b end)\n    end\n    -- Return the temp table.\n \
    \   return temp\nend", "  local sum = 0\n  for k, v in pairs(array) do\n    sum\
    \ = sum + v\n  end\n  local arr = {}\n  for k, v in pairs(array) do\n    table.insert(arr,\
    \ v)\n  end\n  if (sum % 2 == 0) then\n    table.sort(arr, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(arr, function(a, b) return a < b end)\n \
    \ end\n  return arr\nend", "    local sum = 0\n    local ans = {}\n    for i,\
    \ v in ipairs(array) do\n        ans[i] = v\n        sum = sum + v\n    end\n\
    \    if sum % 2 == 0 then\n        table.sort(ans, function(a, b) return a > b\
    \ end)\n    else\n        table.sort(ans)\n    end\n    return ans\nend", "  if\
    \ #array < 2 then\n    return array\n  end\n  local f,l = array[1], array[#array]\n\
    \  if (f+l)%2 == 0 then\n    return nil\n  end\n  table.sort(array)\n  return\
    \ array\nend", "    -- Please write your code here\n    local new_array = {}\n\
    \    for i, v in ipairs(array) do\n        new_array[i] = v\n    end\n    if #new_array\
    \ == 0 then\n        return new_array\n    end\n    if new_array[1] + new_array[#new_array]\
    \ % 2 == 0 then\n        for i = 1, #new_array - 1 do\n            for j = i +\
    \ 1, #new_array do\n                if new_array[i] < new_array[j] then\n    \
    \                new_array[i], new_array[j] = new_array[j], new_array[i]\n   \
    \             end\n            end\n        end\n    else\n        for i = 1,\
    \ #new_array - 1 do\n            for j = i + 1, #new_array do\n              \
    \  if new_array[i] > new_array[j] then\n                    new_array[i], new_array[j]\
    \ = new_array[j], new_array[i]\n                end\n            end\n       \
    \ end\n    end\n    return new_array\nend", "  if #array == 0 then\n    return\
    \ array\n  end\n  local total = 0\n  for index, value in ipairs(array) do\n  \
    \  total = total + value\n  end\n  if total % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array, function(a,\
    \ b) return a < b end)\n  end\n  return array\nend", "  -- Write your code here\n\
    \  local sum = array[1] + array[#array]\n  if sum % 2 == 0 then\n    for i = 1,\
    \ #array - 1 do\n      for j = i + 1, #array do\n        if array[i] < array[j]\
    \ then\n          array[i], array[j] = array[j], array[i]\n        end\n     \
    \ end\n    end\n  else\n    for i = 1, #array - 1 do\n      for j = i + 1, #array\
    \ do\n        if array[i] > array[j] then\n          array[i], array[j] = array[j],\
    \ array[i]\n        end\n      end\n    end\n  end\n  return array\nend\nreturn\
    \ sort_array", "  if #array > 1 then\n    local i, j, a, b = 2, #array, array[1],\
    \ array[#array]\n    if (a + b) % 2 == 0 then\n      table.sort(array, function(x,\
    \ y) return x > y end)\n    else\n      table.sort(array)\n    end\n  end\n  return\
    \ array\nend", "    -- your code here\n    return array\nend", "  local sum =\
    \ array[1] + array[#array]\n  local asc = sum % 2 == 1\n  if #array < 2 then\n\
    \    return array\n  end\n  local new = {}\n  for i = 1, #array do\n    new[i]\
    \ = array[i]\n  end\n  for i = 1, #new do\n    for j = i + 1, #new do\n      if\
    \ asc then\n        if new[i] > new[j] then\n          new[i], new[j] = new[j],\
    \ new[i]\n        end\n      else\n        if new[i] < new[j] then\n         \
    \ new[i], new[j] = new[j], new[i]\n        end\n      end\n    end\n  end\n  return\
    \ new\nend", "    if #array == 0 then\n        return array\n    end\n    local\
    \ function is_odd(number)\n        return number % 2 == 1\n    end\n    local\
    \ sum = array[1] + array[#array]\n    if is_odd(sum) then\n        table.sort(array)\n\
    \    else\n        table.sort(array, function(a, b) return a > b end)\n    end\n\
    \    return array\nend", "    -- your code here\n    local c=0\n    local arr={}\n\
    \    local arr1={}\n    local arr2={}\n    local a={}\n    local b={}\n    local\
    \ k=0\n    local k1=0\n    local k2=0\n    local kk=0\n    local k1=0\n    for\
    \ i,v in ipairs(array) do\n        c=c+1\n    end\n    if c==0 then return {}\n\
    \    elseif c==1 then return array\n    else\n        for i,v in ipairs(array)\
    \ do\n            if i==1 then\n                k=k+1\n                arr[k]=v\n\
    \            elseif i==c then\n                k1=k1+1\n                arr1[k1]=v\n\
    \            else\n                k2=k2+1\n                arr2[k2]=v\n     \
    \       end\n        end\n        local sum=arr[1]+arr1[1]\n        if sum%2==0\
    \ then\n            for i,v in ipairs(arr2) do\n                for j,k in ipairs(arr2)\
    \ do\n                    if v>k then\n                        local temp=v\n\
    \                        arr2[i]=k\n                        arr2[j]=temp\n   \
    \                 end\n                end\n            end\n            for i,v\
    \ in ipairs(arr2) do\n                a[i]=v\n            end\n            for\
    \ i,v in ipairs(arr) do\n                kk=kk+1\n                a[kk]=v\n  \
    \          end\n            for i,v in ipairs(arr1) do\n                k1=k1+1\n\
    \                a[k1]=v\n            end\n            return a\n        else\n\
    \            for i,v in ipairs(arr2) do\n                for j,k in ipairs(arr2)\
    \ do\n                    if v<k then\n                        local temp=v\n\
    \                        arr2[i]=k\n                        arr2[j]=temp\n   \
    \                 end\n                end\n            end\n            for i,v\
    \ in ipairs(arr2) do\n                b[i]=v\n            end\n            for\
    \ i,v in ipairs(arr) do\n                kk=kk+1\n                b[kk]=", " \
    \ -- your code here\n  local temp = 0\n  local is_even = false\n  local len =\
    \ #array\n  for i = 1, len do\n    for j = 1, len do\n      if (i+j)%2 == 0 then\n\
    \        is_even = true\n      else\n        is_even = false\n      end\n    \
    \  if array[i] > array[j] and is_even == true then\n        temp = array[i]\n\
    \        array[i] = array[j]\n        array[j] = temp\n      elseif array[i] <\
    \ array[j] and is_even == false then\n        temp = array[i]\n        array[i]\
    \ = array[j]\n        array[j] = temp\n      end\n    end\n  end\n  return array\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
