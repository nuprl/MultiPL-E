name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n\
  -- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n-- true\n-- >>> is_prime(13441)\n\
  -- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n-- false\n-- >>> is_prime(1)\n\
  -- false\nlocal function is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n == 1 then\n        return false\n    end\n    if n == 2 then\n\
    \        return true\n    end\n    if n % 2 == 0 then\n        return false\n\
    \    end\n    local i = 3\n    while i <= math.sqrt(n) do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n        i = i + 2\n    end\n\
    \    return true\nend", "    return false\nend", "    if n == 1 then\n       \
    \ return false\n    end\n    if n == 2 then\n        return true\n    end\n  \
    \  for i = 2, n - 1 do\n        if (n % i) == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n <= 1 then\n        return\
    \ false\n    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "\t-- check\
    \ if n is divisible by any natural number less than or equal to the square root\
    \ of n\n\t-- if so, it's not prime\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t-- otherwise, it is prime\n\
    \treturn true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n % 2 ==\
    \ 0 then\n\t\treturn n == 2\n\tend\n\tif n % 3 == 0 then\n\t\treturn n == 3\n\t\
    end\n\tlocal d = 5\n\twhile d * d <= n do\n\t\tif n % d == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\td = d + 2\n\t\tif n % d == 0 then\n\t\t\treturn false\n\t\
    \tend\n\t\td = d + 4\n\tend\n\treturn true\nend", "    -- Start with a prime that's\
    \ at least the smallest possible divisor of the\n    -- number we're checking.\n\
    \    local i = 3\n    -- Check if the number is even.\n    if n % 2 == 0 then\n\
    \        return false\n    end\n    -- Go through every odd number (up to the\
    \ sqrt of the number) to see if it\n    -- can divide into the number we're checking.\n\
    \    while i <= math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n        i = i + 2\n    end\n    return true\nend", "   \
    \ if n == 1 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if n == 1 then\n    return false\n  end\n  for i =\
    \ 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    if n == 1 then\n        return false\n    end\n   \
    \ for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tassert(type(n) == \"number\")\n\tif n\
    \ == 1 then\n\t\treturn false\n\tend\n\tlocal i = 2\n\twhile i <= math.sqrt(n)\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  if n < 4 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  if n < 9 then\n    return true\n  end\n  if n % 3 == 0 then\n\
    \    return false\n  end\n  local r = math.floor(math.sqrt(n))\n  local f = 5\n\
    \  while f <= r do\n    if n % f == 0 then\n      return false\n    end\n    if\
    \ n % (f + 2) == 0 then\n      return false\n    end\n    f = f + 6\n  end\n \
    \ return true\nend", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n\
    \    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local\
    \ sq = math.floor(math.sqrt(n))\n  for i = 3, sq, 2 do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    -- Check if any\
    \ prime from primes list is a divisor of n\n    for _, p in ipairs(primes) do\n\
    \        if n % p == 0 then\n            return false\n        end\n    end",
  "  if n < 2 then\n    return false\n  end\n  for d = 2, math.sqrt(n) do\n    if\
    \ math.fmod(n, d) == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  -- Eliminate simple non-primes\n  if n < 2 then\n    return false\n \
    \ end\n  -- Check if n is prime\n  for i = 2, math.sqrt(n) do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "    -- We\
    \ don't need to check if even, as it's already been excluded by this\n    -- point.\n\
    \    for i = 3, math.sqrt(n), 2 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  if n < 2 then\n    return\
    \ false\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
