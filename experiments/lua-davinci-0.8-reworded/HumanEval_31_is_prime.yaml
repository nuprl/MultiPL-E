name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n\
  -- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n-- true\n-- >>> is_prime(13441)\n\
  -- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n-- false\n-- >>> is_prime(1)\n\
  -- false\nlocal function is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n == 1 then\n        return false\n    end\n    if n == 2 then\n\
    \        return true\n    end\n    if n % 2 == 0 then\n        return false\n\
    \    end\n    local i = 3\n    while i <= math.sqrt(n) do\n        if n % i ==\
    \ 0 then\n            return false\n        end\n        i = i + 2\n    end\n\
    \    return true\nend", "    return false\nend", "    if n == 1 then\n       \
    \ return false\n    end\n    if n == 2 then\n        return true\n    end\n  \
    \  for i = 2, n - 1 do\n        if (n % i) == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n <= 1 then\n        return\
    \ false\n    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "\t-- check\
    \ if n is divisible by any natural number less than or equal to the square root\
    \ of n\n\t-- if so, it's not prime\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i\
    \ == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t-- otherwise, it is prime\n\
    \treturn true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n % 2 ==\
    \ 0 then\n\t\treturn n == 2\n\tend\n\tif n % 3 == 0 then\n\t\treturn n == 3\n\t\
    end\n\tlocal d = 5\n\twhile d * d <= n do\n\t\tif n % d == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\td = d + 2\n\t\tif n % d == 0 then\n\t\t\treturn false\n\t\
    \tend\n\t\td = d + 4\n\tend\n\treturn true\nend", "    -- Start with a prime that's\
    \ at least the smallest possible divisor of the\n    -- number we're checking.\n\
    \    local i = 3\n    -- Check if the number is even.\n    if n % 2 == 0 then\n\
    \        return false\n    end\n    -- Go through every odd number (up to the\
    \ sqrt of the number) to see if it\n    -- can divide into the number we're checking.\n\
    \    while i <= math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n        i = i + 2\n    end\n    return true\nend", "   \
    \ if n == 1 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "  if n == 1 then\n    return false\n  end\n  for i =\
    \ 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    if n == 1 then\n        return false\n    end\n   \
    \ for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n <= 1 then\n    return false\n\
    \  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "\tassert(type(n) == \"number\")\n\tif n\
    \ == 1 then\n\t\treturn false\n\tend\n\tlocal i = 2\n\twhile i <= math.sqrt(n)\
    \ do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  if n < 4 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  if n < 9 then\n    return true\n  end\n  if n % 3 == 0 then\n\
    \    return false\n  end\n  local r = math.floor(math.sqrt(n))\n  local f = 5\n\
    \  while f <= r do\n    if n % f == 0 then\n      return false\n    end\n    if\
    \ n % (f + 2) == 0 then\n      return false\n    end\n    f = f + 6\n  end\n \
    \ return true\nend", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n\
    \    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local\
    \ sq = math.floor(math.sqrt(n))\n  for i = 3, sq, 2 do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    -- Check if any\
    \ prime from primes list is a divisor of n\n    for _, p in ipairs(primes) do\n\
    \        if n % p == 0 then\n            return false\n        end\n    end",
  "  if n < 2 then\n    return false\n  end\n  for d = 2, math.sqrt(n) do\n    if\
    \ math.fmod(n, d) == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  -- Eliminate simple non-primes\n  if n < 2 then\n    return false\n \
    \ end\n  -- Check if n is prime\n  for i = 2, math.sqrt(n) do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "    -- We\
    \ don't need to check if even, as it's already been excluded by this\n    -- point.\n\
    \    for i = 3, math.sqrt(n), 2 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  if n < 2 then\n    return\
    \ false\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "\tif n <= 1 then\n\t\treturn false\n\
    \tend\n\tfor d = 2, n - 1 do\n\t\tif n % d == 0 then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "\tassert(n > 0, \"Use only positive numbers\"\
    )\n\tif n == 1 then return false end\n\tfor i = 2, math.floor(math.sqrt(n)) do\n\
    \t\tif n % i == 0 then return false end\n\tend\n\treturn true\nend", "  if n ==\
    \ 1 then\n    return false\n  end\n  if n == 2 then\n    return true\n  end\n\
    \  for i = 2, n-1 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "\tif n <= 1 then\n\t\treturn false\n\tend\n\tfor i = 2,\
    \ math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tlocal i = 2\n\
    \twhile i <= math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn true\nend", "  -- Base case:\n  if n == 1\
    \ then\n    return false\n  elseif n == 2 then\n    return true\n  end", "  if\
    \ n < 2 then\n    return false\n  end\n  for d = 2, math.sqrt(n) do\n    if n\
    \ % d == 0 then\n      return false\n    end\n  end\n  return true\nend", "\t\
    for m = 2, math.floor(math.sqrt(n)) do\n\t\tif n % m == 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    if n <= 1 then\n        return false\n\
    \    end\n    local divisor = math.floor(math.sqrt(n))\n    while divisor > 1\
    \ do\n        if n % divisor == 0 then\n            return false\n        end\n\
    \        divisor = divisor - 1\n    end\n    return true\nend", "    if n == 1\
    \ then\n        return false\n    end\n    if n == 2 then\n        return true\n\
    \    end\n    local i = 2\n    while i < n do\n        if n % i == 0 then\n  \
    \          return false\n        end\n        i = i + 1\n    end\n    return true\n\
    end", "    if n < 2 then\n        return false\n    end\n    for i = 2, n - 1\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "\t-- check if n is a positive integer\n\tif n == 0 or\
    \ n == 1 then\n\t\treturn false\n\tend\n\t-- do the check\n\tlocal threshold =\
    \ math.floor(math.sqrt(n))\n\tlocal result = true\n\tfor i = 2, threshold do\n\
    \t\tif n % i == 0 then\n\t\t\tresult = false\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    return result\nend", "    if n <= 1 then\n        return false\n    end\n    for\
    \ i = 2, n-1 do\n        if n % i == 0 then\n            return false\n      \
    \  end\n    end\n    return true\nend", "  if n == 1 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  local i = 2\n  local n_sqrt\
    \ = math.sqrt(n)\n  while i <= n_sqrt do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 1\n  end\n  return true\nend", "    if n == 1 then\n\
    \        return false\n    end\n    local divisor = n - 1\n    while divisor >\
    \ 1 do\n        if n % divisor == 0 then\n            return false\n        end\n\
    \        divisor = divisor - 1\n    end\n    return true\nend", "\tassert(n >=\
    \ 1, \"is_prime(n) requires n >= 1\")\n\tif n == 1 then return false end\n\tif\
    \ n == 2 then return true end\n\tif n % 2 == 0 then return false end\n\tfor i\
    \ = 3,math.floor(math.sqrt(n)) + 1,2 do\n\t\tif n % i == 0 then return false end\n\
    \tend\n\treturn true\nend", "    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ n <= 0 then return false end\n  if n == 1 then return false end\n  if n == 2\
    \ then return true end\n  if n % 2 == 0 then return false end\n  if n == 3 then\
    \ return true end\n  if n % 3 == 0 then return false end\n  local max = math.floor(math.sqrt(n))\n\
    \  for i = 3, max, 2 do\n    if n % i == 0 then return false end\n  end\n  return\
    \ true\nend", "  if n < 2 then\n    return false\n  end\n  for d = 2, n - 1 do\n\
    \    if n % d == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    -- Check if n is a prime number\n    -- If n is prime, then return true, else\
    \ return false\n    for i = 2, n - 1 do\n        if n % i == 0 then\n        \
    \    return false\n        end\n    end\n    return true\nend", "    for i = 2,\
    \ math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return n > 1\nend", "  -- TODO: Implement is_prime.\n\
    \  if n<=1 then return false end\n  for i=2, math.floor(math.sqrt(n)) do\n   \
    \ if n%i==0 then return false end\n  end\n  return true\nend", "    if n < 2 then\n\
    \        return false\n    end\n    if n == 2 then\n        return true\n    end\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  if n == 1 then\n    return\
    \ false\n  end\n  for div = 2, n - 1 do\n    if n % div == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if n <= 1 then\n        return\
    \ false\n    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  if\
    \ n <= 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if n\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend", "\t\
    local result\n\tlocal square_root = math.sqrt(n)\n\tlocal floor = math.floor(square_root)\n\
    \tif n <= 1 then\n\t\tresult = false\n\telseif n == 2 then\n\t\tresult = true\n\
    \telseif n % 2 == 0 then\n\t\tresult = false\n\telse\n\t\tlocal divisor = 3\n\t\
    \tresult = true\n\t\twhile divisor <= floor do\n\t\t\tif n % divisor == 0 then\n\
    \t\t\t\tresult = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tdivisor = divisor + 2\n\
    \t\tend\n\tend\n\treturn result\nend", "    if n <= 1 then\n        return false\n\
    \    end\n    if n == 2 then\n        return true\n    end\n    if n % 2 == 0\
    \ then\n        return false\n    end\n    for i = 3, math.sqrt(n), 2 do\n   \
    \     if n % i == 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.sqrt(n) do\n        if math.fmod(n, i) == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if n < 2 then\n   \
    \     return false\n    end\n    if n == 2 then\n        return true\n    end\n\
    \    for i = 2, n-1 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tif n == 1 then\n\t\treturn false\n\
    \tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    return is_prime2(n, n - 1)\nend", "\t\
    if n == 1 then\n\t\treturn false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tfor i =\
    \ 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "    if n == 2 then\n        return true\n    elseif n == 1\
    \ or n % 2 == 0 then\n        return false\n    end", '  local is_prime = true',
  "    if n <= 1 then\n        return false\n    end\n    if n <= 3 then\n       \
    \ return true\n    end\n    if n % 2 == 0 or n % 3 == 0 then\n        return false\n\
    \    end\n    local i = 5\n    while i * i <= n do\n        if n % i == 0 or n\
    \ % (i + 2) == 0 then\n            return false\n        end\n        i = i +\
    \ 6\n    end\n    return true\nend", "  -- Check if n is divisible by 2, 3 or\
    \ 5.\n  -- If yes, return false.\n  if n % 2 == 0 or n % 3 == 0 or n % 5 == 0\
    \ then\n    return false\n  end", "    if n < 2 then\n        return false\n \
    \   end\n    local half = math.ceil(n / 2)\n    for i = 2, half do\n        if\
    \ n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    if n < 2 then\n        return false\n    end\n    if n == 2\
    \ then\n        return true\n    end\n    if n % 2 == 0 then\n        return false\n\
    \    end\n    for i = 3, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    return\
    \ (not is_divisible_by(n, 2)) and (not is_divisible_by(n, 3)) and (not is_divisible_by(n,\
    \ 5)) and (not is_divisible_by(n, 7))\nend", "  -- Any number less than 2 is not\
    \ prime.\n  if n < 2 then\n    return false\n  end", "\tif n == 1 then\n\t\treturn\
    \ false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "\tif n == 2 then\n\t\treturn true\n\
    \telseif n % 2 == 0 then\n\t\treturn false\n\tend\n\tfor d = 3, n^0.5, 2 do\n\t\
    \tif n % d == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  if n < 2 then\n    return false\n  end\n  local is_prime = true\n  local i =\
    \ 2\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      is_prime = false\n\
    \      break\n    end\n    i = i + 1\n  end\n  return is_prime\nend", "\tif n\
    \ <= 1 then\n\t\treturn false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if n <= 0\
    \ then return false end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n     \
    \ return false\n    end\n  end\n  return true\nend", "    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return n ~= 1\nend", "  -- if n < 2 then return false end\n  -- if n == 2\
    \ then return true end\n  -- for i = 2, math.sqrt(n) do\n  --   if n % i == 0\
    \ then return false end\n  -- end\n  -- return true\n  --\n  -- The above is crude.\
    \ The below is an enhancement, which performs only division by\n  -- primes, and\
    \ is therefore more efficient.\n  --\n  if n == 2 then return true end\n  if n\
    \ % 2 == 0 then return false end\n  local m = math.sqrt(n)\n  local div = 3\n\
    \  while div <= m do\n    if n % div == 0 then return false end\n    div = div\
    \ + 2\n  end\n  return true\nend", "    if n < 1 then\n        return false\n\
    \    end\n    local function check_prime(m)\n        if m == 1 then\n        \
    \    return true\n        elseif m == 2 then\n            return true\n      \
    \  elseif (m % 2) == 0 then\n            return false\n        else\n        \
    \    for j = 3, math.sqrt(m), 2 do\n                if (m % j) == 0 then\n   \
    \                 return false\n                end\n            end\n       \
    \     return true\n        end\n    end\n    return check_prime(n)\nend", "  if\
    \ n < 2 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if n\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  if n == 1 then\n        return false\n    end\n    local divisor = 2\n    while\
    \ divisor < n do\n        if n % divisor == 0 then\n            return false\n\
    \        end\n        divisor = divisor + 1\n    end\n    return true\nend", " \
    \   if n == 1 then\n        return false\n    end\n    for i = 2, n - 1 do\n \
    \       if n % i == 0 then\n            return false\n        end\n    end\n \
    \   return true\nend", "    if n < 2 then\n        return false\n    end\n   \
    \ for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    if n == 2 then\n        return\
    \ true\n    elseif n % 2 == 0 then\n        return false\n    end", "  if n <\
    \ 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n  end\n\
    \  local half = math.floor(n / 2)\n  for i = 2, half do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    -- NOTE: Any number\
    \ less than or equal to 1 is not prime\n    if n <= 1 then\n        return false\n\
    \    end", "    -- Your code here.\n    if n < 2 then\n        return false\n\
    \    end\n    if n < 4 then\n        return true\n    end\n    if n % 2 == 0 then\n\
    \        return false\n    end\n    local i = 3\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            return false\n        end\n        i\
    \ = i + 2\n    end\n    return true\nend", "\tif n % 2 == 0 then return false\
    \ end", "    if n == 1 then\n        return false\n    end\n    local upper =\
    \ math.sqrt(n)\n    for i = 2, upper do\n        if n % i == 0 then\n        \
    \    return false\n        end\n    end\n    return true\nend", "    if n == 1\
    \ then\n        return false\n    end\n    if n == 2 then\n        return true\n\
    \    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if n < 2 then\n   \
    \     return false\n    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    for\
    \ i = 2, n - 1 do\n        if n % i == 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "\tif n == 2 then\n\t\treturn true\n\
    \telseif n <= 1 or n % 2 == 0 then\n\t\treturn false\n\tend\n\tfor i = 3, n^(1/2),\
    \ 2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  if n <= 1 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(n))\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "\tif n <= 1 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\
    \t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  if n <= 1 then\n    return false\n  end\n  local i = 2\n  while i * i <= n do\n\
    \    if n % i == 0 then\n      return false\n    end\n    i = i + 1\n  end\n \
    \ return true\nend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif n % i == 0 then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\tif count == 2 then\n\t\treturn true\n\telse\n\t\treturn false\n\t\
    end\nend", "  if n <= 1 then\n    return false\n  end\n  for i = 2, (n - 1) do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    if n == 1 then\n        return false\n    end\n    local i = 2\n    while i\
    \ <= math.sqrt(n) do\n        if n % i == 0 then\n            return false\n \
    \       end\n        i = i + 1\n    end\n    return true\nend", "  -- body\n \
    \ local divisor = 2\n  while divisor < n do\n    if n % divisor == 0 then\n  \
    \    return false\n    end\n    divisor = divisor + 1\n  end\n  return true\n\
    end", "    if n < 2 then\n        return false\n    end\n    for i = 2, n-1 do\n\
    \        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    if n == 2 then\n        return true\n    elseif n\
    \ < 2 or n % 2 == 0 then\n        return false\n    end", "    if n == 1 then\n\
    \        return false\n    end\n    local max_n = math.sqrt(n)\n    for i = 2,\
    \ max_n do\n        if n % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  -- is the number less than 2?\n  if n < 2\
    \ then\n    return false\n  -- is the number 2?\n  elseif n == 2 then\n    return\
    \ true\n  -- is the number even?\n  elseif n % 2 == 0 then\n    return false\n\
    \  -- check every odd number between 3 and sqrt(n)\n  else\n    for i = 3, math.sqrt(n),\
    \ 2 do\n      if n % i == 0 then\n        return false\n      end\n    end\n \
    \   return true\n  end\nend", "    if n < 2 then\n        return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n        if math.fmod(n, i) == 0 then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  -- TODO:\
    \ Implement this function\n  return\nend", "\tlocal m = math.floor(math.sqrt(n))\n\
    \tlocal b = true\n\tfor i = 2, m do\n\t\tif n % i == 0 then\n\t\t\tb = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn b\nend", "    for i = 2, n - 1 do\n    \
    \    if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  -- TODO\n  if n == 1 then\n    return false\n  end\n  for i =\
    \ 2, math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    for i = 2, n - 1 do\n        if n % i == 0 then\n \
    \           return false\n        end\n    end\n    return true\nend", "\tfor\
    \ i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n           \
    \ return false\n        end\n    end\n    return true\nend", "    if n <= 1 then\n\
    \        return false\n    end\n    for i = 2,n/2 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ n == 1 then\n        return false\n    end\n    if n == 2 then\n        return\
    \ true\n    end\n    if n == 3 then\n        return true\n    end\n    if n %\
    \ 2 == 0 then\n        return false\n    end\n    if n % 3 == 0 then\n       \
    \ return false\n    end\n    local i = 5\n    local w = 2\n    while i * i <=\
    \ n do\n        if n % i == 0 then\n            return false\n        end\n  \
    \      i = i + w\n        w = 6 - w\n    end\n    return true\nend", "\tfor i\
    \ = 2, n/2 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "  -- since divisor of n will never be greater than sqrt(n),\
    \ we can\n  -- loop from 1 to sqrt(n) to see if n has a divisor that is not\n\
    \  -- n itself.\n  local divisor = math.floor(math.sqrt(n))\n  while divisor >\
    \ 1 do\n    if n % divisor == 0 then\n      return false\n    end\n    divisor\
    \ = divisor - 1\n  end\n  -- if loop completes and returns false, then n is prime\n\
    \  return true\nend", "    if n < 2 then\n        return false\n    end\n    for\
    \ i = 2, n - 1 do\n        if n % i == 0 then\n            return false\n    \
    \    end\n    end\n    return true\nend", "    if n < 2 then\n        return false\n\
    \    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "    if n < 2\
    \ then\n        return false\n    end\n    if n % 2 == 0 then\n        return\
    \ n == 2\n    end\n    for i = 3, math.sqrt(n), 2 do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ prime = true\n\tfor i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\tprime\
    \ = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn prime\nend", "\t-- TODO: write\
    \ this function.\n\t-- According to wikipedia \"A natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself\"\n\tif n == 1 then\n\
    \t\treturn false\n\tend\n\tlocal ret = true\n\tfor i = 2, n-1 do\n\t\tif n % i\
    \ == 0 then\n\t\t\tret = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn ret\nend",
  "    if n < 2 then\n        return false\n    end\n    local i = 2\n    while i\
    \ * i <= n do\n        if n % i == 0 then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend", "    -- If n is 1 or less,\
    \ the number is not prime.\n    if n <= 1 then\n        return false\n    end",
  "\tif n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, math.sqrt(n) do\n\t\tif\
    \ n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\t\
    if n < 2 then\n\t\treturn false\n\tend\n\tfor i = 2, n / 2 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if n <\
    \ 2 then\n        return false\n    end\n    if n == 2 then\n        return true\n\
    \    end\n    if n % 2 == 0 then\n        return false\n    end\n    for i = 3,\
    \ math.sqrt(n), 2 do\n        if n % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  local prime = true\n  for i = 2, n - 1 do\n    if n % i == 0 then\n\
    \      prime = false\n      break\n    end\n  end\n  return prime\nend", "  --\
    \ Always return false for 1 and 2\n  if n == 1 or n == 2 then\n    return false\n\
    \  end", "    if n <= 0 then\n        return false\n    end\n    if n == 1 then\n\
    \        return false\n    end\n    if n == 2 then\n        return true\n    end\n\
    \    if n % 2 == 0 then\n        return false\n    end\n    for i = 3, math.sqrt(n),\
    \ 2 do\n        if n % i == 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend", "  for i = 2, math.sqrt(n) do\n    if (n % i) ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "\tif n <=\
    \ 1 then\n\t\treturn false\n\tend\n\tif n == 2 then\n\t\treturn true\n\tend\n\t\
    for i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "  if n == 1 then\n    return false\n  end\n  local max_divisor\
    \ = math.floor(math.sqrt(n))\n  for i = 2, max_divisor do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tif n == 1 then\n\t\
    \treturn false\n\tend\n\tif n < 4 then\n\t\treturn true\n\tend\n\tif n % 2 ==\
    \ 0 then\n\t\treturn false\n\tend\n\tif n < 9 then\n\t\treturn true\n\tend\n\t\
    if n % 3 == 0 then\n\t\treturn false\n\tend\n\tlocal r = math.floor(math.sqrt(n))\n\
    \tlocal f = 5\n\twhile f <= r do\n\t\tif n % f == 0 then\n\t\t\treturn false\n\
    \t\tend\n\t\tif n % (f + 2) == 0 then\n\t\t\treturn false\n\t\tend\n\t\tf = f\
    \ + 6\n\tend\n\treturn true\nend", "    if n < 2 then\n        return false\n\
    \    end\n    for divisor = 2, n - 1 do\n        if n % divisor == 0 then\n  \
    \          return false\n        end\n    end\n    return true\nend", "    if\
    \ n == 2 then\n        return true\n    elseif n == 1 or n % 2 == 0 then\n   \
    \     return false\n    end", "    if n <= 1 then\n        return false\n    end\n\
    \    for i = 2, n/2 do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "\tfor i = 2, math.sqrt(n) do\n\t\
    \tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  if n == 2 then\n    return true\n  elseif n < 2 or n % 2 == 0 then\n    return\
    \ false\n  end\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0\
    \ then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
  "    if n == 1 then\n        return false\n    end\n    local max = math.floor(math.sqrt(n))\n\
    \    for i = 2, max do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if n == 1 then\n    return false\n\
    \  end\n  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n  \
    \  end\n  end\n  return true\nend", "  -- Your code here\n  if n == 1 then return\
    \ false end\n  if n == 2 then return true end\n  for i = 2,n-1 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend", "    for\
    \ i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local sqrt_n = math.floor(math.sqrt(n))\n\
    \  for i = 2, sqrt_n do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tif n\
    \ == 2 then\n\t\treturn true\n\tend\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if n == 1 then\n \
    \   return false\n  end\n  for i = 2, n-1 do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if n < 2 then\n        return\
    \ false\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i\
    \ == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    -- Check if n has any divisors except 1 and itself.\n    for i = 2,\
    \ n-1 do\n        if n % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  if n <= 1 then\n    return false\n  end\n\
    \  for i = 2, n - 1 do\n    if n % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    -- TODO: replace this with real implementation\n\
    \    return false\nend", "\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\t\
    return false\n\t\tend\n\tend\n\treturn true\nend", "  if n < 2 then\n    return\
    \ false\n  end\n  for d = 2, n/2, 1 do\n    if n % d == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if n <= 1 then\n        return false\n\
    \    end\n    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n       \
    \     return false\n        end\n    end\n    return true\nend", "  if n == 1\
    \ then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend", "\tif n <=\
    \ 0 then\n\t\treturn false\n\tend\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    for i = 2, n - 1\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    -- Error checks.\n    assert(type(n) == \"number\"\
    , \"Argument \\\"n\\\" must be a number.\")\n    assert(n >= 1, \"Argument \\\"\
    n\\\" must be 1 or greater.\")", "  if n < 2 then\n    return false\n  end\n \
    \ for i = 2, n / 2 do\n    if n % i == 0 then\n      return false\n    end\n \
    \ end\n  return true\nend", "\tif n < 2 then\n\t\treturn false\n\tend\n\tlocal\
    \ sqrt = math.sqrt(n)\n\tfor i = 2, sqrt do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    if n <= 1 then\n        return\
    \ false\n    end\n    for i = 2, math.sqrt(n) do\n        if math.fmod(n, i) ==\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "  for i = 2, n-1 do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  -- Your code here\n  if n < 2 then\n    return false\n\
    \  end\n  local root = math.sqrt(n)\n  for i = 2, root do\n    if n % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "    -- YOUR CODE HERE\n\
    \    if n<=1 then return false\n    elseif n<=3 then return true\n    elseif n%2==0\
    \ or n%3==0 then return false\n    end\n    local i=5\n    while i*i<=n do\n \
    \       if n%i==0 or n%(i+2)==0 then return false end\n        i=i+6\n    end\n\
    \    return true\nend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tlocal sqrt\
    \ = math.sqrt(n)\n\tfor i = 2, sqrt do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    if n == 1 then\n        return false\n\
    \    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tif n <= 1 then\n\t\t\
    return false\n\tend\n\tfor i = 2, n - 1 do\n\t\tif n % i == 0 then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    if n == 1 then\n        return\
    \ false\n    end\n    if n == 2 then\n        return true\n    end\n    for i\
    \ = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local n2 = math.floor(math.sqrt(n))\n\
    \  local is_pr = true\n  if n <= 1 then\n    is_pr = false\n  else\n    for i\
    \ = 2, n2 do\n      if n % i == 0 then\n        is_pr = false\n        break\n\
    \      end\n    end\n  end\n  return is_pr\nend", "    --\n    -- take care of\
    \ the easy cases.\n    --\n    if (n == 1) then\n        return false\n    end\n\
    \    if (n == 2) then\n        return true\n    end\n    if (n == 3) then\n  \
    \      return true\n    end\n    if (n % 2 == 0) then\n        return false\n\
    \    end\n    if (n % 3 == 0) then\n        return false\n    end\n    --\n  \
    \  -- throw out a few more easy cases\n    --\n    if (n % 5 == 0) then\n    \
    \    return false\n    end\n    if (n % 7 == 0) then\n        return false\n \
    \   end\n    if (n % 11 == 0) then\n        return false\n    end\n    if (n %\
    \ 13 == 0) then\n        return false\n    end\n    if (n % 17 == 0) then\n  \
    \      return false\n    end\n    if (n % 19 == 0) then\n        return false\n\
    \    end\n    if (n % 23 == 0) then\n        return false\n    end\n    if (n\
    \ % 29 == 0) then\n        return false\n    end\n    if (n % 31 == 0) then\n\
    \        return false\n    end\n    if (n % 37 == 0) then\n        return false\n\
    \    end\n    if (n % 41 == 0) then\n        return false\n    end\n    if (n\
    \ % 43 == 0) then\n        return false\n    end\n    if (n % 47 == 0) then\n\
    \        return false\n    end\n    if (n % 53 == 0) then\n        return false\n\
    \    end\n    if (n % 59 == 0) then\n        return false\n    end\n    if (n\
    \ % 61 == 0) then\n        return false\n    end\n    if (n % 67 == 0) then\n\
    \        return false\n    end\n    if (n % 71 == 0) then\n        return false\n\
    \    end\n    if (n % 73 == 0) then\n        return false\n    end\n    if (n\
    \ % 79 == 0) then\n        return false\n    end\n    if (n % 83 == 0) then\n\
    \        return false\n    end\n    if (n % 89 == 0) then\n        return false\n\
    \    end", "  if n <= 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "\t-- A prime is a positive integer whose only positive integer factors\
    \ are 1 and itself.\n\t-- 1 is not prime.\n\tif n <= 1 then\n\t\treturn false\n\
    \tend\n\t-- For all positive integers greater than 1, if the integer is prime,\n\
    \t-- then the remainder of its division by all of the integers from 2 to itself\
    \ is not 0.\n\tfor i = 2, n do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn true\nend", "    if n == 1 then\n        return false\n\
    \    end\n    local i = 2\n    while i*i <= n do\n        if n % i == 0 then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tif n < 4 then\n\t\t\
    return true\n\tend\n\tif n % 2 == 0 then\n\t\treturn false\n\tend\n\tif n < 9\
    \ then\n\t\treturn true\n\tend\n\tif n % 3 == 0 then\n\t\treturn false\n\tend\n\
    \tlocal r = math.floor(math.sqrt(n))\n\tlocal f = 5\n\twhile f <= r do\n\t\tif\
    \ n % f == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif n % (f + 2) == 0 then\n\
    \t\t\treturn false\n\t\tend\n\t\tf = f + 6\n\tend\n\treturn true\nend", "  --assert(type(n)\
    \ == \"number\", \"n must be a number\")\n  if n <= 1 then\n    return false\n\
    \  elseif n <= 3 then\n    return true\n  elseif n % 2 == 0 or n % 3 == 0 then\n\
    \    return false\n  end\n  local i = 5\n  while i * i <= n do\n    if n % i ==\
    \ 0 or n % (i + 2) == 0 then\n      return false\n    end\n    i = i + 6\n  end\n\
    \  return true\nend", "  local candidate = math.floor(math.sqrt(n))\n  while candidate\
    \ > 1 do\n    if n % candidate == 0 then\n      return false\n    end\n    candidate\
    \ = candidate - 1\n  end\n  return true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  -- Don't check even numbers.\n  for i = 3, math.sqrt(n), 2 do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "    if n <= 1 then\n        return false\n    end\n    for i = 2, n - 1 do\n  \
    \      if n % i == 0 then\n            return false\n        end\n    end\n  \
    \  return true\nend", "    if n < 2 then\n        return false\n    end\n    local\
    \ test = 2\n    while (test * test) <= n do\n        if (n % test) == 0 then\n\
    \            return false\n        end\n        test = test + 1\n    end\n   \
    \ return true\nend", "    if n == 2 then\n        return true\n    elseif n %\
    \ 2 == 0 then\n        return false\n    end", "  if n < 2 then\n    return false\n\
    \  end\n  for i = 2, math.floor(math.sqrt(n)) do\n    if n % i == 0 then\n   \
    \   return false\n    end\n  end\n  return true\nend", "  if n <= 1 then\n   \
    \ return false\n  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 ==\
    \ 0 then\n    return false\n  end\n  for i = 3, math.sqrt(n), 2 do\n    if n %\
    \ i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  --\
    \ if n < 1, then return false\n  if n < 1 then\n    return false\n  -- else if\
    \ n is 1 or 2, then return true\n  elseif n == 1 or n == 2 then\n    return true\n\
    \  -- else iterate from 2 to n-1, checking if each number divides n\n  else\n\
    \    for i = 2, n-1 do\n      if n % i == 0 then\n        return false\n     \
    \ end\n    end\n    return true\n  end\nend", "  if (n <= 1) then\n    return\
    \ false\n  end\n  if (n <= 3) then\n    return true\n  end\n  if (n % 2 == 0 or\
    \ n % 3 == 0) then\n    return false\n  end\n  local i = 5\n  while (i * i <=\
    \ n) do\n    if (n % i == 0 or n % (i + 2) == 0) then\n      return false\n  \
    \  end\n    i = i + 6\n  end\n  return true\nend", "\tif n == 2 then\n\t\treturn\
    \ true\n\telseif n % 2 == 0 then\n\t\treturn false\n\tend\n\tlocal d = 3\n\twhile\
    \ d * d <= n do\n\t\tif n % d == 0 then\n\t\t\treturn false\n\t\tend\n\t\td =\
    \ d + 2\n\tend\n\treturn true\nend", "    return not (n == 1 or (n > 2 and n %\
    \ 2 == 0) or find(n, 3, 2, math.sqrt(n)) ~= nil)\nend", "    if n == 1 then\n\
    \        return false\n    end\n    for i = 2, math.sqrt(n) do\n        if n %\
    \ i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  if n % 2 == 0 then\n    return false\n  end\n  for i = 3, math.floor(math.sqrt(n)),\
    \ 2 do\n    if n % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  if n == 2 then\n    return true\n  elseif n < 2 or n % 2 == 0 then\n\
    \    return false\n  end\n  local i = 3\n  while i * i <= n do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend",
  "  if n == 1 then\n    return false\n  end\n  for i = 2, math.sqrt(n) do\n    if\
    \ n % i == 0 then\n      return false\n    end\n  end\n  return true\nend", " \
    \ -- no even numbers\n  if n%2 == 0 then\n    return false\n  end\n  -- check\
    \ odd numbers up to the square root of n\n  for i=3, math.sqrt(n), 2 do\n    if\
    \ n%i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  if n == 1 then\n        return false\n    end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "\tif n == 1 then\n\t\treturn false\n\tend\n\tlocal prime\
    \ = true\n\tfor i = 2, n-1 do\n\t\tif n % i == 0 then\n\t\t\tprime = false\n\t\
    \t\tbreak\n\t\tend\n\tend\n\treturn prime\nend", "  for i = 2, math.sqrt(n) do\n\
    \    if n % i == 0 then\n      return false\n    end\n  end\n  return true\nend",
  "  -- place holder; remove and implement.\n  local prime = true\n  local i = 2\n\
    \  while i <= n - 1 do\n    if n % i == 0 then\n      prime = false\n    end\n\
    \    i = i + 1\n  end\n  return prime\nend", "    for i = 2, n-1 do\n        if\
    \ n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "\tif n <= 1 then\n\t\treturn false\n\tend\n\tlocal m = math.sqrt(n)\n\
    \tfor i = 2, m do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "\t-- If a number is prime, it can't be even.\n\tif n ~=\
    \ 2 and n % 2 == 0 then\n\t\treturn false\n\tend", "  if n == 1 then\n    return\
    \ false\n  end\n  for i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    --if n == 2 or n == 3 then\
    \ return true end\n    if n == 2 then return true end\n    if n % 2 == 0 then\
    \ return false end\n    for i = 3, math.floor(math.sqrt(n)) + 1, 2 do\n      \
    \  if n % i == 0 then return false end\n    end\n    return true\nend", "    if\
    \ n == 2 then\n        return true\n    elseif n < 2 or not(n % 2 == 0) then\n\
    \        return false\n    end\n    for d = 3, math.sqrt(n), 2 do\n        if\
    \ n % d == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "\tlocal n = n or 0\n\tif n <= 0 then\n\t\treturn false\n\tend\n\
    \tif n == 1 then\n\t\treturn false\n\tend\n\tlocal sqr = math.floor(math.sqrt(n))\n\
    \tfor i = 2, sqr do\n\t\tif n % i == 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend", "    if n < 2 then\n        return false\n    end\n    local\
    \ limit = math.sqrt(n)\n    for i = 2, limit do\n        if n % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tif\
    \ n <= 1 then\n\t\treturn false\n\tend\n\tif n <= 3 then\n\t\treturn true\n\t\
    end\n\tif n % 2 == 0 or n % 3 == 0 then\n\t\treturn false\n\tend\n\tfor i = 5,\
    \ math.floor(math.sqrt(n)), 6 do\n\t\tif n % i == 0 or n % (i + 2) == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    if n < 2 then\n\
    \        return false\n    end\n    local i = 2\n    while i * i <= n do\n   \
    \     if n % i == 0 then\n            return false\n        end\n        i = i\
    \ + 1\n    end\n    return true\nend", "  if n == 1 then\n    return false\n \
    \ end\n  if n == 2 then\n    return true\n  end\n  for i = 2, n-1 do\n    if n\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  local i = 2\n    while i < n do\n        if n % i == 0 then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "  if\
    \ n < 1 then\n    return false\n  end\n  local i = 2\n  while i <= n / 2 do\n\
    \    if math.fmod(n, i) == 0 then\n      return false\n    end\n    i = i + 1\n\
    \  end\n  return true\nend", "    if n < 2 then\n        return false\n    end\n\
    \    for i = 2, math.sqrt(n) do\n        if n % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    -- even numbers are\
    \ not prime\n    if n % 2 == 0 then\n        return false\n    end", "  if n ==\
    \ 2 then\n    return true\n  elseif n < 2 or n % 2 == 0 then\n    return false\n\
    \  end\n  local k = 3\n  while k < n do\n    if n % k == 0 then\n      return\
    \ false\n    end\n    k = k + 2\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
