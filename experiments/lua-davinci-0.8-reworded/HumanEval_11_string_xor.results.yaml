name: HumanEval_11_string_xor
language: lua
results:
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    return b:gsub('[^%a]',\
    \ function(c)\n        return bit.bxor(a:byte(c), b:byte(c))\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpma5snmzx.lua:7:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpma5snmzx.lua:7:\
    \ in function </tmp/tmpma5snmzx.lua:6>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpma5snmzx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpma5snmzx.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local bxor = bit.bxor\n\
    \    assert(#a == #b, 'Inputs must be same length.')\n    local out = {}\n   \
    \ for i = 1, #a do\n        local c = a:sub(i, i)\n        local d = b:sub(i,\
    \ i)\n        out[i] = bxor(tonumber(c), tonumber(d))\n    end\n    return table.concat(out)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfr9gsogt.lua:6:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpfr9gsogt.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpfr9gsogt.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = {}\n\tfor\
    \ i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult[i] = '0'\n\
    \t\telse\n\t\t\tresult[i] = '1'\n\t\tend\n\tend\n\treturn table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal res = ''\n\tfor i\
    \ = 1, #a do\n\t\tres = res .. tostring(tonumber(a:sub(i, i)) ~ tonumber(b:sub(i,\
    \ i)))\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  assert(#a == #b, \"a and\
    \ b need to be of same length\")\n  local xor = {}\n  for i = 1, #a do\n    local\
    \ j = tonumber(a:sub(i, i))\n    local k = tonumber(b:sub(i, i))\n    if j and\
    \ k then\n      table.insert(xor, (j + k) % 2)\n    else\n      table.insert(xor,\
    \ 0)\n    end\n  end\n  return table.concat(xor)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal r = {}\n\tfor i =\
    \ 1, #a do\n\t\tr[i] = tostring(a:byte(i) ~ b:byte(i))\n\tend\n\treturn table.concat(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local r = {}\n  for i =\
    \ 1, #a do\n    local c = a:sub(i, i) == '1' and b:sub(i, i) == '0'\n    or a:sub(i,\
    \ i) == '0' and b:sub(i, i) == '1'\n    if c then r[i] = '1' else r[i] = '0' end\n\
    \  end\n  return table.concat(r)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local xor = (a:byte() %\
    \ 2) ~ (b:byte() % 2)\n  local next_a = a:sub(2)\n  local next_b = b:sub(2)\n\
    \  if next_a == '' or next_b == '' then\n    return tostring(xor)\n  else\n  \
    \  return tostring(xor) .. string_xor(next_a, next_b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = {}\n  for i\
    \ = 1,#a do\n    res[i] = a:sub(i,i) ~= b:sub(i,i) and '1' or '0'\n  end\n  return\
    \ table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  return string.gsub(a..b,\
    \ '.', function(x) return (x == '0') and '1' or '0' end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaav2qii.lua:12:\
    \ expected: \"010010\"\nactual: \"000111010101\"\nstack traceback:\n\t/tmp/tmpnaav2qii.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local long, short = {},\
    \ {}\n  local l, s\n  if #a > #b then\n    long, short = a, b\n    l, s = #a,\
    \ #b\n  else\n    long, short = b, a\n    l, s = #b, #a\n  end\n  local buf =\
    \ {}\n  for i = 1, l do\n    if i <= s then\n      table.insert(buf, string.char(string.byte(short,\
    \ i) ~ string.byte(long, i)))\n    else\n      table.insert(buf, string.char(string.byte(long,\
    \ i)))\n    end\n  end\n  return table.concat(buf)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ofm374p.lua:29:\
    \ expected: \"010010\"\nactual: \"\0\x01\0\0\x01\0\"\nstack traceback:\n\t/tmp/tmp5ofm374p.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    if a:sub(i, i) == b:sub(i, i) then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"1\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal tbl, r = {}, \"\"\
    \n\tfor i = 1, #a do\n\t\ttbl[i] = string.char(bit.bxor(string.byte(a, i), string.byte(b,\
    \ i)))\n\tend\n\treturn table.concat(tbl)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3uwn67s.lua:8:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpk3uwn67s.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpk3uwn67s.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tif #a ~= #b then\n\t\t\
    print('Strings are not of the same length.')\n\t\treturn\n\tend\n\tlocal out =\
    \ {}\n\tfor i = 1, #a do\n\t\tlocal x = string.sub(a, i, i)\n\t\tlocal y = string.sub(b,\
    \ i, i)\n\t\tif x == y then\n\t\t\ttable.insert(out, '0')\n\t\telse\n\t\t\ttable.insert(out,\
    \ '1')\n\t\tend\n\tend\n\treturn table.concat(out)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = {}\n  for i\
    \ = 1, #a do\n    res[i] = (a:sub(i, i) == '1' and b:sub(i, i) == '0') or (a:sub(i,\
    \ i) == '0' and b:sub(i, i) == '1') and '1' or '0'\n  end\n  return table.concat(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnesw4f4z.lua:10:\
    \ invalid value (boolean) at index 2 in table for 'concat'\nstack traceback:\n\
    \t/tmp/tmpnesw4f4z.lua:10: in local 'candidate'\n\t/tmp/tmpnesw4f4z.lua:16: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local ret = ''\n    local\
    \ len = math.max(#a, #b)\n    for i = 1, len do\n        local bit1 = ('0'):rep(len\
    \ - #a) .. a\n        local bit2 = ('0'):rep(len - #b) .. b\n        ret = ret\
    \ .. (bit1:sub(i, i) == bit2:sub(i, i) and '0' or '1')\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  if #a > #b then\n    b\
    \ = string.rep('0', #a - #b) .. b\n  elseif #b > #a then\n    a = string.rep('0',\
    \ #b - #a) .. a\n  end\n  local bitmap = {}\n  for i = 1, #a do\n    bitmap[i]\
    \ = a:sub(i, i) == b:sub(i, i) and '0' or '1'\n  end\n  return table.concat(bitmap)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal x = ''\n\tfor i =\
    \ 1, math.max(#a, #b) do\n\t\tlocal p, q = a:sub(i, i), b:sub(i, i)\n\t\tif p\
    \ == q then x = x .. '0' else x = x .. '1' end\n\tend\n\treturn x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    return (a:gsub('.', function(x)\n\
    \        return b:sub(x:byte(), x:byte())\n    end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvkqe3ce.lua:14:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsvkqe3ce.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n\tlocal result = \"\"\n\t\
    for i = 1, #a do\n\t\tif a:sub(i, i) == b:sub(i, i) then\n\t\t\tresult = result\
    \ .. \"0\"\n\t\telse\n\t\t\tresult = result .. \"1\"\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
