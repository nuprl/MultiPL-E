name: HumanEval_122_add_elements
language: lua
results:
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        local n = arr[i]\n        if n < 100 then\n            sum = sum + n\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local res = 0\n    for i = 1, k do\n\
    \        if arr[i] < 100 then\n            res = res + arr[i]\n        end\n \
    \   end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ elem = arr[i]\n    if elem <= 99 then\n      sum = sum + elem\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57,\
    \ 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    -- YOUR CODE HERE\n    --[[\n    local\
    \ sum = 0\n    for i = 1,k do\n        if arr[i] < 100 then\n            sum =\
    \ sum + arr[i]\n        end\n    end\n    --]]\n    --[[\n    local sum = 0\n\
    \    for i, n in ipairs(arr) do\n        if n < 100 then\n            sum = sum\
    \ + n\n        end\n        if i == k then\n            break\n        end\n \
    \   end\n    --]]\n    local sum = 0\n    for i = 1,k do\n        if arr[i] <\
    \ 100 then\n            sum = sum + arr[i]\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7kfat9u.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmpc7kfat9u.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n\tlocal sum = 0\n\tfor i = 1, k do\n\t\t\
    if arr[i] < 100 then\n\t\t\tsum = sum + arr[i]\n\t\tend\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdaiio_i.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmpsdaiio_i.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        if arr[i] < 100 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, #arr do\n \
    \   if i <= k then\n      local num = arr[i]\n      local num_length = #tostring(num)\n\
    \      if num_length == 1 or num_length == 2 then\n        sum = sum + num\n \
    \     end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    if\
    \ arr[i] < 100 then\n      sum = sum + arr[i]\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ digits = #tostring(arr[i])\n    if digits <= 2 then\n      sum = sum + arr[i]\n\
    \    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local result = 0\n  for i = 1, k do\n \
    \   local num = arr[i]\n    if num < 100 then\n      result = result + num\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bk1156_.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmp_bk1156_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        if arr[i] < 100 then\n            sum = sum + arr[i]\n        end\n \
    \   end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    -- ...\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1w41aunw.lua:16:\
    \ expected: -4, actual: nil\nstack traceback:\n\t/tmp/tmp1w41aunw.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        local v = arr[i]\n        if v < 100 then\n            sum = sum + v\n\
    \        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local result = 0\n    for i = 1, k do\n\
    \        if arr[i] <= 99 then\n            result = result + arr[i]\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000,\
    \ 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9},\
    \ 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4),\
    \ 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    local\
    \ n = arr[i]\n    if n < 100 then\n      sum = sum + n\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  return 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7aqvm84.lua:16:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmpb7aqvm84.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
