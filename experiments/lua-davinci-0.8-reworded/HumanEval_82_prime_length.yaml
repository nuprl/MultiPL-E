name: HumanEval_82_prime_length
language: lua
prompt: "-- Write a function that takes a string and returns true if the string\n\
  -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
  -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
  -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
  \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
  \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
  \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
  \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
  \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
  \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
  \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
  \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  --[[Fill out this function]]\nend", "    local prime_num = false\n\
    \    for i = 2, string.len(string) do\n        if string.len(string) % i == 0\
    \ then\n            prime_num = false\n            break\n        else\n     \
    \       prime_num = true\n        end\n    end\n    return prime_num\nend", " \
    \   local count = 0\n    for char in string:gmatch('.') do\n        count = count\
    \ + 1\n    end\n    local upper_limit = math.floor(math.sqrt(count))\n    for\
    \ i = 2, upper_limit do\n        if count % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local length = string.len(string)\n\
    \  local prime = true\n  for i = 2, length - 1 do\n    if length % i == 0 then\n\
    \      prime = false\n      break\n    end\n  end\n  return prime\nend", "   \
    \ local l = string.len(string)\n    if l == 1 then\n        return false\n   \
    \ end\n    for i = 2, l - 1 do\n        if l % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local prime = true\n\
    \    local s_len = string.len(string)\n    if s_len < 2 then\n        prime =\
    \ false\n    else\n        for i = 2, s_len - 1 do\n            if s_len % i ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n    end\n    return prime\nend", "    -- Implement the function\n\
    end", "  local length = #string\n  if length == 1 then\n    return false\n  end\n\
    \  local divisor = 2\n  while divisor < length do\n    if length % divisor ==\
    \ 0 then\n      return false\n    end\n    divisor = divisor + 1\n  end\n  return\
    \ true\nend", "  return is_prime(#string)\nend", end, "    -- TODO: implement\
    \ me\nend", "    local len = string.len(string)\n    for i = 2, len - 1 do\n \
    \       if len % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local length = string.len(string)\n    if length\
    \ == 2 then\n        return true\n    end\n    for i = 2, length - 1 do\n    \
    \    if length % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local strlen = #string\n    local result = true\n\
    \    for i = 2, strlen - 1 do\n        if (strlen % i) == 0 then\n           \
    \ result = false\n            break\n        end\n    end\n    return result\n\
    end", "    return is_prime(#string)\nend", end, "  local count = string.len(string)\n\
    \  for i = 2, count - 1 do\n    if count % i == 0 then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local function is_prime(x)\n    for i\
    \ = 2, x - 1 do\n      if x % i == 0 then\n        return false\n      end\n \
    \   end\n    return true\n  end\n  return is_prime(#string)\nend\nprint(prime_length('Hello'))\n\
    print(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\n\
    print('\\n')", "  local len = #string\n  if len == 2 or len == 3 or len == 5 or\
    \ len == 7 then\n    return true\n  elseif len % 2 == 0 or len % 3 == 0 or len\
    \ % 5 == 0 or len % 7 == 0 then\n    return false\n  else\n    return true\n \
    \ end\nend", "  local length = string.len(string)\n  for i = 2, length - 1 do\n\
    \    if length % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
