name: HumanEval_82_prime_length
language: lua
prompt: "-- Write a function that takes a string and returns true if the string\n\
  -- length is a prime number or false otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
  -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
  -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
  \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
  \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
  \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
  \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
  \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
  \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
  \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
  \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  --[[Fill out this function]]\nend", "    local prime_num = false\n\
    \    for i = 2, string.len(string) do\n        if string.len(string) % i == 0\
    \ then\n            prime_num = false\n            break\n        else\n     \
    \       prime_num = true\n        end\n    end\n    return prime_num\nend", " \
    \   local count = 0\n    for char in string:gmatch('.') do\n        count = count\
    \ + 1\n    end\n    local upper_limit = math.floor(math.sqrt(count))\n    for\
    \ i = 2, upper_limit do\n        if count % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local length = string.len(string)\n\
    \  local prime = true\n  for i = 2, length - 1 do\n    if length % i == 0 then\n\
    \      prime = false\n      break\n    end\n  end\n  return prime\nend", "   \
    \ local l = string.len(string)\n    if l == 1 then\n        return false\n   \
    \ end\n    for i = 2, l - 1 do\n        if l % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local prime = true\n\
    \    local s_len = string.len(string)\n    if s_len < 2 then\n        prime =\
    \ false\n    else\n        for i = 2, s_len - 1 do\n            if s_len % i ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n    end\n    return prime\nend", "    -- Implement the function\n\
    end", "  local length = #string\n  if length == 1 then\n    return false\n  end\n\
    \  local divisor = 2\n  while divisor < length do\n    if length % divisor ==\
    \ 0 then\n      return false\n    end\n    divisor = divisor + 1\n  end\n  return\
    \ true\nend", "  return is_prime(#string)\nend", end, "    -- TODO: implement\
    \ me\nend", "    local len = string.len(string)\n    for i = 2, len - 1 do\n \
    \       if len % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local length = string.len(string)\n    if length\
    \ == 2 then\n        return true\n    end\n    for i = 2, length - 1 do\n    \
    \    if length % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local strlen = #string\n    local result = true\n\
    \    for i = 2, strlen - 1 do\n        if (strlen % i) == 0 then\n           \
    \ result = false\n            break\n        end\n    end\n    return result\n\
    end", "    return is_prime(#string)\nend", end, "  local count = string.len(string)\n\
    \  for i = 2, count - 1 do\n    if count % i == 0 then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local function is_prime(x)\n    for i\
    \ = 2, x - 1 do\n      if x % i == 0 then\n        return false\n      end\n \
    \   end\n    return true\n  end\n  return is_prime(#string)\nend\nprint(prime_length('Hello'))\n\
    print(prime_length('abcdcba'))\nprint(prime_length('kittens'))\nprint(prime_length('orange'))\n\
    print('\\n')", "  local len = #string\n  if len == 2 or len == 3 or len == 5 or\
    \ len == 7 then\n    return true\n  elseif len % 2 == 0 or len % 3 == 0 or len\
    \ % 5 == 0 or len % 7 == 0 then\n    return false\n  else\n    return true\n \
    \ end\nend", "  local length = string.len(string)\n  for i = 2, length - 1 do\n\
    \    if length % i == 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "  -- code goes here\nend", "  return prime(string.len(string))\nend", " \
    \   local string_length = #string\n    if string_length <= 1 then\n        return\
    \ false\n    end\n    if string_length == 2 then\n        return true\n    end\n\
    \    for i = 2, string_length - 1 do\n        if string_length % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\treturn\
    \ is_prime(#string)\nend", "    if string.len(string)%2==0 then\n        return\
    \ false\n    else\n        return true\n    end\nend", "    return table.indexof(get_primes(string.len(string)),\
    \ string.len(string)) ~= nil\nend", "    local p = string.len(string)\n    if\
    \ p > 1 then\n        for i = 2, p/2 do\n            if p % i == 0 then\n    \
    \            return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend", "    return prime(string:len())\nend", "  for\
    \ i = 2, string.len(string) - 1 do\n    if string.len(string) % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", end, "    local length\
    \ = string.len(string)\n    for i = 2, length - 1 do\n        if length % i ==\
    \ 0 then\n            return false\n        end\n    end\n    return true\nend",
  "    local len = string.len(string)\n    if len <= 3 then\n        return true\n\
    \    end\n    for i = 2, len - 1 do\n        if len % i == 0 then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  local len = string.len(string)\n\
    \  for i = 2, math.sqrt(len) do\n    if len % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    return is_prime(#string)\nend", " \
    \   -- TODO: Implement\nend", "    for i = 2, string.len(string) - 1 do\n    \
    \    if string.len(string) % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local length = #string\n  local i = 2\n  while\
    \ i < length do\n    if length % i == 0 then\n      return false\n    end\n  \
    \  i = i + 1\n  end\n  return true\nend", "    local function length(str)\n  \
    \      return string.len(str)\n    end\n    local function is_prime(n)\n     \
    \   if n <= 1 then\n            return false\n        elseif n <= 3 then\n   \
    \         return true\n        elseif n % 2 == 0 or n % 3 == 0 then\n        \
    \    return false\n        end\n        local i = 5\n        while i * i <= n\
    \ do\n            if n % i == 0 or n % (i + 2) == 0 then\n                return\
    \ false\n            end\n            i = i + 6\n        end\n        return true\n\
    \    end\n    return is_prime(length(string))\nend", "  local number = #string\n\
    \  local ret = true\n  for i = 2, number - 1 do\n    if number % i == 0 then\n\
    \      ret = false\n      break\n    end\n  end\n  return ret\nend", "  -- your\
    \ code here\nend", "    string = string.gsub(string, '%s+', '')\n    local count\
    \ = #string\n    local prime = true\n    for i = 2, count - 1 do\n        if count\
    \ % i == 0 then\n            prime = false\n            break\n        end\n \
    \   end\n    return prime\nend", "\tlocal length = #string\n\tif length == 1 then\n\
    \t\treturn true\n\tend\n\tfor i = 2, length - 1 do\n\t\tif length % i == 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  -- TODO: Implement\
    \ me\nend", "    if is_prime(#string) then\n        return true\n    else\n  \
    \      return false\n    end\nend", "  local length = string.len(string)\n  if\
    \ length == 1 then\n    return false\n  end\n  for i = 2, length do\n    if length\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  return not (string:len()%2 == 0)\nend", "  -- your code here\nend", "    if\
    \ #string == 1 then\n        return true\n    elseif #string == 2 then\n     \
    \   return true\n    elseif #string == 3 then\n        return true\n    elseif\
    \ #string == 5 then\n        return true\n    elseif #string == 7 then\n     \
    \   return true\n    elseif #string == 11 then\n        return true\n    elseif\
    \ #string == 13 then\n        return true\n    elseif #string == 17 then\n   \
    \     return true\n    elseif #string == 19 then\n        return true\n    elseif\
    \ #string == 23 then\n        return true\n    elseif #string == 29 then\n   \
    \     return true\n    elseif #string == 31 then\n        return true\n    elseif\
    \ #string == 37 then\n        return true\n    elseif #string == 41 then\n   \
    \     return true\n    elseif #string == 43 then\n        return true\n    elseif\
    \ #string == 47 then\n        return true\n    elseif #string == 53 then\n   \
    \     return true\n    elseif #string == 59 then\n        return true\n    elseif\
    \ #string == 61 then\n        return true\n    elseif #string == 67 then\n   \
    \     return true\n    elseif #string == 71 then\n        return true\n    elseif\
    \ #string == 73 then\n        return true\n    elseif #string == 79 then\n   \
    \     return true\n    elseif #string == 83 then\n        return true\n    elseif\
    \ #string == 89 then\n        return true\n    elseif #string == 97 then\n   \
    \     return true\n    elseif #string == 101 then\n        return true\n    elseif\
    \ #string == 103 then\n        return true\n    elseif #string == 107 then\n \
    \       return true\n    elseif #string == 109 then\n        return true\n   \
    \ elseif #string == 113 then\n        return true\n    elseif #string == 127 then\n\
    \        return true\n    elseif #string == 131 then\n        return true\n  \
    \  elseif #string == 137 then\n        return true\n    elseif #string == 139\
    \ then\n        return true\n    elseif #string == 149 then\n        return true\n\
    \    elseif #string == 151 then\n        return true\n    elseif #string == 157\
    \ then\n        return true\n    elseif #string == 163 then\n        return true\n\
    \    elseif #string", "  -- YOUR CODE GOES HERE\nend", "    if #string == 1 or\
    \ #string == 2 then\n        return true\n    end\n    local i\n    for i = 2,\
    \ #string - 1 do\n        if #string % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  return is_prime(#string)\nend",
  "    local len = string.len(string)\n    for i = 2, len - 1 do\n        if len %\
    \ i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- TODO: implement this function\nend", "\treturn prime(#string)\nend",
  "  return is_prime(#string)\nend", "    local l = string.len(string)\n    if l ==\
    \ 2 then\n        return true\n    end\n    if l % 2 == 0 then\n        return\
    \ false\n    end\n    for i = 3, math.sqrt(l), 2 do\n        if l % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    return\
    \ false\nend", "  return false\nend", "    local num = #string\n    if is_prime(num)\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   local len = string.len(string)\n    for i = 2, len - 1 do\n        if len\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  local length = string.len(string)\n  if length == 1 then\n    return\
    \ false\n  end\n  if length == 2 then\n    return true\n  end\n  local divide\
    \ = math.floor(length / 2)\n  for i = 2, divide do\n    if length % i == 0 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local length = #string\n\
    \  local i = 2\n  while i < length do\n    if length % i == 0 then\n      return\
    \ false\n    end\n    i = i + 1\n  end\n  return true\nend", "  -- TODO\nend",
  "    return is_prime(#string)\nend", "  local length = string.len(string)\n  if\
    \ length == 1 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(length))\
    \ do\n    if length % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local ln = string.len(string)\n  local i = 2\n  while i <= ln\
    \ do\n    if ln % i == 0 then\n      return false\n    end\n    i = i + 1\n  end\n\
    \  return true\nend", "  local last_digit_is_five = string:sub(-1) == '5'\n  if\
    \ last_digit_is_five then\n    return false\n  end\n  local length = #string\n\
    \  if length == 1 then\n    return true\n  end\n  for i = 2, math.floor(length\
    \ / 2) do\n    if length % i == 0 then\n      return false\n    end\n  end\n \
    \ return true\nend", "    -- Write your code here\nend", "  -- TODO: your code\
    \ here\nend", "    local len = string.len(string)\n    local found = false\n \
    \   for i = 2, len - 1 do\n        if len % i == 0 then\n            found = true\n\
    \            break\n        end\n    end\n    return not found\nend", "    local\
    \ length = string.len(string)\n    for i = 2, length - 1 do\n        if length\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  return is_prime(#string)\nend", "  return is_prime(#string)\nend", " \
    \   local len = #string\n    for i = 2, len-1 do\n        if len % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "\treturn\
    \ not is_divisible_by(string_length(string), 2)\nend", "  local result = true\n\
    \  local length = string.len(string)\n  for i = 2, length - 1 do\n    if length\
    \ % i == 0 then\n      result = false\n      break\n    end\n  end\n  return result\n\
    end", "  local count = 0\n  for i = 1, #string do\n    count = count + 1\n  end\n\
    \  local x = 2\n  while x <= count do\n    if count % x == 0 then\n      return\
    \ false\n    end\n    x = x + 1\n  end\n  return true\nend", "    -- Get the length\
    \ of the string, then use the is_prime function\n    -- to test if the length\
    \ is prime.\n    return is_prime(string:len())\nend", "\tlocal length = string.len(string)\n\
    \tfor i = 2,length-1 do\n\t\tif (length % i) == 0 then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn true\nend", "  return true\nend", "  local len = string.len(string)\n\
    \  for i = 2, len - 1 do\n    if len % i == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local length = #string\n    local factor_found\
    \ = false\n    for divisor = 2, math.sqrt(length) do\n        if length % divisor\
    \ == 0 then\n            factor_found = true\n            break\n        end\n\
    \    end\n    return not factor_found\nend", "    length = string.len(string)\n\
    \    prime = true\n    if length == 1 then\n        prime = false\n    else\n\
    \        for i = 2, length - 1 do\n            if length % i == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \    end\n    return prime\nend", "    local len = #string\n    for i = 2, math.sqrt(len)\
    \ do\n        if len % i == 0 then\n            return false\n        end\n  \
    \  end\n    return true\nend", "    length = string.len(string)\n    for i = 2,\
    \ length - 1 do\n        if length % i == 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "    local len = string.len(string)\n\
    \    if len == 1 or len == 2 then\n        return true\n    end\n    for i = 2,\
    \ len - 1 do\n        if len % i == 0 then\n            return false\n       \
    \ end\n    end\n    return true\nend", "\t\n\tif #string == 2 or #string == 3\
    \ or #string == 5 or #string == 7 or #string == 11 or #string == 13 or #string\
    \ == 17 or #string == 19 or #string == 23 or #string == 29 or #string == 31 or\
    \ #string == 37 or #string == 41 or #string == 43 or #string == 47 or #string\
    \ == 53 or #string == 59 or #string == 61 or #string == 67 or #string == 71 or\
    \ #string == 73 or #string == 79 or #string == 83 or #string == 89 or #string\
    \ == 97 or #string == 101 or #string == 103 or #string == 107 or #string == 109\
    \ or #string == 113 or #string == 127 or #string == 131 or #string == 137 or #string\
    \ == 139 or #string == 149 or #string == 151 or #string == 157 or #string == 163\
    \ or #string == 167 or #string == 173 or #string == 179 or #string == 181 or #string\
    \ == 191 or #string == 193 or #string == 197 or #string == 199 or #string == 211\
    \ or #string == 223 or #string == 227 or #string == 229 or #string == 233 or #string\
    \ == 239 or #string == 241 or #string == 251 or #string == 257 or #string == 263\
    \ or #string == 269 or #string == 271 or #string == 277 or #string == 281 or #string\
    \ == 283 or #string == 293 or #string == 307 or #string == 311 or #string == 313\
    \ or #string == 317 or #string == 331 or #string == 337 or #string == 347 or #string\
    \ == 349 or #string == 353 or #string == 359 or #string == 367 or #string == 373\
    \ or #string == 379 or #string == 383 or #string == 389 or #string == 397 or #string\
    \ == 401 or #string == 409 or #string == 419 or #string == 421 or #string == 431\
    \ or #string == 433 or #string == 439 or #string == 443 or #string == 449 or #string\
    \ == 457 or #string == 461 or #string == 463 or #string == 467 or #string == 479\
    \ or #string == 487 or #string == 491 or #string == 499 or #string == 503 or #string\
    \ == 509 or #string == 521 or #string == 523", "  -- body\nend", "  if #string\
    \ == 2 or #string == 3 or #string == 5 or #string == 7 or #string == 11 then\n\
    \    return true\n  elseif #string == 1 or #string == 4 or #string == 6 or #string\
    \ == 8 or #string == 9 or #string == 10 then\n    return false\n  end\nend", " \
    \   return is_prime(#string)\nend", "  -- YOUR CODE GOES HERE\nend", "  --[[\n\
    \    This function takes a string and check if the length of this string is a\n\
    \    prime number.\n    It returns true if it is, false otherwise.\n  ]]\n  local\
    \ len = string.len(string)\n  if len == 1 then\n    return false\n  end\n  for\
    \ i = 2, len - 1 do\n    if len % i == 0 then\n      return false\n    end\n \
    \ end\n  return true\nend", "  local function is_prime(n)\n    local function\
    \ prime_tester(n, i)\n      if n == 1 then\n        return false\n      elseif\
    \ n == 2 then\n        return true\n      elseif n % i == 0 then\n        return\
    \ false\n      elseif i == n - 1 then\n        return true\n      else\n     \
    \   return prime_tester(n, i + 1)\n      end\n    end\n    return prime_tester(n,\
    \ 2)\n  end\n  return is_prime(#string)\nend", "  return prime(string:len())\n\
    end", "  -- body\nend", "  local string_length = string.len(string)\n  if string_length\
    \ == 2 then\n    return true\n  end\n  if string_length % 2 == 0 then\n    return\
    \ false\n  end\n  local i = 3\n  while i * i <= string_length do\n    if string_length\
    \ % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\n\
    end", "  for i = 2, #string / 2 do\n    if #string % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local prime_numbers = {2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163,\
    \ 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\
    \ 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349,\
    \ 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443,\
    \ 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\
    \ 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647,\
    \ 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,\
    \ 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\
    \ 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,\
    \ 991, 997}\n    for _, prime in ipairs(prime_numbers) do\n        if #string\
    \ == prime then\n            return true\n        end\n    end\n    return false\n\
    end", "    local len = string.len(string)\n    if len <= 1 then\n        return\
    \ false\n    end\n    for i = 2, len - 1 do\n        if len % i == 0 then\n  \
    \          return false\n        end\n    end\n    return true\nend", "    local\
    \ num = string.len(string)\n    if num == 1 then\n        return false\n    end\n\
    \    for i = 2, num-1 do\n        if num % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local function is_prime(num)\n\
    \        for i = 2, num - 1 do\n            if num % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    return is_prime(#string)\nend", "    local length = string.len(string)\n\
    \    local is_prime = true\n    if length < 2 then\n        is_prime = false\n\
    \    else\n        for i = 2, length/2 do\n            if length % i == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n    end\n    return is_prime\nend", "  if is_prime(#string) then\n\
    \    return true\n  else\n    return false\n  end\nend", "    local len = string.len(string)\n\
    \    for i = 2, len-1 do\n        if len % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local prime_numbers = {\n \
    \       2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997\n    }\n    for i, prime in ipairs(prime_numbers) do\n  \
    \      if #string == prime then\n            return true\n        end\n    end\n\
    \    return false\nend", "  local len = string.len(string)\n  local factor_count\
    \ = 0\n  for i = 1, len do\n    if len % i == 0 then\n      factor_count = factor_count\
    \ + 1\n    end\n  end\n  return factor_count == 2\nend", "    local count = 0\n\
    \    for i = 1, string.len(string) do\n        count = count + 1\n    end\n  \
    \  if (count % 2 == 0) or (count % 3 == 0) or (count % 5 == 0) or (count % 7 ==\
    \ 0) or (count % 9 == 0) then\n        return false\n    else \n        return\
    \ true\n    end\nend", "    return\nend", "    return false\nend", "  local length\
    \ = string.len(string)\n  local is_prime = true\n  for i = 2, length - 1 do\n\
    \    if length % i == 0 then\n      is_prime = false\n      break\n    end\n \
    \ end\n  return is_prime\nend", "    if not pcall(function() string:gsub('.',\
    \ '') end) then\n        return false\n    end\n    local length = #string\n \
    \   if length == 1 then\n        return false\n    end\n    for i = 2, length\
    \ - 1 do\n        if length % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local l = string.len(string)\n  for i = 2,\
    \ l / 2 do\n    if l % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local length = #string\n  for i = 2, length - 1 do\n    if length\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend\nassert(prime_length('Hello')\
    \ == true)\nassert(prime_length('abcdcba') == true)\nassert(prime_length('kittens')\
    \ == true)\nassert(prime_length('orange') == false)", "    local length = string.len(string)\n\
    \    local is_prime = true\n    for i = 2, length - 1 do\n        if length %\
    \ i == 0 then\n            is_prime = false\n            break\n        end\n\
    \    end\n    return is_prime\nend", "    return string.len(string) == 2 or string.len(string)\
    \ == 3 or string.len(string) == 5 or string.len(string) == 7\nend", "  if string\
    \ == nil then return nil end\n  return is_prime(#string)\nend", "\t-- get the\
    \ length of the string\n\tlocal str_len = string.len(string)\n\t-- check for special\
    \ cases\n\tif str_len == 1 or str_len == 2 then\n\t\treturn true\n\telseif str_len\
    \ == 0 then\n\t\treturn false\n\tend\n\t-- set flag to true, then loop through\
    \ all numbers to check\n\tlocal is_prime = true\n\tfor div = 2, math.floor(str_len\
    \ / 2) do\n\t\tif str_len % div == 0 then\n\t\t\tis_prime = false\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn is_prime\nend", "  -- your code here\nend", "\treturn\
    \ is_prime(#string)\nend", "    if is_prime(#string) then\n        return true\n\
    \    else\n        return false\n    end\nend", "    local length = string.len(string)\n\
    \    for i = 2, length - 1 do\n        if length % i == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    return is_prime(#string)\n\
    end", "  return is_prime(#string)\nend", "    local len = string.len(string)\n\
    \    if len <= 1 then\n        return false\n    end\n    for i = 2, len - 1 do\n\
    \        if len % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local length = #string\n    local divisor_count =\
    \ 0\n    for i = 1, length do\n        if length % i == 0 then\n            divisor_count\
    \ = divisor_count + 1\n        end\n    end\n    return divisor_count == 2\nend\n\
    assert(prime_length('Hello') == true)\nassert(prime_length('abcdcba') == true)\n\
    assert(prime_length('kittens') == true)\nassert(prime_length('orange') == false)",
  "  if string.len(string) < 2 then\n    return false\n  end\n  for i = 2, math.floor(math.sqrt(string.len(string)))\
    \ do\n    if string.len(string) % i == 0 then\n      return false\n    end\n \
    \ end\n  return true\nend", "  return is_prime(#string)\nend", "  -- TODO: return\
    \ true or false\nend", "    local length = string.len(string)\n    if length ==\
    \ 2 then\n        return true\n    end\n    local divisor = 2\n    while divisor\
    \ < length do\n        if length % divisor == 0 then\n            return false\n\
    \        end\n        divisor = divisor + 1\n    end\n    return true\nend", " \
    \ return is_prime(#string)\nend", "  return is_prime(#string)\nend", "  -- TODO:\
    \ your code here\nend", "    -- TODO: Implement\nend", "  -- students: add code\
    \ here\nend", "  return is_prime(#string)\nend", "    local length = string.len(string)\n\
    \    if length == 2 then\n        return true\n    end\n    if length == 1 then\n\
    \        return false\n    end\n    for i = 2, length - 1 do\n        if length\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local string_length = #string\n    local is_prime = true\n    for i\
    \ = 2, string_length - 1 do\n        if string_length % i == 0 then\n        \
    \    is_prime = false\n            break\n        end\n    end\n    return is_prime\n\
    end", "  local length = #string\n  local number_of_factors = 0\n  for i = 1, length\
    \ do\n    if length % i == 0 then\n      number_of_factors = number_of_factors\
    \ + 1\n    end\n  end\n  return number_of_factors == 2\nend", "  return false\n\
    end", "\tlocal l = string.len(string)\n\tfor i = 2, l - 1 do\n\t\tif l % i ==\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    return\
    \ prime(#string)\nend", "  for i = 2, #string - 1 do\n    if #string % i == 0\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    -- TODO:\
    \ your code here\nend", "  local len = #string\n  if len == 1 then\n    return\
    \ true\n  end\n  for i = 2, math.floor(len/2) do\n    if len % i == 0 then\n \
    \     return false\n    end\n  end\n  return true\nend", "    return is_prime(#string)\n\
    end", "  -- your code here\nend", "    local length = string.len(string)\n   \
    \ if length == 1 then\n        return false\n    end\n    for i = 2, math.sqrt(length)\
    \ do\n        if length % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local length = string.len(string)\n    for\
    \ i = 2, length-1 do\n        if length % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local len = string.len(string)\n\
    \  if len == 1 then\n    return false\n  end\n  for i = 2, len-1 do\n    if len\
    \ % i == 0 then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  -- TODO: Your code here\nend", "  return is_prime(#string)\nend", "    -- Insert\
    \ your code here\nend", "    local length = #string\n    for i = 2, length - 1\
    \ do\n        if length % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "    return is_prime(#string)\nend", "    if\
    \ string.len(string) < 2 then\n        return false\n    end\n    for i = 2, string.len(string)\
    \ - 1 do\n        if string.len(string) % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  return is_prime(#string)\nend",
  "    return true\nend", "  -- your code here\nend", "  return is_prime(#string)\n\
    end", "    return false\nend", "    return is_prime(#string)\nend", "    if not\
    \ is_prime(#string) then\n        return false\n    end\n    return true\nend",
  "  local length = string.len(string)\n  if length == 2 then\n    return true\n \
    \ end\n  if length == 3 then\n    return true\n  end\n  for i = 2, length - 1\
    \ do\n    if length % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local len = string.len(string)\n    if len == 2 or len == 3\
    \ or len == 5 or len == 7 then\n        return true\n    elseif len % 2 == 0 or\
    \ len % 3 == 0 or len % 5 == 0 or len % 7 == 0 then\n        return false\n  \
    \  else\n        return true\n    end\nend", "    local length = string.len(string)\n\
    \    for i = 2, math.floor(math.sqrt(length)) do\n        if length % i == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ string.len(string) == 2 or string.len(string) == 3 then\n        return true\n\
    \    elseif string.len(string) % 2 == 0 or string.len(string) % 3 == 0 then\n\
    \        return false\n    else\n        return true\n    end\nend", "    local\
    \ str = #string\n    if str <= 1 then\n        return false\n    end\n    for\
    \ i = 2, str - 1 do\n        if str % i == 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  -- your code here\nend", "  --\
    \ TODO\nend", "  local length = string.len(string)\n  for i = 2, (length - 1)\
    \ do\n    if length % i == 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local length = string.len(string)\n    for i = 2, length -\
    \ 1 do\n        if length % i == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local length = string.len(string)\n  local\
    \ divisor = length - 1\n  while divisor > 1 do\n    if length % divisor == 0 then\n\
    \      return false\n    end\n    divisor = divisor - 1\n  end\n  return true\n\
    end", "  -- body\nend", "    for i = 2, #string - 1 do\n        if (#string %\
    \ i) == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "    local len = #string\n    local is_prime = true\n    for i = 2, len\
    \ - 1 do\n        if len % i == 0 then\n            is_prime = false\n       \
    \     break\n        end\n    end\n    return is_prime\nend", "  -- your code\
    \ here\nend", "    local function is_prime(number)\n        for i = 2, number\
    \ / 2 do\n            if number % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return is_prime(#string)\n\
    end", "  local length = #string\n  if length % 2 == 0 then\n    return false\n\
    \  end\n  for i = 3, math.sqrt(length), 2 do\n    if length % i == 0 then\n  \
    \    return false\n    end\n  end\n  return true\nend", "  local len = string.len(string)\n\
    \  for i = 2, math.floor(math.sqrt(len)) do\n    if len % i == 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if string.len(string) == 2 or\
    \ string.len(string) == 3 then\n    return true\n  elseif string.len(string) %\
    \ 2 == 0 or string.len(string) % 3 == 0 then\n    return false\n  else\n    return\
    \ true\n  end\nend", "  local prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n  local set = {}\n\
    \  local length = string.len(string)\n  for _, prime in ipairs(prime_numbers)\
    \ do\n    if prime == length then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    if prime(#string) then\n        return true\n    else\n  \
    \      return false\n    end\nend", "    -- write code here\nend", "    local\
    \ prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997}\n    local length = #string\n    for _, v\
    \ in ipairs(prime_numbers) do\n        if v == length then\n            return\
    \ true\n        end\n    end\n    return false\nend", "\tif not is_prime(#string)\
    \ then\n\t\treturn false\n\tend\n\treturn true\nend", "    local string_length\
    \ = string.len(string)\n    if string_length % 2 == 0 then\n        return false\n\
    \    end\n    for i = 3, math.sqrt(string_length), 2 do\n        if string_length\
    \ % i == 0 then\n            return false\n        end\n    end\n    return true\n\
    end", "  -- If 'string' is not a string, return nil\n  if type(string) ~= 'string'\
    \ then\n    return nil\n  end", "    local length = #string\n    for divisor =\
    \ 2, length - 1 do\n        if length % divisor == 0 then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    local prime = false\n\
    \    local length = string.len(string)\n    if length == 2 or length == 3 or length\
    \ == 5 or length == 7 then\n        prime = true\n    end\n    return prime\n\
    end", "    local length = #string\n    for i = 2, math.sqrt(length) do\n     \
    \   if length % i == 0 then\n            return false\n        end\n    end\n\
    \    return true\nend", "\t-- your code here\nend", "  if #string == 2 or #string\
    \ == 3 or #string == 5 or #string == 7 then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    local length = #string\n    if length <= 1 then\n \
    \       return false\n    end\n    local divisor = 2\n    while divisor < length\
    \ do\n        if length % divisor == 0 then\n            return false\n      \
    \  end\n        divisor = divisor + 1\n    end\n    return true\nend", "    local\
    \ len = string.len(string)\n    if len == 2 or len == 3 or len == 5 or len ==\
    \ 7 then\n        return true\n    elseif len % 2 == 0 or len % 3 == 0 or len\
    \ % 5 == 0 or len % 7 == 0 then\n        return false\n    else\n        return\
    \ true\n    end\nend", "  -- TODO: YOUR CODE HERE\nend", "  if string.len(string)\
    \ <= 3 then\n    return true\n  end\n  for i = 2, string.len(string) - 1 do\n\
    \    if string.len(string) % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend", "    local n = #string\n    if n == 1 then\n        return\
    \ false\n    end\n    if n == 2 then\n        return true\n    end\n    local\
    \ max_divisor = math.floor(math.sqrt(n))\n    for i = 2, max_divisor do\n    \
    \    if n % i == 0 then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local size = string.len(string)\n  return is_prime(size)\nend",
  "    local str_len = string.len(string)\n    local function is_prime(num)\n    \
    \    if num == 1 then\n            return false\n        end\n        for i =\
    \ 2, num - 1 do\n            if num % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return is_prime(str_len)\n\
    end", "    local len = string.len(string)\n    for i = 2, math.sqrt(len) do\n\
    \        if math.fmod(len, i) == 0 then\n            return false\n        end\n\
    \    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
