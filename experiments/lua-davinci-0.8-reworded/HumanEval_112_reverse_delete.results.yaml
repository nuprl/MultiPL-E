name: HumanEval_112_reverse_delete
language: lua
results:
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n\tfor i = 1, #c do\n\t\ts = s:gsub(c:sub(i, i),\
    \ '')\n\tend\n\tlocal tmp = s:reverse()\n\treturn {s, s == tmp}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local r = ''\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if not c:find(c) then\n      r = r .. c\n    end\n  end\n\
    \  return {r, r == r:reverse()}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpftr9pn09.lua:27:\
    \ expected: {\"bcd\", false}\nactual: {\"\", true}\nstack traceback:\n\t/tmp/tmpftr9pn09.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1fmm0qc.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpy1fmm0qc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local res = {}\n  for i=1, #s do\n    local\
    \ char = s:sub(i, i)\n    if not c:find(char) then\n      table.insert(res, char)\n\
    \    end\n  end\n  local str = table.concat(res)\n  local palindrome = str ==\
    \ str:reverse()\n  return {str, palindrome}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local str, palindrome = {}, {}\n  for i=1,\
    \ string.len(s) do\n    local ch = string.sub(s, i, i)\n    local c1 = string.find(c,\
    \ ch)\n    if not c1 then\n      table.insert(str, ch)\n    end\n  end\n  for\
    \ i=1, string.len(str) do\n    local ch = string.sub(str, i, i)\n    table.insert(palindrome,\
    \ ch)\n  end\n  local rev_str = string.reverse(str)\n  local rev_palindrome =\
    \ string.reverse(palindrome)\n  if rev_str == rev_palindrome then\n    return\
    \ {str, true}\n  else\n    return {str, false}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl9q_aasw.lua:22:\
    \ bad argument #1 to 'len' (string expected, got table)\nstack traceback:\n\t\
    /tmp/tmpl9q_aasw.lua:22: in local 'candidate'\n\t/tmp/tmpl9q_aasw.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local result = ''\n    for i = 1, #s do\n\
    \        local ch = s:sub(i, i)\n        if not c:find(ch) then\n            result\
    \ = result .. ch\n        end\n    end\n    return {result, result == result:reverse()}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local res = {}\n  for i = 1, #s do\n    if\
    \ s:find(s:sub(i, i), 1, true) then\n      table.insert(res, s:sub(i, i))\n  \
    \  end\n  end\n  return {table.concat(res), res == table.reverse(res)}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0fk_bmb0.lua:20:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmp0fk_bmb0.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp0fk_bmb0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local t = {}\n    for i = 1, #s do\n    \
    \    local ch = s:sub(i, i)\n        if not c:find(ch) then\n            t[#t\
    \ + 1] = ch\n        end\n    end\n    s = table.concat(t)\n    local function\
    \ is_palindrome(s)\n        local half = math.floor(#s / 2)\n        for i = 1,\
    \ half do\n            if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return {s, is_palindrome(s)}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n\tlocal new_s = s:gsub('['..c..']', '')\n\treturn\
    \ {new_s, new_s:reverse() == new_s}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sg9987q.lua:14:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmp7sg9987q.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7sg9987q.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  for i = 1, #c do\n    s = s:gsub(c:sub(i, i),\
    \ '')\n  end\n  return {s, s == s:reverse()}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local s2 = s:gsub('['..c..']', '')\n    return\
    \ {s2, s2:reverse() == s2}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplh48d8z_.lua:14:\
    \ malformed pattern (missing ']')\nstack traceback:\n\t/tmp/tmplh48d8z_.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplh48d8z_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local res = ''\n    for i = 1, #s do\n  \
    \      if not c:find(s:sub(i, i)) then\n            res = res .. s:sub(i, i)\n\
    \        end\n    end\n    return {res, res == res:reverse()}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  local out = {}\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.find(c, s:sub(i, i)) then\n      t[i] = 0\n    else\n \
    \     t[i] = 1\n    end\n  end\n  for i = 1, #s do\n    if t[i] == 1 then\n  \
    \    table.insert(out, s:sub(i, i))\n    end\n  end\n  out = table.concat(out)\n\
    \  local reverse_out = string.reverse(out)\n  local result = {}\n  if out == reverse_out\
    \ then\n    table.insert(result, out)\n    table.insert(result, true)\n  else\n\
    \    table.insert(result, out)\n    table.insert(result, false)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n\
    \    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik',\
    \ false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba', 'v'),\
    \ {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplb6j0p5k.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmplb6j0p5k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  for i = 1, #c do\n    s = s:gsub(c:sub(i, i),\
    \ '')\n  end\n  local function is_palindrome(s)\n    local len = #s\n    for i\
    \ = 1, len / 2 do\n      if s:sub(i, i) ~= s:sub(len - i + 1, len - i + 1) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  return {s,\
    \ is_palindrome(s)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = reverse_delete\n    lu.assertEquals(candidate('abcde', 'ae'),\
    \ {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef', false})\n\
    \    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n    lu.assertEquals(candidate('dwik',\
    \ 'w'), {'dik', false})\n    lu.assertEquals(candidate('a', 'a'), {'', true})\n\
    \    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba', true})\n    lu.assertEquals(candidate('abcdedcba',\
    \ 'v'), {'abcdedcba', true})\n    lu.assertEquals(candidate('vabba', 'v'), {'abba',\
    \ true})\n    lu.assertEquals(candidate('mamma', 'mia'), {'', true})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    local s_clean = {}\n    for i = 1, #s do\n\
    \        local char = s:sub(i, i)\n        if not c:find(char) then\n        \
    \    s_clean[#s_clean + 1] = char\n        end\n    end\n    s_clean = table.concat(s_clean)\n\
    \    local s_reverse = s_clean:reverse()\n    return {s_clean, s_clean == s_reverse}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
    \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
    \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
    \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7bjk1b5.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpc7bjk1b5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaff997_r.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpaff997_r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  return {s:gsub(c, ''), false}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrp0y5ta.lua:20:\
    \ expected: {\"bcd\", false}\nactual: {\"abcde\", false}\nstack traceback:\n\t\
    /tmp/tmprrp0y5ta.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Task\n-- We are given two strings s and c, you have to deleted all\
    \ the characters in s that are equal to any character in c\n-- then check if the\
    \ result string is palindrome.\n-- A string is called palindrome if it reads the\
    \ same backward as forward.\n-- You should return a table containing the result\
    \ string and true/false for the check.\n-- Example\n-- >>> reverse_delete('abcde',\
    \ 'ae')\n-- {'bcd', false}\n-- >>> reverse_delete('abcdef', 'b')\n-- {'acdef',\
    \ false}\n-- >>> reverse_delete('abcdedcba', 'ab')\n-- {'cdedc', true}\nlocal\
    \ function reverse_delete(s, c)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = reverse_delete\n    lu.assertEquals(candidate('abcde',\
    \ 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef', 'b'), {'acdef',\
    \ false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc', true})\n\
    \    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
    \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
    \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
    \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
    \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0mowwtv.lua:20:\
    \ expected: {\"bcd\", false}\nactual: nil\nstack traceback:\n\t/tmp/tmpd0mowwtv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
