language: lua
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return \"db\"\
    \ .. decToBin(decimal) .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsk1qveaw.lua:12:\
    \ attempt to call a nil value (global 'decToBin')\nstack traceback:\n\t/tmp/tmpsk1qveaw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpsk1qveaw.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal result = \"\
    db\"\n\tlocal quotient = decimal\n\tlocal remainder = 0\n\twhile quotient ~= 0\
    \ do\n\t\tremainder = quotient % 2\n\t\tquotient = math.floor(quotient / 2)\n\t\
    \tresult = string.format(\"%d%s\", remainder, result)\n\tend\n\tresult = result\
    \ .. \"db\"\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzzc78jp.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpzzzc78jp.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local remainder = decimal % 2\n      \
    \  binary = binary .. remainder\n        decimal = (decimal - remainder) / 2\n\
    \    end\n    binary = 'db' .. binary .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpwt8npn.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpxpwt8npn.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Use the metatable\
    \ to convert the number to a string in binary format\n    local binary = {}\n\
    \    binary.__tostring = function(self)\n        local str = ''\n        for i\
    \ = 1, #self do\n            str = str .. self[i]\n        end\n        return\
    \ str\n    end\n    -- Get the list of bits by looping through the number of bits\n\
    \    local num_bits = math.ceil(math.log(decimal) / math.log(2))\n    for i =\
    \ num_bits, 1, -1 do\n        local num = math.pow(2, i - 1)\n        if decimal\
    \ >= num then\n            table.insert(binary, '1')\n            decimal = decimal\
    \ - num\n        else\n            table.insert(binary, '0')\n        end\n  \
    \  end\n    -- Return the string\n    return ('db%sdb'):format(binary)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0vaik7i.lua:39:\
    \ expected: \"db0db\"\nactual: \"dbtable: 0x1fe61e0db\"\nstack traceback:\n\t\
    /tmp/tmpf0vaik7i.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ string.reverse('db' .. binary .. 'db')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj11x98lw.lua:24:\
    \ expected: \"db0db\"\nactual: \"bdbd\"\nstack traceback:\n\t/tmp/tmpj11x98lw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary_string\
    \ = \"db\"\n    if decimal == 0 then\n        binary_string = binary_string ..\
    \ \"0\"\n    else\n        while decimal > 0 do\n            binary_string = binary_string\
    \ .. math.floor(decimal % 2)\n            decimal = math.floor(decimal / 2)\n\
    \        end\n    end\n    binary_string = binary_string .. \"db\"\n    binary_string\
    \ = string.reverse(binary_string)\n    return binary_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rlab9vc.lua:29:\
    \ expected: \"db0db\"\nactual: \"bd0bd\"\nstack traceback:\n\t/tmp/tmp2rlab9vc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local result =\
    \ ''\n    local remainder\n    repeat\n        remainder = decimal % 2\n     \
    \   decimal = math.floor(decimal / 2)\n        result = remainder .. result\n\
    \    until decimal == 0\n    return 'db' .. result .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bit_string\
    \ = \"\"\n  for i = math.floor(math.log(decimal, 2)), 0, -1 do\n    if decimal\
    \ >= 2^i then\n      bit_string = bit_string .. \"1\"\n      decimal = decimal\
    \ - 2^i\n    else\n      bit_string = bit_string .. \"0\"\n    end\n  end\n  return\
    \ \"db\" .. bit_string .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpru984ayo.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpru984ayo.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return string.format(\"\
    db%bdb\", decimal)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cli7j76.lua:12:\
    \ invalid option '%b' to 'format'\nstack traceback:\n\t/tmp/tmp6cli7j76.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp6cli7j76.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  if decimal == 0 then return 'db0db' end\n  while decimal > 0 do\n    local\
    \ remainder = decimal % 2\n    binary = (remainder == 0 and '0' or '1') .. binary\n\
    \    decimal = (decimal - remainder) / 2\n  end\n  return 'db' .. binary .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\t-- Implement your\
    \ function here\n\treturn \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9keckat.lua:19:\
    \ expected: \"db0db\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_9keckat.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bits = {}\n\
    \  local number = math.floor(decimal)\n  local binary = ''\n  local function get_binary(number)\n\
    \    local i = 1\n    while number > 0 do\n      bits[i] = number % 2\n      number\
    \ = math.floor(number / 2)\n      i = i + 1\n    end\n  end\n  get_binary(number)\n\
    \  for j = 1, #bits do\n    binary = binary .. tostring(bits[j])\n  end\n  return\
    \ 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoilmh7g9.lua:33:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpoilmh7g9.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local number =\
    \ \"db\"\n   while decimal > 0 do\n      local rest = decimal % 2\n      number\
    \ = number .. tostring(rest)\n      decimal = (decimal - rest) / 2\n   end\n \
    \  number = number .. \"db\"\n   return number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a5c26nq.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp8a5c26nq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal result = 'db'\n\
    \twhile decimal > 0 do\n\t\tresult = result .. (decimal % 2)\n\t\tdecimal = math.floor(decimal\
    \ / 2)\n\tend\n\treturn result .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3nv5rp_.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpv3nv5rp_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return (\"db%sdb\"\
    ):format(decimal:gsub(\".\", {[\"0\"] = \"0000\", [\"1\"] = \"0001\", [\"2\"]\
    \ = \"0010\", [\"3\"] = \"0011\", [\"4\"] = \"0100\", [\"5\"] = \"0101\", [\"\
    6\"] = \"0110\", [\"7\"] = \"0111\", [\"8\"] = \"1000\", [\"9\"] = \"1001\"}))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyp3dqxz.lua:12:\
    \ attempt to index a number value (local 'decimal')\nstack traceback:\n\t/tmp/tmpoyp3dqxz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpoyp3dqxz.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ decimal:reverse():gsub('%d',\n        function(d)\n            return d:byte()\
    \ - 48\n        end):gsub('%d',\n        function(d)\n            return string.char(d\
    \ + 48)\n        end):reverse() .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71oqtwtl.lua:12:\
    \ attempt to index a number value (local 'decimal')\nstack traceback:\n\t/tmp/tmp71oqtwtl.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp71oqtwtl.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local decimal_to_binary_map\
    \ = {\n    [0]  = '0',\n    [1]  = '1',\n    [2]  = '10',\n    [3]  = '11',\n\
    \    [4]  = '100',\n    [5]  = '101',\n    [6]  = '110',\n    [7]  = '111',\n\
    \    [8]  = '1000',\n    [9]  = '1001',\n    [10] = '1010',\n    [11] = '1011',\n\
    \    [12] = '1100',\n    [13] = '1101',\n    [14] = '1110',\n    [15] = '1111',\n\
    \    [16] = '10000',\n    [17] = '10001',\n    [18] = '10010',\n    [19] = '10011',\n\
    \    [20] = '10100',\n    [21] = '10101',\n    [22] = '10110',\n    [23] = '10111',\n\
    \    [24] = '11000',\n    [25] = '11001',\n    [26] = '11010',\n    [27] = '11011',\n\
    \    [28] = '11100',\n    [29] = '11101',\n    [30] = '11110',\n    [31] = '11111',\n\
    \    [32] = '100000',\n    [33] = '100001',\n    [34] = '100010',\n    [35] =\
    \ '100011',\n    [36] = '100100',\n    [37] = '100101',\n    [38] = '100110',\n\
    \    [39] = '100111',\n    [40] = '101000',\n    [41] = '101001',\n    [42] =\
    \ '101010',\n    [43] = '101011',\n    [44] = '101100',\n    [45] = '101101',\n\
    \    [46] = '101110',\n    [47] = '101111',\n    [48] = '110000',\n    [49] =\
    \ '110001',\n    [\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppwbet0a9.lua:64: '']'' expected near ''=''

    '
  stdout: ''
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\treturn 'db' .. string.format('%X',\
    \ decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8oqueeie.lua:19:\
    \ expected: \"db100000db\"\nactual: \"db20db\"\nstack traceback:\n\t/tmp/tmp8oqueeie.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal bin = \"\"\
    \n\tlocal mask = 0x80\n\t\n\t-- check for negative values\n\tif (decimal < 0)\
    \ then\n\t\tdecimal = decimal + 256\n\tend\n\t\n\tfor i = 1, 8 do\n\t\tif (bit32.band(decimal,\
    \ mask) == 0) then\n\t\t\tbin = bin .. \"0\"\n\t\telse\n\t\t\tbin = bin .. \"\
    1\"\n\t\tend\n\t\tmask = bit32.rshift(mask, 1)\n\tend\n\t\n\treturn \"db\" ..\
    \ bin .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26x4mpx1.lua:35:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmp26x4mpx1.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  return 'db' .. toBinaryString(decimal)\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ojghvzc.lua:12:\
    \ attempt to call a nil value (global 'toBinaryString')\nstack traceback:\n\t\
    /tmp/tmp0ojghvzc.lua:12: in local 'candidate'\n\t/tmp/tmp0ojghvzc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        binary = binary .. tostring(decimal\
    \ % 2)\n        decimal = math.floor(decimal / 2)\n    end\n    binary = binary\
    \ .. \"db\"\n    binary = string.reverse(binary)\n    return binary\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdflavvgj.lua:25:\
    \ expected: \"db0db\"\nactual: \"bdbd\"\nstack traceback:\n\t/tmp/tmpdflavvgj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal result = \"\
    db\"\n\tlocal val = decimal\n\tlocal bits = 0\n\twhile val > 0 do\n\t\tval = math.floor(val\
    \ / 2)\n\t\tbits = bits + 1\n\tend\n\twhile bits > 0 do\n\t\tif decimal % 2 ==\
    \ 0 then\n\t\t\tresult = result .. \"0\"\n\t\telse\n\t\t\tresult = result .. \"\
    1\"\n\t\tend\n\t\tdecimal = math.floor(decimal / 2)\n\t\tbits = bits - 1\n\tend\n\
    \tresult = result .. \"db\"\n\treturn result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r8j_e5b.lua:35:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9r8j_e5b.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local rest, binary\
    \ = {}, ''\n    while decimal > 0 do\n        rest[#rest + 1] = decimal % 2\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    while #rest > 0 do\n\
    \        binary = binary .. rest[#rest]\n        rest[#rest] = nil\n    end\n\
    \    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio32w8pu.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpio32w8pu.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary_numbers\
    \ = {'0', '1'}\n  local binary_string = 'db'\n  while decimal > 0 do\n    local\
    \ number = math.floor(decimal % 2)\n    binary_string = binary_numbers[number\
    \ + 1] .. binary_string\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary_string .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot1akqn9.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpot1akqn9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local s = ''\n\
    \    while decimal ~= 0 do\n        local r = math.fmod(decimal, 2)\n        s\
    \ = r .. s\n        decimal = math.floor(decimal / 2)\n    end\n    return 'db'\
    \ .. s .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8raplri.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpd8raplri.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  local remainder\n  local done = false\n  while not done do\n    remainder =\
    \ decimal % 2\n    decimal = (decimal - remainder) / 2\n    binary = tostring(remainder)\
    \ .. binary\n    if decimal == 0 then\n      done = true\n    end\n  end\n  binary\
    \ = 'db' .. binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0e196nql.lua:31:\
    \ expected: \"db100000db\"\nactual: \"db1.00.00.00.00.00db\"\nstack traceback:\n\
    \t/tmp/tmp0e196nql.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    if decimal ==\
    \ 0 then\n        return 'db0db'\n    end\n    local bin = ''\n    while decimal\
    \ > 0 do\n        local b = decimal % 2\n        decimal = (decimal - b) / 2\n\
    \        bin = string.format('%s%d', bin, b)\n    end\n    return string.format('db%sdb',\
    \ bin)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6ar128s.lua:28:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmpy6ar128s.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local remainder,\
    \ binary, i = 0, \"\", 0\n  while decimal ~= 0 do\n    remainder = decimal % 2\n\
    \    decimal = (decimal - remainder) / 2\n    binary = tostring(remainder) ..\
    \ binary\n  end\n  if #binary < 8 then\n    binary = string.rep(\"0\", 8 - #binary)\
    \ .. binary\n  end\n  return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6ku7i8c.lua:27:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmpl6ku7i8c.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal neg = false\n\
    \tif decimal < 0 then\n\t\tneg = true\n\t\tdecimal = -decimal\n\tend\n\tlocal\
    \ binary = 'db'\n\tlocal divisor = 1\n\tlocal bit = 0\n\twhile math.floor(decimal/divisor)\
    \ > 0 do\n\t\tbit = math.floor(decimal/divisor)%2\n\t\tif bit > 0 then\n\t\t\t\
    binary = binary..'1'\n\t\telse\n\t\t\tbinary = binary..'0'\n\t\tend\n\t\tdivisor\
    \ = divisor*2\n\tend\n\tif neg then\n\t\tbinary = binary..'1'\n\telse\n\t\tbinary\
    \ = binary..'0'\n\tend\n\tbinary = binary..'db'\n\treturn binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa0434qf3.lua:42:\
    \ expected: \"db100000db\"\nactual: \"db0000010db\"\nstack traceback:\n\t/tmp/tmpa0434qf3.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal result = \"\
    \"\n\tlocal function helper(decimal)\n\t\tif decimal == 0 then\n\t\t\treturn nil\n\
    \t\telse\n\t\t\tlocal char = (decimal % 2) == 0 and \"0\" or \"1\"\n\t\t\tresult\
    \ = char .. result\n\t\t\treturn helper(math.floor(decimal / 2))\n\t\tend\n\t\
    end\n\thelper(decimal)\n\treturn \"db\" .. result .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82e8ewg1.lua:29:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp82e8ewg1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    repeat\n        if decimal % 2 == 0 then\n            binary = '0'\
    \ .. binary\n        else\n            binary = '1' .. binary\n        end\n \
    \       decimal = math.floor(decimal / 2)\n    until decimal == 0\n    return\
    \ binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9vqq469.lua:27:\
    \ expected: \"db0db\"\nactual: \"0dbdb\"\nstack traceback:\n\t/tmp/tmpt9vqq469.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local binary =\
    \ ''\n   local current = decimal\n   while true do\n      binary = string.format('%s%s',\
    \ current % 2, binary)\n      current = math.floor(current / 2)\n      if current\
    \ <= 0 then\n         break\n      end\n   end\n   return string.format('db%sdb',\
    \ binary)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local bin_str\
    \ = \"db\"\n    repeat\n        local new_digit = decimal % 2\n        bin_str\
    \ = new_digit .. bin_str\n        decimal = math.floor(decimal / 2)\n    until\
    \ decimal == 0\n    return bin_str .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2g5m168h.lua:24:\
    \ expected: \"db0db\"\nactual: \"0dbdb\"\nstack traceback:\n\t/tmp/tmp2g5m168h.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tdecimal = tostring(decimal)\n\
    \tif (decimal == \"0\") then\n\t\treturn \"db0db\"\n\tend\n\tlocal number = \"\
    \"\n\twhile(decimal > 0) do\n\t\tif (decimal % 2 == 0) then\n\t\t\tnumber = \"\
    0\" .. number\n\t\telse\n\t\t\tnumber = \"1\" .. number\n\t\tend\n\t\tdecimal\
    \ = math.floor(decimal / 2)\n\tend\n\treturn \"db\" .. number .. \"db\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp490j9n55.lua:17:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmp490j9n55.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp490j9n55.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local dec = decimal\n\
    \    local lst_num = \"\"\n    local bin = \"\"\n    while (dec > 0) do\n    \
    \    lst_num = dec % 2\n        dec = math.floor(dec / 2)\n        bin = tostring(lst_num)\
    \ .. bin\n    end\n    return 'db' .. bin .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6kh7t844.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6kh7t844.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal value = \"\
    db\"\n\tlocal reminder = decimal\n\t\n\trepeat\n\t\tif reminder % 2 == 0 then\n\
    \t\t\tvalue = value .. \"0\"\n\t\telse\n\t\t\tvalue = value .. \"1\"\n\t\tend\n\
    \t\treminder = math.floor(reminder / 2)\n\tuntil reminder == 0\n\t\n\treturn value\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qtmr166.lua:31:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmp1qtmr166.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- [your code\
    \ here]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1b7wmp2m.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1b7wmp2m.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bin = 'db'\n\
    \  local rem\n  while decimal > 0 do\n    rem = decimal % 2\n    bin = bin ..\
    \ tostring(rem)\n    decimal = (decimal - rem) / 2\n  end\n  bin = bin .. 'db'\n\
    \  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6l6bpy1.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpa6l6bpy1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = {}\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    table.insert(binary,\
    \ remainder)\n    decimal = (decimal - remainder) / 2\n  end\n  table.insert(binary,\
    \ 1, 'd')\n  table.insert(binary, 'b')\n  return table.concat(binary)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefo6wn56.lua:26:\
    \ expected: \"db0db\"\nactual: \"db\"\nstack traceback:\n\t/tmp/tmpefo6wn56.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    repeat\n        local remainder = decimal % 2\n        binary = tostring(remainder)\
    \ .. binary\n        decimal = (decimal - remainder) / 2\n    until decimal ==\
    \ 0\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4twg2nc.lua:25:\
    \ expected: \"db100000db\"\nactual: \"db1.00.00.00.00.00db\"\nstack traceback:\n\
    \t/tmp/tmpr4twg2nc.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- TODO: Fill\
    \ me in!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcww3w59b.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpcww3w59b.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  -- Decimal to binary\
    \ algorithm\n  local dec_to_bin = {'0', '1'}\n  local binary = ''\n  while decimal\
    \ > 0 do\n    binary = dec_to_bin[(decimal % 2) + 1] .. binary\n    decimal =\
    \ math.floor(decimal / 2)\n  end\n  -- Prepend extra characters\n  binary = 'db'\
    \ .. binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgydjh_x_.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgydjh_x_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tdecimal = string.format(\"\
    %o\",decimal)\n\treturn 'db'..decimal..'db'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn97o166n.lua:20:\
    \ expected: \"db100000db\"\nactual: \"db40db\"\nstack traceback:\n\t/tmp/tmpn97o166n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while (decimal > 0) do\n    binary = tostring(decimal % 2) .. binary\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2xz1vmx.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpt2xz1vmx.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  return decimal\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl9l6dq22.lua:18:\
    \ expected: \"db0db\"\nactual: 0\nstack traceback:\n\t/tmp/tmpl9l6dq22.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    if decimal ==\
    \ 0 then\n        return 'db0db'\n    end\n    local binary = 'db'\n    while\
    \ decimal > 0 do\n        local r = decimal % 2\n        binary = binary .. tostring(r)\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    binary = binary .. 'db'\n\
    \    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pt1voyg.lua:29:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmp6pt1voyg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- bin contains\
    \ 'db' prefix and 'db' suffix\n    local bin = 'db'\n    -- append '0' or '1'\
    \ characters to bin until 'decimal' is 0\n    while decimal > 0 do\n        bin\
    \ = bin .. (decimal % 2)\n        decimal = math.floor(decimal / 2)\n    end\n\
    \    -- reverse bin and return it\n    return string.reverse(bin) .. 'db'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8u55dob4.lua:26:\
    \ expected: \"db0db\"\nactual: \"bddb\"\nstack traceback:\n\t/tmp/tmp8u55dob4.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  -- write code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbody694.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdbody694.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local sign = ''\n\
    \  if decimal < 0 then\n    sign = '-'\n    decimal = -decimal\n  end\n  local\
    \ n = decimal\n  local binary = ''\n  while n > 0 do\n    local d = n % 2\n  \
    \  n = (n - d) / 2\n    binary = tostring(d) .. binary\n  end\n  return 'db' ..\
    \ sign .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebciyeld.lua:30:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpebciyeld.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary_table\
    \ = {}\n    while decimal > 0 do\n        local last_digit = decimal % 2\n   \
    \     table.insert(binary_table, last_digit)\n        decimal = (decimal - last_digit)\
    \ / 2\n    end\n    local binary_string = \"db\"\n    for _, v in ipairs(binary_table)\
    \ do\n        binary_string = binary_string .. tostring(v)\n    end\n    binary_string\
    \ = binary_string .. \"db\"\n    return binary_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2218mrf.lua:29:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpf2218mrf.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local binary_reversed = ''\n    local remainder = nil\n    local factor\
    \ = 2\n    local dividend = decimal\n    repeat\n        remainder = dividend\
    \ % factor\n        dividend = (dividend - remainder) / factor\n        binary_reversed\
    \ = binary_reversed .. remainder\n    until dividend == 0\n    for i = 1, #binary_reversed\
    \ do\n        binary = binary .. string.sub(binary_reversed, #binary_reversed\
    \ - i + 1, #binary_reversed - i + 1)\n    end\n    return 'db' .. binary .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbenfsj3h.lua:32:\
    \ expected: \"db100000db\"\nactual: \"db0.10.00.00.00.00db\"\nstack traceback:\n\
    \t/tmp/tmpbenfsj3h.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2e8gib8.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu2e8gib8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local power = 1\n    while power <= decimal do\n        power = power\
    \ * 2\n    end\n    power = power / 2\n    while power >= 1 do\n        if power\
    \ <= decimal then\n            binary = binary .. '1'\n            decimal = decimal\
    \ - power\n        else\n            binary = binary .. '0'\n        end\n   \
    \     power = power / 2\n    end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzs5yc6m.lua:33:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpnzs5yc6m.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local binary =\
    \ {}\n   local value = decimal\n   while value > 0 do\n      local rest = value\
    \ % 2\n      value = math.floor(value / 2)\n      table.insert(binary, rest)\n\
    \   end\n   binary = table.concat(binary):reverse()\n   binary = 'db' .. binary\
    \ .. 'db'\n   return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjeg12sr7.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpjeg12sr7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal b = \"db\"\
    \n\twhile decimal > 0 do\n\t\tlocal rest = decimal % 2\n\t\tdecimal = (decimal\
    \ - rest) / 2\n\t\tb = b .. rest\n\tend\n\treturn b .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rp3grw6.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9rp3grw6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local result =\
    \ 'db'\n    while decimal ~= 0 do\n        local remainder = decimal % 2\n   \
    \     result = result .. tostring(remainder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    result = result .. 'db'\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6r4wbpfs.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6r4wbpfs.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bin = \"\"\
    \n  while decimal > 0 do\n    local rem = math.floor(decimal % 2)\n    bin = rem\
    \ .. bin\n    decimal = math.floor(decimal / 2)\n  end\n  bin = \"db\" .. bin\
    \ .. \"db\"\n  return bin\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uu_ee3s.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9uu_ee3s.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local function build_binary(decimal,\
    \ binary)\n    if decimal == 0 then\n      return binary\n    else\n      local\
    \ next_decimal = math.floor(decimal / 2)\n      local next_binary = build_binary(next_decimal,\
    \ binary)\n      local remainder = decimal % 2\n      return table.concat({next_binary,\
    \ remainder})\n    end\n  end\n  return 'db' .. build_binary(decimal, '') .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2dg3cge.lua:28:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpt2dg3cge.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  local idx = 1\n  while decimal > 0 do\n    local remainder = decimal % 2\n\
    \    decimal = math.floor(decimal / 2)\n    binary = remainder .. binary\n   \
    \ idx = idx + 1\n  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5umq7uf.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpc5umq7uf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local decimal\
    \ = decimal\n    local result = {}\n    local pos = 1\n    local bin_digit\n \
    \   local i\n    for i = 7, 0, -1 do\n        bin_digit = (decimal >> i) & 1\n\
    \        result[pos] = bin_digit\n        pos = pos + 1\n    end\n    return \"\
    db\" .. table.concat(result) .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjm5szxb_.lua:28:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmpjm5szxb_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  if not tonumber(decimal)\
    \ then\n    return ''\n  end\n  local binary = ''\n  while decimal > 0 do\n  \
    \  binary = tostring(decimal % 2) .. binary\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  binary = 'db' .. binary .. 'db'\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5j4d7gj.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpm5j4d7gj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local function is_power_of_two(n)\n\
    \    -- returns true if n is a power of two.\n    return (n & (n - 1)) == 0\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplnf1ikmv.lua:26: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        binary = binary .. (decimal % 2)\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    binary = binary .. \"\
    db\"\n    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9ztbbpm.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp_9ztbbpm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary_table\
    \ = {}\n  while decimal > 0 do\n    if decimal % 2 == 0 then\n      table.insert(binary_table,\
    \ 0)\n    else\n      table.insert(binary_table, 1)\n    end\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  local binary_string = \"\"\n  for i = #binary_table, 1, -1 do\n\
    \    binary_string = binary_string .. tostring(binary_table[i])\n  end\n  return\
    \ \"db\" .. binary_string .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5suenbyt.lua:31:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp5suenbyt.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    local rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph51899k3.lua:24: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\treturn binary.to_array(decimal)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqz3jl45e.lua:12:\
    \ attempt to index a nil value (global 'binary')\nstack traceback:\n\t/tmp/tmpqz3jl45e.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpqz3jl45e.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  -- TODO: Implement\
    \ this function.\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lbvjf3u.lua:19:\
    \ expected: \"db0db\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4lbvjf3u.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ format('%b', decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy099eytt.lua:12:\
    \ attempt to call a nil value (global 'format')\nstack traceback:\n\t/tmp/tmpy099eytt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpy099eytt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  assert(type(decimal)\
    \ == 'number', \"Must use a number.\")\n  assert(decimal % 1 == 0, \"Must use\
    \ a whole number.\")\n  assert(decimal >= 0, \"Must use a positive number.\")\n\
    \  local binary = ''\n  for i = 6,0,-1 do\n    local power = 2^i\n    if decimal\
    \ >= power then\n      binary = binary .. '1'\n      decimal = decimal - power\n\
    \    else\n      binary = binary .. '0'\n    end\n  end\n  return 'db' .. binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpntgfs4dc.lua:31:\
    \ expected: \"db0db\"\nactual: \"db0000000db\"\nstack traceback:\n\t/tmp/tmpntgfs4dc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local quotient = decimal\n    local divisor = 2\n    local remainder\n\
    \    while quotient ~= 0 do\n        remainder = quotient % divisor\n        quotient\
    \ = math.floor(quotient / divisor)\n        binary = binary .. remainder\n   \
    \ end\n    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphs93lyjt.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmphs93lyjt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  -- TODO: Implement\
    \ solution.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ek7188h.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmp3ek7188h.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  if decimal == 0\
    \ then\n    return 'db0db'\n  end\n  local result = 'db'\n  while decimal > 0\
    \ do\n    result = result .. tostring(decimal % 2)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return result .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmq6sztem.lua:27:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmpmq6sztem.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    assert(decimal\
    \ >= 0, 'Decimal number cannot be negative')\n    local b = ''\n    while decimal\
    \ > 0 do\n        if decimal % 2 == 0 then\n            b = '0' .. b\n       \
    \ else\n            b = '1' .. b\n        end\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. b .. 'db'\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdkcqk8uv.lua:28:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpdkcqk8uv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ tostring(decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssiqsf85.lua:19:\
    \ expected: \"db100000db\"\nactual: \"db32db\"\nstack traceback:\n\t/tmp/tmpssiqsf85.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local result =\
    \ \"db\"\n    repeat\n        local remainder = decimal % 2\n        decimal =\
    \ math.floor(decimal / 2)\n        result = result .. remainder\n    until decimal\
    \ == 0\n    return result .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys90mmdw.lua:25:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmpys90mmdw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ string.format('%o', decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkt6i25i3.lua:19:\
    \ expected: \"db100000db\"\nactual: \"db40db\"\nstack traceback:\n\t/tmp/tmpkt6i25i3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\treturn \"db\" ..\
    \ binary_string(decimal) .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71a0ctst.lua:12:\
    \ attempt to call a nil value (global 'binary_string')\nstack traceback:\n\t/tmp/tmp71a0ctst.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp71a0ctst.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- validate decimal\n\
    \    if decimal < 0 then\n        return \"db-1db\"\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfbrs3yrq.lua:26: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local result = \"\
    \"\n  while decimal > 0 do\n    local remainder = decimal % 2\n    result = remainder\
    \ .. result\n    decimal = (decimal - remainder) / 2\n  end\n  return \"db\" ..\
    \ result .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3iq4gzq.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpo3iq4gzq.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  while decimal > 0 do\n    binary = (decimal % 2 == 0 and \"0\" or \"1\"\
    ) .. binary\n    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" ..\
    \ binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplensn0pc.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmplensn0pc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    decimal = tostring(decimal)\n\
    \    return 'db' .. decimal:reverse():gsub('(%d%d?%d?)', function(d)\n       \
    \ local binary = ''\n        while d ~= '0' do\n            local m = d % 2\n\
    \            binary = tostring(m) .. binary\n            d = (d - m) / 2\n   \
    \     end\n        return binary\n    end) .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppms97o6_.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmppms97o6_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  return 'db' .. string.format('%x',\
    \ decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9151y9ro.lua:19:\
    \ expected: \"db100000db\"\nactual: \"db20db\"\nstack traceback:\n\t/tmp/tmp9151y9ro.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  return 'db' .. decimal:gsub('.',\
    \ function(c)\n    return c:byte()\n  end):gsub('%d%d%d', function(cc)\n    return\
    \ string.char(tonumber(cc, 8))\n  end) .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8o69bin.lua:12:\
    \ attempt to index a number value (local 'decimal')\nstack traceback:\n\t/tmp/tmpi8o69bin.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpi8o69bin.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary_str\
    \ = \"db\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgr0k9ye_.lua:23: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local remainder_stack\
    \ = Stack:new()\n    local binary_string = \"db\"\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndoo_fqe.lua:24: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  -- TODO: Fill out\
    \ the code for this function.\n  local binaryString = \"db\"\n  while decimal\
    \ > 0 do\n    local remainder = decimal % 2\n    binaryString = binaryString ..\
    \ tostring(remainder)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binaryString .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze43rdt7.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpze43rdt7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local function dec2bin(dec)\n\
    \    if dec == 0 then return '' end\n    local bit = dec % 2\n    return dec2bin(math.floor(dec\
    \ / 2)) .. tostring(bit)\n  end\n  return 'db' .. dec2bin(decimal) .. 'db'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkp66mqs.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpxkp66mqs.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal binary = \"\
    db\"\n\tlocal temp = \"\"\n\tlocal i = 0\n\twhile (decimal > 0) do\n\t\ttemp =\
    \ temp .. tostring(decimal % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\t\ti\
    \ = i + 1\n\tend\n\tfor j = 1, i do\n\t\tbinary = binary .. temp:sub(i - j + 1,\
    \ i - j + 1)\n\tend\n\tbinary = binary .. \"db\"\n\treturn binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqtqanqs.lua:30:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpwqtqanqs.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = {}\n\
    \  local rest = decimal\n  repeat\n    local quotient = rest / 2\n    local next_digit\
    \ = math.floor(quotient) * 2\n    local digit = rest - next_digit\n    rest =\
    \ quotient\n    table.insert(binary, digit)\n  until rest == 0\n  return string.format('db%sdb',\
    \ table.concat(binary))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'F

    Failed tests:

    -------------

    1) test_humaneval

    /tmp/tmp0c_vz6qh.lua:28: expected: "db100000db"

    actual: "db00.00.00.00.01.00.50.250.1250.06250.031250.0156250.00781250.003906250.0019531250.00097656250.000488281250.0002441406250.00012207031256.103515625e-053.0517578125e-051.52587890625e-057.62939453125e-063.814697265625e-061.9073486328125e-069.5367431640625e-074.7683715820312e-072.3841857910156e-071.1920928955078e-075.9604644775391e-082.9802322387695e-081.4901161193848e-087.4505805969238e-093.7252902984619e-091.862645149231e-099.3132257461548e-104.6566128730774e-102.3283064365387e-101.1641532182693e-105.8207660913467e-112.9103830456734e-111.4551915228367e-117.2759576141834e-123.6379788070917e-121.8189894035459e-129.0949470177293e-134.5474735088646e-132.2737367544323e-131.1368683772162e-135.6843418860808e-142.8421709430404e-141.4210854715202e-147.105427357601e-153.5527136788005e-151.7763568394003e-158.8817841970013e-164.4408920985006e-162.2204460492503e-161.1102230246252e-165.5511151231258e-172.7755575615629e-171.3877787807814e-176.9388939039072e-183.4694469519536e-181.7347234759768e-188.673617379884e-194.336808689942e-192.168404344971e-191.0842021724855e-195.4210108624275e-202.7105054312138e-201.3552527156069e-206.7762635780344e-213.3881317890172e-211.6940658945086e-218.470329472543e-224.2351647362715e-222.1175823681358e-221.0587911840679e-225.2939559203394e-232.6469779601697e-231.3234889800848e-236.6174449004242e-243.3087224502121e-241.6543612251061e-248.2718061255303e-254.1359030627651e-252.0679515313826e-251.0339757656913e-255.1698788284564e-262.5849394142282e-261.2924697071141e-266.4623485355705e-273.2311742677853e-271.6155871338926e-278.0779356694632e-284.0389678347316e-282.0194839173658e-281.0097419586829e-285.0487097934145e-292.5243548967072e-291.2621774483536e-296.3108872417681e-303.155443620884e-301.577721810442e-307.8886090522101e-313.9443045261051e-311.9721522630525e-319.8607613152626e-324.9303806576313e-322.4651903288157e-321.2325951644078e-326.1629758220392e-333.0814879110196e-331.5407439555098e-337.70'
  timestamp: 1659979847
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs9g4xpf.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzs9g4xpf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local b = 'db'\n\
    \    while decimal > 0 do\n        local remainder = decimal % 2\n        decimal\
    \ = (decimal - remainder) / 2\n        b = ('%s%s'):format(remainder, b)\n   \
    \ end\n    return b .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuic6a3z.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpcuic6a3z.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local digits =\
    \ {}\n    local db = 'db'\n    repeat\n        local remainder = decimal % 2\n\
    \        table.insert(digits, 1, remainder)\n        decimal = (decimal - remainder)\
    \ / 2\n    until decimal == 0\n    return db .. table.concat(digits) .. db\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuq3jvcu.lua:26:\
    \ expected: \"db100000db\"\nactual: \"db1.00.00.00.00.00db\"\nstack traceback:\n\
    \t/tmp/tmpvuq3jvcu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- A function\
    \ to convert the decimal number to binary, this function will be called in the\n\
    \    -- decimal_to_binary function.\n    local function convert_to_binary(num)\n\
    \        local to_binary = ''\n        local remainder = 0\n        -- Repeatedly\
    \ perform the division and modulus operations to find out the remainder.\n   \
    \     -- This will be used to find out the binary number.\n        while num ~=\
    \ 0 do\n            remainder = num % 2\n            num = math.floor(num / 2)\n\
    \            -- The binary number is in the reverse order. The remainder will\
    \ be concatenated to\n            -- the to_binary string.\n            to_binary\
    \ = to_binary .. remainder\n        end\n        return to_binary\n    end\n \
    \   -- The binary number is in the reverse order. The number will be reversed\
    \ and will be\n    -- returned.\n    return 'db' .. string.reverse(convert_to_binary(decimal))\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps594s3jb.lua:36:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmps594s3jb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyh7ifb6.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdyh7ifb6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        if decimal % 2 == 0 then\n         \
    \   binary = binary .. '0'\n        else\n            binary = binary .. '1'\n\
    \        end\n        decimal = decimal / 2\n    end\n    return binary .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszpompkw.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpszpompkw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = {}\n\
    \  local db = {}\n  for i = 0, 7 do\n    local m = bit.rshift(decimal, 7 - i)\n\
    \    local d = bit.band(m, 1)\n    binary[i + 1] = d\n  end\n  db[1] = 'd'\n \
    \ db[2] = 'b'\n  db[9] = 'd'\n  db[10] = 'b'\n  local i = 3\n  for n = 1, #binary\
    \ do\n    if binary[n] == 1 then\n      db[i] = '1'\n    else\n      db[i] = '0'\n\
    \    end\n    i = i + 1\n  end\n  return table.concat(db)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo864nygx.lua:15:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpo864nygx.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpo864nygx.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local bn = 'db'\n\
    \    local add = nil\n    while true do\n        add = math.fmod(decimal, 2)\n\
    \        decimal = math.floor(decimal / 2)\n        bn = tostring(add) .. bn\n\
    \        if decimal == 0 then\n            break\n        end\n    end\n    return\
    \ bn .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5otv2u6.lua:28:\
    \ expected: \"db0db\"\nactual: \"0dbdb\"\nstack traceback:\n\t/tmp/tmpq5otv2u6.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzcvitk6.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpjzcvitk6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal binary_num\
    \ = {}\n\tlocal result = ''\n\tlocal i = 1\n\tlocal remain\n\twhile decimal ~=\
    \ 0 do\n\t\t-- Get the remainder of the number\n\t\tremain = decimal % 2\n\t\t\
    -- Add the remainder to the binary number\n\t\tbinary_num[i] = remain\n\t\t--\
    \ Get the quotient of the number\n\t\tdecimal = (decimal - remain) / 2\n\t\ti\
    \ = i + 1\n\tend\n\t-- Add 'db' to the front and back of the binary number\n\t\
    result = 'db'\n\t-- Add the binary number to the result\n\tfor i = #binary_num,\
    \ 1, -1 do\n\t\tresult = result .. tostring(binary_num[i])\n\tend\n\t-- Add 'db'\
    \ to the end of the binary number\n\tresult = result .. 'db'\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp7mkd3c.lua:39:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpwp7mkd3c.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local result = ''\n\
    \  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    result = result .. tostring(remainder)\n  end\n\
    \  return 'db' .. string.reverse(result) .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgommlmew.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpgommlmew.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local remainder = decimal % 2\n  \
    \      binary = binary .. remainder\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    binary = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7syzcc7f.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp7syzcc7f.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    while decimal ~= 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return \"db\" .. binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7xvojpi.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpr7xvojpi.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return (\"db%d\"\
    ):format(tonumber(decimal)):gsub(\".\", {\n        [48] = \"0000\",\n        [49]\
    \ = \"0001\",\n        [50] = \"0010\",\n        [51] = \"0011\",\n        [52]\
    \ = \"0100\",\n        [53] = \"0101\",\n        [54] = \"0110\",\n        [55]\
    \ = \"0111\",\n        [56] = \"1000\",\n        [57] = \"1001\",\n    }):gsub(\"\
    ^0+(%d)\", \"%1\") .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fusn77d.lua:30:\
    \ expected: \"db100000db\"\nactual: \"db32db\"\nstack traceback:\n\t/tmp/tmp4fusn77d.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local binary =\
    \ ''\n   local value = decimal\n   while value ~= 0 do\n      binary = tostring(value\
    \ % 2) .. binary\n      value = math.floor(value / 2)\n   end\n   binary = 'db'\
    \ .. binary .. 'db'\n   return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbm70eyx.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpnbm70eyx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local bin = {}\n\
    \   local index = 1\n   while decimal > 0 do\n      bin[index] = decimal % 2\n\
    \      decimal = decimal // 2\n      index = index + 1\n   end\n   bin[index]\
    \ = \"db\"\n   return table.concat(bin):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy0c_8jf.lua:26:\
    \ expected: \"db0db\"\nactual: \"bd\"\nstack traceback:\n\t/tmp/tmpiy0c_8jf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        local digit = decimal % 2\n        binary\
    \ = string.format('%s%d', binary, digit)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7aqobj4s.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp7aqobj4s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    local dec = decimal\n    local rem\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4je5obz1.lua:25: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while (decimal ~= 0) do\n        local reminder = decimal % 2\n\
    \        binary = binary .. tostring(reminder)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ifctgyf.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp7ifctgyf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    repeat\n        local value = decimal % 2\n        binary = binary\
    \ .. tostring(value)\n        decimal = math.floor(decimal / 2)\n    until decimal\
    \ == 0\n    return \"db\" .. string.reverse(binary) .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local rt = 'db'\n\
    \    while decimal > 0 do\n        rt = string.char(decimal % 2 + 48) .. rt\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    rt = rt .. 'db'\n   \
    \ return rt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb4pwlql.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpsb4pwlql.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    decimal = tonumber(decimal)\n\
    \    local result = \"\"\n    while decimal > 0 do\n        result = result ..\
    \ tostring(decimal % 2)\n        decimal = math.floor(decimal / 2)\n    end\n\
    \    if result == \"\" then\n        result = \"0\"\n    end\n    return \"db\"\
    \ .. string.reverse(result) .. \"db\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local output = \"\
    db\"\n  local binary = \"\"\n  local count = 1\n  local temp = decimal\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpybtvb9r5.lua:26: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal res = \"db\"\
    \n\tlocal bit\n\tlocal i\n\t\n\tif decimal == 0 then\n\t\treturn \"db0db\"\n\t\
    end\n\t\n\twhile decimal > 0 do\n\t\tres = res .. (decimal % 2)\n\t\tdecimal =\
    \ math.floor(decimal / 2)\n\tend\n\t\n\t-- reverse string\n\tfor i = 1, math.floor(#res\
    \ / 2) do\n\t\tbit = res:sub(i, i)\n\t\tres = res:sub(1, i - 1) .. res:sub(#res\
    \ - i + 1, #res - i + 1) .. res:sub(i + 1, #res - i)\n\tend\n\t\n\treturn res\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j5vy2w1.lua:38:\
    \ expected: \"db100000db\"\nactual: \"100db\"\nstack traceback:\n\t/tmp/tmp0j5vy2w1.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal binary = 'db'\n\
    \tfor _ = 1, 8 do\n\t\tbinary = binary .. ((decimal % 2 == 0) and '0' or '1')\n\
    \t\tdecimal = math.floor(decimal / 2)\n\tend\n\treturn binary .. 'db'\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhhu31pr.lua:23:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmpkhhu31pr.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local rest\n \
    \   local binary = ''\n    local rest_stack = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5fpahz38.lua:25: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ {}\n    local db = 'db'\n    repeat\n        if decimal % 2 == 0 then\n    \
    \        table.insert(binary, '0')\n        else\n            table.insert(binary,\
    \ '1')\n        end\n        decimal = math.floor(decimal / 2)\n    until decimal\
    \ == 0\n    return db .. table.concat(binary):reverse() .. db\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal result = 'db'\n\
    \trepeat\n\t\tlocal remainder = decimal % 2\n\t\tresult = result .. remainder\n\
    \t\tdecimal = math.floor(decimal / 2)\n\tuntil decimal == 0\n\treturn result ..\
    \ 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx64j4y47.lua:25:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmpx64j4y47.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local result =\
    \ \"\"\n   local binary_string = \"\"\n   local index = 0\n   local current_char\
    \ = 0\n   local i = 0\n   local test = 0\n   local one = 1\n   local two = 2\n\
    \   local eight = 8\n   local sixteen = 16\n   local thirty_two = 32\n   local\
    \ sixty_four = 64\n   local hundred_twenty_eight = 128\n   local value = 0\n \
    \  local remainder = 0\n   local powers_of_two = {}\n   powers_of_two[0] = 1\n\
    \   powers_of_two[1] = 2\n   powers_of_two[2] = 4\n   powers_of_two[3] = 8\n \
    \  powers_of_two[4] = 16\n   powers_of_two[5] = 32\n   powers_of_two[6] = 64\n\
    \   powers_of_two[7] = 128\n   while decimal > 0 do\n      value = decimal / 2\n\
    \      remainder = math.floor(value)\n      decimal = remainder\n      index =\
    \ index + 1\n      powers_of_two[index] = two * powers_of_two[index - 1]\n   end\n\
    \   for i = index, 0, -1 do\n      test = powers_of_two[i]\n      current_char\
    \ = current_char + test\n      if decimal >= current_char then\n         binary_string\
    \ = binary_string .. \"1\"\n         decimal = decimal - current_char\n      else\n\
    \         binary_string = binary_string .. \"0\"\n      end\n   end\n   for i\
    \ = 0, index do\n      result = result .. \"0\"\n   end\n   result = \"db\" ..\
    \ result .. binary_string .. \"db\"\n   return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8lt4v0k.lua:63:\
    \ expected: \"db0db\"\nactual: \"db00db\"\nstack traceback:\n\t/tmp/tmpl8lt4v0k.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- your code here\n\
    \    -- 1 <= decimal <= 127\n    local binary_str = 'db'\n    while decimal >\
    \ 0 do\n        if decimal % 2 == 0 then\n            binary_str = binary_str\
    \ .. '0'\n        else\n            binary_str = binary_str .. '1'\n        end\n\
    \        decimal = decimal / 2\n    end\n    return binary_str .. 'db'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bmiz04r.lua:29:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9bmiz04r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local reverse_result\
    \ = ''\n  local quotient = decimal\n  while quotient ~= 0 do\n    local remainder\
    \ = math.floor(quotient % 2)\n    reverse_result = reverse_result .. remainder\n\
    \    quotient = math.floor(quotient / 2)\n  end\n  local result = 'db' .. reverse_result\
    \ .. 'db'\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1uwf8uq.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpg1uwf8uq.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  return \"db\" ..\
    \ decimal:base(2) .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgcykpw7r.lua:12:\
    \ attempt to index a number value (local 'decimal')\nstack traceback:\n\t/tmp/tmpgcykpw7r.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgcykpw7r.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqfaakf_p.lua:23: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  for _ = 1, 8 do\n    local bit = decimal % 2\n    binary = binary .. bit\n\
    \    decimal = (decimal - bit) / 2\n  end\n  return binary .. 'db'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkazs_h2a.lua:24:\
    \ expected: \"db0db\"\nactual: \"db00.00.00.00.00.00.00.0db\"\nstack traceback:\n\
    \t/tmp/tmpkazs_h2a.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ dec2bin(decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnhlgibyu.lua:12:\
    \ attempt to call a nil value (global 'dec2bin')\nstack traceback:\n\t/tmp/tmpnhlgibyu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpnhlgibyu.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local decimal_table\
    \ = {128, 64, 32, 16, 8, 4, 2, 1}\n  local binary_table = {}\n  local binary_string\
    \ = ''\n  -- This is a loop that's 8 iterations.\n  for i=1,8 do\n    if decimal\
    \ >= decimal_table[i] then\n      binary_table[i] = 1\n      decimal = decimal\
    \ - decimal_table[i]\n    else\n      binary_table[i] = 0\n    end\n  end\n  for\
    \ i=1,8 do\n    binary_string = binary_string .. binary_table[i]\n  end\n  return\
    \ 'db' .. binary_string .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75v3fus3.lua:33:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmp75v3fus3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\treturn 'db' .. dec2bin(decimal)\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr0f85ldp.lua:12:\
    \ attempt to call a nil value (global 'dec2bin')\nstack traceback:\n\t/tmp/tmpr0f85ldp.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpr0f85ldp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   local binary =\
    \ \"\"\n   repeat\n      if (decimal % 2 == 0) then\n         binary = \"0\" ..\
    \ binary\n      else\n         binary = \"1\" .. binary\n      end\n      decimal\
    \ = math.floor(decimal / 2)\n   until decimal == 0\n   return \"db\" .. binary\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl52dmxdb.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpl52dmxdb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"\"\n    local length = 0\n    local index = 2\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqlpz40dd.lua:25: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local str = 'db'\n\
    \    while decimal ~= 0 do\n        local remainder = decimal % 2\n        decimal\
    \ = math.floor(decimal / 2)\n        str = (remainder == 0 and '0' or '1') ..\
    \ str\n    end\n    return str .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuh3v74e.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpuuh3v74e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  error(\"Not implemented!\"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0w_iyw_c.lua:12:\
    \ Not implemented!\nstack traceback:\n\t/tmp/tmp0w_iyw_c.lua:12: in local 'candidate'\n\
    \t/tmp/tmp0w_iyw_c.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tassert(type(decimal)\
    \ == \"number\", \"decimal_to_binary expects a number\")\n\tlocal binary = \"\"\
    \n\tif decimal == 0 then\n\t\treturn \"db0db\"\n\tend\n\tlocal flag = false\n\t\
    while decimal > 0 do\n\t\tbinary = string.format(\"%s%d\", binary, decimal % 2)\n\
    \t\tdecimal = decimal >> 1\n\t\tflag = true\n\tend\n\tif flag then\n\t\tbinary\
    \ = \"db\" .. binary .. \"db\"\n\tend\n\treturn binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bjd4yvq.lua:33:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmp4bjd4yvq.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary_str\
    \ = 'db'\n    while decimal > 0 do\n        if (decimal % 2) == 0 then\n     \
    \       binary_str = '0' .. binary_str\n        else\n            binary_str =\
    \ '1' .. binary_str\n        end\n        decimal = math.floor(decimal / 2)\n\
    \    end\n    return binary_str .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg3fy259.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpdg3fy259.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ string.format('%08d', string.reverse(decimal)) .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkvllqym.lua:18:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmpgkvllqym.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    if type(decimal)\
    \ ~= 'number' then\n        return 'db0db'\n    end\n    local function dec_to_bin(decimal)\n\
    \        local bin = ''\n        while decimal > 0 do\n            local rest\
    \ = decimal % 2\n            decimal = (decimal - rest) / 2\n            bin =\
    \ tostring(rest) .. bin\n        end\n        return bin\n    end\n    return\
    \ 'db' .. dec_to_bin(decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xdz60i6.lua:30:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp2xdz60i6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- you code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz3uh8nk.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmplz3uh8nk.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    local remainder = decimal % 2\n    binary = binary\
    \ .. remainder\n    decimal = math.floor(decimal / 2)\n  end\n  return binary\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6n9x1pk5.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp6n9x1pk5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- The string,\
    \ consisting of 0s and 1s\n    local binary = \"\"\n    -- The integer value that\
    \ will be converted to binary\n    local value = decimal\n    -- The remainder\
    \ of the division by 2. Will be appended to binary.\n    local remainder = 0\n\
    \    -- Keep looping until the value is 0\n    while value > 0 do\n        --\
    \ Get the remainder of the division by 2\n        remainder = value % 2\n    \
    \    -- Floor to get the integer part of the division\n        value = math.floor(value\
    \ / 2)\n        -- Append to the result\n        binary = tostring(remainder)\
    \ .. binary\n    end\n    -- Add surrounding db\n    return \"db\" .. binary ..\
    \ \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmy27fce.lua:34:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpnmy27fce.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\t-- assert(type(decimal)\
    \ == 'number', \"Decimal is not a number\")\n\t-- assert(decimal % 1 == 0, \"\
    Decimal is not an integer\")\n\tlocal binary = \"db\"\n\tlocal old_d = decimal\n\
    \twhile decimal > 0 do\n\t\tbinary = binary .. tostring(decimal % 2)\n\t\tdecimal\
    \ = math.floor(decimal / 2)\n\tend\n\tbinary = binary .. \"db\"\n\tbinary = string.reverse(binary)\n\
    \treturn binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwcj0b9q.lua:28:\
    \ expected: \"db0db\"\nactual: \"bdbd\"\nstack traceback:\n\t/tmp/tmpuwcj0b9q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local quotient = decimal\n  local remainder\n  while quotient ~= 0 do\n   \
    \ remainder = math.floor(quotient % 2)\n    quotient = math.floor(quotient / 2)\n\
    \    binary = binary .. tostring(remainder)\n  end\n  binary = binary .. 'db'\n\
    \  return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0xuway9.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpj0xuway9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local sign = ''\n\
    \    if decimal < 0 then\n        sign = '-'\n        decimal = -decimal\n   \
    \ end\n    local rv = ''\n    while decimal > 0 do\n        rv = tostring(decimal\
    \ % 2) .. rv\n        decimal = math.floor(decimal / 2)\n    end\n    return string.format('db%s%sd',\
    \ sign, rv)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19bquw37.lua:28:\
    \ expected: \"db0db\"\nactual: \"dbd\"\nstack traceback:\n\t/tmp/tmp19bquw37.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local db = 'db'\n\
    \    local buf = {}\n    local binary = {}\n    local remainder\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsieiwjh.lua:26: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  assert(type(decimal)\
    \ == 'number', 'decimal_to_binary: expecting a number')\n  local binary_string\
    \ = ''\n  local done = false\n  while not done do\n    local remainder = decimal\
    \ % 2\n    binary_string = binary_string .. remainder\n    decimal = math.floor(decimal\
    \ / 2)\n    if decimal == 0 then\n      done = true\n    end\n  end\n  binary_string\
    \ = 'db' .. binary_string .. 'db'\n  return binary_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxydk26o.lua:31:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmphxydk26o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  while decimal > 0 do\n    if decimal % 2 == 0 then\n      binary = '0' .. binary\n\
    \    else\n      binary = '1' .. binary\n    end\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttb72ey5.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpttb72ey5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  local remain\n  repeat\n    remain = decimal % 2\n    binary = string.format('%s%d',\
    \ binary, remain)\n    decimal = math.floor(decimal / 2)\n  until decimal == 0\n\
    \  return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpieispu7y.lua:26:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmpieispu7y.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local rem = decimal\
    \ % 2\n    local res = rem\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc0pcjkuy.lua:24: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Insert code\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm29wnkp.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmppm29wnkp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal binary_str\
    \ = 'db'\n\twhile decimal > 0 do\n\t\tbinary_str = binary_str .. tostring(decimal\
    \ % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\tend\n\treturn binary_str .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pnzlpsl.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp5pnzlpsl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local bin = ''\n\
    \    while decimal > 0 do\n        local rest = decimal % 2\n        bin = tostring(rest)\
    \ .. bin\n        decimal = (decimal - rest) / 2\n    end\n    return \"db\" ..\
    \ bin .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyu7kz0p.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpmyu7kz0p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal binary_reversed\
    \ = {}\n\tlocal final_binary = \"\"\n\tlocal i = 1\n\twhile true do\n\t\tif math.floor(decimal/2)\
    \ == 0 then\n\t\t\ttable.insert(binary_reversed, 1, decimal)\n\t\t\tbreak\n\t\t\
    else\n\t\t\ttable.insert(binary_reversed, 1, decimal%2)\n\t\t\tdecimal = math.floor(decimal/2)\n\
    \t\tend\n\tend\n\tfor i=1, #binary_reversed do\n\t\tfinal_binary = final_binary\
    \ .. binary_reversed[i]\n\tend\n\treturn \"db\" .. final_binary .. \"db\"\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Insert your\
    \ code here.\n    local remain\n    local bin_str = \"\"\n    while decimal >\
    \ 0 do\n        remain = decimal % 2\n        decimal = math.floor(decimal / 2)\n\
    \        bin_str = tostring(remain) .. bin_str\n    end\n    return \"db\" ..\
    \ bin_str .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpifj8_r.lua:26:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpbpifj8_r.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = tostring(decimal % 2) .. binary\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    binary = 'db' .. binary\
    \ .. 'db'\n    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fx9ylqj.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp0fx9ylqj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   -- your code here\n\
    \   -- you can use bit.tobit() and bit.tohex() functions\n   -- described at:\
    \ http://bitop.luajit.org/api.html\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8netqav.lua:20:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpf8netqav.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal binary = \"\
    \"\n\twhile decimal > 0 do\n\t\tbinary = binary .. tostring(decimal % 2)\n\t\t\
    decimal = math.floor(decimal / 2)\n\tend\n\treturn \"db\" .. string.reverse(binary)\
    \ .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ojvaby.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpt4ojvaby.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ string.format('%b', decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ohaeodk.lua:12:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp2ohaeodk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2ohaeodk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    db\"\n  local remainder\n  while decimal > 0 do\n    remainder = decimal % 2\n\
    \    decimal = math.floor(decimal / 2)\n    binary = tostring(remainder) .. binary\n\
    \  end\n  return binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9wjcrd5.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpx9wjcrd5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  -- TODO\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5r68f7c.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpb5r68f7c.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local db = 'db'\n\
    \  local binary = ''\n  local quotient = decimal\n  local remainder = 0\n  local\
    \ i = 0\n  local len = 0\n  if decimal == 0 then\n    return db .. '0' .. db\n\
    \  end\n  while quotient > 0 do\n    remainder = quotient % 2\n    quotient =\
    \ math.floor(quotient / 2)\n    binary = remainder .. binary\n  end\n  len = string.len(binary)\n\
    \  while i < (6 - len) do\n    binary = '0' .. binary\n    i = i + 1\n  end\n\
    \  return db .. binary .. db\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchf9i5zo.lua:40:\
    \ expected: \"db1111db\"\nactual: \"db001111db\"\nstack traceback:\n\t/tmp/tmpchf9i5zo.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = string.sub('db'\
    \ .. string.format('%x', decimal) .. 'db', -8)\n  return binary\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1u5ekmfc.lua:20:\
    \ expected: \"db100000db\"\nactual: \"db20db\"\nstack traceback:\n\t/tmp/tmp1u5ekmfc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bits = \"\"\
    \n  while decimal > 0 do\n    local remainder = decimal % 2\n    bits = tostring(remainder)\
    \ .. bits\n    decimal = math.floor(decimal / 2)\n  end\n  return 'db' .. bits\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiaz_5nsp.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpiaz_5nsp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  local decimal = decimal\n  local remainder = 0\n  local i = 0\n  local remainder_list\
    \ = {}\n  while i < decimal do\n    remainder = decimal % 2\n    remainder_list[i]\
    \ = remainder\n    decimal = math.floor(decimal / 2)\n    i = i + 1\n  end\n \
    \ for j = i - 1, 0, -1 do\n    binary = binary .. tostring(remainder_list[j])\n\
    \  end\n  return 'db' .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi6pdztzr.lua:32:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpi6pdztzr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local rem, base\
    \ = {}\n    local i = 1\n    while decimal ~= 0 do\n        rem[i] = decimal %\
    \ 2\n        decimal = math.floor(decimal / 2)\n        i = i + 1\n    end\n \
    \   local bin = \"\"\n    for j = i - 1, 1, -1 do\n        bin = bin .. rem[j]\n\
    \    end\n    return \"db\" .. bin .. \"db\"\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yi47631.lua:29:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp9yi47631.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ 'db'\n    while decimal > 0 do\n        local rest = decimal % 2\n        binary\
    \ = binary .. tostring(rest)\n        decimal = (decimal - rest) / 2\n    end\n\
    \    return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu63i_qr7.lua:24:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpu63i_qr7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ lshift(decimal, -1):to_binary() .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp16k806ti.lua:12:\
    \ attempt to call a nil value (global 'lshift')\nstack traceback:\n\t/tmp/tmp16k806ti.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp16k806ti.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   assert(decimal\
    \ >= 0, \"Expected positive integer, got: \" .. decimal)\n   local binary = ''\n\
    \   while decimal > 0 do\n      binary = tostring(decimal % 2) .. binary\n   \
    \   decimal = floor(decimal / 2)\n   end\n   return 'db' .. (binary ~= '' and\
    \ binary or '0') .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgsln4dy.lua:16:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmplgsln4dy.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmplgsln4dy.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyh7ifb6.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdyh7ifb6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = ''\n\
    \  while decimal > 0 do\n    binary = binary .. tostring(decimal % 2)\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return 'db' .. binary .. 'db'\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojw_17c_.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpojw_17c_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bin = ''\n\
    \  local power = 0\n  while decimal > 0 do\n    local digit = decimal % 2^(power+1)\n\
    \    if digit > 2^power then\n      bin = bin .. '1'\n      decimal = decimal\
    \ - 2^power\n    else\n      bin = bin .. '0'\n    end\n    power = power + 1\n\
    \  end\n  local bin = bin:reverse()\n  return 'db' .. bin .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2azdp4wi.lua:31:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp2azdp4wi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bits = {}\n\
    \  local i = 2\n  local j = 0\n  local num = decimal\n  local flag = true\n  while\
    \ flag do\n    num = math.floor(num / 2)\n    bits[i] = decimal % 2\n    decimal\
    \ = num\n    i = i + 1\n    if decimal == 0 then\n      flag = false\n    end\n\
    \  end\n  local result = 'db'\n  while bits[i] == nil do\n    i = i - 1\n  end\n\
    \  while j <= i - 2 do\n    j = j + 1\n    result = result .. bits[j]\n  end\n\
    \  result = result .. 'db'\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnx_g8gu.lua:32:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpnnx_g8gu.lua:32:\
    \ in local 'candidate'\n\t/tmp/tmpnnx_g8gu.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ string.format('%b', decimal) .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ohaeodk.lua:12:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp2ohaeodk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2ohaeodk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\n    while decimal > 0 do\n        local mod = decimal % 2\n        decimal\
    \ = math.floor(decimal / 2)\n        binary = mod .. binary\n    end\n    binary\
    \ = binary .. \"db\"\n    return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuuwg0mm.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpkuuwg0mm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local new = {}\n\
    \  local i = 0\n  while decimal > 0 do\n    i = i + 1\n    remainder = decimal\
    \ % 2\n    new[i] = remainder\n    decimal = (decimal - remainder) / 2\n  end\n\
    \  local bit = 'db'\n  for i = 1, #new do\n    bit = bit .. tostring(new[i])\n\
    \  end\n  bit = bit .. 'db'\n  return bit\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz7af6wn.lua:31:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpdz7af6wn.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    while decimal > 0 do\n        binary = binary .. (decimal % 2)\n   \
    \     decimal = decimal // 2\n    end\n    return 'db' .. binary .. 'db'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpadtwxvpj.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpadtwxvpj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\t-- TODO: implement\
    \ the function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnpztodh.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmpnnpztodh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    if decimal ==\
    \ 0 then\n        return 'db0db'\n    end\n    local binary = 'db'\n    while\
    \ decimal > 0 do\n        local r = decimal % 2\n        binary = binary .. tostring(r)\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    binary = binary .. 'db'\n\
    \    return binary\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pt1voyg.lua:29:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmp6pt1voyg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local bit_mask =\
    \ 0x8000\n  local binary = 'db'\n  while bit_mask > 0 do\n    if bit_mask & decimal\
    \ ~= 0 then\n      binary = binary .. '1'\n    else\n      binary = binary ..\
    \ '0'\n    end\n    bit_mask = bit_mask >> 1\n  end\n  return binary .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1c_m_66z.lua:28:\
    \ expected: \"db0db\"\nactual: \"db0000000000000000db\"\nstack traceback:\n\t\
    /tmp/tmp1c_m_66z.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = 'db'\n\
    \  repeat\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = (decimal - remainder) / 2\n  until decimal == 0\n \
    \ return binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hwl01al.lua:24:\
    \ expected: \"db0db\"\nactual: \"0dbdb\"\nstack traceback:\n\t/tmp/tmp8hwl01al.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  if (decimal == 0)\
    \ then\n    return 'db00000000db'\n  end\n  local binary = \"\"\n  while (decimal\
    \ > 0) do\n    local bit = decimal % 2\n    binary = bit .. binary\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return 'db' .. string.rep('0', 8 - #binary)\
    \ .. binary .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpnvvjp1.lua:27:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmpfpnvvjp1.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ \"db\"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqfaakf_p.lua:23: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    return 'db' ..\
    \ string.gsub(string.format('%b', decimal), '.', function(x)\n        return string.sub(x,\
    \ 2)\n    end) .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0c_ga2iw.lua:12:\
    \ invalid conversion '%b' to 'format'\nstack traceback:\n\t/tmp/tmp0c_ga2iw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0c_ga2iw.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   -- first we need\
    \ to write our number in a binary format\n   local binary = dec_to_bin(decimal)\n\
    \   -- now we need to add 'db' on both sides of our number\n   binary = \"db\"\
    \ .. binary .. \"db\"\n   return binary\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp83tgjoh9.lua:13:\
    \ attempt to call a nil value (global 'dec_to_bin')\nstack traceback:\n\t/tmp/tmp83tgjoh9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp83tgjoh9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = \"\
    \"\n  local binary_number = \"\"\n  local remainder\n  local binary_number_length\
    \ = 0\n  while decimal > 0 do\n    remainder = decimal % 2\n    binary = binary\
    \ .. tostring(remainder)\n    decimal = (decimal - remainder) / 2\n  end\n  binary_number_length\
    \ = binary:len()\n  if binary_number_length == 0 then\n    binary_number = \"\
    db0db\"\n  else\n    for i = binary_number_length, 1, -1 do\n      binary_number\
    \ = binary_number .. binary:sub(i, i)\n    end\n    binary_number = \"db\" ..\
    \ binary_number .. \"db\"\n  end\n  return binary_number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp17es71t5.lua:37:\
    \ expected: \"db100000db\"\nactual: \"db0.10.00.00.00.00db\"\nstack traceback:\n\
    \t/tmp/tmp17es71t5.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Convert the\
    \ number to binary number and return it as a string.\n    -- Each character in\
    \ the string will be '0' or '1'.\n    -- There will be an extra couple of characters\
    \ 'db' at the beginning and at the end of the string.\n    -- The extra characters\
    \ are there to help with the format.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mtsy_u_.lua:21:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6mtsy_u_.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n   if decimal == 0\
    \ then\n      return \"db0db\"\n   end\n   local binary = \"\"\n   while decimal\
    \ > 0 do\n      binary = tostring(decimal % 2) .. binary\n      decimal = math.floor(decimal\
    \ / 2)\n   end\n   return \"db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    assert(type(decimal)\
    \ == 'number', \"bad argument #1 to 'decimal_to_binary' (number expected, got\
    \ \" .. type(decimal) .. \")\")\n    if decimal == 0 then\n        return 'db0db'\n\
    \    end\n    local table = {}\n    while decimal > 0 do\n        local rest =\
    \ math.fmod(decimal, 2)\n        table[#table + 1] = rest\n        decimal = (decimal\
    \ - rest) / 2\n    end\n    return 'db' .. table.concat(table):reverse() .. 'db'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzf_ao9g.lua:22:\
    \ attempt to call a nil value (field 'concat')\nstack traceback:\n\t/tmp/tmppzf_ao9g.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmppzf_ao9g.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local bin = {}\n\
    \    local count = 0\n    repeat\n        count = count + 1\n        bin[count]\
    \ = tostring(decimal % 2)\n        decimal = math.floor(decimal / 2)\n    until\
    \ decimal == 0\n    local out = ''\n    for i = count, 1, -1 do\n        out =\
    \ out .. bin[i]\n    end\n    return 'db' .. out .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n\tlocal digits = math.ceil(math.log(decimal,\
    \ 2))\n\tlocal binary = {}\n\tfor i = 1, digits do\n\t\tlocal power = 2 ^ (digits\
    \ - i)\n\t\tif decimal >= power then\n\t\t\ttable.insert(binary, '1')\n\t\t\t\
    decimal = decimal - power\n\t\telse\n\t\t\ttable.insert(binary, '0')\n\t\tend\n\
    \tend\n\treturn string.format('db%sdb', table.concat(binary))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3_qezlv.lua:29:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpp3_qezlv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local answer = 'db'\n\
    \  while (decimal ~= 0) do\n    -- check if the current number is even or odd\n\
    \    local remainder = decimal % 2\n    -- we add the remainder to our answer\n\
    \    answer = tostring(remainder) .. answer\n    -- divide the number by 2 and\n\
    \    -- round it down to the nearest integer\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return answer .. 'db'\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ttlws7f.lua:28:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp0ttlws7f.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    assert(type(decimal)\
    \ == 'number')\n    assert(decimal > 0)\n    local all_bits = ''\n    while decimal\
    \ > 0 do\n        all_bits = math.fmod(decimal, 2) .. all_bits\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    all_bits = 'db' .. all_bits .. 'db'\n\
    \    return all_bits\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9uv8hhmg.lua:13:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmp9uv8hhmg.lua:13: in local 'candidate'\n\
    \t/tmp/tmp9uv8hhmg.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 0
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Write your\
    \ code here\n    local remainder\n    local answer = \"\"\n    local binary =\
    \ \"\"\n    local flag = true\n    if decimal == 0 then\n        binary = \"0\"\
    \n    end\n    while decimal > 0 do\n        remainder = decimal % 2\n       \
    \ answer = answer .. remainder\n        decimal = math.floor(decimal / 2)\n  \
    \  end\n    for i = #answer, 1, -1 do\n        if answer:sub(i, i) == \"1\" then\n\
    \            flag = false\n        end\n        if flag == false then\n      \
    \      binary = binary .. answer:sub(i, i)\n        end\n    end\n    return \"\
    db\" .. binary .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local bin = ''\n\
    \    while decimal > 0 do\n        bin = bin .. (decimal % 2)\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return 'db' .. string.reverse(bin) ..\
    \ 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4fsl8zs.lua:23:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpp4fsl8zs.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    if decimal ==\
    \ 0 then\n        return \"db0db\"\n    end\n    local result = \"db\"\n    while\
    \ decimal > 0 do\n        local remainder = decimal % 2\n        decimal = math.floor(decimal\
    \ / 2)\n        result = result .. remainder\n    end\n    return result .. \"\
    db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_olbd0zb.lua:28:\
    \ expected: \"db100000db\"\nactual: \"db000001db\"\nstack traceback:\n\t/tmp/tmp_olbd0zb.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  return 'db' .. dec2bin(decimal)\
    \ .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9__b4k8.lua:12:\
    \ attempt to call a nil value (global 'dec2bin')\nstack traceback:\n\t/tmp/tmpz9__b4k8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpz9__b4k8.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local result =\
    \ {}\n    local decimal = decimal\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpei3mg9yt.lua:24: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    if decimal < 0\
    \ then\n        return 'db-' .. decimal_to_binary(-decimal)\n    end\n    -- 1011\
    \ >> 1  = 10011\n    local result = 'db'\n    while decimal > 0 do\n        result\
    \ = result .. tostring(decimal % 2)\n        decimal = decimal // 2\n    end\n\
    \    return result .. 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kc_4k1w.lua:27:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp7kc_4k1w.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    local binary =\
    \ ''\n    local bits = 8\n    local j = 1\n    for i = bits, 1, -1 do\n      \
    \  j = 2 ^ (i - 1)\n        if decimal >= j then\n            binary = binary\
    \ .. '1'\n            decimal = decimal - j\n        else\n            binary\
    \ = binary .. '0'\n        end\n    end\n    return 'db' .. binary .. 'db'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx40bw83a.lua:30:\
    \ expected: \"db0db\"\nactual: \"db00000000db\"\nstack traceback:\n\t/tmp/tmpx40bw83a.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    decimal = string.format(\"\
    %o\", decimal)\n    return 'db' .. decimal .. 'db'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n    lu.assertEquals(candidate(0),\
    \ 'db0db')\n    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qjnpeqo.lua:20:\
    \ expected: \"db100000db\"\nactual: \"db40db\"\nstack traceback:\n\t/tmp/tmp8qjnpeqo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- TODO\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
    \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qxx49x8.lua:18:\
    \ expected: \"db0db\"\nactual: nil\nstack traceback:\n\t/tmp/tmp1qxx49x8.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n    -- Decimal to\
    \ binary conversion by Alex Shinn.\n    local res = {}\n    local function step(a,\
    \ b)\n        if a == 0 then return b end\n        local q, r = math.floor(a /\
    \ 2), a % 2\n        return step(q, r .. b)\n    end\n    return \"db\" .. step(decimal,\
    \ \"\") .. \"db\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n\
    \    lu.assertEquals(candidate(32), 'db100000db')\n    lu.assertEquals(candidate(103),\
    \ 'db1100111db')\n    lu.assertEquals(candidate(15), 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7f_xqo9.lua:25:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmpb7f_xqo9.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
- exit_code: 1
  program: "-- You will be given a number in decimal form and your task is to convert\
    \ it to\n-- binary format. The function should return a string, with each character\
    \ representing a binary\n-- number. Each character in the string will be '0' or\
    \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n-- The extra characters are there to help with the\
    \ format.\n-- Examples:\n-- >>> decimal_to_binary(15)\n-- 'db1111db'\n-- >>> decimal_to_binary(32)\n\
    -- 'db100000db'\nlocal function decimal_to_binary(decimal)\n  local binary = {}\n\
    \  local j = 0\n  while decimal ~= 0 do\n    j = j + 1\n    binary[j] = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n  end\n  local res = 'db'\n  for\
    \ i = j, 1, -1 do\n    res = res .. tostring(binary[i])\n  end\n  return res ..\
    \ 'db'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = decimal_to_binary\n    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
    \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
    \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ym_sve0.lua:29:\
    \ expected: \"db0db\"\nactual: \"dbdb\"\nstack traceback:\n\t/tmp/tmp1ym_sve0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979843
