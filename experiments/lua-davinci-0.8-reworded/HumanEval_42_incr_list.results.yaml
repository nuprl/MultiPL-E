language: lua
name: HumanEval_42_incr_list
results:
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal result = {}\n\
    \tfor k, v in pairs(l) do\n\t\tresult[k] = v + 1\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal new = {}\n\t\
    for i = 1, #l do\n\t\tnew[i] = l[i] + 1\n\tend\n\treturn new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i, v in ipairs(l) do\n    result[i] = v + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ i = 1, #l do\n    t[i] = l[i] + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  return map(function(e)\
    \ return e + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnw2ekj9.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpwnw2ekj9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwnw2ekj9.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i = 1, #l do\n        table.insert(r, l[i] + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ret = {}\n\
    \  for i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal r = {}\n\t\
    for i,v in ipairs(l) do\n\t\tr[i] = v + 1\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, e in ipairs(l) do\n    r[#r + 1] = e + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal new_l = {}\n\
    \tfor _, e in ipairs(l) do\n\t\ttable.insert(new_l, e + 1)\n\tend\n\treturn new_l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new = {}\n\
    \    for i = 1, #l do\n        new[i] = l[i] + 1\n    end\n    return new\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local inc_list\
    \ = {}\n    for i = 1, #l do\n        inc_list[i] = l[i] + 1\n    end\n    return\
    \ inc_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  return map(incr,\
    \ l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp006e0a1f.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp006e0a1f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp006e0a1f.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local t = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(t, v + 1)\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ _, x in ipairs(l) do\n    table.insert(t, x + 1)\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local t = {}\n\
    \    for i, v in ipairs(l) do\n        t[i] = v + 1\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(ret, v + 1)\n    end\n   \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_l = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(new_l, v + 1)\n    end\n \
    \   return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local n = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(n, v + 1)\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    res[#res + 1] = v + 1\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for _, x in ipairs(l) do\n        result[#result + 1] = x + 1\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i = 1, #l do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local l2 = {}\n\
    \    for i = 1, #l do\n        l2[i] = l[i] + 1\n    end\n    return l2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for _, x in ipairs(l) do\n        table.insert(result, x + 1)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    r[#r + 1] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local o = {}\n\
    \    for i, v in ipairs(l) do\n        o[i] = v + 1\n    end\n    return o\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for i = 1, #l do\n        table.insert(ret, l[i] + 1)\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i, value in ipairs(l) do\n    result[i] = value + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i, el in ipairs(l) do\n    res[i] = el + 1\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i, v in ipairs(l) do\n    table.insert(res, v + 1)\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local incr_el = function(el)\
    \ return el + 1 end\n  return map(incr_el, l)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqbkn6dj.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpwqbkn6dj.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwqbkn6dj.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal res = {}\n\t\
    for i = 1, #l do\n\t\tres[i] = l[i] + 1\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local nl = {}\n \
    \ for _, e in ipairs(l) do\n    table.insert(nl, e + 1)\n  end\n  return nl\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    res[#res + 1] = v + 1\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local l_plus = {}\n\
    \  for _, v in ipairs(l) do\n    l_plus[#l_plus + 1] = v + 1\n  end\n  return\
    \ l_plus\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for _, x in ipairs(l) do\n    table.insert(result, x + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  return map(lambda('x',\
    \ 'x + 1'), l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyjj91jz.lua:7:\
    \ attempt to call a nil value (global 'lambda')\nstack traceback:\n\t/tmp/tmpwyjj91jz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwyjj91jz.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ret = {}\n\
    \  for i,v in ipairs(l) do\n    ret[i] = v + 1\n  end\n  return ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return l:map(function(x)\
    \ return x + 1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwr_d8cr.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpkwr_d8cr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpkwr_d8cr.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i, v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_l = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(new_l, v + 1)\n    end\n \
    \   return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local incr_list\
    \ = {}\n    for i,v in ipairs(l) do\n        incr_list[i] = v + 1\n    end\n \
    \   return incr_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, x in ipairs(l) do\n        res[i] = x + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(res, v + 1)\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dy0_x9b.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp7dy0_x9b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7dy0_x9b.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(res, v + 1)\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ret = {}\n\
    \  for i, v in ipairs(l) do\n    ret[i] = v + 1\n  end\n  return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ i = 1, #l do\n    t[i] = l[i] + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for _, i in ipairs(l) do\n        table.insert(res, i + 1)\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ i, v in ipairs(l) do\n    t[i] = v + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_l = {}\n\
    \    for _,v in ipairs(l) do\n        table.insert(new_l, v + 1)\n    end\n  \
    \  return new_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local t = {}\n\
    \    for i, v in ipairs(l) do\n        t[i] = v + 1\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal ret = {}\n\t\
    for i,v in ipairs(l) do\n\t\tret[i] = v + 1\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal result = {}\n\
    \tfor _, x in ipairs(l) do\n\t\ttable.insert(result, x + 1)\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for i = 1, #l do\n        result[i] = l[i] + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local inc = {}\n\
    \    for i = 1, #l do\n        inc[i] = l[i] + 1\n    end\n    return inc\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for _, v in ipairs(l) do\n        r[#r + 1] = v + 1\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for _, v in ipairs(l) do\n        table.insert(result, v + 1)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _,v in ipairs(l) do\n    table.insert(r, v + 1)\n  end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local o = {}\n  for\
    \ i, v in ipairs(l) do\n    o[i] = v + 1\n  end\n  return o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnpd7mjd.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmppnpd7mjd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppnpd7mjd.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_l = {}\n\
    \    for i, v in ipairs(l) do\n        new_l[i] = v + 1\n    end\n    return new_l\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local nl = {}\n\
    \    for _, v in ipairs(l) do\n        nl[#nl + 1] = v + 1\n    end\n    return\
    \ nl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_l = {}\n\
    \  for i,v in ipairs(l) do\n    new_l[i] = v + 1\n  end\n  return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal out = {}\n\t\
    for i = 1, #l do\n\t\ttable.insert(out, l[i] + 1)\n\tend\n\treturn out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i = 1, #l do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local out = {}\n\
    \  for i = 1, #l do\n    out[i] = l[i] + 1\n  end\n  return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_list\
    \ = {}\n    for i, e in ipairs(l) do\n        table.insert(new_list, e + 1)\n\
    \    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(r, v + 1)\n  end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local t = {}\n\
    \    for _,e in ipairs(l) do\n        table.insert(t, e + 1)\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ i = 1, #l do\n    t[i] = l[i] + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new = {}\n\
    \  for i = 1, #l do\n    new[i] = l[i] + 1\n  end\n  return new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(r, v + 1)\n  end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal incr_l = {}\n\
    \tfor i = 1, #l do\n\t\tincr_l[i] = l[i] + 1\n\tend\n\treturn incr_l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i = 1, #l do\n        r[i] = l[i] + 1\n    end\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(res, v + 1)\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal r = {}\n\t\
    for i = 1, #l do\n\t\tr[i] = l[i] + 1\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local l1 = {}\n\
    \    for i = 1, #l do\n        l1[i] = l[i] + 1\n    end\n    return l1\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local f = function(e)\
    \ return e + 1 end\n    return map(f, l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphtyvv_i4.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmphtyvv_i4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphtyvv_i4.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  return map(incr,\
    \ l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp006e0a1f.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp006e0a1f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp006e0a1f.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local out = {}\n\
    \    for _, e in ipairs(l) do\n        table.insert(out, e + 1)\n    end\n   \
    \ return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ret = {}\n\
    \  for _, v in ipairs(l) do\n    ret[#ret + 1] = v + 1\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i, v in ipairs(l) do\n    result[i] = v + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local len = #l\n\
    \    local incr_l = {}\n    for i = 1, len do\n        incr_l[i] = l[i] + 1\n\
    \    end\n    return incr_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i = 1, #l do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local out = {}\n\
    \  for i, v in ipairs(l) do\n    out[i] = v + 1\n  end\n  return out\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return list.map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpicv8ta3s.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpicv8ta3s.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpicv8ta3s.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal r = {}\n\t\
    for _, v in ipairs(l) do\n\t\ttable.insert(r, v + 1)\n\tend\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i, v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dy0_x9b.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp7dy0_x9b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7dy0_x9b.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local out = {}\n\
    \    for i, v in ipairs(l) do\n        out[i] = v + 1\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for k, v in pairs(l) do\n        result[k] = v + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    assert(type(l)\
    \ == \"table\")\n    local out = {}\n    for _, v in ipairs(l) do\n        assert(type(v)\
    \ == \"number\")\n        table.insert(out, v + 1)\n    end\n    return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal result = {}\n\
    \tfor k, v in pairs(l) do\n\t\tresult[k] = v + 1\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(ret, v + 1)\n    end\n   \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal t = {}\n\t\
    for i = 1, #l do\n\t\tt[i] = l[i] + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for _, item in ipairs(l) do\n    table.insert(result, item + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ i, x in ipairs(l) do\n    t[i] = x + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local incr_list_1;\n\
    \  incr_list_1 = function(l, i)\n    if nil63(i) then\n      return l\n    else\n\
    \      return incr_list_1(set(l, i, l[i] + 1), i - 1)\n    end\n  end\n  return\
    \ incr_list_1(l, max(keys(l)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprmssdvma.lua:15:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmprmssdvma.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmprmssdvma.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(res, v + 1)\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal t = {}\n\t\
    for i, e in ipairs(l) do\n\t\tt[i] = e + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal incr_l = {}\n\
    \tfor i, v in ipairs(l) do\n\t\tincr_l[i] = v + 1\n\tend\n\treturn incr_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local incr_l =\
    \ {}\n    for i = 1, #l do\n        incr_l[i] = l[i] + 1\n    end\n    return\
    \ incr_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local out = {}\n\
    \  for i = 1, #l do\n    table.insert(out, l[i] + 1)\n  end\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal ret = {}\n\t\
    for i,v in ipairs(l) do\n\t\ttable.insert(ret, v + 1)\n\tend\n\treturn ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for i = 1, #l do\n        ret[i] = l[i] + 1\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for _,v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local incr_list_\
    \ = map(function(x) return x + 1 end, l)\n  return incr_list_\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpetk1oovx.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpetk1oovx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpetk1oovx.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local t = {}\n\
    \    for i = 1, #l do\n        t[i] = l[i] + 1\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for i = 1, #l do\n        result[i] = l[i] + 1\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(res, v + 1)\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i,v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i = 1, #l do\n        r[i] = l[i] + 1\n    end\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local out = {}\n\
    \    for i, val in ipairs(l) do\n        out[i] = val + 1\n    end\n    return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local out = {}\n\
    \    for _, elem in ipairs(l) do\n        table.insert(out, elem + 1)\n    end\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for _, v in ipairs(l) do\n    res[#res + 1] = v + 1\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(res, v + 1)\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i = 1, #l do\n        r[i] = l[i] + 1\n    end\n    return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, v in ipairs(l) do\n        table.insert(res, v + 1)\n    end\n   \
    \ return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i = 1, #l do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local incr_list_inner\n\
    \  incr_list_inner = function(l, acc)\n    if l == nil then\n      return acc\n\
    \    else\n      return incr_list_inner(l.next, {value = l.value + 1, next = acc})\n\
    \    end\n  end\n  return incr_list_inner(l, nil)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxerpxldm.lua:12:\
    \ attempt to perform arithmetic on a nil value (field 'value')\nstack traceback:\n\
    \t/tmp/tmpxerpxldm.lua:12: in function </tmp/tmpxerpxldm.lua:8>\n\t(...tail calls...)\n\
    \t/tmp/tmpxerpxldm.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local incr_l =\
    \ {}\n    for _, v in ipairs(l) do\n        incr_l[#incr_l + 1] = v + 1\n    end\n\
    \    return incr_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal t = {}\n\t\
    for _, v in ipairs(l) do\n\t\ttable.insert(t, v + 1)\n\tend\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local o = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(o, v + 1)\n    end\n    return\
    \ o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local nl = {}\n \
    \ for i = 1, #l do\n    nl[i] = l[i] + 1\n  end\n  return nl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ret = {}\n\
    \  for _, v in ipairs(l) do\n    ret[#ret + 1] = v + 1\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = { }\n \
    \ for i, v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i = 1, #l do\n    res[i] = l[i] + 1\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ll = {}\n \
    \ for i = 1, #l do\n    ll[i] = l[i] + 1\n  end\n  return ll\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local n = #l\n  local\
    \ r = { }\n  for i = 1, n do\n    r[i] = l[i] + 1\n  end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local ret = {}\n\
    \  for i = 1, #l do\n    ret[i] = l[i] + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_l = {}\n\
    \  for i, v in ipairs(l) do\n    new_l[i] = v + 1\n  end\n  return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ll = {}\n\
    \    for i, v in ipairs(l) do\n        ll[i] = v + 1\n    end\n    return ll\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return map(incr,\
    \ l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpai0wwxrq.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpai0wwxrq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpai0wwxrq.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new = {}\n\
    \  for i = 1, #l do\n    new[i] = l[i] + 1\n  end\n  return new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal t = {}\n\t\
    for _, v in ipairs(l) do\n\t\ttable.insert(t, v + 1)\n\tend\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal res = {}\n\t\
    for i = 1, #l do\n\t\tres[i] = l[i] + 1\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new = {}\n\
    \    for i = 1, #l do\n        new[i] = l[i] + 1\n    end\n    return new\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal incr_l = l\n\
    \tfor i = 1, #l do\n\t\tincr_l[i] = l[i] + 1\n\tend\n\treturn incr_l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local incr_l = {}\n\
    \  for i, v in ipairs(l) do\n    incr_l[i] = v + 1\n  end\n  return incr_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local incr_l = {}\n\
    \  for i = 1, #l do\n    incr_l[i] = l[i] + 1\n  end\n  return incr_l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i, val in ipairs(l) do\n    result[i] = val + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return map(add(1),\
    \ l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4anaqwpq.lua:7:\
    \ attempt to call a nil value (global 'add')\nstack traceback:\n\t/tmp/tmp4anaqwpq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4anaqwpq.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ i, v in ipairs(l) do\n    r[i] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local res = {}\n\
    \  for i, v in ipairs(l) do\n    res[i] = v + 1\n  end\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    table.insert(out, v + 1)\n  end\n  return out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal new_list =\
    \ {}\n\tfor k, v in pairs(l) do\n\t\tnew_list[k] = v + 1\n\tend\n\treturn new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal result = {}\n\
    \tfor _, v in ipairs(l) do\n\t\ttable.insert(result, v + 1)\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_list\
    \ = {}\n    for i, v in ipairs(l) do\n        new_list[i] = v + 1\n    end\n \
    \   return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal res = {}\n\t\
    for _, v in ipairs(l) do\n\t\tres[#res + 1] = v + 1\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    return l:map(function(e)\
    \ return e + 1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdtnpfe4.lua:7:\
    \ attempt to call a nil value (method 'map')\nstack traceback:\n\t/tmp/tmpfdtnpfe4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfdtnpfe4.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ _,v in ipairs(l) do\n    t[#t+1] = v + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(r, v + 1)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  return map(function(x)\
    \ return x + 1 end, l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnpd7mjd.lua:7:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmppnpd7mjd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmppnpd7mjd.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, x in ipairs(l) do\n    table.insert(r, x + 1)\n  end\n  return r\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i = 1, #l do\n        res[i] = l[i] + 1\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local out = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(out, v + 1)\n    end\n   \
    \ return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal incr_list =\
    \ {}\n\tfor i, v in ipairs(l) do\n\t\tincr_list[i] = v + 1\n\tend\n\treturn incr_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(new, v + 1)\n    end\n   \
    \ return new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local new_list\
    \ = {}\n    for _, v in ipairs(l) do\n        table.insert(new_list, v + 1)\n\
    \    end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _, v in ipairs(l) do\n    r[#r+1] = v + 1\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_l = {}\n\
    \  for k, v in pairs(l) do\n    new_l[k] = v + 1\n  end\n  return new_l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local r = {}\n\
    \    for i, v in ipairs(l) do\n        r[i] = v + 1\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\treturn moses.map(l,\
    \ function(i) return i + 1 end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjr231l7.lua:7:\
    \ attempt to index a nil value (global 'moses')\nstack traceback:\n\t/tmp/tmpcjr231l7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcjr231l7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local r = {}\n  for\
    \ _,i in ipairs(l) do\n    table.insert(r, i+1)\n  end\n  return r\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local t = {}\n\
    \    for i,v in ipairs(l) do\n        t[i] = v + 1\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local l2 = {}\n\
    \    for i = 1, #l do\n        l2[i] = l[i] + 1\n    end\n    return l2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978991
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local out = {}\n\
    \    for _, item in ipairs(l) do\n        table.insert(out, item + 1)\n    end\n\
    \    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n\tlocal r = {}\n\t\
    for _,v in ipairs(l) do\n\t\ttable.insert(r, v + 1)\n\tend\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for _, el in ipairs(l) do\n    table.insert(result, el + 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local t = {}\n  for\
    \ _, x in ipairs(l) do\n    t[#t+1] = x + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = incr_list\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({3, 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123}), {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for _, v in ipairs(l) do\n        table.insert(ret, v + 1)\n    end\n   \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local incr_list_next\
    \ = function(l, i)\n        if i > #l then\n            return nil\n        else\n\
    \            return i + 1, l[i] + 1\n        end\n    end\n    return make_list(incr_list_next,\
    \ l, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg_17nw99.lua:14:\
    \ attempt to call a nil value (global 'make_list')\nstack traceback:\n\t/tmp/tmpg_17nw99.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpg_17nw99.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local result =\
    \ {}\n    for i, v in ipairs(l) do\n        table.insert(result, v + 1)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for i, elem in ipairs(l) do\n        ret[i] = elem + 1\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local ret = {}\n\
    \    for _, v in ipairs(l) do\n        local v1 = v + 1\n        table.insert(ret,\
    \ v1)\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = incr_list\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3,\
    \ 2, 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
- exit_code: 0
  program: "-- Return table with elements incremented by 1.\n-- >>> incr_list({1,\
    \ 2, 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6,\
    \ 4, 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n    local res = {}\n\
    \    for i, v in ipairs(l) do\n        res[i] = v + 1\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978992
