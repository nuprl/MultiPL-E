name: HumanEval_96_count_up_to
language: lua
prompt: "-- Implement a function that takes an non-negative integer and returns a\
  \ table of the first n\n-- integers that are prime numbers and less than n.\n--\
  \ for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n-- {2,\
  \ 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3, 5, 7,\
  \ 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n-- {2,\
  \ 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
  \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6), {2,\
  \ 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
  \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
  \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
  \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
  \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n < 2 then\n        return {}\n    end\n    local result = {}\n\
    \    for i = 2, n do\n        local flag = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                flag = false\n              \
    \  break\n            end\n        end\n        if flag then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local primes = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nprint(count_up_to(5))\nprint(count_up_to(11))\n\
    print(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\n\
    print(count_up_to(50000))", "    local prime_set = {}\n    local prime_count =\
    \ 0\n    local prime_num = 0\n    for i = 2, n - 1 do\n        if (i % 2 == 0\
    \ and i ~= 2) or (i % 3 == 0 and i ~= 3) or (i % 5 == 0 and i ~= 5) then\n   \
    \         goto continue\n        end\n        prime_num = prime_num + 1\n    \
    \    prime_set[prime_num] = i\n        ::continue::\n    end\n    return prime_set\n\
    end", "\tlocal num = 2\n\tlocal primes = {}\n\twhile num < n do\n\t\tlocal is_prime\
    \ = true\n\t\tfor i = 2, num-1 do\n\t\t\tif num % i == 0 then\n\t\t\t\tis_prime\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(primes,\
    \ num)\n\t\tend\n\t\tnum = num + 1\n\tend\n\treturn primes\nend", "  local function\
    \ is_prime(n)\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n    \
    \    return false\n      end\n    end\n    return true\n  end", "    local t =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "    if n <= 1 then\n        return\
    \ {}\n    end\n    local is_prime = function(number)\n        if number == 2 then\n\
    \            return true\n        end\n        for i = 2, math.floor(math.sqrt(number))\
    \ do\n            if number % i == 0 then\n                return false\n    \
    \        end\n        end\n        return true\n    end\n    local t = {}\n  \
    \  for i = 2, n do\n        if is_prime(i) then\n            table.insert(t, i)\n\
    \        end\n    end\n    return t\nend", "\tlocal l = {}\n\tfor i = 2, n-1 do\n\
    \t\tlocal a = 0\n\t\tfor j = 2, i-1 do\n\t\t\tif (i % j == 0) then\n\t\t\t\ta\
    \ = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif (a == 0) then\n\t\t\ttable.insert(l,\
    \ i)\n\t\tend\n\tend\n\treturn l\nend", "    local tbl = {}\n    if n < 2 then\n\
    \        return tbl\n    end\n    local sqr_of_n = math.sqrt(n)\n    for i = 2,\
    \ n do\n        local flag = true\n        for _, v in ipairs(tbl) do\n      \
    \      if v > sqr_of_n then\n                break\n            end\n        \
    \    if i % v == 0 then\n                flag = false\n                break\n\
    \            end\n        end\n        if flag then\n            table.insert(tbl,\
    \ i)\n        end\n    end\n    return tbl\nend", "  if n <= 1 then\n    return\
    \ {}\n  end\n  local numbers = {}\n  local i = 2\n  while i < n do\n    if is_prime(i)\
    \ then\n      table.insert(numbers, i)\n    end\n    i = i + 1\n  end\n  return\
    \ numbers\nend", "    -- TODO: implement this function\n    if n < 0 then\n  \
    \      return nil\n    end\n    local primes = {}\n    for i = 2, n do\n     \
    \   local isPrime = true\n        for j = 2, i - 1 do\n            if i % j ==\
    \ 0 then\n                isPrime = false\n                break\n           \
    \ end\n        end\n        if isPrime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "    if n < 2 then\n    \
    \    return {}\n    end\n    local count = {}\n    for i = 2, n do\n        count[i]\
    \ = true\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if count[i]\
    \ then\n            for j = i*i, n, i do\n                count[j] = false\n \
    \           end\n        end\n    end\n    local res = {}\n    for i = 2, n do\n\
    \        if count[i] then\n            table.insert(res, i)\n        end\n   \
    \ end\n    return res\nend", "  local t = {}\n  local is_prime = true\n  for i\
    \ = 2, n do\n    for j = 2, i do\n      if i % j == 0 and i ~= j then\n      \
    \  is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      table.insert(t, i)\n    end\n    is_prime = true\n  end\n  return t\nend",
  "  if n < 2 then\n    return {}\n  end\n  -- We will use the primes we have found\
    \ to check if a new number is prime.\n  local primes = {2}\n  local last_possible_prime\
    \ = math.floor(math.sqrt(n))\n  -- For each number we need to check, we only need\
    \ to check against the primes before its square root.\n  for i = 3, n, 2 do\n\
    \    local is_prime = true\n    for _, prime in ipairs(primes) do\n      if prime\
    \ > last_possible_prime then\n        break\n      end\n      if i % prime ==\
    \ 0 then\n        is_prime = false\n        break\n      end\n    end\n    if\
    \ is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n  return primes\n\
    end", "    if n <= 0 then\n        return {}\n    end\n    local t = {}\n    local\
    \ function is_prime(num)\n        if num == 1 then\n            return false\n\
    \        end\n        for i = 2, num - 1 do\n            if num % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    for i = 1, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "\tlocal primes = {}\n\tfor i\
    \ = 2, n do\n\t\tlocal is_prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i %\
    \ j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    \tif is_prime then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\n\
    end", "    --\n    --  TODO: implement this function\n    --\nend", "    -- Write\
    \ your implementation here\nend", "    local tbl = {}\n    for i = 2, n do\n \
    \       if is_prime(i) then\n            table.insert(tbl, i)\n        end\n \
    \   end\n    return tbl\nend", end]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
