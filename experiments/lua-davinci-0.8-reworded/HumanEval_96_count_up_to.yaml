name: HumanEval_96_count_up_to
language: lua
prompt: "-- Implement a function that takes an non-negative integer and returns a\
  \ table of the first n\n-- integers that are prime numbers and less than n.\n--\
  \ for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n-- {2,\
  \ 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3, 5, 7,\
  \ 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n-- {2,\
  \ 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
  \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6), {2,\
  \ 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
  \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
  \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
  \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
  \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if n < 2 then\n        return {}\n    end\n    local result = {}\n\
    \    for i = 2, n do\n        local flag = true\n        for j = 2, i - 1 do\n\
    \            if i % j == 0 then\n                flag = false\n              \
    \  break\n            end\n        end\n        if flag then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local primes = {}\n\
    \    for i = 2, n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend\nprint(count_up_to(5))\nprint(count_up_to(11))\n\
    print(count_up_to(0))\nprint(count_up_to(20))\nprint(count_up_to(1))\nprint(count_up_to(18))\n\
    print(count_up_to(50000))", "    local prime_set = {}\n    local prime_count =\
    \ 0\n    local prime_num = 0\n    for i = 2, n - 1 do\n        if (i % 2 == 0\
    \ and i ~= 2) or (i % 3 == 0 and i ~= 3) or (i % 5 == 0 and i ~= 5) then\n   \
    \         goto continue\n        end\n        prime_num = prime_num + 1\n    \
    \    prime_set[prime_num] = i\n        ::continue::\n    end\n    return prime_set\n\
    end", "\tlocal num = 2\n\tlocal primes = {}\n\twhile num < n do\n\t\tlocal is_prime\
    \ = true\n\t\tfor i = 2, num-1 do\n\t\t\tif num % i == 0 then\n\t\t\t\tis_prime\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(primes,\
    \ num)\n\t\tend\n\t\tnum = num + 1\n\tend\n\treturn primes\nend", "  local function\
    \ is_prime(n)\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n    \
    \    return false\n      end\n    end\n    return true\n  end", "    local t =\
    \ {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "    if n <= 1 then\n        return\
    \ {}\n    end\n    local is_prime = function(number)\n        if number == 2 then\n\
    \            return true\n        end\n        for i = 2, math.floor(math.sqrt(number))\
    \ do\n            if number % i == 0 then\n                return false\n    \
    \        end\n        end\n        return true\n    end\n    local t = {}\n  \
    \  for i = 2, n do\n        if is_prime(i) then\n            table.insert(t, i)\n\
    \        end\n    end\n    return t\nend", "\tlocal l = {}\n\tfor i = 2, n-1 do\n\
    \t\tlocal a = 0\n\t\tfor j = 2, i-1 do\n\t\t\tif (i % j == 0) then\n\t\t\t\ta\
    \ = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif (a == 0) then\n\t\t\ttable.insert(l,\
    \ i)\n\t\tend\n\tend\n\treturn l\nend", "    local tbl = {}\n    if n < 2 then\n\
    \        return tbl\n    end\n    local sqr_of_n = math.sqrt(n)\n    for i = 2,\
    \ n do\n        local flag = true\n        for _, v in ipairs(tbl) do\n      \
    \      if v > sqr_of_n then\n                break\n            end\n        \
    \    if i % v == 0 then\n                flag = false\n                break\n\
    \            end\n        end\n        if flag then\n            table.insert(tbl,\
    \ i)\n        end\n    end\n    return tbl\nend", "  if n <= 1 then\n    return\
    \ {}\n  end\n  local numbers = {}\n  local i = 2\n  while i < n do\n    if is_prime(i)\
    \ then\n      table.insert(numbers, i)\n    end\n    i = i + 1\n  end\n  return\
    \ numbers\nend", "    -- TODO: implement this function\n    if n < 0 then\n  \
    \      return nil\n    end\n    local primes = {}\n    for i = 2, n do\n     \
    \   local isPrime = true\n        for j = 2, i - 1 do\n            if i % j ==\
    \ 0 then\n                isPrime = false\n                break\n           \
    \ end\n        end\n        if isPrime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return primes\nend", "    if n < 2 then\n    \
    \    return {}\n    end\n    local count = {}\n    for i = 2, n do\n        count[i]\
    \ = true\n    end\n    for i = 2, math.floor(math.sqrt(n)) do\n        if count[i]\
    \ then\n            for j = i*i, n, i do\n                count[j] = false\n \
    \           end\n        end\n    end\n    local res = {}\n    for i = 2, n do\n\
    \        if count[i] then\n            table.insert(res, i)\n        end\n   \
    \ end\n    return res\nend", "  local t = {}\n  local is_prime = true\n  for i\
    \ = 2, n do\n    for j = 2, i do\n      if i % j == 0 and i ~= j then\n      \
    \  is_prime = false\n        break\n      end\n    end\n    if is_prime then\n\
    \      table.insert(t, i)\n    end\n    is_prime = true\n  end\n  return t\nend",
  "  if n < 2 then\n    return {}\n  end\n  -- We will use the primes we have found\
    \ to check if a new number is prime.\n  local primes = {2}\n  local last_possible_prime\
    \ = math.floor(math.sqrt(n))\n  -- For each number we need to check, we only need\
    \ to check against the primes before its square root.\n  for i = 3, n, 2 do\n\
    \    local is_prime = true\n    for _, prime in ipairs(primes) do\n      if prime\
    \ > last_possible_prime then\n        break\n      end\n      if i % prime ==\
    \ 0 then\n        is_prime = false\n        break\n      end\n    end\n    if\
    \ is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n  return primes\n\
    end", "    if n <= 0 then\n        return {}\n    end\n    local t = {}\n    local\
    \ function is_prime(num)\n        if num == 1 then\n            return false\n\
    \        end\n        for i = 2, num - 1 do\n            if num % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    for i = 1, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "\tlocal primes = {}\n\tfor i\
    \ = 2, n do\n\t\tlocal is_prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i %\
    \ j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    \tif is_prime then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\n\
    end", "    --\n    --  TODO: implement this function\n    --\nend", "    -- Write\
    \ your implementation here\nend", "    local tbl = {}\n    for i = 2, n do\n \
    \       if is_prime(i) then\n            table.insert(tbl, i)\n        end\n \
    \   end\n    return tbl\nend", end, "\tlocal l = {}\n\tfor i = 1, n do\n\t\tif\
    \ is_prime(i) then\n\t\t\ttable.insert(l, i)\n\t\tend\n\tend\n\treturn l\nend",
  "    local primes = {}\n    for i = 2, n do\n        local is_prime = true\n   \
    \     for _, p in ipairs(primes) do\n            if i % p == 0 then\n        \
    \        is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    return primes\nend", "    local t = {}\n    for i = 2, n-1 do\n\
    \        if(is_prime(i)) then\n            table.insert(t, i)\n        end\n \
    \   end\n    return t\nend", "    local result = {}\n    if n == 0 then\n    \
    \    return result\n    end\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "  return {}\nend", "  local primes = {}\n  for i = 2, n do\n    local is_prime\
    \ = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend", "    if n == 1 then\n        return\
    \ {}\n    end\n    local primes = {}\n    local current_number = 2\n    while\
    \ current_number < n do\n        if is_prime(current_number) then\n          \
    \  table.insert(primes, current_number)\n        end\n        current_number =\
    \ current_number + 1\n    end\n    return primes\nend", "    -- TODO: YOUR CODE\
    \ HERE\nend", "  local t = {}\n  for i = 2, n do\n    if is_prime(i) then\n  \
    \    table.insert(t, i)\n    end\n  end\n  return t\nend", "    return {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\nend", "    -- your code here\n    return nil\nend", " \
    \ local result = {}\n  for i = 2, n do\n    if is_prime(i) then\n      table.insert(result,\
    \ i)\n    end\n  end\n  return result\nend", "    return {}\nend", "    local\
    \ result = {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "\tlocal function is_prime(n)\n\
    \t\tif n <= 1 then\n\t\t\treturn false\n\t\telseif n == 2 then\n\t\t\treturn true\n\
    \t\telseif n % 2 == 0 then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(n),\
    \ 2 do\n\t\t\t\tif n % i == 0 then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend", "    local ret = {}\n    for i = 2, n\
    \ do\n        if is_prime(i) then\n            table.insert(ret, i)\n        end\n\
    \    end\n    return ret\nend", "    if n < 2 then\n        return {}\n    end\n\
    \    local found = {}\n    local max = math.floor(math.sqrt(n))\n    for i = 2,\
    \ n do\n        local is_prime = true\n        for j = 2, max do\n           \
    \ if i % j == 0 then\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime then\n            table.insert(found,\
    \ i)\n        end\n    end\n    return found\nend", "    -- Your code here\n \
    \   local result={}\n    for i=2,n do\n        for j=2,i-1 do\n            if\
    \ i%j==0 then\n                break\n            elseif j==i-1 then\n       \
    \         table.insert(result,i)\n            end\n        end\n    end\n    return\
    \ result\nend", "  local count_table = {}\n  for i = 2, n, 1 do\n    if is_prime(i)\
    \ then\n      table.insert(count_table, i)\n    end\n  end\n  return count_table\n\
    end", "    local t = {}\n    for i = 2, n do\n        if not divisible(t, i) then\n\
    \            table.insert(t, i)\n        end\n    end\n    return t\nend", end,
  "    local ret = {}\n    for i = 2, n do\n        if is_prime(i) then\n        \
    \    table.insert(ret, i)\n        end\n    end\n    return ret\nend", "    return\
    \ {}\nend", "  local primes = {}\n  if n == 0 then\n    return primes\n  end\n\
    \  local i = 2\n  while i < n do\n    local is_prime = true\n    for j = 2, i\
    \ - 1 do\n      if i % j == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      table.insert(primes, i)\n   \
    \ end\n    i = i + 1\n  end\n  return primes\nend", end, "  local res = {}\n \
    \ if n == 0 then\n    return res\n  end\n  for i = 2, n do\n    if is_prime(i)\
    \ then\n      table.insert(res, i)\n    end\n  end\n  return res\nend", "    local\
    \ count_table = {}\n    for i = 2, n do\n        count_table[i] = false\n    end\n\
    \    for i = 2, n do\n        if not count_table[i] then\n            table.insert(count_table,\
    \ i)\n            local j = i\n            while i * j <= n do\n             \
    \   count_table[i * j] = true\n                j = j + 1\n            end\n  \
    \      end\n    end\n    return count_table\nend", "    -- TODO: return a table\
    \ of prime numbers less than n\n    local r = {}\n    if n <= 0 then\n       \
    \ return r\n    end\n    for i = 2, n - 1 do\n        if is_prime(i) then\n  \
    \          table.insert(r, i)\n        end\n    end\n    return r\nend", end,
  "    if n <= 1 then\n        return {}\n    end\n    local ret = {}\n    for i =\
    \ 2, n - 1 do\n        if is_prime(i) then\n            table.insert(ret, i)\n\
    \        end\n    end\n    return ret\nend", "    -- do you know the Sieve of\
    \ Eratosthenes?\n    -- https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \    -- This is a good one to do at home!\nend", "    if n < 2 then\n        return\
    \ {}\n    end\n    local primes = {}\n    for i = 2, n do\n        local is_prime\
    \ = true\n        for j = 2, i do\n            if i % j == 0 and j ~= i then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n    end\n    return primes\nend", "    local mt = {}\n    for i =\
    \ 2, n - 1 do\n        if is_prime(i) then\n            table.insert(mt, i)\n\
    \        end\n    end\n    return mt\nend", "  local first_prime_table = {}\n\
    \  for i = 2, n do\n    if is_prime(i) then\n      table.insert(first_prime_table,\
    \ i)\n    end\n  end\n  return first_prime_table\nend", "  if n < 2 then\n   \
    \ return {}\n  end\n  local table = {}\n  for i = 2, n, 1 do\n    if is_prime(i)\
    \ then\n      table[#table + 1] = i\n    end\n  end\n  return table\nend", " \
    \   local result = {}\n    for i = 2, n do\n        if is_prime(i) then\n    \
    \        table.insert(result, i)\n        end\n    end\n    return result\nend",
  "    -- write your code here\n    local prime = {2}\n    for i = 3, n do\n     \
    \   for _, v in ipairs(prime) do\n            if i % v == 0 then\n           \
    \     break\n            elseif v == prime[#prime] then\n                table.insert(prime,\
    \ i)\n            end\n        end\n    end\n    return prime\nend", "  local\
    \ res = {}\n  local i = 1\n  while i < n do\n    if n % i == 0 then\n      res[#res\
    \ + 1] = i\n    end\n    i = i + 1\n  end\n  return res\nend", "    local tab\
    \ = {}\n    for i = 2, n do\n        local ret = true\n        for j = 2, i -\
    \ 1 do\n            if i % j == 0 then\n                ret = false\n        \
    \        break\n            end\n        end\n        if ret then\n          \
    \  table.insert(tab, i)\n        end\n    end\n    return tab\nend", "    if n<2\
    \ then return {} end\n    local primes = {}\n    for i=2,n do\n        local flag\
    \ = true\n        for j=2,math.sqrt(i) do\n            if i%j==0 then\n      \
    \          flag = false\n                break\n            end\n        end\n\
    \        if flag then\n            table.insert(primes,i)\n        end\n    end\n\
    \    return primes\nend", "  if n < 1 then\n    return {}\n  end\n  local result\
    \ = {}\n  for i = 2, n do\n    local flag = true\n    for j = 2, math.sqrt(i)\
    \ do\n      if i % j == 0 then\n        flag = false\n        break\n      end\n\
    \    end\n    if flag then\n      table.insert(result, i)\n    end\n  end\n  return\
    \ result\nend", "  if n <= 1 then\n    return {}\n  end\n  local primes = {}\n\
    \  for i = 2, n do\n    local is_prime = true\n    for j = 2, i - 1 do\n     \
    \ if i % j == 0 then\n        is_prime = false\n        break\n      end\n   \
    \ end\n    if is_prime then\n      table.insert(primes, i)\n    end\n  end\n \
    \ return primes\nend", "    local t = {}\n    local i = 2\n    while i <= n do\n\
    \        local prime = true\n        for j = 2, i-1 do\n            if i % j ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(t, i)\n        end\n\
    \        i = i + 1\n    end\n    return t\nend", "\tlocal res = {}\n\tif n > 0\
    \ then\n\t\tfor i = 2, n do\n\t\t\tlocal is_prime = true\n\t\t\tfor j = 2, i -\
    \ 1 do\n\t\t\t\tif i % j == 0 then\n\t\t\t\t\tis_prime = false\n\t\t\t\t\tbreak\n\
    \t\t\t\tend\n\t\t\tend\n\t\t\tif is_prime then\n\t\t\t\ttable.insert(res, i)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn res\nend", "    local primes = {}\n    local\
    \ index = 1\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n\
    \            primes[index] = i\n            index = index + 1\n        end\n \
    \       i = i + 1\n    end\n    return primes\nend", "    local result = {}\n\
    \    for i = 1, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    local i = 2\n    while i < n do\n        -- the number of this loop is greater\
    \ than 2 and is not divided\n        -- by other number in the result table, then\
    \ it is a prime number.\n        if not has_factor(i, result) then\n         \
    \   table.insert(result, i)\n        end\n        i = i + 1\n    end\n    return\
    \ result\nend", "    -- write your code here\nend", "    -- start from 2\n   \
    \ local results = {}\n    for i = 2, n do\n        local is_prime = true\n   \
    \     for j = 2, i-1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(results, i)\n        end\n    end\n    return\
    \ results\nend", "    local result = {}\n    for i = 2, n do\n        if is_prime(i)\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "    return {}\nend", "    -- return a table containing {2, 3,\
    \ 5, 7, 11, 13, 17, 19}\n    -- Hint: use math.mod()\n    -- Hint: use math.sqrt()\n\
    \    -- Hint: use a while-loop\n    local primes = {}\n    local table_index =\
    \ 1\n    -- YOUR CODE HERE\n    local i = 2\n    while i < n do\n        local\
    \ isPrime = true\n        for j = 2, math.sqrt(i) do\n            if math.mod(i,\
    \ j) == 0 then\n                isPrime = false\n                break\n     \
    \       end\n        end\n        if isPrime then\n            primes[table_index]\
    \ = i\n            table_index = table_index + 1\n        end\n        i = i +\
    \ 1\n    end\n    return primes\nend", "\tlocal t = {}\n\tfor i = 2, n do\n\t\t\
    if is_prime(i) then\n\t\t\ttable.insert(t, i)\n\t\tend\n\tend\n\treturn t\nend",
  "    -- Write your code here\n    local result = {}\n    if (n < 2) then\n     \
    \   return result\n    end\n    table.insert(result, 2)\n    for i = 3, n do\n\
    \        local is_prime = true\n        for j = 2, i - 1 do\n            if (i\
    \ % j == 0) then\n                is_prime = false\n                break\n  \
    \          end\n        end\n        if (is_prime) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "  return {}\nend", "  local\
    \ c = {}\n  local i = 2\n  local b = false\n  while i < n do\n    for _, v in\
    \ ipairs(c) do\n      if i % v == 0 then\n        b = true\n        break\n  \
    \    end\n    end\n    if not b then\n      table.insert(c, i)\n    end\n    b\
    \ = false\n    i = i + 1\n  end\n  return c\nend", "    return {}\nend", "  local\
    \ prime = {}\n  local found = false\n  for i = 2, n do\n    for j = 2, i-1 do\n\
    \      if i % j == 0 then\n        found = true\n        break\n      end\n  \
    \  end\n    if not found then\n      table.insert(prime, i)\n    end\n    found\
    \ = false\n  end\n  return prime\nend", "    local result = {}\n    for i = 2,\
    \ n do\n        if is_prime(i) then\n            table.insert(result, i)\n   \
    \     end\n    end\n    return result\nend", "    local ret = {}\n    local i\
    \ = 1\n    while i <= n do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n        i = i + 1\n    end\n    return ret\nend", "  -- implementation\n\
    end", "    local table = {}\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            table[#table + 1] = i\n        end\n    end\n    return table\nend",
  "\tlocal result = {}\n\tfor i = 1, n, 1 do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(result,\
    \ i)\n\t\tend\n\tend\n\treturn result\nend", "  local function isPrime(num)\n\
    \    local function is_divisible(num, divisor)\n      return num % divisor ==\
    \ 0\n    end\n    for i = 2, num - 1 do\n      if is_divisible(num, i) then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local primes\
    \ = {}\n  for i = 2, n do\n    if isPrime(i) then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend", "    if (n <= 0) then\n        return\
    \ {}\n    end\n    if (n <= 2) then\n        return {2}\n    end\n    local primes\
    \ = {2}\n    local candidate = 3\n    while (candidate < n) do\n        is_prime\
    \ = true\n        for j, prime in ipairs(primes) do\n            if (candidate\
    \ % prime == 0) then\n                is_prime = false\n                break\n\
    \            end\n        end\n        if (is_prime) then\n            table.insert(primes,\
    \ candidate)\n        end\n        candidate = candidate + 2\n    end\n    return\
    \ primes\nend", "    local result = {}\n    for i = 2, n do\n        local isPrime\
    \ = true\n        for j = 2, i - 1 do\n            if i % j == 0 then\n      \
    \          isPrime = false\n                break\n            end\n        end\n\
    \        if isPrime then\n            table.insert(result, i)\n        end\n \
    \   end\n    return result\nend", "    local ret = {}\n    local function is_prime(x)\n\
    \        for i = 2, x - 1 do\n            if x % i == 0 then\n               \
    \ return false\n            end\n        end\n        return true\n    end\n \
    \   for i = 2, n do\n        if is_prime(i) then\n            table.insert(ret,\
    \ i)\n        end\n    end\n    return ret\nend", "    if n < 2 then\n       \
    \ return {}\n    end\n    local ret = {}\n    for i = 2, n - 1 do\n        if\
    \ is_prime(i) then\n            table.insert(ret, i)\n        end\n    end\n \
    \   return ret\nend", "\tlocal p = 2\n\tlocal result = {}\n\twhile p < n do\n\t\
    \ttable.insert(result, p)\n\t\tp = next_prime(p)\n\tend\n\treturn result\nend",
  "  if n == 0 then\n    return {}\n  end\n  local result = {}\n  local current =\
    \ 1\n  while current < n do\n    current = current + 1\n    if is_prime(current)\
    \ then\n      table.insert(result, current)\n    end\n  end\n  return result\n\
    end", "  local results = {}\n  for i = 1, n do\n    if is_prime(i) then\n    \
    \  table.insert(results, i)\n    end\n  end\n  return results\nend", "    if n\
    \ < 2 then\n        return {}\n    end\n    local result = {}\n    for i = 2,\
    \ n do\n        local prime = true\n        for j = 2, i - 1 do\n            if\
    \ i % j == 0 then\n                prime = false\n                break\n    \
    \        end\n        end\n        if prime then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    primes={}\n    for i=2,n\
    \ do\n        is_prime=true\n        for j=2,i-1 do\n            if i%j==0 then\n\
    \                is_prime=false\n                break\n            end\n    \
    \    end\n        if is_prime then\n            table.insert(primes,i)\n     \
    \   end\n    end\n    return primes\nend", "    local result = {}\n    local numbers\
    \ = {}\n    local count = 0\n    for i = 2, n do\n        numbers[i] = true\n\
    \    end\n    for i = 2, n do\n        if numbers[i] then\n            count =\
    \ count + 1\n            result[count] = i\n            for j = i + i, n, i do\n\
    \                numbers[j] = false\n            end\n        end\n    end\n \
    \   return result\nend", "\tlocal prime_numbers = {}\n\tlocal count = 2\n\twhile\
    \ count < n do\n\t\tlocal i = 2\n\t\twhile i < count do\n\t\t\tif count % i ==\
    \ 0 then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\tif i == count\
    \ then\n\t\t\ttable.insert(prime_numbers, count)\n\t\tend\n\t\tcount = count +\
    \ 1\n\tend\n\treturn prime_numbers\nend", "    local result = {}\n    if n ==\
    \ 0 then\n        return result\n    end\n    for i = 2, n - 1 do\n        if\
    \ is_prime(i) then\n            table.insert(result, i)\n        end\n    end\n\
    \    return result\nend", "    if n < 2 then\n        return {}\n    end\n   \
    \ local nums = {}\n    local count = 0\n    for i = 2, n do\n        nums[i] =\
    \ true\n    end\n    for i = 2, n do\n        if nums[i] then\n            local\
    \ k = i * i\n            while k <= n do\n                nums[k] = false\n  \
    \              k = k + i\n            end\n        end\n    end\n    local ret\
    \ = {}\n    for i = 2, n do\n        if nums[i] then\n            count = count\
    \ + 1\n            ret[count] = i\n        end\n    end\n    return ret\nend",
  "    local ret = {}\n    for i = 2, n do\n        local prime = true\n        for\
    \ j = 2, i-1 do\n            if i % j == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(ret, i)\n        end\n    end\n    return ret\nend",
  "  if n <= 0 then\n    return {}\n  end\n  local primes = {}\n  for i = 2, n do\n\
    \    if not is_divisible_by_any(i, primes) then\n      table.insert(primes, i)\n\
    \    end\n  end\n  return primes\nend", "    local result = {}\n    for i = 2,\
    \ n do\n        local is_prime = true\n        for j = 2, i - 1 do\n         \
    \   if i % j == 0 then\n                is_prime = false\n                break\n\
    \            end\n        end\n        if is_prime then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "  if n == 0 then\n    return\
    \ {}\n  end\n  local primes = {}\n  for i = 2, n do\n    if is_prime(i) then\n\
    \      table.insert(primes, i)\n    end\n  end\n  return primes\nend", "    local\
    \ primes = {}\n    for i = 2, n, 1 do\n        if is_prime(i) then\n         \
    \   table.insert(primes, i)\n        end\n    end\n    return primes\nend", " \
    \   if n < 2 then\n        return {}\n    end\n    local primes = {}\n    local\
    \ is_prime = {}\n    for i = 2, n do\n        is_prime[i] = true\n    end\n  \
    \  for i = 2, n do\n        if is_prime[i] then\n            table.insert(primes,\
    \ i)\n            for j = i + i, n, i do\n                is_prime[j] = false\n\
    \            end\n        end\n    end\n    return primes\nend", "    local primes\
    \ = {}\n    for num = 2, n - 1 do\n        if is_prime(num) then\n           \
    \ table.insert(primes, num)\n        end\n    end\n    return primes\nend", " \
    \   if n < 2 then\n        return {}\n    end\n    local t = {}\n    local i =\
    \ 2\n    while i < n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n        i = i + 1\n    end\n    return t\nend", "    local\
    \ result = {}\n    local size = 0\n    local m = 2\n    while m < n do\n     \
    \   if is_prime(m) then\n            size = size + 1\n            result[size]\
    \ = m\n        end\n        m = m + 1\n    end\n    return result\nend", "   \
    \ local t = {}\n    if n <= 1 then\n        return t\n    end\n    for i = 2,\
    \ n - 1 do\n        t[i] = is_prime(i)\n    end\n    return t\nend", "    local\
    \ primes = {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n\
    \            table.insert(primes, i)\n        end\n        i = i + 1\n    end\n\
    \    return primes\nend", "\tlocal primes = {}\n\tlocal i = 2\n\twhile i < n do\n\
    \t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn primes\nend", "\tlocal primes={}\n\tfor i=2,n-1 do\n\t\tlocal\
    \ flag=1\n\t\tfor j=2,i-1 do\n\t\t\tif i%j==0 then\n\t\t\t\tflag=0\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\t\tif flag==1 then\n\t\t\ttable.insert(primes,i)\n\t\tend\n\
    \tend\n\treturn primes\nend", "\tlocal nums = {}\n\tlocal is_prime = true\n\t\
    for i = 2, n do\n\t\tfor j = 2, i-1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(nums,\
    \ i)\n\t\tend\n\t\tis_prime = true\n\tend\n\treturn nums\nend", "    local t =\
    \ {}\n    local function is_prime(m)\n        if m <= 1 then\n            return\
    \ false\n        end\n        for i = 2, math.sqrt(m) do\n            if m % i\
    \ == 0 then\n                return false\n            end\n        end\n    \
    \    return true\n    end\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            table.insert(t, i)\n        end\n    end\n    return t\nend", " \
    \   if n < 1 then\n        return {}\n    end\n    local res = {}\n    for i =\
    \ 2, n - 1 do\n        if is_prime(i) then\n            table.insert(res, i)\n\
    \        end\n    end\n    return res\nend", "  local primes = {}\n  for i = 2,\
    \ n - 1 do\n    if is_prime(i) then\n      table.insert(primes, i)\n    end\n\
    \  end\n  return primes\nend", "  -- your code here\nend", "    local t = {}\n\
    \    for i = 2, n - 1 do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "\tlocal result = {}\n\tlocal\
    \ check = 2\n\tif n <= 1 then\n\t\treturn result\n\tend\n\twhile check < n do\n\
    \t\tif is_prime(check) then\n\t\t\ttable.insert(result, check)\n\t\tend\n\t\t\
    check = check + 1\n\tend\n\treturn result\nend", "  local list = {}\n  local count\
    \ = 1\n  local i = 2\n  while count <= n do\n    local is_prime = true\n    for\
    \ k, v in ipairs(list) do\n      if i % v == 0 then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if is_prime then\n      list[count] =\
    \ i\n      count = count + 1\n    end\n    i = i + 1\n  end\n  return list\nend",
  "    if n <= 1 then\n        return {}\n    end\n    local num = {}\n    for i =\
    \ 2, n do\n        local count = 0\n        for j = 1, i do\n            if i\
    \ % j == 0 then\n                count = count + 1\n            end\n        end\n\
    \        if count == 2 then\n            table.insert(num, i)\n        end\n \
    \   end\n    return num\nend", "  if n < 2 then\n    return {}\n  end\n  local\
    \ primes = {}\n  for i = 2, n do\n    if is_prime(i) then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  return primes\nend", "\tlocal primes = {}\n\tfor i = 2,\
    \ n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\
    \treturn primes\nend", "  local function helper(n, cur)\n    if cur == n then\n\
    \      return {}\n    elseif is_prime(cur) then\n      return {cur} + helper(n,\
    \ cur + 1)\n    else\n      return helper(n, cur + 1)\n    end\n  end\n  return\
    \ helper(n, 2)\nend", "    local primes = {}\n    if n > 1 then\n        for i\
    \ = 2, n - 1 do\n            local is_prime = true\n            for j = 2, i do\n\
    \                if i % j == 0 and j ~= i then\n                    is_prime =\
    \ false\n                    break\n                end\n            end\n   \
    \         if is_prime then\n                table.insert(primes, i)\n        \
    \    end\n        end\n    end\n    return primes\nend", "\t-- YOUR CODE HERE\n\
    \tlocal cnt_num = {}\n\tfor i = 2, n do\n\t\tlocal is_prime = true\n\t\tfor j\
    \ = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(cnt_num, i)\n\
    \t\tend\n\tend\n\treturn cnt_num\nend", "    local primes = {}\n    for i = 2,\
    \ n do\n        if is_prime(i) then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    return primes\nend", "    local primes = {}\n    for i\
    \ = 2, n do\n        if is_prime(i) then\n            table.insert(primes, i)\n\
    \        end\n    end\n    return primes\nend", "    local primes = {}\n    local\
    \ c = 2\n    while c < n do\n        local isPrime = true\n        for _, p in\
    \ ipairs(primes) do\n            if c % p == 0 then\n                isPrime =\
    \ false\n                break\n            end\n        end\n        if isPrime\
    \ then\n            table.insert(primes, c)\n        end\n        c = c + 1\n\
    \    end\n    return primes\nend", "  local primes = {}\n  for i = 2, n do\n \
    \   if is_prime(i) then\n      table.insert(primes, i)\n    end\n  end\n  return\
    \ primes\nend", "    local table = {}\n    for i = 2, n do\n        if is_prime(i)\
    \ then\n            table[#table + 1] = i\n        end\n    end\n    return table\n\
    end", "    local l = {}\n    for i = 2, n do\n        if is_prime(i) then\n  \
    \          table.insert(l, i)\n        end\n    end\n    return l\nend", end,
  "    local num = n\n    local table = {}\n    for i = 2, n do\n        local is_prime\
    \ = true\n        local limit = math.floor(math.sqrt(i))\n        for j = 2, limit\
    \ do\n            if i % j == 0 then\n                is_prime = false\n     \
    \           break\n            end\n        end\n        if is_prime then\n  \
    \          table[#table + 1] = i\n        end\n    end\n    return table\nend",
  "    -- TODO\nend", "\tlocal t = {}\n\tfor i = 2, n - 1 do\n\t\tlocal count = 0\n\
    \t\tfor j = 1, i do\n\t\t\tif i % j == 0 then\n\t\t\t\tcount = count + 1\n\t\t\
    \tend\n\t\tend\n\t\tif count == 2 then\n\t\t\ttable.insert(t, i)\n\t\tend\n\t\
    end\n\treturn t\nend", "    -- body\nend", "    local ret = {}\n    for i = 2,\
    \ n - 1 do\n        if is_prime(i) then\n            table.insert(ret, i)\n  \
    \      end\n    end\n    return ret\nend", "\tlocal ret = {}\n\tfor i = 2, n do\n\
    \t\tif is_prime(i) then\n\t\t\ttable.insert(ret, i)\n\t\tend\n\tend\n\treturn\
    \ ret\nend", "    local t = {}\n    for i = 2, n do\n        local flag = true\n\
    \        for j = 2, i - 1 do\n            if i % j == 0 then\n               \
    \ flag = false\n                break\n            end\n        end\n        if\
    \ flag then\n            table.insert(t, i)\n        end\n    end\n    return\
    \ t\nend", "    local result = {}\n    if n < 2 then\n        return result\n\
    \    end\n    table.insert(result, 2)\n    if n <= 2 then\n        return result\n\
    \    end\n    for i = 3, n, 2 do\n        local flag = true\n        for j = 3,\
    \ math.sqrt(i), 2 do\n            if i % j == 0 then\n                flag = false\n\
    \                break\n            end\n        end\n        if flag then\n \
    \           table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "  local t = {}\n  local i = 1\n  while i < n do\n    if is_prime(i) then\n\
    \      table.insert(t, i)\n    end\n    i = i + 1\n  end\n  return t\nend", " \
    \   local primeTable = {}\n    if n == 0 then\n        return {}\n    end\n  \
    \  if n == 1 then\n        return {}\n    end\n    for i = 2, n - 1 do\n     \
    \   if is_prime(i) then\n            table.insert(primeTable, i)\n        end\n\
    \    end\n    return primeTable\nend", "    -- TODO: Implement this function\n\
    end", "    local result = {}\n    local function is_prime(m)\n        for i=2,\
    \ m-1 do\n            if m % i == 0 then\n                return false\n     \
    \       end\n        end\n        return true\n    end\n    for i=2, n do\n  \
    \      if is_prime(i) then\n            table.insert(result, i)\n        end\n\
    \    end\n    return result\nend", "    return {2, 3, 5, 7, 11, 13, 17, 19}\n\
    end", "\tlocal primes = {}\n\tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\t\
    table.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\nend", "    local t =\
    \ {}\n    if n < 2 then\n        return t\n    end\n    t[1] = 2\n    local j\
    \ = 2\n    for i = 3, n do\n        local test = false\n        for k = 1, j -\
    \ 1 do\n            if i % t[k] == 0 then\n                test = true\n     \
    \           break\n            end\n        end\n        if not test then\n  \
    \          t[j] = i\n            j = j + 1\n        end\n    end\n    return t\n\
    end", "    if n < 2 then\n        return {}\n    end\n    local prime_list = {}\n\
    \    for i = 2, n do\n        local is_prime = true\n        for j = 2, math.sqrt(i)\
    \ do\n            if i % j == 0 then\n                is_prime = false\n     \
    \           break\n            end\n        end\n        if is_prime then\n  \
    \          table.insert(prime_list, i)\n        end\n    end\n    return prime_list\n\
    end", "  -- your code here\nend", "  if n < 2 then\n    return {}\n  end\n  local\
    \ f = {{n=2,p=true}}\n  for i=3,n,2 do\n    f[#f+1] = {n=i,p=true}\n  end\n  for\
    \ _,f1 in ipairs(f) do\n    for _,f2 in ipairs(f) do\n      if f1.n~=f2.n and\
    \ f2.n%f1.n==0 then\n        f2.p = false\n      end\n    end\n  end\n  local\
    \ res = {}\n  for _,f1 in ipairs(f) do\n    if f1.p then\n      res[#res+1] =\
    \ f1.n\n    end\n  end\n  return res\nend", "    -- YOUR CODE HERE\n    local\
    \ t = {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "    local l = {}\n    for i =\
    \ 2, n do\n        if is_prime(i) then\n            table.insert(l, i)\n     \
    \   end\n    end\n    return l\nend", "  local tbl = {}\n  for i = 1, n do\n \
    \   if is_prime(i) then\n      table.insert(tbl, i)\n    end\n  end\n  return\
    \ tbl\nend", "    local res = {}\n    if n <= 1 then\n        return res\n   \
    \ end\n    res[1] = 2\n    local last = 2\n    local count = 1\n    while last\
    \ <= n do\n        local is_prime = true\n        local next = last + 1\n    \
    \    while is_prime do\n            local _, divisor = is_prime_number(next)\n\
    \            if divisor then\n                next = next + 1\n            else\n\
    \                count = count + 1\n                res[count] = next\n      \
    \          last = next\n                is_prime = false\n            end\n  \
    \      end\n    end\n    return res\nend", "    -- TODO: implement the function\n\
    end", "    local res = {}\n    for i = 2, n do\n        if is_prime(i) then\n\
    \            table.insert(res, i)\n        end\n    end\n    return res\nend",
  "  local a = {}\n  local i = 2\n  while i < n do\n    if is_prime(i) then\n    \
    \  table.insert(a, i)\n    end\n    i = i + 1\n  end\n  return a\nend", "    local\
    \ result = {}\n    if n <= 1 then\n        return result\n    end\n    for i =\
    \ 2, n do\n        if is_prime(i) then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend", "\tlocal primes = {}\n\tfor i\
    \ = 2, n do\n\t\tlocal prime = true\n\t\tfor j = 2, i - 1 do\n\t\t\tif i % j ==\
    \ 0 then\n\t\t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif prime\
    \ then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\treturn primes\nend",
  "    if n<2 then return {} end\n    local nums={}\n    for i=2,n do\n        nums[i]=true\n\
    \    end\n    for i=2,math.sqrt(n) do\n        if nums[i] then\n            for\
    \ j=i*i,n,i do\n                nums[j]=false\n            end\n        end\n\
    \    end\n    local result={}\n    for i=2,n do\n        if nums[i] then\n   \
    \         table.insert(result,i)\n        end\n    end\n    return result\nend\n\
    print(\"count_up_to(5) == {2, 3}\",table.concat(count_up_to(5),\",\")==\"2,3\"\
    )\nprint(\"count_up_to(11) == {2, 3, 5, 7}\",table.concat(count_up_to(11),\",\"\
    )==\"2,3,5,7\")\nprint(\"count_up_to(0) == {}\",table.concat(count_up_to(0),\"\
    ,\")==\"\")\nprint(\"count_up_to(20) == {2, 3, 5, 7, 11, 13, 17, 19}\",table.concat(count_up_to(20),\"\
    ,\")==\"2,3,5,7,11,13,17,19\")\nprint(\"count_up_to(1) == {}\",table.concat(count_up_to(1),\"\
    ,\")==\"\")\nprint(\"count_up_to(18) == {2, 3, 5, 7, 11, 13, 17}\",table.concat(count_up_to(18),\"\
    ,\")==\"2,3,5,7,11,13,17\")\nprint(\"-- END PROBLEM 3 --\")", "    local t = {}\n\
    \    local p = 2\n    while (p < n) do\n        while (n % p == 0) do\n      \
    \      table.insert(t, p)\n            n = n / p\n        end\n        p = p +\
    \ 1\n    end\n    return t\nend", "\tlocal new = {}\n\tlocal c = 0\n\tfor i =\
    \ 2, n do\n\t\tfor j = 2, i do\n\t\t\tif i % j == 0 then\n\t\t\t\tc = c + 1\n\t\
    \t\tend\n\t\tend\n\t\tif c == 1 then\n\t\t\ttable.insert(new, i)\n\t\tend\n\t\t\
    c = 0\n\tend\n\treturn new\nend", "    local result = {}\n    if n < 2 then\n\
    \        return result\n    end\n    local i = 2\n    while i < n do\n       \
    \ if is_prime(i) then\n            table.insert(result, i)\n        end\n    \
    \    i = i + 1\n    end\n    return result\nend", "    local primes = {}\n   \
    \ for i = 2, n do\n        local isPrime = true\n        for j = 2, i-1 do\n \
    \           if i % j == 0 then\n                isPrime = false\n            \
    \    break\n            end\n        end\n        if isPrime then\n          \
    \  table.insert(primes, i)\n        end\n    end\n    return primes\nend", " \
    \   local table = {}\n    for i = 2, n do\n        if is_prime(i) then\n     \
    \       table[#table + 1] = i\n        end\n    end\n    return table\nend", "\t\
    local result = {}\n\tlocal i = 1\n\twhile i < n do\n\t\tif is_prime(i) then\n\t\
    \t\ttable.insert(result, i)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn result\n\
    end", "    local primes = {}\n    local i = 2\n    while i < n do\n        local\
    \ is_prime = true\n        for j = 2, i-1 do\n            if i % j == 0 then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            table.insert(primes, i)\n  \
    \      end\n        i = i + 1\n    end\n    return primes\nend", "  -- your code\
    \ here\n  local list = {}\n  for i = 1, n do\n    if is_prime(i) then\n      table.insert(list,\
    \ i)\n    end\n  end\n  return list\nend", "    local arr = {}\n    for i = 2,\
    \ n - 1 do\n        local isPrime = true\n        for j = 2, i do\n          \
    \  if i % j == 0 and i ~= j then\n                isPrime = false\n          \
    \      break\n            end\n        end\n        if isPrime then\n        \
    \    table.insert(arr, i)\n        end\n    end\n    return arr\nend", "    local\
    \ primes = {}\n    local o = 1\n    for i = 2, n do\n        for j = 2, i do\n\
    \            if i % j == 0 then\n                break\n            end\n    \
    \        if j == i then\n                primes[o] = i\n                o = o\
    \ + 1\n            end\n        end\n    end\n    return primes\nend", "    local\
    \ result = {}\n    for i = 2, n do\n        if is_prime(i) then\n            table.insert(result,\
    \ i)\n        end\n    end\n    return result\nend", "    -- TODO: Implement this\
    \ function\n    -- Hint: You may want to use the is_prime function.\n    -- Hint:\
    \ The # operator can be used on tables.\n    local function  is_prime(n)\n   \
    \     if n == 1 then\n            return false\n        end\n        if n == 2\
    \ then\n            return true\n        end\n        for i = 2, n - 1 do\n  \
    \          if n % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local t = {}\n    for i = 1, n\
    \ do\n        if is_prime(i) then\n            t[#t + 1] = i\n        end\n  \
    \  end\n    return t\nend", "    if n <= 1 then\n        return {}\n    end\n\
    \    local t = {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n    \
    \        table.insert(t, i)\n        end\n    end\n    return t\nend", "    local\
    \ result = {}\n    local i = 2\n    while i < n do\n        local is_prime = true\n\
    \        for j=2,i-1 do\n            if i % j == 0 then\n                is_prime\
    \ = false\n                break\n            end\n        end\n        if is_prime\
    \ then\n            table.insert(result, i)\n        end\n        i = i + 1\n\
    \    end\n    return result\nend", "    local ret = {}\n    for i = 2, n-1 do\n\
    \        if is_prime(i) then\n            table.insert(ret, i)\n        end\n\
    \    end\n    return ret\nend", "    local primes = {}\n    for i = 2, n do\n\
    \        local prime = true\n        for j = 2, i - 1 do\n            if i % j\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    return primes\nend", "\tlocal function is_prime(n)\n\
    \t\tfor i = 2, math.sqrt(n) do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal primes = {}\n\tfor i = 2,\
    \ n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes, i)\n\t\tend\n\tend\n\
    \treturn primes\nend", "    if n <= 1 then\n        return {}\n    end\n    local\
    \ t = {}\n    for i = 2, n do\n        t[i] = true\n    end\n    local i = 2\n\
    \    while i * i <= n do\n        if t[i] then\n            local j = i * i\n\
    \            while j <= n do\n                t[j] = false\n                j\
    \ = j + i\n            end\n        end\n        i = i + 1\n    end\n    local\
    \ t2 = {}\n    for i = 2, n do\n        if t[i] then\n            table.insert(t2,\
    \ i)\n        end\n    end\n    return t2\nend", "  -- fill in your code here\n\
    end", "    local result = {}\n    local number = 2\n    while number < n do\n\
    \        if is_prime(number) then\n            table.insert(result, number)\n\
    \        end\n        number = number + 1\n    end\n    return result\nend", " \
    \   -- YOUR CODE HERE\n    local t = {}\n    if (n < 2) then\n        return t\n\
    \    end\n    for i = 2, n-1 do\n        if (is_prime(i)) then\n            table.insert(t,\
    \ i)\n        end\n    end\n    return t\nend", "\tlocal function is_prime(n)\n\
    \t\tif n <= 1 then\n\t\t\treturn false\n\t\telseif n <= 3 then\n\t\t\treturn true\n\
    \t\telseif n % 2 == 0 or n % 3 == 0 then\n\t\t\treturn false\n\t\tend\n\t\tlocal\
    \ i = 5\n\t\twhile i * i <= n do\n\t\t\tif n % i == 0 or n % (i + 2) == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ti = i + 6\n\t\tend\n\t\treturn true\n\t\
    end\n\tlocal primes = {}\n\tfor i = 1, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(primes,\
    \ i)\n\t\tend\n\tend\n\treturn primes\nend", "    if n < 2 then\n        return\
    \ {}\n    end\n    local result = {}\n    for i = 2, n - 1 do\n        if math.prime(i)\
    \ then\n            table.insert(result, i)\n        end\n    end\n    return\
    \ result\nend", "    assert(n >= 0)\n    local primes = {}\n    for number = 2,\
    \ n do\n        if is_prime(number) then\n            table.insert(primes, number)\n\
    \        end\n    end\n    return primes\nend", "\tif n < 2 then\n\t\treturn {}\n\
    \tend\n\tlocal list = {}\n\tfor i = 2, n do\n\t\tlocal is_prime = true\n\t\tfor\
    \ j = 2, i - 1 do\n\t\t\tif i % j == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\t\
    break\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\ttable.insert(list, i)\n\
    \t\tend\n\tend\n\treturn list\nend", "  if n < 1 then\n    return {}\n  end\n\
    \  local t = {}\n  local i = 2\n  while i < n do\n    local j = 1\n    local is_prime\
    \ = true\n    while is_prime and j < #t do\n      if i % t[j] == 0 then\n    \
    \    is_prime = false\n      end\n      j = j + 1\n    end\n    if is_prime then\n\
    \      t[#t + 1] = i\n    end\n    i = i + 1\n  end\n  return t\nend", "\tlocal\
    \ result = {}\n\tfor i = 2, n do\n\t\tif is_prime(i) then\n\t\t\ttable.insert(result,\
    \ i)\n\t\tend\n\tend\n\treturn result\nend", "  local function is_prime(m)\n \
    \   for i = 2, m - 1 do\n      if m % i == 0 then\n        return false\n    \
    \  end\n    end\n    return true\n  end", "    local result = {}\n    for i =\
    \ 1, n - 1 do\n        if is_prime(i) then\n            table.insert(result, i)\n\
    \        end\n    end\n    return result\nend", "  -- your solution here\nend",
  "    local result = {}\n    for i = 2, n - 1 do\n        if is_prime(i) then\n \
    \           table.insert(result, i)\n        end\n    end\n    return result\n\
    end", "    -- your code goes here\n    return {}\nend", "    return {}\nend",
  "    if n == 0 then\n        return {}\n    end\n    if n == 1 then\n        return\
    \ {}\n    end\n    local tb = {}\n    for i = 2, n do\n        local count = 0\n\
    \        for j = 1, i do\n            if i % j == 0 then\n                count\
    \ = count + 1\n            end\n        end\n        if count == 2 then\n    \
    \        table.insert(tb, i)\n        end\n    end\n    return tb\nend", "   \
    \ local t = {}\n    local i = 2\n    while i < n do\n        if is_prime(i) then\n\
    \            table.insert(t, i)\n        end\n        i = i + 1\n    end\n   \
    \ return t\nend", "    if n < 1 then\n        return {}\n    end\n    local primes\
    \ = {}\n    for i = 2, n do\n        local prime = true\n        for j = 2, i\
    \ - 1 do\n            if i % j == 0 then\n                prime = false\n    \
    \            break\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    return primes\nend",
  "    local primes = {}\n    local i = 2\n    while i < n do\n        if is_prime(i)\
    \ then\n            table.insert(primes, i)\n        end\n        i = i + 1\n\
    \    end\n    return primes\nend", "    local primes = {}\n    local i = 1\n \
    \   while i < n do\n        if is_prime(i) then\n            table.insert(primes,\
    \ i)\n        end\n        i = i + 1\n    end\n    return primes\nend", "\tlocal\
    \ t = {}\n\tlocal i = 1\n\twhile i < n do\n\t\tlocal k = n - i\n\t\tlocal j =\
    \ 1\n\t\twhile j < k do\n\t\t\tlocal x = k - j\n\t\t\tif x % j == 0 then\n\t\t\
    \t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif j == k then\n\t\t\ttable.insert(t,\
    \ k)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend", "\tlocal temp = {}\n\t\
    for i = 2, n do\n\t\ttemp[i] = true\n\tend\n\tfor i = 2, n do\n\t\tif temp[i]\
    \ then\n\t\t\tlocal j = i + i\n\t\t\twhile j <= n do\n\t\t\t\ttemp[j] = false\n\
    \t\t\t\tj = j + i\n\t\t\tend\n\t\tend\n\tend\n\tlocal result = {}\n\tfor i = 2,\
    \ n do\n\t\tif temp[i] then\n\t\t\ttable.insert(result, i)\n\t\tend\n\tend\n\t\
    return result\nend", "\tlocal table = {}\n\tfor i = 2, n do\n\t\tlocal isPrime\
    \ = true\n\t\tfor j = 2, i do\n\t\t\tif i % j == 0 and i ~= j then\n\t\t\t\tisPrime\
    \ = false\n\t\t\tend\n\t\tend\n\t\tif isPrime then\n\t\t\ttable[#table + 1] =\
    \ i\n\t\tend\n\tend\n\treturn table\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
