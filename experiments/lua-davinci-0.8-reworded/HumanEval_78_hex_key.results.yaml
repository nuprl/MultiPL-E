name: HumanEval_78_hex_key
language: lua
results:
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local cnt, dict\
    \ = 0, {}\n  for i=string.byte('0'),string.byte('9') do dict[string.char(i)] =\
    \ 1 end\n  for i=string.byte('A'),string.byte('F') do dict[string.char(i)] = 2\
    \ end\n  for i=1,#num do\n    if dict[string.upper(num:sub(i,i))]==2 then cnt\
    \ = cnt + 1 end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgrwjqbt.lua:35:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmphgrwjqbt.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local hex_key_table\
    \ = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n  local\
    \ decimal_table = {[0]=0,[1]=1,[2]=2,[3]=3,[4]=4,[5]=5,[6]=6,[7]=7,[8]=8,[9]=9,[10]=10,[11]=11,[12]=12,[13]=13,[14]=14,[15]=15}\n\
    \  local hex = {}\n  local decimal = {}\n  local primes = {}\n  local hex_key\
    \ = 0\n  local key = 0\n  local key_len = 0\n  local j = 1\n  local s = 1\n  local\
    \ temp = ''\n  local prime = ''\n  local len = string.len(num)\n  local t1 = table.pack(string.byte(num,1,len))\n\
    \  for i=1,#t1 do\n    hex[i] = string.char(t1[i])\n  end\n  for i=1,#hex do\n\
    \    for j=1,#hex_key_table do\n      if hex[i] == hex_key_table[j] then\n   \
    \     decimal[i] = decimal_table[j]\n      end\n    end\n  end\n  for i=1,#decimal\
    \ do\n    if decimal[i] == 2 or decimal[i] == 3 or decimal[i] == 5 or decimal[i]\
    \ == 7 or decimal[i] == 11 or decimal[i] == 13 then\n      primes[i] = decimal[i]\n\
    \    end\n  end\n  for i=1,#primes do\n    if primes[i] ~= nil then\n      key\
    \ = key + 1\n    end\n  end\n  return key\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1fr9ss6.lua:64:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe1fr9ss6.lua:64: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n\tlocal primes\
    \ = { '2', '3', '5', '7', 'B', 'D' }\n\tlocal count = 0\n\tfor i=1,#num do\n\t\
    \tfor j=1,#primes do\n\t\t\tif primes[j] == num:sub(i,i) then\n\t\t\t\tcount =\
    \ count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n    local primes\
    \ = \"2357BDF\"\n    local sum = 0\n    for ch in num:gmatch(\".\") do\n     \
    \   for n in primes:gmatch(\".\") do\n            if ch == n then\n          \
    \      sum = sum + 1\n            end\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yere0fj.lua:42:\
    \ expected: 6, actual: 7\nstack traceback:\n\t/tmp/tmp2yere0fj.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n\tlocal primes\
    \ = \"2357BDE\"\n\tlocal temp, i, result = 0, 1, 0\n\tif #num == 0 then\n\t\t\
    return 0\n\tend\n\twhile i <= #num do\n\t\tfor j = 1, #primes do\n\t\t\tif num:sub(i,\
    \ i) == primes:sub(j, j) then\n\t\t\t\tresult = result + 1\n\t\t\tend\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjmu70zw.lua:43:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfjmu70zw.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n    return string.gsub(num,\
    \ '[237BD]', '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2utaeapl.lua:29:\
    \ expected: 1, actual: \"A\"\nstack traceback:\n\t/tmp/tmp2utaeapl.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  -- your solution\
    \ goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5qostke.lua:29:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpi5qostke.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n    local primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    local total = 0\n    for i=1,#num do\n\
    \        for j=1,#primes do\n            if num:sub(i,i) == primes[j] then\n \
    \               total = total + 1\n            end\n        end\n    end\n   \
    \ return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  -- body\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6els30n8.lua:29:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp6els30n8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  -- your code\
    \ here\n  local t={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n  local n=0\n  local\
    \ d=string.byte(num,1,#num)\n  local function prime(k)\n    for i=2,k-1 do\n \
    \     if k%i==0 then return false end\n    end\n    return true\n  end\n  for\
    \ i=1,#num do\n    n=n+prime(t[d[i]+1])\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzq2cep4x.lua:34:\
    \ attempt to index a number value (local 'd')\nstack traceback:\n\t/tmp/tmpzq2cep4x.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmpzq2cep4x.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local dict =\
    \ {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for char in num:gmatch'.'\
    \ do\n    for i, v in ipairs(dict) do\n      if char == v then count = count +\
    \ 1 end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n    local res\
    \ = 0\n    for i = 1, string.len(num) do\n        local c = string.sub(num, i,\
    \ i)\n        if c == '2' or c == '3' or c == '5' or c == '7'\n            or\
    \ c == 'B' or c == 'D' then\n            res = res + 1\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local primes\
    \ = {2, 3, 5, 7, 11, 13}\n  local key = 0\n  for digit in num:gmatch('.') do\n\
    \    for _, prime in ipairs(primes) do\n      if digit == tostring(prime) or digit\
    \ == tonumber(prime, 16) then\n        key = key + 1\n      end\n    end\n  end\n\
    \  return key\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6a64bmae.lua:27:\
    \ bad argument #1 to 'tonumber' (string expected, got number)\nstack traceback:\n\
    \t/tmp/tmp6a64bmae.lua:27: in local 'candidate'\n\t/tmp/tmp6a64bmae.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local hexprime\
    \ = {'2','3','5','7','B','D'}\n  local count = 0\n  for i = 1, #num do\n    for\
    \ j = 1, #hexprime do\n      if num:sub(i,i) == hexprime[j] then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  return 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvrpgbo9w.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpvrpgbo9w.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local t = {A=10,\
    \ B=11, C=12, D=13, E=14, F=15}\n  local res = 0\n  for i = 1, #num do\n    local\
    \ s = string.byte(num, i)\n    if s >= 65 then s = t[string.char(s)] end\n   \
    \ if s == 2 or s == 3 or s == 5 or s == 7 or s == 11 or s == 13 then\n      res\
    \ = res + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylsxb6_k.lua:39:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpylsxb6_k.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n    local map\
    \ = {\n        ['2'] = true,\n        ['3'] = true,\n        ['5'] = true,\n \
    \       ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n    }\n \
    \   local count = 0\n    for v in num:gmatch('.') do\n        if map[v] then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local keys =\
    \ {'2', '3', '5', '7', 'B', 'D'}\n  local n = 0\n  for i = 1, #num do\n    for\
    \ j = 1, #keys do\n      if num:sub(i, i) == keys[j] then\n        n = n + 1\n\
    \      end\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = hex_key\n    lu.assertEquals(candidate('AB'),\
    \ 1)\n    lu.assertEquals(candidate('1077E'), 2)\n    lu.assertEquals(candidate('ABED1A33'),\
    \ 4)\n    lu.assertEquals(candidate('2020'), 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'),\
    \ 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'), 12)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n    local chars\
    \ = {A = 10, B = 11, C = 12, D = 13, E = 14, F = 15}\n    local count = 0\n  \
    \  for char in num:gmatch('.') do\n        if chars[char] then\n            char\
    \ = chars[char]\n        end\n        if math.isprime(tonumber(char)) then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
    \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdpatwuo.lua:29:\
    \ attempt to call a nil value (field 'isprime')\nstack traceback:\n\t/tmp/tmpfdpatwuo.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpfdpatwuo.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n-- digits that are\
    \ primes (prime number, or a prime, is a natural number \n-- greater than 1 that\
    \ is not a product of two smaller natural numbers).\n-- Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n-- So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may\
    \ assume the input is always correct or empty string, \n-- and symbols A,B,C,D,E,F\
    \ are always uppercase.\n-- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n\
    -- 2\n-- >>> hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n--\
    \ 6\n-- >>> hex_key('2020')\n-- 2\nlocal function hex_key(num)\n  local string\
    \ = string.gsub(num, 'A', '10')\n  string = string.gsub(string, 'B', '11')\n \
    \ string = string.gsub(string, 'C', '12')\n  string = string.gsub(string, 'D',\
    \ '13')\n  string = string.gsub(string, 'E', '14')\n  string = string.gsub(string,\
    \ 'F', '15')\n  local count = 0\n  local primes = {2, 3, 5, 7, 11, 13}\n  for\
    \ i=1,#string do\n    for j=1,#primes do\n      if tonumber(string:sub(i,i)) ==\
    \ primes[j] then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = hex_key\n    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
    \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
    \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
    \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50h9awsr.lua:44:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp50h9awsr.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
