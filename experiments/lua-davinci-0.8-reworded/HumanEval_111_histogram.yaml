name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a table\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n--\
  \ >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b c a\
  \ b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b'] = 4}\n\
  -- >>> histogram('')\n-- {}\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local histo = {}\n  for c in test:gmatch('%a') do\n    if histo[c]\
    \ then\n      histo[c] = histo[c] + 1\n    else\n      histo[c] = 1\n    end\n\
    \  end\n  return histo\nend", "    -- YOUR CODE HERE\n    --[[\n    local hist={}\n\
    \    local max={}\n    local count={}\n    local maxval=0\n    local newstr=\"\
    \"\n    for t in string.gmatch(test,\"%S+\") do\n        hist[t]=hist[t] and hist[t]+1\
    \ or 1\n        -- table.insert(hist,t)\n        count[t]=count[t] and count[t]+1\
    \ or 1\n        if count[t]>maxval then maxval=count[t] end\n    end\n    for\
    \ k,v in pairs(hist) do\n        if v==maxval then table.insert(max,k) end\n \
    \   end\n    for i,k in ipairs(max) do\n        newstr=newstr..k..\" \"\n    end\n\
    \    return newstr\n    ]]\n    local hist={}\n    local res={}\n    local maxcount=0\n\
    \    for t in string.gmatch(test,\"%S+\") do\n        hist[t]=hist[t] and hist[t]+1\
    \ or 1\n        if hist[t]>maxcount then maxcount=hist[t] end\n    end\n    for\
    \ k,v in pairs(hist) do\n        if v==maxcount then res[k]=v end\n    end\n \
    \   return res\nend", "  local words = split(test)\n  local res = {}\n  for _,\
    \ w in ipairs(words) do\n    if res[w] == nil then\n      res[w] = 1\n    else\n\
    \      res[w] = res[w] + 1\n    end\n  end\n  return res\nend", "  -- Create table\
    \ with each letter\n  local tab = {}\n  for i in string.gmatch(test, '%a') do\n\
    \    tab[i] = (tab[i] or 0) + 1\n  end\n  -- Find max, create a new table and\
    \ add letters with max count\n  local max = -math.huge\n  local ret = {}\n  for\
    \ letter, count in pairs(tab) do\n    if count > max then\n      max = count\n\
    \      ret = {[letter] = count}\n    elseif count == max then\n      ret[letter]\
    \ = count\n    end\n  end\n  return ret\nend", "    local results = {}\n    local\
    \ max = 0\n    local _, _, result, letter = test:find('([a-z]+)')\n    while result\
    \ do\n        results[letter] = (results[letter] or 0) + 1\n        if results[letter]\
    \ > max then\n            max = results[letter]\n        end\n        _, _, result,\
    \ letter = test:find('([a-z]+)', _)\n    end\n    local count = {}\n    for key,\
    \ value in pairs(results) do\n        if value == max then\n            count[key]\
    \ = value\n        end\n    end\n    return count\nend", "    -- Your implementation\
    \ here\n    local counts = {}\n    for i = 1, #test do\n        local letter =\
    \ test:sub(i, i)\n        counts[letter] = (counts[letter] or 0) + 1\n    end\n\
    \    local result = {}\n    local max = 0\n    for key, value in pairs(counts)\
    \ do\n        if value > max then\n            max = value\n            result\
    \ = { [key] = value }\n        elseif value == max then\n            result[key]\
    \ = value\n        end\n    end\n    return result\nend", "  local word = {}\n\
    \  local list = {}\n  local count = {}\n  local check = {}\n  local hist = {}\n\
    \  local j = 1\n  local i = 1\n  for i=1,#test do\n    local ch = string.sub(test,i,i)\n\
    \    word[i] = ch\n  end\n  for i=1,#word do\n    local f = 0\n    for j=1,#list\
    \ do\n      if word[i] == list[j] then\n        f = 1\n      end\n    end\n  \
    \  if f == 0 then\n      list[#list+1] = word[i]\n    end\n  end\n  for i=1,#list\
    \ do\n    count[i] = 0\n  end\n  for i=1,#list do\n    for j=1,#word do\n    \
    \  if list[i] == word[j] then\n        count[i] = count[i] + 1\n      end\n  \
    \  end\n  end\n  for i=1,#count do\n    local f = 0\n    for j=1,#check do\n \
    \     if count[i] == check[j] then\n        f = 1\n      end\n    end\n    if\
    \ f == 0 then\n      check[#check+1] = count[i]\n    end\n  end\n  local max =\
    \ check[1]\n  for i=1,#check do\n    if check[i] > max then\n      max = check[i]\n\
    \    end\n  end\n  for i=1,#count do\n    if count[i] == max then\n      hist[#hist+1]\
    \ = list[i]\n    end\n  end\n  local result = {}\n  for i=1,#hist do\n    result[hist[i]]\
    \ = max\n  end\n  return result\nend", "    local letters = {}\n    for letter\
    \ in test:gmatch('%a') do\n        if letters[letter] then\n            letters[letter]\
    \ = letters[letter] + 1\n        else\n            letters[letter] = 1\n     \
    \   end\n    end\n    local max_letters = {}\n    local max_value = 0\n    for\
    \ letter, value in pairs(letters) do\n        if value > max_value then\n    \
    \        max_letters = {[letter] = value}\n            max_value = value\n   \
    \     elseif value == max_value then\n            max_letters[letter] = value\n\
    \        end\n    end\n    return max_letters\nend", "    -- init letter count\n\
    \    local letter_count = {}\n    for i = string.byte('a'), string.byte('z') do\n\
    \        letter_count[string.char(i)] = 0\n    end", "  local t = {}\n  local\
    \ max = 0\n  for i in string.gmatch(test, \"%a\") do\n    t[i] = (t[i] or 0) +\
    \ 1\n    if t[i] > max then\n      max = t[i]\n    end\n  end\n  local r = {}\n\
    \  for k, v in pairs(t) do\n    if v == max then\n      r[k] = v\n    end\n  end\n\
    \  return r\nend", "  -- iterate over test string\n  -- check the letter and it's\
    \ count\n  -- if its count is greater than current 'most repition' count\n  --\
    \ then set the letter and the count\n  -- if its count is same as current 'most\
    \ repition' count\n  -- then add the letter and its count", "  local result =\
    \ {}\n  local max_count = 1\n  for w in string.gmatch(test, \"%S+\") do\n    if\
    \ result[w] then\n      result[w] = result[w] + 1\n      if result[w] > max_count\
    \ then\n        max_count = result[w]\n      end\n    else\n      result[w] =\
    \ 1\n    end\n  end\n  local result2 = {}\n  for k, v in pairs(result) do\n  \
    \  if v == max_count then\n      result2[k] = v\n    end\n  end\n  return result2\n\
    end", "    local letters = {}\n    local results = {}\n    local histogram = {}\n\
    \    local max = 0\n    for letter in test:gmatch('.') do\n        if not letters[letter]\
    \ then\n            letters[letter] = 1\n        else\n            letters[letter]\
    \ = letters[letter] + 1\n        end\n        if letters[letter] > max then\n\
    \            max = letters[letter]\n        end\n    end\n    for letter, count\
    \ in pairs(letters) do\n        if count == max then\n            table.insert(results,\
    \ letter)\n        end\n    end\n    for _, letter in ipairs(results) do\n   \
    \     histogram[letter] = max\n    end\n    return histogram\nend", "  local letters\
    \ = {}\n  local count = {}\n  local max = 0\n  local result = {}", "    local\
    \ histogram = {}\n    local maxCount = 0\n    local maxLetters = {}\n    for letter\
    \ in test:gmatch('%a') do\n        histogram[letter] = (histogram[letter] or 0)\
    \ + 1\n        if histogram[letter] > maxCount then\n            maxCount = histogram[letter]\n\
    \            maxLetters = {letter}\n        elseif histogram[letter] == maxCount\
    \ then\n            maxLetters[#maxLetters + 1] = letter\n        end\n    end\n\
    \    return maxLetters, maxCount\nend", "    local letters = {}\n    local count_letters\
    \ = {}\n    for letter in test:gmatch('%a') do\n        letters[letter] = 1 +\
    \ (letters[letter] or 0)\n    end\n    local max = 0\n    for letter, count in\
    \ pairs(letters) do\n        if count > max then\n            max = count\n  \
    \      end\n    end\n    for letter, count in pairs(letters) do\n        if count\
    \ == max then\n            count_letters[letter] = count\n        end\n    end\n\
    \    return count_letters\nend", "    local chars = {}\n    local count = 0\n\
    \    local prevChar = ' '\n    local result = {}\n    for char in test:gmatch('%a')\
    \ do\n        if char == prevChar then\n            count = count + 1\n      \
    \  else\n            chars[prevChar] = count\n            count = 1\n        end\n\
    \        prevChar = char\n    end\n    chars[prevChar] = count\n    for char,count\
    \ in pairs(chars) do\n        if result[count] then\n            result[count]\
    \ = result[count] .. ' ' .. char\n        else\n            result[count] = char\n\
    \        end\n    end\n    return result\nend", "  local hist = {}\n  for str\
    \ in string.gmatch(test, '%S+') do\n    hist[str] = (hist[str] or 0) + 1\n  end\n\
    \  return hist\nend", "  local t = {}\n  local maxt = 0\n  local maxl = {}\n \
    \ for letter in test:gmatch(\"%a\") do\n    t[letter] = (t[letter] or 0) + 1\n\
    \    if t[letter] > maxt then\n      maxt = t[letter]\n      maxl = {letter}\n\
    \    elseif t[letter] == maxt then\n      maxl[#maxl+1] = letter\n    end\n  end\n\
    \  for _, l in ipairs(maxl) do\n    t[l] = maxt\n  end\n  return t\nend", "  \
    \  local t = {}\n    local max_occ = 0\n    local max_t = {}\n    for char in\
    \ test:gmatch(\"%a\") do\n        local count = t[char] or 0\n        count =\
    \ count + 1\n        t[char] = count\n        if count == max_occ then\n     \
    \       max_t[char] = count\n        elseif count > max_occ then\n           \
    \ max_occ = count\n            max_t = {[char] = count}\n        end\n    end\n\
    \    return max_t\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
