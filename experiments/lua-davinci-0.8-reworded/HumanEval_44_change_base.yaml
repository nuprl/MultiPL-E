name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local quotient = x // base\n    local remainder = x % base\n  \
    \  if x < base then\n        return tostring(x)\n    else\n        return change_base(quotient,\
    \ base) .. tostring(remainder)\n    end\nend", "    local res = ''\n    local\
    \ mod\n    while x ~= 0 do\n        mod = x % base\n        x = math.floor(x /\
    \ base)\n        res = tostring(mod) .. res\n    end\n    return res\nend", " \
    \ local stack = { }\n  while x ~= 0 do\n    local d = x % base\n    x = math.floor(x\
    \ / base)\n    table.insert(stack, d)\n  end\n  return table.concat(stack)\nend",
  "    assert(x > 0 and base > 1 and base < 10)\n    local ret = ''\n    while x >\
    \ 0 do\n        ret = tostring(x % base) .. ret\n        x = math.floor(x / base)\n\
    \    end\n    return ret\nend", "    if (base <= 0) then\n        return \"invalid\
    \ base\"\n    end\n    local num_rep = ''\n    while (x > 0) do\n        local\
    \ mod = math.fmod(x, base)\n        num_rep = num_rep .. tostring(mod)\n     \
    \   x = math.floor(x / base)\n    end\n    return num_rep\nend", "    local xs\
    \ = \"\"\n    while x > 0 do\n        xs = (x % base) .. xs\n        x = math.floor(x\
    \ / base)\n    end\n    return xs\nend", "  if x == 0 then\n    return '0'\n \
    \ end\n  if base < 2 or base > 10 then\n    error('Base number must be in range\
    \ of 2 to 10')\n  end\n  local out = ''\n  while x > 0 do\n    local y = x % base\n\
    \    out = tostring(y) .. out\n    x = (x - y) / base\n  end\n  return out\nend",
  "    local s = \"\"\n    while x > 0 do\n        local y = x % base\n        x =\
    \ math.floor(x / base)\n        s = tostring(y) .. s\n    end\n    return s\n\
    end", "    local quotient = x\n    local remainder\n    local result = ''\n  \
    \  while quotient > 0 do\n        remainder = quotient % base\n        quotient\
    \ = math.floor(quotient / base)\n        result = tostring(remainder) .. result\n\
    \    end\n    return result\nend", "    local result = ''\n    local t = {}\n\
    \    local letter = {}\n    for i = 0, 9 do\n        table.insert(letter, tostring(i))\n\
    \    end\n    repeat\n        local r = x % base\n        x = math.floor(x / base)\n\
    \        table.insert(t, letter[r + 1])\n    until x == 0\n    for i = #t, 1,\
    \ -1 do\n        result = result .. t[i]\n    end\n    return result\nend", " \
    \ if x < 0 then\n    return \"-\" .. change_base(-x, base)\n  end\n  if x == 0\
    \ then\n    return \"0\"\n  end\n  local res = \"\"\n  while x > 0 do\n    local\
    \ r = x % base\n    res = string.char(b36c[r] or string.byte(\"0\") + r) .. res\n\
    \    x = (x - r) / base\n  end\n  return res\nend", "  -- Your code\nend", " \
    \ local out = ''\n  while x > 0 do\n    out = out .. tostring(x % base)\n    x\
    \ = math.floor(x / base)\n  end\n  return out\nend", "  local res = {}\n  local\
    \ function f(x)\n    if x < base then\n      table.insert(res, tostring(x))\n\
    \    else\n      f(math.floor(x / base))\n      table.insert(res, tostring(x %\
    \ base))\n    end\n  end\n  f(x)\n  return table.concat(res)\nend", "  if x ==\
    \ 0 then\n    return '0'\n  end\n  local res = ''\n  while x > 0 do\n    res =\
    \ tostring(x % base) .. res\n    x = math.floor(x / base)\n  end\n  return res\n\
    end", "  local t = {}\n  repeat\n    local r = x % base\n    x = (x - r) / base\n\
    \    table.insert(t, r)\n  until x == 0\n  return table.concat(t)\nend", "  local\
    \ result = ''\n  while x > 0 do\n    local d = x % base\n    x = math.floor(x\
    \ / base)\n    result = tostring(d) .. result\n  end\n  return result\nend", " \
    \ local result = {}\n  while x > 0 do\n    table.insert(result, 1, x % base)\n\
    \    x = math.floor(x / base)\n  end\n  return tostring(table.concat(result))\n\
    end", "  local str = \"\"\n  while x > 0 do\n    local mod = x % base\n    str\
    \ = str .. tostring(mod)\n    x = math.floor(x / base)\n  end\n  return str\n\
    end", "  local ret = {}\n  local b = 2\n  while b <= base do\n    if x >= b then\n\
    \      ret[#ret+1] = 1\n      x = x - b\n    else\n      ret[#ret+1] = 0\n   \
    \ end\n    b = b * 2\n  end\n  return table.concat(ret)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
