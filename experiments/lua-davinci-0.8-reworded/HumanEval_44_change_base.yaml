name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local quotient = x // base\n    local remainder = x % base\n  \
    \  if x < base then\n        return tostring(x)\n    else\n        return change_base(quotient,\
    \ base) .. tostring(remainder)\n    end\nend", "    local res = ''\n    local\
    \ mod\n    while x ~= 0 do\n        mod = x % base\n        x = math.floor(x /\
    \ base)\n        res = tostring(mod) .. res\n    end\n    return res\nend", " \
    \ local stack = { }\n  while x ~= 0 do\n    local d = x % base\n    x = math.floor(x\
    \ / base)\n    table.insert(stack, d)\n  end\n  return table.concat(stack)\nend",
  "    assert(x > 0 and base > 1 and base < 10)\n    local ret = ''\n    while x >\
    \ 0 do\n        ret = tostring(x % base) .. ret\n        x = math.floor(x / base)\n\
    \    end\n    return ret\nend", "    if (base <= 0) then\n        return \"invalid\
    \ base\"\n    end\n    local num_rep = ''\n    while (x > 0) do\n        local\
    \ mod = math.fmod(x, base)\n        num_rep = num_rep .. tostring(mod)\n     \
    \   x = math.floor(x / base)\n    end\n    return num_rep\nend", "    local xs\
    \ = \"\"\n    while x > 0 do\n        xs = (x % base) .. xs\n        x = math.floor(x\
    \ / base)\n    end\n    return xs\nend", "  if x == 0 then\n    return '0'\n \
    \ end\n  if base < 2 or base > 10 then\n    error('Base number must be in range\
    \ of 2 to 10')\n  end\n  local out = ''\n  while x > 0 do\n    local y = x % base\n\
    \    out = tostring(y) .. out\n    x = (x - y) / base\n  end\n  return out\nend",
  "    local s = \"\"\n    while x > 0 do\n        local y = x % base\n        x =\
    \ math.floor(x / base)\n        s = tostring(y) .. s\n    end\n    return s\n\
    end", "    local quotient = x\n    local remainder\n    local result = ''\n  \
    \  while quotient > 0 do\n        remainder = quotient % base\n        quotient\
    \ = math.floor(quotient / base)\n        result = tostring(remainder) .. result\n\
    \    end\n    return result\nend", "    local result = ''\n    local t = {}\n\
    \    local letter = {}\n    for i = 0, 9 do\n        table.insert(letter, tostring(i))\n\
    \    end\n    repeat\n        local r = x % base\n        x = math.floor(x / base)\n\
    \        table.insert(t, letter[r + 1])\n    until x == 0\n    for i = #t, 1,\
    \ -1 do\n        result = result .. t[i]\n    end\n    return result\nend", " \
    \ if x < 0 then\n    return \"-\" .. change_base(-x, base)\n  end\n  if x == 0\
    \ then\n    return \"0\"\n  end\n  local res = \"\"\n  while x > 0 do\n    local\
    \ r = x % base\n    res = string.char(b36c[r] or string.byte(\"0\") + r) .. res\n\
    \    x = (x - r) / base\n  end\n  return res\nend", "  -- Your code\nend", " \
    \ local out = ''\n  while x > 0 do\n    out = out .. tostring(x % base)\n    x\
    \ = math.floor(x / base)\n  end\n  return out\nend", "  local res = {}\n  local\
    \ function f(x)\n    if x < base then\n      table.insert(res, tostring(x))\n\
    \    else\n      f(math.floor(x / base))\n      table.insert(res, tostring(x %\
    \ base))\n    end\n  end\n  f(x)\n  return table.concat(res)\nend", "  if x ==\
    \ 0 then\n    return '0'\n  end\n  local res = ''\n  while x > 0 do\n    res =\
    \ tostring(x % base) .. res\n    x = math.floor(x / base)\n  end\n  return res\n\
    end", "  local t = {}\n  repeat\n    local r = x % base\n    x = (x - r) / base\n\
    \    table.insert(t, r)\n  until x == 0\n  return table.concat(t)\nend", "  local\
    \ result = ''\n  while x > 0 do\n    local d = x % base\n    x = math.floor(x\
    \ / base)\n    result = tostring(d) .. result\n  end\n  return result\nend", " \
    \ local result = {}\n  while x > 0 do\n    table.insert(result, 1, x % base)\n\
    \    x = math.floor(x / base)\n  end\n  return tostring(table.concat(result))\n\
    end", "  local str = \"\"\n  while x > 0 do\n    local mod = x % base\n    str\
    \ = str .. tostring(mod)\n    x = math.floor(x / base)\n  end\n  return str\n\
    end", "  local ret = {}\n  local b = 2\n  while b <= base do\n    if x >= b then\n\
    \      ret[#ret+1] = 1\n      x = x - b\n    else\n      ret[#ret+1] = 0\n   \
    \ end\n    b = b * 2\n  end\n  return table.concat(ret)\nend", "  local result\
    \ = ''\n  local remainder = 0\n  local quotient = x\n  local i = 0\n  local k\
    \ = 0\n  local temp = 0\n  local x = 0\n  local a = {'0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n  while quotient > 0\
    \ do\n    k = quotient % base\n    quotient = math.floor(quotient / base)\n  \
    \  result = result .. a[k + 1]\n  end\n  return string.reverse(result)\nend",
  "    local t = {}\n    local result = ''\n    local remainder\n    local remainder_base",
  "  assert(x >= 0 and base >= 0)\n  local output = \"\"\n  local rest\n  repeat\n\
    \    rest = x % base\n    x = (x - rest) / base\n    output = output .. tostring(rest)\n\
    \  until x == 0\n  return string.reverse(output)\nend", "    local s = ''\n  \
    \  while x > 0 do\n        local n = x % base\n        x = floor(x / base)\n \
    \       s = tostring(n) .. s\n    end\n    return s\nend", "    local t = {}\n\
    \    repeat\n        local d = x % base\n        x = (x - d) / base\n        table.insert(t,\
    \ 1, d)\n    until x == 0\n    return table.concat(t)\nend", "    local converted\
    \ = ''\n    while x ~= 0 do\n        converted = string.format('%d', (x % base))\
    \ .. converted\n        x = math.floor(x / base)\n    end\n    return converted\n\
    end", "  local str = ''\n  local m = x % base\n  if x > base then\n    str = change_base(x\
    \ // base, base)\n  end\n  return str .. tostring(m)\nend", "  local ret = ''\n\
    \  while x > 0 do\n    ret = tostring(x % base) .. ret\n    x = math.floor(x /\
    \ base)\n  end\n  return ret\nend", "  local ret = ''\n  if x < 0 then\n    ret\
    \ = '-'\n    x = -x\n  end\n  while x > 0 do\n    local n = x % base\n    ret\
    \ = string.char(n + 48) .. ret -- 48 is the ascii code of '0'\n    x = (x - n)\
    \ / base\n  end\n  return ret\nend", "    local s = {}\n    while x > 0 do\n \
    \       x, m = divmod(x, base)\n        table.insert(s, m)\n    end\n    table.reverse(s)\n\
    \    return table.concat(s)\nend", "\tlocal x_str = tostring(x)\n\tif (type(x)\
    \ ~= 'number') or (type(base) ~= 'number') then\n\t\terror('Usage: change_base(x,\
    \ base)')\n\tend\n\tlocal num_list = {}\n\tlocal i = 1\n\twhile (x > 0) do\n\t\
    \tnum_list[i] = x % base\n\t\tx = math.floor(x / base)\n\t\ti = i + 1\n\tend\n\
    \tlocal str = ''\n\tfor i = #num_list, 1, -1 do\n\t\tstr = str .. tostring(num_list[i])\n\
    \tend\n\treturn str\nend", "  if x < base then\n    return tostring(x)\n  else\n\
    \    return change_base(math.floor(x / base), base) .. tostring(x % base)\n  end\n\
    end", "    local r = {x % base}\n    for i = x // base, base - 1 do\n        table.insert(r,\
    \ 1, i % base)\n    end\n    return table.concat(r)\nend", "    local str = ''\n\
    \    repeat\n        local mod = x % base\n        str = num2char(mod) .. str\n\
    \        x = (x - mod) / base\n    until x == 0\n    return str\nend", "    local\
    \ r = \"\"\n    local d = tonumber(x)\n    while d > 0 do\n        local m = d\
    \ % base\n        r = tostring(m) .. r\n        d = math.floor(d / base)\n   \
    \ end\n    return r\nend", "    -- assert base is a positive integer number\n\
    \    assert(base > 0 and base % 1 == 0, \"base must be a positive integer\")\n\
    \    local sign = \"\"\n    if x < 0 then\n        sign = \"-\"\n        x = -x\n\
    \    end\n    local q, r, s\n    q = x // base\n    r = x % base\n    s = r\n\
    \    while q > 0 do\n        r = q % base\n        q = q // base\n        s =\
    \ r .. s\n    end\n    return sign .. s\nend", "    local digits = {}\n    local\
    \ result = ''\n    repeat\n        table.insert(digits, x % base)\n        x =\
    \ math.floor(x / base)\n    until x == 0\n    for i = 1, #digits do\n        result\
    \ = result .. digits[#digits + 1 - i]\n    end\n    return result\nend", "  if\
    \ x == 0 then\n    return \"0\"\n  end\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  local y = \"\"\n  while x > 0 do\n    y = tostring(x % base) .. y\n\
    \    x = math.floor(x / base)\n  end\n  return y\nend", "    local res = \"\"\n\
    \    repeat\n        local r = x % base\n        res = res .. tostring(r)\n  \
    \      x = (x - r) / base\n    until x == 0\n    return res\nend", "  local t\
    \ = {}\n  while x > 0 do\n    local m = x % base\n    x = (x - m) / base\n   \
    \ insert(t, m)\n  end\n  local i = #t\n  while i > 0 do\n    i = i - 1\n    insert(t,\
    \ 1, t[i + 1])\n    remove(t, i + 2)\n  end\n  return concat(t)\nend", "  local\
    \ res = ''\n  while x > 0 do\n    local r = x % base\n    res = tostring(r) ..\
    \ res\n    x = math.floor(x / base)\n  end\n  return res\nend", "  local t = {}\n\
    \  repeat\n    local d = x % base\n    x = (x - d) / base\n    t[#t+1] = tostring(d)\n\
    \  until x == 0\n  local s = table.concat(t)\n  return s:reverse()\nend", "  \
    \  local quotient = x\n    local remainder = 0\n    local result = ''\n    while\
    \ quotient > 0 do\n        remainder = quotient % base\n        quotient = math.floor(quotient\
    \ / base)\n        result = string.format('%s%d', result, remainder)\n    end\n\
    \    return result\nend", "    assert(base > 1 and base < 10)\n    local r = ''\n\
    \    while x > 0 do\n        r = r .. tostring(x % base)\n        x = math.floor(x\
    \ / base)\n    end\n    return r\nend", "    local res = {}\n    while x > 0 do\n\
    \        local mod = x % base\n        x = math.floor(x / base)\n        table.insert(res,\
    \ mod)\n    end\n    local out = ''\n    for i = #res, 1, -1 do\n        out =\
    \ out .. res[i]\n    end\n    return out\nend", "    if x == 0 then\n        return\
    \ \"0\"\n    end\n    local str_list = {}\n    while x > 0 do\n        local remainder\
    \ = x % base\n        x = math.floor(x / base)\n        table.insert(str_list,\
    \ remainder)\n    end\n    local str = table.concat(str_list)\n    return str\n\
    end", "    local y = ''\n    while x > 0 do\n        y = tostring(x % base) ..\
    \ y\n        x = math.floor(x / base)\n    end\n    return y\nend", "  local a\
    \ = {}\n  while x > 0 do\n    table.insert(a, 1, x % base)\n    x = math.floor(x\
    \ / base)\n  end\n  return table.concat(a)\nend", "    -- print(x, base)\n   \
    \ assert(type(x) == 'number')\n    assert(type(base) == 'number')\n    assert(math.floor(x)\
    \ == x)\n    assert(math.floor(base) == base)\n    assert(x >= 0)\n    assert(base\
    \ > 0)\n    assert(base < 10)", "    local base_num = \"\"\n    local digit =\
    \ 0\n    while x > 0 do\n        digit = x % base\n        x = math.floor(x /\
    \ base)\n        base_num = tostring(digit) .. base_num\n    end\n    return base_num\n\
    end", "  if x < 0 then return nil end\n  local str, y = \"\", x\n  while y > 0\
    \ do\n    local d = y % base\n    str = d .. str\n    y = (y - d) / base\n  end\n\
    \  return str\nend", "\t-- initialization\n\tlocal ret = {}", "  local h  = '0123456789ABCDEF'\n\
    \  local s  = ''\n  while x > 0 do\n    local n = x % base\n    s = h:sub(n+1,\
    \ n+1) .. s\n    x = floor(x / base)\n  end\n  return s\nend", "    if base >\
    \ 10 then\n        error('base must be less than 10')\n    end\n    local t =\
    \ {}\n    while x > 0 do\n        table.insert(t, x % base)\n        x = math.floor(x\
    \ / base)\n    end\n    return table.concat(t, '')\nend", "  assert(x >= 0 and\
    \ base >= 2 and base <= 9)\n  local str = ''\n  while x > 0 do\n    local r =\
    \ x % base\n    str = str .. tostring(r)\n    x = math.floor(x / base)\n  end\n\
    \  return str\nend", "\tlocal res = \"\"\n\trepeat\n\t\tlocal mod = x % base\n\
    \t\tres = tostring(mod) .. res\n\t\tx = (x - mod) / base\n\tuntil x == 0\n\treturn\
    \ res\nend", "  if base == 10 then\n    return tostring(x)\n  end\n  local r =\
    \ ''\n  while x > 0 do\n    local m = x % base\n    r = tostring(m) .. r\n   \
    \ x = (x - m) / base\n  end\n  return r\nend", "  if base == 10 then\n    return\
    \ tostring(x)\n  end\n  local ret = {}\n  local r\n  while x > 0 do\n    r = x\
    \ % base\n    x = math.floor(x / base)\n    table.insert(ret, tostring(r))\n \
    \ end\n  return table.concat(ret, '')\nend", "    local nums = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9'}\n    if base == 10 then\n        return tostring(x)\n\
    \    end\n    local ret = {}\n    while x > 0 do\n        local r = x % base\n\
    \        table.insert(ret, 1, nums[r + 1])\n        x = math.floor(x / base)\n\
    \    end\n    return table.concat(ret)\nend", "    local result = ''\n    while\
    \ x > 0 do\n        result = tostring(x % base) .. result\n        x = math.floor(x\
    \ / base)\n    end\n    return result\nend", "\tlocal y = ''\n\twhile x > 0 do\n\
    \t\tlocal r = x % base\n\t\tx = math.floor(x / base)\n\t\ty = r .. y\n\tend\n\t\
    return y\nend", "    local digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n \
    \   local result = {}\n    repeat\n        local i = x % base + 1\n        table.insert(result,\
    \ 1, digits:sub(i, i))\n        x = math.floor(x / base)\n    until x == 0\n \
    \   return table.concat(result)\nend", "    local r = {}\n    local y = x\n  \
    \  while y > 0 do\n        local d = math.fmod(y, base)\n        y = math.floor(y\
    \ / base)\n        table.insert(r, 1, d)\n    end\n    return table.concat(r)\n\
    end", "  local res = {}\n  while x > 0 do\n    local v = x % base\n    table.insert(res,\
    \ v)\n    x = math.floor(x / base)\n  end\n  return table.concat(res, '')\nend",
  "    local res = \"\"\n    while x > 0 do\n        local digit = x % base\n    \
    \    res = res .. string.format(\"%d\", digit)\n        x = math.floor(x / base)\n\
    \    end\n    return res\nend", "\tlocal curr = x\n\tlocal r = \"\"\n\twhile curr\
    \ > 0 do\n\t\tr = tostring(curr % base) .. r\n\t\tcurr = math.floor(curr / base)\n\
    \tend\n\treturn r\nend", "  local n = 0\n  while x > 0 do\n    n = n + 1\n   \
    \ local d = x % base\n    x = (x - d) / base\n    local s = tostring(d)\n    if\
    \ base > 10 then\n      s = string.char(string.byte('A') + d - 10)\n    end\n\
    \    xs[n] = s\n  end\n  return table.concat(xs, '', 1, n)\nend", "    assert(x\
    \ >= 0 and base >= 2 and base <= 10)\n    local res = ''\n    while x > 0 do\n\
    \        local r = x % base\n        res = string.char(string.byte('0') + r) ..\
    \ res\n        x = (x - r) / base\n    end\n    return res\nend", "    if base\
    \ > 10 then return nil end\n    local result = ''\n    while x > 0 do\n      \
    \  local r = x % base\n        x = floor(x / base)\n        result = string.char(r\
    \ + 48) .. result\n    end\n    return result\nend", "    if x < 0 then\n    \
    \    return '-' .. change_base(-x, base)\n    end\n    if x == 0 then\n      \
    \  return '0'\n    end\n    local s = ''\n    while x > 0 do\n        local rem\
    \ = x % base\n        s = s .. tostring(rem)\n        x = math.floor(x / base)\n\
    \    end\n    return s:reverse()\nend", "  local s = ''\n  while x > 0 do\n  \
    \  local d = x % base\n    s = tostring(d) .. s\n    x = math.floor(x / base)\n\
    \  end\n  return s\nend", "    local remainders = {}\n    while x > 0 do\n   \
    \     table.insert(remainders, x % base)\n        x = math.floor(x / base)\n \
    \   end\n    local ret = \"\"\n    for i=table.getn(remainders), 1, -1 do\n  \
    \      ret = ret .. remainders[i]\n    end\n    return ret\nend", "    local ret\
    \ = \"\"\n    if x == 0 then return \"0\" end\n    while x > 0 do\n        local\
    \ m = x % base\n        x = (x - m) / base\n        ret = ret .. tostring(m)\n\
    \    end\n    return string.reverse(ret)\nend", "\tlocal s = ''\n\tlocal r = x\n\
    \twhile r > 0 do\n\t\ts = s .. tostring(r % base)\n\t\tr = math.floor(r / base)\n\
    \tend\n\treturn string.reverse(s)\nend", "    local result = ''\n    repeat\n\
    \        result = tostring(x % base) .. result\n        x = math.floor(x / base)\n\
    \    until x == 0\n    return result\nend", "    local s = \"\"\n    repeat\n\
    \        local m = x % base\n        s = s .. m\n        x = (x - m) / base\n\
    \    until x == 0\n    return s\nend", "    local result = ''\n    while x > 0\
    \ do\n        local r = x % base\n        result = r .. result\n        x = math.floor(x\
    \ / base)\n    end\n    return result\nend", "  local s = ''\n  while x ~= 0 do\n\
    \    local r = x % base\n    x = (x - r) / base\n    s = s .. tostring(r)\n  end\n\
    \  return s\nend", "    if base < 10 then\n        return x\n    end\n    local\
    \ result = ''\n    local is_negative = x < 0\n    x = math.abs(x)\n    local whole,\
    \ fraction = math.modf(x)\n    for i = 1, 10 do\n        local digit = math.fmod(whole,\
    \ base)\n        whole = math.floor(whole / base)\n        result = num_to_alpha(digit)\
    \ .. result\n        if whole == 0 then\n            break\n        end\n    end\n\
    \    if is_negative then\n        result = '-' .. result\n    end\n    if fraction\
    \ ~= 0 then\n        result = result .. '.'\n        for i = 1, 10 do\n      \
    \      local digit = math.fmod(fraction, base)\n            fraction = math.floor(fraction\
    \ / base)\n            result = result .. num_to_alpha(digit)\n            if\
    \ fraction == 0 then\n                break\n            end\n        end\n  \
    \  end\n    return result\nend", "    local digits = {}\n    local r", "  local\
    \ i, s = 0, \"\"\n  while x > 0 do\n    s = s .. x % base\n    x = math.floor(x\
    \ / base)\n  end\n  return s\nend", "    local res = \"\"\n    local x = x\n \
    \   while x > 0 do\n        local digit = x % base\n        x = math.floor(x /\
    \ base)\n        res = tostring(digit) .. res\n    end\n    return res\nend",
  "    local i, s, d\n    for i, d in ipairs({'0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}) do\n        if x < base then\n    \
    \        s = d\n            break\n        else\n            s = change_base(x\
    \ // base, base) .. d\n        end\n    end\n    return s\nend", "\tassert(base\
    \ > 1 and base < 10)\n\tlocal result = \"\"\n\tlocal r = 0\n\tlocal rest = 0\n\
    \twhile x > 0 do\n\t\tr = x % base\n\t\trest = x - r\n\t\tx = rest / base\n\t\t\
    result = r .. result\n\tend\n\treturn result\nend", "  local s = \"\"\n  while\
    \ x > 0 do\n    local remain = x % base\n    x = math.floor(x / base)\n    s =\
    \ string.format(\"%s%d\", remain, s)\n  end\n  return s\nend", "  local digits\
    \ = {}\n  repeat\n    local r = x % base\n    table.insert(digits, r)\n    x =\
    \ math.floor(x / base)\n  until x == 0\n  return table.concat(digits, '')\nend",
  "    local result = ''\n    while x > 0 do\n        local d = x % base\n       \
    \ x = math.floor(x / base)\n        result = tostring(d) .. result\n    end\n\
    \    return result\nend", "    if base == 10 then\n        return tostring(x)\n\
    \    end\n    -- if base is greater than 10, need to use 'A'-'Z' as digits.\n\
    \    local digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if x < base\
    \ then\n        return digits:sub(x+1, x+1)\n    end\n    local output_table =\
    \ {}\n    local q = x\n    local r = 0\n    while q >= base do\n        q, r =\
    \ math.floor(q/base), q%base\n        table.insert(output_table, 1, digits:sub(r+1,\
    \ r+1))\n    end\n    table.insert(output_table, 1, digits:sub(q+1, q+1))\n  \
    \  return table.concat(output_table)\nend", "\tlocal result = ''\n\trepeat\n\t\
    \tlocal digit = x % base\n\t\tresult = result .. tostring(digit)\n\t\tx = math.floor(x\
    \ / base)\n\tuntil x == 0\n\treturn result\nend", "  local n = tostring(x)\n \
    \ local digits = {}\n  local first = true\n  for w in n:gmatch(\".\") do\n   \
    \ local d = tonumber(w)\n    if first then\n      first = false\n    else\n  \
    \    d = d + 10\n    end\n    local m = math.floor(d / base)\n    local r = d\
    \ % base\n    if m > 0 then\n      if first then\n        digits[#digits + 1]\
    \ = m\n      else\n        digits[#digits] = digits[#digits] + m\n      end\n\
    \    end\n    if not first or r > 0 then\n      digits[#digits + 1] = r\n    end\n\
    \  end\n  return table.concat(digits)\nend", "  assert(base <= 10)\n  local t\
    \ = {}\n  while x > 0 do\n    table.insert(t, 1, string.char(48 + x % base))\n\
    \    x = math.floor(x / base)\n  end\n  if #t == 0 then t[1] = '0' end\n  return\
    \ table.concat(t)\nend", "    local result = \"\"\n    while x > 0 do\n      \
    \  local r = x % base\n        result = tostring(r) .. result\n        x = (x\
    \ - r) / base\n    end\n    return result\nend", "    local result = ''\n    repeat\n\
    \        local mod = x % base\n        x = (x - mod) / base\n        result =\
    \ string.char(mod + 48) .. result\n    until x == 0\n    return result\nend",
  "    local nums = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n    local\
    \ result = {}\n    while x > 0 do\n        local r = x % base\n        table.insert(result,\
    \ 1, nums[r + 1])\n        x = (x - r) / base\n    end\n    return table.concat(result)\n\
    end", "    local remain = x % base\n    local quotient = (x - remain) / base\n\
    \    if quotient == 0 then\n        return tostring(remain)\n    else\n      \
    \  return change_base(quotient, base) .. tostring(remain)\n    end\nend", "  local\
    \ alphabet = '0123456789'\n  local div, mod = math.modf(x / base)\n  if div ==\
    \ 0 then\n    return string.sub(alphabet, x + 1, x + 1)\n  else\n    return change_base(div,\
    \ base) .. string.sub(alphabet, mod * base + 1, mod * base + 1)\n  end\nend",
  "  local function inner_change_base(x, base)\n    if x < base then\n      return\
    \ tostring(x)\n    else\n      return inner_change_base(x // base, base) .. tostring(x\
    \ % base)\n    end\n  end\n  return inner_change_base(x, base)\nend", "  local\
    \ s = \"\"\n  repeat\n    local m = x % base\n    s = tostring(m) .. s\n    x\
    \ = math.floor(x / base)\n  until x == 0\n  return s\nend", "\tif base > 10 then\
    \ return \"invalid base\" end\n\tif x < base then return string.char(x + string.byte('0'))\
    \ end\n\tlocal lsb = x % base\n\tlocal x = math.floor(x / base)\n\treturn change_base(x,\
    \ base) .. string.char(lsb + string.byte('0'))\nend", "    local r = ''\n    local\
    \ c = x % base\n    r = r .. tostring(c)\n    x = math.floor(x / base)\n    while\
    \ x > 0 do\n        c = x % base\n        r = tostring(c) .. r\n        x = math.floor(x\
    \ / base)\n    end\n    return r\nend", "    local result = ''\n    local base_str\
    \ = ''\n    local remainder\n    local i = 1\n    while x > 0 do\n        remainder\
    \ = x % base\n        x = (x - remainder) / base\n        result = string.format('%s%s',\
    \ remainder, result)\n    end\n    return result\nend", "\tlocal i = 1\n\tlocal\
    \ str = ''\n\twhile x > 0 do\n\t\tstr = (x % base) .. str\n\t\tx = floor(x / base)\n\
    \t\ti = i + 1\n\tend\n\treturn str\nend", "\tlocal remain = x\n\tlocal result\
    \ = {}\n\twhile remain > 0 do\n\t\tlocal remainder = remain % base\n\t\tremain\
    \ = (remain - remainder) / base\n\t\ttable.insert(result, 1, tostring(remainder))\n\
    \tend\n\treturn table.concat(result)\nend", "  local ds = {}\n  repeat\n    local\
    \ d = x % base\n    x = (x - d) / base\n    table.insert(ds, 1, d)\n  until x\
    \ == 0\n  return table.concat(ds)\nend", "    x = tonumber(x)\n    base = tonumber(base)\n\
    \    local r = ''\n    while x > 0 do\n        local m = x % base\n        r =\
    \ tostring(m) .. r\n        x = (x - m) / base\n    end\n    return r\nend", " \
    \   if x < base then\n        return tostring(x)\n    else\n        return change_base(math.floor(x\
    \ / base), base) .. tostring(x % base)\n    end\nend", "    local base_str = \"\
    \"\n    while x > 0 do\n        base_str = string.char(string.byte('0') + x %\
    \ base) .. base_str\n        x = math.floor(x / base)\n    end\n    return base_str\n\
    end", "  local x_string = ''\n  while x > 0 do\n    local q = math.floor(x / base)\n\
    \    local r = x % base\n    x_string = tostring(r) .. x_string\n    x = q\n \
    \ end\n  return x_string\nend", "    assert(x > 0, \"x must be greater than 0\"\
    )\n    assert(base > 1, \"base must be greater than 1\")\n    local str = \"\"\
    \n    while x > 0 do\n        local mod = x % base\n        str = tostring(mod)\
    \ .. str\n        x = math.floor(x / base)\n    end\n    return str\nend", " \
    \ local res = ''\n  while x ~= 0 do\n    local rem = x % base\n    res = tostring(rem)\
    \ .. res\n    x = math.floor(x / base)\n  end\n  return res\nend", "    local\
    \ ret = ''\n    while x > 0 do\n        local rem = x % base\n        ret = tostring(rem)\
    \ .. ret\n        x = math.floor(x / base)\n    end\n    return ret\nend", " \
    \   local n, k = 1, {}\n    while x > 0 do\n        local m = x % base\n     \
    \   k[n] = tostring(m)\n        x = math.floor(x / base)\n        n = n + 1\n\
    \    end\n    return table.concat(k):reverse()\nend", "    local tmp = \"\"\n\
    \    while x > 0 do\n        tmp = tostring(x % base) .. tmp\n        x = math.floor(x\
    \ / base)\n    end\n    return tmp\nend", "  local str = ''\n  while x > 0 do\n\
    \    local remain = x % base\n    x = (x - remain) / base\n    str = str .. tostring(remain)\n\
    \  end\n  return str\nend", "    local list = {}\n    while x > 0 do\n       \
    \ local q, r = math.floor(x / base), x % base\n        list[#list + 1] = r\n \
    \       x = q\n    end\n    return table.concat(list, '')\nend", "    local t\
    \ = {}\n    while x > 0 do\n        local r = x % base\n        x = (x - r) /\
    \ base\n        table.insert(t, r)\n    end\n    return string.reverse(table.concat(t))\n\
    end", "  local quotient = math.floor(x / base)\n  local remainder = x % base\n\
    \  if quotient ~= 0 then\n    return change_base(quotient, base) .. remainder\n\
    \  else\n    return remainder\n  end\nend", "    local x_str = ''\n    repeat\n\
    \        x_str = (x % base) .. x_str\n        x = math.floor(x / base)\n    until\
    \ x == 0\n    return x_str\nend", "  if x <= 0 then\n    return ''\n  else\n \
    \   local d = x % base\n    return change_base(math.floor(x / base), base) ..\
    \ d\n  end\nend", "    assert(type(x) == 'number' and type(base) == 'number')\n\
    \    local z\n    z = ''\n    while x ~= 0 do\n        z = tostring(x % base)\
    \ .. z\n        x = math.floor(x / base)\n    end\n    return z\nend", "  -- YOUR\
    \ CODE HERE\n  local result = \"\"\n  if x == 0 then\n    return '0'\n  end\n\
    \  while x ~= 0 do\n    if x % base == 0 then\n      result = '0' .. result\n\
    \    else\n      result = '1' .. result\n    end\n    x = math.floor(x / base)\n\
    \  end\n  return result\nend", "    assert(x >= 0, \"Can only convert positive\
    \ numbers to base \" .. base)\n    if x == 0 then\n        return '0'\n    end\n\
    \    local res = ''\n    while x > 0 do\n        res = string.char(0x30 + (x %\
    \ base)) .. res\n        x = math.floor(x / base)\n    end\n    return res\nend",
  "    local result = {}\n    local base_order = 0\n    local remainder = 0\n    local\
    \ quotient = x\n    repeat\n        remainder = quotient % base\n        quotient\
    \ = floor(quotient / base)\n        table.insert(result, 1, remainder)\n     \
    \   base_order = base_order + 1\n    until quotient == 0\n    return table.concat(result)\n\
    end", "    local str = ''\n    while x > 0 do\n        local last = math.fmod(x,\
    \ base)\n        x = (x - last) / base\n        str = last .. str\n    end\n \
    \   return str\nend", "    local i, remainder, s = 1, x % base, \"\"\n    while\
    \ remainder ~= 0 do\n        s = s .. tostring(remainder)\n        x = math.floor(x\
    \ / base)\n        remainder = x % base\n        i = i + 1\n    end\n    s = s\
    \ .. tostring(x % base)\n    return s\nend", "    local _x = x\n    local res\
    \ = ''\n    while _x ~= 0 do\n        res = res .. _x % base\n        _x = floor(_x\
    \ / base)\n    end\n    return res\nend", "\tif x < 0 then\n\t\treturn '-' ..\
    \ change_base(-x, base)\n\tend\n\tif x < base then\n\t\treturn tostring(x)\n\t\
    end\n\tlocal m = x % base\n\treturn change_base(x // base, base) .. tostring(m)\n\
    end", "  local rep = ''\n  while true do\n    local quot = math.floor(x / base)\n\
    \    local rem = x % base\n    rep = tostring(rem) .. rep\n    if quot == 0 then\n\
    \      break\n    end\n    x = quot\n  end\n  return rep\nend", "    local result\
    \ = \"\"\n    if base == 2 then\n        result = to_binary(x)\n    elseif base\
    \ == 8 then\n        result = to_octal(x)\n    elseif base == 16 then\n      \
    \  result = to_hex(x)\n    else\n        local divisor = math.floor(x / base)\n\
    \        local remainder = x % base\n        if divisor == 0 then\n          \
    \  result = tostring(remainder)\n        else\n            result = change_base(divisor,\
    \ base) .. tostring(remainder)\n        end\n    end\n    return result\nend",
  "    local res = \"\"\n    while x > 0 do\n        res = res .. tostring(x % base)\n\
    \        x = floor(x / base)\n    end\n    return string.reverse(res)\nend", " \
    \   local s = ''\n    while x ~= 0 do\n        local r = x % base\n        s =\
    \ tostring(r) .. s\n        x = (x - r) / base\n    end\n    return s\nend", " \
    \ local s = {}\n  while x > 0 do\n    local c = x % base\n    x = (x - c) / base\n\
    \    table.insert(s, c)\n  end\n  return string.rep('0', base - #s) .. string.reverse(table.concat(s))\n\
    end", "    local buf = {}\n    while x > 0 do\n        table.insert(buf, x % base)\n\
    \        x = math.floor(x / base)\n    end\n    return table.concat(buf)\nend",
  "  local r = ''\n  while x > 0 do\n    r = (x % base) .. r\n    x = math.floor(x\
    \ / base)\n  end\n  return r\nend", "  local s = ''\n  while x > 0 do\n    local\
    \ c = tostring(x % base)\n    s = c .. s\n    x = math.floor(x / base)\n  end\n\
    \  return s\nend", "  if x == 0 then\n    return \"0\"\n  end\n  local r = \"\"\
    \n  while x > 0 do\n    r = r .. tostring(x % base)\n    x = math.floor(x / base)\n\
    \  end\n  return string.reverse(r)\nend", "    if base < 10 then\n        -- optimization\
    \ for base less than 10\n        if x == 0 then\n            return '0'\n    \
    \    end\n        local result = ''\n        while x > 0 do\n            result\
    \ = tostring(x % base) .. result\n            x = math.floor(x / base)\n     \
    \   end\n        return result\n    end\n    -- base greater than or equal to\
    \ 10\n    -- digits are ascii characters\n    local result = ''\n    local n_digits\
    \ = string.len(base_dict)\n    while x > 0 do\n        result = base_dict:sub(x\
    \ % base + 1, x % base + 1) .. result\n        x = math.floor(x / base)\n    end\n\
    \    return result\nend", "  assert(x >= 0 and base >= 2 and base <= 10)\n  local\
    \ str = ''\n  while x ~= 0 do\n    local y = x % base\n    str = tostring(y) ..\
    \ str\n    x = (x - y) / base\n  end\n  return str\nend", "    local s = \"\"\n\
    \    while x > 0 do\n        s = s .. tostring(x % base)\n        x = math.floor(x\
    \ / base)\n    end\n    return s\nend", "\tlocal result = ''\n\tlocal y = x\n\t\
    while y > 0 do\n\t\tlocal mod = y % base\n\t\tresult = tostring(mod) .. result\n\
    \t\ty = math.floor(y / base)\n\tend\n\treturn result\nend", "  local l = {}\n\
    \  while x > 0 do\n    l[#l+1] = tostring(x % base)\n    x = floor(x / base)\n\
    \  end\n  return table.concat(l):reverse()\nend", "    local ints = {}\n    local\
    \ index = 1\n    local s = ''\n    while x > 0 do\n        ints[index] = x % base\n\
    \        x = math.floor(x / base)\n        index = index + 1\n    end\n    local\
    \ start = index - 1\n    for i = start, 1, -1 do\n        s = s .. tostring(ints[i])\n\
    \    end\n    return s\nend", "  local n = x\n  local result = ''\n  local n_quotient\
    \ = n // base\n  local n_remainder = n % base\n  local base_map = {\n    [10]\
    \ = 'a',\n    [11] = 'b',\n    [12] = 'c',\n    [13] = 'd',\n    [14] = 'e',\n\
    \    [15] = 'f',\n    [16] = 'g',\n    [17] = 'h',\n    [18] = 'i',\n    [19]\
    \ = 'j',\n    [20] = 'k',\n    [21] = 'l',\n    [22] = 'm',\n    [23] = 'n',\n\
    \    [24] = 'o',\n    [25] = 'p',\n    [26] = 'q',\n    [27] = 'r',\n    [28]\
    \ = 's',\n    [29] = 't',\n    [30] = 'u',\n    [31] = 'v',\n    [32] = 'w',\n\
    \    [33] = 'x',\n    [34] = 'y',\n    [35] = 'z',\n  }\n  if n_quotient == 0\
    \ then\n    if n_remainder > 9 then\n      result = base_map[n_remainder]\n  \
    \  else\n      result = result .. n_remainder\n    end\n  else\n    if n_remainder\
    \ > 9 then\n      result = base_map[n_remainder] .. change_base(n_quotient, base)\n\
    \    else\n      result = result .. n_remainder .. change_base(n_quotient, base)\n\
    \    end\n  end\n  return result\nend", "    x = tonumber(x)\n    if x == 0 then\n\
    \        return '0'\n    end\n    local res = ''\n    while x > 0 do\n       \
    \ res = res .. (x % base)\n        x = math.floor(x / base)\n    end\n    return\
    \ string.reverse(res)\nend", "    assert(type(x) == 'number' and type(base) ==\
    \ 'number')\n    local result = ''\n    local q = x // base\n    local r = x %\
    \ base\n    while q ~= 0 do\n        result = result .. tostring(r)\n        x\
    \ = q\n        q = x // base\n        r = x % base\n    end\n    result = result\
    \ .. tostring(r)\n    return result\nend", "\tlocal ss = \"\"\n\twhile x ~= 0\
    \ do\n\t\tlocal r = x % base\n\t\tx = (x - r) / base\n\t\tss = tostring(r) ..\
    \ ss\n\tend\n\treturn ss\nend", "  local s = \"\"\n  while x > 0 do\n    s = string.format(\"\
    %d\", x % base) .. s\n    x = math.floor(x / base)\n  end\n  return s\nend", " \
    \ local ans\n  if x >= base then\n    ans = change_base(x//base, base)\n  else\n\
    \    ans = \"\"\n  end\n  return ans .. string.format(\"%d\", x%base)\nend", " \
    \   local r = x % base\n    if x == 0 then\n        return \"\"\n    else\n  \
    \      return change_base((x - r) / base, base) .. tostring(r)\n    end\nend",
  "  local list = {}\n  local x_ = x\n  repeat\n    local left = x_ % base\n    x_\
    \ = math.floor(x_ / base)\n    list[#list + 1] = left\n  until x_ == 0\n  local\
    \ result = ''\n  for i = #list, 1, -1 do\n    result = result .. tostring(list[i])\n\
    \  end\n  return result\nend", "    local rems = {}\n    local n = 1\n    while\
    \ x > 0 do\n        rems[n] = x % base\n        x = math.floor(x / base)\n   \
    \     n = n + 1\n    end\n    return table.concat(rems, \"\", 1, n - 1):reverse()\n\
    end", "    local digits = {}\n    while true do\n        local r = x % base\n\
    \        x = math.floor(x / base)\n        table.insert(digits, r)\n        if\
    \ x == 0 then\n            break\n        end\n    end\n    return table.concat(digits,\
    \ '')\nend", "    local dig, result = 0, ''\n    while x > 0 do\n        dig =\
    \ x % base\n        x = math.floor(x / base)\n        result = tostring(dig) ..\
    \ result\n    end\n    return result\nend", "    local conversion = \"\"\n   \
    \ repeat\n        local remainder = x % base\n        conversion = string.char(string.byte('0')\
    \ + remainder) .. conversion\n        x = (x - remainder) / base\n    until x\
    \ == 0\n    return conversion\nend", "  local res = {}\n  local k = 0\n  while\
    \ x ~= 0 do\n    local digit = x % base\n    res[k] = digit\n    x = (x - digit)\
    \ / base\n    k = k + 1\n  end\n  local s = ''\n  for i = k - 1, 0, -1 do\n  \
    \  s = s .. res[i]\n  end\n  return s\nend", "    local result = ''\n    repeat\n\
    \        local d = x % base\n        x = math.floor(x / base)\n        result\
    \ = string.format('%d%s', d, result)\n    until x == 0\n    return result\nend",
  "    local s = ''\n    repeat\n        local r = x % base\n        x = (x - r) /\
    \ base\n        s = s .. tostring(r)\n    until x == 0\n    return string.reverse(s)\n\
    end", "    if x == 0 then\n        return '0'\n    end\n    local t = {}\n   \
    \ while x > 0 do\n        local r = x % base\n        x = math.floor(x / base)\n\
    \        t[#t + 1] = r\n    end\n    return table.concat(t)\nend", "  assert(type(x)\
    \ == 'number', 'x must be number')\n  assert(type(base) == 'number', 'base must\
    \ be number')\n  local result = ''\n  while x > 0 do\n    result = result .. tostring(x\
    \ % base)\n    x = math.floor(x / base)\n  end\n  return result\nend", "    local\
    \ out = ''\n    local n = math.floor(x / base)\n    local r = x % base\n    local\
    \ s = math.floor(x / 10)\n    if n ~= 0 then\n        out = out .. change_base(n,\
    \ base)\n    end\n    return out .. (r + s)\nend", "  assert(base > 1 and base\
    \ < 10)\n  local result = ''\n  while x > 0 do\n    local remainder = x % base\n\
    \    result = tostring(remainder) .. result\n    x = math.floor(x / base)\n  end\n\
    \  return result\nend", "    local result = \"\"\n    repeat\n        local d\
    \ = x % base\n        x = (x - d) / base\n        result = tostring(d) .. result\n\
    \    until x == 0\n    return result\nend", "  local res = \"\"\n  local t = {}\n\
    \  while x > 0 do\n    res = res .. tostring(x % base)\n    x = math.floor(x /\
    \ base)\n  end\n  return res\nend", "\tif x < base then\n\t\treturn tostring(x)\n\
    \telse\n\t\treturn change_base(math.floor(x / base), base) .. tostring(x % base)\n\
    \tend\nend", "    x = tostring(x)\n    local digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \    local s = ''\n    while x ~= 0 do\n        local mod = math.fmod(x, base)\n\
    \        s = digits:sub(mod + 1, mod + 1) .. s\n        x = math.floor(x / base)\n\
    \    end\n    return s\nend", "    local digits = {'0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local result = ''\n \
    \   while x > 0 do\n        result = digits[x % base + 1] .. result\n        x\
    \ = math.floor(x / base)\n    end\n    return result\nend", "    local s = ''\n\
    \    while x > 0 do\n        s = string.format('%s%s', tostring(x % base), s)\n\
    \        x = math.floor(x / base)\n    end\n    return s\nend", "    local s =\
    \ ''\n    while x ~= 0 do\n        local r = x % base\n        s = tostring(r)\
    \ .. s\n        x = (x - r) / base\n    end\n    return s\nend", "    local res\
    \ = ''\n    while x ~= 0 do\n        res = res .. tostring(x % base)\n       \
    \ x = math.floor(x / base)\n    end\n    return string.reverse(res)\nend", " \
    \   if x == 0 then\n        return '0'\n    end\n    local ret = ''\n    while\
    \ x > 0 do\n        local r = x % base\n        ret = tostring(r) .. ret\n   \
    \     x = (x - r) / base\n    end\n    return ret\nend", "\tif x == 0 then\n\t\
    \treturn '0'\n\tend\n\tlocal acc = ''\n\twhile x > 0 do\n\t\tlocal last = x %\
    \ base\n\t\tacc = tostring(last) .. acc\n\t\tx = (x - last) / base\n\tend\n\t\
    return acc\nend", "    if x < base then\n        return tostring(x)\n    else\n\
    \        return change_base(math.floor(x / base), base) .. tostring(x % base)\n\
    \    end\nend", "    if x == 0 then\n        return '0'\n    end\n    local r\
    \ = ''\n    while x > 0 do\n        local d = x % base\n        r = ('%d%s'):format(d,\
    \ r)\n        x = math.floor(x / base)\n    end\n    return r\nend", "  local\
    \ str = \"\"\n  while x ~= 0 do\n    local r = x % base\n    str = tostring(r)\
    \ .. str\n    x = math.floor(x / base)\n  end\n  return str\nend", "  local t\
    \ = {}\n  repeat\n    local remainder = x % base\n    x = (x - remainder) / base\n\
    \    t[#t + 1] = tostring(remainder)\n  until x == 0\n  return table.concat(t)\n\
    end", "\tlocal result = ''\n\twhile x > 0 do\n\t\tresult = tostring(x % base)\
    \ .. result\n\t\tx = math.floor(x / base)\n\tend\n\treturn result\nend", "   \
    \ if x == 0 then\n        return '0'\n    end\n    if base == 1 then\n       \
    \ return string.rep('1', x)\n    end\n    local s = ''\n    while x > 0 do\n \
    \       local mod = x % base\n        x = (x - mod) / base\n        s = tostring(mod)\
    \ .. s\n    end\n    return s\nend", "    local result = {}\n    if base == 1\
    \ then\n        return string.rep(\"1\", x)\n    end\n    while x > 0 do\n   \
    \     local rest = x % base\n        x = (x - rest) / base\n        table.insert(result,\
    \ 1, tostring(rest))\n    end\n    return table.concat(result)\nend", "    local\
    \ result = ''\n    while x > 0 do\n        result = (x % base) .. result\n   \
    \     x = math.floor(x / base)\n    end\n    return result\nend", "  local t,\
    \ r\n  t = {}\n  while x > 0 do\n    r = x % base\n    table.insert(t, r)\n  \
    \  x = math.floor(x / base)\n  end\n  return table.concat(t)\nend", "    local\
    \ ans = ''\n    repeat\n        local r = x % base\n        x = (x - r) / base\n\
    \        ans = tostring(r) .. ans\n    until x == 0\n    return ans\nend", " \
    \   local str_repr = ''\n    while x > 0 do\n        local cur_digit = x % base\n\
    \        str_repr = str_repr .. tostring(cur_digit)\n        x = math.floor(x\
    \ / base)\n    end\n    str_repr = string.reverse(str_repr)\n    return str_repr\n\
    end", "    assert(x, \"missing argument\")\n    assert(base, \"missing argument\"\
    )\n    assert(type(x) == \"number\", \"argument error\")\n    assert(type(base)\
    \ == \"number\", \"argument error\")\n    assert(x > 0, \"number must be more\
    \ than zero\")\n    assert(base > 0, \"base must be more than zero\")\n    assert(base\
    \ < 10, \"base must be less than 10\")", "    local str = \"\"\n    while x >\
    \ 0 do\n        local digit = x % base\n        str = str .. tostring(digit)\n\
    \        x = math.floor(x / base)\n    end\n    return str\nend", "    assert(type(x)\
    \ == 'number' and type(base) == 'number')\n    assert(x >= 0 and base >= 2 and\
    \ base <= 10)\n    local z = {}\n    while x > 0 do\n        table.insert(z, 1,\
    \ x % base)\n        x = math.floor(x / base)\n    end\n    return table.concat(z)\n\
    end", "  local num = x\n  local ret = ''\n  while num > 0 do\n    local mod =\
    \ num % base\n    ret = mod .. ret\n    num = (num - mod) / base\n  end\n  return\
    \ ret\nend", "    local num = x\n    local new_num = \"\"\n    local mod = 0\n\
    \    while num > 0 do\n        mod = num % base\n        num = math.floor(num\
    \ / base)\n        new_num = tostring(mod) .. new_num\n    end\n    return new_num\n\
    end", "  local result = ''\n  repeat\n    local digit = x % base\n    result =\
    \ string.char(48 + digit) .. result\n    x = math.floor(x / base)\n  until x ==\
    \ 0\n  return result\nend", "  local stack = {}\n  local base_numbers = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n  repeat\n    table.insert(stack,\
    \ base_numbers[x % base + 1])\n    x = math.floor(x / base)\n  until x == 0\n\
    \  local result = ''\n  for i = #stack, 1, -1 do\n    result = result .. stack[i]\n\
    \  end\n  return result\nend", "    local r = \"\"\n    while x > 0 do\n     \
    \   local m = x % base\n        r = tostring(m) .. r\n        x = floor(x / base)\n\
    \    end\n    return r\nend", "\tlocal digits = {}\n\tlocal n = 0\n\twhile x >\
    \ 0 do\n\t\tn = n + 1\n\t\tdigits[n] = x % base\n\t\tx = math.floor(x / base)\n\
    \tend\n\tlocal s = ''\n\twhile n > 0 do\n\t\ts = s .. tostring(digits[n])\n\t\t\
    n = n - 1\n\tend\n\treturn s\nend", "  local s = ''\n  while x > 0 do\n    local\
    \ r = x % base\n    x = math.floor(x / base)\n    s = s .. string.char(r+48)\n\
    \  end\n  return s\nend", "    assert(type(x) == 'number', 'x is not a number.')\n\
    \    assert(x >= 0, 'x is negative.')\n    assert(type(base) == 'number', 'base\
    \ is not a number.')\n    assert(base >= 2, 'base is less than 2.')\n    assert(base\
    \ < 10, 'base is greater than 10.')", "    local str = \"\"\n    while x ~= 0\
    \ do\n        str = str .. x % base\n        x = math.floor(x / base)\n    end\n\
    \    str = string.reverse(str)\n    return str\nend", "  local s = ''\n  while\
    \ x > 0 do\n    local d = x % base\n    x = (x - d) / base\n    s = d .. s\n \
    \ end\n  return s\nend", "    local n = ''\n    while x ~= 0 do\n        n = n\
    \ .. tostring(x % base)\n        x = math.floor(x / base)\n    end\n    return\
    \ string.reverse(n)\nend", "  local n = math.ceil(math.log(x)/math.log(base))\n\
    \  local acc = {}\n  for i = n, 1, -1 do\n    local p = math.pow(base, i - 1)\n\
    \    local d = math.floor(x / p)\n    x = x - d * p\n    acc[i] = tostring(d)\n\
    \  end\n  return table.concat(acc)\nend", "    assert(type(x) == 'number' and\
    \ type(base) == 'number', 'change_base: input should be numbers.')\n    local\
    \ s = ''\n    while x > 0 do\n        local d = x % base\n        s = string.format('%s%d',\
    \ d, s)\n        x = math.floor(x / base)\n    end\n    return s\nend", "\tlocal\
    \ s = \"\"\n\twhile x ~= 0 do\n\t\tlocal d = x % base\n\t\ts = string.char(string.byte('0')\
    \ + d) .. s\n\t\tx = math.floor(x / base)\n\tend\n\treturn s\nend", "    local\
    \ a = {}\n    local s = {}\n    repeat\n        s[#s+1] = x % base\n        x\
    \ = math.floor(x / base)\n    until x <= 0\n    for i = #s, 1, -1 do\n       \
    \ a[#a+1] = s[i]\n    end\n    return table.concat(a)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
