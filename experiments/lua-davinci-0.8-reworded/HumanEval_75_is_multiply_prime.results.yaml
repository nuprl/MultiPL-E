name: HumanEval_75_is_multiply_prime
language: lua
results:
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local prime_numbers = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    for key, value in pairs(prime_numbers) do\n        if a % value ==\
    \ 0 then\n            if a / value == 1 then\n                return true\n  \
    \          else\n                a = a / value\n            end\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczpz94v6.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpczpz94v6.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local is_prime = function(n)\n      \
    \  for i = 2, n - 1 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp58txihzm.lua:33: 'end' expected (to close 'function' at line\
    \ 8) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local is_mul_prime = false\n    local\
    \ count = 0\n    local prime_temp = {}\n    for i = 2, a do\n        local is_prime\
    \ = true\n        for j = 2, i do\n            if i % j == 0 and i ~= j then\n\
    \                is_prime = false\n                break\n            end\n  \
    \      end\n        if is_prime then\n            prime_temp[count] = i\n    \
    \        count = count + 1\n        end\n    end\n    for i = 1, #prime_temp do\n\
    \        for j = 1, #prime_temp do\n            for k = 1, #prime_temp do\n  \
    \              if a == prime_temp[i] * prime_temp[j] * prime_temp[k] then\n  \
    \                  is_mul_prime = true\n                    break\n          \
    \      end\n            end\n        end\n    end\n    return is_mul_prime\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ubhjtzq.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0ubhjtzq.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwxx666d.lua:14:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpcwxx666d.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    if is_prime(a) then\n        return false\n\
    \    end\n    local b = a / 2\n    local c = a / 3\n    if is_prime(b) and is_prime(c)\
    \ then\n        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqxu1fha_.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpqxu1fha_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpqxu1fha_.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local factors = prime_factors(a)\n  \
    \  if #factors == 3 then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwkjud0w1.lua:9:\
    \ attempt to call a nil value (global 'prime_factors')\nstack traceback:\n\t/tmp/tmpwkjud0w1.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpwkjud0w1.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\t-- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjunr2ks.lua:15:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpbjunr2ks.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal function is_prime(a)\n\t\tlocal function\
    \ is_divisible(a, b)\n\t\t\tif a % b == 0 then\n\t\t\t\treturn true\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\t\n\t\tif a < 2 then\n\t\t\treturn\
    \ false\n\t\telseif a < 4 then\n\t\t\treturn true\n\t\telseif is_divisible(a,\
    \ 2) then\n\t\t\treturn false\n\t\telse\n\t\t\tfor i = 3, math.sqrt(a), 2 do\n\
    \t\t\t\tif is_divisible(a, i) then\n\t\t\t\t\treturn false\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function is_divisible(a, b)\n\
    \t\tif a % b == 0 then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\t\
    end\n\tend\n\t\n\tlocal function is_square(a)\n\t\tlocal b = math.sqrt(a)\n\t\t\
    if b == math.floor(b) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\
    \tend\n\tend\n\t\n\tfor i = 1, math.sqrt(a) do\n\t\tif is_prime(i) and is_divisible(a,\
    \ i) then\n\t\t\tlocal j = a / i\n\t\t\tif is_square(j) then\n\t\t\t\treturn false\n\
    \t\t\telseif is_prime(j) then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n  \
    \  lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk951081j.lua:68:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk951081j.lua:68:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tif a > 100 then\n\t\tprint('The given number\
    \ is greater then 100!')\n\t\treturn false\n\tend\n\t\n\tlocal prime_numbers =\
    \ {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n\tlocal check = false\n\t\n\tfor _, p in ipairs(prime_numbers)\
    \ do\n\t\tif (a % p == 0) then\n\t\t\tcheck = true\n\t\tend\n\tend\n\treturn check\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp654fmsy5.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp654fmsy5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    -- check if a is multiple of prime numbers\n\
    \    if a == 1 then\n        return false\n    end\n    local factor_num = 0\n\
    \    local i = 2\n    while a ~= 1 do\n        if a % i == 0 then\n          \
    \  a = a / i\n            factor_num = factor_num + 1\n        else\n        \
    \    i = i + 1\n        end\n    end\n    if factor_num == 3 then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tlocal res=false\n\tif a>=2 then\n\t\tres=true\n\
    \t\tfor i=2, a/2 do\n\t\t\tif a%i==0 then\n\t\t\t\tif is_prime(i) then\n\t\t\t\
    \t\tif is_prime(a/i) then\n\t\t\t\t\t\tres=true\n\t\t\t\t\telse\n\t\t\t\t\t\t\
    res=false\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tres=false\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf5hu4of.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnf5hu4of.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    local result, count = false, 0\n    for\
    \ i = 2, a do\n        if is_prime(i) and a % i == 0 then\n            count =\
    \ count + 1\n        end\n    end\n    if count == 3 then\n        result = true\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymwqq6jk.lua:11:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpymwqq6jk.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpymwqq6jk.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n\tfor i = 2, math.sqrt(a) do\n\t\tif a %\
    \ i == 0 then\n\t\t\tfor j = 2, math.sqrt(a / i) do\n\t\t\t\tif (a / i) % j ==\
    \ 0 then\n\t\t\t\t\tfor k = 2, math.sqrt(a / i / j) do\n\t\t\t\t\t\tif (a / i\
    \ / j) % k == 0 then\n\t\t\t\t\t\t\treturn true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_mfn00q.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg_mfn00q.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local limit = a\n  local is_prime = true\n\
    \  local table_primes = {}\n  local product = 1\n  for i = 2, limit do\n    is_prime\
    \ = true\n    for j = 2, i - 1 do\n      if i % j == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(table_primes,\
    \ i)\n    end\n  end\n  for i = 1, #table_primes do\n    for j = 1, #table_primes\
    \ do\n      for k = 1, #table_primes do\n        product = table_primes[i] * table_primes[j]\
    \ * table_primes[k]\n        if product == a then\n          return true\n   \
    \     end\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.310 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    for i = 1, a do\n        for j = 1, a\
    \ do\n            for k = 1, a do\n                if i * j * k == a then\n  \
    \                  if is_prime(i) and is_prime(j) and is_prime(k) then\n     \
    \                   return true\n                    end\n                end\n\
    \            end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1pupyvol.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp1pupyvol.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1pupyvol.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local is_prime = false\n  local divisor\n\
    \  local primes = {}\n  local count = 0\n  local index = 1\n  local i\n  local\
    \ j\n  if a == 1 then\n    return true\n  end\n  while a > 1 do\n    is_prime\
    \ = true\n    for i = 2, math.floor(math.sqrt(a)) do\n      if a % i == 0 then\n\
    \        is_prime = false\n        break\n      end\n    end\n    if is_prime\
    \ then\n      primes[index] = a\n      index = index + 1\n      count = count\
    \ + 1\n      if count == 3 then\n        return true\n      end\n      a = a /\
    \ a\n    else\n      divisor = 2\n      while divisor <= math.floor(math.sqrt(a))\
    \ do\n        if a % divisor == 0 then\n          primes[index] = divisor\n  \
    \        index = index + 1\n          count = count + 1\n          if count ==\
    \ 3 then\n            return true\n          end\n          a = a / divisor\n\
    \          break\n        end\n        divisor = divisor + 1\n      end\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeiyss3nl.lua:64:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeiyss3nl.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  if a == 1 then\n    return false\n  end\n\
    \  local counter = 0\n  for i = 2, a do\n    if is_prime(i) and a % i == 0 then\n\
    \      counter = counter + 1\n    end\n  end\n  return counter == 3\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_multiply_prime\n\
    \    lu.assertEquals(candidate(5), false)\n    lu.assertEquals(candidate(30),\
    \ true)\n    lu.assertEquals(candidate(8), true)\n    lu.assertEquals(candidate(10),\
    \ false)\n    lu.assertEquals(candidate(125), true)\n    lu.assertEquals(candidate(105),\
    \ true)\n    lu.assertEquals(candidate(126), false)\n    lu.assertEquals(candidate(729),\
    \ false)\n    lu.assertEquals(candidate(891), false)\n    lu.assertEquals(candidate(1001),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05l8lsp8.lua:14:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp05l8lsp8.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp05l8lsp8.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  local t = {}\n  local b = 3\n  local i\
    \ = a\n  while i > 1 do\n    if is_prime(b) and (i % b == 0) then\n      t[#t\
    \ + 1] = b\n      i = i / b\n    else\n      b = b + 2\n    end\n  end\n  local\
    \ result = #t == 3\n  for i = 1, #t do\n    result = result and (t[i] * t[i+1]\
    \ == t[i+2])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmepmdagj.lua:13:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmepmdagj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpmepmdagj.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n    -- check if a is multiple of 2 and 3\n\
    \    if a % 2 == 0 and a % 3 == 0 then\n        return true\n    else\n      \
    \  return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_multiply_prime\n    lu.assertEquals(candidate(5), false)\n\
    \    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8), true)\n\
    \    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyx7ea_r.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfyx7ea_r.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n-- and false otherwise.\n-- Knowing that (a) is less then\
    \ 100. \n-- Example:\n-- >>> is_multiply_prime(30)\n-- true\n-- 30 = 2 * 3 * 5\n\
    local function is_multiply_prime(a)\n  if not is_prime(a) then\n    for i = 2,\
    \ a / 2 do\n      if is_prime(i) and is_prime(a / i) then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_multiply_prime\n    lu.assertEquals(candidate(5),\
    \ false)\n    lu.assertEquals(candidate(30), true)\n    lu.assertEquals(candidate(8),\
    \ true)\n    lu.assertEquals(candidate(10), false)\n    lu.assertEquals(candidate(125),\
    \ true)\n    lu.assertEquals(candidate(105), true)\n    lu.assertEquals(candidate(126),\
    \ false)\n    lu.assertEquals(candidate(729), false)\n    lu.assertEquals(candidate(891),\
    \ false)\n    lu.assertEquals(candidate(1001), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7hs77txw.lua:9:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp7hs77txw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7hs77txw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
