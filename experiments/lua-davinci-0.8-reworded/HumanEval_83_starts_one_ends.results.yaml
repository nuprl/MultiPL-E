name: HumanEval_83_starts_one_ends
language: lua
results:
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    local one_cnt = 0\n    local number = 1\n    local exp = 0\n    while exp\
    \ < n do\n        exp = exp + 1\n        number = number * 10\n        one_cnt\
    \ = one_cnt + number - 1\n    end\n    return one_cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyn9yvuy.lua:18:\
    \ expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmphyn9yvuy.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  if n == 1 then\n    return 2\n  end\n  local count = 10 * starts_one_ends(n\
    \ - 1) - starts_one_ends(n - 2)\n  assert(count >= 0)\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n\
    \    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
    \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6nbhpmd.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb6nbhpmd.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \   if n == 1 then\n      return 2\n   else\n      return starts_one_ends(n-1)\
    \ + starts_one_ends(n-2)\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2),\
    \ 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4),\
    \ 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7obe0bam.lua:14:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp7obe0bam.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    local count = 0\n    -- Here we could create a for-loop to go through all\
    \ of the\n    -- combinations, but let's try to find a pattern\n    if n == 1\
    \ then\n        return 10\n    elseif n == 2 then\n        return 10 * 9\n   \
    \ else\n        return 10 * 9 * 8 ^ (n - 2)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6r951u3.lua:19:\
    \ expected: 1, actual: 10\nstack traceback:\n\t/tmp/tmpm6r951u3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \   if n == 1 then\n      return 1\n   elseif n == 2 then\n      return 3\n  \
    \ else\n      local last = 3\n      local current = 5\n      for i = 3, n do\n\
    \         local tmp = current\n         current = current + last\n         last\
    \ = tmp\n      end\n      return current\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa71awyne.lua:24:\
    \ expected: 18, actual: 3\nstack traceback:\n\t/tmp/tmpa71awyne.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    if n == 1 then\n        return 2\n    end\n    return 9 * math.pow(10, n\
    \ - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2),\
    \ 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4),\
    \ 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mcvp5cy.lua:13:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp4mcvp5cy.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  local count = 0\n  local new_ones = 1\n  local old_ones = 0\n  local temp\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n\
    \    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
    \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpodpoepi1.lua:19: 'end' expected (to close 'function' at line\
    \ 3) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    if n == 1 then\n        return 2\n    end\n    local count = 0\n    for d\
    \ = 0, 9 do\n        count = count + starts_one_ends(n - 1)\n    end\n    if n\
    \ > 2 then\n        count = count + starts_one_ends(n - 2)\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2),\
    \ 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4),\
    \ 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbug83u3f.lua:20:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbug83u3f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  if n == 1 then\n    return 1\n  end\n  local c = 9\n  for i = 2, n - 1 do\n\
    \    c = c * 10\n  end\n  return c * 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    if n < 2 then\n        return n\n    end\n    -- For a n-digit number, the\
    \ first digit can be any of the 10, the last\n    -- digit can be any of the 10,\
    \ but both the first and last digit cannot be\n    -- 1 at the same time.\n  \
    \  -- Using a recurrence relation:\n    --   f(n) = 10f(n-1) - 9f(n-2)\n    local\
    \ a, b = 2, 10\n    for i = 2, n - 1 do\n        local c = 10 * b - 9 * a\n  \
    \      a, b = b, c\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72rt_cat.lua:24:\
    \ expected: 18, actual: 10\nstack traceback:\n\t/tmp/tmp72rt_cat.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  local dp = setmetatable({0, 9, 9}, {__index = function(t, k)\n    if k < 0\
    \ then\n      return 0\n    end\n    local v = t[k - 1] * 9 + (t[k - 2] or 0)\n\
    \    t[k] = v\n    return v\n  end})\n  return dp[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53i5ssqu.lua:18:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp53i5ssqu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \   local start_ones = 9*10^(n-1)\n   local end_ones = 9*10^(n-1)\n   return start_ones\
    \ + end_ones\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2),\
    \ 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4),\
    \ 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03c3k_4e.lua:12:\
    \ expected: 1, actual: 18\nstack traceback:\n\t/tmp/tmp03c3k_4e.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    return 9 * 10 ^ (n - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2),\
    \ 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4),\
    \ 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6l72svv.lua:10:\
    \ expected: 1, actual: 9\nstack traceback:\n\t/tmp/tmpn6l72svv.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  local start_one = n - 1\n  local end_one = n - 1\n  return start_one + end_one\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n\
    \    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
    \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvxdsasl.lua:12:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpfvxdsasl.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \    if n == 1 then\n        return 2\n    end\n    local dp = {2, 1}\n    for\
    \ i = 2, n do\n        dp[i] = dp[i - 1] * 9 + dp[i - 2]\n    end\n    return\
    \ dp[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = starts_one_ends\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2),\
    \ 18)\n    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4),\
    \ 1800)\n    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxozqeio.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmplxozqeio.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 6\n  end\n\
    \  if n == 3 then\n    return 10\n  end\n  local a = {2, 6, 10}\n  for i = 4,\
    \ n do\n    a[i] = a[i - 1] + a[i - 2]\n  end\n  return a[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_nxv2jx.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpn_nxv2jx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  if n == 1 then\n    return 2\n  end\n  if n == 2 then\n    return 10\n  end\n\
    \  return (n-1) * 9 * math.pow(10, n-2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxfx0bpi.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpmxfx0bpi.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \   local function ends_one(n)\n      if n == 1 then\n         return 2\n    \
    \  elseif n == 2 then\n         return 3\n      else\n         local f = math.floor(n\
    \ / 2)\n         local x = ends_one(f)\n         local y = math.pow(10, f) - 1\n\
    \         local z = math.pow(10, n - 1)\n         return x * y + z\n      end\n\
    \   end\n   local f = math.floor(n / 2)\n   local x = ends_one(f)\n   local y\
    \ = math.pow(10, f) - 1\n   local z = math.pow(10, n - 1)\n   return x * y + z\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n\
    \    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
    \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6rcktaad.lua:10:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp6rcktaad.lua:10: in upvalue 'ends_one'\n\
    \t/tmp/tmp6rcktaad.lua:11: in upvalue 'ends_one'\n\t/tmp/tmp6rcktaad.lua:11: in\
    \ upvalue 'ends_one'\n\t/tmp/tmp6rcktaad.lua:11: in upvalue 'ends_one'\n\t/tmp/tmp6rcktaad.lua:11:\
    \ in upvalue 'ends_one'\n\t/tmp/tmp6rcktaad.lua:11: in upvalue 'ends_one'\n\t\
    /tmp/tmp6rcktaad.lua:11: in upvalue 'ends_one'\n\t/tmp/tmp6rcktaad.lua:11: in\
    \ upvalue 'ends_one'\n\t/tmp/tmp6rcktaad.lua:11: in upvalue 'ends_one'\n\t...\n\
    \t/tmp/tmp6rcktaad.lua:18: in local 'candidate'\n\t/tmp/tmp6rcktaad.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.200 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  -- n-digit positive integers have n-1 digits after the leading 1.\n  -- Counting\
    \ the leading 1, that's 1 + D_n-1(1), where D_n(1) is\n  -- the count of n-digit\
    \ positive integers that start with 1.\n  -- Similarly, the count of n-digit positive\
    \ integers that end with 1\n  -- is D_n-1(1).\n  if n == 1 then\n    return 2\n\
    \  else\n    return starts_one_ends(n - 1) + starts_one_ends(n - 1)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = starts_one_ends\n\
    \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(2), 18)\n\
    \    lu.assertEquals(candidate(3), 180)\n    lu.assertEquals(candidate(4), 1800)\n\
    \    lu.assertEquals(candidate(5), 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns62j1q4.lua:19:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpns62j1q4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the count of the numbers of n-digit\n\
    -- positive integers that start or end with 1.\nlocal function starts_one_ends(n)\n\
    \  local sum = 0\n  local inc = n\n  local dec = n\n  while inc > 0 do\n    sum\
    \ = sum + inc\n    inc = inc - 1\n  end\n  while dec > 1 do\n    sum = sum + dec\n\
    \    dec = dec - 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = starts_one_ends\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(2), 18)\n    lu.assertEquals(candidate(3),\
    \ 180)\n    lu.assertEquals(candidate(4), 1800)\n    lu.assertEquals(candidate(5),\
    \ 18000)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd07z64d4.lua:22:\
    \ expected: 18, actual: 5\nstack traceback:\n\t/tmp/tmpd07z64d4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
