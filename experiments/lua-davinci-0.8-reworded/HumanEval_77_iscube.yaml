name: HumanEval_77_iscube
language: lua
prompt: "-- Write a function that takes an integer a and returns true \n-- if this\
  \ ingeger is a cube of some integer number.\n-- Note: you may assume the input is\
  \ always valid.\n-- Examples:\n-- >>> iscube(1)\n-- true\n-- >>> iscube(2)\n-- false\n\
  -- >>> iscube(-1)\n-- true\n-- >>> iscube(64)\n-- true\n-- >>> iscube(0)\n-- true\n\
  -- >>> iscube(180)\n-- false\nlocal function iscube(a)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = iscube\n\
  \    lu.assertEquals(candidate(1), true)\n    lu.assertEquals(candidate(2), false)\n\
  \    lu.assertEquals(candidate(-1), true)\n    lu.assertEquals(candidate(64), true)\n\
  \    lu.assertEquals(candidate(180), false)\n    lu.assertEquals(candidate(1000),\
  \ true)\n    lu.assertEquals(candidate(0), true)\n    lu.assertEquals(candidate(1729),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if a == 0 then\n    return true\n  end\n  if a < 0 then\n    a =\
    \ -a\n  end\n  local b = math.floor(math.pow(a, 1/3))\n  if b * b * b == a then\n\
    \    return true\n  else\n    return false\n  end\nend", "  if a < 0 then\n  \
    \  a = -a\n  end\n  if a == 0 then\n    return true\n  end\n  local n = 1\n  while\
    \ n * n * n < a do\n    n = n + 1\n  end\n  return n * n * n == a\nend", "   \
    \ if a < 0 then\n        a = -a\n    end\n    if a == 0 then\n        return true\n\
    \    end\n    local count = 0\n    for i = 1, a do\n        count = count + 1\n\
    \        if i * i * i == a then\n            return true\n        end\n    end\n\
    \    if count == a then\n        return false\n    end\nend", "\treturn a == 0\
    \ or math.sqrt(a) % 1 == 0\nend", "    for x=1,a do\n        if x*x*x == a then\n\
    \            return true\n        end\n    end\n    return false\nend", "\t\n\
    end", "  -- TODO: Implement this function.\n  local i=0\n  while a>=0 do\n   \
    \ if a==i*i*i then\n      return true\n    end\n    a=a-1\n  end\n  return false\n\
    end", "  -- TODO: Implement me!\nend", end, "    if a < 0 then\n        a = -a\n\
    \    end\n    if a == 0 then\n        return true\n    end\n    local i = 1\n\
    \    while i * i * i <= a do\n        if i * i * i == a then\n            return\
    \ true\n        end\n        i = i + 1\n    end\n    return false\nend", "  if\
    \ a <= 0 then\n    return true\n  end\n  local i = 0\n  while i * i * i <= a do\n\
    \    if i * i * i == a then\n      return true\n    end\n    i = i + 1\n  end\n\
    \  return false\nend", "  -- Your code here\n  local sqr = math.sqrt(a)\n  local\
    \ s = math.floor(sqr)\n  if sqr == s then\n    sqr = math.sqrt(s)\n    s = math.floor(sqr)\n\
    \    if sqr == s then\n      return true\n    end\n  end\n  return false\nend",
  "  local absa = math.abs(a)\n  local c = math.floor(math.pow(absa, 1/3) + 0.5)\n\
    \  return a == c*c*c\nend", "    -- your code here\nend", "    for i = 1, a do\n\
    \        if i*i*i == a then\n            return true\n        end\n    end\n \
    \   return false\nend", "    return (math.abs(a) ~= 0) and (math.abs(a) == math.abs(math.cbrt(a))\
    \ ^ 3)\nend", "\tif a == 1 or a == -1 or a == 0 then\n\t\treturn true\n\telseif\
    \ a > 0 then\n\t\tfor i = 1, a do\n\t\t\tif i * i * i == a then\n\t\t\t\treturn\
    \ true\n\t\t\tend\n\t\tend\n\telseif a < 0 then\n\t\tfor i = -1, a do\n\t\t\t\
    if i * i * i == a then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ false\nend", "  return a >= 0 and math.abs(a) == math.abs(math.round(math.pow(a,\
    \ 1/3)))\nend", "  -- add your code here\nend", "    -- For any integer a, if\
    \ a is a cube, then a must be the product of some \n    -- integer r and its square.\
    \ For example, 125 is a cube and it equals \n    -- the product of 5 and 25.\n\
    \    -- This implies that a^2 must be divisible by a.\n    if math.abs(a) % math.abs(a^2)\
    \ == 0 then\n        return true\n    else\n        return false\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
