name: HumanEval_131_digits
language: lua
results:
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local prod = 1\n  local digits = tostring(n)\n  for i = 1, #digits do\n   \
    \ local digit = tonumber(digits:sub(i, i))\n    if digit % 2 == 1 then\n     \
    \ prod = prod * digit\n    end\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ez6bbxd.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0ez6bbxd.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\t\
    local odd = 1\n\tfor i = 1, #tostring(n) do\n\t\tlocal x = tonumber(tostring(n):sub(i,\
    \ i))\n\t\tif x % 2 == 1 then\n\t\t\todd = odd * x\n\t\tend\n\tend\n\treturn odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzx46098.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptzx46098.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    local result = 1\n    while n > 0 do\n        if n % 2 == 1 then\n      \
    \      result = result * (n % 10)\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnb0i1ld.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfnb0i1ld.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local product = 1\n  for digit in tostring(n):gmatch('.') do\n    local value\
    \ = tonumber(digit)\n    if value % 2 == 1 then\n      product = product * value\n\
    \    end\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0rodpyl.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpp0rodpyl.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    if not (n > 0) then\n        return 0\n    end\n    local sum = 1\n    local\
    \ prod = 1\n    while n > 0 do\n        sum = n % 10\n        if sum % 2 ~= 0\
    \ then\n            prod = prod * sum\n        end\n        n = (n - sum) / 10\n\
    \    end\n    return prod\nend\nassert(digits(1) == 1)\nassert(digits(4) == 0)\n\
    assert(digits(235) == 15)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxwn4t4re.lua:26: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpxwn4t4re.lua:26: in main chunk\n\t[C]: in ?\n"
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  -- print('digits:', n)\n  local prod = 1\n  while n > 0 do\n    local r = n\
    \ % 10\n    if r % 2 == 1 then\n      prod = prod * r\n    end\n    n = n // 10\n\
    \  end\n  return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnm_g7q2.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwnm_g7q2.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n == 0 then return 0 end\n  local sum = 1\n  for i = 1, #tostring(n) do\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      sum = sum * digit\n\
    \    end\n    n = (n - digit) / 10\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqc14_8q.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpiqc14_8q.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local function product(digit)\n    local product = 1\n    for i = 1, #digit\
    \ do\n      if digit[i] % 2 ~= 0 then\n        product = product * digit[i]\n\
    \      end\n    end\n    return product\n  end\n  local digit = {}\n  while n\
    \ > 0 do\n    local d = n % 10\n    digit[#digit + 1] = d\n    n = (n - d) / 10\n\
    \  end\n  return product(digit)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05rsikkm.lua:38:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp05rsikkm.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local prod = 1\n  for d in string.gmatch(tostring(n), \"%d\") do\n    d = tonumber(d)\n\
    \    if d % 2 == 1 then\n      prod = prod * d\n    end\n  end\n  return prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfbg7qg_z.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfbg7qg_z.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    local product = 1\n    while n > 0 do\n        local r = n % 10\n       \
    \ if r % 2 == 1 then\n            product = product * r\n        end\n       \
    \ n = (n - r) / 10\n    end\n    return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpch77vu7v.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpch77vu7v.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrfb_z8b.lua:17:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpcrfb_z8b.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\t\
    local str = tostring(n)\n\tlocal sum = 1\n\tfor i = 1, #str do\n\t\tlocal dig\
    \ = tonumber(str:sub(i, i))\n\t\tif dig % 2 == 1 then\n\t\t\tsum = sum * dig\n\
    \t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wj_4rzm.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_wj_4rzm.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local res = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n\
    \      res = res * d\n    end\n    n = (n - d) / 10\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7bd5f85.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi7bd5f85.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    if n == 0 then\n        return 0\n    else\n        local digit = n % 10\n\
    \        if digit % 2 == 1 then\n            return digit * digits(math.floor(n\
    \ / 10))\n        else\n            return digits(math.floor(n / 10))\n      \
    \  end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxuwf5zby.lua:26:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpxuwf5zby.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    -- ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_u_x41d.lua:17:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmp4_u_x41d.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    local total = 1\n    while n > 0 do\n        local d = n % 10\n        if\
    \ d % 2 == 1 then\n            total = total * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpi5ms1b.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplpi5ms1b.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local res = 1\n  while n > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n\
    \      res = res * r\n    end\n    n = math.floor(n / 10)\n  end\n  return res\n\
    end\nprint(digits(1))\nprint(digits(4))\nprint(digits(235))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "1\n1\n15\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaql9coc8.lua:34:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpaql9coc8.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local p = 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n\
    \      p = p * d\n    end\n    n = (n - d) / 10\n  end\n  return p\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipc_y5rd.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpipc_y5rd.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \    if n < 10 then\n        return (n % 2) * n\n    else\n        local d = n\
    \ % 10\n        return (d % 2) * d * digits(math.floor(n / 10))\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qz_65dq.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp6qz_65dq.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\t\
    local sum = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\
    \t\t\tsum = sum * d\n\t\tend\n\t\tn = (n - d) / 10\n\tend\n\treturn sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4osm4efp.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp4osm4efp.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
