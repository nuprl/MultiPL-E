name: HumanEval_9_rolling_max
language: lua
prompt: "-- From a given table of integers, generate a table of rolling maximum element\
  \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3, 2,\
  \ 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2, 3,\
  \ 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4, 4})\n\
  \    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local t = {}\n    local max = -math.huge\n    for i,v in ipairs(numbers)\
    \ do\n        if v > max then\n            max = v\n        end\n        t[i]\
    \ = max\n    end\n    return t\nend", "  local len = #numbers\n  local res = {}\n\
    \  local current_max = 0\n  for i=1,len do\n    if current_max < numbers[i] then\n\
    \      current_max = numbers[i]\n    end\n    res[i] = current_max\n  end\n  return\
    \ res\nend", "    local length = #numbers\n    local result = {}\n    local current_max\
    \ = numbers[1]\n    result[1] = current_max\n    for i = 2, length do\n      \
    \  local next_number = numbers[i]\n        if next_number > current_max then\n\
    \            current_max = next_number\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend", "    local list_max = {}\n    local current_max\
    \ = nil\n    for _, number in ipairs(numbers) do\n        if current_max == nil\
    \ or number > current_max then\n            current_max = number\n        end\n\
    \        table.insert(list_max, current_max)\n    end\n    return list_max\nend",
  "  local res = {}\n  for i = 1, #numbers do\n    res[i] = math.max(numbers[i], res[i\
    \ - 1] or 0)\n  end\n  return res\nend", "\tassert(type(numbers) == \"table\"\
    )\n\tlocal max_at_time = {}\n\tlocal max_value = numbers[1]\n\tfor i = 1, #numbers\
    \ do\n\t\tmax_value = math.max(max_value, numbers[i])\n\t\tmax_at_time[i] = max_value\n\
    \tend\n\treturn max_at_time\nend", "    local max = numbers[1]\n    local result\
    \ = {max}\n    for i = 2, #numbers do\n        max = math.max(max, numbers[i])\n\
    \        result[i] = max\n    end\n    return result\nend", "  local result =\
    \ {}\n  local max = numbers[1]\n  result[1] = max\n  for i=2,#numbers do\n   \
    \ if numbers[i] > max then\n      max = numbers[i]\n    end\n    result[i] = max\n\
    \  end\n  return result\nend", "    local result = {}\n    local maximum = -math.huge\n\
    \    for i = 1, #numbers do\n        maximum = math.max(maximum, numbers[i])\n\
    \        result[i] = maximum\n    end\n    return result\nend", "    local result\
    \ = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n    for\
    \ i=2,#numbers do\n        local number = numbers[i]\n        if number > current_max\
    \ then\n            current_max = number\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend", "  local max = numbers[1]\n  local maxes =\
    \ {max}\n  for i = 2, #numbers do\n    max = math.max(max, numbers[i])\n    maxes[i]\
    \ = max\n  end\n  return maxes\nend", "    local result = {}\n    local max =\
    \ -1\n    for i = 1, #numbers do\n        max = math.max(max, numbers[i])\n  \
    \      result[i] = max\n    end\n    return result\nend", "    local res = {numbers[1]}\n\
    \    for i=2,#numbers do\n        res[i] = math.max(res[i-1], numbers[i])\n  \
    \  end\n    return res\nend", "    local result = {}\n    local max = nil\n  \
    \  for i = 1, #numbers do\n        if max == nil or numbers[i] > max then\n  \
    \          max = numbers[i]\n        end\n        result[i] = max\n    end\n \
    \   return result\nend", "    local max = 0\n    local result = {}\n    for _,\
    \ number in ipairs(numbers) do\n        if number > max then\n            max\
    \ = number\n        end\n        table.insert(result, max)\n    end\n    return\
    \ result\nend", "\tlocal result = {}\n\tlocal max = -math.huge\n\tfor i = 1, #numbers\
    \ do\n\t\tif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\t\tresult[i]\
    \ = max\n\tend\n\treturn result\nend", "  local result = {}\n  local current_max\
    \ = numbers[1]\n  result[1] = current_max\n  for i = 2, #numbers do\n    local\
    \ num = numbers[i]\n    if num > current_max then\n      current_max = num\n \
    \   end\n    result[i] = current_max\n  end\n  return result\nend", "  local max\
    \ = numbers[1]\n  local maximums = {max}\n  for i = 2, #numbers do\n    if numbers[i]\
    \ > max then\n      max = numbers[i]\n    end\n    maximums[i] = max\n  end\n\
    \  return maximums\nend", "  local result = {}\n  local maximum = numbers[1]\n\
    \  for i, v in ipairs(numbers) do\n    maximum = math.max(maximum, v)\n    result[i]\
    \ = maximum\n  end\n  return result\nend", "    local result = {}\n    local current_max\
    \ = -math.huge\n    for i, number in ipairs(numbers) do\n        current_max =\
    \ math.max(current_max, number)\n        result[i] = current_max\n    end\n  \
    \  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
