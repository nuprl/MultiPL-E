name: HumanEval_47_median
language: lua
results:
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  -- Sort l first\n  local tmp = {}\n  for i, v in ipairs(l) do\n\
    \    tmp[i] = v\n  end\n  table.sort(tmp)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpw38_l77r.lua:24: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assert(type(l) == \"table\", \"expected table\")\n    local n\
    \ = #l\n    assert(n > 0, \"expected non-empty table\")\n    if n % 2 == 0 then\n\
    \        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[math.ceil(n\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91gzhs7n.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp91gzhs7n.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal l = sorted(l)\n\tlocal n = #l\n\treturn (l[(n+1)/2] + l[(n+2)/2])\
    \ / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0az6bze.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpa0az6bze.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa0az6bze.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal n = #l\n\tif n == 0 then return nil end\n\tif n == 1 then\
    \ return l[1] end\n\t\n\tlocal t = {}\n\tfor i, v in ipairs(l) do\n\t\tt[#t +\
    \ 1] = v\n\tend\n\t\n\ttable.sort(t)\n\t\n\tif n % 2 == 0 then\n\t\treturn (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local temp = clone(l)\n  sort(temp)\n  if #temp % 2 == 0 then\n\
    \    return (temp[#temp/2] + temp[#temp/2+1]) / 2\n  else\n    return temp[math.ceil(#temp/2)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68o277b_.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmp68o277b_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp68o277b_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return nil\n    end\n    local e = {}\n\
    \    for _, v in ipairs(l) do\n        e[#e + 1] = v\n    end\n    table.sort(e)\n\
    \    if #e % 2 == 0 then\n        return (e[#e / 2] + e[#e / 2 + 1]) / 2\n   \
    \ else\n        return e[math.ceil(#e / 2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal function comp(a, b)\n\t\treturn a < b\n\tend\n\tlocal l2\
    \ = list.copy(l)\n\ttable.sort(l2, comp)\n\tlocal n = #l2\n\tlocal m = math.floor(n\
    \ / 2)\n\tif n % 2 == 0 then\n\t\treturn (l2[m] + l2[m + 1]) / 2\n\telse\n\t\t\
    return l2[m + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ke5uk79.lua:10:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp9ke5uk79.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9ke5uk79.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if not l then\n    return nil\n  end\n  local ll = copy(l)\n  table.sort(ll)\n\
    \  local n = #ll\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    local m = n / 2\n    return (ll[m] + ll[m + 1]) / 2\n  else\n    return ll[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouqgjz78.lua:10:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpouqgjz78.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpouqgjz78.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sl = quick_sort(l)\n    local n = #sl\n    if n == 0 then\n\
    \        return 0\n    elseif n % 2 == 1 then\n        return sl[math.ceil(n/2)]\n\
    \    else\n        return (sl[n/2] + sl[n/2+1]) / 2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplsdvfzwj.lua:7:\
    \ attempt to call a nil value (global 'quick_sort')\nstack traceback:\n\t/tmp/tmplsdvfzwj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplsdvfzwj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal sort = table.sort\n\tlocal len = #l\n\tsort(l)\n\tlocal m\
    \ = len % 2 == 0 and (l[len / 2] + l[len / 2 + 1]) / 2 or l[(len + 1) / 2]\n\t\
    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal sl = _.sort(l)\n\tlocal half = math.floor(#sl / 2)\n\tif\
    \ #sl % 2 == 0 then\n\t\treturn (sl[half] + sl[half + 1]) / 2\n\telse\n\t\treturn\
    \ sl[half + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswjxop0b.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpswjxop0b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpswjxop0b.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = median_copy(l)\n    table.sort(m)\n    local n = #m\n\
    \    if n == 0 then\n        return nil\n    elseif n % 2 == 0 then\n        return\
    \ (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[math.ceil(n / 2)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7bn7xox.lua:7:\
    \ attempt to call a nil value (global 'median_copy')\nstack traceback:\n\t/tmp/tmpr7bn7xox.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpr7bn7xox.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(t, v)\n\
    \tend\n\ttable.sort(t)\n\tlocal i = #t\n\tif i % 2 == 0 then\n\t\treturn (t[i/2]\
    \ + t[i/2+1]) / 2\n\telse\n\t\treturn t[(i+1)/2]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, x in ipairs(l) do\n        t[#t + 1]\
    \ = x\n    end\n    if #t == 0 then\n        return nil\n    end\n    table.sort(t)\n\
    \    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n   \
    \ else\n        return t[math.ceil(#t / 2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assertx.is_table(l)\n    assertx.all_are(l, 'number')\n    local\
    \ n = #l\n    assertx.gt(n, 0)\n    table.sort(l)\n    local index = math.floor(n\
    \ / 2)\n    if n % 2 == 0 then\n        return (l[index] + l[index + 1]) / 2\n\
    \    else\n        return l[index + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixgv65u1.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmpixgv65u1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpixgv65u1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local num = #l\n  local m = math.floor(num / 2)\n  local n = num\
    \ % 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmp9rvq2esh.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal list = table.copy(l)\n\ttable.sort(list)\n\tlocal length\
    \ = #list\n\tlocal middle = length/2\n\tif not math.fmod(length, 2) then\n\t\t\
    return (list[middle] + list[middle+1])/2\n\telse\n\t\treturn list[math.ceil(middle)]\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bojz_qj.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp2bojz_qj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2bojz_qj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for k, v in pairs(l) do\n        m[k] = v\n\
    \    end\n    table.sort(m)\n    if #m % 2 == 0 then\n        return (m[#m / 2]\
    \ + m[#m / 2 + 1]) / 2\n    else\n        return m[(#m + 1) / 2]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = sorted_keys(l)\n  if #t % 2 == 0 then\n    return (t[#t/2]\
    \ + t[#t/2+1]) / 2\n  else\n    return t[(#t+1)/2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpon1jfoxo.lua:7:\
    \ attempt to call a nil value (global 'sorted_keys')\nstack traceback:\n\t/tmp/tmpon1jfoxo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpon1jfoxo.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if not l or #l == 0 then\n    return nil\n  end\n  local sorted\
    \ = {}\n  for i, v in ipairs(l) do\n    sorted[i] = v\n  end\n  table.sort(sorted)\n\
    \  local len = #sorted\n  if len % 2 == 0 then\n    return (sorted[len / 2] +\
    \ sorted[len / 2 + 1]) / 2\n  else\n    return sorted[math.ceil(len / 2)]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
