language: lua
name: HumanEval_47_median
results:
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  -- Sort l first\n  local tmp = {}\n  for i, v in ipairs(l) do\n\
    \    tmp[i] = v\n  end\n  table.sort(tmp)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw38_l77r.lua:24: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assert(type(l) == \"table\", \"expected table\")\n    local n\
    \ = #l\n    assert(n > 0, \"expected non-empty table\")\n    if n % 2 == 0 then\n\
    \        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[math.ceil(n\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91gzhs7n.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp91gzhs7n.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal l = sorted(l)\n\tlocal n = #l\n\treturn (l[(n+1)/2] + l[(n+2)/2])\
    \ / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0az6bze.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpa0az6bze.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa0az6bze.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal n = #l\n\tif n == 0 then return nil end\n\tif n == 1 then\
    \ return l[1] end\n\t\n\tlocal t = {}\n\tfor i, v in ipairs(l) do\n\t\tt[#t +\
    \ 1] = v\n\tend\n\t\n\ttable.sort(t)\n\t\n\tif n % 2 == 0 then\n\t\treturn (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local temp = clone(l)\n  sort(temp)\n  if #temp % 2 == 0 then\n\
    \    return (temp[#temp/2] + temp[#temp/2+1]) / 2\n  else\n    return temp[math.ceil(#temp/2)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68o277b_.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmp68o277b_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp68o277b_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return nil\n    end\n    local e = {}\n\
    \    for _, v in ipairs(l) do\n        e[#e + 1] = v\n    end\n    table.sort(e)\n\
    \    if #e % 2 == 0 then\n        return (e[#e / 2] + e[#e / 2 + 1]) / 2\n   \
    \ else\n        return e[math.ceil(#e / 2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal function comp(a, b)\n\t\treturn a < b\n\tend\n\tlocal l2\
    \ = list.copy(l)\n\ttable.sort(l2, comp)\n\tlocal n = #l2\n\tlocal m = math.floor(n\
    \ / 2)\n\tif n % 2 == 0 then\n\t\treturn (l2[m] + l2[m + 1]) / 2\n\telse\n\t\t\
    return l2[m + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ke5uk79.lua:10:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp9ke5uk79.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp9ke5uk79.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if not l then\n    return nil\n  end\n  local ll = copy(l)\n  table.sort(ll)\n\
    \  local n = #ll\n  if n == 0 then\n    return nil\n  elseif n % 2 == 0 then\n\
    \    local m = n / 2\n    return (ll[m] + ll[m + 1]) / 2\n  else\n    return ll[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouqgjz78.lua:10:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpouqgjz78.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpouqgjz78.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sl = quick_sort(l)\n    local n = #sl\n    if n == 0 then\n\
    \        return 0\n    elseif n % 2 == 1 then\n        return sl[math.ceil(n/2)]\n\
    \    else\n        return (sl[n/2] + sl[n/2+1]) / 2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplsdvfzwj.lua:7:\
    \ attempt to call a nil value (global 'quick_sort')\nstack traceback:\n\t/tmp/tmplsdvfzwj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplsdvfzwj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal sort = table.sort\n\tlocal len = #l\n\tsort(l)\n\tlocal m\
    \ = len % 2 == 0 and (l[len / 2] + l[len / 2 + 1]) / 2 or l[(len + 1) / 2]\n\t\
    return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal sl = _.sort(l)\n\tlocal half = math.floor(#sl / 2)\n\tif\
    \ #sl % 2 == 0 then\n\t\treturn (sl[half] + sl[half + 1]) / 2\n\telse\n\t\treturn\
    \ sl[half + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswjxop0b.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmpswjxop0b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpswjxop0b.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = median_copy(l)\n    table.sort(m)\n    local n = #m\n\
    \    if n == 0 then\n        return nil\n    elseif n % 2 == 0 then\n        return\
    \ (m[n / 2] + m[n / 2 + 1]) / 2\n    else\n        return m[math.ceil(n / 2)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7bn7xox.lua:7:\
    \ attempt to call a nil value (global 'median_copy')\nstack traceback:\n\t/tmp/tmpr7bn7xox.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpr7bn7xox.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(t, v)\n\
    \tend\n\ttable.sort(t)\n\tlocal i = #t\n\tif i % 2 == 0 then\n\t\treturn (t[i/2]\
    \ + t[i/2+1]) / 2\n\telse\n\t\treturn t[(i+1)/2]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, x in ipairs(l) do\n        t[#t + 1]\
    \ = x\n    end\n    if #t == 0 then\n        return nil\n    end\n    table.sort(t)\n\
    \    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n   \
    \ else\n        return t[math.ceil(#t / 2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assertx.is_table(l)\n    assertx.all_are(l, 'number')\n    local\
    \ n = #l\n    assertx.gt(n, 0)\n    table.sort(l)\n    local index = math.floor(n\
    \ / 2)\n    if n % 2 == 0 then\n        return (l[index] + l[index + 1]) / 2\n\
    \    else\n        return l[index + 1]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixgv65u1.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmpixgv65u1.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpixgv65u1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local num = #l\n  local m = math.floor(num / 2)\n  local n = num\
    \ % 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9rvq2esh.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal list = table.copy(l)\n\ttable.sort(list)\n\tlocal length\
    \ = #list\n\tlocal middle = length/2\n\tif not math.fmod(length, 2) then\n\t\t\
    return (list[middle] + list[middle+1])/2\n\telse\n\t\treturn list[math.ceil(middle)]\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2bojz_qj.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp2bojz_qj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2bojz_qj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = {}\n    for k, v in pairs(l) do\n        m[k] = v\n\
    \    end\n    table.sort(m)\n    if #m % 2 == 0 then\n        return (m[#m / 2]\
    \ + m[#m / 2 + 1]) / 2\n    else\n        return m[(#m + 1) / 2]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = sorted_keys(l)\n  if #t % 2 == 0 then\n    return (t[#t/2]\
    \ + t[#t/2+1]) / 2\n  else\n    return t[(#t+1)/2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpon1jfoxo.lua:7:\
    \ attempt to call a nil value (global 'sorted_keys')\nstack traceback:\n\t/tmp/tmpon1jfoxo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpon1jfoxo.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if not l or #l == 0 then\n    return nil\n  end\n  local sorted\
    \ = {}\n  for i, v in ipairs(l) do\n    sorted[i] = v\n  end\n  table.sort(sorted)\n\
    \  local len = #sorted\n  if len % 2 == 0 then\n    return (sorted[len / 2] +\
    \ sorted[len / 2 + 1]) / 2\n  else\n    return sorted[math.ceil(len / 2)]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local s = table.sort(l)\n  local n = #s\n  if math.fmod(n, 2) ==\
    \ 0 then\n    return (s[n/2] + s[n/2+1]) / 2\n  else\n    return s[math.ceil(n/2)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqd8v1cuy.lua:8:\
    \ attempt to get length of a nil value (local 's')\nstack traceback:\n\t/tmp/tmpqd8v1cuy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpqd8v1cuy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = table.copy(l)\n  table.sort(t)\n  local s = #t\n  if\
    \ s == 0 then\n    return 0\n  elseif s % 2 == 0 then\n    return (t[s / 2] +\
    \ t[s / 2 + 1]) / 2\n  else\n    return t[math.ceil(s / 2)]\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpusukg627.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpusukg627.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpusukg627.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = copy(l)\n  table.sort(t)\n  local len = #t\n  if len\
    \ == 0 then\n    return 0\n  elseif len % 2 == 0 then\n    return (t[len / 2]\
    \ + t[len / 2 + 1]) / 2\n  else\n    return t[math.ceil(len / 2)]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdamt7r8x.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpdamt7r8x.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdamt7r8x.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  return torch.median(torch.Tensor(l))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps0owk3j0.lua:7:\
    \ attempt to index a nil value (global 'torch')\nstack traceback:\n\t/tmp/tmps0owk3j0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps0owk3j0.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return nil\n    end\n    local t = util.sort(l)\n\
    \    local m = #t\n    if m % 2 == 0 then\n        return (t[m / 2] + t[m / 2\
    \ + 1]) / 2\n    else\n        return t[math.ceil(m / 2)]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoh3k723n.lua:10:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpoh3k723n.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpoh3k723n.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = l\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzevjzodv.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal n = #l\n\tif n == 0 then return 0 end\n\ttable.sort(l)\n\t\
    local mid = math.floor(n / 2)\n\tif n % 2 == 0 then\n\t\treturn (l[mid] + l[mid\
    \ + 1]) / 2\n\telse\n\t\treturn l[mid + 1]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    local n = 0\n    for k, v in pairs(l) do\n\
    \        n = n + 1\n        t[n] = v\n    end\n    table.sort(t)\n    local m\
    \ = n / 2\n    if n % 2 == 0 then\n        return (t[m] + t[m + 1]) / 2\n    else\n\
    \        return t[math.ceil(m)]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local copy = table.copy(l)\n    table.sort(copy)\n    local n\
    \ = #copy\n    if n == 0 then\n        return 0\n    elseif n % 2 == 0 then\n\
    \        return (copy[n / 2] + copy[n / 2 + 1]) / 2\n    else\n        return\
    \ copy[math.ceil(n / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiirlqgte.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpiirlqgte.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiirlqgte.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = math.floor(#l / 2)\n    if #l % 2 == 0 then\n     \
    \   return (l[m] + l[m + 1]) / 2\n    else\n        return l[m + 1]\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb99ttus2.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpb99ttus2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal m1, m2\n\tif #l % 2 == 0 then\n\t\tm1 = m2 = 0\n\t\tlocal\
    \ n = #l\n\t\tfor i = 1, n / 2 do\n\t\t\tm1 = m1 + l[i]\n\t\t\tm2 = m2 + l[n -\
    \ i + 1]\n\t\tend\n\t\treturn (m1 + m2) / n\n\telse\n\t\tlocal n = math.floor(#l\
    \ / 2)\n\t\treturn l[n + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf0oy0688.lua:9: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\ttable.sort(l)\n\tlocal size = #l\n\tlocal m = size / 2\n\treturn\
    \ (size % 2 == 0) and (l[m] + l[m + 1]) / 2 or l[math.ceil(m)]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local ll = copy(l)\n  local ln = #ll\n  local lm = math.floor(ln\
    \ / 2)\n  table.sort(ll)\n  if ln % 2 == 0 then\n    return (ll[lm] + ll[lm +\
    \ 1]) / 2\n  else\n    return ll[lm + 1]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhmnw2j_.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpvhmnw2j_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvhmnw2j_.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  return select(2, list.sort(l))[math.ceil(#l / 2)]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5hqicknd.lua:7:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmp5hqicknd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5hqicknd.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local rt = {}\n  for _, v in ipairs(l) do\n    rt[#rt + 1] = v\n\
    \  end\n  table.sort(rt)\n  if #rt % 2 == 0 then\n    return (rt[#rt / 2] + rt[#rt\
    \ / 2 + 1]) / 2\n  else\n    return rt[math.ceil(#rt / 2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  local count = table.getn(l)\n  if (count % 2)\
    \ == 0 then\n    local m = count / 2\n    return (l[m] + l[m + 1]) / 2\n  else\n\
    \    return l[math.ceil(count / 2)]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbhizfida.lua:8:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpbhizfida.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpbhizfida.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2\
    \ == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrxqvlve.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpwrxqvlve.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwrxqvlve.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tif #l < 1 then return nil end\n\tif #l == 1 then return l[1] end\n\
    \t\n\ttable.sort(l)\n\t\n\tlocal n = #l\n\tlocal center = n/2\n\t\n\tif n % 2\
    \ == 0 then\n\t\treturn (l[center] + l[center+1]) / 2\n\telse\n\t\treturn l[math.ceil(center)]\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return nil\n    end\n    table.sort(l)\n\
    \    if #l % 2 == 0 then\n        return (l[#l / 2] + l[#l / 2 + 1]) / 2\n   \
    \ else\n        return l[(#l + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local s = sorted(l)\n  local n = #s\n  if n == 0 then\n    return\
    \ nil\n  elseif n % 2 == 0 then\n    return (s[n/2] + s[n/2+1]) / 2\n  else\n\
    \    return s[math.ceil(n/2)]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp41g5a80u.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmp41g5a80u.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp41g5a80u.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assert(l ~= nil, 'Nil argument for median')\n    local n = #l\n\
    \    if n < 1 then\n        error('Empty list for median')\n    end\n    table.sort(l)\n\
    \    local m\n    if n % 2 == 0 then\n        m = (l[n / 2] + l[n / 2 + 1]) /\
    \ 2\n    else\n        m = l[math.ceil(n / 2)]\n    end\n    return m\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local m = #l\n  if m == 0 then return 0 end\n  l = sort(l)\n  if\
    \ m % 2 == 0 then\n    return (l[m / 2] + l[m / 2 + 1]) / 2\n  else\n    return\
    \ l[(m + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprlnxdlo2.lua:9:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmprlnxdlo2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprlnxdlo2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then return nil end\n  local min, max = math.min(unpack(l)),\
    \ math.max(unpack(l))\n  return (min + max) / 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphsz46_8c.lua:8:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmphsz46_8c.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphsz46_8c.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    return quantile(l, 0.5)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mxe00hp.lua:7:\
    \ attempt to call a nil value (global 'quantile')\nstack traceback:\n\t/tmp/tmp5mxe00hp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5mxe00hp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local list = copylist(l)\n  local n = #list\n  assert(n > 0, \"\
    empty list\")\n  table.sort(list)\n  local a = list[math.floor(n/2) + 1]\n  if\
    \ n % 2 == 0 then\n    local b = list[math.floor(n/2)]\n    return (a + b) / 2\n\
    \  else\n    return a\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1kpkqmm6.lua:7:\
    \ attempt to call a nil value (global 'copylist')\nstack traceback:\n\t/tmp/tmp1kpkqmm6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1kpkqmm6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local len = #l\n    local middle = math.floor(len\
    \ / 2) + 1\n    if len % 2 == 0 then\n        return (l[middle - 1] + l[middle])\
    \ / 2\n    else\n        return l[middle]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = copy(l)\n  table.sort(t)\n  local n = #t\n  if n % 2\
    \ == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwrxqvlve.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpwrxqvlve.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwrxqvlve.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  assertx.is_table(l)\n  local m = #l\n  if m == 0 then\n    return\
    \ nil\n  end\n  local d = 0\n  if m % 2 == 0 then\n    d = 0.5\n  end\n  return\
    \ (l[(m+1)/2-d] + l[(m+1)/2+d]) / 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdqwt2ps.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmpwdqwt2ps.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpwdqwt2ps.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  local n = #l\n  local middle = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return (l[middle] + l[middle + 1]) / 2\n  else\n\
    \    return l[middle + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    return np.median(list2array(l))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnzbbct05.lua:7:\
    \ attempt to index a nil value (global 'np')\nstack traceback:\n\t/tmp/tmpnzbbct05.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpnzbbct05.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sort(l)\n    local count = #sorted\n    local\
    \ middle = math.floor(count / 2)\n    if count % 2 == 0 then\n        return (sorted[middle]\
    \ + sorted[middle + 1]) / 2\n    else\n        return sorted[middle + 1]\n   \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsz6_jhwb.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpsz6_jhwb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsz6_jhwb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local n = #l\n    if n == 0 then\n       \
    \ return 0\n    elseif n % 2 == 0 then\n        return (l[n / 2] + l[n / 2 + 1])\
    \ / 2\n    else\n        return l[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = table.sort(l)\n  local n = #t\n  if n % 2 == 0 then\n\
    \    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return t[(n + 1) / 2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptaevmm44.lua:8:\
    \ attempt to get length of a nil value (local 't')\nstack traceback:\n\t/tmp/tmptaevmm44.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmptaevmm44.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return\n    end\n    local u = {}\n\
    \    for _, v in ipairs(l) do\n        u[#u + 1] = v\n    end\n    table.sort(u)\n\
    \    local ln = #u\n    if ln % 2 == 0 then\n        return (u[ln / 2] + u[ln\
    \ / 2 + 1]) / 2\n    else\n        return u[(ln + 1) / 2]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return nil\n  end\n  table.sort(l)\n  local\
    \ middle = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return (l[middle] +\
    \ l[middle + 1]) / 2\n  else\n    return l[middle + 1]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assert(#l > 0, \"Can't compute median of empty list\")\n    local\
    \ middle = math.floor(#l / 2) + 1\n    local sortedList = quicksort(l)\n    if\
    \ #l % 2 == 0 then\n        return (sortedList[middle] + sortedList[middle-1])\
    \ / 2\n    else\n        return sortedList[middle]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqbmu0jf.lua:9:\
    \ attempt to call a nil value (global 'quicksort')\nstack traceback:\n\t/tmp/tmplqbmu0jf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmplqbmu0jf.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local a = copy(l)\n  sort(a)\n  local n = length(a)\n  if n ==\
    \ 0 then\n    return nil\n  elseif n % 2 == 0 then\n    return (a[n / 2] + a[n\
    \ / 2 + 1]) / 2\n  else\n    return a[math.ceil(n / 2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5yojez_.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpd5yojez_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd5yojez_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = table.copy(l)\n    table.sort(t)\n    local n = #t\n\
    \    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n\
    \        return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bjoynlu.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmp8bjoynlu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8bjoynlu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = sort(l)\n  local len = #sorted\n  local mid = math.floor(len\
    \ / 2)\n  if len % 2 == 0 then\n    return (sorted[mid] + sorted[mid + 1]) / 2\n\
    \  else\n    return sorted[mid + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxaarwid2.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpxaarwid2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxaarwid2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tassertx.is_table(l)\n\tassertx.is_nonempty_array(l)\n\t\n\tlocal\
    \ copy = list.copy(l)\n\ttable.sort(copy)\n\t\n\tlocal mid = math.floor(#copy\
    \ / 2)\n\tlocal is_even = #copy % 2 == 0\n\t\n\tif is_even then\n\t\treturn (copy[mid]\
    \ + copy[mid + 1]) / 2\n\telse\n\t\treturn copy[mid + 1]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7urw1mne.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmp7urw1mne.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7urw1mne.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  -- Sort input.\n  local t = {}\n  for k, v in pairs(l) do\n   \
    \ table.insert(t, v)\n  end\n  table.sort(t)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpunmu48fj.lua:24: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = sorted(l)\n\tlocal n = #t\n\tif n == 0 then\n\t\treturn\
    \ nil\n\telseif n % 2 == 0 then\n\t\treturn (t[n/2] + t[n/2+1]) / 2\n\telse\n\t\
    \treturn t[(n+1)/2]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxof6564w.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpxof6564w.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxof6564w.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local sorted = bubble_sort(l)\n  local n = #sorted\n  if n == 0\
    \ then\n    return 0\n  elseif n % 2 == 0 then\n    return (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n  else\n    return sorted[math.ceil(n/2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6n18ai9.lua:7:\
    \ attempt to call a nil value (global 'bubble_sort')\nstack traceback:\n\t/tmp/tmpd6n18ai9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd6n18ai9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = keys(l)\n  table.sort(t)\n  return t[#t/2]\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqa9kdt9o.lua:7:\
    \ attempt to call a nil value (global 'keys')\nstack traceback:\n\t/tmp/tmpqa9kdt9o.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqa9kdt9o.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if type(l) ~= \"table\" then return nil end\n    if #l == 0 then\
    \ return nil end\n    local sorted = merge_sort(l)\n    local n = #sorted\n  \
    \  local m\n    if n % 2 == 0 then\n        m = (sorted[n/2] + sorted[n/2+1])\
    \ / 2\n    else\n        m = sorted[(n+1)/2]\n    end\n    return m\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ggfs8i.lua:9:\
    \ attempt to call a nil value (global 'merge_sort')\nstack traceback:\n\t/tmp/tmpn0ggfs8i.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn0ggfs8i.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l2 = table.sort(l)\n    local mid = #l2 / 2\n    if mid\
    \ ~= math.floor(mid) then\n        return (l2[mid] + l2[mid + 1]) / 2\n    else\n\
    \        return l2[mid]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6q_6obwy.lua:8:\
    \ attempt to get length of a nil value (local 'l2')\nstack traceback:\n\t/tmp/tmp6q_6obwy.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp6q_6obwy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return l[math.ceil(n / 2)]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l = table.sort(l)\n    local n = #l\n    if n%2 == 0 then\n\
    \        return (l[n/2] + l[n/2+1])/2\n    else\n        return l[(n+1)/2]\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxsautprk.lua:8:\
    \ attempt to get length of a nil value (local 'l')\nstack traceback:\n\t/tmp/tmpxsautprk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpxsautprk.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local m, tab = 0, {}\n  for i, v in ipairs(l) do\n    if i == 1\
    \ then\n      m = v\n    elseif i % 2 == 0 then\n      m = (tab[i/2] + v) / 2\n\
    \    else\n      tab[(i+1)/2] = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jfleoaa.lua:12:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp3jfleoaa.lua:12: in local 'candidate'\n\t/tmp/tmp3jfleoaa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  local size = #l\n  if (size % 2 == 0) then\n \
    \   return (l[size/2] + l[size/2+1]) / 2\n  else\n    return l[math.ceil(size/2)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local m = math.floor(#l / 2)\n    return #l % 2 == 0 and (l[m]\
    \ + l[m + 1]) / 2 or l[m + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjh_xhbl9.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpjh_xhbl9.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = table.copy(l)\n  table.sort(t)\n  return t[(#t + 1) /\
    \ 2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxuog8pia.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpxuog8pia.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxuog8pia.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local tmp = copy(l)\n  table.sort(tmp)\n  local i = math.floor(#tmp\
    \ / 2)\n  return (#tmp % 2 == 0) and ((tmp[i] + tmp[i + 1]) / 2) or tmp[i + 1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdqw5_nk3.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpdqw5_nk3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpdqw5_nk3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l2 = clone(l)\n    table.sort(l2)\n    local n = #l2\n\
    \    if n == 0 then\n        return nil\n    elseif n == 1 then\n        return\
    \ l2[1]\n    elseif n % 2 == 0 then\n        return (l2[n/2] + l2[n/2+1]) / 2\n\
    \    else\n        return l2[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgc96k3yh.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmpgc96k3yh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgc96k3yh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local tmp = {}\n  for _, v in ipairs(l) do\n    tmp[#tmp+1] = v\n\
    \  end\n  table.sort(tmp)\n  local n = #tmp\n  if n == 0 then\n    return 0\n\
    \  elseif n % 2 == 0 then\n    return (tmp[n/2] + tmp[n/2+1]) / 2\n  else\n  \
    \  return tmp[math.ceil(n/2)]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sum = 0\n    local count = 0\n    for i, v in ipairs(l)\
    \ do\n        sum = sum + v\n        count = count + 1\n    end\n    return (sum\
    \ / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8984jaa.lua:20:\
    \ expected: 8.0, actual: 171.66666666667\nstack traceback:\n\t/tmp/tmpa8984jaa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local ll = copy(l)\n  table.sort(ll)\n  local length = #ll\n  if\
    \ length % 2 == 0 then\n    local i = length / 2\n    return (ll[i] + ll[i + 1])\
    \ / 2\n  else\n    return ll[(length + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptje2h6fx.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmptje2h6fx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmptje2h6fx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local l2 = table.sort(table.copy(l))\n  local m = (table.size(l2)\
    \ - 1) / 2\n  if math.floor(m) == m then\n    return (l2[m] + l2[m + 1]) / 2\n\
    \  else\n    return l2[math.floor(m) + 1]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpspalvqca.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpspalvqca.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpspalvqca.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  assert(#l > 0, \"table must have at least one element\")\n  if\
    \ #l % 2 == 0 then\n    return 0.5 * (l[math.floor(#l/2)] + l[math.floor(#l/2)\
    \ + 1])\n  else\n    return l[math.floor(#l/2) + 1]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeype4vyo.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpeype4vyo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = copy(l)\n  sort(t)\n  local n = #t\n  if n == 0 then\n\
    \    return nil\n  elseif n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1])\
    \ / 2\n  else\n    return t[math.ceil(n / 2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphya9yh06.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmphya9yh06.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphya9yh06.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l_copy = l\n    table.sort(l_copy)\n    local n = #l_copy\n\
    \    if n % 2 == 0 then\n        return (l_copy[n / 2] + l_copy[n / 2 + 1]) /\
    \ 2\n    else\n        return l_copy[math.ceil(n / 2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return nil\n    end\n    local n = #l\n\
    \    local m = math.floor(n / 2)\n    if n % 2 == 0 then\n        return (sort(l)[m]\
    \ + sort(l)[m + 1]) / 2\n    else\n        return sort(l)[m + 1]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__2y5w5d.lua:15:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp__2y5w5d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp__2y5w5d.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    sort(t)\n    local r\n    if #t % 2 ==\
    \ 0 then\n        r = (t[#t / 2] + t[#t / 2 + 1]) / 2\n    else\n        r = t[(#t\
    \ + 1) / 2]\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv54f0kt.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpmv54f0kt.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmv54f0kt.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = sort(l)\n  local n = #t\n  return (t[n / 2] + t[(n -\
    \ 1) / 2]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvu5vm_jv.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpvu5vm_jv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvu5vm_jv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local s = l\n    table.sort(s)\n    if #s % 2 == 0 then\n   \
    \     return (s[#s / 2] + s[#s / 2 + 1]) / 2\n    else\n        return s[math.ceil(#s\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = table.pack(table.unpack(l))\n    table.sort(sorted)\n\
    \    local size = #sorted\n    if size == 0 then\n        return nil\n    elseif\
    \ size % 2 == 0 then\n        return (sorted[size / 2] + sorted[size / 2 + 1])\
    \ / 2\n    else\n        return sorted[(size + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local list = table.copy(l)\n  table.sort(list)\n  return list[math.ceil(#list\
    \ / 2)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpok53fzle.lua:7:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpok53fzle.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpok53fzle.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = math.ceil(#l / 2)\n  table.sort(l)\n  if #l % 2 == 0\
    \ then\n    return (l[n] + l[n + 1]) / 2\n  else\n    return l[n]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if n % 2 == 0 then\n        return (sorted[n/2] + sorted[n/2+1]) / 2\n  \
    \  else\n        return sorted[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0lf567i.lua:8:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpn0lf567i.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpn0lf567i.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, v in ipairs(l) do\n    t[#t + 1] = v\n \
    \ end\n  table.sort(t)\n  if #t % 2 == 0 then\n    return (t[#t / 2] + t[#t /\
    \ 2 + 1]) / 2\n  else\n    return t[(#t + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local tmp = deepcopy(l)\n    table.sort(tmp)\n    if #tmp % 2\
    \ == 0 then\n        -- even case\n        return (tmp[#tmp / 2] + tmp[#tmp /\
    \ 2 + 1]) / 2\n    else\n        -- odd case\n        return tmp[math.ceil(#tmp\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7tz_5d35.lua:7:\
    \ attempt to call a nil value (global 'deepcopy')\nstack traceback:\n\t/tmp/tmp7tz_5d35.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7tz_5d35.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    return mean(l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprz1g3p72.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprz1g3p72.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprz1g3p72.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local newl = {}\n    for i = 1, n do\n    \
    \    newl[i] = l[i]\n    end\n    table.sort(newl)\n    if n % 2 == 0 then\n \
    \       return (newl[n / 2] + newl[n / 2 + 1]) / 2\n    else\n        return newl[(n\
    \ + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if type(l) ~= \"table\" then\n        error(\"l must be a table\"\
    , 2)\n    end\n    local n = #l\n    if n == 0 then\n        return 0\n    end\n\
    \    if n == 1 then\n        return l[1]\n    end\n    local t = deepcopy(l)\n\
    \    table.sort(t)\n    local median_index = math.floor(n / 2)\n    if n % 2 ==\
    \ 0 then\n        return (t[median_index] + t[median_index + 1]) / 2\n    else\n\
    \        return t[median_index + 1]\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx74dm_rd.lua:17:\
    \ attempt to call a nil value (global 'deepcopy')\nstack traceback:\n\t/tmp/tmpx74dm_rd.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpx74dm_rd.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local tbl = {}\n  for _, v in ipairs(l) do\n    tbl[#tbl + 1] =\
    \ v\n  end\n  table.sort(tbl)\n  local mid = #tbl / 2\n  if #tbl % 2 == 0 then\n\
    \    return (tbl[mid] + tbl[mid + 1]) / 2\n  else\n    return tbl[math.ceil(mid)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = table.sort(l)\n    local k = #t\n    if k % 2 == 0\
    \ then\n        return (t[k/2] + t[k/2+1]) / 2\n    else\n        return t[(k+1)/2]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5rqnq959.lua:8:\
    \ attempt to get length of a nil value (local 't')\nstack traceback:\n\t/tmp/tmp5rqnq959.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5rqnq959.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local n = #l\n    if n % 2 == 0 then\n   \
    \     return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        return l[(n + 1)\
    \ / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do table.insert(t, v)\
    \ end\n    table.sort(t)\n    local n = #t\n    if n % 2 == 0 then\n        return\
    \ (t[n/2] + t[n/2+1]) / 2\n    else\n        return t[math.ceil(n/2)]\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local half = #l / 2\n  if #l % 2 == 0 then\n    return (l[half]\
    \ + l[half + 1]) / 2\n  else\n    return l[math.ceil(half)]\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpter6c2uz.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpter6c2uz.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  return (sum(l) / #l)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchov2dym.lua:7:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpchov2dym.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpchov2dym.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  if #l % 2 == 0 then\n    return (l[#l / 2] + l[#l\
    \ / 2 + 1]) / 2\n  else\n    return l[math.ceil(#l / 2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tassertx.is_table(l)\n\tassertx.is_nonempty_table(l)\n\tlocal t\
    \ = table.clone(l)\n\ttable.sort(t)\n\treturn get_middle_value(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe72tnr4_.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmpe72tnr4_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe72tnr4_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal list = {}\n\tlocal max, min = 0, math.huge\n\tfor _, v in\
    \ ipairs(l) do\n\t\tif v > max then max = v end\n\t\tif v < min then min = v end\n\
    \t\ttable.insert(list, v)\n\tend\n\ttable.sort(list)\n\treturn list[math.ceil(#list\
    \ / 2)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvaak3tus.lua:22:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpvaak3tus.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l = sort(l)\n    local c = #l\n    if math.mod(c, 2) ==\
    \ 0 then\n        return (l[c/2] + l[c/2+1]) / 2\n    else\n        return l[math.ceil(c/2)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiad0l3_6.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpiad0l3_6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiad0l3_6.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal r = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(r, v)\n\
    \tend\n\ttable.sort(r)\n\tlocal n = #r\n\tlocal m = math.floor(n / 2)\n\tif n\
    \ % 2 == 0 then\n\t\treturn (r[m] + r[m + 1]) / 2\n\telse\n\t\treturn r[m + 1]\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(t, v)\n\
    \tend\n\ttable.sort(t)\n\tlocal n = #t\n\tif n % 2 == 0 then\n\t\treturn (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local tmp = {}\n  for _,v in ipairs(l) do\n    tmp[#tmp+1] = v\n\
    \  end\n  table.sort(tmp)\n  local mid = #tmp / 2\n  if math.floor(mid) == mid\
    \ then\n    return (tmp[mid] + tmp[mid+1]) / 2\n  else\n    return tmp[math.ceil(mid)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local tbl = {}\n  for _, v in ipairs(l) do tbl[#tbl+1] = v end\n\
    \  table.sort(tbl)\n  local len = #tbl\n  local mid_idx = len / 2\n  if len %\
    \ 2 == 0 then\n    return (tbl[mid_idx] + tbl[mid_idx+1]) / 2\n  else\n    return\
    \ tbl[math.ceil(mid_idx)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local len = #l\n    local sorted = copy(l)\n    table.sort(sorted)\n\
    \    if len % 2 == 0 then\n        return (sorted[len / 2] + sorted[len / 2 +\
    \ 1]) / 2\n    else\n        return sorted[(len + 1) / 2]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiioi3wlv.lua:8:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpiioi3wlv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpiioi3wlv.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    table.sort(l)\n    if n % 2 == 0 then\n   \
    \     return (l[n/2] + l[n/2+1]) / 2\n    else\n        return l[math.ceil(n/2)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return 0\n  end\n  table.sort(l)\n  if #l\
    \ % 2 == 0 then\n    return (l[#l / 2] + l[#l / 2 + 1]) / 2\n  else\n    return\
    \ l[math.ceil(#l / 2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = tablex.deepcopy(l)\n  table.sort(t)\n  local n = #t\n\
    \  if n % 2 == 0 then\n    return (t[n / 2] + t[n / 2 + 1]) / 2\n  else\n    return\
    \ t[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplz5u8rz0.lua:7:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmplz5u8rz0.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplz5u8rz0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local s = table.concat(l, \" \")\n    s = \"{\" .. s .. \"}\"\
    \n    table.sort(l)\n    local n = #l\n    if n == 0 then\n        return nil\n\
    \    elseif n == 1 then\n        return l[1]\n    elseif n % 2 == 0 then\n   \
    \     local i1 = n / 2\n        local i2 = i1 + 1\n        return (l[i1] + l[i2])\
    \ / 2\n    else\n        local i = math.ceil(n / 2)\n        return l[i]\n   \
    \ end\nend\n_G[\"median\"] = median\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local lc = copy(l)\n  sort(lc)\n  local size = #lc\n  local m =\
    \ size/2 + 0.5\n  if size % 2 == 0 then\n    return (lc[m-1] + lc[m])/2\n  else\n\
    \    return lc[m]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhbfj8wr.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmplhbfj8wr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplhbfj8wr.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local values = {}\n  local min = math.huge\n  local max = -math.huge\n\
    \  local sum = 0\n  for _, value in ipairs(l) do\n    local new_value = tonumber(value)\n\
    \    if not new_value then\n      return 0\n    end\n    values[#values + 1] =\
    \ new_value\n    min = math.min(min, new_value)\n    max = math.max(max, new_value)\n\
    \    sum = sum + new_value\n  end\n  table.sort(values)\n  local count = #values\n\
    \  if count % 2 == 0 then\n    local m1 = values[count / 2]\n    local m2 = values[count\
    \ / 2 + 1]\n    return (m1 + m2) / 2\n  else\n    return values[math.ceil(count\
    \ / 2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local function search(s, e)\n        local m = math.floor((s\
    \ + e) / 2)\n        if s < e then\n            if m % 2 == 0 then\n         \
    \       return (l[m] + l[m + 1]) / 2\n            else\n                return\
    \ l[m]\n            end\n        else\n            return l[s]\n        end\n\
    \    end\n    local function rec(s, e)\n        if s < e then\n            local\
    \ m = math.floor((s + e) / 2)\n            local c = l[m]\n            local lm\
    \ = m - 1\n            local rm = m + 1\n            while lm >= s do\n      \
    \          if l[lm] > c then\n                    l[m] = l[lm]\n             \
    \       l[lm] = c\n                    m = lm\n                end\n         \
    \       lm = lm - 1\n            end\n            while rm <= e do\n         \
    \       if l[rm] < c then\n                    l[m] = l[rm]\n                \
    \    l[rm] = c\n                    m = rm\n                end\n            \
    \    rm = rm + 1\n            end\n            local mid = math.floor((s + e)\
    \ / 2)\n            if m < mid then\n                rec(m + 1, e)\n         \
    \   elseif m > mid then\n                rec(s, m - 1)\n            end\n    \
    \    end\n    end\n    local len = #l\n    rec(1, len)\n    return search(1, len)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1tm097s.lua:58:\
    \ expected: 8.0, actual: 6\nstack traceback:\n\t/tmp/tmpr1tm097s.lua:58: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  local middle = (1 + #l) / 2\n  if middle == math.floor(middle)\
    \ then\n    return (l[middle] + l[middle + 1]) / 2\n  else\n    return l[math.ceil(middle)]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8ytqoy2.lua:19:\
    \ expected: 3, actual: 3.5\nstack traceback:\n\t/tmp/tmpn8ytqoy2.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\treturn quantile(l, 0.5)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyw4ddf_e.lua:7:\
    \ attempt to call a nil value (global 'quantile')\nstack traceback:\n\t/tmp/tmpyw4ddf_e.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyw4ddf_e.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    assert(type(l) == \"table\", \"bad argument #1 to 'math_ext.median'\
    \ (table expected, got \" .. type(l) .. \")\")\n    assert(#l > 0, \"bad argument\
    \ #1 to 'math_ext.median' (table cannot be empty)\")\n    for _, v in ipairs(l)\
    \ do\n        assert(type(v) == \"number\", \"bad argument #1 to 'math_ext.median'\
    \ (number expected, got \" .. type(v) .. \")\")\n    end\n    local t = table_ext.copy(l)\n\
    \    table.sort(t)\n    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t\
    \ / 2 + 1]) / 2\n    else\n        return t[math.ceil(#t / 2)]\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30o307b0.lua:12:\
    \ attempt to index a nil value (global 'table_ext')\nstack traceback:\n\t/tmp/tmp30o307b0.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp30o307b0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    -- Sort elements\n    table.sort(l)\n    local n = #l\n    if\
    \ n % 2 == 0 then\n        -- Even number of elements, return the average of middle\
    \ elements\n        return (l[n / 2] + l[n / 2 + 1]) / 2\n    else\n        --\
    \ Odd number of elements, return the middle element\n        return l[(n + 1)\
    \ / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    return quantile(l, 0.5)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5mxe00hp.lua:7:\
    \ attempt to call a nil value (global 'quantile')\nstack traceback:\n\t/tmp/tmp5mxe00hp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5mxe00hp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977653
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tif #l == 0 then\n\t\treturn nil\n\tend\n\tif #l == 1 then\n\t\t\
    return l[1]\n\tend\n\tlocal m = nil\n\tif #l % 2 == 0 then\n\t\tm = (#l / 2) +\
    \ 1\n\telse\n\t\tm = math.floor(#l / 2) + 1\n\tend\n\tlocal a = nil\n\tfor i,\
    \ v in ipairs(l) do\n\t\tif i == m then\n\t\t\ta = v\n\t\tend\n\tend\n\treturn\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp502e5d3r.lua:31:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp502e5d3r.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if not is_table(l) then return error('Expected table for parameter\
    \ 1, got ' .. type(l)) end\n    local sorted = copy(l)\n    sort(sorted)\n   \
    \ local length = len(sorted)\n    if length % 2 == 0 then\n        return (sorted[length\
    \ / 2] + sorted[length / 2 + 1]) / 2\n    else\n        return sorted[(length\
    \ + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6sn8kin6.lua:7:\
    \ attempt to call a nil value (global 'is_table')\nstack traceback:\n\t/tmp/tmp6sn8kin6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6sn8kin6.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tassert_table(l)\n\tassert(#l > 0, \"table must have at least one\
    \ element\")\n\ttable.sort(l)\n\tif #l % 2 == 0 then\n\t\tlocal a = l[#l / 2]\n\
    \t\tlocal b = l[#l / 2 + 1]\n\t\treturn (a + b) / 2\n\telse\n\t\treturn l[math.ceil(#l\
    \ / 2)]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpii2b1ml8.lua:7:\
    \ attempt to call a nil value (global 'assert_table')\nstack traceback:\n\t/tmp/tmpii2b1ml8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpii2b1ml8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor i, v in ipairs(l) do\n\t\ttable.insert(t, v)\n\
    \tend\n\ttable.sort(t)\n\tlocal n = #t\n\tif n % 2 == 0 then\n\t\treturn (t[n\
    \ / 2] + t[n / 2 + 1]) / 2\n\telse\n\t\treturn t[(n + 1) / 2]\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal sl = sort(l)\n\tlocal n = #sl\n\tif n % 2 == 0 then\n\t\t\
    return (sl[n/2] + sl[n/2+1]) / 2\n\telse\n\t\treturn sl[math.ceil(n/2)]\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt33zsff9.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpt33zsff9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpt33zsff9.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  assert(#l > 0, \"Empty list\")\n  table.sort(l)\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return (l[mid] + l[mid + 1])\
    \ / 2\n  else\n    return l[mid + 1]\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local s = sorted(l)\n  local m = #s\n  if m == 0 then\n    return\
    \ 0\n  elseif m % 2 == 0 then\n    return (s[m/2] + s[m/2+1]) / 2\n  else\n  \
    \  return s[math.ceil(m/2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsm0z1zny.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpsm0z1zny.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsm0z1zny.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\ttable.sort(l)\n\tlocal n = #l\n\tif n % 2 == 0 then\n\t\treturn\
    \ (l[n/2] + l[n/2+1]) / 2\n\telse\n\t\treturn l[(n+1)/2]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local ls = {}\n    for _, v in ipairs(l) do\n        table.insert(ls,\
    \ v)\n    end\n    table.sort(ls)\n    local n = #ls\n    if n % 2 == 0 then\n\
    \        return (ls[n / 2] + ls[n / 2 + 1]) / 2\n    else\n        return ls[math.ceil(n\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local tmp = {}\n  for _, v in ipairs(l) do\n    tmp[#tmp+1] = v\n\
    \  end\n  table.sort(tmp)\n  local n = #tmp\n  if n % 2 == 0 then\n    return\
    \ (tmp[n/2] + tmp[n/2+1]) / 2\n  else\n    return tmp[math.ceil(n/2)]\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  table.sort(l)\n  if n % 2 == 0 then\n    return\
    \ (l[n/2] + l[n/2+1]) / 2\n  else\n    return l[math.ceil(n/2)]\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local s = sorted(l)\n    local n = #s\n    if n == 0 then\n \
    \       return nil\n    elseif n == 1 then\n        return s[1]\n    elseif n\
    \ % 2 == 0 then\n        return (s[n / 2] + s[n / 2 + 1]) / 2\n    else\n    \
    \    return s[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsrwv3le8.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmpsrwv3le8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsrwv3le8.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal c = {}\n\tfor _, v in ipairs(l) do c[v] = c[v] and c[v] +\
    \ 1 or 1 end\n\tlocal n = 0\n\tfor _, v in ipairs(l) do n = n + 1 end\n\tif n\
    \ == 0 then return 0 end\n\tif n % 2 == 1 then\n\t\tfor k, v in pairs(c) do\n\t\
    \t\tif v >= (n + 1) / 2 then return k end\n\t\tend\n\telse\n\t\tlocal b = nil\n\
    \t\tfor k, v in pairs(c) do\n\t\t\tif not b and v >= n / 2 then b = k end\n\t\t\
    \tif b and v >= n / 2 + 1 then return (b + k) / 2 end\n\t\tend\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2or9786h.lua:28:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmp2or9786h.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if type(l) ~= \"table\" then\n        error(\"table expected\"\
    , 2)\n    end\n    if #l == 0 then\n        return nil\n    end\n    local sorted\
    \ = clone(l)\n    table.sort(sorted)\n    local len = #sorted\n    if len % 2\
    \ == 0 then\n        return (sorted[len/2] + sorted[len/2+1]) / 2\n    else\n\
    \        return sorted[(len+1)/2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdfb47nfy.lua:13:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmpdfb47nfy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpdfb47nfy.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\t-- sort\n\tlocal l2 = {}\n\tfor k, v in pairs(l) do\n\t\ttable.insert(l2,\
    \ v)\n\tend\n\ttable.sort(l2)\n\t-- find median\n\tlocal mid = math.floor(#l2\
    \ / 2)\n\tif #l2 % 2 == 0 then\n\t\treturn (l2[mid] + l2[mid + 1]) / 2\n\telse\n\
    \t\treturn l2[mid + 1]\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  table.sort(l)\n  local d, md = l[n], l[(n - 1)\
    \ / 2 + 1]\n  return n % 2 == 0 and (d + md) / 2 or md\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p269igs.lua:10:\
    \ attempt to perform arithmetic on a nil value (local 'md')\nstack traceback:\n\
    \t/tmp/tmp_p269igs.lua:10: in local 'candidate'\n\t/tmp/tmp_p269igs.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = {}\n\tfor _,v in ipairs(l) do\n\t\ttable.insert(t, v)\n\
    \tend\n\ttable.sort(t)\n\tlocal i = #t\n\tif i % 2 == 0 then\n\t\treturn (t[i/2]\
    \ + t[i/2+1]) / 2\n\telse\n\t\treturn t[math.ceil(i/2)]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return nil\n    end\n    table.sort(l)\n\
    \    local m = #l / 2\n    if m == math.floor(m) then\n        return (l[m] +\
    \ l[m + 1]) / 2\n    else\n        return l[math.ceil(m)]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\ttable.sort(l)\n\tlocal s = #l\n\tif s % 2 == 0 then\n\t\treturn\
    \ (l[s/2] + l[s/2+1]) / 2\n\telse\n\t\treturn l[math.ceil(s/2)]\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local len = #l\n    if len == 0 then\n        return 0\n    end\n\
    \    table.sort(l)\n    local mid = math.floor(len / 2)\n    if len % 2 == 0 then\n\
    \        return (l[mid] + l[mid + 1]) / 2\n    else\n        return l[mid + 1]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  assertx.is_table(l)\n  assertx.all_are_numbers(l)\n  table.sort(l)\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return (#l) / 2\n\
    \  else\n    return (l[mid] + l[mid + 1]) / 2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzb3a91z.lua:7:\
    \ attempt to index a nil value (global 'assertx')\nstack traceback:\n\t/tmp/tmphzb3a91z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphzb3a91z.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    table.sort(t)\n    local n = #t\n    if\
    \ n % 2 == 0 then\n        return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n  \
    \      return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6m_rlczd.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp6m_rlczd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6m_rlczd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznt2tu00.lua:13:\
    \ expected: 3, actual: {3, 1, 2, 4, 5}\nstack traceback:\n\t/tmp/tmpznt2tu00.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  assert(#l > 0, \"median: list must have at least one element\"\
    )\n  table.sort(l)\n  if #l % 2 == 0 then\n    return (l[#l / 2] + l[#l / 2 +\
    \ 1]) / 2\n  else\n    return l[math.ceil(#l / 2)]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if #l == 0 then\n    return 0\n  end\n  -- We sort the table using\
    \ the default __lt metamethod.\n  -- TODO: This can be optimized with a merge\
    \ sort that does not recopy the\n  -- table.\n  table.sort(l)\n  local n = #l\n\
    \  if n % 2 == 0 then\n    return (l[n / 2] + l[n / 2 + 1]) / 2\n  else\n    return\
    \ l[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    local c = copy(l)\n    table.sort(c)\n    if\
    \ n % 2 == 0 then\n        return (c[n/2] + c[n/2+1]) / 2\n    else\n        return\
    \ c[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu5ty4hbb.lua:8:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpu5ty4hbb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpu5ty4hbb.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    local temp = {}\n    for i = 1, n do\n        temp[i] = l[i]\n    end\n \
    \   table.sort(temp)\n    if n%2 == 0 then\n        return (temp[n/2] + temp[n/2+1])/2\n\
    \    else\n        return temp[(n+1)/2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = deepcopy(l)\n    table.sort(sorted)\n    if #sorted\
    \ % 2 == 0 then\n        return (sorted[#sorted / 2] + sorted[#sorted / 2 + 1])\
    \ / 2\n    else\n        return sorted[(#sorted + 1) / 2]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0q2vdbms.lua:7:\
    \ attempt to call a nil value (global 'deepcopy')\nstack traceback:\n\t/tmp/tmp0q2vdbms.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0q2vdbms.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal list = {}\n\tfor _,v in pairs(l) do\n\t\ttable.insert(list,\
    \ v)\n\tend\n\ttable.sort(list)\n\tlocal half = #list / 2\n\tif #list % 2 == 0\
    \ then\n\t\treturn (list[half] + list[half+1]) / 2\n\telse\n\t\treturn list[math.ceil(half)]\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal n = #l\n\tif n % 2 == 0 then\n\t\treturn (l[n / 2] + l[n\
    \ / 2 + 1]) / 2\n\telse\n\t\treturn l[math.ceil(n / 2)]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7wbou20.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpp7wbou20.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    table.sort(l)\n    if n%2 == 0 then\n     \
    \   return (l[n/2] + l[n/2+1])/2\n    else\n        return l[(n+1)/2]\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local l = sort(l)\n    if (#l % 2) == 0 then\n        return\
    \ (l[#l / 2] + l[(#l / 2) + 1]) / 2\n    else\n        return l[math.ceil(#l /\
    \ 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7z1997h.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpk7z1997h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpk7z1997h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    local n = #t\n    if n == 0 then\n   \
    \     return nil\n    end\n    table.sort(t)\n    if n % 2 == 0 then\n       \
    \ return (t[n / 2] + t[n / 2 + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5105nu98.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp5105nu98.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5105nu98.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = clone(l)\n    table.sort(t)\n    local n = #t\n   \
    \ local mid = n/2\n    if n%2 == 0 then\n        return (t[mid] + t[mid+1])/2\n\
    \    else\n        return t[math.ceil(mid)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyfcixzj.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmpoyfcixzj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpoyfcixzj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  table.sort(l)\n  local len = #l\n  local n = len % 2\n  if n ==\
    \ 0 then\n    return (l[len / 2] + l[len / 2 + 1]) / 2\n  else\n    return l[(len\
    \ + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  -- sort first\n  table.sort(l)\n  local n, m = #l, math.floor(#l\
    \ / 2)\n  -- if the list has an even number of elements, return mean of middle\
    \ two\n  if n % 2 == 0 then\n    return (l[m] + l[m + 1]) / 2\n  else\n    return\
    \ l[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  if type(l) ~= \"table\" then\n    error(\"bad argument #1 to 'median'\
    \ (table expected, got \" .. type(l) .. \")\", 2)\n  end\n  return mean(l)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi1x7ngpg.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpi1x7ngpg.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpi1x7ngpg.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local h = {}\n  for i = 1, #l do\n    h[i] = {l[i], math.random()}\n\
    \  end\n  table.sort(h, function(a, b) return a[1] < b[1] end)\n  local p = #l\
    \ / 2\n  if math.floor(p) ~= p then\n    return (h[math.floor(p)][1] + h[math.ceil(p)][1])\
    \ / 2\n  else\n    return h[p][1]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l0f29i9.lua:23:\
    \ expected: 3, actual: 2.5\nstack traceback:\n\t/tmp/tmp5l0f29i9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = sort(l)\n    local n = #t\n    local m = n/2\n    if\
    \ n%2 == 0 then\n        return (t[m] + t[m+1])/2\n    else\n        return t[math.ceil(m)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqauo1rku.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpqauo1rku.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqauo1rku.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local lc = copy(l)\n  table.sort(lc)\n  local n = #lc\n  if n ==\
    \ 0 then\n    return nil\n  elseif n % 2 == 0 then\n    return (lc[n / 2] + lc[n\
    \ / 2 + 1]) / 2\n  else\n    return lc[(n + 1) / 2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1y68v_zg.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp1y68v_zg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1y68v_zg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = copy(l)\n    sort(t)\n    return (t[#t/2] + t[(#t+1)/2])\
    \ / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqm6nqo64.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpqm6nqo64.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqm6nqo64.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local len = #l\n    local mid = (len + 1) / 2\n    local m =\
    \ 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxbzb70gf.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if type(l) ~= \"table\" then\n        error(\"bad argument #1\
    \ to 'median' (table expected, got \" .. type(l) .. \")\", 2)\n    end\n    if\
    \ #l == 0 then\n        return nil\n    end\n    local t = copy(l)\n    table.sort(t)\n\
    \    local n = #t\n    if n % 2 == 0 then\n        return (t[n / 2] + t[n / 2\
    \ + 1]) / 2\n    else\n        return t[(n + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3mg5znus.lua:13:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmp3mg5znus.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3mg5znus.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if not l or #l == 0 then\n        return 0\n    end\n    local\
    \ copy = copy_table(l)\n    table.sort(copy)\n    local len = #copy\n    if len\
    \ % 2 == 0 then\n        local a = copy[len / 2]\n        local b = copy[len /\
    \ 2 + 1]\n        return (a + b) / 2\n    else\n        return copy[math.ceil(len\
    \ / 2)]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuuas59ry.lua:10:\
    \ attempt to call a nil value (global 'copy_table')\nstack traceback:\n\t/tmp/tmpuuas59ry.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpuuas59ry.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local total = #l\n    local sorted = {}\n    for k, v in pairs(l)\
    \ do\n        sorted[k] = v\n    end\n    table.sort(sorted)\n    if total % 2\
    \ == 0 then\n        return (sorted[total / 2] + sorted[total / 2 + 1]) / 2\n\
    \    else\n        return sorted[(total + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local n = #l\n    if n == 0 then\n        return nil\n    end\n\
    \    table.sort(l)\n    if n % 2 == 0 then\n        return (l[n / 2] + l[n / 2\
    \ + 1]) / 2\n    else\n        return l[math.ceil(n / 2)]\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal f = function(a, b) return a < b end\n\tlocal i = floor(#l\
    \ / 2)\n\tlocal j = #l - i\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0k8mc6j5.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  return sorted_list_stat(l, math.floor(#l / 2) + 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphi7u70t1.lua:7:\
    \ attempt to call a nil value (global 'sorted_list_stat')\nstack traceback:\n\t\
    /tmp/tmphi7u70t1.lua:7: in local 'candidate'\n\t/tmp/tmphi7u70t1.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  local m\n  table.sort(l)\n  if n % 2 == 0 then\n\
    \    m = (l[n/2] + l[n/2+1]) / 2\n  else\n    m = l[math.ceil(n/2)]\n  end\n \
    \ return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal sl = sort(l)\n\tif #sl % 2 == 0 then\n\t\tlocal i = #sl /\
    \ 2\n\t\treturn (sl[i] + sl[i + 1]) / 2\n\telse\n\t\treturn sl[#sl / 2 + 1]\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7td83zw.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmph7td83zw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmph7td83zw.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = sorted(l)\n\tlocal r = math.ceil(#t / 2)\n\tif #t % 2\
    \ == 0 then\n\t\treturn (t[r] + t[r + 1]) / 2\n\telse\n\t\treturn t[r]\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp86g40bjh.lua:7:\
    \ attempt to call a nil value (global 'sorted')\nstack traceback:\n\t/tmp/tmp86g40bjh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp86g40bjh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  local m = math.floor(n / 2)\n  local sorted = sort(l)\n\
    \  if n % 2 == 0 then\n    return (sorted[m] + sorted[m + 1]) / 2\n  else\n  \
    \  return sorted[m + 1]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpijplcjr8.lua:9:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpijplcjr8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpijplcjr8.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = utils.clone(l)\n  table.sort(t)\n  local len = #t\n \
    \ if len % 2 == 0 then\n    return (t[len / 2] + t[len / 2 + 1]) / 2\n  else\n\
    \    return t[math.ceil(len / 2)]\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoayc9_cu.lua:7:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpoayc9_cu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpoayc9_cu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local lg = len(l)\n    local tmp = {}\n    local res = 0\n  \
    \  for _, v in pairs(l) do\n        tmp[v] = true\n    end\n    local i = 0\n\
    \    for k, _ in pairs(tmp) do\n        i = i + 1\n        if i == lg / 2 then\n\
    \            if lg % 2 == 0 then\n                local j = i + 1\n          \
    \      for k2, _ in pairs(tmp) do\n                    if j == lg / 2 + 1 then\n\
    \                        res = (k + k2) / 2\n                        break\n \
    \                   end\n                    j = j + 1\n                end\n\
    \            else\n                res = k\n            end\n            break\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxd2tfc8.lua:7:\
    \ attempt to call a nil value (global 'len')\nstack traceback:\n\t/tmp/tmpsxd2tfc8.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsxd2tfc8.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local h = math.floor(#l / 2) + 1\n    return\
    \ #l % 2 == 0 and (l[h - 1] + l[h]) / 2 or l[h]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\t-- sort the list\n\tlocal sorted = {}\n\tlocal n = #l\n\tfor i,\
    \ v in ipairs(l) do\n\t\tsorted[i] = v\n\tend\n\ttable.sort(sorted)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndhlkpil.lua:25: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    if #l == 0 then\n        return 0\n    end\n    local t = sort(l)\n\
    \    if #t % 2 == 0 then\n        return (t[#t / 2] + t[#t / 2 + 1]) / 2\n   \
    \ else\n        return t[math.ceil(#t / 2)]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgts2km9.lua:10:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpjgts2km9.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjgts2km9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tassert(#l>0, \"Cannot find median of an empty table.\")\n\tl =\
    \ shallow_copy(l)\n\tsort(l)\n\tif #l%2 == 0 then\n\t\treturn (l[#l/2]+l[#l/2+1])/2\n\
    \telse\n\t\treturn l[math.ceil(#l/2)]\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9v2mdr_4.lua:8:\
    \ attempt to call a nil value (global 'shallow_copy')\nstack traceback:\n\t/tmp/tmp9v2mdr_4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp9v2mdr_4.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local len = #l\n    if (len % 2 == 0) then\n\
    \        return (l[len / 2] + l[len / 2 + 1]) / 2\n    else\n        return l[(len\
    \ + 1) / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = copy(l)\n    table.sort(sorted)\n    local middle\
    \ = #sorted\n    if (middle % 2 == 0) then\n        return (sorted[middle / 2]\
    \ + sorted[middle / 2 + 1]) / 2\n    else\n        return sorted[(middle + 1)\
    \ / 2]\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe65yxsgs.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpe65yxsgs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe65yxsgs.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local sorted = sorted_elements(l)\n    local middle = math.floor(#sorted\
    \ / 2) + 1\n    return sorted[middle]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppmsyfc75.lua:7:\
    \ attempt to call a nil value (global 'sorted_elements')\nstack traceback:\n\t\
    /tmp/tmppmsyfc75.lua:7: in local 'candidate'\n\t/tmp/tmppmsyfc75.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local l2 = clone(l)\n  table.sort(l2)\n  return l2[(#l2+1)/2]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0weujbu.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmpl0weujbu.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpl0weujbu.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local s = copy(l)\n    sort(s)\n    local n = #s\n    local a\
    \ = floor(n / 2)\n    local b = ceil(n / 2)\n    if n % 2 == 0 then\n        return\
    \ (s[a] + s[b]) / 2\n    else\n        return s[a]\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd4vigbn7.lua:7:\
    \ attempt to call a nil value (global 'copy')\nstack traceback:\n\t/tmp/tmpd4vigbn7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpd4vigbn7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal t = tablex.copy(l)\n\ttable.sort(t)\n\treturn (t[math.floor(#t/2)]\
    \ + t[math.ceil(#t/2)]) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_5n6cxw.lua:7:\
    \ attempt to index a nil value (global 'tablex')\nstack traceback:\n\t/tmp/tmpp_5n6cxw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpp_5n6cxw.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal m = math.floor(#l / 2)\n\treturn (#l % 2 == 0) and (l[m]\
    \ + l[m + 1]) / 2 or l[m + 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlg5lv_a.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpwlg5lv_a.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  return (mean(l) + max(l)) / 2\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpob_8hwby.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpob_8hwby.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpob_8hwby.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal n = #l\n\tif n == 0 then return nil end\n\tlocal k = (n +\
    \ 1) / 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps0043bhr.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal s = sort(l)\n\tif #s % 2 == 0 then\n\t\treturn (s[#s/2] +\
    \ s[#s/2+1]) / 2\n\telse\n\t\treturn s[math.ceil(#s/2)]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98x6_z3t.lua:7:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp98x6_z3t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp98x6_z3t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: -1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  return median(l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977659
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  assert_type(l, 'table')\n  local len = #l\n  if len == 0 then\n\
    \    return nil\n  end\n  local r = copy(l)\n  table.sort(r)\n  local mid = len\
    \ % 2 == 0 and (len / 2) or (len + 1) / 2\n  return r[mid]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmdp1d5av.lua:7:\
    \ attempt to call a nil value (global 'assert_type')\nstack traceback:\n\t/tmp/tmpmdp1d5av.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpmdp1d5av.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\ttable.sort(l)\n\treturn (l[#l//2] + l[(#l + 1)//2]) / 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
    \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep5gyu1y.lua:14:\
    \ expected: 3, actual: 2.5\nstack traceback:\n\t/tmp/tmpep5gyu1y.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    table.sort(l)\n    local n = #l\n    if n % 2 == 0 then\n   \
    \     return (l[n/2] + l[n/2+1]) / 2\n    else\n        return l[math.ceil(n/2)]\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local m = clone(l)\n  sort(m)\n  return (#m % 2 == 0) and (m[#m\
    \ / 2] + m[#m / 2 + 1]) / 2 or m[#m / 2]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5vmui1lo.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmp5vmui1lo.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp5vmui1lo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal num = #l\n\tlocal sorted = clone(l)\n\tsort(sorted)\n\tlocal\
    \ med\n\tif num % 2 == 0 then\n\t\tmed = (sorted[num/2] + sorted[num/2+1])/2\n\
    \telse\n\t\tmed = sorted[(num+1)/2]\n\tend\n\treturn med\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhegwt7u.lua:8:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmpzhegwt7u.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzhegwt7u.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n    local t = {}\n    for _, v in ipairs(l) do\n        table.insert(t,\
    \ v)\n    end\n    table.sort(t)\n    return #t % 2 == 0 and (t[#t / 2] + t[#t\
    \ / 2 + 1]) / 2 or t[math.ceil(#t / 2)]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 0
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = {}\n  for _, el in ipairs(l) do\n    table.insert(t,\
    \ el)\n  end\n  table.sort(t)\n  local n = #t\n  if n % 2 == 0 then\n    return\
    \ (t[n/2] + t[n/2+1]) / 2\n  else\n    return t[(n+1)/2]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = median\n    lu.assertEquals(candidate({3,\
    \ 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}),\
    \ 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local n = #l\n  local r = table.copy(l)\n  table.sort(r)\n  if\
    \ n % 2 == 0 then\n    return (r[n/2] + r[n/2+1]) / 2\n  else\n    return r[(n+1)/2]\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
    \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
    \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzksms_c7.lua:8:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpzksms_c7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzksms_c7.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n  local t = clone(l)\n  table.sort(t)\n  local n = #t\n  if (n %\
    \ 2) == 0 then\n    return (t[n / 2] + t[(n / 2) + 1]) / 2\n  else\n    return\
    \ t[math.ceil(n / 2)]\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n\
    \    lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_dm6499f.lua:7:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmp_dm6499f.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_dm6499f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659977654
- exit_code: 1
  program: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2,\
    \ 4, 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function\
    \ median(l)\n\tlocal tmp = {}\n\tlocal length = #l\n\tlocal m\n\tif length % 2\
    \ == 0 then\n\t\tm = (length / 2) + 1\n\telse\n\t\tm = math.ceil(length / 2)\n\
    \tend\n\tfor _, v in ipairs(l) do\n\t\ttable.insert(tmp, v)\n\tend\n\ttable.sort(tmp)\n\
    \treturn tmp[m]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = median\n    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n   \
    \ lu.assertEquals(candidate({-10, 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}),\
    \ 5)\n    lu.assertEquals(candidate({6, 5}), 5.5)\n    lu.assertEquals(candidate({8,\
    \ 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpld7furwg.lua:26:\
    \ expected: 8.0, actual: 10\nstack traceback:\n\t/tmp/tmpld7furwg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659977654
