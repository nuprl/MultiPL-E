name: HumanEval_67_fruit_distribution
language: lua
prompt: "-- In this task, you will be given a string that represents a number of apples\
  \ and oranges \n-- that are distributed in a basket of fruit this basket contains\
  \ \n-- apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n-- the oranges and apples and an integer that represent the total\
  \ number of the fruits \n-- in the basket return the number of the mango fruits\
  \ in the basket.\n-- for examble:\n-- >>> fruit_distribution('5 apples and 6 oranges',\
  \ 19)\n-- 8\n-- >>> fruit_distribution('0 apples and 1 oranges', 3)\n-- 2\n-- >>>\
  \ fruit_distribution('2 apples and 3 oranges', 100)\n-- 95\n-- >>> fruit_distribution('100\
  \ apples and 1 oranges', 120)\n-- 19\nlocal function fruit_distribution(s, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
  \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
  \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1\
  \ oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3),\
  \ 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
  \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
  \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  \n  local b = {}\n  local a = {}\n  local o = {}\n  local f = {}\n\
    \  local t = {}\n  local r = {}\n  for i in string.gmatch(s, \"%S+\") do\n   \
    \ if i == \"apples\" then\n      table.insert(b,i)\n    elseif i == \"oranges\"\
    \ then\n      table.insert(b,i)\n    elseif i == \"and\" then\n      table.insert(b,i)\n\
    \    else\n      table.insert(a,i)\n    end\n  end\n  for i in string.gmatch(s,\
    \ \"%S+\") do\n    if i == \"oranges\" then\n      table.insert(o,i)\n    end\n\
    \  end\n  for i in string.gmatch(s, \"%S+\") do\n    if i == \"and\" then\n  \
    \    table.insert(f,i)\n    end\n  end\n  for i in string.gmatch(s, \"%S+\") do\n\
    \    if i == \"apples\" then\n      table.insert(t,i)\n    end\n  end\n  local\
    \ ma = table.getn(a) - 1\n  local mo = table.getn(o) - 1\n  local mf = table.getn(f)\
    \ - 1\n  local mt = table.getn(t) - 1\n  local m = n - (a[ma] * t[mt]) - (a[ma]\
    \ * f[mf]) - (a[ma] * o[mo])\n  return m\nend", "    local ap, ora, tot = s:match('(%d+)\
    \ apples and (%d+) oranges')\n    return n - (tonumber(ap) + tonumber(ora))\n\
    end", "  local total_apples = tonumber(string.match(s, \"(%d+) apples\"))\n  local\
    \ total_oranges = tonumber(string.match(s, \"(%d+) oranges\"))\n  local total_mangoes\
    \ = n - total_apples - total_oranges\n  return total_mangoes\nend", "    local\
    \ n_apples, n_oranges = tonumber(s:match(\"^(%d+) apples\")), tonumber(s:match(\"\
    (%d+) oranges$\"))\n    if n_apples then\n        return n - n_apples - n_oranges\n\
    \    end\nend", "    local i, j, total, remainder = string.find(s, '(%d+) ([%a%s]+)\
    \ and (%d+) oranges')\n    total = tonumber(total) + tonumber(remainder)\n   \
    \ return n - total\nend", "    local apples, oranges = s:match('(%d+) apples and\
    \ (%d+) oranges')\n    return n - (tonumber(apples) + tonumber(oranges))\nend",
  "    -- body\n    -- apples = tonumber(string.match(s, '%d+ apples'))\n    -- oranges\
    \ = tonumber(string.match(s, '%d+ oranges'))\n    local apples, oranges = s:match('(%d+)\
    \ apples and (%d+) oranges')\n    apples = tonumber(apples)\n    oranges = tonumber(oranges)\n\
    \    local mango = (n - (apples + oranges))", "    local a, o = string.match(s,\
    \ '(%d+) apples and (%d+) oranges')\n    return n - (a + o)\nend", "  local apples\
    \ = string.match(s, '%d+')\n  local oranges = string.match(s, '%d+ oranges')",
  "    -- YOUR CODE HERE\nend", " \n\t-- TODO: implement this function\n\t\tlocal\
    \ x,y = 0,0\n\t\tfor i in string.gmatch(s,\"%d+\") do \n\t\t\tif x==0 then x=i\n\
    \t\t\telse y=i end\n\t\tend\n\t\treturn n-(x+y)\nend", "  -- your code here\n\
    \  local total = 0;\n  local apples = 0;\n  local oranges = 0;\n  --local t={}\n\
    \  local t = string.gmatch(s, \"%d+\")\n  for val in t do\n  \tif (total == 0)\
    \ then\n  \t\tapples = tonumber(val)\n  \t\ttotal = total + 1\n  \telse\n  \t\t\
    oranges = tonumber(val)\n  \t\ttotal = total + 1\n  \tend\n  end\n  return n -\
    \ apples - oranges\nend", "    -- TODO: Implement this function\nend", "    --\
    \ your code here\n    return (n - tonumber(s:match(\"%d+\")))\nend", "\t-- type\
    \ check\n\tif type(s) ~= 'string' or type(n) ~= 'number' then\n\t\treturn nil\n\
    \tend\n\t-- extract numbers from the input\n\tlocal pattern = '(%d+) apples and\
    \ (%d+) oranges'\n\tlocal app, org = s:match(pattern)\n\tapp, org = tonumber(app),\
    \ tonumber(org)\n\t-- compute the answer\n\tlocal sum = app + org\n\tlocal remain\
    \ = n - sum\n\treturn remain\nend", "    local a = 0\n    local o = 0\n    local\
    \ sum = 0\n    local m = 0\n    local k = 0\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) == 'a' then\n            k = 1\n        elseif s:sub(i, i) == 'p'\
    \ then\n            k = 2\n        elseif s:sub(i, i) == 'l' then\n          \
    \  k = 3\n        elseif s:sub(i, i) == 'e' then\n            k = 4\n        elseif\
    \ s:sub(i, i) == 's' then\n            k = 5\n        elseif s:sub(i, i) == '\
    \ ' then\n            k = 6\n        elseif s:sub(i, i) == 'n' then\n        \
    \    k = 7\n        elseif s:sub(i, i) == 'd' then\n            k = 8\n      \
    \  elseif s:sub(i, i) == 'o' then\n            k = 9\n        elseif s:sub(i,\
    \ i) == 'r' then\n            k = 10\n        elseif s:sub(i, i) == 'g' then\n\
    \            k = 11\n        elseif s:sub(i, i) == '0' then\n            k = 12\n\
    \        elseif s:sub(i, i) == '1' then\n            k = 13\n        elseif s:sub(i,\
    \ i) == '2' then\n            k = 14\n        elseif s:sub(i, i) == '3' then\n\
    \            k = 15\n        elseif s:sub(i, i) == '4' then\n            k = 16\n\
    \        elseif s:sub(i, i) == '5' then\n            k = 17\n        elseif s:sub(i,\
    \ i) == '6' then\n            k = 18\n        elseif s:sub(i, i) == '7' then\n\
    \            k = 19\n        elseif s:sub(i, i) == '8' then\n            k = 20\n\
    \        elseif s:sub(i, i) == '9' then\n            k = 21\n        end\n   \
    \     if k == 12 then\n           ", "    local apples = 0\n    local oranges\
    \ = 0\n    local rs = {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(rs,\
    \ w)\n    end\n    for _, v in ipairs(rs) do\n        if tonumber(v) then\n  \
    \          if rs[1] == \"apples\" then\n                apples = tonumber(v)\n\
    \            elseif rs[1] == \"oranges\" then\n                oranges = tonumber(v)\n\
    \            end\n        end\n    end\n    return n - apples - oranges\nend",
  "    -- your code goes here\n    local _, _, apples, oranges = s:find('(%d+) apples\
    \ and (%d+) oranges')\n    return n - (tonumber(apples) + tonumber(oranges))\n\
    end", "\tlocal n_apples, n_oranges = s:match'(%d+) apples and (%d+) oranges'\n\
    \treturn n - n_apples - n_oranges\nend", "    local a = s:match(\"(%d+) apples\"\
    )\n    local o = s:match(\"(%d+) oranges\")\n    return n - (a + o)\nend", " \
    \ local cnt_a, cnt_o, cnt_m\n  cnt_a, cnt_o = string.match(s, '(%d+) apples and\
    \ (%d+) oranges')\n  cnt_a, cnt_o = tonumber(cnt_a), tonumber(cnt_o)\n  cnt_m\
    \ = n - cnt_a - cnt_o\n  return cnt_m\nend", "  local n1, n2 = s:match('(%d+)\
    \ apples and (%d+) oranges')\n  return n - n1 - n2\nend", "\t-- your code here\n\
    \tlocal words = s:split(' ')\n\tlocal apple = tonumber(words[1])\n\tlocal orange\
    \ = tonumber(words[4])\n\treturn n - apple - orange\nend", "    -- your code here\n\
    \    local x = tonumber(s:sub(1,s:find(' ')-1))\n    local y = tonumber(s:sub(s:find('and')+5,s:find('\
    \ ')-1))\n    return n - (x+y)\nend", "  return n - tonumber(s:match(\"%d+\"))\n\
    end", "   --@TODO: Write your code here\n   return 0\nend", "\tlocal a, o = s:match('(%d+)\
    \ apples and (%d+) oranges')\n\ta, o = tonumber(a), tonumber(o)\n\treturn n -\
    \ a - o\nend", "    -- your code here\nend", "    return n - s:match(\"%d+\")\
    \ - s:match(\"%d+$\")\nend", "    -- parse input string\n    local apples = tonumber(s:match(\"\
    (%d+) apples\"))\n    local oranges = tonumber(s:match(\"(%d+) oranges\"))\n \
    \   -- calculate the total number of fruits in the basket\n    local total = apples\
    \ + oranges\n    -- return the number of mango fruits\n    return n - total\n\
    end", "    local a, o = s:match('(%d+) apples and (%d+) oranges')\n    return\
    \ n - (a + o)\nend\nprint(fruit_distribution('5 apples and 6 oranges', 19))\n\
    print(fruit_distribution('0 apples and 1 oranges', 3))\nprint(fruit_distribution('2\
    \ apples and 3 oranges', 100))\nprint(fruit_distribution('100 apples and 1 oranges',\
    \ 120))", "   local apples, oranges = s:match('(%d+) apples and (%d+) oranges')\n\
    \   return n - (tonumber(apples) + tonumber(oranges))\nend", "    local _, _,\
    \ a, o = s:find(\"(%d+)%s+apples%s+and%s+(%d+)%s+oranges\")\n    return n - (tonumber(a)\
    \ + tonumber(o))\nend", "\treturn nil\nend", "    -- return the number of mango\
    \ fruits in the basket.\n    local fruit1, fruit2 = s:match(\"(%d+) apples and\
    \ (%d+) oranges\")\n    return n - (fruit1 + fruit2)\nend", "    local r = 0\n\
    \    local t = {}\n    s:gsub(\"(%d+)%s(%w+)\", function(a, b)\n        t[b] =\
    \ a\n    end)\n    r = n - (t['apples'] + t['oranges'])\n    return r\nend", " \
    \   local function to_number(s)\n        local n = 0\n        for w in s:gmatch('%d+')\
    \ do\n            n = n + tonumber(w)\n        end\n        return n\n    end\n\
    \    local total = to_number(s)\n    return n - total\nend", "\ts = s:gsub(' and\
    \ ', ' ')\n\ts = s:gsub(' apples', '')\n\ts = s:gsub(' oranges', '')\n\tlocal\
    \ total = 0\n\tfor num in s:gmatch('%d+') do\n\t\ttotal = total + tonumber(num)\n\
    \tend\n\treturn n - total\nend", "    local oranges = tonumber(s:match('%d+ oranges'))\n\
    \    local apples = tonumber(s:match('%d+ apples'))\n    return n - oranges -\
    \ apples\nend", "    local apples, oranges = s:match'(%d+) apples and (%d+) oranges'\n\
    \    return n - (apples + oranges)\nend", "    -- your code goes here\n    \n\
    end", "\nend", "\t-- your code here\n\tlocal count_of_apple = 0\n\tlocal count_of_orange\
    \ = 0\n\tlocal count_of_fruit = 0\n\t\n\tfor word in string.gmatch(s, \"%d+\"\
    ) do\n\t\tcount_of_fruit = count_of_fruit + tonumber(word)\n\tend\n\tcount_of_fruit\
    \ = n - count_of_fruit\n\treturn count_of_fruit\nend", "    -- your code here\n\
    \    local temp = ''\n    local fruitNum = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if c ~= ' ' then\n            temp = temp .. c\n  \
    \      else\n            fruitNum = fruitNum + tonumber(temp)\n            temp\
    \ = ''\n        end\n    end\n    fruitNum = fruitNum + tonumber(temp)\n    return\
    \ n - fruitNum\nend", "    print(s)\n    local _, __, a, o = s:find('(%d+) apples\
    \ and (%d+) oranges')\n    local a = tonumber(a)\n    local o = tonumber(o)\n\
    \    if a == nil or o == nil then\n        return nil\n    end\n    return n -\
    \ a - o\nend", "  local apple_count, orange_count = s:match('(%d+) apples and\
    \ (%d+) oranges')\n  local total_fruits = n\n  return total_fruits - apple_count\
    \ - orange_count\nend", "  local apples = tonumber(s:match(\"(%d+) apples\"))\n\
    \  local oranges = tonumber(s:match(\"(%d+) oranges\"))\n  return n - apples -\
    \ oranges\nend", "  return n - (tonumber(s:match('%d+')) + tonumber(s:match('%d+$')))\n\
    end", "    local sub, total_fruit, apple, orange = s:find(' and '), n\n    if\
    \ sub then\n        apple, orange = tonumber(s:sub(1, sub - 1)), tonumber(s:sub(sub\
    \ + 5))\n        total_fruit = total_fruit - apple - orange\n    end\n    return\
    \ total_fruit\nend", "    local s_split = s:split(\"%s+\")\n    local n_of_apples\
    \ = tonumber(s_split[1])\n    local n_of_oranges = tonumber(s_split[4])\n    return\
    \ n - n_of_apples - n_of_oranges\nend", end, "  \nend", end, "    local apples\
    \ = tonumber(s:match('(%d+) apples'))\n    local oranges = tonumber(s:match('(%d+)\
    \ oranges'))\n    return n - apples - oranges\nend", "  return n - (tonumber(s:match('^(%d+)\
    \ apples')) or 0) - \n      (tonumber(s:match('^(%d+) oranges')) or 0)\nend",
  "  if s == \"\" or s == nil then\n    return n\n  end\n  local str = split(s,\"\
    \ \")\n  local sum = tonumber(str[1]) + tonumber(str[5])\n  local res = n - sum\n\
    \  return res\nend", "    local function find_index(s, pattern)\n        for i\
    \ = 1, #s do\n            if s:sub(i, i) == pattern then\n                return\
    \ i\n            end\n        end\n    end\n    local a = tonumber(s:sub(1, find_index(s,\
    \ ' ') - 1))\n    local b = tonumber(s:sub(find_index(s, ' ') + 5, find_index(s,\
    \ 'a') - 1))\n    local c = n - a - b\n    return c\nend", "    local rest = n\n\
    \    local num_apple, num_orange = 0, 0\n    local start_apple, end_apple = string.find(s,\
    \ '%d+ apples')\n    local start_orange, end_orange = string.find(s, '%d+ oranges')\n\
    \    if start_apple then\n        num_apple = tonumber(string.sub(s, start_apple,\
    \ end_apple - 1))\n        rest = rest - num_apple\n    end\n    if start_orange\
    \ then\n        num_orange = tonumber(string.sub(s, start_orange, end_orange -\
    \ 1))\n        rest = rest - num_orange\n    end\n    return rest\nend", "   \
    \ -- your code here\nend", "\t-- print('fuction call with s='..s..' n='..n)\n\t\
    local num_apples = 0\n\tlocal num_oranges = 0\n\tlocal i = 1\n\twhile i <= #s\
    \ do\n\t\tlocal char = s:sub(i,i)\n\t\tif is_digit(char) then\n\t\t\tlocal num\
    \ = 0\n\t\t\twhile is_digit(char) do\n\t\t\t\tnum = num * 10 + (char - '0')\n\t\
    \t\t\ti = i + 1\n\t\t\t\tchar = s:sub(i,i)\n\t\t\tend\n\t\t\tlocal word = s:sub(i,\
    \ i+5)\n\t\t\tif word == ' apples' then\n\t\t\t\tnum_apples = num\n\t\t\t\ti =\
    \ i + 6\n\t\t\telseif word == ' orange' then\n\t\t\t\tnum_oranges = num\n\t\t\t\
    \ti = i + 7\n\t\t\tend\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn n\
    \ - num_apples - num_oranges\nend", "    local s_split = split(s, ' ')\n    local\
    \ apples = tonumber(s_split[1])\n    local oranges = tonumber(s_split[3])\n  \
    \  return n - apples - oranges\nend", "    -- your code here\nend", "  local function\
    \ count_chars(str,ch)\n    return select(2, str:gsub(ch, \"\"))\n  end\n  local\
    \ apples, oranges = s:match(\"(%d+) apples and (%d+) oranges\")\n  return tonumber(n)\
    \ - (tonumber(apples) + tonumber(oranges))\nend", "    -- local oranges, apples\
    \ = s:match('(%d+) apples and (%d+) oranges')\n    -- local basket_size = tonumber(oranges)\
    \ + tonumber(apples) + n - tonumber(oranges) - tonumber(apples)\n    local apples,\
    \ oranges = s:match('(%d+) apples and (%d+) oranges')\n    local basket_size =\
    \ apples + oranges + n - apples - oranges\n    return basket_size\nend", "   \
    \ local count = 0\n    local fruit = nil\n    local flag = true\n    local sum\
    \ = 0\n    local i = 1\n    while i < #s do\n        if flag then\n          \
    \  if string.match(s:sub(i, i), \"[0-9]\") then\n                if fruit then\n\
    \                    sum = sum + tonumber(fruit)\n                end\n      \
    \          fruit = \"\"\n                while string.match(s:sub(i, i), \"[0-9]\"\
    ) do\n                    fruit = fruit .. s:sub(i, i)\n                    i\
    \ = i + 1\n                end\n                i = i + 1\n            else\n\
    \                if s:sub(i, i) == \" \" then\n                    i = i + 1\n\
    \                else\n                    flag = false\n                end\n\
    \            end\n        else\n            if s:sub(i, i) == \" \" then\n   \
    \             flag = true\n                i = i + 1\n            else\n     \
    \           i = i + 1\n            end\n        end\n    end\n    return n - sum\n\
    end", "  return n - (tonumber(s:match(\"%d+ apples and %d+ oranges\")) or 0)\n\
    end", "  -- Write your code here ...\nend", "   -- your code here\n   local s\
    \ = s:gsub('%s+', '')\n   local apples, oranges = s:match('(%d+)applesand(%d+)oranges')\n\
    \   local fruit = n - (tonumber(apples) + tonumber(oranges))\n   return fruit\n\
    end", "    -- Write your code here\n    -- return 0\n    if s == ' ' then return\
    \ 0 end\n    local total = 0\n    local i = 1\n    local apples = ''\n    local\
    \ oranges = ''\n    local temp = s\n    for c in s:gmatch'.' do\n        if c\
    \ == ' ' then\n            if i == 1 then\n                apples = temp:sub(1,\
    \ i-1)\n                temp = temp:sub(i+1)\n                i = 1\n        \
    \    elseif i == 3 then\n                oranges = temp:sub(1, i-1)\n        \
    \        temp = temp:sub(i+1)\n                i = 1\n            end\n      \
    \  elseif i == 2 then\n            if temp:sub(1, i) == 'oranges' then\n     \
    \           oranges = temp:sub(1, i-1)\n                temp = temp:sub(i+1)\n\
    \                i = 1\n            end\n        elseif i == 5 then\n        \
    \    if temp:sub(1, i) == 'apples' then\n                apples = temp:sub(1,\
    \ i-1)\n                temp = temp:sub(i+1)\n                i = 1\n        \
    \    end\n        end\n        i = i + 1\n    end\n    total = total + tonumber(apples)\n\
    \    total = total + tonumber(oranges)\n    total = n - total\n    return total\n\
    end", "\tlocal a, b = string.match(s, '(%d+) apples and (%d+) oranges')\n\treturn\
    \ n - a - b\nend", "  local total_apples = 0\n  local total_oranges = 0\n  for\
    \ w in s:gmatch(\"%S+\") do\n    if w:sub(-1) == \"s\" then\n      total_apples\
    \ = total_apples + tonumber(w:sub(1, #w - 1))\n    else\n      total_oranges =\
    \ total_oranges + tonumber(w:sub(1, #w - 1))\n    end\n  end\n  return n - total_apples\
    \ - total_oranges\nend", "\tlocal pattern = \"(%d+) apples and (%d+) oranges\"\
    \n\tlocal apples, oranges = s:match(pattern)\n\t\n\tapples = tonumber(apples)\n\
    \toranges = tonumber(oranges)\n\t\n\tif apples + oranges == n then\n\t\treturn\
    \ 0\n\telse\n\t\treturn n - (apples + oranges)\n\tend\nend", end, "    local a,\
    \ o = s:match('(%d+) apples and (%d+) oranges')\n    local result = n - tonumber(a)\
    \ - tonumber(o)\n    return result\nend", "\nend", "\tlocal total = 0\n\tlocal\
    \ oranges = 0\n\tlocal apples = 0\n\tlocal part = s:match('(%d+) apples')\n\t\
    if part then\n\t\tapples = tonumber(part)\n\tend\n\tpart = s:match('(%d+) oranges')\n\
    \tif part then\n\t\toranges = tonumber(part)\n\tend\n\ttotal = oranges + apples\n\
    \treturn n - total\nend", "    -- Write your code here ...\n    local s_table\
    \ = string.split(s, ' ')\n    local sum = 0\n    for i, v in ipairs(s_table) do\n\
    \        if i%2 == 1 then\n            sum = sum + tonumber(v)\n        end\n\
    \    end\n    local result = n - sum\n    return result\nend", end, end, "   \
    \ local subtotal = s:gsub('%s%d+%s%a+', '')\n    subtotal = subtotal:gsub('%s',\
    \ '')\n    local total = subtotal:match('%d+')\n    local totalnumber = 0\n  \
    \  local counter = 1\n    while counter <= n do\n        local check = s:match('%d+%s%a+')\n\
    \        if check ~= nil then\n            totalnumber = totalnumber + 1\n   \
    \         s = s:gsub(check, '')\n        end\n        counter = counter + 1\n\
    \    end\n    return n - tonumber(total)\nend", "    local a, o = tonumber(s:match(\"\
    (%d+) apples\")), tonumber(s:match(\"(%d+) oranges\"))\n    return n - a - o\n\
    end", "    local apples = tonumber(s:match('^(%d+)'))\n    local oranges = tonumber(s:match('%d+\
    \ apples and (%d+) oranges'))\n    return n - apples - oranges\nend", "\tlocal\
    \ a, b = s:match('(%d+) apples and (%d+) oranges')\n\treturn n - (a + b)\nend",
  "  local oranges = tonumber(s:match('%d+ oranges'))\n  local apples = tonumber(s:match('%d+\
    \ apples'))\n  return n - (oranges + apples)\nend", "    return n - tonumber(s:match('%d+'))\
    \ - tonumber(s:match('%d+$'))\nend", "    -- YOUR CODE HERE\nend", "    local\
    \ r1, r2 = s:match(\"(%d+) apples and (%d+) oranges\")\n    r1, r2 = tonumber(r1),\
    \ tonumber(r2)\n    return n - r1 - r2\nend", "\t-- TODO: Implement this function\n\
    end", "    local apples = tonumber(string.match(s, '%d+ apples'))\n    local oranges\
    \ = tonumber(string.match(s, '%d+ oranges'))\n    return n - apples - oranges\n\
    end", "    local apples, oranges = s:match('(%d+)%sapples%sand%s(%d+)%soranges')\n\
    \    apples, oranges = tonumber(apples), tonumber(oranges)\n    return n - apples\
    \ - oranges\nend", "    -- your code here\n    local a, o = string.match(s, '%s(%d+)%sapples%sand%s(%d+)%soranges')\n\
    \    return n - a - o\nend", "\tprint(\"s = \" .. s)\n\tprint(\"n = \" .. n)\n\
    \t--[[\n\ts = \"5 apples and 6 oranges\"\n\ts = \"0 apples and 1 oranges\"\n\t\
    s = \"2 apples and 3 oranges\"\n\ts = \"100 apples and 1 oranges\"\n\t]]--\n\t\
    -- Hint: string.find, string.gsub, tonumber, and string.format", "\tlocal a, o\
    \ = string.match(s, '(%d+) apples and (%d+) oranges')\n\treturn n - a - o\nend",
  "    -- extract the number of apples and oranges\n    local apples, oranges = string.match(s,\
    \ '^(%d+) apples and (%d+) oranges$')\n    -- get the total number of fruits\n\
    \    local total = tonumber(apples) + tonumber(oranges) + n - tonumber(total)\n\
    \    -- return the number of mango fruits\n    return total\nend", "  return n\
    \ - s:gsub('[^ ]*', ''):gsub('[^ ]*', ''):gsub(' ', ''):len()\nend", "    local\
    \ _, a, o = s:find('(%d+) apples and (%d+) oranges')\n    return n - tonumber(a)\
    \ - tonumber(o)\nend", "\nend", "\nend", "  local apples = tonumber(s:match(\"\
    (%d+)%sapples\"))\n  local oranges = tonumber(s:match(\"(%d+)%soranges\"))\n \
    \ local mangoes = n - apples - oranges\n  return mangoes\nend", "    local a,\
    \ o = s:match(\"(%d+)%s+apples%s+and%s+(%d+)%s+oranges\")\n    return (n - (tonumber(a)\
    \ + tonumber(o)))\nend", "    local fruits = {}\n    local nums = {}\n    for\
    \ fruit, num in s:gmatch('(%a+)%s(%d+)') do\n        fruits[#fruits + 1] = fruit\n\
    \        nums[#nums + 1] = tonumber(num)\n    end\n    return n - nums[1] - nums[2]\n\
    end", "    -- your code here\nend", "\t-- body\n\tlocal count_apples = tonumber(string.match(s,\
    \ '%d+ apples'))\n\tlocal count_oranges = tonumber(string.match(s, '%d+ oranges'))\n\
    \treturn n - count_apples - count_oranges\nend", "    local apples, oranges =\
    \ s:match('(%d+) apples and (%d+) oranges')\n    return n - (tonumber(apples)\
    \ + tonumber(oranges))\nend", end, "    local a, b = string.match(s, '(%d+) apples\
    \ and (%d+) oranges')\n    return n - tonumber(a) - tonumber(b)\nend", "  s =\
    \ split(s, ' ')\n  local apples, oranges = tonumber(s[1]), tonumber(s[4])\n  return\
    \ n - apples - oranges\nend", '    local pattern = "(%d+)%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%a+%s%',
  "\tlocal oranges, apples = s:match('(%d+) apples and (%d+) oranges')\n\tlocal oranges,\
    \ apples = tonumber(oranges), tonumber(apples)\n\tlocal mangoes = n - (oranges\
    \ + apples)\n\treturn mangoes\nend", "  return nil\nend", "  local apples, oranges\
    \ = tonumber(s:match '^%d+'), tonumber(s:match '%d+$')\n  return n - apples -\
    \ oranges\nend", "    local apples, oranges = s:match(\"^(%d+) apples and (%d+)\
    \ oranges$\")\n    apples, oranges = tonumber(apples), tonumber(oranges)\n   \
    \ return n - apples - oranges\nend", "    -- check if it is a valid string and\
    \ number \n    assert(type(s) == 'string' and type(n) == 'number')\n    -- Split\
    \ the input string and save the numbers in two variables\n    local apples, oranges\
    \ = string.match(s, '^(%d+) apples and (%d+) oranges$')\n    -- Return the number\
    \ of mangoes\n    return n - (tonumber(apples) + tonumber(oranges))\nend", end,
  "  \nend", "    -- s is a string like '1 apples and 2 oranges'\n    -- n is the\
    \ total number of fruits in the basket\n    -- return the number of mango fruits\
    \ in the basket\n    -- use the following string methods to split the string\n\
    \    -- string.match(s, pattern)\n    -- string.gmatch(s, pattern)\n    -- string.gsub(s,\
    \ pattern, replacement)\n    -- string.find(s, pattern)\n    -- string.format(formatstring,\
    \ ...)\n    -- string.char(c1, c2, ...)\n    -- string.byte(s [, i [, j]])\n \
    \   -- string.dump(function)\n    -- string.len(s)\n    -- string.lower(s)\n \
    \   -- string.upper(s)\n    -- string.rep(s, n)\n    -- string.reverse(s)\n  \
    \  -- string.pack(fmt, v1, v2, ...)\n    -- string.packsize(fmt)\n    -- string.unpack(fmt,\
    \ s [, pos])\n    -- string.packsize(fmt)\nend", "    local nums = s:gmatch('%d+')\n\
    \    local a, o = nums(), nums()\n    return n - a - o\nend", "    local s_apple,\
    \ s_orange, s_total = s:match('^(%d+) apples and (%d+) oranges$')\n    local apple,\
    \ orange, total = tonumber(s_apple), tonumber(s_orange), tonumber(s_total)\n \
    \   return n - (apple + orange)\nend", "\t--function implementation\nend", " \
    \   local apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')\n\
    \    return n - tonumber(apples) - tonumber(oranges)\nend", "  -- WRITE YOUR CODE\
    \ HERE\nend", "    local _, _, a, o = s:find('(%d+) apples and (%d+) oranges')\n\
    \    return n - tonumber(a) - tonumber(o)\nend", "    local apples, oranges =\
    \ string.match(s, '(%d+) apples and (%d+) oranges')\n    return n - (tonumber(apples)\
    \ + tonumber(oranges))\nend", "\t-- TODO: Implement this function\nend", "   \
    \ -- TODO\nend", "    -- Write your code here\n    return 0\nend", "    local\
    \ apples, oranges = string.match(s, '(%d+) apples and (%d+) oranges')\n    return\
    \ n - (tonumber(apples) + tonumber(oranges))\nend", "  --your code here\nend",
  "    return n - string.match(s, '%d+') + 0\nend", "    local apples, oranges = 0,\
    \ 0\n    for w in s:gmatch('%d+') do\n        if s:find('apple') then apples =\
    \ tonumber(w)\n        else oranges = tonumber(w) end\n    end\n    return n -\
    \ apples - oranges\nend", "\nend", "    local x = (s:gsub('%D', ''))\n    local\
    \ y = (x:gsub(' ', ''))\n    local z = (y:gsub('and', ''))\n    local a = tonumber(z)\n\
    \    local b = (n - a)\n    return b\nend", "    -- only one line needed\n   \
    \ return n - tonumber(s:sub(1, 1)) - tonumber(s:sub(15, 15))\nend", "  local apples,\
    \ oranges = string.match(s, '(%d+) apples and (%d+) oranges')\n  apples, oranges\
    \ = tonumber(apples), tonumber(oranges)\n  return n - apples - oranges\nend",
  "  -- your code here\nend", "   local apples, oranges = s:match(\"(%d+) apples and\
    \ (%d+) oranges\")\n   return n - (tonumber(apples) + tonumber(oranges))\nend",
  "  -- your code here\nend", "\tlocal a, o = 0, 0\n\ta = s:match('^(%d+) apples')\n\
    \to = s:match('^%d+ apples and (%d+) oranges')\n\ta = a or 0\n\to = o or 0\n\t\
    return n - (a + o)\nend", "\tlocal apples = tonumber(s:match(\"(%d+) apples\"\
    ))\n\tlocal oranges = tonumber(s:match(\"(%d+) oranges\"))\n\treturn n - apples\
    \ - oranges\nend", "    --local s = '100 apples and 1 oranges'\n    --local n\
    \ = 10\n    local x = s:match(\"(%d+) apples\")\n    local y = s:match(\"(%d+)\
    \ oranges\")\n    --print(x, y)\n    if x and y then\n        return n - tonumber(x)\
    \ - tonumber(y)\n    end\nend", "    return n - tonumber(s:match('(%d+)%s+apples%s+and%s+(%d+)%s+oranges'))\n\
    end", "    local _, _, a, o = s:find('(%d+) apples and (%d+) oranges')\n    return\
    \ n - (a + o)\nend", "    -- all_fruit_number, orange_number\n    local a, b =\
    \ s:match('(%d+) apples and (%d+) oranges')\n    a, b = tonumber(a), tonumber(b)\n\
    \    return n - a - b\nend", "    local a, o = string.match(s, '(%d+) apples and\
    \ (%d+) oranges')\n    return n - (a + o)\nend", "\treturn 0\nend", "  -- your\
    \ code goes here\nend", "    -- Write your code here\nend", "\nend", end, "  --\
    \ Write your code here\n  local total_apples = tonumber(string.match(s, \"%d+\
    \ apples\"))\n  local total_oranges = tonumber(string.match(s, \"%d+ oranges\"\
    ))\n  return (n - total_apples - total_oranges)\nend", "    -- your code here\n\
    end", "    local i=0\n    local j=0\n    local str = s\n    local arr = {}\n \
    \   for i in string.gmatch(str, \"%S+\") do\n        arr[#arr+1] = i\n    end\n\
    \    local f = arr[1]\n    local h = arr[3]\n    local sum1 = tonumber(f) + tonumber(h)\n\
    \    local sum2 = n - sum1\n    return sum2\nend", "\tlocal a, o = string.match(s,\
    \ \"(%d+) apples and (%d+) oranges\")\n\ta, o = tonumber(a), tonumber(o)\n\treturn\
    \ n - a - o\nend", "    local sum\n    local elem = {}\n    for i in string.gmatch(s,\
    \ '%d+') do\n        sum = sum + tonumber(i)\n        table.insert(elem, tonumber(i))\n\
    \    end\n    -- for i in string.gmatch(s, '%a+') do\n    --     print(i)\n  \
    \  -- end\n    local result = n - sum\n    return result\nend", "  local str =\
    \ s:gsub('[^%d]', ' ')\n  local fruits = split(str)\n  local x = 0\n  local y\
    \ = 0\n  for i=1, #fruits do\n    if (i % 2) == 0 then\n      y = y + tonumber(fruits[i])\n\
    \    else\n      x = x + tonumber(fruits[i])\n    end\n  end\n  return n - (x\
    \ + y)\nend", "    assert(type(s) == 'string')\n    assert(type(n) == 'number')\n\
    \    local a = s:match('^(%d+)%s+apples')\n    local o = s:match('^%d+%s+apples%s+and%s+(%d+)%s+oranges')\n\
    \    return n - (a + o)\nend", "  -- your code here\nend", end, "\tlocal a, o\
    \ = s:match('(%d+) apples and (%d+) oranges')\n\ta, o = tonumber(a), tonumber(o)\n\
    \treturn n - a - o\nend", "  \n  local tab = {' apples and ', ' oranges'}\n  s\
    \ = s:gsub(tab[1], ',')\n  s = s:gsub(tab[2], '')\n  s = s:gsub(' ', '')\n  --print(s)\n\
    \  -- get the number of mangoes\n  local total_mangoes = tonumber(s:match('([^,]+)$'))\
    \ + tonumber(s:match('^([^,]+)'))\n  local mangoes = n - total_mangoes\n  print(mangoes)\n\
    \  return(mangoes)\nend", "  -- write your code here\nend", " \n  local nums =\
    \ s:match('(%d+) apples and (%d+) oranges')\n \n  local num_of_apples = tonumber(nums:match('(%d+)\
    \ apples'))\n  local num_of_oranges = tonumber(nums:match('(%d+) oranges'))\n\
    \ \n  local num_of_mangoes = n - (num_of_apples + num_of_oranges)\n \n  return\
    \ num_of_mangoes\n \nend\n \n ", "    -- extract the number of apples and oranges\n\
    \    local _, _, a, o = s:find('(%d+) apples and (%d+) oranges')\n    -- compute\
    \ the number of mangoes in the basket\n    return n - (tonumber(a) + tonumber(o))\n\
    end", "\tlocal x, y = s:match(\"(%d+) apples and (%d+) oranges\")\n\treturn n\
    \ - (x+y)\nend", "\tlocal function count(s)\n\t\tlocal a, o = 0, 0\n\t\tfor m\
    \ in s:gmatch('%d+') do\n\t\t\tlocal n = tonumber(m)\n\t\t\tif s:find('apples')\
    \ then\n\t\t\t\ta = n\n\t\t\telse\n\t\t\t\to = n\n\t\t\tend\n\t\tend\n\t\treturn\
    \ a, o\n\tend\n\tlocal a, o = count(s)\n\tlocal p = a + o\n\tif p > n then\n\t\
    \tp = n\n\tend\n\treturn n - p\nend", end, "    local apples, oranges = s:match'(%d+)\
    \ apples and (%d+) oranges'\n    return n - (apples + oranges)\nend", "    local\
    \ a,o = string.match(s, '(%d+) apples and (%d+) oranges')\n    return n - tonumber(a)\
    \ - tonumber(o)\nend", "    local apples, oranges = s:match(\"(%d+) apples and\
    \ (%d+) oranges\")\n    return n - tonumber(apples) - tonumber(oranges)\nend",
  "\tlocal fruits_str = string.gsub(s, \" and \", \" \")\n\tlocal nums = string.split(fruits_str,\
    \ \" \")\n\tlocal num_apples = tonumber(nums[1])\n\tlocal num_oranges = tonumber(nums[3])\n\
    \tlocal mango_fruits = n - (num_apples + num_oranges)\n\treturn mango_fruits\n\
    end", "    local function get_num(s)\n        local num = 0\n        for i = 1,\
    \ #s do\n            local c = s:sub(i, i)\n            if c >= '0' and c <= '9'\
    \ then\n                num = num * 10 + tonumber(c)\n            end\n      \
    \  end\n        return num\n    end\n    local a, o = s:find('apples')\n    local\
    \ total = n - get_num(s:sub(1, a - 2)) - get_num(s:sub(o + 2))\n    return total\n\
    end", "  local _, _, apples, oranges = s:find(\"(%d+) apples and (%d+) oranges\"\
    )\n  apples = tonumber(apples)\n  oranges = tonumber(oranges)\n  return n - apples\
    \ - oranges\nend", "  -- your code here\nend", "  local pat = '(%d+) apples and\
    \ (%d+) oranges'\n  local apples, oranges = s:match(pat)\n  return n - (tonumber(apples)\
    \ + tonumber(oranges))\nend", "  local apples = tonumber(s:match'^(%d+) apples')\n\
    \  local oranges = tonumber(s:match'and (%d+) oranges')\n  return n - apples -\
    \ oranges\nend", "    apples, oranges = string.match(s, \"(%d+) apples and (%d+)\
    \ oranges\")\n    if apples then\n        apples = tonumber(apples)\n        oranges\
    \ = tonumber(oranges)\n        return n - apples - oranges\n    end\nend", " \
    \   local apples, oranges = s:match('([0-9]+) apples and ([0-9]+) oranges')\n\
    \    apples, oranges = tonumber(apples), tonumber(oranges)\n    return n - apples\
    \ - oranges\nend", "\tlocal p = s:find(\" a\")\n\tlocal a = tonumber(s:sub(1,\
    \ p-1))\n\tlocal p = s:find(\" o\")\n\tlocal o = tonumber(s:sub(p-2, p-1))\n\t\
    return n - a - o\nend", "   -- your code\nend", "    local count_apples = string.match(s,\
    \ '%d+')\n    local count_oranges = string.match(s, '%d+$')\n    local count_mangoes\
    \ = n - count_apples - count_oranges\n    return count_mangoes\nend", "   -- your\
    \ code here\n   -- ...\nend", "  return s:match(\"^(%d+) apples and (%d+) oranges$\"\
    )\nend", "    -- This is a stub function.\n    -- Local variables\n    local apples_oranges,fruits_basket,apples,oranges,apples_oranges_int,fruits_basket_int\n\
    \    -- removing white spaces\n    s = s:gsub(\"%s+\", \"\")\n    -- split string\
    \ into 2 seperate strings\n    apples_oranges,fruits_basket = s:match(\"(.+)%sand(.+)\"\
    )\n    -- removing apples or oranges\n    apples_oranges = apples_oranges:gsub(\"\
    %w+\", \"\")\n    -- removing basket\n    fruits_basket = fruits_basket:gsub(\"\
    %w+\", \"\")\n    -- convert strings to integers\n    apples_oranges_int = tonumber(apples_oranges)\n\
    \    fruits_basket_int = tonumber(fruits_basket)\n    -- some simple calculations\n\
    \    apples = apples_oranges_int * 2\n    oranges = apples_oranges_int * 3\n \
    \   -- return the result\n    return fruits_basket_int - apples - oranges\nend",
  "    -- TODO: add your code here\n    local index_apples = string.find(s, 'apples')\n\
    \    local index_oranges = string.find(s, 'oranges')\n    local apples = string.sub(s,\
    \ 1, index_apples - 2)\n    local oranges = string.sub(s, index_oranges - 1, index_oranges\
    \ - 2)\n    local result = 0\n    result = n - (tonumber(apples) + tonumber(oranges))\n\
    \    return result\nend", "    -- body\n    local a, o = s:match('(%d+) apples\
    \ and (%d+) oranges')\n    return tonumber(n) - tonumber(a) - tonumber(o)\nend",
  "    -- get the numbers of apples and oranges\n    local apples, oranges = (string.match(s,\
    \ '(%d+) apples and (%d+) oranges'))\n    -- sum the apples and oranges\n    local\
    \ sum = apples + oranges\n    -- the number of mango fruits is n - sum\n    return\
    \ n - sum\nend", "  -- place your code here\nend", "\t-- TODO: Your code here\n\
    end", "    local ss = {}\n    for s in s:gmatch(\"%d+\") do\n        table.insert(ss,\
    \ s)\n    end\n    return n - (tonumber(ss[1]) + tonumber(ss[2]))\nend", "   \
    \ local f = 0\n    local _, _, a, o = s:find('(%d+) apples and (%d+) oranges')\n\
    \    f = n - (tonumber(a) + tonumber(o))\n    return f\nend", "    -- write your\
    \ code here\n    local l, r = 0, 0\n    for i in s:gmatch('%d+') do\n        l\
    \ = l + tonumber(i)\n    end\n    r = n - l\n    return r\nend", "\tlocal index_of_orange\
    \ = s:find(' oranges')\n\tlocal index_of_apple = s:find(' apples')\n\tlocal number_of_apple\
    \ = tonumber(s:sub(1, index_of_apple - 1))\n\tlocal number_of_orange = tonumber(s:sub(index_of_apple\
    \ + 1, index_of_orange - 1))\n\tlocal total_number_of_apple_and_orange = number_of_apple\
    \ + number_of_orange\n\treturn n - total_number_of_apple_and_orange\nend", " \
    \ local apples = tonumber(s:match('(%d+) apples'))\n  local oranges = tonumber(s:match('(%d+)\
    \ oranges'))\n  return n - apples - oranges\nend", "  -- body\n  local  a, b =\
    \ string.match(s, '(%d+) apples and (%d+) oranges')\n  return n - (a + b)\nend",
  "    return n - tonumber(s:match(\"%d+\")) * 2\nend", "\tlocal a, o = s:match('(%d+)\
    \ apples and (%d+) oranges')\n\treturn n - (a + o)\nend", "  local num_apples\
    \ = tonumber(s:match(\"(%d+) apples\"))\n  local num_oranges = tonumber(s:match(\"\
    (%d+) oranges\"))\n  return n - num_apples - num_oranges\nend", "\nend", "  local\
    \ count = string.gsub(s, 'apples', '')\n  count = string.gsub(count, 'oranges',\
    \ '')\n  count = string.gsub(count, 'and', '')\n  count = string.gsub(count, '\
    \ ', '')\n  local number = (2 * tonumber(count)) - n\n  return number\nend", "\t\
    local apples = tonumber(s:match('%d+'))\n\tlocal oranges = tonumber(s:match('%d+',\
    \ #s:match('%d+') + 2))\n\treturn n - apples - oranges\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
