name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local digits = tostring(x)\n    local shift = shift % #digits\n\
    \    local result = digits:sub(shift + 1) .. digits:sub(1, shift)\n    return\
    \ result\nend", "    local s = tostring(x)\n    local m = #s\n    if shift < m\
    \ then\n        return s:sub(m - shift + 1) .. s:sub(1, m - shift)\n    else\n\
    \        local n = shift % m\n        return s:sub(m - n + 1) .. s:sub(1, m -\
    \ n):reverse()\n    end\nend", "    local x_str = tostring(x)\n    local x_len\
    \ = #x_str\n    if shift > x_len then\n        return x_str:reverse()\n    end\n\
    \    return x_str:sub(x_len-shift+1) .. x_str:sub(1, x_len-shift)\nend", "   \
    \ x = tostring(x)\n    shift = shift % #x\n    return x:sub(shift + 1) .. x:sub(1,\
    \ shift)\nend", "  if shift >= num_digits(x) then\n    return reverse_digits(x)\n\
    \  end\n  return str_tens(x, shift) .. str_ones(x, shift)\nend", "    local str\
    \ = tostring(x)\n    shift = shift % #str\n    if shift == 0 then\n        return\
    \ str\n    end\n    return string.sub(str, shift + 1) .. string.sub(str, 1, shift)\n\
    end", "  return tostring(x):reverse():sub(1,shift):reverse() .. tostring(x):sub(1,\
    \ #tostring(x) - shift)\nend", "  local shifted = tostring(x)\n  shift = shift\
    \ % #shifted\n  local back = shifted:sub(1, -shift - 1)\n  local front = shifted:sub(-shift)\n\
    \  return front .. back\nend", "    local xs = tostring(x)\n    local len = #xs\n\
    \    local shift = shift % len\n    local res = xs:sub(len - shift + 1) .. xs:sub(1,\
    \ len - shift)\n    return res\nend", "\treturn (('%0' .. n_digits(x) .. 'd'):format(x)\
    \ .. (shift > n_digits(x) and '' or ' '):rep(shift)):sub(shift + 1)\nend", " \
    \   x = tostring(x)\n    if shift < #x then\n        x = x:sub(shift + 1) .. x:sub(1,\
    \ shift)\n    else\n        x = x:reverse()\n    end\n    return x\nend", "\t\
    local s = str(x)\n\tif shift >= len(s) then\n\t\treturn s:reverse()\n\tend\n\t\
    return s:sub(shift + 1) .. s:sub(1, shift)\nend", "    if shift > 0 then\n   \
    \     shift = shift % #tostring(x)\n    end\n    return tostring(x):sub(shift\
    \ + 1) .. tostring(x):sub(1, shift)\nend", "  x = tostring(x)\n  shift = shift\
    \ % #x\n  return x:sub(shift + 1) .. x:sub(1, shift)\nend", "\tlocal s = tostring(x)\n\
    \tlocal n = #s\n\tif shift >= n then\n\t\ts = s:reverse()\n\telse\n\t\ts = (s:sub(n-shift+1,\
    \ n) .. s:sub(1, n-shift))\n\tend\n\treturn s\nend", "    local p = x\n    local\
    \ q = x\n    local r = 0\n    local n = 0\n    repeat\n        r = q % 10\n  \
    \      q = q // 10\n        n = n + 1\n    until q == 0\n    if shift < n then\n\
    \        q = x\n        for i = 1, shift do\n            r = q % 10\n        \
    \    q = q // 10\n        end\n        local s = 0\n        for i = 1, n - shift\
    \ do\n            s = s * 10 + q % 10\n            q = q // 10\n        end\n\
    \        p = p // (10 ^ shift)\n        p = p + s * (10 ^ n)\n    else\n     \
    \   local s = 0\n        repeat\n            s = s * 10 + p % 10\n           \
    \ p = p // 10\n        until p == 0\n        p = s\n    end\n    return tostring(p)\n\
    end", "    x = tostring(x)\n    if shift >= #x then\n        x = string.reverse(x)\n\
    \    else\n        x = x:sub(#x - shift + 1) .. x:sub(1, #x - shift)\n    end\n\
    \    return x\nend", "  local str = string.format(\"%d\", x)\n  local len = #str\n\
    \  local shift = shift % len\n  return string.sub(str, len - shift + 1) .. string.sub(str,\
    \ 1, len - shift)\nend", "    if shift == 0 then\n        return tostring(x)\n\
    \    end\n    local x_str = tostring(x)\n    local length = x_str:len()\n    if\
    \ shift >= length then\n        return x_str:reverse()\n    end\n    return x_str:sub(shift\
    \ + 1) .. x_str:sub(1, shift)\nend", "  x = math.abs(x)\n  if x == 0 then return\
    \ '0' end\n  local n = math.floor(math.log10(x))\n  x = x * (10 ^ (shift % (n\
    \ + 1)))\n  x = x % (10 ^ (n + 1))\n  return tostring(x)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
