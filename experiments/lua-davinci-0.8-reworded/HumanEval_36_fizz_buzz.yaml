name: HumanEval_36_fizz_buzz
language: lua
prompt: "-- Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
  -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
  \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
  \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
  \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000), 192)\n\
  \    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
  \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- YOUR CODE HERE\n    error(\"function fizz_buzz undefined\")\n\
    end", "    local count = 0\n    for i = 0, n do\n        if i % 11 == 0 or i %\
    \ 13 == 0 then\n            count = count + string.gsub(tostring(i), \"7\", \"\
    \")\n        end\n    end\n    return count\nend", "    local count = 0\n    for\
    \ i = 0, n do\n        if i % 11 == 0 or i % 13 == 0 then\n            local _,\
    \ n = string.gsub(tostring(i), '7', '')\n            count = count + n\n     \
    \   end\n    end\n    return count\nend", "    return n\nend", "  local result\
    \ = 0\n  for i = 11, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      result\
    \ = result + string.gsub(tostring(i), \"7\", \"\")\n    end\n  end\n  return result\n\
    end", "  \nend", "  local function fb(i, j)\n    if i > n then\n      return j\n\
    \    elseif i % 11 == 0 or i % 13 == 0 then\n      return fb(i + 1, j + string.gsub(tostring(i),\
    \ '7', ''))\n    else\n      return fb(i + 1, j)\n    end\n  end\n  return fb(1,\
    \ 0)\nend", "  local count = 0\n  if n < 7 then return count end\n  local nums\
    \ = {}\n  for i = 0, n - 1 do\n    local a = (i % 11 == 0)\n    local b = (i %\
    \ 13 == 0)\n    if a or b then\n      local string = tostring(i)\n      for j\
    \ = 1, #string do\n        if string:sub(j, j) == \"7\" then\n          count\
    \ = count + 1\n        end\n      end\n    end\n  end\n  return count\nend", "\t\
    local c = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\
    \tc = c + bit32.extract(i, 0)\n\t\tend\n\tend\n\treturn c\nend", "  local count\
    \ = 0\n  for num = 0, n - 1 do\n    if is_divisible(num, 11) or is_divisible(num,\
    \ 13) then\n      if contains_seven(num) then\n        count = count + 1\n   \
    \   end\n    end\n  end\n  return count\nend", "    local count = 0\n    local\
    \ divisors = {11, 13}\n    for _, d in ipairs(divisors) do\n        count = count\
    \ + (n - 1) // d\n    end\n    local n_digits = #tostring(n)\n    local buffer\
    \ = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n    for _, d in ipairs(divisors) do\n    \
    \    for p = 0, d - 1 do\n            local m = n - p\n            local dm =\
    \ m\n            local k = 1\n            while dm > 0 do\n                buffer[dm\
    \ % 10] = buffer[dm % 10] + k\n                dm = dm // 10\n               \
    \ k = k * 10\n            end\n        end\n    end\n    for i = 0, 9 do\n   \
    \     buffer[i] = buffer[i] // #divisors\n    end\n    for i = 0, 9 do\n     \
    \   if i == 7 then\n            buffer[i] = buffer[i] - 1\n        end\n     \
    \   local count = count + buffer[i] * (n_digits - 1)\n    end\n    return count\n\
    end", "\tlocal c = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and\
    \ i % 7 == 0 then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend", "  local\
    \ count = 0\n  local num = 11\n  while num < n do\n    local digit = num % 10\n\
    \    local next_digit = (num % 100) / 10\n    if next_digit == 7 or digit == 7\
    \ then\n      count = count + 1\n    end\n    num = num + 11\n  end\n  num = 13\n\
    \  while num < n do\n    local digit = num % 10\n    local next_digit = (num %\
    \ 100) / 10\n    if next_digit == 7 or digit == 7 then\n      count = count +\
    \ 1\n    end\n    num = num + 13\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        if math.fmod(i, 11) == 0 or math.fmod(i, 13)\
    \ == 0 then\n            local d = i\n            while d > 0 do\n           \
    \     if math.fmod(d, 10) == 7 then\n                    count = count + 1\n \
    \               end\n                d = math.floor(d / 10)\n            end\n\
    \        end\n    end\n    return count\nend", "  if n < 7 then return 0 end\n\
    \  local count = 0\n  if n % 11 == 0 or n % 13 == 0 then\n    count = count +\
    \ 1\n  end\n  count = count + fizz_buzz(n - 1)\n  return count\nend", "  -- TODO\n\
    end", "    local result = 0\n    for i = 1, n-1 do\n        if ((i % 11 == 0)\
    \ or (i % 13 == 0)) and (tostring(i):find(\"7\")) then\n            result = result\
    \ + 1\n        end\n    end\n    return result\nend", "  local sum = 0\n  for\
    \ i = 1, n-1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"7\"\
    ) then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "\tlocal count\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "    local count = 0\n    for x = 1, n do\n        if x % 11 == 0 or x % 13 == 0\
    \ then\n            count = count + string.gsub(tostring(x), \"7\", \"\")\n  \
    \      end\n    end\n    return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
