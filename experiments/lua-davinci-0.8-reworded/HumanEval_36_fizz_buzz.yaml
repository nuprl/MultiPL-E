name: HumanEval_36_fizz_buzz
language: lua
prompt: "-- Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n-- >>> fizz_buzz(50)\n-- 0\n-- >>> fizz_buzz(78)\n\
  -- 2\n-- >>> fizz_buzz(79)\n-- 3\nlocal function fizz_buzz(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
  \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
  \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
  \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000), 192)\n\
  \    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
  \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- YOUR CODE HERE\n    error(\"function fizz_buzz undefined\")\n\
    end", "    local count = 0\n    for i = 0, n do\n        if i % 11 == 0 or i %\
    \ 13 == 0 then\n            count = count + string.gsub(tostring(i), \"7\", \"\
    \")\n        end\n    end\n    return count\nend", "    local count = 0\n    for\
    \ i = 0, n do\n        if i % 11 == 0 or i % 13 == 0 then\n            local _,\
    \ n = string.gsub(tostring(i), '7', '')\n            count = count + n\n     \
    \   end\n    end\n    return count\nend", "    return n\nend", "  local result\
    \ = 0\n  for i = 11, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      result\
    \ = result + string.gsub(tostring(i), \"7\", \"\")\n    end\n  end\n  return result\n\
    end", "  \nend", "  local function fb(i, j)\n    if i > n then\n      return j\n\
    \    elseif i % 11 == 0 or i % 13 == 0 then\n      return fb(i + 1, j + string.gsub(tostring(i),\
    \ '7', ''))\n    else\n      return fb(i + 1, j)\n    end\n  end\n  return fb(1,\
    \ 0)\nend", "  local count = 0\n  if n < 7 then return count end\n  local nums\
    \ = {}\n  for i = 0, n - 1 do\n    local a = (i % 11 == 0)\n    local b = (i %\
    \ 13 == 0)\n    if a or b then\n      local string = tostring(i)\n      for j\
    \ = 1, #string do\n        if string:sub(j, j) == \"7\" then\n          count\
    \ = count + 1\n        end\n      end\n    end\n  end\n  return count\nend", "\t\
    local c = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\
    \tc = c + bit32.extract(i, 0)\n\t\tend\n\tend\n\treturn c\nend", "  local count\
    \ = 0\n  for num = 0, n - 1 do\n    if is_divisible(num, 11) or is_divisible(num,\
    \ 13) then\n      if contains_seven(num) then\n        count = count + 1\n   \
    \   end\n    end\n  end\n  return count\nend", "    local count = 0\n    local\
    \ divisors = {11, 13}\n    for _, d in ipairs(divisors) do\n        count = count\
    \ + (n - 1) // d\n    end\n    local n_digits = #tostring(n)\n    local buffer\
    \ = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}\n    for _, d in ipairs(divisors) do\n    \
    \    for p = 0, d - 1 do\n            local m = n - p\n            local dm =\
    \ m\n            local k = 1\n            while dm > 0 do\n                buffer[dm\
    \ % 10] = buffer[dm % 10] + k\n                dm = dm // 10\n               \
    \ k = k * 10\n            end\n        end\n    end\n    for i = 0, 9 do\n   \
    \     buffer[i] = buffer[i] // #divisors\n    end\n    for i = 0, 9 do\n     \
    \   if i == 7 then\n            buffer[i] = buffer[i] - 1\n        end\n     \
    \   local count = count + buffer[i] * (n_digits - 1)\n    end\n    return count\n\
    end", "\tlocal c = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and\
    \ i % 7 == 0 then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend", "  local\
    \ count = 0\n  local num = 11\n  while num < n do\n    local digit = num % 10\n\
    \    local next_digit = (num % 100) / 10\n    if next_digit == 7 or digit == 7\
    \ then\n      count = count + 1\n    end\n    num = num + 11\n  end\n  num = 13\n\
    \  while num < n do\n    local digit = num % 10\n    local next_digit = (num %\
    \ 100) / 10\n    if next_digit == 7 or digit == 7 then\n      count = count +\
    \ 1\n    end\n    num = num + 13\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        if math.fmod(i, 11) == 0 or math.fmod(i, 13)\
    \ == 0 then\n            local d = i\n            while d > 0 do\n           \
    \     if math.fmod(d, 10) == 7 then\n                    count = count + 1\n \
    \               end\n                d = math.floor(d / 10)\n            end\n\
    \        end\n    end\n    return count\nend", "  if n < 7 then return 0 end\n\
    \  local count = 0\n  if n % 11 == 0 or n % 13 == 0 then\n    count = count +\
    \ 1\n  end\n  count = count + fizz_buzz(n - 1)\n  return count\nend", "  -- TODO\n\
    end", "    local result = 0\n    for i = 1, n-1 do\n        if ((i % 11 == 0)\
    \ or (i % 13 == 0)) and (tostring(i):find(\"7\")) then\n            result = result\
    \ + 1\n        end\n    end\n    return result\nend", "  local sum = 0\n  for\
    \ i = 1, n-1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"7\"\
    ) then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "\tlocal count\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "    local count = 0\n    for x = 1, n do\n        if x % 11 == 0 or x % 13 == 0\
    \ then\n            count = count + string.gsub(tostring(x), \"7\", \"\")\n  \
    \      end\n    end\n    return count\nend", "  -- if n is less than 1, return\
    \ 0\n  if n < 1 then\n    return 0\n  end\n  -- if n is equal to 11 or 13, return\
    \ 1\n  if n == 11 or n == 13 then\n    return 1\n  end\n  -- if n is divisible\
    \ by 11 or 13, return the number of times 7 appears plus 1\n  if n % 11 == 0 or\
    \ n % 13 == 0 then\n    return count_7(n) + 1\n  end\n  -- else return the number\
    \ of times 7 appears\n  return count_7(n)\nend", "    local seven = 0\n    for\
    \ x = 0, n - 1 do\n        if (x % 11 == 0 or x % 13 == 0) and tostring(x):find(\"\
    7\") then\n            seven = seven + 1\n        end\n    end\n    return seven\n\
    end", "    local count = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or\
    \ i % 13 == 0) and tostring(i):find(\"7\") then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  return 0\nend", "    local sum\
    \ = 0\n    for i = 1, n do\n        local s = tostring(i)\n        if (math.fmod(i,\
    \ 11) == 0 or math.fmod(i, 13) == 0) and string.find(s, \"7\") then\n        \
    \    sum = sum + 1\n        end\n    end\n    return sum\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local s = tostring(i)\n            for i = 1, #s do\n                if\
    \ s:sub(i, i) == '7' then\n                    count = count + 1\n           \
    \     end\n            end\n        end\n    end\n    return count\nend", "  \
    \  n = n - 1\n    local f = n / 11\n    local b = n / 13\n    return (f - math.floor(f))\
    \ * 10 + (b - math.floor(b)) * 10\nend", "    return 0\nend", "  if n < 11 then\
    \ return 0 end\n  local k = n % 11\n  if k < 3 then n = n - k\n  else n = n +\
    \ 11 - k end\n  local x = math.floor(n / 11)\n  local y = math.floor(n / 13)\n\
    \  return math.floor(y / 7) + math.floor(x / 7) + fizz_buzz(n / 2)\nend", "  local\
    \ acc = 0\n  for i = 1, n do\n    local flag = true\n    local d = i\n    while\
    \ d > 0 do\n      if d % 10 == 7 then\n        flag = false\n        break\n \
    \     end\n      d = math.floor(d / 10)\n    end\n    if (i % 11 == 0 or i % 13\
    \ == 0) and flag then\n      acc = acc + 1\n    end\n  end\n  return acc\nend",
  "    if n < 7 then\n        return 0\n    end\n    local digits = digit_counter(n)\n\
    \    if digits[7] == 0 then\n        return 0\n    end\n    if n % 11 == 0 or\
    \ n % 13 == 0 then\n        return fizz_buzz(n - 1) + digits[7]\n    end\n   \
    \ return fizz_buzz(n - 1)\nend", "    local count = 0\n    for i = 1, n - 1 do\n\
    \        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"7\") then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend", " \
    \ local count = 0\n  local i = 1\n  while i < n do\n    if i % 11 == 0 or i %\
    \ 13 == 0 then\n      local number = i\n      local mod = number % 10\n      while\
    \ number > 0 do\n        if mod == 7 then\n          count = count + 1\n     \
    \   end\n        number = math.floor(number / 10)\n        mod = number % 10\n\
    \      end\n    end\n    i = i + 1\n  end\n  return count\nend", "  local limit\
    \ = math.floor(n / 13) * 13\n  local answer = 0\n  for i = 13, limit, 13 do\n\
    \    answer = answer + factorial_digit_sum(i)\n  end\n  limit = math.floor(n /\
    \ 11) * 11\n  for i = 11, limit, 11 do\n    answer = answer + factorial_digit_sum(i)\n\
    \  end\n  return answer\nend", "    -- YOUR CODE HERE\nend", "\tlocal count =\
    \ 0\n\tfor i = 0, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ c = 0\n  for i = 1, n-1 do\n    if (i % 11 == 0 or i % 13 == 0) and contains_digit(i,\
    \ 7) then\n      c = c + 1\n    end\n  end\n  return c\nend", "    return reduce(\n\
    \        function(x, y) return x + y end,\n        range(n, 11, 11),\n       \
    \ range(n, 13, 13)\n    )\nend", "    local count = 0\n    local start = 11\n\
    \    while start < n do\n        local s = tostring(start)\n        for i = 1,\
    \ #s do\n            if s:sub(i, i) == '7' then\n                count = count\
    \ + 1\n            end\n        end\n        start = start + 11\n    end\n   \
    \ start = 13\n    while start < n do\n        local s = tostring(start)\n    \
    \    for i = 1, #s do\n            if s:sub(i, i) == '7' then\n              \
    \  count = count + 1\n            end\n        end\n        start = start + 13\n\
    \    end\n    return count\nend", "    -- YOUR CODE HERE\n    local count = 0\n\
    \    local n1,n2 = n%11,n%13\n    if n1==0 or n2==0 then\n        count = count\
    \ + fizz_buzz(n1) + fizz_buzz(n2)\n    else\n        local digit = n%10\n    \
    \    if digit == 7 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, n-1 do\n       \
    \ if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"7\") then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ counter = 0\n  for x = 1, n do\n    if (x % 11 == 0 or x % 13 == 0) and x %\
    \ 10 == 7 then\n      counter = counter + 1\n    end\n  end\n  return counter\n\
    end", "  local ans = 0\n  local x = 0\n  local y = 0\n  local i = 0\n  for i =\
    \ 0, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      if i % 11 == 0 then\n\
    \        x = x + 1\n      end\n      if i % 13 == 0 then\n        y = y + 1\n\
    \      end\n      if i % 11 == 0 and i % 13 == 0 then\n        x = x - 1\n   \
    \     y = y - 1\n      end\n      local s = tostring(i)\n      if string.find(s,\
    \ \"7\") then\n        ans = ans + 1\n      end\n    end\n  end\n  return ans\n\
    end", "    local counter = 0\n    for i = 1, n do\n        local remainder = i\
    \ % 11\n        if remainder == 0 or i % 13 == 0 then\n            local tmp =\
    \ string.format(\"%d\", i)\n            for _, v in ipairs(tmp) do\n         \
    \       if tonumber(v) == 7 then\n                    counter = counter + 1\n\
    \                end\n            end\n        end\n    end\n    return counter\n\
    end", "    --your code here\nend", "    local count = 0\n    for i = 1, n do\n\
    \        if i % 11 == 0 or i % 13 == 0 then\n            local x = i\n       \
    \     local sum = 0\n            while x > 0 do\n                sum = sum + x\
    \ % 10\n                x = x // 10\n            end\n            if sum == 7\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, n do\n        if\
    \ i % 11 == 0 or i % 13 == 0 then\n            local temp = i\n            while\
    \ temp > 0 do\n                if temp % 10 == 7 then\n                    count\
    \ = count + 1\n                end\n                temp = math.floor(temp / 10)\n\
    \            end\n        end\n    end\n    return count\nend", "    local count\
    \ = 0\n    local div_13 = 1\n    local div_11 = 1\n    for i = 0, n do\n     \
    \   if (i % 13 == 0) then\n            div_13 = i\n        end\n        if (i\
    \ % 11 == 0) then\n            div_11 = i\n        end\n        if (div_13 ==\
    \ i or div_11 == i) then\n            local new_count = num7s(i)\n           \
    \ count = count + new_count\n        end\n    end\n    return count\nend", " \
    \ local sum = 0\n  for i = 1, n do\n    local divisible = 0\n    if i % 11 ==\
    \ 0 then\n      divisible = 1\n    elseif i % 13 == 0 then\n      divisible =\
    \ 1\n    end\n    if divisible == 1 then\n      while i > 0 do\n        local\
    \ digit = i % 10\n        if digit == 7 then\n          sum = sum + 1\n      \
    \  end\n        i = (i - digit) / 10\n      end\n    end\n  end\n  return sum\n\
    end", "    local count = 0\n    local number\n    local s\n    for i = 1, n -\
    \ 1 do\n        number = i\n        s = string.format(\"%d\", number)\n      \
    \  if s:match(\"7\") then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local sum = 0\n    for i = 1, n-1 do\n        if\
    \ i % 11 == 0 or i % 13 == 0 then\n            sum = sum + digit_count(i, 7)\n\
    \        end\n    end\n    return sum\nend", "    return (n-1)%22\nend", "  local\
    \ count = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n     \
    \ local num = i\n      while num > 0 do\n        local digit = num % 10\n    \
    \    if digit == 7 then\n          count = count + 1\n        end\n        num\
    \ = (num - digit) / 10\n      end\n    end\n  end\n  return count\nend", "   \
    \ local function is_valid(x)\n        if x % 11 == 0 or x % 13 == 0 then\n   \
    \         return true\n        else\n            return false\n        end\n \
    \   end", "    local count = 0\n    for i = 1, n do\n        if (i % 11 == 0 or\
    \ i % 13 == 0) and i % 100 ~= 0 then\n            -- use tostring() to convert\
    \ the integer to a string\n            for j = 1, string.len(tostring(i)) do\n\
    \                if string.sub(tostring(i), j, j) == \"7\" then\n            \
    \        count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i = 1, n do\n\
    \        if i % 11 == 0 or i % 13 == 0 then\n            local s = tostring(i)\n\
    \            for i = 1, #s do\n                if s:sub(i, i) == '7' then\n  \
    \                  count = count + 1\n                end\n            end\n \
    \       end\n    end\n    return count\nend", "  if n <= 0 then\n    return 0\n\
    \  end\n  local fizz = fizz_buzz(n - 1)\n  if (n % 11 == 0 or n % 13 == 0) and\
    \ tostring(n):find('7') then\n    return fizz + 1\n  end\n  return fizz\nend",
  "  if n < 1 then\n    return -1\n  end\n  if n < 7 then\n    return 0\n  end\n \
    \ local n_d7, n_d1113 = count_d7(n), count_d1113(n)\n  if n_d1113 > n_d7 then\n\
    \    return n_d7\n  end\n  if n_d1113 == n_d7 then\n    return 0\n  end\n  local\
    \ n_d7_d11, n_d7_d13 = count_d7_d11(n), count_d7_d13(n)\n  return n_d7 - n_d7_d11\
    \ - n_d7_d13\nend", "    if n < 0 then\n        n = n * -1\n    end\n    if n\
    \ < 10 then\n        return 0\n    end\n    if n < 20 then\n        if n % 11\
    \ == 0 or n % 13 == 0 then\n            return 1\n        else\n            return\
    \ 0\n        end\n    end\n    if n < 100 then\n        return (n % 10 == 7 and\
    \ (n % 11 == 0 or n % 13 == 0)) and 1 or 0\n    end\n    return (n % 100 >= 70\
    \ and n % 100 <= 79 and (n % 11 == 0 or n % 13 == 0)) and 1 or 0\nend", "  local\
    \ function f(n)\n    if n == 0 then return 0 end\n    if n == 11 or n == 13 then\
    \ return 1 end\n    if n%11 == 0 or n%13 == 0 then\n      return f(n-1) + f(n-11)\
    \ + f(n-13)\n    else\n      return f(n-1)\n    end\n  end\n  return f(n-1)\n\
    end", "  local count = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0\
    \ then\n      if i:find('7') then\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend", "    local count = 0\n    for i = 1, n do\n    \
    \    if (i % 11 == 0 or i % 13 == 0) and i < n then\n            local str = tostring(i)\n\
    \            for j = 1, #str do\n                if str:sub(j, j) == '7' then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "  return nil\nend", "\tif n <\
    \ 1 then\n\t\treturn 0\n\tend\n\tlocal count = 0\n\tlocal d = 0\n\twhile n > 0\
    \ do\n\t\td = n % 10\n\t\tif d == 7 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    \tn = (n - d) / 10\n\tend\n\treturn count\nend", "    if n < 1 then\n        return\
    \ 0\n    end\n    local count = 0\n    for i = 1, n-1 do\n        if i % 11 ==\
    \ 0 or i % 13 == 0 then\n            count = count + _count_digit(i, 7)\n    \
    \    end\n    end\n    return count\nend", "    local count = 0\n    for i = 7,\
    \ n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n            for j = 1, #tostring(i)\
    \ do\n                if tonumber(string.sub(tostring(i), j, j)) == 7 then\n \
    \                   count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "  if n <= 0 then\n    return 0\n\
    \  end\n  local count = 0\n  if n % 11 == 0 or n % 13 == 0 then\n    local n_str\
    \ = tostring(n)\n    for i = 1, string.len(n_str) do\n      if string.sub(n_str,\
    \ i, i) == '7' then\n        count = count + 1\n      end\n    end\n  end\n  return\
    \ count + fizz_buzz(n - 1)\nend", "  local count = 0\n  for i = 1, n do\n    if\
    \ (i % 11 == 0 or i % 13 == 0) and (tostring(i):find(\"7\")) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for i = 0, n-1 do\n        if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local count = 0\n  for i = 7, n, 11 do\n    if is_divisible(i, 13) or\
    \ is_divisible(i, 11) then\n      count = count + count_7(i)\n    end\n  end\n\
    \  return count\nend", "  if n < 0 then\n    return -1\n  end\n  local sum = 0\n\
    \  local n_digits = {}\n  while n > 0 do\n    local digit = n % 10\n    n_digits[#n_digits\
    \ + 1] = digit\n    n = (n - digit) / 10\n  end\n  for i = 1, #n_digits do\n \
    \   if n_digits[i] == 7 then\n      sum = sum + 1\n    end\n  end\n  return sum\n\
    end", "    local r = 0\n    if n < 11 then\n        return 0\n    end\n    for\
    \ i = 11, n do\n        if i % 11 == 0 or i % 13 == 0 then\n            local\
    \ num = i\n            while num > 0 do\n                local last = num % 10\n\
    \                if last == 7 then\n                    r = r + 1\n          \
    \      end\n                num = math.floor(num / 10)\n            end\n    \
    \    end\n    end\n    return r\nend", "    -- Use the definition of a lucky number\
    \ given in the spec.\n    return count_digit(n, 7) - (count_digit(n, 11) + count_digit(n,\
    \ 13))\nend", "\tlocal c = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i %\
    \ 13 == 0 then\n\t\t\tlocal s = tostring(i)\n\t\t\tfor j = 1, #s do\n\t\t\t\t\
    if s:sub(j, j) == '7' then\n\t\t\t\t\tc = c + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn c\nend", "    -- Iterate over every number in range 1 - n\n\
    \    -- Return number of times 7 appears in the string\n    local count = 0\n\
    \    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    n = n - 1\n    local count = 0\n    while n >= 11 do\n        local a = n %\
    \ 11\n        local b = n % 13\n        if a == 0 or b == 0 then\n           \
    \ local str = tostring(n)\n            for i = 1, #str do\n                if\
    \ str:sub(i, i) == '7' then\n                    count = count + 1\n         \
    \       end\n            end\n        end\n        n = n - 1\n    end\n    return\
    \ count\nend", "  local count = 0\n  for i = 1, n do\n    if i % 11 == 0 or i\
    \ % 13 == 0 then\n      local str = tostring(i)\n      for j = 1, #str do\n  \
    \      if str:sub(j, j) == '7' then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend", "  return 0\nend", "  local\
    \ total = 0\n  for i = 0, n do\n    local multipleOf11or13 = i % 11 == 0 or i\
    \ % 13 == 0\n    if multipleOf11or13 then\n      local numAsString = i .. \"\"\
    \n      for j = 1, #numAsString do\n        if numAsString:sub(j, j) == \"7\"\
    \ then\n          total = total + 1\n        end\n      end\n    end\n  end\n\
    \  return total\nend", "    local sum = 0\n    for i = 1, n do\n        if i %\
    \ 11 == 0 or i % 13 == 0 then\n            sum = sum + count_seven(i)\n      \
    \  end\n    end\n    return sum\nend", "    local count = 0\n    for i = 1, n\
    \ do\n        if i % 11 == 0 or i % 13 == 0 then\n            count = count +\
    \ num_sevens(i)\n        end\n    end\n    return count\nend", "    local b =\
    \ \"\"\n    local i = 1\n    while i < n do\n        if i % 11 == 0 or i % 13\
    \ == 0 then\n            b = b .. tostring(i)\n        end\n        i = i + 1\n\
    \    end\n    return b:gsub(\"7\", \"\")\nend", "    local ct = 0\n    for d =\
    \ 0,n-1 do\n        if d % 11 == 0 or d % 13 == 0 then\n            ct = ct +\
    \ count_7(d)\n        end\n    end\n    return ct\nend", "  local function fizz_buzz_iter(n,\
    \ count)\n    if n == 0 then\n      return count\n    elseif n % 11 == 0 or n\
    \ % 13 == 0 then\n      return fizz_buzz_iter(n - 1, count + (n % 10 == 7 and\
    \ 1 or 0))\n    else\n      return fizz_buzz_iter(n - 1, count)\n    end\n  end\n\
    \  return fizz_buzz_iter(n - 1, 0)\nend", "  if n < 7 then return 0 end\n  local\
    \ ret = 0\n  if 0 == (n % 11) then\n    ret = ret + count_7s(n)\n  end\n  if 0\
    \ == (n % 13) then\n    ret = ret + count_7s(n)\n  end\n  return ret + fizz_buzz(n\
    \ - 1)\nend", "\tlocal count = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i %\
    \ 13 == 0 then\n\t\t\tcount = count + string.gsub(i, '7', '')\n\t\tend\n\tend\n\
    \treturn count\nend", "    -- your code here\n    local count = 0\n    for i =\
    \ 1, n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n            local tmp\
    \ = i\n            while tmp > 0 do\n                if tmp % 10 == 7 then\n \
    \                   count = count + 1\n                end\n                tmp\
    \ = math.floor(tmp / 10)\n            end\n        end\n    end\n    return count\n\
    end", "  local sum = 0\n  for i = 1, n-1 do\n    if i % 11 == 0 or i % 13 == 0\
    \ then\n      local str = tostring(i)\n      local j = 1\n      while str:sub(j,\
    \ j) do\n        if str:sub(j, j) == '7' then\n          sum = sum + 1\n     \
    \   end\n        j = j + 1\n      end\n    end\n  end\n  return sum\nend", " \
    \  n = n - 1\n   local n13 = n - n % 13\n   local n11 = n - n % 11\n   local n143\
    \ = n13 - n13 % 11\n   local count = n13 // 13 + n11 // 11 - n143 // 143\n   local\
    \ n137 = n11 - n11 % 137\n   local count137 = n137 // 137\n   if n % 13 == 12\
    \ then\n      count = count + 1\n   end\n   if n % 11 == 10 then\n      count\
    \ = count + 1\n   end\n   if n % 137 == 136 then\n      count137 = count137 +\
    \ 1\n   end\n   return count - count137\nend", "    if n < 7 then\n        return\
    \ 0\n    end\n    local last_digit = n % 10\n    if last_digit == 7 then\n   \
    \     return 1 + fizz_buzz(n - 2)\n    else\n        return fizz_buzz(n - 2)\n\
    \    end\nend", "  local count = 0\n  local sum = 0\n  for i = 1, n do\n    if\
    \ (i % 11 == 0 or i % 13 == 0) and i < n then\n      sum = sum + string.gsub(tostring(i),\
    \ '7', '')\n      count = count + string.len(tostring(i)) - string.len(sum)\n\
    \    end\n  end\n  return count\nend", "    local count = 0\n    for i = 1, n\
    \ do\n        if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7 then\n         \
    \   count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ counter = 0\n    for i = 0, n - 1 do\n        if i % 11 == 0 or i % 13 == 0\
    \ then\n            counter = counter + #tostring(i):gsub(\"7\", \"\")\n     \
    \   end\n    end\n    return counter\nend", "  local function f(n)\n    return\
    \ math.mod(n, 11) == 0 or math.mod(n, 13) == 0\n  end\n  local function g(n)\n\
    \    local s = tostring(n)\n    return string.match(s, \"7\") ~= nil\n  end\n\
    \  local function h(acc, n)\n    if g(n) then\n      return acc + 1\n    else\n\
    \      return acc\n    end\n  end\n  return Lib.Fold(h, 0, Lib.Filter(f, Lib.Range(1,\
    \ n - 1)))\nend", "  local res = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0\
    \ or i % 13 == 0) and count_seven(i) > 0 then\n      res = res + count_seven(i)\n\
    \    end\n  end\n  return res\nend", "    if n < 0 then return nil end\n    if\
    \ n == 0 then return 0 end\n    local count = 0\n    for i = 1, n do\n       \
    \ if (i % 11 == 0 or i % 13 == 0) and has_digit(i, 7) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local total =\
    \ 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local str\
    \ = tostring(i)\n      local len = #str\n      for j = 1, len do\n        if str:sub(j,\
    \ j) == '7' then\n          total = total + 1\n        end\n      end\n    end\n\
    \  end\n  return total\nend", "\tlocal rem, res, div = 0, 0, 13\n\t\n\twhile (n\
    \ >= div) do\n\t\trem = n % div\n\t\tn = n - rem\n\t\t\n\t\tif (rem >= 8) then\n\
    \t\t\tres = res + 1\n\t\tend\n\t\t\n\t\tdiv = div + 11\n\tend\n\t\n\treturn res\n\
    end", "\tlocal count = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 ==\
    \ 0) and tostring(i):find(\"7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "  local n_sb = n - n%11\n  local n_bb = n - n%13\n  local\
    \ i = math.min(n_sb, n_bb)\n  local count = 0\n  while i > 0 do\n    if i%77 ==\
    \ 0 then\n      count = count + 1\n    end\n    i = i - 11\n  end\n  return count\n\
    end", "    local r = 0\n    for i = 11, n, 11 do\n        if i % 13 == 0 then\n\
    \            if math.floor(i / 10) % 10 == 7 then\n                r = r + 2\n\
    \            elseif i % 10 == 7 then\n                r = r + 1\n            end\n\
    \        else\n            if math.floor(i / 10) % 10 == 7 then\n            \
    \    r = r + 1\n            end\n        end\n    end\n    return r\nend", " \
    \ local fizz_buzz_count = 0\n  local n_copy = n\n  while n_copy > 0 do\n    local\
    \ last_digit = n_copy % 10\n    if last_digit == 7 then\n      fizz_buzz_count\
    \ = fizz_buzz_count + 1\n    end\n    n_copy = math.floor(n_copy / 10)\n  end\n\
    \  return fizz_buzz_count\nend", "    local count = 0\n    for i = 1, n do\n \
    \       if is_divisible(i, 11) or is_divisible(i, 13) then\n            if has_digit(i,\
    \ 7) then\n                count = count + 1\n            end\n        end\n \
    \   end\n    return count\nend", "    local i = 1\n    local count = 0\n    while\
    \ i < n do\n        if (i % 11 == 0 or i % 13 == 0) and i % 7 == 0 then\n    \
    \        count = count + 1\n        end\n        i = i + 1\n    end\n    return\
    \ count\nend", "    if n <= 6 then\n        return 0\n    end\n    local offset\
    \ = 10 * (n % 13)\n    if offset >= 130 then\n        offset = offset - 130\n\
    \    end\n    local a = offset % 11\n    local b = (n % 11) - a\n    local num_7\
    \ = 0\n    for i = a, 0, -11 do\n        if string.sub(tostring(i), -1) == \"\
    7\" then\n            num_7 = num_7 + 1\n        end\n    end\n    for i = b,\
    \ 0, -11 do\n        if string.sub(tostring(i), -1) == \"7\" then\n          \
    \  num_7 = num_7 + 1\n        end\n    end\n    return num_7\nend", "    return\
    \ count(digit_7, filter(function(x) return (x % 11 == 0) or (x % 13 == 0) end,\
    \ take(n-1, naturals)))\nend", "    local i = 0\n    local c = 0\n    while i\
    \ <= n do\n        if i % 11 == 0 or i % 13 == 0 then\n            local j = i\n\
    \            while j > 0 do\n                if j % 10 == 7 then\n           \
    \         c = c + 1\n                end\n                j = math.floor(j / 10)\n\
    \            end\n        end\n        i = i + 1\n    end\n    return c\nend",
  "    local nfizz = n//13\n    local nbuzz = n//11\n    local nfizzbuzz = n//(13*11)\n\
    \    local sum_fizzbuzz = 3*nfizzbuzz\n    local sum_fizz = nfizz//10 + nfizz%10\n\
    \    local sum_buzz = nbuzz//10 + nbuzz%10\n    local sum_fizz_buzz = nfizzbuzz\n\
    \    local n_fizz_buzz = sum_fizzbuzz + sum_fizz + sum_buzz - 2*sum_fizz_buzz\n\
    \    return n_fizz_buzz\nend", "    local count = 0\n    if n % 13 == 0 or n %\
    \ 11 == 0 then\n        local s = tostring(n)\n        for i=1, #s do\n      \
    \      if s:sub(i,i) == '7' then\n                count = count + 1\n        \
    \    end\n        end\n    end\n    return count\nend", "    local a, b, c = 0,\
    \ 0, 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n    \
    \        c = tostring(i)\n            a = tonumber(string.find(c, \"7\") or 0)\n\
    \            b = b + (tonumber(a ~= 0) and 1 or 0)\n        end\n    end\n   \
    \ return b\nend", "  local count = 0\n  for i = 0, n do\n    if (i % 11 == 0 or\
    \ i % 13 == 0) and i ~= 0 then\n      local s = tostring(i)\n      for k = 1,\
    \ #s do\n        if s:sub(k, k) == '7' then\n          count = count + 1\n   \
    \     end\n      end\n    end\n  end\n  return count\nend", "    local r = 0\n\
    \    for i = 1, n - 1 do\n        if is_divisible(i, 11) or is_divisible(i, 13)\
    \ then\n            r = r + count_7(i)\n        end\n    end\n    return r\nend",
  "  return \"Not Implemented\"\nend", "  local function aux(n, acc)\n    if n ==\
    \ 0 then return acc end\n    local x = n % 10\n    local divisor = (n % 11 ==\
    \ 0 or n % 13 == 0)\n    if x == 7 and divisor then\n      return aux(math.floor(n\
    \ / 10), acc + 1)\n    else\n      return aux(math.floor(n / 10), acc)\n    end\n\
    \  end\n  return aux(n, 0)\nend", "    local count = 0\n    for i = 1, n - 1 do\n\
    \        if (i % 11 == 0 or i % 13 == 0) and contains_seven(i) then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ count = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and\
    \ num(i):find(\"7\") then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "    local count = 0\n    for i = 1, n - 1 do\n     \
    \   if i % 11 == 0 or i % 13 == 0 then\n            for j = 1, tostring(i):len()\
    \ do\n                if string.sub(tostring(i), j, j) == \"7\" then\n       \
    \             count = count + 1\n                end\n            end\n      \
    \  end\n    end\n    return count\nend", "  local sum = 0\n  for i = 1, n do\n\
    \    if i % 11 == 0 or i % 13 == 0 then\n      local str = tostring(i)\n     \
    \ local nums = string.split(str, '')\n      for k, v in pairs(nums) do\n     \
    \   if v == '7' then\n          sum = sum + 1\n        end\n      end\n    end\n\
    \  end\n  return sum\nend", "  if not n then return nil end\n  local count = 0\n\
    \  local n_string = tostring(n)\n  local n_len = #n_string\n  for i = 1, n_len\
    \ do\n    if n_string:sub(i, i) == '7' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    -- Check n is actually a number.\n    assert(type(n)\
    \ == \"number\")\n    local count = 0\n    for i = 0, n-1 do\n        if i % 11\
    \ == 0 or i % 13 == 0 then\n            local x = i\n            while x > 0 do\n\
    \                local digit = x % 10\n                if digit == 7 then\n  \
    \                  count = count + 1\n                end\n                x =\
    \ math.floor(x / 10)\n            end\n        end\n    end\n    return count\n\
    end", "    local n = n - 1\n    local n1 = math.floor(n / 11)\n    local n2 =\
    \ math.floor(n / 13)\n    local n3 = math.floor(n / (11 * 13))\n    local count\
    \ = (n1 - 7 * math.floor(n1 / 7)) + (n2 - 7 * math.floor(n2 / 7)) - (n3 - 7 *\
    \ math.floor(n3 / 7))\n    return count\nend", "    local count = 0\n    for i\
    \ = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n            for digit\
    \ in tostring(i):gmatch(\"%d\") do\n                if digit == \"7\" then\n \
    \                   count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend", "  -- Implement the function here\n\
    end", "    local count = 0\n    for i = 1, n do\n        if i % 11 == 0 or i %\
    \ 13 == 0 then\n            local digits = string.gmatch(i, '%d')\n          \
    \  for digit in digits do\n                if digit == '7' then\n            \
    \        count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    return nil\nend", "    n = n - n % 11\n\
    \    local n_13 = n - n % 13\n    local n_buzz = (n // 11) % 10\n    local n_fizz\
    \ = (n_13 // 13) % 10\n    local n_fizz_buzz = ((n_13 // 13) % 100) // 10\n  \
    \  local fizz = n_fizz - n_fizz_buzz\n    local buzz = n_buzz - n_fizz_buzz\n\
    \    local fizz_buzz = n_fizz_buzz\n    return fizz + buzz + fizz_buzz\nend",
  "  local count = 0\n  for i = 1, n do\n    if is_divisible(i, 11) or is_divisible(i,\
    \ 13) then\n      count = count + count_occurrences(i, 7)\n    end\n  end\n  return\
    \ count\nend", "    local s = 0\n    for i = 1, n-1 do\n        if (i % 11 ==\
    \ 0 or i % 13 == 0) and i % 10 == 7 then\n            s = s + 1\n        end\n\
    \    end\n    return s\nend", "\tlocal count = 0\n\tfor i = 1, n-1 do\n\t\tif\
    \ i % 11 == 0 or i % 13 == 0 then\n\t\t\tfor c in tostring(i):gmatch\".\" do\n\
    \t\t\t\tif c == \"7\" then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn count\nend", "\tlocal result = 0\n\tfor i = 1, n do\n\
    \t\tlocal mod = ((i % 11) == 0) or ((i % 13) == 0)\n\t\tif mod then\n\t\t\tfor\
    \ digit in tostring(i):gmatch('7') do\n\t\t\t\tresult = result + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend", "  return 0\nend", "  -- your code here\n\
    end", "    local d7 = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i\
    \ % 13 == 0 then\n            local s = tostring(i)\n            for j = 1, #s\
    \ do\n                if s:sub(j, j) == '7' then\n                    d7 = d7\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ d7\nend", "  local count = 0\n  for i = 0, n-1 do\n    if (i % 11 == 0 or i\
    \ % 13 == 0) and i % 10 == 7 then\n      count = count + 1\n    end\n  end\n \
    \ return count\nend", "    local result = 0\n    for i = 1, n do\n        if (i\
    \ % 11 == 0 or i % 13 == 0) and string.find(tostring(i), \"7\") then\n       \
    \     result = result + 1\n        end\n    end\n    return result\nend", "\t\
    local count = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\
    \t\tcount = count + count_sevens(i)\n\t\tend\n\tend\n\treturn count\nend", " \
    \ if n<11 then return 0 end\n  local function f(n)\n    if n<11 then return 0\
    \ end\n    local m = n%11\n    if m==0 then\n      return f(n-11)+1\n    elseif\
    \ m<=2 then\n      return f(n-m)\n    else\n      return f(n-m+11)\n    end\n\
    \  end\n  local m = n%13\n  if m==0 then\n    return f(n-13)+f(n-11)\n  elseif\
    \ m<=2 then\n    return f(n-m)+f(n-m-11)\n  else\n    return f(n-m+13)+f(n-m+11)\n\
    \  end\nend", "\tlocal a,b,i = (n % 11), (n % 13), 0\n\tfor k=0, n do\n\t\tif\
    \ (k % 11 == a or k % 13 == b) and tostring(k):find(\"7\") then\n\t\t\ti = i +\
    \ 1\n\t\tend\n\tend\n\treturn i\nend", "    if n <= 0 then\n        return 0\n\
    \    end\n    local a1 = fizz_buzz(math.floor(n / 10))\n    local a2 = fizz_buzz(math.floor(n\
    \ / 11))\n    local a3 = fizz_buzz(math.floor(n / 13))\n    local ans = a1 + a2\
    \ + a3\n    if n % 11 == 0 or n % 13 == 0 then\n        if n % 10 == 7 then\n\
    \            ans = ans + 1\n        end\n        local m = math.floor(n / 10)\n\
    \        while m > 0 do\n            if m % 10 == 7 then\n                ans\
    \ = ans + 1\n            end\n            m = math.floor(m / 10)\n        end\n\
    \    end\n    return ans\nend", "    local m = math.floor(n / 13) * 7\n    local\
    \ t = math.floor(n / 11) * 7\n    local lcm = m * t\n    return math.floor(n /\
    \ lcm)\nend", "    local count = 0\n    for i = 1, n - 1 do\n        if i % 11\
    \ == 0 or i % 13 == 0 then\n            local x = math.floor(i / 10)\n       \
    \     while x > 0 do\n                if x % 10 == 7 then\n                  \
    \  count = count + 1\n                end\n                x = math.floor(x /\
    \ 10)\n            end\n        end\n    end\n    return count\nend", "    local\
    \ counter = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n\
    \            counter = counter + string.gsub(tostring(i), \"7\", \"\")\n     \
    \   end\n    end\n    return counter\nend", "  if n < 1 then return 0 end\n  local\
    \ n_4 = n\n  local x = 0\n  if n_4 % 11 == 0 then\n    x = 1\n  end\n  if n_4\
    \ % 13 == 0 then\n    x = x + 1\n  end\n  if n_4 % 110 == 0 then\n    x = x -\
    \ 1\n  end\n  local fb = fizz_buzz(n-1)\n  if n % 7 == 0 then\n    x = x + fb\n\
    \  end\n  return x\nend", "    local result = 0\n    for i = 1, n - 1 do\n   \
    \     if i % 11 == 0 or i % 13 == 0 then\n            result = result + string.gsub(tostring(i),\
    \ \"7\", \"\")\n        end\n    end\n    return result\nend", "  -- Your code\
    \ here\nend", "   local num = 0\n   local i = 1\n   while i < n do\n      if (i\
    \ % 11 == 0 or i % 13 == 0) and i % 7 == 0 then\n         num = num + 1\n    \
    \  end\n      i = i + 1\n   end\n   return num\nend", "  local nums = {}\n  for\
    \ i = 0, n - 1 do\n    nums[i] = i\n  end\n  local fizzed_nums = {}\n  for i =\
    \ 0, n - 1 do\n    if nums[i] % 11 == 0 or nums[i] % 13 == 0 then\n      table.insert(fizzed_nums,\
    \ nums[i])\n    end\n  end\n  local fizzed_nums_with_7 = {}\n  for i = 0, #fizzed_nums\
    \ - 1 do\n    local div = fizzed_nums[i]\n    local digs = {}\n    while div >\
    \ 0 do\n      table.insert(digs, div % 10)\n      div = math.floor(div / 10)\n\
    \    end\n    for j = 0, #digs - 1 do\n      if digs[j] == 7 then\n        table.insert(fizzed_nums_with_7,\
    \ fizzed_nums[i])\n      end\n    end\n  end\n  return #fizzed_nums_with_7\nend",
  "    if n <= 0 then\n        return 0\n    end\n    local function fizz(x)\n   \
    \     return (x % 11 == 0) or (x % 13 == 0)\n    end\n    local function buzz(x)\n\
    \        return (x % 7 == 0) and (x % 11 ~= 0) and (x % 13 ~= 0)\n    end\n  \
    \  local function fizz_buzz(x)\n        return (x % 11 == 0) and (x % 13 == 0)\n\
    \    end\n    local ret = 0\n    if fizz(n) then\n        ret = ret + (n % 10\
    \ == 7 and 1 or 0)\n        ret = ret + fizz_buzz(n / 10)\n    elseif buzz(n)\
    \ then\n        ret = ret + (n % 10 == 7 and 1 or 0)\n        ret = ret + fizz_buzz(n\
    \ / 10)\n    else\n        ret = ret + fizz_buzz(n / 10)\n    end\n    return\
    \ ret\nend", "  local m = 0\n  local count = 0\n  while m < n do\n    if m % 11\
    \ == 0 or m % 13 == 0 then\n      local s = tostring(m)\n      for i = 1, #s do\n\
    \        if s:sub(i, i) == '7' then\n          count = count + 1\n        end\n\
    \      end\n    end\n    m = m + 1\n  end\n  return count\nend", "  n = n - n\
    \ % 11\n  local i = n\n  local sevens = 0\n  while i > 6 do\n    if i % 11 ==\
    \ 0 then\n      sevens = sevens + 1\n    end\n    i = i - 13\n  end\n  return\
    \ sevens\nend", "    local count = 0\n    for i = 1, n do\n        if i % 11 ==\
    \ 0 or i % 13 == 0 then\n            count = count + (string.gsub(tostring(i),\
    \ \"7\", \"\") - tostring(i))\n        end\n    end\n    return count\nend", " \
    \ local count = 0\n  for i = 0, n do\n    local str = tostring(i)\n    if string.find(str,\
    \ \"7\") then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local count = 0\n    local mod11 = 10\n    local mod13 = 12\n    while (mod11\
    \ < n) or (mod13 < n) do\n        if (mod11 < n) then\n            count = count\
    \ + 1\n            mod11 = mod11 + 11\n        end\n        if (mod13 < n) then\n\
    \            count = count + 1\n            mod13 = mod13 + 13\n        end\n\
    \    end\n    return count\nend", "\tif type(n) ~= \"number\" then return nil\
    \ end\n\tif n <= 0 then return nil end\n\t\n\tlocal count = 0\n\tfor i = 1, n\
    \ do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal str = tostring(i)\n\t\
    \t\tfor i = 1, #str do\n\t\t\t\tif str:sub(i, i) == \"7\" then\n\t\t\t\t\tcount\
    \ = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", " \
    \ local count = 0\n  for i = 0, n-1 do\n    if i % 11 == 0 or i % 13 == 0 then\n\
    \      count = count + count_digit(i, 7)\n    end\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and\
    \ tostring(i):find('7') then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", '  if n < 0 then n = n * -1 end', "    local cnt = 0\n    local\
    \ i = 1\n    for i = 1, n-1 do\n        if i % 7 == 0 and (i % 11 == 0 or i %\
    \ 13 == 0) then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\n\
    end", "    n = n - 1\n    local n11 = math.floor(n / 11)\n    local n13 = math.floor(n\
    \ / 13)\n    local n143 = math.floor(n / 143)\n    return n13 + n11 - n143 * 2\n\
    end", "  return n and (n%11==0 or n%13==0) and ((n%10==7 and 1 or 0) + fizz_buzz(n/10))\
    \ or 0\nend", "    local count = 0\n    for i = 1, n - 1 do\n        if divisible_by(i,\
    \ 11) or divisible_by(i, 13) then\n            count = count + contains_digit(i,\
    \ 7)\n        end\n    end\n    return count\nend", "    if n < 11 then\n    \
    \    return 0\n    end\n    local h = floor(n/11)\n    local i = h * 11\n    local\
    \ count = 0\n    local c = 0\n    while i < n do\n        c = c + 1\n        i\
    \ = i + 13\n        count = count + contains7(i)\n    end\n    local rem = n -\
    \ i\n    if rem == 11 then\n        count = count + 1\n    elseif rem > 11 then\n\
    \        count = count + contains7(rem)\n    end\n    return count\nend", "  local\
    \ total = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n \
    \     local num = tostring(i)\n      for n = 1, #num do\n        if num:sub(n,\
    \ n) == '7' then\n          total = total + 1\n        end\n      end\n    end\n\
    \  end\n  return total\nend", "  local sum = 0\n  for i = 1, n do\n    if i %\
    \ 11 == 0 or i % 13 == 0 then\n      sum = sum + get_digit_seven_count(i)\n  \
    \  end\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, n-1 do\n   \
    \ if i % 11 == 0 or i % 13 == 0 then\n      sum = sum + (string.gsub(i, '7', ''))\n\
    \    end\n  end\n  return sum\nend", "    local count = 0\n    for i = 0, n -\
    \ 1 do\n        if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7 then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "    if\
    \ n == 0 then\n        return 0\n    end\n    return fizz_buzz(n-1) + (string.find(n,\
    \ \"7\") and (n % 11 == 0 or n % 13 == 0) and 1 or 0)\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and i < n\
    \ then\n            local x = i .. \"\"\n            for j = 1, #x do\n      \
    \          if string.sub(x, j, j) == \"7\" then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend", "    -- Flatten a list of strings into a single string.\n    local\
    \ function flatten(list)\n        return table.concat(list)\n    end", "\tlocal\
    \ function count_7s(str)\n\t\treturn #str:gsub(\"[^7]\", \"\")\n\tend\n\tlocal\
    \ k = 1\n\tlocal count = 0\n\twhile true do\n\t\tlocal l = k * 11\n\t\tlocal m\
    \ = k * 13\n\t\tif l >= n and m >= n then\n\t\t\tbreak\n\t\tend\n\t\tif l < n\
    \ then\n\t\t\tcount = count + count_7s(tostring(l))\n\t\tend\n\t\tif m < n then\n\
    \t\t\tcount = count + count_7s(tostring(m))\n\t\tend\n\t\tk = k + 1\n\tend\n\t\
    return count\nend", "    local m, i, a, b = math.floor(n / 11), 0, math.floor(n\
    \ / 13), math.floor(n / 11)\n    local c, d = math.floor(n / 11), math.floor(n\
    \ / 13)\n    for _ = 11, m do\n        a = a - 1\n        if a % 10 == 7 then\n\
    \            i = i + 1\n        end\n    end\n    for _ = 13, b do\n        c\
    \ = c - 1\n        if c % 10 == 7 then\n            i = i + 1\n        end\n \
    \   end\n    while a > 0 do\n        a = a - 1\n        if a % 10 == 7 then\n\
    \            i = i + 1\n        end\n    end\n    while c > 0 do\n        c =\
    \ c - 1\n        if c % 10 == 7 then\n            i = i + 1\n        end\n   \
    \ end\n    return i\nend", "    local count = 0\n    for i = 1, n-1 do\n     \
    \   if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i), \"7\") then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    if n < 11 then\n        return 0\n    end\n    local sum = 0\n    for i = 11,\
    \ n, 11 do\n        if i % 13 == 0 then\n            if contains_digit(i, 7) then\n\
    \                sum = sum + 1\n            end\n        else\n            if\
    \ contains_digit(i, 7) then\n                sum = sum + 1\n            end\n\
    \            if contains_digit(i - 2, 7) then\n                sum = sum + 1\n\
    \            end\n        end\n    end\n    return sum\nend", "   local function\
    \ fizz_buzz_helper(m, c)\n      if m < 7 then\n         return c\n      elseif\
    \ m % 11 == 0 or m % 13 == 0 then\n         local d = m % 10\n         if d ==\
    \ 7 then\n            return fizz_buzz_helper(m // 10, c + 1)\n         else\n\
    \            return fizz_buzz_helper(m // 10, c)\n         end\n      else\n \
    \        return fizz_buzz_helper(m // 10, c)\n      end\n   end\n   return fizz_buzz_helper(n,\
    \ 0)\nend", "    return 0\nend", "  return nil\nend", "    local result = 0\n\
    \    local a, b = 7, 11", "\tlocal count = 0\n\tfor i = 0, n - 1 do\n\t\tif i\
    \ % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal i_string = tostring(i)\n\t\t\tfor\
    \ j = 1, #i_string do\n\t\t\t\tif i_string:sub(j, j) == \"7\" then\n\t\t\t\t\t\
    count = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend",
  "    local cnt = 0\n    local divider_11 = 11\n    local divider_13 = 13\n    while\
    \ n > 0 do\n        n = n - 1\n        if n % divider_11 == 0 or n % divider_13\
    \ == 0 then\n            local num = n\n            while num > 0 do\n       \
    \         if num % 10 == 7 then\n                    cnt = cnt + 1\n         \
    \       end\n                num = num // 10\n            end\n        end\n \
    \   end\n    return cnt\nend", "  local n = n - 1\n  local div_11 = n // 11\n\
    \  local div_13 = n // 13\n  local count = 0\n  local num = 1\n  local digit =\
    \ 1\n  local digit_count = 1\n  local power = 10\n  local count_7 = 0\n  for i\
    \ = 1, math.floor(math.log10(n)) do\n    count = count + math.floor(div_11 / power)\n\
    \    count = count + math.floor(div_13 / power)\n    count_7 = count_7 + num *\
    \ math.floor(div_11 / power) * digit_count * 7\n    count_7 = count_7 + num *\
    \ math.floor(div_13 / power) * digit_count * 7\n    num = math.floor(n / power)\
    \ % 10\n    if num == 7 then\n      count_7 = count_7 + digit\n    end\n    digit\
    \ = digit + 1\n    digit_count = digit_count * 10\n    power = power * 10\n  end\n\
    \  return count_7\nend", "    local N = (\"%d\"):format(n)\n    local count =\
    \ 0\n    for i = 0, N:len() - 1 do\n        if N:sub(i + 1, i + 1) == \"7\" then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "  local count = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and\
    \ i % 7 == 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  assert(n > 0)\n  return 0\nend", "    return 0\nend", "    local count = 0\n\
    \    local string = \"\"\n    for i = 1, n do\n        if i % 11 == 0 or i % 13\
    \ == 0 then\n            string = tostring(i)\n            for j = 1, string.len(string)\
    \ do\n                if string.sub(string, j, j) == \"7\" then\n            \
    \        count = count + 1\n                end\n            end\n        end\n\
    \    end\n    return count\nend", "    -- your code here\nend", "    -- TODO:\
    \ implement me!\n    return 0\nend", "\tlocal c = 0\n\tfor i = 1, n-1 do\n\t\t\
    if i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal s = tostring(i)\n\t\t\tfor j =\
    \ 1, #s do\n\t\t\t\tif s:sub(j, j) == '7' then\n\t\t\t\t\tc = c + 1\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn c\nend", "  local function helper(n,\
    \ d)\n    if n <= 0 then return 0 end\n    local r = n % 10\n    if d == r then\
    \ return 1 + helper(n // 10, d) else return helper(n // 10, d) end\n  end\n  local\
    \ ret = 0\n  for i = 11, n - 1, 11 do\n    ret = ret + helper(i, 7)\n  end\n \
    \ for i = 13, n - 1, 13 do\n    ret = ret + helper(i, 7)\n  end\n  return ret\n\
    end", "\tlocal sum=0\n\tfor i=1,n-1 do\n\t\tif (i%11==0 or i%13==0) and tostring(i):find(\"\
    7\") then\n\t\t\tsum=sum+1\n\t\tend\n\tend\n\treturn sum\nend", "    local count\
    \ = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and i % 10\
    \ == 7 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  --@help: http://pythontutor.com/visualize.html#code=local%20function%20fizz_buzz%28n%29%0A%20%20local%20count%20%3D%200%0A%20%20for%20i%20%3D%201,%20n%20do%0A%20%20%20%20if%20i%20%25%2011%20%3D%3D%200%20or%20i%20%25%2013%20%3D%3D%200%20then%0A%20%20%20%20%20%20local%20s%20%3D%20string.gsub%28tostring%28i%29,%20%27%5E7%27,%20%27%27%29%0A%20%20%20%20%20%20count%20%3D%20count%20%2B%20%28#s%20-%20#string.gsub%28s,%20%27%27,%27%27%29%29%0A%20%20%20%20end%0A%20%20end%0A%20%20return%20count%0Aend%0A%0Afizz_buzz%284%29&mode=edit&origin=opt-frontend.js&cumulative=false&heapPrimitives=false&textReferences=false&py=lua&rawInputLstJSON=%5B%5D&curInstr=0\n\
    \  local count = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n\
    \      local s = string.gsub(tostring(i), '^7', '')\n      count = count + (#s\
    \ - #string.gsub(s, '',''))\n    end\n  end\n  return count\nend", "    local\
    \ r = 0\n    for i = 0, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and\
    \ string.find(tostring(i), \"7\") then\n            r = r + 1\n        end\n \
    \   end\n    return r\nend", "    if n == 0 then\n        return 0\n    end\n\
    \    return fizz_buzz(n-1) + (\n        (n%11 == 0 or n%13 == 0) and tostring(n):match('7')\
    \ and 1 or 0\n    )\nend", "  n = n - n % 11\n  local count = n % 13 == 0 and\
    \ n / 13 % 10 == 7 and 1 or 0\n  return count + math.floor(n / 11) % 10 == 7 and\
    \ 1 or 0\nend", "    local count = 0\n    for i = 7, n-1 do\n        if i % 11\
    \ == 0 or i % 13 == 0 then\n            local x = tostring(i)\n            for\
    \ d in x:gmatch('%d') do\n                if d == '7' then\n                 \
    \   count = count + 1\n                end\n            end\n        end\n   \
    \ end\n    return count\nend", "   local total = 0\n   for i = 1, n do\n     \
    \ if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7 then\n         total = total\
    \ + 1\n      end\n   end\n   return total\nend", "  return 0\nend", "\tlocal count\
    \ = 0\n\tlocal c\n\tfor x = 1, n-1 do\n\t\tif x % 11 == 0 or x % 13 == 0 then\n\
    \t\t\tc = string.find(tostring(x), \"7\")\n\t\t\tif c then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "  local function fb_help(n,\
    \ sevens)\n    if n < 10 then\n      if n == 7 then\n        return sevens + 1\n\
    \      else\n        return sevens\n      end\n    else\n      local digit = n\
    \ % 10\n      if digit == 7 then\n        return fb_help(math.floor(n / 10), sevens\
    \ + 1)\n      else\n        return fb_help(math.floor(n / 10), sevens)\n     \
    \ end\n    end\n  end\n  if n < 70 then\n    return 0\n  elseif n < 77 then\n\
    \    return 1\n  elseif n < 78 then\n    return 2\n  elseif n < 779 then\n   \
    \ return fb_help(math.floor(n / 77), 0)\n  else\n    return fb_help(n, 0)\n  end\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
