language: lua
name: HumanEval_87_get_row
results:
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local row = 0\n    local\
    \ res = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n          \
    \  if lst[i][j] == x then\n                row = row + 1\n                res[row]\
    \ = {i - 1, j - 1}\n            end\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local coords = {}\n   \
    \ for y, v in ipairs(lst) do\n        for i, n in ipairs(v) do\n            if\
    \ n == x then\n                table.insert(coords, {y - 1, #v - i})\n       \
    \     end\n        end\n    end\n    local function compare(a, b)\n        if\
    \ a[1] < b[1] then\n            return true\n        elseif a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        end\n        return false\n    end\n\
    \    table.sort(coords, compare)\n    return coords\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzr5ax0w6.lua:40:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 5}, {1, 5},\
    \ {1, 1}, {2, 5}, {2, 0}}\nstack traceback:\n\t/tmp/tmpzr5ax0w6.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n         \
    \   if v == x then\n                table.insert(result, {i - 1, j - 1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  local len\
    \ = #lst\n  for i = 0, len - 1 do\n    local len1 = #lst[i + 1]\n    for j = 0,\
    \ len1 - 1 do\n      if lst[i + 1][j + 1] == x then\n        table.insert(res,\
    \ {i, j})\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n    if\
    \ a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n\
    \    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  res[#res + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n  local sort = function(a,\
    \ b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return\
    \ a[1] < b[1]\n    end\n  end\n  table.sort(res, sort)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for row\
    \ = 0, #lst - 1 do\n    for col = 0, #lst[row + 1] - 1 do\n      if lst[row +\
    \ 1][col + 1] == x then\n        table.insert(res, {row, col})\n      end\n  \
    \  end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n  \
    \    return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal r = {}\n\tfor i, v\
    \ in ipairs(lst) do\n\t\tfor j, n in ipairs(v) do\n\t\t\tif n == x then\n\t\t\t\
    \ttable.insert(r, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0et3xudc.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmp0et3xudc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tres={}\n\tfor y,v in ipairs(lst)\
    \ do\n\t\tfor y1,v1 in ipairs(v) do\n\t\t\tif v1==x then\n\t\t\t\tres[#res+1]={y-1,y1-1}\n\
    \t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,function(a,b) return a[1]<b[1] or\
    \ (a[1]==b[1] and a[2]>b[2]) end)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row do\n   \
    \         if row[j] == x then\n                res[#res + 1] = {i - 1, j - 1}\n\
    \            end\n        end\n    end\n    -- Sort coordinates initially by rows\
    \ in ascending order.\n    -- Also, sort coordinates of the row by columns in\
    \ descending order.\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg_y2882.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmphg_y2882.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local row={}\n    for i=1,#lst\
    \ do\n        for j=1,#lst[i] do\n            if lst[i][j]==x then\n         \
    \       table.insert(row,{i-1,j-1})\n            end\n        end\n    end\n \
    \   return row\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdps32l0.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpgdps32l0.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local ret = {}\n  for row,\
    \ _row in ipairs(lst) do\n    for col, _col in ipairs(_row) do\n      if _col\
    \ == x then\n        ret[#ret + 1] = {row - 1, col - 1}\n      end\n    end\n\
    \  end\n  table.sort(ret, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, value in ipairs(lst) do\n        for col, value in ipairs(value) do\n\
    \            if value == x then\n                table.insert(result, {row - 1,\
    \ col - 1})\n            end\n        end\n    end\n    table.sort(result, function(left,\
    \ right)\n        if left[1] == right[1] then\n            return left[2] > right[2]\n\
    \        else\n            return left[1] < right[1]\n        end\n    end)\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for row,\
    \ lst in ipairs(lst) do\n    for column, x_ in ipairs(lst) do\n      if x_ ==\
    \ x then\n        table.insert(res, {row - 1, column - 1})\n      end\n    end\n\
    \  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal r = {}\n\tfor y,v in\
    \ ipairs(lst) do\n\t\tfor k, vv in ipairs(v) do\n\t\t\tif vv == x then\n\t\t\t\
    \ttable.insert(r, {y - 1, k - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(r,\
    \ function(a, b) return a[1] < b[1] end)\n\tfor i,v in ipairs(r) do\n\t\ttable.sort(v,\
    \ function(a, b) return a[2] > b[2] end)\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3sanewqe.lua:27:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmp3sanewqe.lua:27:\
    \ in function </tmp/tmp3sanewqe.lua:27>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp3sanewqe.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp3sanewqe.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal t = {}\n\tlocal i =\
    \ 0\n\tfor _, row in ipairs(lst) do\n\t\tlocal l = {}\n\t\tlocal j = 0\n\t\tfor\
    \ _, y in ipairs(row) do\n\t\t\tif y == x then\n\t\t\t\ttable.insert(l, {j, i})\n\
    \t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tfor _, k in ipairs(l) do\n\t\t\ttable.insert(t,\
    \ k)\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6g4dscw.lua:39:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {0, 1},\
    \ {4, 1}, {0, 2}, {5, 2}}\nstack traceback:\n\t/tmp/tmpr6g4dscw.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    if lst == nil then\n  \
    \      return nil\n    end\n    local new_lst = {}\n    for i,v in ipairs(lst)\
    \ do\n        for j, v2 in ipairs(v) do\n            if v2 == x then\n       \
    \         table.insert(new_lst, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(new_lst, function(x, y) return x[1] < y[1] end)\n   \
    \ for _,v in ipairs(new_lst) do\n        table.sort(v, function(x, y) return x\
    \ > y end)\n    end\n    return new_lst\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpej08pyhh.lua:38:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {4, 1}, {2, 0}, {5, 2}}\nstack traceback:\n\t/tmp/tmpej08pyhh.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, v in ipairs(lst) do\n\t\tfor j, u in ipairs(v) do\n\t\t\tif u == x then\n\
    \t\t\t\tresult[#result + 1] = {i - 1, j - 1}\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,\
    \ function(a, b)\n\t\treturn a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\t\
    end)\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ftd57b6.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp3ftd57b6.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    local comp = function(t1, t2)\n        if t1[1] ~= t2[1]\
    \ then\n            return t1[1] < t2[1]\n        else\n            return t1[2]\
    \ > t2[2]\n        end\n    end\n    table.sort(res, comp)\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ y, row in ipairs(lst) do\n\t\tfor x2, cell in ipairs(row) do\n\t\t\tif cell\
    \ == x then\n\t\t\t\tresult[#result + 1] = {y - 1, x2 - 1}\n\t\t\tend\n\t\tend\n\
    \tend\n\tlocal function comp(a, b)\n\t\tif a[1] ~= b[1] then\n\t\t\treturn a[1]\
    \ < b[1]\n\t\telse\n\t\t\treturn a[2] > b[2]\n\t\tend\n\tend\n\ttable.sort(result,\
    \ comp)\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n      \
    \      if item == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(coord1,\
    \ coord2)\n        if coord1[1] < coord2[1] then\n            return true\n  \
    \      elseif coord1[1] > coord2[1] then\n            return false\n        else\n\
    \            return coord1[2] > coord2[2]\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local rows = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, column in ipairs(row) do\n        \
    \    if column == x then\n                table.insert(rows, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(rows, function(a, b)\n\
    \        if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return rows\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, v in ipairs(lst) do\n\t\tfor j, w in ipairs(v) do\n\t\t\tif x == w then\n\
    \t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,\
    \ function(a, b)\n\t\treturn a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\t\
    end)\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    local\
    \ y_sort = {}\n    local y_sort_del = {}\n    for row, items in ipairs(lst) do\n\
    \        for col, item in ipairs(items) do\n            if item == x then\n  \
    \              table.insert(res, {row-1, col-1})\n                y_sort[col]\
    \ = true\n                y_sort_del[col] = true\n            end\n        end\n\
    \    end\n    table.sort(res, function(a, b) return a[1] < b[1] end)\n    for\
    \ i = 0, #res-1 do\n        if res[i][1] == res[i+1][1] then\n            y_sort[res[i][2]]\
    \ = false\n        end\n    end\n    table.sort(res, function(a, b)\n        if\
    \ y_sort[a[2]] == y_sort[b[2]] then\n            return a[2] > b[2]\n        else\n\
    \            return y_sort[a[2]]\n        end\n    end)\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0my9_4wg.lua:31:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp0my9_4wg.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp0my9_4wg.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your code goes here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrsba_5s.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpqrsba_5s.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ i = 1, #lst do\n        local row = lst[i]\n        local c = {}\n        for\
    \ j = 1, #row do\n            if row[j] == x then\n                table.insert(c,\
    \ { i - 1, j - 1 })\n            end\n        end\n        for k = 1, #c do\n\
    \            table.insert(ret, c[k])\n        end\n    end\n    table.sort(ret,\
    \ function(a, b)\n        if a[1] ~= b[1] then\n            return a[1] < b[1]\n\
    \        else\n            return a[2] > b[2]\n        end\n    end)\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4knfvn1h.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}\nstack traceback:\n\t/tmp/tmp4knfvn1h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ row = 0,#lst do\n    for column = 0,#lst[row] do\n      if lst[row][column]\
    \ == x then\n        table.insert(result, {row, column})\n      end\n    end\n\
    \  end\n  table.sort(result, function(a, b)\n    if a[1] < b[1] then\n      return\
    \ true\n    elseif a[1] > b[1] then\n      return false\n    else\n      return\
    \ a[2] > b[2]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3he0al23.lua:19:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmp3he0al23.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp3he0al23.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local ret = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  table.insert(ret, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(ret,\
    \ function(lhs, rhs)\n    if lhs[1] < rhs[1] then\n      return true\n    elseif\
    \ lhs[1] > rhs[1] then\n      return false\n    else\n      return lhs[2] > rhs[2]\n\
    \    end\n  end)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- print('get_row() START')\n\
    \  -- print(lst)\n  -- print(x)\n  local result = {}\n  for i = 1, #lst do\n \
    \   for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        table.insert(result,\
    \ {i - 1, j - 1})\n      end\n    end\n  end\n  -- print(result)\n  -- print('get_row()\
    \ END')\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudj64dmv.lua:36:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpudj64dmv.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ index, row in ipairs(lst) do\n    for column, value in ipairs(row) do\n    \
    \  if value == x then\n        result[#result + 1] = {index - 1, column - 1}\n\
    \      end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                result[#result + 1] = {i - 1, j - 1}\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, v in ipairs(lst) do\n    for j, w in ipairs(v) do\n      if w == x then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local f = function(row,\
    \ row_index)\n        local ind = 1\n        local f = function(el, col_index)\n\
    \            if el == x then\n                return {row_index, col_index}\n\
    \            end\n            return ind + 1\n        end\n        return lst,\
    \ f\n    end\n    local tbl = {}\n    return reduce(lst, f, tbl)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_hdp6drx.lua:28:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp_hdp6drx.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp_hdp6drx.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, sublist in ipairs(lst) do\n        for col, value in ipairs(sublist)\
    \ do\n            if value == x then\n                result[#result + 1] = {row\
    \ - 1, col - 1}\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\
    \    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor i,\
    \ t in ipairs(lst) do\n\t\tfor j, v in ipairs(t) do\n\t\t\tif v == x then\n\t\t\
    \t\ttable.insert(res, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, value in ipairs(row) do\n      if value ==\
    \ x then\n        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n\
    \  table.sort(res, function(a, b)\n    if a[1] < b[1] then\n      return true\n\
    \    elseif a[1] > b[1] then\n      return false\n    else\n      return a[2]\
    \ > b[2]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row do\n   \
    \         if row[j] == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- your code here\n  local\
    \ res = {}\n  for line_index, line in ipairs(lst) do\n    for index, item in ipairs(line)\
    \ do\n      if item == x then\n        table.insert(res, {line_index - 1, index\
    \ - 1})\n      end\n    end\n  end\n  local function comp(a, b)\n    if a[1] <\
    \ b[1] then\n      return true\n    elseif a[1] == b[1] then\n      return a[2]\
    \ > b[2]\n    else\n      return false\n    end\n  end\n  table.sort(res, comp)\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                result[#result + 1] = {i - 1, j - 1}\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59uuuwo_.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp59uuuwo_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local row = {}\n    for\
    \ key, value in pairs(lst) do\n        for k, v in pairs(value) do\n         \
    \   if v == x then\n                table.insert(row, {key - 1, k - 1})\n    \
    \        end\n        end\n    end\n    return row\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmidy2mro.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpmidy2mro.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- Insert your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3q2wsyd0.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp3q2wsyd0.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        local j = 1\n        while j <= #lst[i] do\n       \
    \     if lst[i][j] == x then\n                table.insert(res, {i - 1, j - 1})\n\
    \            end\n            j = j + 1\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your code here\n   \
    \ if lst == nil then return {} end\n    local result = {}\n    for i, r in ipairs(lst)\
    \ do\n        for j, c in ipairs(r) do\n            if c == x then\n         \
    \       table.insert(result, { i - 1, j - 1 })\n            end\n        end\n\
    \    end\n    table.sort(result, function(l, r)\n        if l[1] ~= r[1] then\n\
    \            return l[1] < r[1]\n        else\n            return l[2] > r[2]\n\
    \        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6txjqdf.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpt6txjqdf.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal function get_row_inner(lst,\
    \ x, result, r, c)\n\t\tif r > #lst then\n\t\t\treturn result\n\t\tend\n\t\tif\
    \ c > #lst[r] then\n\t\t\treturn get_row_inner(lst, x, result, r + 1, 1)\n\t\t\
    end\n\t\tif lst[r][c] == x then\n\t\t\ttable.insert(result, {r - 1, c - 1})\n\t\
    \tend\n\t\treturn get_row_inner(lst, x, result, r, c + 1)\n\tend\n\ttable.sort(get_row_inner(lst,\
    \ x, {}, 1, 1), function(a, b)\n\t\tif a[1] < b[1] then\n\t\t\treturn true\n\t\
    \telseif a[1] > b[1] then\n\t\t\treturn false\n\t\telse\n\t\t\treturn a[2] > b[2]\n\
    \t\tend\n\tend)\n\treturn get_row_inner(lst, x, {}, 1, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lzousjz.lua:44:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmp5lzousjz.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, v in ipairs(row) do\n      if v == x then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ local rows = #lst\n    for r = 0, rows - 1 do\n        local cols = #lst[r +\
    \ 1]\n        for c = 0, cols - 1 do\n            if lst[r + 1][c + 1] == x then\n\
    \                table.insert(result, {r, c})\n            end\n        end\n\
    \    end\n    table.sort(result, function(a, b)\n        return a[1] < b[1] or\
    \ (a[1] == b[1] and a[2] > b[2])\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local out = {}\n    for\
    \ i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row do\n   \
    \         if row[j] == x then\n                table.insert(out, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(out, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return out\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor i,\
    \ row in ipairs(lst) do\n\t\tfor j, v in ipairs(row) do\n\t\t\tif v == x then\n\
    \t\t\t\ttable.insert(res, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ y, row in ipairs(lst) do\n        for x_, _ in ipairs(row) do\n            if\
    \ x == row[x_] then\n                table.insert(res, {y - 1, x_ - 1})\n    \
    \        end\n        end\n    end\n    -- sort by rows in ascending order\n \
    \   table.sort(res, function(a, b) return a[1] < b[1] end)\n    -- sort by columns\
    \ in descending order\n    for i = 1, #res - 1 do\n        if res[i][1] == res[i\
    \ + 1][1] then\n            table.sort(res, function(a, b) return a[2] > b[2]\
    \ end)\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rsjzt6q.lua:39:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{2, 5}, {1, 4},\
    \ {2, 0}, {1, 0}, {0, 0}}\nstack traceback:\n\t/tmp/tmp8rsjzt6q.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local function inside_row(lst,\
    \ x)\n        local ret = {}\n        for j, v in ipairs(lst) do\n           \
    \ if v == x then\n                table.insert(ret, j)\n            end\n    \
    \    end\n        table.sort(ret, function(a, b) return a > b end)\n        return\
    \ ret\n    end\n    local ret = {}\n    for i, row in ipairs(lst) do\n       \
    \ local res = inside_row(row, x)\n        for _, v in ipairs(res) do\n       \
    \     table.insert(ret, {i - 1, v - 1})\n        end\n    end\n    table.sort(ret,\
    \ function(a, b) return a[1] < b[1] end)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_k192lc.lua:43:\
    \ expected: \n{\n    {0, 0},\n    {1, 0},\n    {2, 1},\n    {2, 0},\n    {3, 2},\n\
    \    {3, 0},\n    {4, 3},\n    {4, 0},\n    {5, 4},\n    {5, 0},\n    {6, 5},\n\
    \    {6, 0}\n}\nactual: \n{\n    {0, 0},\n    {1, 0},\n    {2, 0},\n    {2, 1},\n\
    \    {3, 2},\n    {3, 0},\n    {4, 3},\n    {4, 0},\n    {5, 0},\n    {5, 4},\n\
    \    {6, 5},\n    {6, 0}\n}\nList difference analysis:\n* lists A (actual) and\
    \ B (expected) have the same size\n* lists A and B start differing at index 3\n\
    * lists A and B are equal again from index 11\n* Common parts:\n  = A[1], B[1]:\
    \ {0, 0}\n  = A[2], B[2]: {1, 0}\n* Differing parts:\n  - A[3]: {2, 0}\n  + B[3]:\
    \ {2, 1}\n  - A[4]: {2, 1}\n  + B[4]: {2, 0}\n  = A[5], B[5]: {3, 2}\n  = A[6],\
    \ B[6]: {3, 0}\n  = A[7], B[7]: {4, 3}\n  = A[8], B[8]: {4, 0}\n  - A[9]: {5,\
    \ 0}\n  + B[9]: {5, 4}\n  - A[10]: {5, 4}\n  + B[10]: {5, 0}\n* Common parts at\
    \ the end of the lists\n  = A[11], B[11]: {6, 5}\n  = A[12], B[12]: {6, 0}\nstack\
    \ traceback:\n\t/tmp/tmpw_k192lc.lua:43: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.020 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for y, row in ipairs(lst) do\n        for z, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {y - 1, z - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        return a[1] < b[1] or a[1] == b[1] and a[2] > b[2]\n    end)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for row,\
    \ line in ipairs(lst) do\n    for col, val in ipairs(line) do\n      if val ==\
    \ x then\n        res[#res + 1] = {row - 1, col - 1}\n      end\n    end\n  end\n\
    \  table.sort(res, function(a, b)\n    if a[1] < b[1] then\n      return true\n\
    \    elseif a[1] > b[1] then\n      return false\n    else\n      return a[2]\
    \ > b[2]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    local\
    \ i = 0\n    for _, row in ipairs(lst) do\n        for j, y in ipairs(row) do\n\
    \            if y == x then\n                table.insert(res, {i, j - 1})\n \
    \           end\n        end\n        i = i + 1\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local row = {}\n    local\
    \ res = {}\n    for i = 1, #lst do\n        local lst2 = lst[i]\n        for j\
    \ = 1, #lst2 do\n            if lst2[j] == x then\n                table.insert(row,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    table.sort(row,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return row\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local t = {}\n    for i,\
    \ v in ipairs(lst) do\n        for j, u in ipairs(v) do\n            if u == x\
    \ then\n                table.insert(t, {i - 1, j - 1})\n            end\n   \
    \     end\n    end\n    table.sort(t, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local row = 0\n    local\
    \ res = {}\n    for _, sub_lst in ipairs(lst) do\n        local column = 0\n \
    \       for _, val in ipairs(sub_lst) do\n            if val == x then\n     \
    \           res[#res + 1] = {row, column}\n            end\n            column\
    \ = column + 1\n        end\n        row = row + 1\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    if #lst == 0 then\n   \
    \     return {}\n    end\n    local count = 0\n    local l = {}\n    for i = 1,\
    \ #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                count = count + 1\n                l[count] = {i - 1, j - 1}\n\
    \            end\n        end\n    end\n    if count == 0 then\n        return\
    \ {}\n    end\n    local function sort_col(a, b)\n        if a[1] == b[1] then\n\
    \            return a[2] > b[2]\n        else\n            return a[1] < b[1]\n\
    \        end\n    end\n    table.sort(l, sort_col)\n    return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local t = {}\n    for i,\
    \ row in ipairs(lst) do\n        for j, col in ipairs(row) do\n            if\
    \ col == x then\n                table.insert(t, {i - 1, j - 1})\n           \
    \ end\n        end\n    end\n    table.sort(t, compare_row)\n    for i, row in\
    \ ipairs(t) do\n        table.sort(row, compare_col)\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two table values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local answer = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(answer, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    local funcs = {\n        function(a,\
    \ b) return a[1] < b[1] end,\n        function(a, b) return a[2] > b[2] end\n\
    \    }\n    table.sort(answer, function(a, b)\n        for _, func in ipairs(funcs)\
    \ do\n            if func(a, b) then\n                return true\n          \
    \  elseif func(b, a) then\n                return false\n            end\n   \
    \     end\n        return true\n    end)\n    return answer\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxxttvcw.lua:29:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpkxxttvcw.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpkxxttvcw.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, num in ipairs(row) do\n       \
    \     if num == x then\n                result[#result + 1] = {i - 1, j - 1}\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(x, y)\n    if x[1] < y[1] then\n      return\
    \ true\n    elseif x[1] > y[1] then\n      return false\n    else\n      return\
    \ x[2] > y[2]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- Implement me!\n    local\
    \ cnt = 0\n    local rows = {}\n    for i = 1, #lst do\n        local tmp = lst[i]\n\
    \        local cols = {}\n        for j = 1, #tmp do\n            if tmp[j] ==\
    \ x then\n                table.insert(cols, j - 1)\n                cnt = cnt\
    \ + 1\n            end\n        end\n        table.sort(cols, function(a, b) return\
    \ a > b end)\n        for _, col in ipairs(cols) do\n            table.insert(rows,\
    \ {i - 1, col})\n        end\n    end\n    table.sort(rows, function(a, b) return\
    \ a[1] < b[1] end)\n    return rows\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1817pkcn.lua:43:\
    \ expected: \n{\n    {0, 0},\n    {1, 0},\n    {2, 1},\n    {2, 0},\n    {3, 2},\n\
    \    {3, 0},\n    {4, 3},\n    {4, 0},\n    {5, 4},\n    {5, 0},\n    {6, 5},\n\
    \    {6, 0}\n}\nactual: \n{\n    {0, 0},\n    {1, 0},\n    {2, 0},\n    {2, 1},\n\
    \    {3, 2},\n    {3, 0},\n    {4, 3},\n    {4, 0},\n    {5, 0},\n    {5, 4},\n\
    \    {6, 5},\n    {6, 0}\n}\nList difference analysis:\n* lists A (actual) and\
    \ B (expected) have the same size\n* lists A and B start differing at index 3\n\
    * lists A and B are equal again from index 11\n* Common parts:\n  = A[1], B[1]:\
    \ {0, 0}\n  = A[2], B[2]: {1, 0}\n* Differing parts:\n  - A[3]: {2, 0}\n  + B[3]:\
    \ {2, 1}\n  - A[4]: {2, 1}\n  + B[4]: {2, 0}\n  = A[5], B[5]: {3, 2}\n  = A[6],\
    \ B[6]: {3, 0}\n  = A[7], B[7]: {4, 3}\n  = A[8], B[8]: {4, 0}\n  - A[9]: {5,\
    \ 0}\n  + B[9]: {5, 4}\n  - A[10]: {5, 4}\n  + B[10]: {5, 0}\n* Common parts at\
    \ the end of the lists\n  = A[11], B[11]: {6, 5}\n  = A[12], B[12]: {6, 0}\nstack\
    \ traceback:\n\t/tmp/tmp1817pkcn.lua:43: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- your code goes here\n\
    \  -- your code goes here\n  if next(lst) == nil then\n    return lst\n  end\n\
    \  local lst_result = {}\n  for rk, rv in ipairs(lst) do\n    local lst_row =\
    \ {}\n    for ck, cv in ipairs(rv) do\n      if cv == x then\n        table.insert(lst_row,\
    \ {rk-1, ck-1})\n      end\n    end\n    for ik, iv in ipairs(lst_row) do\n  \
    \    table.insert(lst_result, iv)\n    end\n  end\n  table.sort(lst_result, function(x,\
    \ y)\n    if x[1] == y[1] then\n      return x[2] > y[2]\n    else\n      return\
    \ x[1] < y[1]\n    end\n  end)\n  return lst_result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n   local res = {}\n   for row\
    \ = 0, #lst do\n      for column = 0, #lst[row] do\n         if lst[row][column]\
    \ == x then\n            table.insert(res, {row, column})\n         end\n    \
    \  end\n   end\n   table.sort(res, function(a, b)\n      if a[1] == b[1] then\n\
    \         return a[2] > b[2]\n      else\n         return a[1] < b[1]\n      end\n\
    \   end)\n   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfx0h_2w2.lua:19:\
    \ attempt to get length of a nil value (field '?')\nstack traceback:\n\t/tmp/tmpfx0h_2w2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpfx0h_2w2.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ row_idx, row in ipairs(lst) do\n        for col_idx, col in ipairs(row) do\n\
    \            if col == x then\n                res[#res + 1] = {row_idx - 1, col_idx\
    \ - 1}\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    if #lst == 0 then\n   \
    \     return {}\n    end\n    local res = {}\n    for i, row in ipairs(lst) do\n\
    \        local found = false\n        for j, v in ipairs(row) do\n           \
    \ if v == x then\n                table.insert(res, {i - 1, j - 1})\n        \
    \        found = true\n            end\n        end\n        if not found then\n\
    \            table.insert(res, {i - 1, 0})\n        end\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99a7umtx.lua:50:\
    \ expected: {}\nactual: {{0, 0}}\nstack traceback:\n\t/tmp/tmp99a7umtx.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] < b[1] then\n            return true\n        elseif a[1] > b[1] then\n\
    \            return false\n        else\n            return a[2] > b[2]\n    \
    \    end\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, value in ipairs(row) do\n      if value ==\
    \ x then\n        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n\
    \  table.sort(res, function(a, b)\n    if a[1] ~= b[1] then\n      return a[1]\
    \ < b[1]\n    else\n      return a[2] > b[2]\n    end\n  end)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row do\n   \
    \         if row[j] == x then\n                res[#res + 1] = {i - 1, j - 1}\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n \
    \           return a[2] > b[2]\n        end\n    end)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local lst2 = {}\n  for row_index,\
    \ row in ipairs(lst) do\n    for column_index, column in ipairs(row) do\n    \
    \  if column == x then\n        table.insert(lst2, {row_index - 1, column_index\
    \ - 1})\n      end\n    end\n  end\n  return lst2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypzxyvgm.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpypzxyvgm.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor i,\
    \ row in ipairs(lst) do\n\t\tfor j, item in ipairs(row) do\n\t\t\tif item == x\
    \ then\n\t\t\t\ttable.insert(res, {i - 1, #row - j})\n\t\t\tend\n\t\tend\n\tend\n\
    \ttable.sort(res, function(a, b) return a[1] < b[1] end)\n\ttable.sort(res, function(a,\
    \ b) return a[2] > b[2] end)\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8an7awn.lua:33:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 5}, {1, 5},\
    \ {2, 5}, {1, 1}, {2, 0}}\nstack traceback:\n\t/tmp/tmp_8an7awn.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6txjqdf.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpt6txjqdf.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  if #lst == 0 then return\
    \ {} end\n  local res = {}\n  for r = 1, #lst do\n    local row = lst[r]\n   \
    \ for c = 1, #row do\n      if row[c] == x then\n        res[#res + 1] = {r -\
    \ 1, c - 1}\n      end\n    end\n  end\n  local sort_rows = function(x, y)\n \
    \   if x[1] == y[1] then\n      return x[2] > y[2]\n    else\n      return x[1]\
    \ < y[1]\n    end\n  end\n  table.sort(res, sort_rows)\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal lst_coords = {}\n\t\
    for i, sub_lst in ipairs(lst) do\n\t\tfor j, val in ipairs(sub_lst) do\n\t\t\t\
    if x == val then\n\t\t\t\ttable.insert(lst_coords, {i - 1, j - 1})\n\t\t\tend\n\
    \t\tend\n\tend\n\ttable.sort(lst_coords, function(a, b)\n\t\treturn a[1] < b[1]\
    \ or (a[1] == b[1] and a[2] > b[2])\n\tend)\n\treturn lst_coords\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, e in ipairs(row) do\n            if\
    \ e == x then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ==\
    \ b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ row, elems in ipairs(lst) do\n        for col, elem in ipairs(elems) do\n  \
    \          if elem == x then\n                table.insert(res, {row - 1, col\
    \ - 1})\n            end\n        end\n    end\n    table.sort(res, function(a,\
    \ b)\n        if a[1] < b[1] then\n            return true\n        elseif a[1]\
    \ > b[1] then\n            return false\n        else\n            return a[2]\
    \ > b[2]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n  \
    \      table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    if not lst or #lst == 0\
    \ then\n        return {}\n    end\n    local res = {}\n    for i = 1, #lst do\n\
    \        local row = lst[i]\n        if row and #row > 0 then\n            for\
    \ j = 1, #row do\n                if row[j] == x then\n                    table.insert(res,\
    \ {i - 1, j - 1})\n                end\n            end\n        end\n    end\n\
    \    local function sorter(a, b)\n        if a[1] < b[1] then\n            return\
    \ true\n        elseif a[1] == b[1] then\n            return a[2] > b[2]\n   \
    \     end\n        return false\n    end\n    table.sort(res, sorter)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local x_tb = {}\n    local\
    \ x_str = x\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n         \
    \   if lst[i][j] == x then\n                x_tb[#x_tb + 1] = {i - 1, j - 1}\n\
    \            end\n        end\n    end\n    return x_tb\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplodd5iq7.lua:32:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmplodd5iq7.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, cell in ipairs(row) do\n      if cell ==\
    \ x then\n        table.insert(result, {i - 1, #row - j})\n      end\n    end\n\
    \  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] < b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_fjy3oq.lua:38:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 5}, {1, 1},\
    \ {1, 5}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpt_fjy3oq.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local out = {}\n  for i,row\
    \ in ipairs(lst) do\n    for j,y in ipairs(row) do\n      if x == y then\n   \
    \     out[#out+1] = {i-1, j-1}\n      end\n    end\n  end\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0qaljlov.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmp0qaljlov.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local y = {}\n    for i\
    \ = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                table.insert(y, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    local function compare(a, b)\n        if a[1] < b[1] then\n    \
    \        return true\n        elseif a[1] == b[1] then\n            return a[2]\
    \ > b[2]\n        else\n            return false\n        end\n    end\n    table.sort(y,\
    \ compare)\n    return y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor i,\
    \ r in ipairs(lst) do\n\t\tfor j, v in ipairs(r) do\n\t\t\tif v == x then\n\t\t\
    \t\ttable.insert(res, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ~= b[1]\
    \ then\n            return a[1] < b[1]\n        else\n            return a[2]\
    \ > b[2]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp59uuuwo_.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmp59uuuwo_.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal function get_row_helper(lst,\
    \ x, row, col, res)\n\t\tif row > #lst then\n\t\t\treturn res\n\t\telseif col\
    \ > #lst[row] then\n\t\t\treturn get_row_helper(lst, x, row + 1, 1, res)\n\t\t\
    elseif lst[row][col] == x then\n\t\t\ttable.insert(res, {row - 1, col - 1})\n\t\
    \t\treturn get_row_helper(lst, x, row, col + 1, res)\n\t\telse\n\t\t\treturn get_row_helper(lst,\
    \ x, row, col + 1, res)\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\tif a[1]\
    \ == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\
    \t\tend\n\tend\n\tlocal row = 1\n\tlocal col = 1\n\tlocal res = {}\n\tlocal result\
    \ = get_row_helper(lst, x, row, col, res)\n\ttable.sort(result, cmp)\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal row = 0\n\tlocal l\
    \ = {}\n\tfor i, v in ipairs(lst) do\n\t\tfor j, v2 in ipairs(v) do\n\t\t\tif\
    \ v2 == x then\n\t\t\t\trow = row + 1\n\t\t\t\tl[row] = {i - 1, j - 1}\n\t\t\t\
    end\n\t\tend\n\tend\n\ttable.sort(l, function(a, b)\n\t\tif a[1] == b[1] then\n\
    \t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\
    \treturn l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  if #lst == 0 then return\
    \ {} end\n  local result = {}\n  for r, row in ipairs(lst) do\n    for c, cell\
    \ in ipairs(row) do\n      if cell == x then table.insert(result, {r - 1, c -\
    \ 1}) end\n    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] ~=\
    \ b[1] then return a[1] < b[1]\n    else return a[2] > b[2] end\n  end)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor row,\
    \ row_values in ipairs(lst) do\n\t\tfor col, value in ipairs(row_values) do\n\t\
    \t\tif value == x then\n\t\t\t\tres[#res + 1] = {row - 1, col - 1}\n\t\t\tend\n\
    \t\tend\n\tend\n\ttable.sort(res, function(a, b)\n\t\treturn a[1] < b[1] or (a[1]\
    \ == b[1] and a[2] > b[2])\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row do\n   \
    \         if row[j] == x then\n                res[#res + 1] = {i - 1, j - 1}\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n \
    \           return a[2] > b[2]\n        end\n    end)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n       \
    \     return a[2] > b[2]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] < b[1]\
    \ then\n            return true\n        elseif a[1] > b[1] then\n           \
    \ return false\n        else\n            return a[2] > b[2]\n        end\n  \
    \  end)\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n         \
    \   if value == x then\n                table.insert(res, {i - 1, #row - j})\n\
    \            end\n        end\n    end\n    table.sort(res, function(a, b)\n \
    \       if a[1] == b[1] then\n            return a[2] < b[2]\n        else\n \
    \           return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w9dp92v.lua:38:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 5}, {1, 1},\
    \ {1, 5}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmp_w9dp92v.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local i, j, result = 1, 1,\
    \ {}\n  for _, row in ipairs(lst) do\n    for _, value in ipairs(row) do\n   \
    \   if value == x then\n        table.insert(result, {i-1, j-1})\n      end\n\
    \      j = j + 1\n    end\n    j = 1\n    i = i + 1\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  local\
    \ cnt = 0\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j]\
    \ == x then\n        cnt = cnt + 1\n        result[cnt] = {i - 1, j - 1}\n   \
    \   end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqzge4ggd.lua:33:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpqzge4ggd.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  if #lst == 0 then return\
    \ {} end\n  local ret = {}\n  for i, v in ipairs(lst) do\n    local row = {}\n\
    \    for j, v2 in ipairs(v) do\n      if v2 == x then\n        table.insert(row,\
    \ j)\n      end\n    end\n    if #row > 0 then\n      table.insert(ret, {i - 1,\
    \ row})\n    end\n  end\n  table.sort(ret,\n    function(a, b)\n      if a[1]\
    \ < b[1] then\n        return true\n      elseif a[1] > b[1] then\n        return\
    \ false\n      else\n        local r = {}\n        for _, v in ipairs(a[2]) do\n\
    \          table.insert(r, -v)\n        end\n        table.sort(r)\n        local\
    \ r2 = {}\n        for _, v in ipairs(b[2]) do\n          table.insert(r2, -v)\n\
    \        end\n        table.sort(r2)\n        for i = 1, #r do\n          if r[i]\
    \ < r2[i] then\n            return true\n          elseif r[i] > r2[i] then\n\
    \            return false\n          end\n        end\n        return false\n\
    \      end\n    end\n  )\n  local ret2 = {}\n  for _, v in ipairs(ret) do\n  \
    \  table.insert(ret2, {v[1], v[2]})\n  end\n  return ret2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpluy8zhiu.lua:68:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, {1}}, {1, {1,\
    \ 5}}, {2, {1, 6}}}\nstack traceback:\n\t/tmp/tmpluy8zhiu.lua:68: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal function helper(lst,x,row,col,t)\n\
    \t\tif lst[row] == nil then\n\t\t\treturn t\n\t\telseif lst[row][col] == nil then\n\
    \t\t\treturn helper(lst,x,row+1,0,t)\n\t\telseif lst[row][col] == x then\n\t\t\
    \ttable.insert(t,{row,col})\n\t\t\treturn helper(lst,x,row,col+1,t)\n\t\telse\n\
    \t\t\treturn helper(lst,x,row,col+1,t)\n\t\tend\n\tend\n\tlocal t = helper(lst,x,1,0,{})\n\
    \ttable.sort(t,function(a,b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\
    \t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyfx936d.lua:43:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpsyfx936d.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, el in ipairs(row) do\n        \
    \    if el == x then\n                result[#result + 1] = {i - 1, j - 1}\n \
    \           end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n       \
    \     if val == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] < b[1] then\n            return true\n        elseif a[1] > b[1]\
    \ then\n            return false\n        else\n            return a[2] > b[2]\n\
    \        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local v = {}\n    for i\
    \ = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                table.insert(v, {i - 1, j - 1})\n            end\n        end\n\
    \    end\n    table.sort(v, function(a, b) return a[1] < b[1] end)\n    for i\
    \ = 1, #v do\n        table.sort(v[i], function(a, b) return a[2] > b[2] end)\n\
    \    end\n    return v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwxcnt9j9.lua:27:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpwxcnt9j9.lua:27:\
    \ in function </tmp/tmpwxcnt9j9.lua:27>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpwxcnt9j9.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpwxcnt9j9.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, row in ipairs(lst) do\n\t\tfor j, v in ipairs(row) do\n\t\t\tif v == x then\n\
    \t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,\
    \ function(a, b)\n\t\tif a[1] ~= b[1] then\n\t\t\treturn a[1] < b[1]\n\t\telse\n\
    \t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if elem == x then\n                table.insert(res, {i - 1, j - 1})\n    \
    \        end\n        end\n    end\n    table.sort(res, function(a, b)\n     \
    \   if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n     \
    \       return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, v in ipairs(row) do\n            if\
    \ v == x then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n\
    \        end\n    end\n    table.sort(res, function(a, b)\n        return a[1]\
    \ < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j] == x then\n\t\t\
    \t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local t = {}\n  for i, v\
    \ in ipairs(lst) do\n    for k, e in ipairs(v) do\n      if e == x then\n    \
    \    table.insert(t, {i - 1, k - 1})\n      end\n    end\n  end\n  if #t == 0\
    \ then\n    return {}\n  end\n  table.sort(t, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal coords = {}\n\tfor\
    \ i, row in ipairs(lst) do\n\t\tfor j, elem in ipairs(row) do\n\t\t\tif elem ==\
    \ x then\n\t\t\t\ttable.insert(coords, {i-1, j-1})\n\t\t\tend\n\t\tend\n\tend\n\
    \ttable.sort(coords, function(a, b)\n\t\tif a[1] ~= b[1] then\n\t\t\treturn a[1]\
    \ < b[1]\n\t\telse\n\t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn coords\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local a = {}\n    for i\
    \ = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x then\n\
    \                a[#a + 1] = {i - 1, j - 1}\n            end\n        end\n  \
    \  end\n    table.sort(a, function(a, b)\n        if a[1] < b[1] then\n      \
    \      return true\n        elseif a[1] > b[1] then\n            return false\n\
    \        else\n            return a[2] > b[2]\n        end\n    end)\n    return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        local sub_lst = lst[i]\n        for j = 1, #sub_lst\
    \ do\n            if sub_lst[j] == x then\n                result[#result + 1]\
    \ = {i - 1, j - 1}\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(x, y)\n    if x[1] == y[1] then\n      return\
    \ x[2] > y[2]\n    else\n      return x[1] < y[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for row,row_el\
    \ in ipairs(lst) do\n    for col,col_el in ipairs(row_el) do\n      if col_el\
    \ == x then\n        res[#res+1] = {row-1,col-1}\n      end\n    end\n  end\n\
    \  table.sort(res, function(a,b)\n    if a[1] ~= b[1] then\n      return a[1]\
    \ < b[1]\n    else\n      return a[2] > b[2]\n    end\n  end)\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tlocal\
    \ i = 0\n\tfor _, list in ipairs(lst) do\n\t\tlocal j = 0\n\t\tfor _, v in ipairs(list)\
    \ do\n\t\t\tif v == x then\n\t\t\t\tresult[#result + 1] = {i, j}\n\t\t\tend\n\t\
    \t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\ttable.sort(result, function(a,\
    \ b)\n\t\treturn a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\tend)\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n   local result = {}\n   for\
    \ i, r in ipairs(lst) do\n      for j, v in ipairs(r) do\n         if v == x then\n\
    \            table.insert(result, {i - 1, j - 1})\n         end\n      end\n \
    \  end\n   table.sort(result, function(a, b)\n                          if a[1]\
    \ ~= b[1] then\n                             return a[1] < b[1]\n            \
    \              else\n                             return a[2] > b[2]\n       \
    \                   end\n                       end)\n   return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, num in ipairs(row) do\n      if num ==\
    \ x then\n        result[#result + 1] = {i - 1, j - 1}\n      end\n    end\n \
    \ end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n      return\
    \ a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(res, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(res, {i - 1, #row - j})\n   \
    \         end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg723cz0t.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 5}, {1, 5},\
    \ {1, 1}, {2, 5}, {2, 0}}\nstack traceback:\n\t/tmp/tmpg723cz0t.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local found = {}\n  for i,\
    \ row in ipairs(lst) do\n    for j, val in ipairs(row) do\n      if val == x then\n\
    \        table.insert(found, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(found,\
    \ function(a, b)\n    if a[1] ~= b[1] then\n      return a[1] < b[1]\n    else\n\
    \      return a[2] > b[2]\n    end\n  end)\n  return found\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal output = {}\n\tfor\
    \ y = 1, #lst do\n\t\tfor x = 1, #lst[y] do\n\t\t\tif lst[y][x] == x then\n\t\t\
    \t\ttable.insert(output, {y - 1, x - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(output,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_fk2td1v.lua:38:\
    \ expected: \n{{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: \n{\n    {0, 5},\n\
    \    {0, 4},\n    {0, 3},\n    {0, 2},\n    {0, 1},\n    {0, 0},\n    {1, 5},\n\
    \    {1, 3},\n    {1, 2},\n    {1, 1},\n    {1, 0},\n    {2, 4},\n    {2, 3},\n\
    \    {2, 2},\n    {2, 1},\n    {2, 0}\n}\nstack traceback:\n\t/tmp/tmp_fk2td1v.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor i,\
    \ row in ipairs(lst) do\n\t\tfor j, col in ipairs(row) do\n\t\t\tif col == x then\n\
    \t\t\t\tres[#res + 1] = {i - 1, j - 1}\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(v1, v2)\n\t\tif v1[1] == v2[1] then\n\t\t\treturn v1[2] > v2[2]\n\t\
    \telse\n\t\t\treturn v1[1] < v2[1]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your solution here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrxikzhu.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: nil\nstack traceback:\n\
    \t/tmp/tmpwrxikzhu.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your solution goes here\n\
    \    local row, col = 1, 1\n    local result = {}\n    local tmp = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                tmp[#tmp + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    for i = 1, #tmp do\n        for j = 1, #tmp - 1 do\n  \
    \          if tmp[j][1] > tmp[j + 1][1] then\n                tmp[j], tmp[j +\
    \ 1] = tmp[j + 1], tmp[j]\n            end\n        end\n    end\n    for i =\
    \ 1, #tmp do\n        for j = 1, #tmp - 1 do\n            if tmp[j][1] == tmp[j\
    \ + 1][1] and tmp[j][2] < tmp[j + 1][2] then\n                tmp[j], tmp[j +\
    \ 1] = tmp[j + 1], tmp[j]\n            end\n        end\n    end\n    for i =\
    \ 1, #tmp do\n        result[i] = {tmp[i][1], tmp[i][2]}\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- \u044D\u0442\u043E \u043F\
    \u0440\u0438\u043C\u0435\u0440 \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\
    \u044E \u0438\u0437\u0431\u044B\u0442\u043E\u0447\u043D\u043E\u0433\u043E \u043A\
    \u043E\u0434\u0430\n    local function get_elem(row, x)\n        local function\
    \ get_elem_rec(row, x, i)\n            if not row[i] then\n                return\
    \ nil\n            elseif row[i] == x then\n                return i\n       \
    \     else\n                return get_elem_rec(row, x, i + 1)\n            end\n\
    \        end\n        return get_elem_rec(row, x, 1)\n    end\n    local function\
    \ has_elem(row, x)\n        return get_elem(row, x) and true or false\n    end\n\
    \    local function get_row_rec(lst, x, i, acc)\n        if not lst[i] then\n\
    \            return acc\n        elseif has_elem(lst[i], x) then\n           \
    \ return get_row_rec(lst, x, i + 1, { acc[1] + 1, get_elem(lst[i], x) })\n   \
    \     else\n            return get_row_rec(lst, x, i + 1, acc)\n        end\n\
    \    end\n    local function get_row_init(lst, x)\n        return get_row_rec(lst,\
    \ x, 1, { 0, 0 })\n    end\n    local function get_row_map(lst, x)\n        local\
    \ function get_row_map_rec(lst, x, i, acc)\n            if not lst[i] then\n \
    \               return acc\n            elseif has_elem(lst[i], x) then\n    \
    \            return get_row_map_rec(lst, x, i + 1, { acc[1] + 1, get_elem(lst[i],\
    \ x) })\n            else\n                return get_row_map_rec(lst, x, i +\
    \ 1, acc)\n            end\n        end\n        return get_row_map_rec(lst, x,\
    \ 1, { 0, 0 })\n    end\n    return get_row_init\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp063ggra_.lua:58: ''end'' expected (to close ''function'' at
    line 16) near ''lu''

    '
  stdout: ''
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, cell in ipairs(row) do\n      \
    \      if cell == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local row = {}\n  local col\
    \ = {}\n  local res = {}\n  local k = 0\n  for i = 1, #lst do\n    row[i] = 0\n\
    \    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n        row[i] = row[i]\
    \ + 1\n        k = k + 1\n        col[k] = j\n      end\n    end\n  end\n  k =\
    \ 0\n  for i = 1, #row do\n    if row[i] > 0 then\n      table.insert(res, {i\
    \ - 1, col[k + row[i]]})\n      for j = row[i] - 1, 1, -1 do\n        k = k +\
    \ 1\n        table.insert(res, {i - 1, col[k]})\n      end\n      k = k + 1\n\
    \    end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpn6c3d.lua:48:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 1}, {1, 5},\
    \ {1, 1}, {2, 6}, {2, 1}}\nstack traceback:\n\t/tmp/tmpdxpn6c3d.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    if not lst then return\
    \ end\n    local result = {}\n    for i, row in ipairs(lst) do\n        for j,\
    \ element in ipairs(row) do\n            if element == x then\n              \
    \  table.insert(result, {i - 1, j - 1})\n            end\n        end\n    end\n\
    \    table.sort(result, function(a, b)\n        if a[1] == b[1] then\n       \
    \     return a[2] > b[2]\n        else\n            return a[1] < b[1]\n     \
    \   end\n    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- your code goes here\n\
    \  local f = function(lst,x,ind,res)\n  \tif(lst == nil) then return res; end\n\
    \  \tlocal a = {};\n  \tfor i,v in ipairs(lst) do\n  \t\tif v == x then \n  \t\
    \t\ta[#a+1] = i-1;\n  \t\tend\n  \tend\n  \tfor i,v in ipairs(a) do\n  \t\tres[#res+1]\
    \ = {ind,v};\n  \tend\n  \treturn f(lst[1],x,ind+1,res);\n  end\n  local k = f(lst,x,0,{});\n\
    \  local sort1 = function(a,b)\n  \tif(a[1] < b[1]) then return true;\n  \telseif(a[1]\
    \ > b[1]) then return false;\n  \telseif(a[2] > b[2]) then return true;\n  \t\
    else return false;\n  \tend\n  end\n  table.sort(k,sort1);\n  return k;\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxoauwdlo.lua:29:\
    \ attempt to call a nil value (global 'f')\nstack traceback:\n\t/tmp/tmpxoauwdlo.lua:29:\
    \ in local 'f'\n\t/tmp/tmpxoauwdlo.lua:31: in local 'candidate'\n\t/tmp/tmpxoauwdlo.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tfor k,\
    \ v in ipairs(lst) do\n\t\tfor i, j in ipairs(v) do\n\t\t\tif j == x then\n\t\t\
    \t\tres[#res + 1] = {k - 1, i - 1}\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(res,\
    \ function(a, b)\n\t\tif a[1] ~= b[1] then\n\t\t\treturn a[1] < b[1]\n\t\telse\n\
    \t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tlocal\
    \ t = {}\n\tlocal size = 0\n\tfor i = 1, #lst do\n\t\tt = {}\n\t\tfor j = 1, #lst[i]\
    \ do\n\t\t\tif lst[i][j] == x then\n\t\t\t\ttable.insert(t, {i - 1, j - 1})\n\t\
    \t\tend\n\t\tend\n\t\tfor k = 1, #t do\n\t\t\ttable.insert(result, t[k])\n\t\t\
    end\n\tend\n\tfor k = 1, #result do\n\t\tfor i = 1, #result - 1 do\n\t\t\tif result[i][1]\
    \ > result[i + 1][1] then\n\t\t\t\tt = result[i]\n\t\t\t\tresult[i] = result[i\
    \ + 1]\n\t\t\t\tresult[i + 1] = t\n\t\t\tend\n\t\tend\n\tend\n\tfor k = 1, #result\
    \ do\n\t\tfor i = 1, #result - 1 do\n\t\t\tif result[i][1] == result[i + 1][1]\
    \ then\n\t\t\t\tif result[i][2] < result[i + 1][2] then\n\t\t\t\t\tt = result[i]\n\
    \t\t\t\t\tresult[i] = result[i + 1]\n\t\t\t\t\tresult[i + 1] = t\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local t = {}\n    for i,\
    \ v in ipairs(lst) do\n        for j, w in ipairs(v) do\n            if w == x\
    \ then\n                table.insert(t, {i - 1, j - 1})\n            end\n   \
    \     end\n    end\n    table.sort(t, function(a, b)\n        if a[1] < b[1] then\n\
    \            return true\n        elseif a[1] > b[1] then\n            return\
    \ false\n        else\n            return a[2] > b[2]\n        end\n    end)\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tlocal tab\
    \ = {}\n\tfor i,v in ipairs(lst) do\n\t\tfor j, val in ipairs(v) do\n\t\t\tif\
    \ val == x then\n\t\t\t\ttab.i = i\n\t\t\t\ttab.j = j\n\t\t\t\ttable.insert(res,\
    \ {tab.i, tab.j})\n\t\t\tend\n\t\tend\n\tend\n\tlocal function cmp(a, b)\n\t\t\
    if a[1] ~= b[1] then\n\t\t\treturn a[1] < b[1]\n\t\telse\n\t\t\treturn a[2] >\
    \ b[2]\n\t\tend\n\tend\n\ttable.sort(res, cmp)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnf3_cjy9.lua:42:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{1, 1}, {2, 5},\
    \ {2, 1}, {3, 6}, {3, 1}}\nstack traceback:\n\t/tmp/tmpnf3_cjy9.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  return table.sort(map(function(row,\
    \ i)\n    return map(function(elem, j)\n      if elem == x then\n        return\
    \ {i, j}\n      end\n    end, row)\n  end, lst), function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2wg4dqx.lua:17:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpi2wg4dqx.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpi2wg4dqx.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n  \
    \      table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(result,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(ret, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(ret, function(a, b)\n       \
    \ return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tres = {}\n\tif #lst == 0\
    \ then\n\t\treturn res\n\tend\n\tfor i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\
    \t\t\tif lst[i][j] == x then\n\t\t\t\tres[#res + 1] = {i - 1, j - 1}\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8g70n099.lua:34:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmp8g70n099.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- local res = {}\n   \
    \ -- for row, r in ipairs(lst) do\n    --     for col, c in ipairs(r) do\n   \
    \ --         if c == x then\n    --             res[#res + 1] = {row - 1, col\
    \ - 1}\n    --         end\n    --     end\n    -- end\n    -- table.sort(res,\
    \ function(a, b) return a[1] < b[1] end)\n    -- table.sort(res, function(a, b)\
    \ return a[2] > b[2] end)\n    -- return res\n    local xs = {}\n    for r, row\
    \ in ipairs(lst) do\n        for c, col in ipairs(row) do\n            if col\
    \ == x then\n                xs[#xs + 1] = {r - 1, c - 1}\n            end\n \
    \       end\n    end\n    table.sort(xs, function(a, b) return a[1] < b[1] end)\n\
    \    table.sort(xs, function(a, b) return a[2] > b[2] end)\n    return xs\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lswbvs9.lua:44:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{2, 5}, {1, 4},\
    \ {2, 0}, {1, 0}, {0, 0}}\nstack traceback:\n\t/tmp/tmp6lswbvs9.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ y, row in ipairs(lst) do\n    for i, val in ipairs(row) do\n      if val ==\
    \ x then\n        table.insert(result, {y - 1, i - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(x, y)\n    if x[1] ~= y[1] then\n      return\
    \ x[1] < y[1]\n    else\n      return x[2] > y[2]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    local\
    \ row = 0\n    for _, v in ipairs(lst) do\n        for i, val in ipairs(v) do\n\
    \            if val == x then\n                table.insert(res, {row, i})\n \
    \           end\n        end\n        row = row + 1\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] < b[1] then\n            return true\n     \
    \   elseif a[1] > b[1] then\n            return false\n        else\n        \
    \    return a[2] > b[2]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n6awl0i.lua:42:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 1}, {1, 5},\
    \ {1, 1}, {2, 6}, {2, 1}}\nstack traceback:\n\t/tmp/tmp0n6awl0i.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ local start = 1\n    local finish = #lst\n    local middle = start + finish\n\
    \    while start < finish do\n        if x <= lst[middle] then\n            finish\
    \ = middle\n        else\n            start = middle + 1\n        end\n      \
    \  middle = (start + finish) / 2\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppo0_jcp9.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppo0_jcp9.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmppo0_jcp9.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, row in ipairs(lst) do\n\t\tfor j, v in ipairs(row) do\n\t\t\tif v == x then\n\
    \t\t\t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,\
    \ function(a, b)\n\t\tif a[1] ~= b[1] then\n\t\t\treturn a[1] < b[1]\n\t\telse\n\
    \t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ row, col in ipairs(lst) do\n        for col_idx, val in ipairs(col) do\n   \
    \         if val == x then\n                table.insert(ret, {row - 1, col_idx\
    \ - 1})\n            end\n        end\n    end\n    table.sort(ret, function(lhs,\
    \ rhs)\n        if lhs[1] < rhs[1] then\n            return true\n        elseif\
    \ lhs[1] > rhs[1] then\n            return false\n        else\n            return\
    \ lhs[2] > rhs[2]\n        end\n    end)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, v in ipairs(lst) do\n    for j, val in ipairs(v) do\n      if val == x then\n\
    \        table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  if\
    \ not (#result == 0) then\n    table.sort(result, function(a, b)\n      if a[1]\
    \ == b[1] then\n        return a[2] > b[2]\n      else\n        return a[1] <\
    \ b[1]\n      end\n    end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n       \
    \     if col == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, value in ipairs(row) do\n     \
    \       if value == x then\n                result[#result + 1] = {i - 1, j -\
    \ 1}\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tlocal row\
    \ = 0\n\tfor k, v in ipairs(lst) do\n\t\tlocal col = 0\n\t\tfor i, j in ipairs(v)\
    \ do\n\t\t\tif j == x then\n\t\t\t\ttable.insert(res, {row, col})\n\t\t\tend\n\
    \t\t\tcol = col + 1\n\t\tend\n\t\trow = row + 1\n\tend\n\ttable.sort(res, function(a,\
    \ b)\n\t\tif a[1] < b[1] then\n\t\t\treturn true\n\t\telseif a[1] > b[1] then\n\
    \t\t\treturn false\n\t\telse\n\t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] ~= b[1]\
    \ then\n            return a[1] < b[1]\n        else\n            return a[2]\
    \ > b[2]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if x == col then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal ans, y\n\tans = {}\n\
    \tfor y, row in ipairs(lst) do\n\t\tlocal x, prev_x\n\t\tfor x = 1, #row do\n\t\
    \t\tif row[x] == x then\n\t\t\t\tlocal index = #ans + 1\n\t\t\t\tans[index] =\
    \ {}\n\t\t\t\tans[index][1] = y - 1\n\t\t\t\tans[index][2] = x - 1\n\t\t\tend\n\
    \t\tend\n\tend\n\ttable.sort(ans, function(a, b)\n\t\tif a[1] == b[1] then\n\t\
    \t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\t\
    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqcu8ts5.lua:43:\
    \ expected: \n{{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: \n{\n    {0, 5},\n\
    \    {0, 4},\n    {0, 3},\n    {0, 2},\n    {0, 1},\n    {0, 0},\n    {1, 5},\n\
    \    {1, 3},\n    {1, 2},\n    {1, 1},\n    {1, 0},\n    {2, 4},\n    {2, 3},\n\
    \    {2, 2},\n    {2, 1},\n    {2, 0}\n}\nstack traceback:\n\t/tmp/tmpuqcu8ts5.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local ret = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  table.insert(ret, {i - 1, j - 1})\n      end\n    end\n  end\n  local sort_by_rows\
    \ = function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end\n  table.sort(ret, sort_by_rows)\n \
    \ return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal out = {}\n\tfor i =\
    \ 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j] == x then\n\t\t\t\t\
    table.insert(out, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(out,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  for i =\
    \ 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n      \
    \  res[#res + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n  table.sort(res,\
    \ function(a, b)\n    if a[1] < b[1] then\n      return true\n    elseif a[1]\
    \ > b[1] then\n      return false\n    else\n      return a[2] > b[2]\n    end\n\
    \  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ i, t in ipairs(lst) do\n        for j, v in ipairs(t) do\n            if v ==\
    \ x then\n                table.insert(ret, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    table.sort(ret, function(a, b)\n        if a[1] ~=\
    \ b[1] then\n            return a[1] < b[1]\n        else\n            return\
    \ a[2] > b[2]\n        end\n    end)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, v in ipairs(lst) do\n        for j, a in ipairs(v) do\n            if a ==\
    \ x then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n  \
    \      end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local res = {}\n  local has_x\
    \ = function(t)\n    local res = false\n    for i = 1, #t do\n      if t[i] ==\
    \ x then\n        res = true\n        break\n      end\n    end\n    return res\n\
    \  end\n  for i = 1, #lst do\n    if has_x(lst[i]) then\n      for j = 1, #lst[i]\
    \ do\n        if lst[i][j] == x then\n          table.insert(res, {i - 1, j -\
    \ 1})\n        end\n      end\n    end\n  end\n  table.sort(res, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal res = {}\n\tlocal tmp\
    \ = {}\n\tfor i, row in ipairs(lst) do\n\t\tfor j, col in ipairs(row) do\n\t\t\
    \tif col == x then\n\t\t\t\ttmp = {i - 1, j - 1}\n\t\t\t\ttable.insert(res, tmp)\n\
    \t\t\tend\n\t\tend\n\tend\n\ttable.sort(res, function(a, b) return a[1] < b[1]\
    \ end)\n\ttable.sort(res, function(a, b) return a[2] > b[2] end)\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9j7n30f.lua:35:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{2, 5}, {1, 4},\
    \ {2, 0}, {1, 0}, {0, 0}}\nstack traceback:\n\t/tmp/tmpd9j7n30f.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, element in ipairs(row) do\n   \
    \         if element == x then\n                result[#result + 1] = {i - 1,\
    \ j - 1}\n            end\n        end\n    end\n    table.sort(result, function(left,\
    \ right)\n        if left[1] < right[1] then\n            return true\n      \
    \  elseif left[1] > right[1] then\n            return false\n        else\n  \
    \          return left[2] > right[2]\n        end\n    end)\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local r = {}\n    for j,\
    \ v in ipairs(lst) do\n        for i, vv in ipairs(v) do\n            if vv ==\
    \ x then\n                table.insert(r, {j - 1, i - 1})\n            end\n \
    \       end\n    end\n    table.sort(r, function(lhs, rhs)\n        return lhs[1]\
    \ < rhs[1] or lhs[1] == rhs[1] and lhs[2] > rhs[2]\n    end)\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j] == x\
    \ then\n                res[#res + 1] = {i - 1, j - 1}\n            end\n    \
    \    end\n    end\n    table.sort(res, function(a, b)\n        if a[1] == b[1]\
    \ then\n            return a[2] > b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n   local x_coordinates = {}\n\
    \   for i, row in ipairs(lst) do\n      for j, elem in ipairs(row) do\n      \
    \   if elem == x then\n            x_coordinates[#x_coordinates + 1] = {i - 1,\
    \ j - 1}\n         end\n      end\n   end\n   table.sort(x_coordinates, function(a,\
    \ b)\n      if a[1] == b[1] then\n         return a[2] > b[2]\n      else\n  \
    \       return a[1] < b[1]\n      end\n   end)\n   return x_coordinates\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, col in ipairs(row) do\n           \
    \ if col == x then\n                table.insert(ret, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(ret, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(ret, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(ret, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, row in ipairs(lst) do\n    for j, item in ipairs(row) do\n      if item ==\
    \ x then\n        table.insert(result, {i - 1, j - 1})\n      end\n    end\n \
    \ end\n  table.sort(result, function(a, b)\n    if a[1] ~= b[1] then\n      return\
    \ a[1] < b[1]\n    else\n      return a[2] > b[2]\n    end\n  end)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ k, row in ipairs(lst) do\n\t\tfor j, col in ipairs(row) do\n\t\t\tif col ==\
    \ x then\n\t\t\t\tresult[#result + 1] = {k-1, j-1}\n\t\t\tend\n\t\tend\n\tend\n\
    \ttable.sort(result, function(t1, t2)\n\t\tif t1[1] ~= t2[1] then\n\t\t\treturn\
    \ t1[1] < t2[1]\n\t\telse\n\t\t\treturn t1[2] > t2[2]\n\t\tend\n\tend)\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ row, row_val in ipairs(lst) do\n\t\tfor col, val in ipairs(row_val) do\n\t\t\
    \tif val == x then\n\t\t\t\ttable.insert(result, {row - 1, col - 1})\n\t\t\tend\n\
    \t\tend\n\tend\n\ttable.sort(result, function(a, b)\n\t\tif a[1] == b[1] then\n\
    \t\t\treturn a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2,\
    \ 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- your code here\n   \
    \ --local answer = {}\n    local answer = {}\n    for i = 1, #lst do\n       \
    \ for j = 1, #lst[i] do\n            if lst[i][j] == x then\n                answer[#answer\
    \ + 1] = {i - 1, j - 1}\n            end\n        end\n    end\n    table.sort(answer,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo0cc1cw.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpgo0cc1cw.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local t = {}\n  for row,\
    \ row_values in ipairs(lst) do\n    for col, value in ipairs(row_values) do\n\
    \      if value == x then\n        table.insert(t, {row - 1, col - 1})\n     \
    \ end\n    end\n  end\n  table.sort(t,\n    function(a, b)\n      if a[1] < b[1]\
    \ then\n        return true\n      elseif a[1] > b[1] then\n        return false\n\
    \      else\n        return a[2] > b[2]\n      end\n    end\n  )\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, sublst in ipairs(lst) do\n        for col, value in ipairs(sublst)\
    \ do\n            if value == x then\n                table.insert(result, {row\
    \ - 1, col - 1})\n            end\n        end\n    end\n    table.sort(result,\
    \ function(a, b)\n        return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n\
    \    end)\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i = 1, #lst do\n    for j = 1, #lst[i] do\n      if lst[i][j] == x then\n  \
    \      table.insert(result, {i - 1, j - 1})\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplhuyveqe.lua:31:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmplhuyveqe.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- your code goes here\n\
    \  --[[\n    This function searches for a given number inside the table. It returns\
    \ a table\n    with the row and column index for all elements that match the given\
    \ number.\n    To create the output table, it uses two tables: list and output.\n\
    \    The list table is sorted by row and column.\n    We loop over the elements\
    \ in lst and add the coordinate of each element to list.\n    After we looped\
    \ over the elements in lst, the list table is sorted by row and column.\n    We\
    \ loop over the elements in list and add the coordinate to the output table.\n\
    \    This way we get the coordinates in the right order.\n  ]]\n  local list =\
    \ {}\n  local output = {}\n  for i, row in ipairs(lst) do\n    for j, elem in\
    \ ipairs(row) do\n      if elem == x then\n        table.insert(list, {i, j})\n\
    \      end\n    end\n  end\n  table.sort(list, function(a, b)\n    if a[1] ==\
    \ b[1] then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n  \
    \  end\n  end)\n  for i, coordinate in ipairs(list) do\n    table.insert(output,\
    \ {coordinate[1] - 1, coordinate[2] - 1})\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ i, v in ipairs(lst) do\n    for j, v2 in ipairs(v) do\n      if x == v2 then\n\
    \        result[#result + 1] = {i - 1, j - 1}\n      end\n    end\n  end\n  if\
    \ #result > 0 then\n    table.sort(result, function(a, b)\n      if a[1] == b[1]\
    \ then\n        return a[2] > b[2]\n      else\n        return a[1] < b[1]\n \
    \     end\n    end)\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i = 1, #lst do\n\t\tfor j = 1, #lst[i] do\n\t\t\tif lst[i][j] == x then\n\t\t\
    \t\ttable.insert(result, {i - 1, j - 1})\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(result,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] > b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i, row in ipairs(lst) do\n        for j, item in ipairs(row) do\n      \
    \      if item == x then\n                table.insert(result, {i - 1, j - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    if #lst == 0 then\n   \
    \     return {}\n    end\n    local ret = {}\n    for i, row in ipairs(lst) do\n\
    \        for j, col in ipairs(row) do\n            if col == x then\n        \
    \        table.insert(ret, {i - 1, j - 1})\n            end\n        end\n   \
    \ end\n    table.sort(ret, function(a, b)\n        if a[1] ~= b[1] then\n    \
    \        return a[1] < b[1]\n        else\n            return a[2] > b[2]\n  \
    \      end\n    end)\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal result = {}\n\tfor\
    \ i, row in ipairs(lst) do\n\t\tfor j, col in ipairs(row) do\n\t\t\tif col ==\
    \ x then\n\t\t\t\ttable.insert(result, {i - 1, #row - j})\n\t\t\tend\n\t\tend\n\
    \tend\n\ttable.sort(result, function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn\
    \ a[2] > b[2]\n\t\telse\n\t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp64u2uv98.lua:38:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 5}, {1, 5},\
    \ {1, 1}, {2, 5}, {2, 0}}\nstack traceback:\n\t/tmp/tmp64u2uv98.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal function lst_find(lst,\
    \ x)\n\t\tfor idx = 1, #lst do\n\t\t\tif lst[idx] == x then\n\t\t\t\treturn idx\n\
    \t\t\tend\n\t\tend\n\t\treturn 0\n\tend\n\tlocal function lst_reverse(lst)\n\t\
    \tlocal result = {}\n\t\tfor i = #lst, 1, -1 do\n\t\t\tresult[#result + 1] = lst[i]\n\
    \t\tend\n\t\treturn result\n\tend\n\tlocal function get_row(lst, x, result, row)\n\
    \t\tfor idx = 1, #lst do\n\t\t\tlocal col = lst_find(lst[idx], x)\n\t\t\tif col\
    \ ~= 0 then\n\t\t\t\tresult[#result + 1] = {row, col - 1}\n\t\t\tend\n\t\tend\n\
    \t\trow = row + 1\n\t\treturn result, row\n\tend\n\tlocal function cmp(a, b)\n\
    \t\tif a[1] < b[1] then\n\t\t\treturn true\n\t\telseif a[1] > b[1] then\n\t\t\t\
    return false\n\t\telse\n\t\t\treturn a[2] > b[2]\n\t\tend\n\tend\n\tlocal function\
    \ cmp_reverse(a, b)\n\t\tif a[1] < b[1] then\n\t\t\treturn true\n\t\telseif a[1]\
    \ > b[1] then\n\t\t\treturn false\n\t\telse\n\t\t\treturn a[2] < b[2]\n\t\tend\n\
    \tend\n\tlocal result = {}\n\tlocal row = 0\n\tresult, row = get_row(lst, x, result,\
    \ row)\n\tsort(result, cmp)\n\tfor idx = 1, #result do\n\t\tlst[result[idx][1]]\
    \ = lst_reverse(lst[result[idx][1]])\n\tend\n\tsort(result, cmp_reverse)\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_8i0ygi.lua:63:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpb_8i0ygi.lua:63:\
    \ in local 'candidate'\n\t/tmp/tmpb_8i0ygi.lua:74: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  if #lst == 0 then return\
    \ {} end\n  local res = {}\n  for i = 1, #lst do\n    for j = 1, #lst[i] do\n\
    \      if lst[i][j] == x then\n        table.insert(res, {i - 1, j - 1})\n   \
    \   end\n    end\n  end\n  table.sort(res, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  -- your code here\n  local\
    \ ret = {}\n  local x_index = 0\n  for row, v in ipairs(lst) do\n    local y_index\
    \ = 0\n    for _, v2 in ipairs(v) do\n      if v2 == x then\n        table.insert(ret,\
    \ {x_index, y_index})\n      end\n      y_index = y_index + 1\n    end\n    x_index\
    \ = x_index + 1\n  end\n  table.sort(ret, function(a, b)\n    if a[1] == b[1]\
    \ then\n      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n\
    \  end)\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        for j = 1, #lst[i] do\n            if lst[i][j]\
    \ == x then\n                table.insert(result, {i - 1, j - 1})\n          \
    \  end\n        end\n    end\n    table.sort(result, function(a, b)\n        if\
    \ a[1] == b[1] then\n            return a[2] > b[2]\n        else\n          \
    \  return a[1] < b[1]\n        end\n    end)\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for i = 1, #lst do\n        local row = lst[i]\n        for j = 1, #row do\n\
    \            if row[j] == x then\n                table.insert(result, {i - 1,\
    \ j - 1})\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] ~= b[1] then\n            return a[1] < b[1]\n        else\n\
    \            return a[2] > b[2]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local a = {}\n  for row,\
    \ subtable in ipairs(lst) do\n    for col, n in ipairs(subtable) do\n      if\
    \ n == x then\n        table.insert(a, {row-1, col-1})\n      end\n    end\n \
    \ end\n  table.sort(a, function(i, j) return i[1] < j[1] end)\n  for i, _ in ipairs(a)\
    \ do\n    table.sort(a[i], function(i, j) return i[2] > j[2] end)\n  end\n  return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyked3o2.lua:27:\
    \ attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmppyked3o2.lua:27:\
    \ in function </tmp/tmppyked3o2.lua:27>\n\t[C]: in function 'table.sort'\n\t/tmp/tmppyked3o2.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmppyked3o2.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local coordinates = {}\n\
    \    local tbl = {}\n    for i = 1, #lst do\n        for j = 1, #lst[i] do\n \
    \           if lst[i][j] == x then\n                table.insert(coordinates,\
    \ {i - 1, j - 1})\n            end\n        end\n    end\n    for i = 1, #coordinates\
    \ do\n        table.insert(tbl, coordinates[i])\n    end\n    return tbl\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsi0pwg3.lua:35:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {1, 4}, {2, 0}, {2, 5}}\nstack traceback:\n\t/tmp/tmpnsi0pwg3.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    -- return a list of coordinates\
    \ (rows, columns) for given x\n    local function scan_sub_list(lst, x, r, result)\n\
    \        -- scan a sublist of row\n        for i, v in ipairs(lst) do\n      \
    \      if v == x then\n                table.insert(result, {r, i - 1})\n    \
    \        end\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuxov2j7p.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local ret = {}\n    for\
    \ r, row in ipairs(lst) do\n        for c, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(ret, {r - 1, c - 1})\n      \
    \      end\n        end\n    end\n    table.sort(ret, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local rows = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, elem in ipairs(row) do\n          \
    \  if x == elem then\n                rows[#rows + 1] = {i - 1, j - 1}\n     \
    \       end\n        end\n    end\n    local function cmp(a, b)\n        if a[1]\
    \ == b[1] then\n            return a[2] > b[2]\n        else\n            return\
    \ a[1] < b[1]\n        end\n    end\n    table.sort(rows, cmp)\n    return rows\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, l in ipairs(lst) do\n        for col, v in ipairs(l) do\n         \
    \   if v == x then\n                table.insert(result, {row - 1, col - 1})\n\
    \            end\n        end\n    end\n    table.sort(result, function(a, b)\n\
    \        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgo0cc1cw.lua:23:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {}\nstack traceback:\n\
    \t/tmp/tmpgo0cc1cw.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local row = {}\n  for i,\
    \ r in ipairs(lst) do\n    for j, c in ipairs(r) do\n      if c == x then\n  \
    \      table.insert(row, {i - 1, j - 1})\n      end\n    end\n  end\n  table.sort(row,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return row\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n\tlocal i = 0\n\tlocal res\
    \ = {}\n\tfor _, row in ipairs(lst) do\n\t\tfor k, elem in ipairs(row) do\n\t\t\
    \tif elem == x then\n\t\t\t\ttable.insert(res, {i, k - 1})\n\t\t\tend\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\ttable.sort(res, function(a, b)\n\t\tif a[1] < b[1] then\n\
    \t\t\treturn true\n\t\telseif a[1] > b[1] then\n\t\t\treturn false\n\t\telse\n\
    \t\t\treturn a[2] > b[2]\n\t\tend\n\tend)\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  local result = {}\n  for\
    \ row, cols in ipairs(lst) do\n    for col, value in ipairs(cols) do\n      if\
    \ value == x then\n        table.insert(result, {row - 1, col - 1})\n      end\n\
    \    end\n  end\n  table.sort(result, function(a, b)\n    if a[1] == b[1] then\n\
    \      return a[2] > b[2]\n    else\n      return a[1] < b[1]\n    end\n  end)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4,\
    \ 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, value in ipairs(lst) do\n        for i, v in ipairs(value) do\n   \
    \         if v == x then\n                result[#result + 1] = {row - 1, i -\
    \ 1}\n            end\n        end\n    end\n    table.sort(result, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n\
    \            return a[1] < b[1]\n        end\n    end)\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_row\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2,\
    \ 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1},\
    \ {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2,\
    \ 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3,\
    \ 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, row in ipairs(lst) do\n        for j, val in ipairs(row) do\n           \
    \ if val == x then\n                table.insert(res, {i - 1, j - 1})\n      \
    \      end\n        end\n    end\n    table.sort(res, function(a, b)\n       \
    \ if a[1] == b[1] then\n            return a[2] > b[2]\n        else\n       \
    \     return a[1] < b[1]\n        end\n    end)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local result = {}\n   \
    \ for row, t in ipairs(lst) do\n        for col, v in ipairs(t) do\n         \
    \   if v == x then\n                table.insert(result, {row-1, col-1})\n   \
    \         end\n        end\n    end\n    table.sort(result, function(a, b)\n \
    \       return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n    end)\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local row = 0\n    local\
    \ res = {}\n    for i = 1, #lst do\n        local row_ = lst[i]\n        local\
    \ col = 0\n        for j = 1, #row_ do\n            if row_[j] == x then\n   \
    \             table.insert(res, {row, col})\n            end\n            col\
    \ = col + 1\n        end\n        row = row + 1\n    end\n    table.sort(res,\
    \ function(a, b)\n        if a[1] == b[1] then\n            return a[2] > b[2]\n\
    \        else\n            return a[1] < b[1]\n        end\n    end)\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 0
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n  if not lst then return {}\
    \ end\n  local results = {}\n  for row, columns in ipairs(lst) do\n    for col,\
    \ val in ipairs(columns) do\n      if val == x then\n        table.insert(results,\
    \ {row - 1, col - 1})\n      end\n    end\n  end\n  table.sort(results, function(a,\
    \ b)\n    return a[1] < b[1] or (a[1] == b[1] and a[2] > b[2])\n  end)\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_row\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1,\
    \ 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}})\n   \
    \ lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3,\
    \ 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0,\
    \ 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1, 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6},\
    \ {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1,\
    \ 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3}, {4, 0}, {5, 4}, {5, 0}, {6, 5},\
    \ {6, 0}})\n    lu.assertEquals(candidate({}, 1), {})\n    lu.assertEquals(candidate({{1}},\
    \ 2), {})\n    lu.assertEquals(candidate({{}, {1}, {1, 2, 3}}, 3), {{2, 2}})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660015671
- exit_code: 1
  program: "-- You are given a 2 dimensional data, as a nested tables,\n-- which is\
    \ similar to matrix, however, unlike matrices,\n-- each row may contain a different\
    \ number of columns.\n-- Given lst, and integer x, find integers x in the table,\n\
    -- and return table of tables, [(x1, y1), (x2, y2) ...] such that\n-- each table\
    \ is a coordinate - (row, columns), starting with 0.\n-- Sort coordinates initially\
    \ by rows in ascending order.\n-- Also, sort coordinates of the row by columns\
    \ in descending order.\n-- Examples:\n-- >>> get_row({{1, 2, 3, 4, 5, 6}, {1,\
    \ 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1)\n-- {{0, 0}, {1, 4}, {1, 0}, {2, 5},\
    \ {2, 0}}\n-- >>> get_row({}, 1)\n-- {}\n-- >>> get_row({{}, {1}, {1, 2, 3}},\
    \ 3)\n-- {{2, 2}}\nlocal function get_row(lst, x)\n    local res = {}\n    for\
    \ i, v in ipairs(lst) do\n        for j, vv in ipairs(v) do\n            if vv\
    \ == x then\n                table.insert(res, {i - 1, j - 1})\n            end\n\
    \        end\n    end\n    -- sorting by rows in ascending order\n    table.sort(res,\
    \ function(v1, v2) return v1[1] < v2[1] end)\n    -- sorting by columns in descending\
    \ order\n    for _, v in ipairs(res) do\n        table.sort(v, function(a, b)\
    \ return a > b end)\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_row\n    lu.assertEquals(candidate({{1,\
    \ 2, 3, 4, 5, 6}, {1, 2, 3, 4, 1, 6}, {1, 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 4},\
    \ {1, 0}, {2, 5}, {2, 0}})\n    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6},\
    \ {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5,\
    \ 6}, {1, 2, 3, 4, 5, 6}}, 2), {{0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}})\n\
    \    lu.assertEquals(candidate({{1, 2, 3, 4, 5, 6}, {1, 2, 3, 4, 5, 6}, {1, 1,\
    \ 3, 4, 5, 6}, {1, 2, 1, 4, 5, 6}, {1, 2, 3, 1, 5, 6}, {1, 2, 3, 4, 1, 6}, {1,\
    \ 2, 3, 4, 5, 1}}, 1), {{0, 0}, {1, 0}, {2, 1}, {2, 0}, {3, 2}, {3, 0}, {4, 3},\
    \ {4, 0}, {5, 4}, {5, 0}, {6, 5}, {6, 0}})\n    lu.assertEquals(candidate({},\
    \ 1), {})\n    lu.assertEquals(candidate({{1}}, 2), {})\n    lu.assertEquals(candidate({{},\
    \ {1}, {1, 2, 3}}, 3), {{2, 2}})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6l3bn0jt.lua:37:\
    \ expected: {{0, 0}, {1, 4}, {1, 0}, {2, 5}, {2, 0}}\nactual: {{0, 0}, {1, 0},\
    \ {4, 1}, {2, 0}, {5, 2}}\nstack traceback:\n\t/tmp/tmp6l3bn0jt.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660015671
