name: HumanEval_12_longest
language: lua
prompt: "-- Out of table of strings, return the longest one. Return the first one\
  \ in case of multiple\n-- strings of the same length. Return None in case the input\
  \ table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n\
  -- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = nil\n  local longest_length = 0\n  for _, s in ipairs(strings) do\n    if\
    \ #s > longest_length then\n      longest_string = s\n      longest_length = #s\n\
    \    end\n  end\n  return longest_string\nend", "  --[[\n  We rely on the fact\
    \ that a table is a sorted collection and strings are ordered lexicographically.\n\
    \  Thus, the longest string must be the last one in the input table. We iterate\
    \ until the end, so\n  we can return the first longest string in case there are\
    \ multiple strings of the same length.\n  ]]--\n  for _, str in ipairs(strings)\
    \ do\n    longest = str\n  end\n  return longest\nend", "  assert(type(strings)\
    \ == 'table')\n  if #strings == 0 then\n    return nil\n  end\n  local longest_string\
    \ = strings[1]\n  for i, string in ipairs(strings) do\n    if string:len() > longest_string:len()\
    \ then\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "    local longest_string = nil\n    local longest_length = 0\n    for _,\
    \ string in ipairs(strings) do\n        local length = utf8.len(string)\n    \
    \    if length > longest_length then\n            longest_length = length\n  \
    \          longest_string = string\n        end\n    end\n    return longest_string\n\
    end", "    local max = 0\n    local longest = nil\n    for _,s in ipairs(strings)\
    \ do\n        if #s > max then\n            max = #s\n            longest = s\n\
    \        end\n    end\n    return longest\nend", "  if #strings == 0 then\n  \
    \  return nil\n  end\n  local longest_string = strings[1]\n  for i = 2, #strings\
    \ do\n    if #strings[i] > #longest_string then\n      longest_string = strings[i]\n\
    \    end\n  end\n  return longest_string\nend", "  local m = 0\n  local result\
    \ = nil\n  for _, s in ipairs(strings) do\n    if #s > m then\n      m = #s\n\
    \      result = s\n    end\n  end\n  return result\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest_string = strings[1]\n  for i =\
    \ 2, #strings do\n    if #strings[i] > #longest_string then\n      longest_string\
    \ = strings[i]\n    end\n  end\n  return longest_string\nend", "    local longest_string\n\
    \    local longest_string_length = 0\n    for i, s in ipairs(strings) do\n   \
    \     if s:len() > longest_string_length then\n            longest_string = s\n\
    \            longest_string_length = s:len()\n        end\n    end\n    return\
    \ longest_string\nend", "    local result = nil\n    local maxLen = 0\n    for\
    \ _, s in ipairs(strings) do\n        if string.len(s) > maxLen then\n       \
    \     result = s\n            maxLen = string.len(s)\n        end\n    end\n \
    \   return result\nend", "  local longest = nil\n  for _, s in ipairs(strings)\
    \ do\n    if longest == nil or #s > #longest then\n      longest = s\n    end\n\
    \  end\n  return longest\nend", "    if #strings == 0 then\n        return None\n\
    \    end\n    local l = strings[1]\n    for i, e in ipairs(strings) do\n     \
    \   if #e > #l then\n            l = e\n        end\n    end\n    return l\nend",
  "  local longest_string = nil\n  local max_length = 0\n  for _, str in ipairs(strings)\
    \ do\n    if #str > max_length then\n      max_length = #str\n      longest_string\
    \ = str\n    end\n  end\n  return longest_string\nend", "    if strings == nil\
    \ or #strings == 0 then\n        return nil\n    end\n    local longest = strings[1]\n\
    \    for _, str in ipairs(strings) do\n        if #str > #longest then\n     \
    \       longest = str\n        end\n    end\n    return longest\nend", "    if\
    \ #strings == 0 then\n        return nil\n    end\n    local longest_idx = 1\n\
    \    for i = 2, #strings do\n        if #strings[i] > #strings[longest_idx] then\n\
    \            longest_idx = i\n        end\n    end\n    return strings[longest_idx]\n\
    end", "    if #strings == 0 then\n        return nil\n    end\n    local longest\
    \ = strings[1]\n    for _, word in ipairs(strings) do\n        if #word > #longest\
    \ then\n            longest = word\n        end\n    end\n    return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local max = strings[1]\n\
    \  for _, s in ipairs(strings) do\n    if #s > #max then\n      max = s\n    end\n\
    \  end\n  return max\nend", "    if not strings or #strings == 0 then\n      \
    \  return nil\n    end\n    local ret = strings[1]\n    for _, s in ipairs(strings)\
    \ do\n        if #s > #ret then\n            ret = s\n        end\n    end\n \
    \   return ret\nend", "    local max = {}\n    for _, v in ipairs(strings) do\n\
    \        if #v > #max then\n            max = v\n        end\n    end\n    return\
    \ max\nend", "    local longest_string = nil\n    local longest_length = 0\n \
    \   for _, s in ipairs(strings) do\n        if s:len() > longest_length then\n\
    \            longest_string = s\n            longest_length = s:len()\n      \
    \  end\n    end\n    return longest_string\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
