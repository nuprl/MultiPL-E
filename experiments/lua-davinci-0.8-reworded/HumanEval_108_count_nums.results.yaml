name: HumanEval_108_count_nums
language: lua
results:
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ nums = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    for d in tostring(math.abs(n)):gmatch(\"\
    %d\") do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n      nums\
    \ = nums + 1\n    end\n  end\n  return nums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxwrkxsa.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmppxwrkxsa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for _, v in ipairs(arr) do\n        local sum_of_digits =\
    \ sum_of_signed_digits(v)\n        if sum_of_digits > 0 then\n            sum\
    \ = sum + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5tw4er_.lua:14:\
    \ attempt to call a nil value (global 'sum_of_signed_digits')\nstack traceback:\n\
    \t/tmp/tmpd5tw4er_.lua:14: in local 'candidate'\n\t/tmp/tmpd5tw4er_.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local num = arr[i]\n\
    \    while num ~= 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9dbml3vq.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp9dbml3vq.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9dbml3vq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local total = 0\n    for i, v in ipairs(arr) do\n        if v ~= 0 then\n  \
    \          local sum = 0\n            local a = math.abs(v)\n            while\
    \ a > 0 do\n                sum = sum + (a % 10)\n                a = math.floor(a\
    \ / 10)\n            end\n            if sum > 0 then\n                total =\
    \ total + 1\n            end\n        end\n    end\n    return total\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop2juvsh.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpop2juvsh.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if signed_digits_sum(arr[i]) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyowwe0v.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmpjyowwe0v.lua:14: in local 'candidate'\n\t/tmp/tmpjyowwe0v.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for _, v in ipairs(arr) do\n    local dsum = 0\n    for d in string.gmatch(tostring(v),\
    \ '.') do\n      dsum = dsum + tonumber(d)\n    end\n    if dsum > 0 then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoamvqr7w.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpoamvqr7w.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpoamvqr7w.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        if\
    \ num == 0 then\n            sum = sum + 1\n        else\n            num = math.abs(num)\n\
    \            while num > 0 do\n                sum = sum + num % 10\n        \
    \        num = math.floor(num / 10)\n            end\n        end\n    end\n \
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f6yhmui.lua:32:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp0f6yhmui.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpb6sez8.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpjpb6sez8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor i = 1, #arr do\n\t\tlocal number = arr[i]\n\t\tlocal sum =\
    \ 0\n\t\tif number < 0 then\n\t\t\tsum = sum + number\n\t\t\tnumber = -number\n\
    \t\tend\n\t\twhile number > 0 do\n\t\t\tsum = sum + number % 10\n\t\t\tnumber\
    \ = math.floor(number / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwsq_0gl.lua:39:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpiwsq_0gl.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, i in ipairs(arr) do\n        if math.abs(i) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hlpgt95.lua:25:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3hlpgt95.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local counter = 0\n    for i = 1, #arr do\n        local num = math.abs(arr[i])\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hahtdpc.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp0hahtdpc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppccddsww.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppccddsww.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp063wqw56.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp063wqw56.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, val in ipairs(arr) do\n    local num = math.abs(val)\n \
    \   local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num\
    \ = math.floor(num / 10)\n    end\n    if sum > 0 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkih57_cy.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpkih57_cy.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local result = 0\n    for _, num in ipairs(arr) do\n        local abs = math.abs(num)\n\
    \        local sum = 0\n        while abs > 0 do\n            sum = sum + (abs\
    \ % 10)\n            abs = abs // 10\n        end\n        if sum > 0 then\n \
    \           result = result + 1\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya4ayb51.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpya4ayb51.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor _, n in ipairs(arr) do\n\t\tlocal sum = 0\n\t\tfor d in n:gmatch('-?%d')\
    \ do\n\t\t\tsum = sum + tonumber(d)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavbcx9ka.lua:15:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpavbcx9ka.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpavbcx9ka.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ function sum_digit(n)\n    local n = math.abs(n)\n    local sum = 0\n    while\
    \ n > 0 do\n      sum = sum + (n % 10)\n      n = math.floor(n / 10)\n    end\n\
    \    return sum\n  end\n  local count = 0\n  for i = 1, #arr do\n    if sum_digit(arr[i])\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg2l9xmn.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmptg2l9xmn.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- YOUR CODE HERE\n    local count = 0\n    for _, v in ipairs(arr) do\n   \
    \     local n = v < 0 and -v or v\n        local sum = 0\n        while n > 0\
    \ do\n            sum = sum + n % 10\n            n = math.floor(n / 10)\n   \
    \     end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wctccjx.lua:32:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp4wctccjx.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for k, v in pairs(arr) do\n    count = count + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllx0do48.lua:23:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpllx0do48.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
