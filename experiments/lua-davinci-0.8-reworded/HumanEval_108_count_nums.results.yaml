language: lua
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ nums = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    for d in tostring(math.abs(n)):gmatch(\"\
    %d\") do\n      sum = sum + tonumber(d)\n    end\n    if sum > 0 then\n      nums\
    \ = nums + 1\n    end\n  end\n  return nums\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxwrkxsa.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmppxwrkxsa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for _, v in ipairs(arr) do\n        local sum_of_digits =\
    \ sum_of_signed_digits(v)\n        if sum_of_digits > 0 then\n            sum\
    \ = sum + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5tw4er_.lua:14:\
    \ attempt to call a nil value (global 'sum_of_signed_digits')\nstack traceback:\n\
    \t/tmp/tmpd5tw4er_.lua:14: in local 'candidate'\n\t/tmp/tmpd5tw4er_.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local num = arr[i]\n\
    \    while num ~= 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9dbml3vq.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp9dbml3vq.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp9dbml3vq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local total = 0\n    for i, v in ipairs(arr) do\n        if v ~= 0 then\n  \
    \          local sum = 0\n            local a = math.abs(v)\n            while\
    \ a > 0 do\n                sum = sum + (a % 10)\n                a = math.floor(a\
    \ / 10)\n            end\n            if sum > 0 then\n                total =\
    \ total + 1\n            end\n        end\n    end\n    return total\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpop2juvsh.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpop2juvsh.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if signed_digits_sum(arr[i]) > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjyowwe0v.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmpjyowwe0v.lua:14: in local 'candidate'\n\t/tmp/tmpjyowwe0v.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ n = 0\n  for _, v in ipairs(arr) do\n    local dsum = 0\n    for d in string.gmatch(tostring(v),\
    \ '.') do\n      dsum = dsum + tonumber(d)\n    end\n    if dsum > 0 then\n  \
    \    n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoamvqr7w.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpoamvqr7w.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpoamvqr7w.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        if\
    \ num == 0 then\n            sum = sum + 1\n        else\n            num = math.abs(num)\n\
    \            while num > 0 do\n                sum = sum + num % 10\n        \
    \        num = math.floor(num / 10)\n            end\n        end\n    end\n \
    \   return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f6yhmui.lua:32:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmp0f6yhmui.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpb6sez8.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpjpb6sez8.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor i = 1, #arr do\n\t\tlocal number = arr[i]\n\t\tlocal sum =\
    \ 0\n\t\tif number < 0 then\n\t\t\tsum = sum + number\n\t\t\tnumber = -number\n\
    \t\tend\n\t\twhile number > 0 do\n\t\t\tsum = sum + number % 10\n\t\t\tnumber\
    \ = math.floor(number / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwsq_0gl.lua:39:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpiwsq_0gl.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, i in ipairs(arr) do\n        if math.abs(i) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hlpgt95.lua:25:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3hlpgt95.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local counter = 0\n    for i = 1, #arr do\n        local num = math.abs(arr[i])\n\
    \        local sum = 0\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0hahtdpc.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp0hahtdpc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppccddsww.lua:17:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppccddsww.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp063wqw56.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp063wqw56.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, val in ipairs(arr) do\n    local num = math.abs(val)\n \
    \   local sum = 0\n    while num > 0 do\n      sum = sum + num % 10\n      num\
    \ = math.floor(num / 10)\n    end\n    if sum > 0 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkih57_cy.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpkih57_cy.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local result = 0\n    for _, num in ipairs(arr) do\n        local abs = math.abs(num)\n\
    \        local sum = 0\n        while abs > 0 do\n            sum = sum + (abs\
    \ % 10)\n            abs = abs // 10\n        end\n        if sum > 0 then\n \
    \           result = result + 1\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya4ayb51.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpya4ayb51.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor _, n in ipairs(arr) do\n\t\tlocal sum = 0\n\t\tfor d in n:gmatch('-?%d')\
    \ do\n\t\t\tsum = sum + tonumber(d)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpavbcx9ka.lua:15:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpavbcx9ka.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpavbcx9ka.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ function sum_digit(n)\n    local n = math.abs(n)\n    local sum = 0\n    while\
    \ n > 0 do\n      sum = sum + (n % 10)\n      n = math.floor(n / 10)\n    end\n\
    \    return sum\n  end\n  local count = 0\n  for i = 1, #arr do\n    if sum_digit(arr[i])\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptg2l9xmn.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmptg2l9xmn.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- YOUR CODE HERE\n    local count = 0\n    for _, v in ipairs(arr) do\n   \
    \     local n = v < 0 and -v or v\n        local sum = 0\n        while n > 0\
    \ do\n            sum = sum + n % 10\n            n = math.floor(n / 10)\n   \
    \     end\n        if sum > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wctccjx.lua:32:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp4wctccjx.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for k, v in pairs(arr) do\n    count = count + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllx0do48.lua:23:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpllx0do48.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\treturn\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbozotpj.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpmbozotpj.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor _, v in ipairs(arr) do\n\t\t-- TODO: implement\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41nkuchc.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp41nkuchc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for _, num in ipairs(arr) do\n        local signed_digits\
    \ = utils.signed_digits(num)\n        local sum = 0\n        for _, digit in ipairs(signed_digits)\
    \ do\n            sum = sum + digit\n        end\n        if sum > 0 then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzvv9h_t2.lua:14:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpzvv9h_t2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpzvv9h_t2.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local res = 0\n    for _, n in ipairs(arr) do\n        if sum_digits(n) > 0\
    \ then\n            res = res + 1\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmdxta3xu.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpmdxta3xu.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpmdxta3xu.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) > 0\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa2uxbpjt.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpa2uxbpjt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpa2uxbpjt.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local digits = v < 0 and {v % 10}\
    \ or {}\n    v = math.abs(v)\n    while v > 0 do\n      table.insert(digits, v\
    \ % 10)\n      v = math.floor(v / 10)\n    end\n    local sum = 0\n    for _,\
    \ d in ipairs(digits) do\n      sum = sum + d\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq75_hh3.lua:35:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpoq75_hh3.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        if signed_digits_sum(arr[i])\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjaixmwl.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmpkjaixmwl.lua:14: in local 'candidate'\n\t/tmp/tmpkjaixmwl.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for _, num in ipairs(arr) do\n        local curr = num\n\
    \        local sum_digits = 0\n        while curr ~= 0 do\n            sum_digits\
    \ = sum_digits + (curr % 10)\n            curr = math.floor(curr / 10)\n     \
    \   end\n        if sum_digits > 0 then\n            sum = sum + 1\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004014
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     while v ~= 0 do\n            local digit = v % 10\n            sum = sum\
    \ + digit\n            v = (v - digit) / 10\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004014
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\t--\
    \ compute the sum of digits for all elements in the table\n\treturn fold(\n\t\t\
    arr,\n\t\t0,\n\t\tfunction(acc, n)\n\t\t\treturn\n\t\t\t\t-- if n is negative,\
    \ then the first signed digit is negative\n\t\t\t\tif n < 0 then\n\t\t\t\t\t--\
    \ get the sign of n\n\t\t\t\t\tlocal sign = -1\n\t\t\t\t\t-- remove the sign of\
    \ n\n\t\t\t\t\tn = -n\n\t\t\t\tend\n\t\t\t\t-- add the sum of digits\n\t\t\t\t\
    + acc\n\t\t\t\t+ sign * fold(\n\t\t\t\t\t-- digits of n\n\t\t\t\t\tto_digits(n),\n\
    \t\t\t\t\t0,\n\t\t\t\t\tfunction(acc, d)\n\t\t\t\t\t\treturn acc + d\n\t\t\t\t\
    \tend\n\t\t\t\t)\n\t\tend\n\t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ym05hq9.lua:19: unexpected symbol near ''if''

    '
  stdout: ''
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) > 0\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa2uxbpjt.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpa2uxbpjt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpa2uxbpjt.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, n in ipairs(arr) do\n        if sum_digits(n) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_gpawol0.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp_gpawol0.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_gpawol0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    while num\
    \ ~= 0 do\n      sum = sum + math.abs(num % 10)\n      num = math.floor(num /\
    \ 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004014
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ #### Your code starts here ####\n  local sum = 0\n  for _,v in pairs(arr) do\n\
    \    if v < 0 then\n      sum = sum + sum_digits(-v)\n    else\n      sum = sum\
    \ + sum_digits(v)\n    end\n  end\n  return sum\n  -- #### Your code ends here\
    \ ####\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu9nbxivc.lua:16:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpu9nbxivc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpu9nbxivc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, x in ipairs(arr) do\n    local sum = 0\n    local num =\
    \ x\n    while num ~= 0 do\n      sum = sum + math.abs(num % 10)\n      num =\
    \ math.floor(num / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004014
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, i in ipairs(arr) do\n        if (i < 0) then\n \
    \           i = -i\n        end\n        local sum = 0\n        while (i > 0)\
    \ do\n            sum = sum + i % 10\n            i = math.floor(i / 10)\n   \
    \     end\n        if (sum > 0) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjnw11y51.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpjnw11y51.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local c = 0\n    for _, v in ipairs(arr) do\n        local s = 0\n        if\
    \ v < 0 then v = -v end\n        while v > 0 do\n            s = s + v % 10\n\
    \            v = math.floor(v / 10)\n        end\n        if s > 0 then c = c\
    \ + 1 end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpknn2dwun.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpknn2dwun.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    local sum = 0\n \
    \   while n ~= 0 do\n      sum = sum + n % 10\n      n = math.floor(n / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004014
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ YOUR CODE HERE\n  local counter = 0\n  for i = 1, #arr do\n    if arr[i] > 0\
    \ then\n      sum = 0\n      for digit in tostring(arr[i]):gmatch(\"%d\") do\n\
    \        sum = sum + tonumber(digit)\n      end\n      if sum > 0 then\n     \
    \   counter = counter + 1\n      end\n    else\n      sum = 0\n      for digit\
    \ in tostring(arr[i]):gmatch(\"%d\") do\n        sum = sum + tonumber(digit)\n\
    \      end\n      if sum < 0 then\n        counter = counter + 1\n      end\n\
    \    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkipd7nwl.lua:44:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpkipd7nwl.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  return\
    \ #arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjau0h6s.lua:19:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpkjau0h6s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, number in ipairs(arr) do\n        local sum = 0\n\
    \        local abs_number = math.abs(number)\n        while abs_number > 0 do\n\
    \            sum = sum + abs_number % 10\n            abs_number = math.floor(abs_number\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl6zrw6y.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpcl6zrw6y.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- CODE HERE --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqteeot_r.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpqteeot_r.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for _, d in\
    \ ipairs(split_digits(v)) do\n      sum = sum + d\n    end\n    if sum > 0 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6mdva3z.lua:15:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpn6mdva3z.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpn6mdva3z.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgt8vfwp4.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpgt8vfwp4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for _, v in ipairs(arr) do\n        local v = tostring(v)\n\
    \        if v:sub(1, 1) == '-' then\n            v = v:sub(2)\n        end\n \
    \       local s = 0\n        for i = 1, #v do\n            s = s + tonumber(v:sub(i,\
    \ i))\n        end\n        if s > 0 then\n            sum = sum + 1\n       \
    \ end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumqk5hdd.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpumqk5hdd.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cmdjmz7.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp0cmdjmz7.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i, v in ipairs(arr) do\n        -- TODO: write your\
    \ code here\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9a0fz11.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpp9a0fz11.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ cnt = 0\n  for _, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n     \
    \ cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpatu3ynbv.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpatu3ynbv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpatu3ynbv.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  return\
    \ #l.filter(function(x)\n    return l.sum(l.map(math.abs, l.digits(x))) > 0\n\
    \  end, arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0h48cmc.lua:12:\
    \ attempt to index a nil value (global 'l')\nstack traceback:\n\t/tmp/tmpq0h48cmc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpq0h48cmc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    local a = math.abs(n)\n\
    \    while a > 0 do\n      sum = sum + a % 10\n      a = math.floor(a / 10)\n\
    \    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwysipo_9.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpwysipo_9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    for s in tostring(math.abs(v)):gmatch('%d')\
    \ do\n      sum = sum + tonumber(s)\n    end\n    if sum > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwg320c6.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmppwg320c6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for _, num in ipairs(arr) do\n    sum = sum + sum_of_digits(num)\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg3zaaa4g.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpg3zaaa4g.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpg3zaaa4g.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    count = count + is_pos(v)\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjyvf7k1.lua:14:\
    \ attempt to call a nil value (global 'is_pos')\nstack traceback:\n\t/tmp/tmpxjyvf7k1.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpxjyvf7k1.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkp_2_694.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpkp_2_694.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkp_2_694.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ result = 0\n  for _, e in ipairs(arr) do\n    if sum_digits(e) > 0 then\n  \
    \    result = result + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9fomuht.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmph9fomuht.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmph9fomuht.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local function sum_digits(num)\n        local sum = 0\n        for c in tostring(num):gmatch('%d')\
    \ do\n            sum = sum + tonumber(c)\n        end\n        return sum\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvu87gyjh.lua:33: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then\n            num = -num\n        end\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdwz5px8.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpjdwz5px8.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local function negative(x)\n        return x > 0 and x or -x\n    end\n    local\
    \ function digits_sum(x)\n        local sum = 0\n        while x ~= 0 do\n   \
    \         sum = sum + (x % 10)\n            x = math.floor(x / 10)\n        end\n\
    \        return sum\n    end\n    local function check(x)\n        return digits_sum(negative(x))\
    \ > 0\n    end\n    local count = 0\n    for _, x in ipairs(arr) do\n        if\
    \ check(x) then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fizwvjw.lua:39:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3fizwvjw.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ YOUR CODE HERE\n  local function sign_digits(num)\n    local t = {}\n    local\
    \ i = 0\n    if num < 0 then\n      table.insert(t, num)\n      num = -num\n \
    \   end\n    while num > 0 do\n      table.insert(t, num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    return t\n  end\n  local count = 0\n  for _, num in ipairs(arr)\
    \ do\n    local sum = 0\n    for _, s_digit in ipairs(sign_digits(num)) do\n \
    \     sum = sum + s_digit\n    end\n    if sum > 0 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuq_gyun.lua:47:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpvuq_gyun.lua:47: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qliscg8.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp1qliscg8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  return\
    \ count(arr, function(i)\n    local sum = 0\n    for _,v in ipairs(signed_digits(i))\
    \ do\n      sum = sum + v\n    end\n    return sum > 0\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigm2566h.lua:12:\
    \ attempt to call a nil value (global 'count')\nstack traceback:\n\t/tmp/tmpigm2566h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpigm2566h.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004009
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        if is_positive(math.abs(v))\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ya5_acf.lua:14:\
    \ attempt to call a nil value (global 'is_positive')\nstack traceback:\n\t/tmp/tmp2ya5_acf.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp2ya5_acf.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local nums = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            nums = nums + 1\n        end\n    end\n    return nums\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmydsyvj.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmplmydsyvj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmplmydsyvj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        if sign_digits_sum(arr[i])\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpppowr8xv.lua:14:\
    \ attempt to call a nil value (global 'sign_digits_sum')\nstack traceback:\n\t\
    /tmp/tmpppowr8xv.lua:14: in local 'candidate'\n\t/tmp/tmpppowr8xv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ cnt = 0\n  for i = 1, #arr do\n    local sum = 0\n    local num = arr[i]\n \
    \   if num < 0 then\n      num = -num\n      sum = -1\n    end\n    while num\
    \ > 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num / 10)\n   \
    \ end\n    if sum > 0 then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2sbaizw5.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2sbaizw5.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ TODO: Write your code here\n  local count = 0\n  for k, v in pairs(arr) do\n\
    \    if v > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyekacy_.lua:30:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpbyekacy_.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    -- YOUR CODE HERE\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7_ht70g.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpl7_ht70g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i,v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpptaog4dv.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpptaog4dv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpptaog4dv.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local counter = 0\n    for i, j in pairs(arr) do\n        local sum = 0\n  \
    \      if (j < 0) then\n            j = j * -1\n            sum = sum + 1\n  \
    \      end\n        while (j > 0) do\n            sum = sum + j % 10\n       \
    \     j = math.floor(j / 10)\n        end\n        if (sum > 0) then\n       \
    \     counter = counter + 1\n        end\n    end\n    return counter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbgrpowa.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmprbgrpowa.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for _, num in ipairs(arr) do\n        local abs_num = abs(num)\n\
    \        local digits_sum = 0\n        for _, digit in tostring(abs_num):gmatch(\"\
    %d\") do\n            digits_sum = digits_sum + tonumber(digit)\n        end\n\
    \        if (num > 0 and digits_sum > 0) or (num < 0 and digits_sum < 0) then\n\
    \            sum = sum + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvdv9xg3.lua:14:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmprvdv9xg3.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmprvdv9xg3.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    -- Do NOT call math.abs on num\
    \ here - negative numbers still need to\n    -- be handled.\n    local sum = 0\n\
    \    local val = num\n    while val ~= 0 do\n      sum = sum + (val % 10)\n  \
    \    val = math.floor(val / 10)\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for i, v in ipairs(arr) do\n        local sum = 0\n     \
    \   if v < 0 then\n            sum = 1\n        end\n        while v ~= 0 do\n\
    \            sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n\
    \        if sum > 0 then\n            cnt = cnt + 1\n        end\n    end\n  \
    \  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d3m1uv_.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp5d3m1uv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n      \
    \  local sum = 0\n        if num < 0 then\n            num = -num\n          \
    \  sum = -1\n        end\n        while num > 0 do\n            sum = sum + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv9dspft.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqv9dspft.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then\n            num = -num\n        end\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ math.floor(num / 10)\n        end\n        if sum > 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nassert(count_nums({})\
    \ == 0)\nassert(count_nums({-1, 11, -11}) == 1)\nassert(count_nums({1, 1, 2})\
    \ == 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp28r613u3.lua:30: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp28r613u3.lua:30: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ your implementation here\n  if #arr == 0 then return 0 end\n  local sum = 0\n\
    \  for _, num in ipairs(arr) do\n    local nums = {}\n    num = math.abs(num)\n\
    \    while num > 0 do\n      table.insert(nums, num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    local tmp = 0\n    for _, n in ipairs(nums) do\n      tmp\
    \ = tmp + n\n    end\n    if tmp > 0 then sum = sum + 1 end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4j93ipit.lua:35:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp4j93ipit.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgvpyt1o.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpsgvpyt1o.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ total = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    local n = v\n\
    \    if n < 0 then\n      n = n * -1\n      sum = sum - n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    while n > 0 do\n      sum = sum + n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    if sum > 0 then\n      total = total + 1\n    end\n  end\n\
    \  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54gaax_d.lua:40:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp54gaax_d.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i, num in ipairs(arr) do\n        local sum = 0\n \
    \       local n = math.abs(num)\n        while n > 0 do\n            sum = sum\
    \ + (n % 10)\n            n = n // 10\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1th1nmn.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpl1th1nmn.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    local sum = 0\n    if v < 0 then\n\
    \      v = -v\n    end\n    for n in tostring(v):gmatch(\"%d\") do\n      sum\
    \ = sum + tonumber(n)\n    end\n    if sum > 0 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38pxu8u1.lua:32:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp38pxu8u1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,v in ipairs(arr) do\n        local new_v = string.format(\"\
    %d\", math.abs(v))\n        local sum = 0\n        for i = 1, string.len(new_v)\
    \ do\n            sum = sum + tonumber(string.sub(new_v, i, i))\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o1unacz.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp7o1unacz.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, num in ipairs(arr) do\n    local sum = 0\n    if num < 0\
    \ then\n      sum = sum + 1\n      num = -num\n    end\n    while num > 0 do\n\
    \      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    if\
    \ sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4grffv7.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpv4grffv7.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    if sum_digits(arr[i]) > 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubuarn2x.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpubuarn2x.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpubuarn2x.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,num in ipairs(arr) do\n        if num > 0 then\n\
    \            if sum_digits(num) > 0 then\n                count = count + 1\n\
    \            end\n        else\n            if -sum_digits(num) > 0 then\n   \
    \             count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoaj4kl1h.lua:19:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpoaj4kl1h.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpoaj4kl1h.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local function sum_digits(num)\n        local s = 0\n        for c in (tostring(num)):gmatch('%d')\
    \ do\n            s = s + tonumber(c)\n        end\n        return s\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpelvv3w07.lua:33: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    if v ~= 0 then\n      local sum\
    \ = 0\n      local neg = false\n      local n = v\n      if n < 0 then\n     \
    \   neg = true\n        n = -n\n      end\n      while n > 0 do\n        sum =\
    \ sum + n % 10\n        n = n // 10\n      end\n      if neg then\n        sum\
    \ = -sum\n      end\n      if sum > 0 then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm79119_w.lua:45:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpm79119_w.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d3m1uv_.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp5d3m1uv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     v = math.abs(v)\n        while v > 0 do\n            sum = sum + v % 10\n\
    \            v = math.floor(v / 10)\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lyj1cww.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp9lyj1cww.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, x in ipairs(arr) do\n    if not (sum_digits(x) == 0) then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptsdxrwod.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmptsdxrwod.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptsdxrwod.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ cnt = 0\n  for _, x in ipairs(arr) do\n    if sum_digits(x) > 0 then\n     \
    \ cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvx7zs7ow.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpvx7zs7ow.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpvx7zs7ow.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return list.foldl(function(acc, num)\n        if num == 0 then\n           \
    \ return acc\n        end\n        local sum = 0\n        for _, signed_digit\
    \ in string.gmatch(num, \"(%-?%d)\") do\n            sum = sum + tonumber(signed_digit)\n\
    \        end\n        if sum == 0 then\n            return acc\n        end\n\
    \        return acc + 1\n    end, 0, arr)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchj1o_bm.lua:12:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmpchj1o_bm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpchj1o_bm.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] > 0 then\n\t\t\tif (math.floor(arr[i]\
    \ / 10) > 0) or ((arr[i] % 10) > 0) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\
    \t\telse\n\t\t\tif (math.floor(arr[i] / 10) < 0) or ((arr[i] % 10) < 0) then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr52g9yzr.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpr52g9yzr.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local function sum_nums(arr)\n        local sum = 0\n        for i = 1, #arr\
    \ do\n            sum = sum + math.abs(arr[i])\n        end\n        return sum\n\
    \    end\n    local counter = 0\n    for i = 1, #arr do\n        local num = arr[i]\n\
    \        local sum = 0\n        while num ~= 0 do\n            sum = sum + math.abs(num\
    \ % 10)\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n \
    \       local n = num\n        while n ~= 0 do\n            local d = n % 10\n\
    \            sum = sum + d\n            n = (n - d) / 10\n        end\n      \
    \  if sum > 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor i = 1, #arr do\n\t\tif sum_digits(arr[i]) > 0 then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpunqpjpn0.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpunqpjpn0.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpunqpjpn0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     if v < 0 then\n            v = -v\n        end\n        while v > 0 do\n\
    \            sum = sum + v % 10\n            v = math.floor(v / 10)\n        end\n\
    \        if sum > 0 then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7488uns.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpg7488uns.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1fb9a1g.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpj1fb9a1g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n\
    \    while num ~= 0 do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n      \
    \  local sum = 0\n        if num < 0 then\n            num = -num\n          \
    \  sum = -1\n        end\n        while num > 0 do\n            sum = sum + (num\
    \ % 10)\n            num = math.floor(num / 10)\n        end\n        if sum >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvktgy6qc.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvktgy6qc.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local n = math.abs(v)\n\
    \        local sum = 0\n        while n > 0 do\n            sum = sum + n % 10\n\
    \            n = math.floor(n / 10)\n        end\n        if sum > 0 then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex6lm_bc.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpex6lm_bc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgvpyt1o.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpsgvpyt1o.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n      \
    \  if num < 0 then\n            num = -num\n        end\n        local sum = 0\n\
    \        while num > 0 do\n            sum = sum + num % 10\n            num =\
    \ num // 10\n        end\n        if sum > 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3e_n3unc.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp3e_n3unc.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local counter = 0\n    for _,v in pairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            counter = counter + 1\n        end\n    end\n    return\
    \ counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfho2itoc.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpfho2itoc.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpfho2itoc.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  count\
    \ = 0\n  for _, n in ipairs(arr) do\n    -- TODO: code goes here\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkaq8e0hy.lua:24:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpkaq8e0hy.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local sum = 0\n   \
    \     local t = v\n        if v < 0 then\n            t = -v\n        end\n  \
    \      while t > 0 do\n            sum = sum + (t % 10)\n            t = t //\
    \ 10\n        end\n        if sum > 0 then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstnm1wnt.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpstnm1wnt.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      local m =\
    \ v\n      local sum = 0\n      while m > 0 do\n        sum = sum + (m % 10)\n\
    \        m = math.floor(m / 10)\n      end\n      if sum > 0 then\n        count\
    \ = count + 1\n      end\n    else\n      local m = v\n      local sum = 0\n \
    \     while m < 0 do\n        sum = sum + ((m % 10) * -1)\n        m = math.floor(m\
    \ / 10)\n      end\n      if sum > 0 then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ INSERT CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkq0fhyc.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpfkq0fhyc.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ Implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_0flw58.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpp_0flw58.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor _, num in ipairs(arr) do\n\t\tif sum_of_digits(num) > 0 then\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0w2b_3g2.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp0w2b_3g2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0w2b_3g2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 0
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local total = 0\n    for i,v in ipairs(arr) do\n        local sum = 0\n    \
    \    for c in tostring(v):gmatch(\"[-]?%d\") do\n            sum = sum + tonumber(c)\n\
    \        end\n        if sum > 0 then\n            total = total + 1\n       \
    \ end\n    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ TODO: your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vvkt0q4.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp9vvkt0q4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n \
    \       for d in tostring(math.abs(num)):gmatch('%d') do\n            sum = sum\
    \ + tonumber(d)\n        end\n        if sum > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpju7ci3tq.lua:29:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpju7ci3tq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i, v in ipairs(arr) do\n    if (sum_digits(v) > 0) then\n \
    \     count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsh13ptac.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpsh13ptac.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsh13ptac.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for k,v in pairs(arr) do\n        if sum_digits(v) > 0 then\n\
    \            sum = sum + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbsh8507d.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpbsh8507d.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpbsh8507d.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ result = 0\n  for _, v in ipairs(arr) do\n    if v < 0 then\n      v = -v\n\
    \    end\n    local sum = 0\n    while v > 0 do\n      sum = sum + v % 10\n  \
    \    v = math.floor(v / 10)\n    end\n    if sum > 0 then\n      result = result\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw33o0ye2.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpw33o0ye2.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for k,v in pairs(arr) do\n        local sum = 0\n     \
    \   if v < 0 then\n            v = -v\n        end\n        while v > 0 do\n \
    \           local q, r = math.floor(v / 10), v % 10\n            sum = sum + r\n\
    \            v = q\n        end\n        if sum > 0 then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60ukoz7_.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp60ukoz7_.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i, v in ipairs(arr) do\n        if v > 0 then\n   \
    \         local digits = split_digits(v)\n            local sum = 0\n        \
    \    for j, d in ipairs(digits) do\n                sum = sum + d\n          \
    \  end\n            if sum > 0 then\n                count = count + 1\n     \
    \       end\n        else\n            local digits = split_digits(v * -1)\n \
    \           local sum = 0\n            for j, d in ipairs(digits) do\n       \
    \         sum = sum + d\n            end\n            if sum > 0 then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5qgv5qkp.lua:24:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmp5qgv5qkp.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp5qgv5qkp.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for k,v in pairs(arr) do\n        if sum_digits(v) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_154cau7.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp_154cau7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_154cau7.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local result = 0\n    for i = 1, #arr do\n        local digits = {}\n      \
    \  local num = math.abs(arr[i])\n        repeat\n            local digit = num\
    \ % 10\n            digits[#digits + 1] = digit\n            num = math.floor(num\
    \ / 10)\n        until num == 0\n        local sum = 0\n        for i = 1, #digits\
    \ do\n            sum = sum + digits[i]\n        end\n        if sum > 0 then\n\
    \            result = result + 1\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7wlksa4.lua:36:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpd7wlksa4.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ res = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp511hptv4.lua:27: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for i = 1, #arr do\n        local x = math.abs(arr[i])\n\
    \        local sum = 0\n        while x > 0 do\n            sum = sum + x % 10\n\
    \            x = math.floor(x / 10)\n        end\n        if sum > 0 then\n  \
    \          cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwojmu69h.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpwojmu69h.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ function sum_digits(num)\n    -- only positive numbers, if the number is negative\
    \ then first signed\n    -- digit will be negative too (e.g. 123 has signed digits\
    \ 1, 2, and 3)\n    num = math.abs(num)\n    local sum = 0\n    while num > 0\
    \ do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n\
    \    return sum\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx29j5_se.lua:37: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ cnt = 0\n  for _, v in ipairs(arr) do\n    if count_digits(v) > 0 then\n   \
    \   cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ymz_cua.lua:14:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmp2ymz_cua.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp2ymz_cua.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d3m1uv_.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp5d3m1uv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for i = 1, #arr do\n        if signed_digits_sum(arr[i])\
    \ > 0 then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj8kfkqex.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmpj8kfkqex.lua:14: in local 'candidate'\n\t/tmp/tmpj8kfkqex.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ cnt = 0\n\tfor _, n in ipairs(arr) do\n\t\tif signed_digits_sum(n) > 0 then\n\
    \t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\treturn cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_mibpht.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmps_mibpht.lua:14: in local 'candidate'\n\t/tmp/tmps_mibpht.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for i = 1, #arr do\n        if signed_digits_sum(arr[i])\
    \ > 0 then\n            sum = sum + 1\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61vtnji5.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmp61vtnji5.lua:14: in local 'candidate'\n\t/tmp/tmp61vtnji5.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ count = 0\n    for _, v in pairs(arr) do\n        -- print(sum_digits(v))\n\
    \        if sum_digits(v) > 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9pgfkgmx.lua:15:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp9pgfkgmx.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9pgfkgmx.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, val in ipairs(arr) do\n    if val < 0 then\n      if val\
    \ % -10 + 1 ~= 0 then\n        count = count + 1\n      end\n    else\n      if\
    \ val % 10 ~= 0 then\n        count = count + 1\n      end\n    end\n  end\n \
    \ return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp62umg0y5.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp62umg0y5.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local function count_nums_helper(arr, acc)\n        if #arr == 0 then\n    \
    \        return acc\n        else\n            local sum_of_digits = table.sum(arr[1]:tonumber():digits())\n\
    \            if sum_of_digits > 0 then\n                return count_nums_helper(arr:slice(2),\
    \ acc + 1)\n            else\n                return count_nums_helper(arr:slice(2),\
    \ acc)\n            end\n        end\n    end\n    return count_nums_helper(arr,\
    \ 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6z2lq5r.lua:16:\
    \ attempt to index a number value (field 'integer index')\nstack traceback:\n\t\
    /tmp/tmpe6z2lq5r.lua:16: in function </tmp/tmpe6z2lq5r.lua:12>\n\t(...tail calls...)\n\
    \t/tmp/tmpe6z2lq5r.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ function sum_digits(num)\n    local result = 0\n    if num < 0 then num = -num\
    \ end\n    while num > 0 do\n      result = result + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    return result\n  end\n  local result = 0\n  for _, num in\
    \ ipairs(arr) do\n    if sum_digits(num) > 0 then\n      result = result + 1\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbydbuerz.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpbydbuerz.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local signed_digits\
    \ = {0,0,0,0,0,0,0,0,0,0}\n    for _ = 1, math.abs(num) do\n      local digit\
    \ = num % 10\n      if num < 0 then\n        digit = -digit\n      end\n     \
    \ signed_digits[digit + 10] = signed_digits[digit + 10] + 1\n      num = math.floor(num\
    \ / 10)\n    end\n    local subset_sum = 0\n    for i = 1, 10 do\n      subset_sum\
    \ = subset_sum + signed_digits[i]\n    end\n    sum = sum + subset_sum\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g3i0vjl.lua:37:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmp7g3i0vjl.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local n = arr[i]\n        local\
    \ sum = 0\n        if n < 0 then\n            sum = -1\n            n = -n\n \
    \       end\n        while n > 0 do\n            sum = sum + n % 10\n        \
    \    n = math.floor(n / 10)\n        end\n        if sum > 0 then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t9ttcco.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3t9ttcco.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  if\
    \ not (type(arr) == \"table\") then return nil end\n  local count = 0\n  for _,\
    \ v in pairs(arr) do\n    if _sum_of_digits(v) > 0 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5yz0jw9.lua:15:\
    \ attempt to call a nil value (global '_sum_of_digits')\nstack traceback:\n\t\
    /tmp/tmpc5yz0jw9.lua:15: in local 'candidate'\n\t/tmp/tmpc5yz0jw9.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return None\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp59fgcc3m.lua:13: ''end'' expected (to close ''function'' at
    line 11) near ''lu''

    '
  stdout: ''
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for i,x in ipairs(arr) do\n        local s = 0\n        if\
    \ x < 0 then\n            s = s - x%10\n            x = x / 10\n        end\n\
    \        while x ~= 0 do\n            s = s + x%10\n            x = x / 10\n \
    \       end\n        if s > 0 then\n            cnt = cnt + 1\n        end\n \
    \   end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurjt_q5n.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpurjt_q5n.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ res = 0\n  for i, v in ipairs(arr) do\n    if v == 0 then\n      res = res +\
    \ 1\n    else\n      local sum = 0\n      if v < 0 then\n        v = -v\n    \
    \    sum = -1\n      end\n      while v > 0 do\n        sum = sum + (v % 10)\n\
    \        v = math.floor(v / 10)\n      end\n      if sum > 0 then\n        res\
    \ = res + 1\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt8gpvlu.lua:38:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpyt8gpvlu.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i,v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n    \
    \  count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpptaog4dv.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpptaog4dv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpptaog4dv.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for _, i in ipairs(arr) do\n        local sum = 0\n     \
    \   local sign = i < 0 and -1 or 1\n        local n = math.abs(i)\n        while\
    \ n > 0 do\n            sum = sum + (n % 10)\n            n = math.floor(n / 10)\n\
    \        end\n        if sign * sum > 0 then\n            cnt = cnt + 1\n    \
    \    end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfgdvjant.lua:36:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpfgdvjant.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, a in ipairs(arr) do\n    if sum_digits(a) > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqirkd4vk.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpqirkd4vk.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqirkd4vk.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor i = 1, #arr do\n\t\t-- \u0418\u0437\u0432\u043B\u0435\u043A\
    \u0430\u0435\u043C \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044E\u044E \u0446\
    \u0438\u0444\u0440\u0443 \u0447\u0438\u0441\u043B\u0430 \u0438 \u0441\u0443\u043C\
    \u043C\u0438\u0440\u0443\u0435\u043C \u0435\u0451 \u0441 \u043F\u0440\u0435\u0434\
    \u044B\u0434\u0443\u0449\u0438\u043C\u0438\n\t\t-- \u0438 \u043F\u043E\u043A\u0430\
    \ \u043F\u043E\u0441\u043B\u0435\u0434\u043D\u044F\u044F \u0446\u0438\u0444\u0440\
    \u0430 \u043D\u0435 \u0440\u0430\u0432\u043D\u0430 \u0447\u0438\u0441\u043B\u0443\
    \ \u043F\u043E\u043B\u043D\u043E\u0441\u0442\u044C\u044E\n\t\tlocal sum = 0\n\t\
    \tlocal num = arr[i]\n\t\twhile num ~= 0 do\n\t\t\tsum = sum + num % 10\n\t\t\t\
    num = math.floor(num / 10)\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ YOUR CODE HERE\n  local count = 0\n  for k, v in pairs(arr) do\n    if v > 0\
    \ then\n      local sum = 0\n      local digits = tostring(v)\n      for i = 1,\
    \ #digits do\n        sum = sum + tonumber(digits:sub(i, i))\n      end\n    \
    \  if sum > 0 then\n        count = count + 1\n      end\n    else\n      if tostring(v):sub(2,\
    \ 2) ~= \"-\" then\n        local sum = 0\n        local digits = tostring(v)\n\
    \        for i = 2, #digits do\n          sum = sum + tonumber(digits:sub(i, i))\n\
    \        end\n        if sum > 0 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyxye98ez.lua:44:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpyxye98ez.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\treturn\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3yj6v9_.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmpc3yj6v9_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local function count_nums_rec(arr, idx, count)\n        if idx > #arr then\n\
    \            return count\n        end\n        if arr[idx] > 0 then\n       \
    \     return count_nums_rec(arr, idx + 1, count + 1)\n        end\n        return\
    \ count_nums_rec(arr, idx + 1, count)\n    end\n    return count_nums_rec(arr,\
    \ 1, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0siu95_.lua:32:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpb0siu95_.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    if sum_digits(v) > 0 then\n   \
    \   count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpov241xmu.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpov241xmu.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpov241xmu.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        if sum_of_digits(num)\
    \ > 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv1t5prr4.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpv1t5prr4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpv1t5prr4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, n in ipairs(arr) do\n    local sum = 0\n    local digit\n\
    \    if n < 0 then\n      digit = -(n % 10)\n      n = -math.floor(n / 10)\n \
    \   else\n      digit = n % 10\n      n = math.floor(n / 10)\n    end\n    sum\
    \ = sum + digit\n    while n ~= 0 do\n      digit = n % 10\n      n = math.floor(n\
    \ / 10)\n      sum = sum + digit\n    end\n    if sum > 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjmn9uj1.lua:44:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpsjmn9uj1.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local total = 0\n    for i,v in ipairs(arr) do\n        if signed_sum(v) > 0\
    \ then\n            total = total + 1\n        end\n    end\n    return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_glz93xx.lua:14:\
    \ attempt to call a nil value (global 'signed_sum')\nstack traceback:\n\t/tmp/tmp_glz93xx.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_glz93xx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local sum = 0\n        local\
    \ num = arr[i]\n        if num < 0 then num = -num end\n        while num > 0\
    \ do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n\
    \        end\n        if sum > 0 then count = count + 1 end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2zqkery.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpk2zqkery.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnh3likt.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprnh3likt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ if not arr then\n        return 0\n    end\n    local count = 0\n    for _,v\
    \ in pairs(arr) do\n        if v < 0 then\n            if digits_sum(math.abs(v))\
    \ ~= 0 then\n                count = count + 1\n            end\n        else\n\
    \            if digits_sum(v) ~= 0 then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8rbnfywg.lua:18:\
    \ attempt to call a nil value (global 'digits_sum')\nstack traceback:\n\t/tmp/tmp8rbnfywg.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp8rbnfywg.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        if count_digits(arr[i]) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpglgzgujr.lua:14:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmpglgzgujr.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpglgzgujr.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for k, v in pairs(arr) do\n    if v < 0 then\n      v = v * -1\n\
    \    end\n    local nums = 0\n    while v > 0 do\n      nums = nums + v % 10\n\
    \      v = math.floor(v / 10)\n    end\n    if nums > 0 then\n      sum = sum\
    \ + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9cdordv.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpu9cdordv.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  return\
    \ len(filter(\n    function(n)\n      local sign = signum(n)\n      n = abs(n)\n\
    \      local sum = 0\n      while n > 0 do\n        sum = sum + (n % 10)\n   \
    \     n = n // 10\n      end\n      return sum * sign > 0\n    end,\n    arr\n\
    \  ))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjm8u668t.lua:12:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpjm8u668t.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpjm8u668t.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return foldl(\n        function(acc, x)\n            local sum = foldl(\n  \
    \              function(acc2, y)\n                    return acc2 + y\n      \
    \          end,\n                0,\n                signed_digits(x)\n      \
    \      )\n            if sum > 0 then\n                return acc + 1\n      \
    \      else\n                return acc\n            end\n        end,\n     \
    \   0,\n        arr\n    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnmisb_lw.lua:12:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpnmisb_lw.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpnmisb_lw.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local cnt = 0\n    for _, v in ipairs(arr) do\n        if is_positive(v) then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ogd9odw.lua:14:\
    \ attempt to call a nil value (global 'is_positive')\nstack traceback:\n\t/tmp/tmp1ogd9odw.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1ogd9odw.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    if num < 0 then\n\
    \      num = num * -1\n    end\n    local sum = 0\n    while num > 0 do\n    \
    \  sum = sum + num % 10\n      num = math.floor(num / 10)\n    end\n    if sum\
    \ > 0 then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2j2x3or.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpm2j2x3or.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _,x in ipairs(arr) do\n    local sum = 0\n    while x ~= 0\
    \ do\n      sum = sum + math.abs(x % 10)\n      x = math.floor(x / 10)\n    end\n\
    \    if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,v in ipairs(arr) do\n        local num = tonumber(v)\n\
    \        if num and num ~= 0 then\n            local sum = 0\n            if num\
    \ < 0 then\n                num = -num\n            end\n            for d in\
    \ string.gmatch(num, \"[-0-9]+\") do\n                sum = sum + tonumber(d)\n\
    \            end\n            if sum > 0 then\n                count = count +\
    \ 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8aumja7.lua:35:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpr8aumja7.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ the function returns the number of elements\n  -- in the table which has a sum\
    \ of digits > 0\n  local count = 0\n  for key, value in pairs(arr) do\n    local\
    \ sum = 0\n    local num = value\n    -- iterate over the number till it is 0\n\
    \    while num ~= 0 do\n      sum = sum + (num % 10)\n      num = math.floor(num\
    \ / 10)\n    end\n    if sum > 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for _, num in ipairs(arr) do\n        sum = sum + signed_digits_sum(num)\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4e2cnmxz.lua:14:\
    \ attempt to call a nil value (global 'signed_digits_sum')\nstack traceback:\n\
    \t/tmp/tmp4e2cnmxz.lua:14: in local 'candidate'\n\t/tmp/tmp4e2cnmxz.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, num in ipairs(arr) do\n    local sum = 0\n    if num < 0\
    \ then\n      num = -num\n    end\n    while num > 0 do\n      sum = sum + num\
    \ % 10\n      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n     \
    \ count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohig5kqy.lua:33:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpohig5kqy.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local len = 0\n    for _, v in pairs(arr) do\n        local count = 0\n    \
    \    local n = v\n        while n ~= 0 do\n            count = count + (n % 10)\n\
    \            n = math.floor(n / 10)\n        end\n        if count > 0 then\n\
    \            len = len + 1\n        end\n    end\n    return len\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,v in ipairs(arr) do\n        if sum_digits(v) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1t0ok31.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpw1t0ok31.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpw1t0ok31.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local x = num\n \
    \       local sum = 0\n        if x < 0 then\n            x = -x\n           \
    \ sum = -1\n        end\n        while x > 0 do\n            sum = sum + (x %\
    \ 10)\n            x = math.floor(x / 10)\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeney1p1v.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeney1p1v.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscwdlpi0.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpscwdlpi0.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ cnt = 0\n\tfor _, i in ipairs(arr) do\n\t\tlocal n = 0\n\t\tif i < 0 then\n\t\
    \t\tn = n - i % 10\n\t\t\ti = -i\n\t\tend\n\t\twhile i > 0 do\n\t\t\tn = n + i\
    \ % 10\n\t\t\ti = i // 10\n\t\tend\n\t\tif n > 0 then\n\t\t\tcnt = cnt + 1\n\t\
    \tend\n\tend\n\treturn cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivcnokum.lua:36:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpivcnokum.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tlocal\
    \ count = 0\n\tfor _, elem in ipairs(arr) do\n\t\tlocal digits = math.abs(elem)\n\
    \t\tlocal sum = 0\n\t\twhile digits > 0 do\n\t\t\tsum = sum + digits % 10\n\t\t\
    \tdigits = math.floor(digits / 10)\n\t\tend\n\t\tif elem < 0 then\n\t\t\tsum =\
    \ sum + 1\n\t\tend\n\t\tif sum > 0 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jvymaxu.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp6jvymaxu.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ count = 0\n    for i, v in ipairs(arr) do\n        if (v > 0) then\n       \
    \     v = v % 10\n            v = (v + (v - (v % 10)) / 10)\n            if (v\
    \ > 0) then\n                count = count + 1\n            end\n        else\n\
    \            v = -v\n            v = -v % 10\n            v = -(v + (v - (v %\
    \ 10)) / 10)\n            if (v > 0) then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcn4ww84e.lua:39:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpcn4ww84e.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return fold(function(sum, a)\n        return sum + (signed_digits_sum(a) > 0\
    \ and 1 or 0)\n    end, 0, arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ohju64n.lua:12:\
    \ attempt to call a nil value (global 'fold')\nstack traceback:\n\t/tmp/tmp2ohju64n.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2ohju64n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnh3likt.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprnh3likt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4wl6jm8.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpa4wl6jm8.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local sum = 0\n    for i = 1, #arr do\n        local num = arr[i]\n        local\
    \ temp = num\n        if num < 0 then\n            temp = -temp\n        end\n\
    \        local total = 0\n        while temp > 0 do\n            total = total\
    \ + temp % 10\n            temp = temp // 10\n        end\n        if total >\
    \ 0 then\n            sum = sum + 1\n        end\n    end\n    return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos5q7626.lua:35:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpos5q7626.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, i in ipairs(arr) do\n    local sum = 0\n    local num =\
    \ i < 0 and i * -1 or i\n    repeat\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    until num == 0\n    if sum > 0 then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5j2_u18.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpv5j2_u18.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        local s = 0\n     \
    \   for k in (\"\" .. v):gmatch(\".\") do\n            k = tonumber(k)\n     \
    \       if k then\n                s = s + k\n            end\n        end\n \
    \       if s > 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb33sgl8.lua:32:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpqb33sgl8.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local c = 0\n    for _,n in ipairs(arr) do\n        local s = math.abs(n)\n\
    \        while s > 0 do\n            c = c + (s % 10)\n            s = math.floor(s\
    \ / 10)\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpnxk0jw.lua:27:\
    \ expected: 0, actual: 3\nstack traceback:\n\t/tmp/tmpmpnxk0jw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ --todo: Write this function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjv89nhg.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpyjv89nhg.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local num = arr[i]\n    local sum = 0\n\
    \    while num ~= 0 do\n      local n = num % 10\n      sum = sum + math.abs(n)\n\
    \      num = math.floor(num / 10)\n    end\n    if sum > 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,v in ipairs(arr) do\n        -- Check the sum of\
    \ the number's digits.\n        local sum = 0\n        if v < 0 then\n       \
    \     sum = sum - (v % 10)\n            v = math.floor(v / 10)\n        end\n\
    \        while v > 0 do\n            sum = sum + (v % 10)\n            v = math.floor(v\
    \ / 10)\n        end\n        if sum > 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_cpzb5a.lua:39:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp7_cpzb5a.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, num in ipairs(arr) do\n        local sum = 0\n \
    \       local n = math.abs(num)\n        while n > 0 do\n            sum = sum\
    \ + (n % 10)\n            n = n // 10\n        end\n        if sum > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1buf4e8_.lua:31:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp1buf4e8_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d3m1uv_.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp5d3m1uv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n\tcount\
    \ = 0\n\tfor i, num in ipairs(arr) do\n\t\tif sum_of_digits(num) > 0 then\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5x11m5w.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpc5x11m5w.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc5x11m5w.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ function count_digits(x)\n    x = math.abs(x)\n    local res = 0\n    while\
    \ x > 0 do\n      res = res + x % 10\n      x = math.floor(x / 10)\n    end\n\
    \    return res\n  end\n  local res = 0\n  for i = 1, #arr do\n    if count_digits(arr[i])\
    \ > 0 then\n      res = res + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdymyj1qj.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpdymyj1qj.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ sum = 0\n  for i, num in ipairs(arr) do\n    while num ~= 0 do\n      local\
    \ mod = num % 10\n      if mod > 0 then\n        sum = sum + 1\n        break\n\
    \      end\n      num = num // 10\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_rlw_f8.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp5_rlw_f8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07tl8zp8.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmp07tl8zp8.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp07tl8zp8.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for i = 1, #arr do\n    local sum = 0\n    local n = arr[i]\n \
    \   if n < 0 then\n      n = -n\n    end\n    while n > 0 do\n      sum = sum\
    \ + n % 10\n      n = n // 10\n    end\n    if sum > 0 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rd741fu.lua:34:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp4rd741fu.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ cnt = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      cnt = cnt + 1\n\
    \    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm1e03nc.lua:29:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpwm1e03nc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    local sum = 0\n    while (v ~=\
    \ 0) do\n      sum = sum + (v % 10)\n      v = math.floor(v / 10)\n    end\n \
    \   if sum > 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5d3m1uv_.lua:20:\
    \ expected: 6, actual: 0\nstack traceback:\n\t/tmp/tmp5d3m1uv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  local\
    \ count = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      count = count\
    \ + 1\n    else\n      count = count + signed_sum_digits(v)\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppl7msm0q.lua:17:\
    \ attempt to call a nil value (global 'signed_sum_digits')\nstack traceback:\n\
    \t/tmp/tmppl7msm0q.lua:17: in local 'candidate'\n\t/tmp/tmppl7msm0q.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- TODO: implement this\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhouk7b1.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpkhouk7b1.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- TODO: Implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cifhmyt.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp8cifhmyt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,v in ipairs(arr) do\n        if sum_digits(v) > 0\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1t0ok31.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpw1t0ok31.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpw1t0ok31.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: -1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ -- WRITE CODE HERE\n    local count = 0\n    for i, v in ipairs(arr) do\n  \
    \      if v > 0 then\n            sum = 0\n            while v > 0 do\n      \
    \          sum = sum + v % 10\n                v = math.floor(v / 10)\n      \
    \      end\n            if sum > 0 then\n                count = count + 1\n \
    \           end\n        else\n            sum = 0\n            while v < 0 do\n\
    \                sum = sum + v % 10\n                v = math.floor(v / 10)\n\
    \            end\n            if sum < 0 then\n                count = count +\
    \ 1\n            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_nums\n    lu.assertEquals(candidate({}),\
    \ 0)\n    lu.assertEquals(candidate({-1, -2, 0}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}),\
    \ 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12,\
    \ 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660004015
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        local num = arr[i]\n      \
    \  local sum = 0\n        if num < 0 then\n            num = -num\n          \
    \  sum = -sum - num % 10\n            num = num // 10\n        end\n        while\
    \ num > 0 do\n            sum = sum + num % 10\n            num = num // 10\n\
    \        end\n        if sum > 0 then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdoiyj4ky.lua:40:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmpdoiyj4ky.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i, v in ipairs(arr) do\n        if sum_digits(v) >\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphlty5nb4.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmphlty5nb4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmphlty5nb4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ --@TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn35pibwg.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpn35pibwg.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for _,v in ipairs(arr) do\n        local sum = 0\n    \
    \    if v < 0 then\n            v = -v\n        end\n        for i = 1, string.len(tostring(v))\
    \ do\n            sum = sum + string.sub(tostring(v), i, i)\n        end\n   \
    \     if sum > 0 then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyqyp6jn.lua:32:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpgyqyp6jn.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n   \
    \ local count = 0\n    for i = 1, #arr do\n        if sum_digits(arr[i]) > 0 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_nums\n\
    \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1, -2,\
    \ 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n    lu.assertEquals(candidate({1,\
    \ 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1, 100, 98, -7, 1, -1}),\
    \ 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56, 0}), 5)\n    lu.assertEquals(candidate({0,\
    \ 1}), 1)\n    lu.assertEquals(candidate({1}), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkp_2_694.lua:14:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpkp_2_694.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpkp_2_694.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660004010
- exit_code: 1
  program: "-- Write a function count_nums which takes a table of integers and returns\n\
    -- the number of elements which has a sum of digits > 0.\n-- If a number is negative,\
    \ then its first signed digit will be negative:\n-- e.g. -123 has signed digits\
    \ -1, 2, and 3.\n-- >>> count_nums({})\n-- 0\n-- >>> count_nums({-1, 11, -11})\n\
    -- 1\n-- >>> count_nums({1, 1, 2})\n-- 3\nlocal function count_nums(arr)\n  --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_nums\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({-1,\
    \ -2, 0}), 0)\n    lu.assertEquals(candidate({1, 1, 2, -2, 3, 4, 5}), 6)\n   \
    \ lu.assertEquals(candidate({1, 6, 9, -6, 0, 1, 5}), 5)\n    lu.assertEquals(candidate({1,\
    \ 100, 98, -7, 1, -1}), 4)\n    lu.assertEquals(candidate({12, 23, 34, -45, -56,\
    \ 0}), 5)\n    lu.assertEquals(candidate({0, 1}), 1)\n    lu.assertEquals(candidate({1}),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfhmv73e.lua:18:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmprfhmv73e.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660004010
