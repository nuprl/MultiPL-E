name: HumanEval_68_pluck
language: lua
results:
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- your code here\n    local\
    \ min = nil\n    local idx = nil\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 then\n            if not min or v < min then\n                min =\
    \ v\n                idx = i\n            end\n        end\n    end\n    if min\
    \ then\n        return {min, idx}\n    else\n        return {}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf26geqel.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpf26geqel.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal minVal = math.huge\n\t\
    local minIndex = math.huge\n\tfor i = 1, #arr do\n\t\tif (arr[i] < minVal) and\
    \ (arr[i] % 2 == 0) then\n\t\t\tminVal = arr[i]\n\t\t\tminIndex = i\n\t\tend\n\
    \tend\n\tif minVal ~= math.huge then\n\t\treturn {minVal, minIndex}\n\telse\n\t\
    \treturn {}\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppchezie6.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppchezie6.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function filt(node)\n\
    \    return node % 2 == 0\n  end\n  local function min(a, b)\n    return a < b\
    \ and a or b\n  end\n  local function argmin(arr)\n    local best, best_idx =\
    \ math.huge, 0\n    for i = 1, #arr do\n      if arr[i] < best then\n        best\
    \ = arr[i]\n        best_idx = i\n      end\n    end\n    return best, best_idx\n\
    \  end\n  local evens = {}\n  for i = 1, #arr do\n    if filt(arr[i]) then\n \
    \     table.insert(evens, arr[i])\n    end\n  end\n  if #evens == 0 then\n   \
    \ return {}\n  end\n  local best, best_idx = argmin(evens)\n  return {best, best_idx}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebs6o4n6.lua:59:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpebs6o4n6.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local t = {}\n  local min =\
    \ math.huge\n  local minindex = math.huge\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      if arr[i] < min then\n        min = arr[i]\n        minindex\
    \ = i\n      elseif arr[i] == min then\n        if i < minindex then\n       \
    \   minindex = i\n        end\n      end\n    end\n  end\n  if min ~= math.huge\
    \ then\n    t[1] = min\n    t[2] = minindex\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzuvlbfw.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpkzuvlbfw.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local s = {}\n  for i, v in\
    \ ipairs(arr) do\n    if v%2 == 0 then\n      table.insert(s, {v, i})\n    end\n\
    \  end\n  table.sort(s, function(a, b) return a[1] < b[1] end)\n  if #s > 0 then\n\
    \    return s[1]\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9__6eqm7.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp9__6eqm7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest, smallest_index\n\
    \    for index, val in ipairs(arr) do\n        if val % 2 == 0 then\n        \
    \    if not smallest or val < smallest then\n                smallest = val\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    return smallest and {smallest, smallest_index} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeq3m376k.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeq3m376k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even_value =\
    \ math.huge\n  local smallest_even_value_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < smallest_even_value then\n      smallest_even_value\
    \ = v\n      smallest_even_value_index = i\n    end\n  end\n  if smallest_even_value\
    \ ~= math.huge then\n    return {smallest_even_value, smallest_even_value_index}\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcexjv5d9.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcexjv5d9.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = -1\n  local index\
    \ = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and (min == -1 or v < min)\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == -1 then\n\
    \    return {}\n  else\n    return {min, index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5lsazcj.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmph5lsazcj.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value = math.huge\n\
    \  local smallest_index = math.huge\n  local smallest_even_value = math.huge\n\
    \  local smallest_even_index = math.huge\n  for index, value in ipairs(arr) do\n\
    \    if value < smallest_value then\n      smallest_value = value\n      smallest_index\
    \ = index\n    end\n    if value % 2 == 0 and value < smallest_even_value then\n\
    \      smallest_even_value = value\n      smallest_even_index = index\n    end\n\
    \  end\n  if smallest_even_value == math.huge then\n    return {}\n  end\n  return\
    \ { smallest_even_value, smallest_even_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gzeenbn.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5gzeenbn.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local e = {}\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 then\n      e[#e + 1] = {v, i}\n    end\n\
    \  end\n  table.sort(e, function(a, b) return a[1] < b[1] end)\n  return e[1]\
    \ or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiajxq1q.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpgiajxq1q.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local minElem = 10001\n  local\
    \ minIndex = 10001\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < minElem\
    \ then\n      minElem = v\n      minIndex = i\n    end\n  end\n  if minElem ==\
    \ 10001 then\n    return {}\n  end\n  return {minElem, minIndex}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vj5wc29.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2vj5wc29.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_index, smallest_value\
    \ = nil, nil\n  for i, val in ipairs(arr) do\n    if val % 2 == 0 then\n     \
    \ if smallest_value == nil or val < smallest_value then\n        smallest_index,\
    \ smallest_value = i, val\n      end\n    end\n  end\n  return smallest_index\
    \ and {smallest_value, smallest_index} or {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpy78nz_.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcpy78nz_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallestIndex = nil\n  for k, v in ipairs(arr) do\n    if v > 0 and v % 2 ==\
    \ 0 then\n      if smallest == nil or v < smallest then\n        smallest = v\n\
    \        smallestIndex = k\n      end\n    end\n  end\n  if smallest == nil then\n\
    \    return {}\n  end\n  return {smallest, smallestIndex}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hpelylq.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5hpelylq.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local found, val, idx = false,\
    \ nil, 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n          \
    \  if not found then\n                found, val, idx = true, arr[i], i\n    \
    \        elseif arr[i] < val then\n                val, idx = arr[i], i\n    \
    \        end\n        end\n    end\n    return found and {val, idx} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ot7d2qn.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3ot7d2qn.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n    local\
    \ minI = nil\n    for i,n in ipairs(arr) do\n        if n % 2 == 0 then\n    \
    \        if min == nil or n < min then\n                min = n\n            \
    \    minI = i\n            end\n        end\n    end\n    if min == nil then\n\
    \        return {}\n    else\n        return {min, minI}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fj_fltc.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2fj_fltc.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx = math.huge,\
    \ 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min,\
    \ idx = v, i\n    end\n  end\n  return min ~= math.huge and {min, idx} or {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeggoc3vq.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeggoc3vq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if not arr or #arr == 0 then\
    \ return {} end\n  local min, minIndex = math.huge, math.huge\n  for i, node in\
    \ ipairs(arr) do\n    if node % 2 == 0 and node < min then\n      min, minIndex\
    \ = node, i\n    end\n  end\n  if min == math.huge then return {} end\n  return\
    \ {min, minIndex}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoqgr12f.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwoqgr12f.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local evens = {}\n    local\
    \ smallest = {}\n    local smallestEvenValue = nil\n    for i,v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            evens[#evens+1] = {i, v}\n     \
    \       if smallestEvenValue == nil or v < smallestEvenValue then\n          \
    \      smallestEvenValue = v\n                smallest = {i, v}\n            end\n\
    \        end\n    end\n    return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8o4d8y9j.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp8o4d8y9j.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal min, minIndex;\n\tfor\
    \ i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\tif not min or v < min\
    \ then\n\t\t\t\tmin = v;\n\t\t\t\tminIndex = i;\n\t\t\tend\n\t\tend\n\tend\n\t\
    return min and {min, minIndex} or {};\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps__mcjl6.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmps__mcjl6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local min, m_idx = nil, nil\n  for i, v in ipairs(arr) do\n    if (v\
    \ % 2 == 0) and (min == nil or v < min) then\n      min, m_idx = v, i\n    end\n\
    \  end\n  return min and {min, m_idx} or {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoksvo7o.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeoksvo7o.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
