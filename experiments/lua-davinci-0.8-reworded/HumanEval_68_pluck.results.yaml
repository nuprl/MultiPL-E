language: lua
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- your code here\n    local\
    \ min = nil\n    local idx = nil\n    for i, v in ipairs(arr) do\n        if v\
    \ % 2 == 0 then\n            if not min or v < min then\n                min =\
    \ v\n                idx = i\n            end\n        end\n    end\n    if min\
    \ then\n        return {min, idx}\n    else\n        return {}\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf26geqel.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpf26geqel.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal minVal = math.huge\n\t\
    local minIndex = math.huge\n\tfor i = 1, #arr do\n\t\tif (arr[i] < minVal) and\
    \ (arr[i] % 2 == 0) then\n\t\t\tminVal = arr[i]\n\t\t\tminIndex = i\n\t\tend\n\
    \tend\n\tif minVal ~= math.huge then\n\t\treturn {minVal, minIndex}\n\telse\n\t\
    \treturn {}\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppchezie6.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppchezie6.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function filt(node)\n\
    \    return node % 2 == 0\n  end\n  local function min(a, b)\n    return a < b\
    \ and a or b\n  end\n  local function argmin(arr)\n    local best, best_idx =\
    \ math.huge, 0\n    for i = 1, #arr do\n      if arr[i] < best then\n        best\
    \ = arr[i]\n        best_idx = i\n      end\n    end\n    return best, best_idx\n\
    \  end\n  local evens = {}\n  for i = 1, #arr do\n    if filt(arr[i]) then\n \
    \     table.insert(evens, arr[i])\n    end\n  end\n  if #evens == 0 then\n   \
    \ return {}\n  end\n  local best, best_idx = argmin(evens)\n  return {best, best_idx}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebs6o4n6.lua:59:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpebs6o4n6.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local t = {}\n  local min =\
    \ math.huge\n  local minindex = math.huge\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      if arr[i] < min then\n        min = arr[i]\n        minindex\
    \ = i\n      elseif arr[i] == min then\n        if i < minindex then\n       \
    \   minindex = i\n        end\n      end\n    end\n  end\n  if min ~= math.huge\
    \ then\n    t[1] = min\n    t[2] = minindex\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzuvlbfw.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpkzuvlbfw.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local s = {}\n  for i, v in\
    \ ipairs(arr) do\n    if v%2 == 0 then\n      table.insert(s, {v, i})\n    end\n\
    \  end\n  table.sort(s, function(a, b) return a[1] < b[1] end)\n  if #s > 0 then\n\
    \    return s[1]\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9__6eqm7.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp9__6eqm7.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest, smallest_index\n\
    \    for index, val in ipairs(arr) do\n        if val % 2 == 0 then\n        \
    \    if not smallest or val < smallest then\n                smallest = val\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    return smallest and {smallest, smallest_index} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeq3m376k.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeq3m376k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_even_value =\
    \ math.huge\n  local smallest_even_value_index = math.huge\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < smallest_even_value then\n      smallest_even_value\
    \ = v\n      smallest_even_value_index = i\n    end\n  end\n  if smallest_even_value\
    \ ~= math.huge then\n    return {smallest_even_value, smallest_even_value_index}\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcexjv5d9.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcexjv5d9.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = -1\n  local index\
    \ = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and (min == -1 or v < min)\
    \ then\n      min = v\n      index = i\n    end\n  end\n  if min == -1 then\n\
    \    return {}\n  else\n    return {min, index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5lsazcj.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmph5lsazcj.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value = math.huge\n\
    \  local smallest_index = math.huge\n  local smallest_even_value = math.huge\n\
    \  local smallest_even_index = math.huge\n  for index, value in ipairs(arr) do\n\
    \    if value < smallest_value then\n      smallest_value = value\n      smallest_index\
    \ = index\n    end\n    if value % 2 == 0 and value < smallest_even_value then\n\
    \      smallest_even_value = value\n      smallest_even_index = index\n    end\n\
    \  end\n  if smallest_even_value == math.huge then\n    return {}\n  end\n  return\
    \ { smallest_even_value, smallest_even_index }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gzeenbn.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5gzeenbn.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local e = {}\n  for i, v in\
    \ ipairs(arr) do\n    if v % 2 == 0 then\n      e[#e + 1] = {v, i}\n    end\n\
    \  end\n  table.sort(e, function(a, b) return a[1] < b[1] end)\n  return e[1]\
    \ or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgiajxq1q.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpgiajxq1q.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local minElem = 10001\n  local\
    \ minIndex = 10001\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < minElem\
    \ then\n      minElem = v\n      minIndex = i\n    end\n  end\n  if minElem ==\
    \ 10001 then\n    return {}\n  end\n  return {minElem, minIndex}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vj5wc29.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2vj5wc29.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_index, smallest_value\
    \ = nil, nil\n  for i, val in ipairs(arr) do\n    if val % 2 == 0 then\n     \
    \ if smallest_value == nil or val < smallest_value then\n        smallest_index,\
    \ smallest_value = i, val\n      end\n    end\n  end\n  return smallest_index\
    \ and {smallest_value, smallest_index} or {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpy78nz_.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcpy78nz_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallestIndex = nil\n  for k, v in ipairs(arr) do\n    if v > 0 and v % 2 ==\
    \ 0 then\n      if smallest == nil or v < smallest then\n        smallest = v\n\
    \        smallestIndex = k\n      end\n    end\n  end\n  if smallest == nil then\n\
    \    return {}\n  end\n  return {smallest, smallestIndex}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hpelylq.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5hpelylq.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local found, val, idx = false,\
    \ nil, 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n          \
    \  if not found then\n                found, val, idx = true, arr[i], i\n    \
    \        elseif arr[i] < val then\n                val, idx = arr[i], i\n    \
    \        end\n        end\n    end\n    return found and {val, idx} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ot7d2qn.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3ot7d2qn.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n    local\
    \ minI = nil\n    for i,n in ipairs(arr) do\n        if n % 2 == 0 then\n    \
    \        if min == nil or n < min then\n                min = n\n            \
    \    minI = i\n            end\n        end\n    end\n    if min == nil then\n\
    \        return {}\n    else\n        return {min, minI}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fj_fltc.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2fj_fltc.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx = math.huge,\
    \ 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min,\
    \ idx = v, i\n    end\n  end\n  return min ~= math.huge and {min, idx} or {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeggoc3vq.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeggoc3vq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if not arr or #arr == 0 then\
    \ return {} end\n  local min, minIndex = math.huge, math.huge\n  for i, node in\
    \ ipairs(arr) do\n    if node % 2 == 0 and node < min then\n      min, minIndex\
    \ = node, i\n    end\n  end\n  if min == math.huge then return {} end\n  return\
    \ {min, minIndex}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwoqgr12f.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwoqgr12f.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local evens = {}\n    local\
    \ smallest = {}\n    local smallestEvenValue = nil\n    for i,v in ipairs(arr)\
    \ do\n        if v % 2 == 0 then\n            evens[#evens+1] = {i, v}\n     \
    \       if smallestEvenValue == nil or v < smallestEvenValue then\n          \
    \      smallestEvenValue = v\n                smallest = {i, v}\n            end\n\
    \        end\n    end\n    return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8o4d8y9j.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp8o4d8y9j.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal min, minIndex;\n\tfor\
    \ i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\tif not min or v < min\
    \ then\n\t\t\t\tmin = v;\n\t\t\t\tminIndex = i;\n\t\t\tend\n\t\tend\n\tend\n\t\
    return min and {min, minIndex} or {};\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps__mcjl6.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmps__mcjl6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local min, m_idx = nil, nil\n  for i, v in ipairs(arr) do\n    if (v\
    \ % 2 == 0) and (min == nil or v < min) then\n      min, m_idx = v, i\n    end\n\
    \  end\n  return min and {min, m_idx} or {}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeoksvo7o.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeoksvo7o.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value\n  local\
    \ smallest_index\n  for i, value in ipairs(arr) do\n    if value % 2 == 0 then\n\
    \      if smallest_value == nil or value < smallest_value then\n        smallest_value\
    \ = value\n        smallest_index = i\n      end\n    end\n  end\n  if smallest_value\
    \ == nil then\n    return {}\n  else\n    return {smallest_value, smallest_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0b8pylzi.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp0b8pylzi.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallestEvenValue = math.huge\n\
    \  local smallestEvenValueIndex = math.huge\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 and arr[i] < smallestEvenValue then\n      smallestEvenValue = arr[i]\n\
    \      smallestEvenValueIndex = i\n    end\n  end\n  if smallestEvenValue == math.huge\
    \ then\n    return {}\n  end\n  return {smallestEvenValue, smallestEvenValueIndex}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpanjlwkyp.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpanjlwkyp.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local min_even_idx = -1\n  local min_even_val = -1\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 then\n      if min_even_idx == -1 or v < min_even_val\
    \ then\n        min_even_idx = i\n        min_even_val = v\n      end\n    end\n\
    \  end\n  if min_even_idx == -1 then return {} end\n  return {min_even_val, min_even_idx}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauvpidcn.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpauvpidcn.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value, smallest_index\n\
    \  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if smallest_value\
    \ == nil or v < smallest_value then\n        smallest_value = v\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  if smallest_value then\n    return {smallest_value,\
    \ smallest_index}\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp12iskxly.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp12iskxly.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even_value = nil\n  local\
    \ even_index = nil\n  for index, value in ipairs(arr) do\n    if value % 2 ==\
    \ 0 then\n      if even_value == nil or value < even_value then\n        even_value\
    \ = value\n        even_index = index\n      end\n    end\n  end\n  if even_value\
    \ == nil then\n    return {}\n  else\n    return {even_value, even_index}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprb9hs_oo.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprb9hs_oo.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal even = {}\n\tlocal odd\
    \ = {}\n\tlocal min = nil\n\tlocal index = nil\n\tfor i = 1, #arr do\n\t\tif (arr[i]\
    \ % 2 == 0) then\n\t\t\tif (min == nil) then\n\t\t\t\tmin = arr[i]\n\t\t\t\tindex\
    \ = i\n\t\t\telseif (arr[i] < min) then\n\t\t\t\tmin = arr[i]\n\t\t\t\tindex =\
    \ i\n\t\t\tend\n\t\tend\n\tend\n\tif (min == nil) then\n\t\treturn {}\n\telse\n\
    \t\treturn {min, index}\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gnmfrnh.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp7gnmfrnh.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1ihp1g1.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpb1ihp1g1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local idx = 0\n    local\
    \ val = 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n         \
    \   if idx == 0 then\n                idx = i\n                val = arr[i]\n\
    \            elseif arr[i] < val then\n                idx = i\n             \
    \   val = arr[i]\n            end\n        end\n    end\n    if idx > 0 then\n\
    \        return { val, idx }\n    else\n        return {}\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxl9it71w.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxl9it71w.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal min_even_index, min_even_value\
    \ = nil, nil\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\tif min_even_value\
    \ == nil or v < min_even_value then\n\t\t\t\tmin_even_value = v\n\t\t\t\tmin_even_index\
    \ = i\n\t\t\tend\n\t\tend\n\tend\n\tif min_even_index == nil then\n\t\treturn\
    \ {}\n\telse\n\t\treturn {min_even_value, min_even_index}\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivw1igyf.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpivw1igyf.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- TODO: your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpefmtr3yh.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpefmtr3yh.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local r\n    for i,v in ipairs(arr)\
    \ do\n        if not r and v % 2 == 0 then\n            r = {v, i}\n        elseif\
    \ r and v % 2 == 0 and v < r[1] then\n            r = {v, i}\n        end\n  \
    \  end\n    return r or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41vczkzs.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp41vczkzs.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local val, idx\n    for i,\
    \ v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not val or v\
    \ < val then\n                val = v\n                idx = i\n            end\n\
    \        end\n    end\n    return {val, idx}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qswmczd.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3qswmczd.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- body\n    local min =\
    \ {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if\
    \ #min == 0 then\n                min = {arr[i], i}\n            elseif arr[i]\
    \ < min[1] then\n                min = {arr[i], i}\n            end\n        end\n\
    \    end\n    return min\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y5oavrl.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6y5oavrl.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local minIdx = 0\n    for idx, val in ipairs(arr) do\n        if val % 2 ==\
    \ 0 and val < min then\n            min = val\n            minIdx = idx\n    \
    \    end\n    end\n    if min == math.huge then\n        return {}\n    end\n\
    \    return {min, minIdx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38f7cihx.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp38f7cihx.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = { math.huge,\
    \ -1 }\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < smallest[1]\
    \ then\n      smallest = { arr[i], i }\n    end\n  end\n  return smallest[2] >\
    \ 0 and smallest or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1olsq2q6.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp1olsq2q6.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- solve here\n    --\n \
    \   local len = #arr\n    if len == 0 then\n        return {}\n    end\n    local\
    \ min, index\n    local i = 1\n    while i <= len do\n        if arr[i] % 2 ==\
    \ 0 then\n            if not min or arr[i] < min then\n                min = arr[i]\n\
    \                index = i\n            end\n        end\n        i = i + 1\n\
    \    end\n    if min then\n        return {min, index}\n    else\n        return\
    \ {}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcfrnm_e.lua:54:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplcfrnm_e.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = 2^31\n  local pos\
    \ = 2^31\n  for i, n in ipairs(arr) do\n    if n > 0 and n % 2 == 0 and n < min\
    \ then\n      min = n\n      pos = i\n    end\n  end\n  if min == 2^31 then\n\
    \    return {}\n  end\n  return {min, pos}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9k9kaxj.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpf9k9kaxj.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallestEven = nil\n\
    \  local smallestEvenIndex = 0\n  for i, elem in ipairs(arr) do\n    if elem %\
    \ 2 == 0 then\n      if smallestEven == nil then\n        smallestEven = elem\n\
    \        smallestEvenIndex = i\n      elseif elem < smallestEven then\n      \
    \  smallestEven = elem\n        smallestEvenIndex = i\n      end\n    end\n  end\n\
    \  if smallestEven == nil then\n    return {}\n  else\n    return {smallestEven,\
    \ smallestEvenIndex}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe3ad2y2.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpbe3ad2y2.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_index, min_val,\
    \ even_found\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n   \
    \         if not even_found or v < min_val then\n                min_index, min_val\
    \ = i, v\n                even_found = true\n            end\n        end\n  \
    \  end\n    return even_found and {min_val, min_index} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2jda6_h.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpu2jda6_h.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local idx = 2\n  local smallest\
    \ = arr[1]\n  local pos\n  if smallest and smallest % 2 == 0 then\n    pos = 1\n\
    \  end\n  while idx <= #arr do\n    local x = arr[idx]\n    if x % 2 == 0 and\
    \ (not smallest or x < smallest) then\n      smallest = x\n      pos = idx\n \
    \   end\n    idx = idx + 1\n  end\n  if smallest then\n    return { smallest,\
    \ pos }\n  end\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzqzsko7.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplzqzsko7.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even_numbers = {}\n \
    \ local indexes = {}\n  for i, e in ipairs(arr) do\n    if e % 2 == 0 then\n \
    \     if #even_numbers == 0 then\n        table.insert(even_numbers, e)\n    \
    \    table.insert(indexes, i)\n      else\n        local min = even_numbers[1]\n\
    \        local index = indexes[1]\n        if e < min then\n          even_numbers\
    \ = {e}\n          indexes = {i}\n        elseif e == min then\n          table.insert(even_numbers,\
    \ e)\n          table.insert(indexes, i)\n        end\n      end\n    end\n  end\n\
    \  if #even_numbers == 0 then\n    return {}\n  else\n    local min = even_numbers[1]\n\
    \    local index = indexes[1]\n    for i, e in ipairs(even_numbers) do\n     \
    \ if indexes[i] < index then\n        min = e\n        index = indexes[i]\n  \
    \    end\n    end\n    return {min, index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0t4vocf.lua:65:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpi0t4vocf.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest, smallest_index\n\
    \  for index, value in ipairs(arr) do\n    if value % 2 == 0 then\n      if smallest\
    \ == nil or value < smallest then\n        smallest = value\n        smallest_index\
    \ = index\n      end\n    end\n  end\n  if smallest == nil then\n    return {}\n\
    \  else\n    return {smallest, smallest_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqqh8nrg.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxqqh8nrg.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local min = nil\n    local index = nil\n    for i,\
    \ v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min == nil or\
    \ v < min then\n                min = v\n                index = i\n         \
    \   end\n        end\n    end\n    if min == nil then\n        return {}\n   \
    \ end\n    return {min, index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6pkes5w.lua:49:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpt6pkes5w.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- your code here\n    if\
    \ arr == nil or #arr == 0 then\n        return {}\n    end\n    local min_even\
    \ = math.huge\n    local min_even_idx = 0\n    for idx, val in ipairs(arr) do\n\
    \        if (val % 2 == 0) and (val < min_even) then\n            min_even = val\n\
    \            min_even_idx = idx\n        end\n    end\n    if min_even == math.huge\
    \ then\n        return {}\n    end\n    return {min_even, min_even_idx}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzedb3uh.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpzzedb3uh.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even = false\n  local\
    \ even_index = 0\n  local smallest_even = 0\n  for i, v in ipairs(arr) do\n  \
    \  if v % 2 == 0 then\n      even = true\n      if smallest_even == 0 then\n \
    \       smallest_even = v\n        even_index = i\n      elseif v < smallest_even\
    \ then\n        smallest_even = v\n        even_index = i\n      end\n    end\n\
    \  end\n  if even then\n    return {smallest_even, even_index}\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuwwlzne.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpkuwwlzne.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local index, value = nil,\
    \ math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < value\
    \ then\n            index, value = i, v\n        end\n    end\n    return {value,\
    \ index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp552_7h2p.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp552_7h2p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest, smallest_index\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not smallest or\
    \ v < smallest then\n        smallest = v\n        smallest_index = i\n      end\n\
    \    end\n  end\n  return smallest and {smallest, smallest_index} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxddourck.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxddourck.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local smallest_even_value\n  local result\n  for k,v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if not smallest_even_value or v < smallest_even_value\
    \ then\n        smallest_even_value = v\n        result = {v, k}\n      end\n\
    \    end\n  end\n  return result or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvmyxnbq.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxvmyxnbq.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n  local evens_idx\
    \ = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      evens[#evens\
    \ + 1] = v\n      evens_idx[#evens_idx + 1] = i\n    end\n  end\n  if #evens ==\
    \ 0 then\n    return {}\n  end\n  local smallest = evens[1]\n  local smallest_idx\
    \ = evens_idx[1]\n  for i, v in ipairs(evens) do\n    if v < smallest then\n \
    \     smallest = v\n      smallest_idx = evens_idx[i]\n    end\n  end\n  return\
    \ {smallest, smallest_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc56wr1d.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpnc56wr1d.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local min = math.min(table.unpack(arr))\n  while min % 2 ~= 0 do\n  \
    \  table.remove(arr, min)\n    min = math.min(table.unpack(arr))\n  end\n  return\
    \ {min, table.indexOf(arr, min)}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqgae0gzv.lua:33:\
    \ attempt to call a nil value (field 'indexOf')\nstack traceback:\n\t/tmp/tmpqgae0gzv.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpqgae0gzv.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskbzrs6j.lua:32:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpskbzrs6j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ minidx = math.huge\n  for i,v in ipairs(arr) do\n    if (v % 2 == 0) and (v\
    \ < min) then\n      min = v\n      minidx = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, minidx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi13k69bx.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpi13k69bx.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local output = {}\n    local\
    \ even = {}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n    \
    \        table.insert(even, v)\n        end\n    end\n    if #even == 0 then\n\
    \        return {}\n    end\n    local min = even[1]\n    for _, v in ipairs(even)\
    \ do\n        if v < min then\n            min = v\n        end\n    end\n   \
    \ for i, v in ipairs(arr) do\n        if v == min then\n            table.insert(output,\
    \ min)\n            table.insert(output, i)\n            return output\n     \
    \   end\n    end\nend\nreturn pluck\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpys_6an27.lua:52: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local result = {}\n  local\
    \ min_index\n  local min_value\n  for i, el in ipairs(arr) do\n    if el % 2 ==\
    \ 0 then\n      if min_value == nil or el < min_value then\n        min_value\
    \ = el\n        min_index = i\n      end\n    end\n  end\n  if min_value then\n\
    \    result[1] = min_value\n    result[2] = min_index\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hkty__k.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6hkty__k.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallestEven = {arr[1],\
    \ 1}\n  local smallestEvenIndex = 1\n  local even = arr[1] % 2 == 0\n  if even\
    \ then\n    smallestEven = {arr[1], 1}\n  end\n  for i = 2, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      if not even then\n        smallestEven = {arr[i], i}\n\
    \        even = true\n      else\n        if arr[i] < smallestEven[1] then\n \
    \         smallestEven = {arr[i], i}\n        end\n      end\n    end\n  end\n\
    \  if even then\n    return smallestEven\n  else\n    return {}\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3sikrz7.lua:55:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpt3sikrz7.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value = nil\n\
    \    local smallest_index = nil\n    for index, value in ipairs(arr) do\n    \
    \    if value % 2 == 0 then\n            if smallest_value == nil or value < smallest_value\
    \ then\n                smallest_value = value\n                smallest_index\
    \ = index\n            end\n        end\n    end\n    if smallest_value == nil\
    \ then\n        return {}\n    else\n        return {smallest_value, smallest_index}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx57maalt.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpx57maalt.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local smallest_even_value, idx = math.huge, nil\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and v < smallest_even_value then\n      smallest_even_value\
    \ = v\n      idx = i\n    end\n  end\n  if idx then return {smallest_even_value,\
    \ idx} end\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5jgrak6.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpp5jgrak6.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest, idx = math.huge,\
    \ nil\n  for i, n in ipairs(arr) do\n    if n % 2 == 0 and n < smallest then\n\
    \      smallest, idx = n, i\n    end\n  end\n  return idx and {smallest, idx}\
    \ or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpan57hd92.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpan57hd92.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local result = {}\n  local\
    \ min_idx = math.huge\n  local min_val = math.huge\n  for idx, val in ipairs(arr)\
    \ do\n    if val % 2 == 0 and val < min_val then\n      min_val = val\n      min_idx\
    \ = idx\n    end\n  end\n  if min_val < math.huge then\n    result[1] = min_val\n\
    \    result[2] = min_idx\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xc4bc80.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5xc4bc80.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n    local\
    \ min_idx = nil\n    for i, x in ipairs(arr) do\n        if x % 2 == 0 then\n\
    \            if min == nil or x < min then\n                min = x\n        \
    \        min_idx = i\n            end\n        end\n    end\n    if min == nil\
    \ then\n        return {}\n    else\n        return {min, min_idx}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptpr8p1ph.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptpr8p1ph.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, idx = nil, 0\n \
    \ for i, el in ipairs(arr) do\n    if el % 2 == 0 and (min == nil or el < min)\
    \ then\n      min, idx = el, i\n    end\n  end\n  return min and {min, idx} or\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1742vpq.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpw1742vpq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code goes here\n  local\
    \ index = 1\n  local val = arr[index]\n  for i, value in ipairs(arr) do\n    if\
    \ value % 2 == 0 and value < val then\n      index = i\n      val = value\n  \
    \  end\n  end\n  if val % 2 == 0 then\n    return {val, index}\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8vmheh9.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpa8vmheh9.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj539j_c.lua:33:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmptj539j_c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local t = {}\n    for i,\
    \ v in ipairs(arr) do\n        if v % 2 == 0 then\n            table.insert(t,\
    \ v)\n        end\n    end\n    if next(t) == nil then\n        return {}\n  \
    \  end\n    local min = math.min(unpack(t))\n    for i, v in ipairs(arr) do\n\
    \        if v == min then\n            return {min, i}\n        end\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp88hmynk7.lua:36:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp88hmynk7.lua:36:\
    \ in local 'candidate'\n\t/tmp/tmp88hmynk7.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpg8j9pf.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpxpg8j9pf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local index, even_arr = 1,\
    \ {}\n  while arr[index] do\n    if arr[index] % 2 == 0 then\n      table.insert(even_arr,\
    \ arr[index])\n    end\n    index = index + 1\n  end\n  local sorted_even_arr\
    \ = quick_sort(even_arr)\n  local min = sorted_even_arr[1]\n  for i = 1, #arr\
    \ do\n    if arr[i] == min then\n      return {min, i}\n    end\n  end\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjck7kuqr.lua:34:\
    \ attempt to call a nil value (global 'quick_sort')\nstack traceback:\n\t/tmp/tmpjck7kuqr.lua:34:\
    \ in local 'candidate'\n\t/tmp/tmpjck7kuqr.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local index, even\n    for\
    \ i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if even == nil\
    \ or v < even then\n                even = v\n                index = i\n    \
    \        end\n        end\n    end\n    return {even, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlfjmotv.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjlfjmotv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_idx, min_val\n  for\
    \ idx, val in ipairs(arr) do\n    if val % 2 == 0 then\n      if not min_val or\
    \ val < min_val then\n        min_val = val\n        min_idx = idx\n      end\n\
    \    end\n  end\n  return {min_val, min_idx}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yj0qa6i.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp0yj0qa6i.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local index = math.huge\n \
    \ local found = nil\n  for k, v in ipairs(arr) do\n    if v % 2 == 0 and v < found\
    \ then\n      found = v\n      index = k\n    end\n  end\n  return found and {found,\
    \ index} or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxzb7nhl.lua:30:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmptxzb7nhl.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmptxzb7nhl.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value,\
    \ smallest_even_value_i\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ then\n            if not smallest_even_value or v < smallest_even_value then\n\
    \                smallest_even_value = v\n                smallest_even_value_i\
    \ = i\n            end\n        end\n    end\n    return smallest_even_value and\
    \ {smallest_even_value, smallest_even_value_i} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo_zsr3j.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxo_zsr3j.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ minIndex = math.huge\n  for i, v in ipairs(arr) do\n    if (v % 2 == 0) and\
    \ (v < min) then\n      min = v\n      minIndex = i\n    end\n  end\n  if min\
    \ ~= math.huge then\n    return {min, minIndex}\n  else\n    return {}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy095wyoo.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpy095wyoo.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- fill me in\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp5oml0w.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp5oml0w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even = 2^31 - 1\n\
    \    local min_even_idx = -1\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 and v < min_even then\n            min_even = v\n            min_even_idx\
    \ = i\n        end\n    end\n    if min_even_idx == -1 then\n        return {}\n\
    \    else\n        return {min_even, min_even_idx}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp44ydw5y.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpp44ydw5y.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = 0\n  local index\
    \ = -1\n  for i = 1, #arr do\n    if arr[i] ~= 0 and arr[i] % 2 == 0 then\n  \
    \    if min == 0 then\n        min = arr[i]\n        index = i\n      elseif arr[i]\
    \ < min then\n        min = arr[i]\n        index = i\n      end\n    end\n  end\n\
    \  if index > -1 then\n    return {min, index}\n  else\n    return {}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6e7937q4.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6e7937q4.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = math.huge\n\
    \  local smallest_index = math.huge\n  local value_found = false\n  for index,\
    \ value in ipairs(arr) do\n    if value % 2 == 0 and value < smallest then\n \
    \     smallest = value\n      smallest_index = index\n      value_found = true\n\
    \    end\n  end\n  if value_found then\n    return {smallest, smallest_index}\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscylgbub.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpscylgbub.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {}\n  local index\
    \ = {}\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      even[#even+1]\
    \ = v\n      index[#index+1] = i\n    end\n  end\n  table.sort(even)\n  if #even\
    \ == 0 then\n    return {}\n  end\n  local min = even[1]\n  for i,v in ipairs(even)\
    \ do\n    if v == min then\n      return {min, index[i]}\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8so6z7fl.lua:51:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp8so6z7fl.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if not arr then return {}\
    \ end\n    local smallest = nil\n    local index = -1\n    for i = 1, #arr do\n\
    \        if arr[i] % 2 == 0 then\n            if smallest == nil or arr[i] < smallest\
    \ then\n                smallest = arr[i]\n                index = i\n       \
    \     end\n        end\n    end\n    if smallest == nil then return {} end\n \
    \   return {smallest, index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfnb1d0j.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpdfnb1d0j.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppy3i8qyg.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmppy3i8qyg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskbzrs6j.lua:32:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpskbzrs6j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallestEvenValue = math.huge\n\
    \  local smallestEvenIndex = -1\n  for index, value in ipairs(arr) do\n    if\
    \ value % 2 == 0 and value < smallestEvenValue then\n      smallestEvenValue =\
    \ value\n      smallestEvenIndex = index\n    end\n  end\n  if smallestEvenIndex\
    \ ~= -1 then\n    return {smallestEvenValue, smallestEvenIndex}\n  else\n    return\
    \ {}\n  end\nend\nreturn pluck\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_txnohpe.lua:42: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local res = {}\n    local\
    \ min = 10000\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and arr[i] <\
    \ min then\n            min = arr[i]\n            res = {min, i}\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqq_cr_m.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpoqq_cr_m.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return {2, 1}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5gpi4dk.lua:35:\
    \ expected: {}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpi5gpi4dk.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local smallest_even, smallest_index = nil, 10000\n  for i, v in ipairs(arr)\
    \ do\n    if v % 2 == 0 and smallest_even == nil then\n      smallest_even = v\n\
    \      smallest_index = i\n    elseif v % 2 == 0 and v < smallest_even then\n\
    \      smallest_even = v\n      smallest_index = i\n    end\n  end\n  if smallest_even\
    \ == nil then return {} end\n  return {smallest_even, smallest_index}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbop6mk8t.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpbop6mk8t.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local evens = {}\n    local\
    \ min = {math.huge, 0}\n    for i, v in ipairs(arr) do\n        if v % 2 == 0\
    \ then\n            if v < min[1] then\n                min = {v, i}\n       \
    \     end\n        end\n    end\n    return min[1] ~= math.huge and min or {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpac_g0lz8.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpac_g0lz8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local min = math.huge\n  local min_index = math.huge\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 and arr[i] < min then\n      min = arr[i]\n     \
    \ min_index = i\n    end\n  end\n  if min == math.huge then return {} end\n  return\
    \ {min, min_index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplq82wnkn.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplq82wnkn.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local smallest = arr[1]\n  local smallestIndex = 1\n  for i,v in ipairs(arr)\
    \ do\n    if smallest % 2 == 0 and v % 2 == 0 then\n      if v < smallest then\n\
    \        smallest = v\n        smallestIndex = i\n      end\n    elseif smallest\
    \ % 2 ~= 0 and v % 2 == 0 then\n      smallest = v\n      smallestIndex = i\n\
    \    end\n  end\n  if smallest % 2 == 0 then\n    return {smallest, smallestIndex}\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp418gmif7.lua:51:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp418gmif7.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = { }\n  local\
    \ smallest = nil\n  local smallest_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if not smallest or v < smallest then\n        smallest\
    \ = v\n        smallest_index = i\n      end\n    end\n  end\n  if smallest then\n\
    \    return { smallest, smallest_index }\n  else\n    return { }\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp093vzqsf.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp093vzqsf.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function isEven(n)\n\
    \    return n % 2 == 0\n  end\n  local function check(n)\n    return n and n >\
    \ 0 and n < math.huge\n  end\n  local function findSmallestEven(arr)\n    local\
    \ smallest = math.huge\n    local idx = 0\n    for i, v in ipairs(arr) do\n  \
    \    if isEven(v) and v < smallest then\n        smallest = v\n        idx = i\n\
    \      end\n    end\n    return smallest, idx\n  end\n  local smallest, idx =\
    \ findSmallestEven(arr)\n  return smallest ~= math.huge and {smallest, idx} or\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg1ai9n8.lua:51:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpeg1ai9n8.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value, min_even_index\
    \ = math.huge, math.huge\n    for i, value in ipairs(arr) do\n        if value\
    \ % 2 == 0 and value < min_even_value then\n            min_even_value = value\n\
    \            min_even_index = i\n        end\n    end\n    if min_even_value ==\
    \ math.huge then\n        return {}\n    end\n    return {min_even_value, min_even_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6swiv8uz.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6swiv8uz.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr == 0 then\n     \
    \   return {}\n    end\n    local min = nil\n    local minIndex = nil\n    for\
    \ i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if min == nil\
    \ or v < min then\n                min = v\n                minIndex = i\n   \
    \         end\n        end\n    end\n    if min == nil then\n        return {}\n\
    \    end\n    return {min, minIndex}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rme6c77.lua:49:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp7rme6c77.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\treturn {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_ik444n.lua:33:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpv_ik444n.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_i = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min\
    \ then\n      min = v\n      min_i = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, min_i}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc6uvqff.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxc6uvqff.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tif (#arr==0) then return {}\
    \ end\n\tlocal min=math.huge\n\tlocal index=1\n\tfor i,v in ipairs(arr) do\n\t\
    \tif (v%2==0) and (v<min) then\n\t\t\tmin=v\n\t\t\tindex=i\n\t\tend\n\tend\n\t\
    if (min==math.huge) then return {} end\n\treturn {min,index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprx4wzqzv.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprx4wzqzv.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local res = {}\n    local\
    \ smallest = 0\n    local smallest_index = 0\n    local is_found = false\n   \
    \ for index, value in ipairs(arr) do\n        if (value % 2 == 0) then\n     \
    \       if (not is_found) then\n                smallest = value\n           \
    \     smallest_index = index\n                is_found = true\n            else\n\
    \                if (value < smallest) then\n                    smallest = value\n\
    \                    smallest_index = index\n                end\n           \
    \ end\n        end\n    end\n    if (is_found) then\n        res[1] = smallest\n\
    \        res[2] = smallest_index\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp8idu5_.lua:55:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwp8idu5_.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local tmp = {}\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 then\n      table.insert(tmp, {v, i})\n\
    \    end\n  end\n  table.sort(tmp, function(a, b) return a[1] < b[1] end)\n  return\
    \ tmp[1] or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1kns3vzl.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp1kns3vzl.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local arrOfEven = {}\n  local\
    \ arrOfOdd = {}\n  local result = {}\n  local flag = false\n  local odd_ind =\
    \ 0\n  local even_ind = 0\n  for i, v in ipairs(arr) do\n    if v%2 == 0 then\n\
    \      table.insert(arrOfEven,v)\n      flag = true\n      even_ind = i\n    else\n\
    \      table.insert(arrOfOdd,v)\n      odd_ind = i\n    end\n  end\n  if flag\
    \ == true then\n    if odd_ind > even_ind then\n      table.insert(result,table.remove(arrOfEven,1))\n\
    \      table.insert(result,even_ind)\n    else\n      table.insert(result,table.remove(arrOfOdd,1))\n\
    \      table.insert(result,odd_ind)\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq524kthd.lua:58:\
    \ expected: {2, 1}\nactual: {4, 2}\nstack traceback:\n\t/tmp/tmpq524kthd.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal min, min_ind = math.huge,\
    \ math.huge\n\tfor i,v in ipairs(arr) do\n\t\tif v > 0 and v % 2 == 0 and v <\
    \ min then\n\t\t\tmin, min_ind = v, i\n\t\tend\n\tend\n\treturn min < math.huge\
    \ and {min, min_ind} or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzotrtwqb.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpzotrtwqb.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local max_even_value = math.huge\n\
    \  local result_index\n  for i, value in ipairs(arr) do\n    if value % 2 == 0\
    \ and value < max_even_value then\n      max_even_value = value\n      result_index\
    \ = i\n    end\n  end\n  if max_even_value == math.huge then\n    return {}\n\
    \  end\n  return {max_even_value, result_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uok7j24.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3uok7j24.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min_even_value, min_even_idx\
    \ = math.huge, math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 ==\
    \ 0 and v < min_even_value then\n            min_even_value = v\n            min_even_idx\
    \ = i\n        end\n    end\n    if min_even_value == math.huge then\n       \
    \ return {}\n    end\n    return {min_even_value, min_even_idx}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy5vjt3mt.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpy5vjt3mt.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function is_even(n)\n\
    \    return n % 2 == 0\n  end\n  local function select_pluck(t, smallest_index,\
    \ smallest_value)\n    local smallest_value_at_index = t[smallest_index]\n   \
    \ if is_even(smallest_value_at_index) then\n      return {smallest_value_at_index,\
    \ smallest_index}\n    end\n    return {smallest_value, smallest_index}\n  end\n\
    \  local function get_smallest_even(t)\n    local smallest_index, smallest_value\
    \ = 1, t[1]\n    for index, value in ipairs(t) do\n      if value < smallest_value\
    \ then\n        smallest_index, smallest_value = index, value\n      end\n   \
    \ end\n    return select_pluck(t, smallest_index, smallest_value)\n  end\n  local\
    \ function get_smallest_even_with_even(t)\n    local smallest_index, smallest_value\
    \ = 1, t[1]\n    for index, value in ipairs(t) do\n      if is_even(value) and\
    \ value < smallest_value then\n        smallest_index, smallest_value = index,\
    \ value\n      end\n    end\n    return select_pluck(t, smallest_index, smallest_value)\n\
    \  end\n  if #arr == 0 then\n    return {}\n  end\n  if is_even(arr[1]) then\n\
    \    return get_smallest_even_with_even(arr)\n  end\n  return get_smallest_even(arr)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4375lj1.lua:67:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpx4375lj1.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest = nil\n  \
    \  local smallest_index = nil\n    for i, v in ipairs(arr) do\n        if v %\
    \ 2 == 0 then\n            if smallest == nil or v < smallest then\n         \
    \       smallest = v\n                smallest_index = i\n            end\n  \
    \      end\n    end\n    if smallest == nil then\n        return {}\n    else\n\
    \        return {smallest, smallest_index}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6nsa85f.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpx6nsa85f.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local pos = 0\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and arr[i]\
    \ < min then\n            min = arr[i]\n            pos = i\n        end\n   \
    \ end\n    if min == math.huge then\n        return {}\n    end\n    return {min,\
    \ pos}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yeugyh3.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4yeugyh3.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value, min_index\n\
    \  for i, val in ipairs(arr) do\n    if val % 2 == 0 then\n      if not min_even_value\
    \ or val < min_even_value then\n        min_even_value = val\n        min_index\
    \ = i\n      end\n    end\n  end\n  return {min_even_value, min_index}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qlob1k2.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2qlob1k2.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if not arr then return {}\
    \ end\n    local min_index, min_value = -1, -1\n    for i, v in ipairs(arr) do\n\
    \        if (v % 2 == 0) and (min_value == -1 or v < min_value) then\n       \
    \     min_index, min_value = i, v\n        end\n    end\n    return {min_value,\
    \ min_index}\nend\nreturn pluck\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzh_3d1vg.lua:37: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value, min_index\n\
    \  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if not min_value or\
    \ arr[i] < min_value then\n        min_value = arr[i]\n        min_index = i\n\
    \      end\n    end\n  end\n  return {min_value, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9u9vp8_k.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp9u9vp8_k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpg8j9pf.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpxpg8j9pf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value = nil\n\
    \  local smallest_index = nil\n  for i,v in ipairs(arr) do\n    if v % 2 == 0\
    \ then\n      if smallest_value == nil or v < smallest_value then\n        smallest_value\
    \ = v\n        smallest_index = i\n      end\n    end\n  end\n  if smallest_value\
    \ == nil then\n    return {}\n  else\n    return {smallest_value, smallest_index}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssm4nyjv.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpssm4nyjv.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local minIndex = 0\n    local\
    \ minValue = 0\n    local foundEven = false\n    for i, v in ipairs(arr) do\n\
    \        if (foundEven == false) then\n            if (v % 2 == 0) then\n    \
    \            minIndex = i\n                minValue = v\n                foundEven\
    \ = true\n            end\n        else\n            if (v % 2 == 0) then\n  \
    \              if (v < minValue) then\n                    minIndex = i\n    \
    \                minValue = v\n                end\n            end\n        end\n\
    \    end\n    return foundEven and {minValue, minIndex} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rra2pks.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2rra2pks.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n  local res\
    \ = {}\n  for i, val in ipairs(arr) do\n    if val % 2 == 0 then\n      evens[#evens\
    \ + 1] = {val, i}\n    end\n  end\n  if #evens == 0 then\n    return res\n  end\n\
    \  local min = evens[1][1]\n  local idx = evens[1][2]\n  for _, val in ipairs(evens)\
    \ do\n    if val[1] < min then\n      min = val[1]\n      idx = val[2]\n    end\n\
    \  end\n  res[1] = min\n  res[2] = idx\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dw_d_si.lua:53:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp1dw_d_si.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local pos = 0\n  local even\
    \ = 0\n  local res = {}\n  for i, v in ipairs(arr) do\n    if v ~= 0 and math.mod(v,\
    \ 2) == 0 then\n      if even == 0 then\n        even = v\n        pos = i\n \
    \     elseif v < even then\n        even = v\n        pos = i\n      end\n   \
    \ end\n  end\n  if even == 0 then\n    return {}\n  end\n  res[1] = even\n  res[2]\
    \ = pos\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpan7xbvh3.lua:31:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpan7xbvh3.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpan7xbvh3.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    return {2, 1}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqy99ea8.lua:35:\
    \ expected: {}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpsqy99ea8.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = nil\n  local\
    \ smallestIndex = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n\
    \      if smallest == nil or v < smallest then\n        smallest = v\n       \
    \ smallestIndex = i\n      end\n    end\n  end\n  if smallest ~= nil then\n  \
    \  return {smallest, smallestIndex}\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ape2q79.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6ape2q79.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal evenArr = {}\n\tlocal\
    \ arrSize = #arr\n\tfor i = 1, arrSize do\n\t\tif arr[i] % 2 == 0 then\n\t\t\t\
    evenArr[#evenArr + 1] = {arr[i], i}\n\t\tend\n\tend\n\tif #evenArr == 0 then\n\
    \t\treturn {}\n\tend\n\ttable.sort(evenArr, function(t1, t2)\n\t\treturn t1[1]\
    \ < t2[1]\n\tend)\n\tlocal ans = evenArr[1]\n\tfor i = 2, #evenArr do\n\t\tif\
    \ evenArr[i][1] == ans[1] then\n\t\t\tif evenArr[i][2] < ans[2] then\n\t\t\t\t\
    ans = evenArr[i]\n\t\t\tend\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn ans\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv91ep1ig.lua:56:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpv91ep1ig.lua:56:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smin\n  local imin\n\
    \  for i = 1, #arr do\n    local val = arr[i]\n    if val % 2 == 0 then\n    \
    \  if smin == nil or val < smin then\n        smin = val\n        imin = i\n \
    \     end\n    end\n  end\n  if smin then\n    return {smin, imin}\n  else\n \
    \   return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7kx5wcb.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpg7kx5wcb.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value = math.huge\n\
    \  local smallest_index = math.huge\n  for i, v in ipairs(arr) do\n    if v %\
    \ 2 == 0 and v < smallest_value then\n      smallest_value = v\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == math.huge then\n    return {}\n\
    \  end\n  return {smallest_value, smallest_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvp2hytw.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpbvp2hytw.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal minimum_even = nil\n\t\
    local minimum_even_i = 0\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\
    \t\t\tif minimum_even == nil or v < minimum_even then\n\t\t\t\tminimum_even =\
    \ v\n\t\t\t\tminimum_even_i = i\n\t\t\tend\n\t\tend\n\tend\n\tif minimum_even\
    \ == nil then\n\t\treturn {}\n\telse\n\t\treturn {minimum_even, minimum_even_i}\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmiyitq8u.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpmiyitq8u.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code goes here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpeyiefd.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmprpeyiefd.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest = nil\n  \
    \  local smallestIndex = nil\n    for i, v in ipairs(arr) do\n        if (v %\
    \ 2 == 0) then\n            if (smallest == nil) then\n                smallest\
    \ = v\n                smallestIndex = i\n            elseif (v < smallest) then\n\
    \                smallest = v\n                smallestIndex = i\n           \
    \ end\n        end\n    end\n    if (smallest == nil) then\n        return {}\n\
    \    else\n        return {smallest, smallestIndex}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyxvs_e1.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpsyxvs_e1.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local minIndex = 0\n  local\
    \ minVal = nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if\
    \ minVal == nil or v < minVal then\n        minVal = v\n        minIndex = i\n\
    \      end\n    end\n  end\n  if minVal then\n    return {minVal, minIndex}\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44obr5r1.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp44obr5r1.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_index, smallest_value\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not smallest_value\
    \ or v < smallest_value then\n        smallest_value = v\n        smallest_index\
    \ = i\n      end\n    end\n  end\n  return {smallest_value, smallest_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5033auv2.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5033auv2.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_value = math.huge\n\
    \    local smallest_index = math.huge\n    for i, v in ipairs(arr) do\n      \
    \  if v % 2 == 0 and v < smallest_value then\n            smallest_value = v\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ math.huge then\n        return {}\n    end\n    return {smallest_value, smallest_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm8ko4lz.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpdm8ko4lz.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallNum = 10000\n  local\
    \ smallIdx = 10000\n  for i, num in ipairs(arr) do\n    if num % 2 == 0 and num\
    \ < smallNum then\n      smallNum = num\n      smallIdx = i\n    end\n  end\n\
    \  if smallNum == 10000 then\n    return {}\n  else\n    return {smallNum, smallIdx}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp164fh6dn.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp164fh6dn.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = math.huge\n \
    \   local idx = nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 and arr[i]\
    \ < min then\n            min = arr[i]\n            idx = i\n        end\n   \
    \ end\n    if idx then\n        return {min, idx}\n    else\n        return {}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnz7ju6r.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpgnz7ju6r.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, minInd = math.huge,\
    \ nil\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n    \
    \  min, minInd = v, i\n    end\n  end\n  return minInd and {min, minInd} or {}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptei3xwcx.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmptei3xwcx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {}\n  local odd\
    \ = {}\n  for k, v in ipairs(arr) do\n    if v % 2 == 0 then\n      even[k] =\
    \ v\n    else\n      odd[k] = v\n    end\n  end\n  if #even == 0 then\n    return\
    \ {}\n  end\n  local minVal = math.min(unpack(even))\n  local minValIndex = nil\n\
    \  for k, v in pairs(even) do\n    if v == minVal then\n      minValIndex = k\n\
    \      break\n    end\n  end\n  return {minVal, minValIndex}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplr38inai.lua:39:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmplr38inai.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmplr38inai.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt024pg0v.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpt024pg0v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {}\n  local min\
    \ = math.huge\n  local idx = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      even[#even + 1] = {arr[i], i}\n      if arr[i] < min then\n        min\
    \ = arr[i]\n        idx = i\n      end\n    end\n  end\n  if #even == 0 then\n\
    \    return {}\n  end\n  return even[idx]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dt0vmkf.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp4dt0vmkf.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest_value = arr[1]\n\
    \  local smallest_value_index = 1\n  for i = 1, #arr do\n    if arr[i] % 2 ==\
    \ 0 and arr[i] < smallest_value then\n      smallest_value = arr[i]\n      smallest_value_index\
    \ = i\n    end\n  end\n  if smallest_value % 2 == 0 then\n    return {smallest_value,\
    \ smallest_value_index}\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpejys8yt8.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpejys8yt8.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min,index\n  for i,v\
    \ in ipairs(arr) do\n    if v%2==0 then\n      if not min or v<min then\n    \
    \    min=v\n        index=i\n      end\n    end\n  end\n  return min and {min,index}\
    \ or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1ymtipa.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpn1ymtipa.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local found, index, min =\
    \ false, 1, -1\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n    \
    \        if not found then\n                found = true\n                min\
    \ = arr[i]\n                index = i\n            else\n                if arr[i]\
    \ < min then\n                    min = arr[i]\n                    index = i\n\
    \                end\n            end\n        end\n    end\n    if found then\n\
    \        return {min, index}\n    else\n        return {}\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp664u9umh.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp664u9umh.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local sorted = {}\n    local\
    \ min\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n          \
    \  if not min or v < min then\n                min = v\n            end\n    \
    \        if not sorted[v] then\n                sorted[v] = {}\n            end\n\
    \            table.insert(sorted[v], i)\n        end\n    end\n    if min then\n\
    \        local min_i = sorted[min][1]\n        return {min, min_i}\n    end\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ksx_luo.lua:50:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6ksx_luo.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- TODO: implement pluck\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5cyl32v.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpu5cyl32v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local function smallestEven(arr)\n\
    \    local i, v, evens = 0, 0, {}\n    for i, v in ipairs(arr) do\n      if v\
    \ % 2 == 0 then\n        table.insert(evens, {v, i})\n      end\n    end\n   \
    \ table.sort(evens, function(a, b) return a[1] < b[1] end)\n    return evens[1]\n\
    \  end\n  local even = smallestEven(arr)\n  return even or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ior7vl2.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp0ior7vl2.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallest_even_value\
    \ = nil\n    local smallest_even_index = nil\n    for i,v in ipairs(arr) do\n\
    \        if v % 2 == 0 then\n            if smallest_even_value == nil or v <\
    \ smallest_even_value then\n                smallest_even_value = v\n        \
    \        smallest_even_index = i\n            end\n        end\n    end\n    if\
    \ smallest_even_value ~= nil then\n        return {smallest_even_value, smallest_even_index}\n\
    \    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3iutsmh.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpd3iutsmh.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\t-- use the first odd value\
    \ as pivot to seperate even and odd\n\t-- since we want the smallest even value\
    \ and it's index,\n\t-- we can just seperate the even and odd to two groups\n\t\
    -- and just pick the first one in the even group\n\tlocal even, odd = {}, {}\n\
    \tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 then\n\t\t\teven[#even + 1] =\
    \ {v, i}\n\t\telse\n\t\t\todd[#odd + 1] = {v, i}\n\t\tend\n\tend\n\ttable.sort(even,\
    \ function(a, b) return a[1] < b[1] end)\n\treturn even[1] or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetfgxijp.lua:46:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpetfgxijp.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest = {nil, nil}\n\
    \  local i = 1\n  while i <= #arr do\n    if arr[i] % 2 == 0 then\n      if smallest[1]\
    \ == nil or arr[i] < smallest[1] then\n        smallest = {arr[i], i}\n      end\n\
    \    end\n    i = i + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgygpypvr.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpgygpypvr.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even_values = {}\n  local\
    \ index = 1\n  for _, v in ipairs(arr) do\n    if v % 2 == 0 then\n      even_values[#even_values\
    \ + 1] = {v, index}\n    end\n    index = index + 1\n  end\n  if #even_values\
    \ == 0 then\n    return {}\n  end\n  table.sort(even_values, function(t1, t2)\n\
    \    return t1[1] < t2[1]\n  end)\n  return even_values[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1_jrnsb.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpp1_jrnsb.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local plucked = {}\n    local\
    \ last\n    local index\n    for i,v in ipairs(arr) do\n        if v % 2 == 0\
    \ then\n            if not last or v < last then\n                last = v\n \
    \               index = i\n            end\n        end\n    end\n    if last\
    \ then\n        plucked = {last, index}\n    end\n    return plucked\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvamtkfji.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpvamtkfji.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, index = math.huge,\
    \ -1\n  for i,v in ipairs(arr) do\n    if v % 2 == 0 and v < min then\n      min,\
    \ index = v, i\n    end\n  end\n  return index > 0 and {min, index} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs7emfez.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpbs7emfez.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpg8j9pf.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpxpg8j9pf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if type(arr) ~= 'table' then\n\
    \    return {}\n  end\n  local min_even_value = math.huge\n  local pos = nil\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < min_even_value then\n\
    \      min_even_value = v\n      pos = i\n    end\n  end\n  if pos == nil then\n\
    \    return {}\n  end\n  return {min_even_value, pos}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz64f4s_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpuz64f4s_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyy3_ta0.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpsyy3_ta0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local result = {}\n  for i\
    \ = 1, #arr do\n    if arr[i] % 2 == 0 then\n      table.insert(result, {arr[i],\
    \ i})\n    end\n  end\n  table.sort(result, function(a, b) return a[1] < b[1]\
    \ end)\n  return result[1] or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3bjlsin.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpp3bjlsin.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local smallestEven = nil\n\
    \    local smallestEvenIndex = nil\n    for i, n in ipairs(arr) do\n        if\
    \ n % 2 == 0 then\n            if smallestEven == nil or n < smallestEven then\n\
    \                smallestEven = n\n                smallestEvenIndex = i\n   \
    \         end\n        end\n    end\n    if smallestEven == nil then\n       \
    \ return {}\n    else\n        return {smallestEven, smallestEvenIndex}\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mm4rm__.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3mm4rm__.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ min_index = math.huge\n  for i, val in ipairs(arr) do\n    if math.fmod(val,\
    \ 2) == 0 and val < min then\n      min = val\n      min_index = i\n    end\n\
    \  end\n  if min == math.huge then\n    return {}\n  end\n  return {min, min_index}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_e_tndr.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpa_e_tndr.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local sme, sie = nil, 0\n \
    \ for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if sme == nil or v\
    \ < sme then\n        sme = v\n        sie = i\n      end\n    end\n  end\n  return\
    \ sme == nil and {} or {sme, sie}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1qt27yd.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpm1qt27yd.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal res = {}\n\tlocal least\
    \ = math.huge\n\tlocal least_index = math.huge\n\tfor k, v in ipairs(arr) do\n\
    \t\tif v % 2 == 0 and v < least then\n\t\t\tleast = v\n\t\t\tleast_index = k\n\
    \t\tend\n\tend\n\tres[1] = least\n\tres[2] = least_index\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpruds0xrt.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpruds0xrt.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallest, smallest_index\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not smallest or\
    \ v < smallest then\n        smallest = v\n        smallest_index = i\n      end\n\
    \    end\n  end\n  return smallest and {smallest, smallest_index} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxddourck.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxddourck.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if not arr or #arr == 0 then\
    \ return {} end\n  local value\n  local index\n  for i, v in ipairs(arr) do\n\
    \    if v % 2 == 0 then\n      if not value or v < value then\n        value =\
    \ v\n        index = i\n      end\n    end\n  end\n  if not value then return\
    \ {} end\n  return {value, index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0a1e2op.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpb0a1e2op.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local minEvenIdx, minEvenValue\n\
    \    for i, v in ipairs(arr) do\n        if (v % 2 == 0) and ((minEvenValue ==\
    \ nil) or (v < minEvenValue)) then\n            minEvenIdx = i\n            minEvenValue\
    \ = v\n        end\n    end\n    return minEvenIdx and {minEvenValue, minEvenIdx}\
    \ or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt642rjz8.lua:40:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpt642rjz8.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value, min_index,\
    \ min_exists = math.huge, math.huge, false\n  for i, value in ipairs(arr) do\n\
    \    if value % 2 == 0 and (value < min_value or (value == min_value and i < min_index))\
    \ then\n      min_value, min_index, min_exists = value, i, true\n    end\n  end\n\
    \  return min_exists and {min_value, min_index} or {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphviss9mw.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmphviss9mw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local res = {}\n  local smallest\
    \ = math.huge\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 and v < smallest\
    \ then\n      smallest = v\n      res = {v, i}\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaccb8w9f.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpaccb8w9f.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\n  local\
    \ node = {}\n  local res = {}\n  local index = 10001\n  for i, n in ipairs(arr)\
    \ do\n    if n % 2 == 0 then\n      if node[1] == nil then\n        node[1] =\
    \ n\n        node[2] = i\n      elseif node[1] > n then\n        node[1] = n\n\
    \        node[2] = i\n      end\n    end\n  end\n  if node[1] == nil then\n  \
    \  return {}\n  else\n    return node\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c86qj_g.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp2c86qj_g.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_value, min_index\n\
    \  for i,v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not min_value or\
    \ v < min_value then\n        min_value = v\n        min_index = i\n      end\n\
    \    end\n  end\n  return min_value and {min_value, min_index} or {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2hht78k.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpy2hht78k.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even = 0\n  local index\
    \ = 0\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if v <= even\
    \ then\n        even = v\n        index = i\n      end\n    end\n  end\n  if even\
    \ > 0 then\n    return {even, index}\n  else\n    return {}\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92dz9aq8.lua:47:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmp92dz9aq8.lua:47: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- Your code here\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a0p1bll.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmp8a0p1bll.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local res = {-1, -1}\n  for\
    \ i,v in ipairs(arr) do\n    if v % 2 == 0 and v < res[1] then\n      res = {v,\
    \ i}\n    end\n  end\n  if res[1] == -1 then\n    return {}\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzs0xzk_.lua:42:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmprzs0xzk_.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local evens = {}\n  local even_indexes\
    \ = {}\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      evens[#evens\
    \ + 1] = v\n      even_indexes[#even_indexes + 1] = i\n    end\n  end\n  if #evens\
    \ == 0 then\n    return {}\n  end\n  local smallest_even = evens[1]\n  local smallest_even_index\
    \ = even_indexes[1]\n  for i, v in ipairs(evens) do\n    if v < smallest_even\
    \ then\n      smallest_even = v\n      smallest_even_index = even_indexes[i]\n\
    \    end\n  end\n  return {smallest_even, smallest_even_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegk4ndjq.lua:52:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpegk4ndjq.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even\n  local index\n\
    \  for k, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if not even or v\
    \ < even then\n        even = v\n        index = k\n      end\n    end\n  end\n\
    \  return index and {even, index} or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx4sdnno.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpjx4sdnno.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    return nill\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplzject4v.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmplzject4v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local t = {}\n  for i,v in\
    \ ipairs(arr) do\n    if v%2 == 0 then\n      table.insert(t, {v, i})\n    end\n\
    \  end\n  if #t == 0 then\n    return {}\n  end\n  table.sort(t, function(a,b)\
    \ return a[1] < b[1] end)\n  return t[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj81dkcxr.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj81dkcxr.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local res, res_idx = math.huge,\
    \ math.huge\n  for idx, value in ipairs(arr) do\n    if value % 2 == 0 and value\
    \ < res then\n      res, res_idx = value, idx\n    end\n  end\n  return res ~=\
    \ math.huge and {res, res_idx} or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwzhoobd8.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwzhoobd8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt024pg0v.lua:33:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpt024pg0v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local m, index = math.huge, 1\n  for i, v in ipairs(arr) do\n    if v\
    \ % 2 == 0 and v < m then\n      m = v\n      index = i\n    end\n  end\n  if\
    \ m == math.huge then return {} end\n  return {m, index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzaahn8s.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxzaahn8s.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpskbzrs6j.lua:32:\
    \ expected: {2, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpskbzrs6j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if #arr < 1 then return {}\
    \ end\n    local evens = filter(arr, function(x) return x % 2 == 0 end)\n    local\
    \ min = min_by(evens, function(x) return x end)\n    local min_index = fp.find_index(arr,\
    \ function(x) return x == min end)\n    return {min, min_index}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vp7zcwq.lua:28:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmp6vp7zcwq.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp6vp7zcwq.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local n, i = math.huge, 0\n\
    \  for k, v in ipairs(arr) do\n    if v % 2 == 0 and v < n then\n      n, i =\
    \ v, k\n    end\n  end\n  return {n, i}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_w7txnp.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmph_w7txnp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even_min = math.huge\n\
    \  local even_min_idx = -1\n  for idx, val in ipairs(arr) do\n    if val % 2 ==\
    \ 0 and val < even_min then\n      even_min = val\n      even_min_idx = idx\n\
    \    end\n  end\n  if even_min_idx < 0 then\n    return {}\n  end\n  return {even_min,\
    \ even_min_idx}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubirmh68.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpubirmh68.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local function is_even(x)\n\
    \        return (x % 2) == 0\n    end\n    local res = {}\n    local idx = #arr\n\
    \    for i = 1, #arr do\n        if is_even(arr[i]) then\n            if #res\
    \ == 0 then\n                res = {arr[i], i}\n            elseif arr[i] < res[1]\
    \ then\n                res = {arr[i], i}\n            end\n        end\n    end\n\
    \    return res\nend\npluck({5, 0, 3, 0, 4, 2})\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5pqs66z.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpp5pqs66z.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    -- Returns the smallest even\
    \ value,\n    -- and the index of that value.\n    -- If there are no even values,\
    \ returns nil.\n    local function smallest_even_value(arr)\n        local min_val,\
    \ min_idx = nil, nil\n        for i = 1, #arr do\n            local value = arr[i]\n\
    \            if value % 2 == 0 then\n                if min_val == nil or value\
    \ < min_val then\n                    min_val, min_idx = value, i\n          \
    \      end\n            end\n        end\n        return min_val, min_idx\n  \
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbsn8t4re.lua:56: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local res = {math.huge, math.huge}\n\
    \  for k, v in ipairs(arr) do\n    if v % 2 == 0 and v < res[1] then\n      res\
    \ = {v, k}\n    end\n  end\n  return res[1] == math.huge and {} or res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit3r1hr2.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpit3r1hr2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if arr == nil or #arr == 0\
    \ then\n    return {};\n  end\n  local min = math.huge;\n  local index = math.huge;\n\
    \  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min then\n      min\
    \ = arr[i];\n      index = i;\n    end\n  end\n  if min == math.huge then\n  \
    \  return {};\n  end\n  return {min, index};\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwel3_hzn.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpwel3_hzn.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal index, value, evens =\
    \ nil, math.huge, {}\n\tfor i, n in ipairs(arr) do\n\t\tif n > 0 and n % 2 ==\
    \ 0 and n < value then\n\t\t\tvalue = n\n\t\t\tindex = i\n\t\telseif n > 0 and\
    \ n % 2 == 0 then\n\t\t\ttable.insert(evens, {n, i})\n\t\tend\n\tend\n\tif #evens\
    \ == 0 then\n\t\treturn {}\n\telseif index then\n\t\treturn {index = index, value\
    \ = value}\n\telse\n\t\treturn evens[1]\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwc9i8n9j.lua:48:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmpwc9i8n9j.lua:48: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local s = arr[1]\n    local\
    \ ss = 1\n    for i = 2, #arr do\n        if (s > arr[i]) and (arr[i] % 2 == 0)\
    \ then\n            s = arr[i]\n            ss = i\n        end\n    end\n   \
    \ if (s % 2 == 0) then\n        return {s, ss}\n    else\n        return {}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwzmt4xt.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmprwzmt4xt.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local tmparr = {}\n    for\
    \ i,v in ipairs(arr) do\n        if v%2 == 0 then\n            table.insert(tmparr,{v,i})\n\
    \        end\n    end\n    if next(tmparr) == nil then\n        return {}\n  \
    \  end\n    local tmp = tmparr[1]\n    for i,v in ipairs(tmparr) do\n        if\
    \ v[1] < tmp[1] then\n            tmp = v\n        end\n    end\n    return tmp\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2e9y6z7.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpw2e9y6z7.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local even_index = nil\n\
    \    local even_value = nil\n    for i, v in ipairs(arr) do\n        if v % 2\
    \ == 0 then\n            if even_value == nil or v < even_value then\n       \
    \         even_value = v\n                even_index = i\n            end\n  \
    \      end\n    end\n    if even_index ~= nil then\n        return {even_value,\
    \ even_index}\n    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1sk2ota1.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp1sk2ota1.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ minind = 0\n  for i, v in ipairs(arr) do\n    if v > 0 and v % 2 == 0 and v\
    \ < min then\n      min = v\n      minind = i\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  end\n  return {min, minind}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn4uvofl.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpfn4uvofl.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local minEven = math.huge\n\
    \  local result = {}\n  for i, val in ipairs(arr) do\n    if val % 2 == 0 and\
    \ val < minEven then\n      minEven = val\n      result = {val, i}\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9t_kb2z9.lua:41:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp9t_kb2z9.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local l = #arr\n  local smallest_even_value,\
    \ smallest_even_index, val\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyxtgm6f8.lua:43: ''end'' expected (to close ''function'' at
    line 26) near <eof>

    '
  stdout: ''
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local value, index = math.huge,\
    \ math.huge\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 and v < value\
    \ then\n            value, index = v, i\n        end\n    end\n    return value\
    \ == math.huge and {} or {value, index}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9x2g5oo1.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp9x2g5oo1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local evens = {}\n    local\
    \ even_index = 1\n    for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n\
    \            evens[even_index] = {v, i}\n            even_index = even_index +\
    \ 1\n        end\n    end\n    if #evens == 0 then\n        return {}\n    end\n\
    \    table.sort(evens, function(a, b) return a[1] < b[1] end)\n    return evens[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaje2x8vs.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpaje2x8vs.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local min = nil\n    local\
    \ index = nil\n    for i,v in ipairs(arr) do\n        if v % 2 == 0 then\n   \
    \         if not min or v < min then\n                min = v\n              \
    \  index = i\n            end\n        end\n    end\n    if min and index then\n\
    \        return {min, index}\n    else\n        return {}\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ssnux3_.lua:47:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp9ssnux3_.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  -- your code here\n  local\
    \ min\n  local min_i\n  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n \
    \     if min == nil or v < min then\n        min = v\n        min_i = i\n    \
    \  end\n    end\n  end\n  if min ~= nil then\n    return {min, min_i}\n  else\n\
    \    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lgkc7p7.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6lgkc7p7.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local has_even, min_even_idx\
    \ = false, nil\n    for idx, value in ipairs(arr) do\n        if (value % 2 ==\
    \ 0) then\n            if (not has_even) then\n                has_even = true\n\
    \                min_even_idx = idx\n            elseif (value < arr[min_even_idx])\
    \ then\n                min_even_idx = idx\n            end\n        end\n   \
    \ end\n    if (has_even) then\n        return {arr[min_even_idx], min_even_idx}\n\
    \    else\n        return {}\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdw81wxu.lua:48:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpcdw81wxu.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min, min_idx = math.huge,\
    \ nil\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 and arr[i] < min then\n  \
    \    min, min_idx = arr[i], i\n    end\n  end\n  return min_idx and {min, min_idx}\
    \ or {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj4fqy12.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpyj4fqy12.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal smallest = arr[1]\n\t\
    local idx = 1\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 and v < smallest\
    \ then\n\t\t\tsmallest = v\n\t\t\tidx = i\n\t\tend\n\tend\n\tif smallest % 2 ==\
    \ 0 then\n\t\treturn {smallest, idx}\n\telse\n\t\treturn {}\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n \
    \   lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxxf07rq.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpuxxf07rq.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if not arr then return {} end\n\
    \  local result = {}\n  local min, index\n  for i,v in ipairs(arr) do\n    if\
    \ (v % 2 == 0) and ((not min) or (v < min)) then\n      min = v\n      index =\
    \ i\n    end\n  end\n  if min then table.insert(result, min) end\n  if index then\
    \ table.insert(result, index) end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7nwpwcue.lua:44:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp7nwpwcue.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local even = {arr[1]}\n  local\
    \ index = {1}\n  local size = #arr\n  local function is_even(value)\n    return\
    \ value % 2 == 0\n  end\n  for i = 2, size do\n    if arr[i] < even[1] and is_even(arr[i])\
    \ then\n      even = {arr[i]}\n      index = {i}\n    elseif arr[i] == even[1]\
    \ and is_even(arr[i]) then\n      table.insert(even, arr[i])\n      table.insert(index,\
    \ i)\n    end\n  end\n  if not is_even(even[1]) then\n    return {}\n  end\n \
    \ return {even[1], index[1]}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n \
    \   lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnxgmhqg.lua:51:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmplnxgmhqg.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local result = {}\n  for i,v\
    \ in ipairs(arr) do\n    if v % 2 == 0 then\n      if #result == 0 then\n    \
    \    result = {v, i}\n      elseif v < result[1] then\n        result = {v, i}\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4ax3m3m.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpj4ax3m3m.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local smallestEven = {}\n \
    \ for i, v in ipairs(arr) do\n    if (v % 2 == 0) then\n      if (#smallestEven\
    \ == 0) then\n        smallestEven = {v, i}\n      elseif (v < smallestEven[1])\
    \ then\n        smallestEven = {v, i}\n      end\n    end\n  end\n  return smallestEven\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpixk0oqpc.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpixk0oqpc.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min_even_value = math.huge\n\
    \  local min_even_value_index = math.huge\n  for i, n in ipairs(arr) do\n    if\
    \ n % 2 == 0 and n < min_even_value then\n      min_even_value = n\n      min_even_value_index\
    \ = i\n    end\n  end\n  if min_even_value == math.huge then\n    return {}\n\
    \  else\n    return {min_even_value, min_even_value_index}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1sw6mhd.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpv1sw6mhd.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    local minEven, minEvenIdx\n\
    \    for idx, node in ipairs(arr) do\n        if node % 2 == 0 then\n        \
    \    if not minEven or node < minEven then\n                minEven = node\n \
    \               minEvenIdx = idx\n            end\n        end\n    end\n    return\
    \ minEven and {minEven, minEvenIdx} or {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc15tjc3a.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpc15tjc3a.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj539j_c.lua:33:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmptj539j_c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n    if not arr or #arr == 0 then\n\
    \        return {}\n    end\n    local least_value, least_index = nil, nil\n \
    \   for i, v in ipairs(arr) do\n        if v % 2 == 0 then\n            if not\
    \ least_value or v < least_value then\n                least_value = v\n     \
    \           least_index = i\n            end\n        end\n    end\n    if least_value\
    \ then\n        return {least_value, least_index}\n    else\n        return {}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcdz4o1h.lua:49:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmppcdz4o1h.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr < 1 then return {}\
    \ end\n  local minEven = math.huge\n  local index = math.huge\n  for i,v in ipairs(arr)\
    \ do\n    if v%2 == 0 and v < minEven then\n      minEven = v\n      index = i\n\
    \    end\n  end\n  if minEven == math.huge then return {} end\n  return {minEven,\
    \ index}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pluck\n    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkcxctxe.lua:43:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpmkcxctxe.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local r = {}\n  local z = {}\n\
    \  for i, v in ipairs(arr) do\n    if v % 2 == 0 then\n      if z[1] == nil or\
    \ z[1] > v then\n        z = {v, i}\n      end\n    end\n  end\n  return z\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fn4l9qv.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp5fn4l9qv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptj539j_c.lua:33:\
    \ expected: {2, 1}\nactual: {}\nstack traceback:\n\t/tmp/tmptj539j_c.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n\tlocal min, min_i = math.huge,\
    \ nil\n\tfor i, v in ipairs(arr) do\n\t\tif v % 2 == 0 and v < min then\n\t\t\t\
    min, min_i = v, i\n\t\tend\n\tend\n\treturn min_i and {min, min_i} or {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wggolj7.lua:39:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp_wggolj7.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  local min = math.huge\n  local\
    \ minIdx = 0\n  for idx,val in ipairs(arr) do\n    if val % 2 == 0 and val < min\
    \ then\n      min = val\n      minIdx = idx\n    end\n  end\n  if min == math.huge\
    \ then\n    return {}\n  else\n    return {min, minIdx}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pluck\n    lu.assertEquals(candidate({4,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5, 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 0, 5, 3}), {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4,\
    \ 1})\n    lu.assertEquals(candidate({7, 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7,\
    \ 9, 7, 1}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uo_d9sk.lua:45:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp6uo_d9sk.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
- exit_code: 1
  program: "-- \"Given a table representing a branch of a tree that has non-negative\
    \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n--\
    \ The plucked node should be the node with the smallest even value.\n-- If multiple\
    \ nodes with the same smallest even value are found return the node that has smallest\
    \ index.\n-- The plucked node should be returned in a table, [ smalest_value,\
    \ its index ],\n-- If there are no even values or the given table is empty, return\
    \ [].\n-- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has\
    \ the smallest even value, and 2 has the smallest index.\n-- Example 2:\n-- >>>\
    \ pluck({1, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example\
    \ 4:\n-- >>> pluck({5, 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest\
    \ value, but  there are two zeros,\n-- so we will choose the first zero, which\
    \ has the smallest index.\n-- Constraints:\n-- * 1 <= nodes.length <= 10000\n\
    -- * 0 <= node.value\nlocal function pluck(arr)\n  if #arr == 0 then return {}\
    \ end\n  local res = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then table.insert(res,\
    \ arr[i]) end\n  end\n  if #res == 0 then return {} end\n  table.sort(res)\n \
    \ for i = 1, #arr do\n    if arr[i] == res[1] then return {res[1], i} end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
    \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
    \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}),\
    \ {0, 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
    \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lm_8wyj.lua:42:\
    \ expected: {2, 1}\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmp3lm_8wyj.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014633
