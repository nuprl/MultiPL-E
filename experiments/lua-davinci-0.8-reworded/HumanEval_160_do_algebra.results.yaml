name: HumanEval_160_do_algebra
language: lua
results:
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local n = #operator\n  local result = 0\n  result = operand[1]\n\
    \  for i = 1, n do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqaiw2ef.lua:43:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpbqaiw2ef.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n   local res = operand[1]\n   for i = 1, #operator do\n      if operator[i]\
    \ == '+' then\n         res = res + operand[i+1]\n      elseif operator[i] ==\
    \ '-' then\n         res = res - operand[i+1]\n      elseif operator[i] == '*'\
    \ then\n         res = res * operand[i+1]\n      elseif operator[i] == '//' then\n\
    \         res = math.floor(res / operand[i+1])\n      elseif operator[i] == '**'\
    \ then\n         res = res ^ operand[i+1]\n      end\n   end\n   return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp506iv0cd.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp506iv0cd.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpauauc5po.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpauauc5po.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = result // operand[i + 1]\n        elseif operator[i] == '**' then\n      \
    \      result = result ^ operand[i + 1]\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t284bjc.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_t284bjc.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n\tlocal op = {['+'] = function(a, b) return a + b end,\n\t\t\t\t\t\
    \t\t['-'] = function(a, b) return a - b end,\n\t\t\t\t\t\t\t['*'] = function(a,\
    \ b) return a * b end,\n\t\t\t\t\t\t\t['//'] = function(a, b) return a // b end,\n\
    \t\t\t\t\t\t\t['**'] = function(a, b) return a ^ b end}\n\tlocal r = operand[1]\n\
    \tfor i = 1, #operator do\n\t\tr = op[operator[i]](r, operand[i + 1])\n\tend\n\
    \treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv6vfrma.lua:36:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqv6vfrma.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local op_map = {['+']=function(a,b) return a+b end,\n        \
    \            ['-']=function(a,b) return a-b end,\n                    ['*']=function(a,b)\
    \ return a*b end,\n                    ['//']=function(a,b) return math.floor(a/b)\
    \ end,\n                    ['**']=function(a,b) return a^b end}\n    local result\
    \ = operand[1]\n    for i = 1, #operator do\n        result = op_map[operator[i]](result,\
    \ operand[i+1])\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfobkih1x.lua:36:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpfobkih1x.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local res\n  for i,v in ipairs(operator) do\n    if i == 1 then\n\
    \      res = operand[i] .. v .. operand[i+1]\n    else\n      res = res .. v ..\
    \ operand[i+1]\n    end\n  end\n  return assert(load('return ' .. res))()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkd2jhkkk.lua:28:\
    \ [string \"return 2**3*4+5\"]:1: unexpected symbol near '*'\nstack traceback:\n\
    \t/tmp/tmpkd2jhkkk.lua:28: in local 'candidate'\n\t/tmp/tmpkd2jhkkk.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local temp = operand[1]\n    for i = 1, #operator do\n       \
    \ if operator[i] == '+' then\n            temp = temp + operand[i + 1]\n     \
    \   elseif operator[i] == '-' then\n            temp = temp - operand[i + 1]\n\
    \        elseif operator[i] == '*' then\n            temp = temp * operand[i +\
    \ 1]\n        elseif operator[i] == '//' then\n            temp = math.floor(temp\
    \ / operand[i + 1])\n        elseif operator[i] == '**' then\n            temp\
    \ = temp ^ operand[i + 1]\n        end\n    end\n    return temp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_y472p0t.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmp_y472p0t.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local str = \"\"\n    for k, v in ipairs(operand) do\n       \
    \ if k ~= 1 then\n            str = str .. (operator[k - 1] or \"\") .. v\n  \
    \      else\n            str = str .. v\n        end\n    end\n    return loadstring(\"\
    return \" .. str)()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxvc3ym4.lua:28:\
    \ attempt to call a nil value (global 'loadstring')\nstack traceback:\n\t/tmp/tmpbxvc3ym4.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpbxvc3ym4.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local result = 0\n  for k,v in ipairs(operator) do\n    if v ==\
    \ '+' then\n      result = result + operand[k] + operand[k+1]\n    elseif v ==\
    \ '-' then\n      result = result - operand[k] - operand[k+1]\n    elseif v ==\
    \ '*' then\n      result = result * operand[k] * operand[k+1]\n    elseif v ==\
    \ '//' then\n      result = result // operand[k] // operand[k+1]\n    elseif v\
    \ == '**' then\n      result = result ** operand[k] ** operand[k+1]\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq5khcywy.lua:31: unexpected symbol near '*'\n"
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    return table.reduce(operator, function(i, acc, v)\n        return\
    \ acc .. \" \" .. table.get(operand, i) .. \" \" .. v\n    end) .. \" \" .. table.get(operand,\
    \ #operand)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2,\
    \ 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}),\
    \ 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1q_q5ob9.lua:20:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmp1q_q5ob9.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp1q_q5ob9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  local eq = table.concat(operand, '')\n  for i,v in ipairs(operator)\
    \ do\n    eq = eq:gsub(tostring(i), v)\n  end\n  eq = eq:gsub('//', '//')\n  eq\
    \ = eq:gsub('%*%*', '^')\n  eq = eq:gsub('%*', '*')\n  return loadstring(\"return\
    \ \" .. eq)()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2,\
    \ 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}),\
    \ 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0b5dzs8v.lua:27:\
    \ attempt to call a nil value (global 'loadstring')\nstack traceback:\n\t/tmp/tmp0b5dzs8v.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmp0b5dzs8v.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local op_idx = #operator\n    local res = operand[1]\n    for\
    \ i = 2, #operand do\n        if operator[op_idx] == '+' then\n            res\
    \ = res + operand[i]\n        elseif operator[op_idx] == '-' then\n          \
    \  res = res - operand[i]\n        elseif operator[op_idx] == '*' then\n     \
    \       res = res * operand[i]\n        elseif operator[op_idx] == '//' then\n\
    \            res = math.floor(res / operand[i])\n        elseif operator[op_idx]\
    \ == '**' then\n            res = res ^ operand[i]\n        end\n        op_idx\
    \ = op_idx - 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdf4apwi.lua:42:\
    \ expected: 37, actual: 3200000\nstack traceback:\n\t/tmp/tmpjdf4apwi.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   if operator[i] == '+' then\n            result = result + operand[i + 1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            result = result *\
    \ operand[i + 1]\n        elseif operator[i] == '//' then\n            result\
    \ = math.floor(result / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}),\
    \ 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//',\
    \ '*'}, {7, 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqg56oval.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpqg56oval.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n  -- your code here\n  return nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc62q91si.lua:27:\
    \ expected: 37, actual: nil\nstack traceback:\n\t/tmp/tmpc62q91si.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local function sym(s)\n        return function(...)\n        \
    \    return s:format(...)\n        end\n    end\n    local function compile(operator,\
    \ operand)\n        if #operator == 0 then\n            return tostring(operand[1])\n\
    \        end\n        local op = table.remove(operator, 1)\n        local ex =\
    \ compile(operator, operand)\n        local ey = table.remove(operand, 1)\n  \
    \      return sym[op](ex, ey)\n    end\n    local compiled = compile(operator,\
    \ operand)\n    return loadstring('return ' .. compiled)()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl8i26x2u.lua:32:\
    \ attempt to index a function value (upvalue 'sym')\nstack traceback:\n\t/tmp/tmpl8i26x2u.lua:32:\
    \ in upvalue 'compile'\n\t/tmp/tmpl8i26x2u.lua:30: in upvalue 'compile'\n\t/tmp/tmpl8i26x2u.lua:30:\
    \ in local 'compile'\n\t/tmp/tmpl8i26x2u.lua:34: in local 'candidate'\n\t/tmp/tmpl8i26x2u.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i=1,#operator do\n        if\
    \ operator[i] == '+' then\n            result = result + operand[i+1]\n      \
    \  elseif operator[i] == '-' then\n            result = result - operand[i+1]\n\
    \        elseif operator[i] == '*' then\n            result = result * operand[i+1]\n\
    \        elseif operator[i] == '//' then\n            result = math.floor(result\
    \ / operand[i+1])\n        elseif operator[i] == '**' then\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
    \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
    \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7,\
    \ 3, 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3q9bnqy.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmps3q9bnqy.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local sum = operand[1]\n    for i=1,#operator do\n        if operator[i]\
    \ == '+' then\n            sum = sum + operand[i+1]\n        elseif operator[i]\
    \ == '-' then\n            sum = sum - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            sum = sum * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            sum = math.floor(sum / operand[i+1])\n        elseif\
    \ operator[i] == '**' then\n            sum = sum ^ operand[i+1]\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa59_3k9h.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpa59_3k9h.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   local op = operator[i]\n        local num = operand[i + 1]\n        if op\
    \ == '+' then\n            result = result + num\n        elseif op == '-' then\n\
    \            result = result - num\n        elseif op == '*' then\n          \
    \  result = result * num\n        elseif op == '//' then\n            result =\
    \ math.floor(result / num)\n        elseif op == '**' then\n            result\
    \ = result ^ num\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = do_algebra\n    lu.assertEquals(candidate({'**',\
    \ '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'},\
    \ {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjq83dod.lua:43:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpgjq83dod.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given two tables operator, and operand. The first table has basic algebra\
    \ operations, and \n-- the second table is a table of integers. Use the two given\
    \ tables to build the algebric \n-- expression and return the evaluation of this\
    \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
    \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
    \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n\
    -- result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
    \ table is equal to the length of operand table minus one.\n-- Operand is a table\
    \ of of non-negative integers.\n-- Operator table has at least one operator, and\
    \ operand table has at least two operands.\nlocal function do_algebra(operator,\
    \ operand)\n    local res = operand[1]\n    for i=1,#operator do\n        if operator[i]\
    \ == '+' then\n            res = res + operand[i+1]\n        elseif operator[i]\
    \ == '-' then\n            res = res - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            res = math.floor(res / operand[i+1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i+1]\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = do_algebra\n    lu.assertEquals(candidate({'**', '*', '+'},\
    \ {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+', '*', '-'}, {2, 3, 4,\
    \ 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3, 4}), 8)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfwq18po.lua:41:\
    \ expected: 9, actual: 15\nstack traceback:\n\t/tmp/tmpkfwq18po.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
