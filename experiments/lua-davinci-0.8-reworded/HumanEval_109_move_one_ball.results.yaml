name: HumanEval_109_move_one_ball
language: lua
results:
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  if #arr == 0 then return true end\n  local\
    \ j = 1\n  local i = 1\n  while i <= #arr do\n    if arr[i] == j then\n      i\
    \ = i + 1\n      j = j + 1\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ j == #arr + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2c_got3.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo2c_got3.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local size = #arr\n  if size < 2 then return\
    \ true end\n  local low, mid, high = 1, 1, size\n  while low <= high do\n    mid\
    \ = low + (high - low) / 2\n    if arr[mid] == mid then\n      if arr[mid - 1]\
    \ == mid - 1 then\n        low = mid + 1\n      else\n        return true\n  \
    \    end\n    else\n      high = mid - 1\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n\
    \    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3,\
    \ 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vi62o8c.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9vi62o8c.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    local len = #arr\n    if len == 0 then\
    \ return true end\n    for i=1,len do\n        local ind = 1\n        for j=2,len\
    \ do\n            if arr[j] < arr[ind] then\n                ind = j\n       \
    \     end\n        end\n        arr[ind] = arr[ind] + 100000\n        if ind ~=\
    \ i then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n\
    \    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3,\
    \ 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5zhaef1.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf5zhaef1.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    if #arr == 0 then return true end\n   \
    \ local ball = arr[1]\n    local cnt = 0\n    for i=2,#arr do\n        if arr[i]\
    \ < ball then\n            cnt = cnt + 1\n        end\n    end\n    if cnt ==\
    \ #arr-1 then return true else return false end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp269an8c4.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp269an8c4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  if #arr < 2 then return true end\n  local\
    \ sorted = false\n  local head = arr[1]\n  for i=2,#arr do\n    if head > arr[i]\
    \ then\n      return false\n    end\n    head = arr[i]\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n\
    \    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3,\
    \ 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsevtqmfs.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsevtqmfs.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local N = #arr\n  if N == 0 then return true\
    \ end\n  local max_value = arr[1]\n  for i = 2, N do\n    if arr[i] > max_value\
    \ then\n      max_value = arr[i]\n    else\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd58gj61h.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd58gj61h.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local len = #arr\n  if len == 0 then return\
    \ true end\n  local min_value = arr[1]\n  local min_idx = 1\n  for i = 2, len\
    \ do\n    if arr[i] < min_value then\n      min_value = arr[i]\n      min_idx\
    \ = i\n    end\n  end\n  local _, max_idx = math.max(unpack(arr))\n  if max_idx\
    \ >= min_idx then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoolkfmfu.lua:33:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpoolkfmfu.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmpoolkfmfu.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  -- if array is empty or only one element\
    \ return true\n  if #arr <= 1 then return true end\n  -- if the first element\
    \ is greater than second one then return false\n  if arr[1] > arr[2] then return\
    \ false end\n  local min = arr[1]\n  for i = 2, #arr - 1 do\n    if arr[i] > arr[i\
    \ + 1] then return false end\n    if arr[i] < min then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4b7pk77.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf4b7pk77.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    local len = #arr\n    if len == 0 then\
    \ return true end\n    local sorted = {}\n    for _, v in ipairs(arr) do\n   \
    \     sorted[#sorted + 1] = v\n    end\n    table.sort(sorted)\n    if sorted[1]\
    \ ~= arr[1] then return false end\n    for i = 2, len do\n        if sorted[i]\
    \ ~= arr[(i - 1) % len + 1] then return false end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n\
    \    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3,\
    \ 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}),\
    \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvksa97l.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsvksa97l.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local function _are_all_elements_one_less_than_neighbour(arr)\n\
    \    for i = 1, #arr - 1 do\n      if arr[i + 1] - arr[i] ~= 1 then\n        return\
    \ false\n      end\n    end\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpegsl2dn0.lua:42: 'end' expected (to close 'function' at line\
    \ 22) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    local next_ball, current_ball = nil, nil\n\
    \    local ball_count, pos = #arr, 1\n    while true do\n        current_ball\
    \ = arr[pos]\n        if current_ball == ball_count then\n            ball_count\
    \ = ball_count - 1\n            pos = 1\n            if ball_count == 0 then\n\
    \                return true\n            end\n        else\n            pos =\
    \ pos + 1\n        end\n        next_ball = arr[pos]\n        if next_ball and\
    \ next_ball == current_ball + 1 then\n            return false\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n   \
    \ lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht0fvlbj.lua:46:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpht0fvlbj.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    local len = #arr\n    if len < 2 then\n\
    \        return true\n    end\n    local i = 1\n    while i < len do\n       \
    \ local j = i + 1\n        while j <= len do\n            if arr[i] > arr[j] then\n\
    \                return false\n            end\n            j = j + 1\n      \
    \  end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3w_72ft.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_3w_72ft.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local n = #arr\n  if n == 0 then return true\
    \ end\n  local index_min = 1\n  for i = 2, n do\n    if arr[i] < arr[index_min]\
    \ then\n      index_min = i\n    end\n  end\n  local index_max = 1\n  for i =\
    \ 2, n do\n    if arr[i] > arr[index_max] then\n      index_max = i\n    end\n\
    \  end\n  return (index_max <= index_min)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpik6f1ser.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpik6f1ser.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    local i = 1\n    while i <= #arr - 1 do\n\
    \        if arr[i] > arr[i + 1] then\n            return false\n        end\n\
    \        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp1bkqwd.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnp1bkqwd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local n = #arr\n  local sorted = false\n\
    \  local i = 1\n  local right_shift = false\n  while (not sorted) and (i <= n)\
    \ do\n    local j = i\n    while arr[j] == n do\n      j = j + 1\n    end\n  \
    \  local sorted = true\n    while j < n do\n      local k = j + 1\n      while\
    \ arr[k] == n do\n        k = k + 1\n      end\n      if arr[j] > arr[k] then\n\
    \        sorted = false\n        break\n      end\n      j = k\n    end\n    if\
    \ sorted then\n      local j = 1\n      while arr[j] == n do\n        j = j +\
    \ 1\n      end\n      if j ~= i then\n        local tmp = arr[i]\n        arr[i]\
    \ = arr[j]\n        arr[j] = tmp\n        right_shift = true\n      end\n    end\n\
    \    i = i + 1\n  end\n  if right_shift then\n    local tmp = arr[1]\n    for\
    \ i = 1, n - 1 do\n      arr[i] = arr[i + 1]\n    end\n    arr[n] = tmp\n  end\n\
    \  return sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}),\
    \ true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgrhe9f21.lua:71:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgrhe9f21.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    if #arr == 0 then return true end\n   \
    \ if #arr == 1 then return true end\n    local min = arr[1]\n    local min_index\
    \ = 1\n    for i=2,#arr do\n        if arr[i] < min then\n            min = arr[i]\n\
    \            min_index = i\n        end\n    end\n    if min_index == 1 then return\
    \ true end\n    for i=min_index,#arr do\n        if arr[i] > min then return false\
    \ end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}),\
    \ true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkftwtfk9.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkftwtfk9.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n  local N = #arr\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpo05igbe9.lua:35: 'end' expected (to close 'function' at line\
    \ 22) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n\t-- Read the problem statement to complete\
    \ implementation.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}),\
    \ true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nf8mvk2.lua:29:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1nf8mvk2.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n    if #arr == 0 then return true end\n   \
    \ local n = #arr\n    local i = n\n    while arr[i] > arr[i-1] and i > 1 do\n\
    \        i = i - 1\n    end\n    if i == 1 then return true end\n    if i == n\
    \ then return false end\n    local j = i\n    local min_ind = i\n    while j <=\
    \ n do\n        if arr[j] <= arr[min_ind] then\n            min_ind = j\n    \
    \    end\n        j = j + 1\n    end\n    return (min_ind == i)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = move_one_ball\n    lu.assertEquals(candidate({3,\
    \ 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n    lu.assertEquals(candidate({3,\
    \ 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuie5qikw.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuie5qikw.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
    -- numbers in the table will be randomly ordered. Your task is to determine if\n\
    -- it is possible to get a table sorted in non-decreasing order by performing\
    \ \n-- the following operation on the given table:\n-- You are allowed to perform\
    \ right shift operation any number of times.\n-- One right shift operation means\
    \ shifting all elements of the table by one\n-- position in the right direction.\
    \ The last element of the table will be moved to\n-- the starting position in\
    \ the table i.e. 0th index. \n-- If it is possible to obtain the sorted table\
    \ by performing the above operation\n-- then return true else return false.\n\
    -- If the given table is empty then return true.\n-- Note: The given table is\
    \ guaranteed to have unique elements.\n-- For Example:\n-- >>> move_one_ball({3,\
    \ 4, 5, 1, 2})\n-- true\n-- Explanation: By performin 2 right shift operations,\
    \ non-decreasing order can\n-- be achieved for the given table.\n-- >>> move_one_ball({3,\
    \ 5, 4, 1, 2})\n-- false\n-- Explanation:It is not possible to get non-decreasing\
    \ order for the given\n-- table by performing any number of right shift operations.\n\
    local function move_one_ball(arr)\n\tlocal function check(t)\n\t\tlocal function\
    \ sorted(t)\n\t\t\tfor i = 1, #t-1 do\n\t\t\t\tif t[i] > t[i+1] then\n\t\t\t\t\
    \treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\t\tfor i\
    \ = 1, #t do\n\t\t\tif sorted(t) then\n\t\t\t\treturn true\n\t\t\tend\n\t\t\t\
    table.insert(t, 1, table.remove(t))\n\t\tend\n\t\treturn false\n\tend\n\treturn\
    \ check(arr)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = move_one_ball\n    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n\
    \    lu.assertEquals(candidate({3, 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4,\
    \ 3, 1, 2}), false)\n    lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n\
    \    lu.assertEquals(candidate({}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwogtiu57.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwogtiu57.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
