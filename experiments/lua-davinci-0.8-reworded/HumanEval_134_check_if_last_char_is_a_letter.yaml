name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
prompt: "-- Create a function that returns true if the last character\n-- of a given\
  \ string is an alphabetical character and is not\n-- a part of a word, and false\
  \ otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n--\
  \ Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n-- >>>\
  \ check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
  \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
  \ function check_if_last_char_is_a_letter(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
  \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
  \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
  \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
  \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
  \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- Check if the last character is not a space and is alphabetical.\n\
    \treturn txt:sub(-1):find(\"%a\") ~= nil and txt:sub(-1):find(\"%S\") ~= nil\n\
    end", "  local len = string.len(txt)\n  if len < 1 then\n    return false\n  end\n\
    \  local last_char = string.sub(txt, len, len)\n  local last_char_is_alpha = last_char:match('[a-zA-Z]')\n\
    \  local last_char_not_part_of_word = last_char:match('[^a-zA-Z]')\n  if last_char_is_alpha\
    \ and last_char_not_part_of_word then\n    return true\n  end\n  return false\n\
    end", "    if #txt <= 0 then\n        return false\n    end\n    if txt:find(\"\
    %w$\") then\n        return false\n    end\n    return true\nend", "    -- Insert\
    \ code here\nend", "  return nil\nend", "    -- Write your code here\nend", "\t\
    if txt:match('%a$') then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "    if #txt > 0 then\n        if string.sub(txt, -1, -1) == ' ' then\n        \
    \    return false\n        else\n            return not string.find(txt, '%w%s$')\n\
    \        end\n    else\n        return false\n    end\nend", "    return true\n\
    end", "  -- Your code here\nend", end, "    if string.match(txt, '%a$') and not\
    \ string.match(txt, '%w$') then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- code here\nend", "  if txt == '' then\n    return\
    \ false\n  end\n  local len = txt:len()\n  local last = txt:sub(len, len)\n  if\
    \ last:match('%w') and last:match('%s') then\n    return true\n  end\n  return\
    \ false\nend", "    local last_char = txt:sub(-1)\n    return last_char:match('%a')\
    \ and not txt:sub(-2, -2):match('%a')\nend", "  local last = txt:sub(-1, -1)\n\
    \  if last:find('%a') and not last:find('%w') then\n    return true\n  else\n\
    \    return false\n  end\nend", "\t-- your code here\nend", "  if (txt == '')\
    \ then\n    return false\n  end\n  -- if the last character is an alphabetical\
    \ character\n  if (string.find(txt, '%a$')) then\n    -- check if that alphabetical\
    \ character is not a part of a word.\n    local start, finish = string.find(txt,\
    \ '%a$')\n    if (start > 1) then\n      if (not (string.find(txt, '%a%a$')))\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "  return false\nend", "    -- write your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
