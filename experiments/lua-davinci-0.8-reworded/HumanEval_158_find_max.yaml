name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a table of strings.\n-- The table contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- >>> find_max({'name', 'of', 'string'})\n\
  -- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n-- >>> find_max({'aaaaaaa',\
  \ 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max_words = {}\n    local max_num = 0\n    for _, v in ipairs(words)\
    \ do\n        local num = unique_letters(v)\n        if num > max_num then\n \
    \           max_num = num\n            max_words = {v}\n        elseif num ==\
    \ max_num then\n            table.insert(max_words, v)\n        end\n    end\n\
    \    return max_words[1]\nend", "  local max = {}\n  for _, w in ipairs(words)\
    \ do\n    local found = {}\n    for c in w:gmatch('.') do\n      found[c] = true\n\
    \    end\n    table.insert(max, {w, table.getn(found)})\n  end\n  table.sort(max,\
    \ function(a, b)\n    if a[2] ~= b[2] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return max[1][1]\nend", "  local\
    \ function word_cmp(a, b)\n    local uc_a = get_uniq_chars(a)\n    local uc_b\
    \ = get_uniq_chars(b)\n    if #uc_a ~= #uc_b then\n      return #uc_a > #uc_b\n\
    \    else\n      return a < b\n    end\n  end\n  table.sort(words, word_cmp)\n\
    \  return words[1]\nend", "    if not words then return nil end\n    local max\
    \ = 0\n    local max_word = nil\n    for _, word in ipairs(words) do\n       \
    \ local chars = {}\n        for c in word:gmatch(\".\") do\n            chars[c]\
    \ = true\n        end\n        local len = 0\n        for _ in pairs(chars) do\n\
    \            len = len + 1\n        end\n        if max < len then\n         \
    \   max = len\n            max_word = word\n        elseif max == len then\n \
    \           if max_word and max_word > word then\n                max_word = word\n\
    \            end\n        end\n    end\n    return max_word\nend", "  local max_value\
    \ = nil\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local\
    \ value = get_unique_letters(word)\n    if max_value == nil or value > max_value\
    \ then\n      max_value = value\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "    local max_word = ''\n    local max_chars = 0\n    for _,\
    \ word in ipairs(words) do\n        local word_chars = {}\n        for c in word:gmatch('.')\
    \ do\n            word_chars[c] = true\n        end\n        local num_chars =\
    \ 0\n        for c in pairs(word_chars) do\n            num_chars = num_chars\
    \ + 1\n        end\n        if num_chars > max_chars then\n            max_chars\
    \ = num_chars\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "  local max_word = words[1]\n  local max_unique_chars = find_unique_chars(max_word)\n\
    \  for i = 2, #words do\n    local word = words[i]\n    local unique_chars = find_unique_chars(word)\n\
    \    if unique_chars > max_unique_chars then\n      max_word = word\n      max_unique_chars\
    \ = unique_chars\n    end\n  end\n  return max_word\nend", "    local max_index\
    \ = 1\n    local max_value = words[1]\n    local max_unique = #unique_chars(words[1])\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local uniq =\
    \ #unique_chars(word)\n        if uniq > max_unique or (uniq == max_unique and\
    \ word < max_value) then\n            max_index = i\n            max_value = word\n\
    \            max_unique = uniq\n        end\n    end\n    return max_value\nend",
  "  assert(type(words) == 'table', 'Expected a table')\n  local max = 0\n  local\
    \ max_word = ''\n  for _, word in ipairs(words) do\n    assert(type(word) == 'string',\
    \ 'Expected only strings')\n    local unique_chars = 0\n    for char in each_char(word)\
    \ do\n      unique_chars = unique_chars + 1\n    end\n    if unique_chars > max\
    \ then\n      max = unique_chars\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  -- Insert your code here\nend", "  local max_unique_char_count\
    \ = -1\n  local max_unique_char_word = ''\n  for _, word in ipairs(words) do\n\
    \    local unique_char_count = 0\n    for i = 1, #word do\n      local char =\
    \ word:sub(i, i)\n      if not word:find(char, i + 1) then\n        unique_char_count\
    \ = unique_char_count + 1\n      end\n    end\n    if unique_char_count > max_unique_char_count\
    \ then\n      max_unique_char_count = unique_char_count\n      max_unique_char_word\
    \ = word\n    end\n  end\n  return max_unique_char_word\nend", "    if words[1]\
    \ == nil then\n        return nil\n    end\n    local s, uniq_cnt = words[1],\
    \ #unique_chars(words[1])\n    for i = 2, #words do\n        local _uniq_cnt =\
    \ #unique_chars(words[i])\n        if _uniq_cnt > uniq_cnt then\n            s,\
    \ uniq_cnt = words[i], _uniq_cnt\n        elseif _uniq_cnt == uniq_cnt then\n\
    \            if words[i] < s then\n                s = words[i]\n            end\n\
    \        end\n    end\n    return s\nend", "\tlocal best_word, best_set_size =\
    \ nil, 0\n\tfor _, word in ipairs(words) do\n\t\tlocal set_size = get_unique_char_set_size(word)\n\
    \t\tif best_word == nil or\n\t\t   set_size > best_set_size or\n\t\t   (set_size\
    \ == best_set_size and word < best_word) then\n\t\t\tbest_word, best_set_size\
    \ = word, set_size\n\t\tend\n\tend\n\treturn best_word\nend", "    local max_len\
    \ = 0\n    local max_word = nil\n    for i, word in ipairs(words) do\n       \
    \ local len = #(make_set(word))\n        if len > max_len then\n            max_len\
    \ = len\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "\tlocal max, max_len = words[1], #words[1]\n\tfor i = 2, #words do\n\t\t\
    local word = words[i]\n\t\tlocal len = #word\n\t\tif len > max_len then\n\t\t\t\
    max_len = len\n\t\t\tmax = word\n\t\telseif len == max_len then\n\t\t\tmax = word\
    \ < max and word or max\n\t\tend\n\tend\n\treturn max\nend", "  -- error check\n\
    \  if type(words) ~= 'table' then\n    error('argument must be a table', 2)\n\
    \  end\n  -- count the words with max no. of unique characters\n  local count,\
    \ max_count = 1, 0\n  local max_word\n  for i, word in ipairs(words) do\n    if\
    \ type(word) ~= 'string' then\n      error('table elements must be strings', 2)\n\
    \    end\n    local unique_char_count = count_unique_chars(word)\n    if unique_char_count\
    \ > max_count then\n      max_count = unique_char_count\n      count = 1\n   \
    \   max_word = word\n    elseif unique_char_count == max_count then\n      count\
    \ = count + 1\n    end\n  end\n  -- return the word with max no. of unique characters\n\
    \  return max_word\nend", "    local max_count = 0\n    local max_word = nil\n\
    \    for _, word in ipairs(words) do\n        local count = num_of_unique_chars(word)\n\
    \        if count > max_count then\n            max_count = count\n          \
    \  max_word = word\n        end\n    end\n    return max_word\nend", "    local\
    \ max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _, c in utf8.codes(word) do\n     \
    \       if not is_in_string(max_word, utf8.char(c)) then\n                count\
    \ = count + 1\n            end\n        end\n        if count > max_count then\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend", "\tlocal word_with_max_unique_chars = words[1]\n\
    \tlocal length_of_max_unique_chars = find_unique_chars(word_with_max_unique_chars)\n\
    \tfor i = 2, #words do\n\t\tlocal word = words[i]\n\t\tlocal length_of_unique_chars\
    \ = find_unique_chars(word)\n\t\tif length_of_unique_chars > length_of_max_unique_chars\
    \ then\n\t\t\tword_with_max_unique_chars = word\n\t\t\tlength_of_max_unique_chars\
    \ = length_of_unique_chars\n\t\tend\n\tend\n\treturn word_with_max_unique_chars\n\
    end", "    local char_count = {}\n    local max = 0\n    local max_word = nil\n\
    \    for i = 1, #words do\n        char_count[i] = {}\n        for char in string.gmatch(words[i],\
    \ '.') do\n            char_count[i][char] = (char_count[i][char] or 0) + 1\n\
    \        end\n        local n = table.size(char_count[i])\n        if n > max\
    \ then\n            max = n\n            max_word = words[i]\n        elseif n\
    \ == max then\n            if max_word > words[i] then\n                max_word\
    \ = words[i]\n            end\n        end\n    end\n    return max_word\nend",
  "\t-- returns the number of unique characters in a string.\n\tlocal function count_unique(s)\n\
    \t\tlocal unique = {}\n\t\tfor i = 1, #s do\n\t\t\tunique[s:sub(i, i)] = true\n\
    \t\tend\n\t\treturn #unique\n\tend", "\tlocal words_count = {}\n\tlocal max =\
    \ 0\n\tlocal max_word = ''\n\tfor _, w in ipairs(words) do\n\t\twords_count[w]\
    \ = 0\n\t\tfor i = 1, #w do\n\t\t\twords_count[w] = words_count[w] + 2 ^ (w:byte(i)\
    \ - 97)\n\t\tend\n\t\tlocal n = 0\n\t\tlocal tmp = words_count[w]\n\t\twhile tmp\
    \ > 0 do\n\t\t\tn = n + tmp % 2\n\t\t\ttmp = math.floor(tmp / 2)\n\t\tend\n\t\t\
    if n > max then\n\t\t\tmax = n\n\t\t\tmax_word = w\n\t\telseif n == max and w\
    \ < max_word then\n\t\t\tmax_word = w\n\t\tend\n\tend\n\treturn max_word\nend",
  "    -- your code here\nend", "  local maxs = ''\n  local max = -1\n  for _, word\
    \ in ipairs(words) do\n    local uniques = get_uniques(word)\n    if #uniques\
    \ > max then\n      max = #uniques\n      maxs = word\n    end\n  end\n  return\
    \ maxs\nend", "\tlocal max, max_string = 0, ''\n\tfor _, v in ipairs(words) do\n\
    \t\tlocal num = #unique_char(v)\n\t\tif num > max then\n\t\t\tmax = num\n\t\t\t\
    max_string = v\n\t\tend\n\tend\n\treturn max_string\nend", "\tlocal max_word =\
    \ \"\"\n\tlocal max_count = 0\n\tfor _, word in ipairs(words) do\n\t\tlocal count\
    \ = 0\n\t\tfor _ in pairs(str_to_table(word)) do\n\t\t\tcount = count + 1\n\t\t\
    end\n\t\tif count > max_count then\n\t\t\tmax_count = count\n\t\t\tmax_word =\
    \ word\n\t\tend\n\tend\n\treturn max_word\nend", "    -- TODO: Implement.\nend",
  "    -- your code here\nend", "\tlocal char = {}\n\tlocal max = 0\n\tlocal res =\
    \ nil\n\tlocal function contains(c, word)\n\t\tfor i=1, #word do\n\t\t\tif word[i]\
    \ == c then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\treturn false\n\tend\n\
    \tfor i=1, #words do\n\t\tchar[i] = {}\n\t\tlocal count = 0\n\t\tfor j=1, #words[i]\
    \ do\n\t\t\tif not contains(words[i][j], char[i]) then\n\t\t\t\tchar[i][#char[i]+1]\
    \ = words[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tif count >\
    \ max then\n\t\t\tmax = count\n\t\t\tres = words[i]\n\t\tend\n\tend\n\treturn\
    \ res\nend", "    local max_word = nil\n    local max_count = -1\n    for i =\
    \ 1, #words do\n        local word = words[i]\n        local letters = {}\n  \
    \      for char in word:gmatch('.') do\n            letters[char] = true\n   \
    \     end\n        local count = 0\n        for _ in pairs(letters) do\n     \
    \       count = count + 1\n        end\n        if count > max_count then\n  \
    \          max_count = count\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "  local max_word = nil\n  local max_count = 0\n \
    \ for _, word in ipairs(words) do\n    local count = count_uniq_chars(word)\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "    if #words == 0 then\n        return\
    \ ''\n    end\n    table.sort(words, function(a, b)\n        if #a ~= #b then\n\
    \            return #a < #b\n        end\n        return a < b\n    end)\n   \
    \ local max_chars = {}\n    for i = 1, #words do\n        local chars = {}\n \
    \       for j = 1, #words[i] do\n            chars[string.sub(words[i], j, j)]\
    \ = true\n        end\n        local n = 0\n        for _ in pairs(chars) do\n\
    \            n = n + 1\n        end\n        max_chars[i] = n\n    end\n    local\
    \ max_index = 1\n    for i = 2, #max_chars do\n        if max_chars[i] > max_chars[max_index]\
    \ then\n            max_index = i\n        end\n    end\n    return words[max_index]\n\
    end", "    -- Your code goes here.\n    local max = words[1]\n    for _, word\
    \ in ipairs(words) do\n        if #find_unique_characters(word) > #find_unique_characters(max)\
    \ or\n            #find_unique_characters(word) == #find_unique_characters(max)\
    \ and word < max then\n            max = word\n        end\n    end\n    return\
    \ max\nend", "    local max = 0\n    local max_word = ''\n    for _, word in ipairs(words)\
    \ do\n        local chars = {}\n        for i = 1, #word do\n            chars[word:sub(i,\
    \ i)] = true\n        end\n        local n = count_table(chars)\n        if n\
    \ > max or n == max and word < max_word then\n            max = n\n          \
    \  max_word = word\n        end\n    end\n    return max_word\nend", "  -- TODO:\
    \ your code here\nend", "    local max_word = nil\n    local max_len = 0\n   \
    \ for _, word in ipairs(words) do\n        local chars = {}\n        for _, c\
    \ in utf8.codes(word) do\n            chars[c] = true\n        end\n        local\
    \ len = 0\n        for _ in pairs(chars) do\n            len = len + 1\n     \
    \   end\n        if max_word == nil or (len > max_len or\n                   \
    \            (len == max_len and\n                                word < max_word))\
    \ then\n            max_word = word\n            max_len = len\n        end\n\
    \    end\n    return max_word\nend", "  -- your code here\nend", "    return 0\n\
    end", "    -- TODO: implement this function\nend", "    local max_len = 0\n  \
    \  local max_word = nil\n    for _, word in ipairs(words) do\n        local cnt\
    \ = count_char(word)\n        if cnt > max_len then\n            max_len = cnt\n\
    \            max_word = word\n        end\n    end\n    return max_word\nend",
  "  local max, max_word = -1, nil\n  for word in list.iter(words) do\n    local word_uniq\
    \ = list.sort(table.unpack(set.uniq(list.fromstring(word))))\n    local num_uniq\
    \ = #word_uniq\n    if num_uniq > max then\n      max = num_uniq\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local unique_chars = {}\n\
    \  for i = 1, #words do\n    unique_chars[i] = table.len(words[i]:chars())\n \
    \ end\n  local max = table.max(unique_chars)\n  local max_index = nil\n  for i\
    \ = 1, #unique_chars do\n    if unique_chars[i] == max then\n      max_index =\
    \ i\n      break\n    end\n  end\n  return words[max_index]\nend", "  local best_word\
    \ = nil\n  local best_word_count = 0\n  for _, word in ipairs(words) do\n    local\
    \ char_count = 0\n    for _ in word:gmatch('.') do\n      char_count = char_count\
    \ + 1\n    end\n    if char_count > best_word_count then\n      best_word = word\n\
    \      best_word_count = char_count\n    end\n  end\n  return best_word\nend",
  "  local _, result = pairs(words)\n  for _, word in pairs(words) do\n    if unique_chars(word)\
    \ > unique_chars(result) then\n      result = word\n    end\n  end\n  return result\n\
    end", "  local function compare(first, second)\n    if first.count == second.count\
    \ then\n      return first.name < second.name\n    else\n      return first.count\
    \ > second.count\n    end\n  end", "    local max = {}\n    local uniq = {}\n\
    \    local word = ''\n    for _, word in ipairs(words) do\n        local uniq_chars\
    \ = 0\n        for _, char in ipairs(word:split('', true)) do\n            uniq_chars\
    \ = uniq_chars + 1\n            uniq[char] = true\n        end\n        if #max\
    \ == 0 or max[2] < uniq_chars then\n            max = {word, uniq_chars}\n   \
    \     end\n        uniq = {}\n    end\n    return max[1]\nend", "    if #words\
    \ == 0 then\n        return nil\n    end\n    local max_string = words[1]\n  \
    \  local max_length = 0\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local chars = {}\n        for j = 1, #word do\n            local char\
    \ = word:sub(j, j)\n            chars[char] = true\n        end\n        local\
    \ length = table_length(chars)\n        if length > max_length then\n        \
    \    max_string = word\n            max_length = length\n        end\n    end\n\
    \    return max_string\nend", "  local max_unique_char_count = 0\n  local result\
    \ = ''\n  for _, word in ipairs(words) do\n    local unique_char_count = #unique_characters(word)\n\
    \    if unique_char_count > max_unique_char_count then\n      max_unique_char_count\
    \ = unique_char_count\n      result = word\n    end\n  end\n  return result\n\
    end", "  return sort(map(function(word)\n    local uniq = sort(unique(word:totable()))\n\
    \    return {uniq = uniq, word = word}\n  end, words))[1].word\nend", "  local\
    \ m, w = 0, nil\n  for i, v in ipairs(words) do\n    local x = table.unique(string.to_set(v))\n\
    \    if #x > m then\n      m, w = #x, v\n    end\n  end\n  return w\nend", " \
    \ local max = words[1]\n  for i = 2, #words do\n    local word = words[i]\n  \
    \  if num_of_unique_chars(word) > num_of_unique_chars(max) or\n        num_of_unique_chars(word)\
    \ == num_of_unique_chars(max) and\n        lexicographic_order(word, max) then\n\
    \      max = word\n    end\n  end\n  return max\nend", "  local best = nil\n \
    \ local best_word = words[1]\n  for _, word in ipairs(words) do\n    local map\
    \ = {}\n    for i = 1, #word do\n      map[word:sub(i, i)] = true\n    end\n \
    \   local count = 0\n    for _ in pairs(map) do\n      count = count + 1\n   \
    \ end\n    if best == nil or count > best then\n      best = count\n      best_word\
    \ = word\n    end\n  end\n  return best_word\nend", "  local max_word, max_len\
    \ = '', 0\n  for _, word in ipairs(words) do\n    local len = 0\n    for _ in\
    \ pairs(get_chars(word)) do\n      len = len + 1\n    end\n    if len > max_len\
    \ then\n      max_word, max_len = word, len\n    end\n  end\n  return max_word\n\
    end", "    local result = \"\"\n    local max_num = 0\n    for i = 1, #words do\n\
    \        local word = words[i]\n        local count = count_unique(word)\n   \
    \     if count > max_num then\n            max_num = count\n            result\
    \ = word\n        end\n    end\n    return result\nend", "    local function count_unique(str)\n\
    \        -- count number of unique characters\n        local characters = {}\n\
    \        for i = 1, #str do\n            local char = str:sub(i, i)\n        \
    \    characters[char] = true\n        end\n        return #table_keys(characters)\n\
    \    end", "    -- Implement find_max function.\n    local max = ''\n    local\
    \ max_unique = 0\n    for i = 1, #words do\n        local count = 0\n        local\
    \ word = words[i]\n        for j = 1, #word do\n            if word:sub(j, j)\
    \ ~= word:sub(j - 1, j - 1) then\n                count = count + 1\n        \
    \    end\n        end\n        if count > max_unique then\n            max = word\n\
    \            max_unique = count\n        end\n    end\n    return max\nend", "\t\n\
    end", "    local max_string, max_uniq_chars = nil, 0\n    for i, word in ipairs(words)\
    \ do\n        local uniq_chars = get_uniq_chars(word)\n        if (not max_string)\
    \ or (#uniq_chars > max_uniq_chars) then\n            max_string, max_uniq_chars\
    \ = word, #uniq_chars\n        end\n    end\n    return max_string\nend", "  \
    \  -- TODO: fill in the body of this function, if needed\n    local selected =\
    \ words[1]\n    local max = #unique_chars(selected)\n    for i = 2, #words do\n\
    \        local chars = unique_chars(words[i])\n        if #chars > max then\n\
    \            selected = words[i]\n            max = #chars\n        end\n    end\n\
    \    return selected\nend", "    local max_word, max_size = words[1], 0\n    for\
    \ _, word in ipairs(words) do\n        local uniq_size = table_size(set(chars(word)))\n\
    \        if uniq_size > max_size then\n            max_word, max_size = word,\
    \ uniq_size\n        end\n    end\n    return max_word\nend", "    --[[\n    Algorithm\n\
    \    - For each word in 'words'\n        - Check if the number of unique characters\
    \ in the current word is greater\n        than the number of unique characters\
    \ in the word with maximum number of\n        unique characters.\n        - If\
    \ it is, update the word with maximum number of unique characters.\n    - Return\
    \ the word with maximum number of unique characters.\n    ]]", end, "    local\
    \ ans, max_count = nil, -1\n    for i, word in ipairs(words) do\n        local\
    \ count = 0\n        for _, char in ipairs(word:to_chars()) do\n            if\
    \ not char_set[char] then\n                char_set[char] = true\n           \
    \     count = count + 1\n            end\n        end\n        if count > max_count\
    \ then\n            ans = word\n            max_count = count\n        end\n \
    \       char_set = {}\n    end\n    return ans\nend", "    local max_word = words[1]\n\
    \    local max_count = 0\n    for _, word in ipairs(words) do\n        local count\
    \ = 0\n        for i = 1, #word do\n            local c = word:sub(i, i)\n   \
    \         if not word:find(c, i + 1) then\n                count = count + 1\n\
    \            end\n        end\n        if count > max_count then\n           \
    \ max_count = count\n            max_word = word\n        end\n    end\n    return\
    \ max_word\nend", "  -- TODO: Remove the error and add implementation here\n \
    \ error('Implement find_max!')\nend", "  -- Your code here\nend", "  local max_length\
    \ = 0\n  local max_word = ''\n  for _, word in ipairs(words) do\n    local cur_length\
    \ = unpack(unique_chars(word))\n    if cur_length > max_length then\n      max_length\
    \ = cur_length\n      max_word = word\n    end\n  end\n  return max_word\nend",
  "  local max_word, max_count\n  for _, word in ipairs(words) do\n    local count\
    \ = 0\n    for k in pairs(find_chars(word)) do\n      count = count + 1\n    end\n\
    \    if max_count == nil or count > max_count then\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "    if not words\
    \ then return end\n    -- TODO: find the word with max number of unique characters\n\
    \    return nil\nend", "  local max_len = 0\n  local max_word = ''\n  for _, word\
    \ in ipairs(words) do\n    local len = get_unique_len(word)\n    if len > max_len\
    \ then\n      max_len = len\n      max_word = word\n    end\n  end\n  return max_word\n\
    end", "  -- your code here\nend", "    local max = 0\n    local best = words[1]\n\
    \    for _,word in ipairs(words) do\n        local uniq_chars = {}\n        for\
    \ _,c in utf8.codes(word) do\n            uniq_chars[c] = true\n        end\n\
    \        if #uniq_chars > max then\n            max = #uniq_chars\n          \
    \  best = word\n        end\n    end\n    return best\nend", "  return 'to be\
    \ implemented'\nend", "\tlocal max, max_word = 0, nil\n\tfor _, word in ipairs(words)\
    \ do\n\t\tlocal unique_chars = set.make(word:to_char_table())\n\t\tif max < #unique_chars\
    \ then\n\t\t\tmax = #unique_chars\n\t\t\tmax_word = word\n\t\tend\n\tend\n\treturn\
    \ max_word\nend", "    local result = words[1]\n    local max = unique_chars(result)\n\
    \    for i = 2, #words do\n        local w = words[i]\n        local u = unique_chars(w)\n\
    \        if u > max then\n            result = w\n            max = u\n      \
    \  end\n    end\n    return result\nend", "    if #words == 0 then\n        return\
    \ nil\n    end\n    local max_index = 1\n    local max_words = {}\n    local unique_chars\
    \ = {}\n    for i = 1, #words do\n        local word = words[i]\n        unique_chars[i]\
    \ = get_unique_chars(word)\n        if #unique_chars[i] > #unique_chars[max_index]\
    \ then\n            max_index = i\n            max_words = {i}\n        elseif\
    \ #unique_chars[i] == #unique_chars[max_index] then\n            table.insert(max_words,\
    \ i)\n        end\n    end\n    if #max_words == 1 then\n        return words[max_index]\n\
    \    end\n    local min_word = nil\n    for _, i in ipairs(max_words) do\n   \
    \     if min_word == nil or words[i] < min_word then\n            min_word = words[i]\n\
    \        end\n    end\n    return min_word\nend", "  if #words == 0 then\n   \
    \ return nil\n  end\n  local char_set, max_word = {}, words[1]\n  for _, word\
    \ in ipairs(words) do\n    local count = 0\n    for _ in word:gmatch('.') do\n\
    \      count = count + 1\n    end\n    if count > #char_set then\n      char_set,\
    \ max_word = word, word\n    end\n  end\n  return max_word\nend", "    -- TODO\n\
    end", end, end, "  local char_count = {}\n  local max_char_count = 0\n  local\
    \ max_char_count_word\n  for _, word in ipairs(words) do\n    local word_len =\
    \ word:len()\n    local char_table = {}\n    for i = 1, word_len do\n      local\
    \ char = word:sub(i, i)\n      char_table[char] = true\n    end\n    local char_count\
    \ = 0\n    for _ in pairs(char_table) do\n      char_count = char_count + 1\n\
    \    end\n    if char_count > max_char_count then\n      max_char_count = char_count\n\
    \      max_char_count_word = word\n    elseif char_count == max_char_count then\n\
    \      if word < max_char_count_word then\n        max_char_count_word = word\n\
    \      end\n    end\n  end\n  return max_char_count_word\nend", "  local max_chars,\
    \ max_word = {}, words[1]\n  for _, word in ipairs(words) do\n    local chars\
    \ = {}\n    for char in word:gmatch('.') do\n      chars[char] = true\n    end\n\
    \    if #chars > #max_chars then\n      max_chars, max_word = chars, word\n  \
    \  end\n  end\n  return max_word\nend", "    -- TODO: implement this function\n\
    end", "    local max = {}\n    local max_chars = 0\n    for _, word in ipairs(words)\
    \ do\n        local unique_chars = unique_chars_set(word)\n        if unique_chars\
    \ > max_chars then\n            max = {word}\n            max_chars = unique_chars\n\
    \        elseif unique_chars == max_chars then\n            table.insert(max,\
    \ word)\n        end\n    end\n    table.sort(max)\n    return max[1]\nend", " \
    \   return words[1]\nend", "    local max_unique = 0\n    local result = ''\n\
    \    for i, word in ipairs(words) do\n        local set = {}\n        for c in\
    \ word:gmatch('.') do\n            set[c] = true\n        end\n        local cnt\
    \ = 0\n        for c in pairs(set) do\n            cnt = cnt + 1\n        end\n\
    \        if cnt > max_unique then\n            max_unique = cnt\n            result\
    \ = word\n        elseif cnt == max_unique then\n            if word < result\
    \ then\n                result = word\n            end\n        end\n    end\n\
    \    return result\nend", "    -- your code goes here\nend", "    local max =\
    \ words[1]\n    for i = 2, #words do\n        if #unique_chars(words[i]) > #unique_chars(max)\
    \ then\n            max = words[i]\n        end\n    end\n    return max\nend",
  "    local max_word, max_count = '', 0\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        local count = #(word:gsub('.', ''))\n        if count\
    \ > max_count then\n            max_word, max_count = word, count\n        end\n\
    \    end\n    return max_word\nend", "  -- your code here\nend", "    local max_word,\
    \ max_word_len = '', 0\n    for _, word in ipairs(words) do\n        local unique_chars\
    \ = 0\n        for i = 1, #word do\n            if not string.find(word, word:sub(i,\
    \ i), i + 1) then\n                unique_chars = unique_chars + 1\n         \
    \   end\n        end\n        if unique_chars > max_word_len then\n          \
    \  max_word_len = unique_chars\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend", "    local maxCount = 0\n    local maxWord =\
    \ ''\n    for _, word in ipairs(words) do\n        local count = 0\n        for\
    \ i = 1, #word do\n            if not string.find(word, word:sub(i, i), i + 1)\
    \ then\n                count = count + 1\n            end\n        end\n    \
    \    if count > maxCount then\n            maxCount = count\n            maxWord\
    \ = word\n        end\n    end\n    return maxWord\nend", "    local max_count\
    \ = 0\n    local max_word = words[1]\n    for _, word in ipairs(words) do\n  \
    \      local char_set = {}\n        for _, char in ipairs(word) do\n         \
    \   char_set[char] = true\n        end\n        local count = 0\n        for _\
    \ in pairs(char_set) do\n            count = count + 1\n        end\n        if\
    \ count > max_count or (count == max_count and word < max_word) then\n       \
    \     max_count = count\n            max_word = word\n        end\n    end\n \
    \   return max_word\nend", "  local max = {}\n  for i = 1, #words do\n    local\
    \ w = words[i]\n    local is_dup = {}\n    local n = 0\n    for j = 1, #w do\n\
    \      local c = w:sub(j, j)\n      if not is_dup[c] then\n        is_dup[c] =\
    \ true\n        n = n + 1\n      end\n    end\n    max[#max + 1] = {n, w}\n  end\n\
    \  table.sort(max, function(a, b)\n    if a[1] > b[1] then\n      return true\n\
    \    elseif a[1] < b[1] then\n      return false\n    else\n      return a[2]\
    \ < b[2]\n    end\n  end)\n  return max[#max][2]\nend", "    local max_word =\
    \ ''\n    local max_size = 0\n    for _,word in ipairs(words) do\n        local\
    \ size = table.size(char_set(word))\n        if size > max_size then\n       \
    \     max_size = size\n            max_word = word\n        end\n    end\n   \
    \ return max_word\nend", "    local res = {}\n    for _, word in ipairs(words)\
    \ do\n        res[word] = get_unique_chars(word)\n    end\n    local max_word\
    \ = nil\n    local max_count = 0\n    for word, count in pairs(res) do\n     \
    \   if count > max_count then\n            max_word = word\n            max_count\
    \ = count\n        end\n    end\n    return max_word\nend", "  local max_unique_count\
    \ = 0\n  local result = \"\"\n  for _, word in ipairs(words) do\n    local unique_count\
    \ = 0\n    for _, char in utf8.codes(word) do\n      unique_count = unique_count\
    \ + 1\n    end\n    if unique_count > max_unique_count then\n      max_unique_count\
    \ = unique_count\n      result = word\n    end\n  end\n  return result\nend",
  "    assert(type(words) == 'table')\n    for _, w in ipairs(words) do\n        assert(type(w)\
    \ == 'string')\n    end\n    -- TODO\nend", "  local max = words[1]\n  for i =\
    \ 2, #words do\n    if #unique_letters(words[i]) > #unique_letters(max) then\n\
    \      max = words[i]\n    end\n  end\n  return max\nend", "    table.sort(words)\n\
    \    local max = 0\n    local max_char = nil\n    for _, word in ipairs(words)\
    \ do\n        local seen = {}\n        for c in word:gmatch(\".\") do\n      \
    \      seen[c] = true\n        end\n        if table_size(seen) > max then\n \
    \           max = table_size(seen)\n            max_char = word\n        end\n\
    \    end\n    return max_char\nend", "    local max_word = words[1]\n    local\
    \ max_chars = {}\n    for i = 1, #words do\n        local chars = {}\n       \
    \ for j = 1, #words[i] do\n            local c = words[i]:sub(j, j)\n        \
    \    if not chars[c] then\n                chars[c] = true\n            end\n\
    \        end\n        if #chars > #max_chars then\n            max_chars = chars\n\
    \            max_word = words[i]\n        end\n    end\n    return max_word\n\
    end", "  local max, max_word = -1, nil\n  for _, word in ipairs(words) do\n  \
    \  local count = 0\n    for _ in word:gmatch('.') do\n      count = count + 1\n\
    \    end\n    if count > max then\n      max, max_word = count, word\n    end\n\
    \  end\n  return max_word\nend", "\tlocal max_count = 0\n\tlocal max_word = words[1]\n\
    \tfor i,v in ipairs(words) do\n\t\tlocal count = 0\n\t\tfor j,w in ipairs(v) do\n\
    \t\t\tcount = count + 1\n\t\tend\n\t\tif count > max_count then\n\t\t\tmax_count\
    \ = count\n\t\t\tmax_word = v\n\t\tend\n\tend\n\treturn max_word\nend", "    local\
    \ max, result\n    for _, word in ipairs(words) do\n        local n = {}\n   \
    \     for i = 1, #word do\n            n[word:sub(i, i)] = true\n        end\n\
    \        if max == nil or max < #n then\n            max = #n\n            result\
    \ = word\n        end\n    end\n    return result\nend", "    local max_word,\
    \ max_unique = \"\", 0\n    for _, word in ipairs(words) do\n        local unique\
    \ = 0\n        for i = 1, #word do\n            local ch = word:sub(i, i)\n  \
    \          if word:find(ch, i + 1) == nil then\n                unique = unique\
    \ + 1\n            end\n        end\n        if unique > max_unique then\n   \
    \         max_word, max_unique = word, unique\n        end\n    end\n    return\
    \ max_word\nend", "  return 'TODO'\nend", "  local max_count = 0\n  local max_word\
    \ = ''\n  for _, word in ipairs(words) do\n    local count = count_unique_chars(word)\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    elseif count == max_count and word < max_word then\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  return \"TODO\"\nend", "  -- YOUR\
    \ CODE HERE\n  local maxLen = 0\n  local maxWord = \"\"\n  for _, v in ipairs(words)\
    \ do\n    local len = string.len(v)\n    local totalLen = 0\n    local set = {}\n\
    \    for i = 1, len do\n      local char = string.sub(v, i, i)\n      if set[char]\
    \ == nil then\n        set[char] = true\n        totalLen = totalLen + 1\n   \
    \   end\n    end\n    if totalLen > maxLen then\n      maxLen = totalLen\n   \
    \   maxWord = v\n    elseif totalLen == maxLen then\n      if v < maxWord then\n\
    \        maxWord = v\n      end\n    end\n  end\n  return maxWord\nend", "   \
    \ local max_word, max_count = nil, 0\n    for _, word in ipairs(words) do\n  \
    \      local unique_chars = {}\n        for ch in string.gmatch(word, '.') do\n\
    \            unique_chars[ch] = true\n        end\n        if not max_word or\
    \ #unique_chars > max_count then\n            max_word, max_count = word, #unique_chars\n\
    \        end\n    end\n    return max_word\nend", "    local max_word, max_len\
    \ = words[1], #unique_chars(words[1])\n    for i = 2, #words do\n        local\
    \ word, len = words[i], #unique_chars(words[i])\n        if len > max_len or (len\
    \ == max_len and word < max_word) then\n            max_word, max_len = word,\
    \ len\n        end\n    end\n    return max_word\nend", "    local max_word =\
    \ ''\n    local max_n_chars = 0\n    for _, word in ipairs(words) do\n       \
    \ local n_chars = 0\n        for _ in pairs(chars(word)) do\n            n_chars\
    \ = n_chars + 1\n        end\n        if n_chars > max_n_chars then\n        \
    \    max_n_chars = n_chars\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "    local word_data = {}\n    local max = 0\n   \
    \ local max_word = ''\n    for _, word in ipairs(words) do\n        local len\
    \ = #word\n        local chars = {}\n        for i = 1, len do\n            chars[word:sub(i,\
    \ i)] = true\n        end\n        local num_unique = 0\n        for _ in pairs(chars)\
    \ do\n            num_unique = num_unique + 1\n        end\n        if num_unique\
    \ > max then\n            max = num_unique\n            max_word = word\n    \
    \    elseif num_unique == max then\n            if word < max_word then\n    \
    \            max_word = word\n            end\n        end\n    end\n    return\
    \ max_word\nend", "    local max_word = nil\n    local max_count = 0\n    for\
    \ _, word in ipairs(words) do\n        local count = 0\n        for c in word:gmatch('.')\
    \ do\n            if not word:find(c, 2) then\n                count = count +\
    \ 1\n            end\n        end\n        if count > max_count then\n       \
    \     max_count = count\n            max_word = word\n        end\n    end\n \
    \   return max_word\nend", "  local max_num_chars = -1\n  local max_word = ''\n\
    \  for _, word in ipairs(words) do\n    local num_chars = num_unique_chars(word)\n\
    \    if num_chars > max_num_chars then\n      max_num_chars = num_chars\n    \
    \  max_word = word\n    end\n  end\n  return max_word\nend", "  local maxword\
    \ = words[1]\n  local maxcount = count_uniq_chars(maxword)\n  for _, word in ipairs(words)\
    \ do\n    local wordcount = count_uniq_chars(word)\n    if wordcount > maxcount\
    \ then\n      maxword = word\n      maxcount = wordcount\n    end\n  end\n  return\
    \ maxword\nend", "  local max_word = words[1]\n  local max_count = 0\n  for _,\
    \ word in ipairs(words) do\n    local count = count_unique_chars(word)\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", end, "  local max_word, max_n = nil, 0\n\
    \  for _, w in ipairs(words) do\n    local n = 0\n    for c in string.gmatch(w,\
    \ '.') do\n      if not (string.find(w, c, 2)) then\n        n = n + 1\n     \
    \ end\n    end\n    if n > max_n then\n      max_word, max_n = w, n\n    end\n\
    \  end\n  return max_word\nend", "    local max_word = words[1]\n    local max_word_unique_chars\
    \ = count_unique_chars(max_word)\n    for i = 2, #words do\n        local word\
    \ = words[i]\n        local word_unique_chars = count_unique_chars(word)\n   \
    \     if word_unique_chars > max_word_unique_chars then\n            max_word\
    \ = word\n            max_word_unique_chars = word_unique_chars\n        end\n\
    \    end\n    return max_word\nend", "    local max_word = nil\n    local max_unique_chars\
    \ = 0\n    for _, word in ipairs(words) do\n        local unique_chars = get_unique_chars(word)\n\
    \        if unique_chars > max_unique_chars then\n            max_word = word\n\
    \            max_unique_chars = unique_chars\n        end\n    end\n    return\
    \ max_word\nend", "    local max_len = 0\n    local max_word = nil\n    for _,\
    \ word in ipairs(words) do\n        local len = 0\n        for i = 1, #word do\n\
    \            local c = word:sub(i, i)\n            if word:find(c, i + 1) == nil\
    \ then\n                len = len + 1\n            end\n        end\n        if\
    \ len > max_len then\n            max_len = len\n            max_word = word\n\
    \        end\n    end\n    return max_word\nend", "    local max = 0\n    local\
    \ found = nil\n    for _, word in ipairs(words) do\n        local unique = 0\n\
    \        for i = 1, #word do\n            unique = unique + 1\n            for\
    \ j = i + 1, #word do\n                if word:sub(i, i) == word:sub(j, j) then\n\
    \                    unique = unique - 1\n                    break\n        \
    \        end\n            end\n        end\n        if unique > max then\n   \
    \         max = unique\n            found = word\n        end\n    end\n    return\
    \ found\nend", "    local max_word, max_chars = '', 0\n    for _, word in ipairs(words)\
    \ do\n        local chars = #(table.concat(table.unique(strsplit(word, '')), ''))\n\
    \        if chars > max_chars then\n            max_word, max_chars = word, chars\n\
    \        end\n    end\n    return max_word\nend", "    local max_len = 0\n   \
    \ local max_word = nil\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local len = unique_chars(word)\n        if len > max_len then\n     \
    \       max_len = len\n            max_word = word\n        end\n    end\n   \
    \ return max_word\nend", "    local max_unique_chars, max_unique_chars_idx = 0,\
    \ 1\n    for i, word in ipairs(words) do\n        local chars = get_unique_chars(word)\n\
    \        if #chars > max_unique_chars then\n            max_unique_chars = #chars\n\
    \            max_unique_chars_idx = i\n        end\n    end\n    return words[max_unique_chars_idx]\n\
    end", "  local max = {unique_chars = 0, word = ''}\n  for _, word in ipairs(words)\
    \ do\n    local unique_chars = 0\n    for _, char in ipairs(word:chars()) do\n\
    \      if not word:chars_dict()[char] then\n        unique_chars = unique_chars\
    \ + 1\n      end\n    end\n    if unique_chars > max.unique_chars then\n     \
    \ max.unique_chars = unique_chars\n      max.word = word\n    end\n  end\n  return\
    \ max.word\nend", "  local max_word = words[1]\n  local max_chars = 0\n  for i\
    \ = 1, #words do\n    local chars = #unique_chars(words[i])\n    if chars > max_chars\
    \ then\n      max_chars = chars\n      max_word = words[i]\n    end\n  end\n \
    \ return max_word\nend", "  -- Check if words is a table\n  assert(type(words)\
    \ == 'table', 'Input must be a table')\n  -- Check if all words are strings\n\
    \  for _, word in ipairs(words) do\n    assert(type(word) == 'string', 'All elements\
    \ must be strings')\n  end\n  -- Function to count the number of unique characters\n\
    \  local function count_unique(word)\n    local count = 0\n    local existed =\
    \ {}\n    for i = 1, #word do\n      if not existed[word:sub(i, i)] then\n   \
    \     count = count + 1\n        existed[word:sub(i, i)] = true\n      end\n \
    \   end\n    return count\n  end\n  -- Find the word with maximum number of unique\
    \ characters\n  local max_count = 0\n  local max_word = words[1]\n  for _, word\
    \ in ipairs(words) do\n    local count = count_unique(word)\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "    local max_count = 0\n    local result = ''\n    for _,\
    \ word in ipairs(words) do\n        local count = count_chars(word)\n        if\
    \ count > max_count then\n            max_count = count\n            result =\
    \ word\n        end\n    end\n    return result\nend", "  local max_word, max_uniq\
    \ = nil, -1\n  for _, w in ipairs(words) do\n    local uniq = #s2s(s2s(w):unique()):chars()\n\
    \    if uniq > max_uniq then\n      max_word, max_uniq = w, uniq\n    end\n  end\n\
    \  return max_word\nend", "    local cnt = 0\n    local max_cnt = 0\n    local\
    \ max_word = nil\n    for _, w in ipairs(words) do\n        cnt = 0\n        for\
    \ i = 1, #w do\n            for j = i + 1, #w do\n                if w:sub(i,\
    \ i) == w:sub(j, j) then\n                    cnt = cnt + 1\n                \
    \    break\n                end\n            end\n        end\n        if cnt\
    \ > max_cnt then\n            max_cnt = cnt\n            max_word = w\n      \
    \  end\n    end\n    return max_word\nend", "    local function count_chars(word)\n\
    \        local chars = {}\n        for i = 1, #word do\n            local char\
    \ = word:sub(i, i)\n            chars[char] = true\n        end\n        return\
    \ #chars\n    end", "    local max_index = 0\n    local max_unique = 0\n    for\
    \ i, word in ipairs(words) do\n        local unique = {}\n        for c in word:gmatch('.')\
    \ do\n            unique[c] = true\n        end\n        local unique_count =\
    \ len(unique)\n        if unique_count > max_unique then\n            max_index\
    \ = i\n            max_unique = unique_count\n        end\n    end\n    return\
    \ words[max_index]\nend", "    local max_word = words[1]\n    local max_num =\
    \ num_unique_char(max_word)\n    for i = 2, #words do\n        local n = num_unique_char(words[i])\n\
    \        if n > max_num then\n            max_num = n\n            max_word =\
    \ words[i]\n        end\n    end\n    return max_word\nend", "  -- TODO\nend",
  "    local word = words[1]\n    local max = #uniq_chars(word)\n    for i = 2, #words\
    \ do\n        local w = words[i]\n        local n = #uniq_chars(w)\n        if\
    \ n > max then\n            max = n\n            word = w\n        elseif n ==\
    \ max and w < word then\n            word = w\n        end\n    end\n    return\
    \ word\nend", "  -- your code here\nend", "    local max_word = ''\n    local\
    \ max_count = 0\n    for _, word in ipairs(words) do\n        local count = 0\n\
    \        for i = 1, #word do\n            count = count + (not exist_in_substring(i,\
    \ word))\n        end\n        if count > max_count then\n            max_count\
    \ = count\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "    local maxlen = 0\n    local maxs = {}\n    for i = 1, #words do\n \
    \       local s = words[i]\n        local found = {}\n        local len = 0\n\
    \        for i = 1, string.len(s) do\n            local c = string.sub(s, i, i)\n\
    \            if not found[c] then\n                found[c] = true\n         \
    \       len = len + 1\n            end\n        end\n        if len > maxlen then\n\
    \            maxlen = len\n            maxs = {s}\n        elseif len == maxlen\
    \ then\n            maxs[#maxs + 1] = s\n        end\n    end\n    local minidx\
    \ = 0\n    for i = 1, #maxs do\n        if minidx == 0 or maxs[i] < maxs[minidx]\
    \ then\n            minidx = i\n        end\n    end\n    return maxs[minidx]\n\
    end", "    local max = 0\n    local word = nil\n    for i = 1, #words do\n   \
    \     local w = words[i]\n        local count = 0\n        for j = 1, #w do\n\
    \            if count == 0 then\n                count = 1\n            else\n\
    \                local repeated = false\n                for k = 1, j - 1 do\n\
    \                    if w:sub(k, k) == w:sub(j, j) then\n                    \
    \    repeated = true\n                        break\n                    end\n\
    \                end\n                if not repeated then\n                 \
    \   count = count + 1\n                end\n            end\n        end\n   \
    \     if count > max then\n            max = count\n            word = w\n   \
    \     end\n    end\n    return word\nend", "  local max_word = nil\n  local max_uniq\
    \ = -1\n  for i, w in ipairs(words) do\n    if max_uniq < #unique_chars(w) then\n\
    \      max_word = w\n      max_uniq = #unique_chars(w)\n    end\n  end\n  return\
    \ max_word\nend", "    local max_word, max_len = nil, 0\n    for _, word in ipairs(words)\
    \ do\n        local len = len_unique(word)\n        if len > max_len then\n  \
    \          max_word, max_len = word, len\n        end\n    end\n    return max_word\n\
    end", "  -- TODO: Write the function.\nend", "\tlocal max_word = words[1]\n\t\
    local max_unique = 0\n\tfor i = 1, #words do\n\t\tlocal word = words[i]\n\t\t\
    local unique = 0\n\t\tfor j = 1, #word do\n\t\t\tlocal c = word:sub(j, j)\n\t\t\
    \tif not word:match(c .. '+') then\n\t\t\t\tunique = unique + 1\n\t\t\tend\n\t\
    \tend\n\t\tif unique > max_unique then\n\t\t\tmax_unique = unique\n\t\t\tmax_word\
    \ = word\n\t\tend\n\tend\n\treturn max_word\nend", "  local max = 0\n  local maxWord\
    \ = nil\n  for _, word in ipairs(words) do\n    local count = 0\n    for i = 1,\
    \ #word do\n      local char = word:sub(i, i)\n      if word:find(char, i + 1)\
    \ == nil then\n        count = count + 1\n      end\n    end\n    if count > max\
    \ then\n      max = count\n      maxWord = word\n    end\n  end\n  return maxWord\n\
    end", "    local max_len = -1\n    local max_word = \"\"\n    for _,word in ipairs(words)\
    \ do\n        local len = string.len(word)\n        if len > max_len then\n  \
    \          max_len = len\n            max_word = word\n        end\n    end\n\
    \    return max_word\nend", "  local max, res = -1, nil\n  for _, word in ipairs(words)\
    \ do\n    local len = 0\n    for i = 1, #word do\n      local c = word:sub(i,\
    \ i)\n      if not word:find(c, i + 1) then\n        len = len + 1\n      end\n\
    \    end\n    if len > max then\n      max, res = len, word\n    end\n  end\n\
    \  return res\nend", "    -- YOUR CODE HERE\n    local unique_table = {}\n   \
    \ for key, value in pairs(words) do\n        unique_table[value] = find_unique(value)\n\
    \    end\n    local max_string, max_val = '', 0\n    for key, value in pairs(unique_table)\
    \ do\n        if value > max_val then\n            max_val = value\n         \
    \   max_string = key\n        end\n    end\n    return max_string\nend", "   \
    \ local max = 0\n    local max_word = nil\n    for i,word in ipairs(words) do\n\
    \        local set = {}\n        for _,char in ipairs(word) do\n            set[char]\
    \ = true\n        end\n        if max < #set then\n            max = #set\n  \
    \          max_word = word\n        end\n    end\n    return max_word\nend", " \
    \ -- Write your code here:\nend", "  local max_count = 0\n  local max_word = nil\n\
    \  for _, word in ipairs(words) do\n    local unique_count = count_unique(word)\n\
    \    if unique_count > max_count then\n      max_count = unique_count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "    local lwords = len(words)\n\
    \    local max_c, max_idx = 0, 0\n    for i = 1, lwords do\n        local w =\
    \ words[i]\n        local lw = len(w)\n        local cnt = 0\n        for j =\
    \ 1, lw do\n            if cnt == 0 then\n                cnt = 1\n          \
    \  else\n                if find(w, w[j], j - 1) == nil then\n               \
    \     cnt = cnt + 1\n                end\n            end\n        end\n     \
    \   if cnt > max_c then\n            max_c = cnt\n            max_idx = i\n  \
    \      end\n    end\n    return words[max_idx]\nend", "    local max_len, max_val\
    \ = 0, ''\n    for _, word in ipairs(words) do\n        if #word > max_len then\n\
    \            max_len = #word\n            max_val = word\n        end\n    end\n\
    \    return max_val\nend", "  local maxWord = ''\n  local maxChar = 0\n  for i,word\
    \ in ipairs(words) do\n    local tmp = {}\n    for j = 1,#word do\n      tmp[word:sub(j,j)]\
    \ = true\n    end\n    if #tmp > maxChar then\n      maxChar = #tmp\n      maxWord\
    \ = word\n    end\n  end\n  return maxWord\nend", "  local max_word, max_word_size\
    \ = words[1], 0\n  for i, word in ipairs(words) do\n    local table_to_compare\
    \ = {}\n    for j = 1, #word do\n      table_to_compare[j] = word:sub(j, j)\n\
    \    end\n    local new_word_size = #table_to_compare\n    if new_word_size >\
    \ max_word_size then\n      max_word_size = new_word_size\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local word_with_max_unique_chars\n\
    \  local max_unique_chars_num = 0\n  for _, word in ipairs(words) do\n    local\
    \ unique_chars_num = count_unique_chars(word)\n    if unique_chars_num > max_unique_chars_num\
    \ then\n      word_with_max_unique_chars = word\n      max_unique_chars_num =\
    \ unique_chars_num\n    end\n  end\n  return word_with_max_unique_chars\nend",
  "\t-- TODO: your code here\nend", "\tlocal ret = words[1]\n\tlocal max_uq_char =\
    \ 0\n\tfor i = 1, #words do\n\t\tlocal uq_char = #string.gsub(words[i], '%a',\
    \ '')\n\t\tif uq_char > max_uq_char then\n\t\t\tmax_uq_char = uq_char\n\t\t\t\
    ret = words[i]\n\t\tend\n\tend\n\treturn ret\nend", "  local max = nil\n  local\
    \ maxCount = 0\n  for _, word in ipairs(words) do\n    local count = 0\n    for\
    \ i = 1, #word do\n      if not string.find(word, word:sub(i, i), i + 1) then\n\
    \        count = count + 1\n      end\n    end\n    if count > maxCount then\n\
    \      max = word\n      maxCount = count\n    end\n  end\n  return max\nend",
  "  -- TODO: Implement\nend", "  -- your code goes here\nend", "    local max_word\
    \ = words[1]\n    local max_unique_chars = count_unique_chars(max_word)\n    for\
    \ i = 2, #words do\n        local word = words[i]\n        local num_unique_chars\
    \ = count_unique_chars(word)\n        if num_unique_chars > max_unique_chars then\n\
    \            max_word = word\n            max_unique_chars = num_unique_chars\n\
    \        end\n    end\n    return max_word\nend", "  local max_len = 0\n  local\
    \ max_words = {}\n  for _, word in ipairs(words) do\n    local unique_chars =\
    \ {}\n    for i = 1, #word do\n      unique_chars[word:sub(i, i)] = true\n   \
    \ end\n    local len = #table.keys(unique_chars)\n    if len > max_len then\n\
    \      max_len = len\n      max_words = {word}\n    elseif len == max_len then\n\
    \      table.insert(max_words, word)\n    end\n  end\n  table.sort(max_words)\n\
    \  return max_words[1]\nend", "  local max = words[1]\n  for _, word in ipairs(words)\
    \ do\n    if (#find_unique_chars(word) == #find_unique_chars(max)) then\n    \
    \  if (word < max) then\n        max = word\n      end\n    elseif (#find_unique_chars(word)\
    \ > #find_unique_chars(max)) then\n      max = word\n    end\n  end\n  return\
    \ max\nend", "    local max_word = ''\n    local max_count = 0\n    for _, v in\
    \ ipairs(words) do\n        if #v > max_count then\n            max_count = #v\n\
    \            max_word = v\n        end\n    end\n    return max_word\nend", " \
    \ local max_cnt = 0\n  local ret\n  for _, word in ipairs(words) do\n    local\
    \ cnt = get_unique_cnt(word)\n    if max_cnt < cnt then\n      max_cnt = cnt\n\
    \      ret = word\n    end\n  end\n  return ret\nend", "    local max_str = words[1]\n\
    \    local max_count = 0\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local chars = get_unique_chars(word)\n        local count = 0\n     \
    \   for _ in pairs(chars) do\n            count = count + 1\n        end\n   \
    \     if count > max_count then\n            max_count = count\n            max_str\
    \ = word\n        end\n    end\n    return max_str\nend", "  return\nend", " \
    \   local max_word = ''\n    local max_unique_characters = 0\n    for _, word\
    \ in ipairs(words) do\n        local unique_characters = 0\n        for _, char\
    \ in ipairs(string.explode(word)) do\n            unique_characters = unique_characters\
    \ + 1\n        end\n        if unique_characters > max_unique_characters then\n\
    \            max_unique_characters = unique_characters\n            max_word =\
    \ word\n        end\n    end\n    return max_word\nend", "  local t = {}\n  for\
    \ _, word in ipairs(words) do\n    local len = #word\n    for i = 1, len do\n\
    \      t[word:sub(i, i)] = true\n    end\n    local n = len\n    for k in pairs(t)\
    \ do\n      n = n - 1\n    end\n    t[word] = n\n    t = {}\n  end\n  local m\
    \ = math.max(unpack(utils.values(t)))\n  for word, n in pairs(t) do\n    if n\
    \ == m then\n      return word\n    end\n  end\nend", "    -- your code here\n\
    end", "    -- TODO: complete this function\nend", "  local max = {}\n  local result\
    \ = {}\n  for _, word in ipairs(words) do\n    max[word] = 0\n    for letter in\
    \ word:gmatch('.') do\n      if not word:find(letter, 2) then\n        max[word]\
    \ = max[word] + 1\n      end\n    end\n  end\n  local max_v = 0\n  for k, v in\
    \ pairs(max) do\n    if v > max_v then\n      max_v = v\n      result = {k}\n\
    \    elseif v == max_v then\n      table.insert(result, k)\n    end\n  end\n \
    \ return result[1]\nend", "    local word = nil\n    local max = 0\n    for _,\
    \ w in ipairs(words) do\n        local chars = {}\n        for c in w:gmatch('.')\
    \ do\n            chars[c] = true\n        end\n        local len = getn(chars)\n\
    \        if len > max then\n            max = len\n            word = w\n    \
    \    elseif len == max and word and (w < word) then\n            word = w\n  \
    \      end\n    end\n    return word\nend", "    local word, max_len = nil, 0\n\
    \    for _, w in ipairs(words) do\n        local len = count_unique_chars(w)\n\
    \        if len > max_len then\n            word, max_len = w, len\n        end\n\
    \    end\n    return word\nend", "    local max = 0\n    local word = nil\n  \
    \  for k, v in pairs(words) do\n        local unique = unique_chars(v)\n     \
    \   if unique > max then\n            max = unique\n            word = v\n   \
    \     end\n    end\n    return word\nend", "  -- your code here\nend", end, " \
    \   local max_word, max_count = nil, 0\n    for _, word in ipairs(words) do\n\
    \        local unique_chars = {}\n        for char in word:gmatch('.') do\n  \
    \          unique_chars[char] = true\n        end\n        local count = 0\n \
    \       for _ in pairs(unique_chars) do\n            count = count + 1\n     \
    \   end\n        if count > max_count then\n            max_word, max_count =\
    \ word, count\n        end\n    end\n    return max_word\nend", "  -- Your code\
    \ here\nend", "  -- TO DO\n  local max = words[1]\n  for _, word in ipairs(words)\
    \ do\n    local flag = true\n    for _, ch in ipairs(word) do\n      if util.string_contains(max,\
    \ ch) then\n        flag = false\n        break\n      end\n    end\n    if flag\
    \ and util.string_lexicographical_less(max, word) then\n      max = word\n   \
    \ end\n  end\n  return max\nend", "\tlocal maxlen = 0\n\tlocal maxwrd = nil\n\t\
    for i, word in ipairs(words) do\n\t\tlocal chars = {}\n\t\tfor c in word:gmatch('.')\
    \ do\n\t\t\tchars[c] = true\n\t\tend\n\t\tlocal n = 0\n\t\tfor c in pairs(chars)\
    \ do\n\t\t\tn = n + 1\n\t\tend\n\t\tif n > maxlen then\n\t\t\tmaxlen = n\n\t\t\
    \tmaxwrd = word\n\t\tend\n\tend\n\treturn maxwrd\nend", "    -- Find the longest\
    \ word with maximum unique characters.\n    local max_length = 0\n    local max_unique\
    \ = 0\n    local max_word = ''\n    for _, word in ipairs(words) do\n        local\
    \ length = #word\n        local unique = 0\n        local c = {}\n        for\
    \ i = 1, length do\n            if not c[word:sub(i, i)] then\n              \
    \  unique = unique + 1\n                c[word:sub(i, i)] = true\n           \
    \ end\n        end\n        if unique > max_unique or (unique == max_unique and\
    \ length > max_length) then\n            max_length = length\n            max_unique\
    \ = unique\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "\tlocal freq_char = {}\n\tlocal max_words = {}\n\tfor _, word in ipairs(words)\
    \ do\n\t\tlocal freq = {}\n\t\tfor i = 1, #word do\n\t\t\tfreq[word:sub(i, i)]\
    \ = true\n\t\tend\n\t\tfreq_char[word] = #freq\n\t\tmax_words[#max_words + 1]\
    \ = word\n\tend\n\tlocal max = -1\n\tfor _, v in pairs(freq_char) do\n\t\tif v\
    \ > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\tfor i = #max_words, 1, -1 do\n\t\
    \tif freq_char[max_words[i]] < max then\n\t\t\ttable.remove(max_words, i)\n\t\t\
    end\n\tend\n\ttable.sort(max_words)\n\treturn max_words[1]\nend", "    local max_word\
    \ = words[1]\n    local max_len = string.len(words[1])\n    for i = 2, #words\
    \ do\n        local current_word = words[i]\n        local current_len = string.len(current_word)\n\
    \        if current_len > max_len then\n            max_word = current_word\n\
    \            max_len = current_len\n        end\n    end\n    return max_word\n\
    end", "    return\nend", "  -- TODO: Implement me!\nend", "  local word = nil\n\
    \  local total = 0\n  for i, w in ipairs(words) do\n    local count = 0\n    for\
    \ char in pairs(table.count(w:chars())) do\n      count = count + 1\n    end\n\
    \    if count > total then\n      total = count\n      word = w\n    end\n  end\n\
    \  return word\nend", "  local chars = {}\n  local max_word = nil\n  local max_chars\
    \ = 0\n  for _, word in ipairs(words) do\n    chars[word] = {}\n    for char in\
    \ word:gmatch('.') do\n      chars[word][char] = true\n    end\n    local count\
    \ = 0\n    for _ in pairs(chars[word]) do\n      count = count + 1\n    end\n\
    \    if count > max_chars then\n      max_chars = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  -- TODO\nend", "    local max = 1\n\
    \    local max_word = words[1]\n    for i = 1, #words do\n        local str =\
    \ words[i]\n        local count = 0\n        for j = 1, #str do\n            if\
    \ string.find(str, str:sub(j, j), j + 1) == nil then\n                count =\
    \ count + 1\n            end\n        end\n        if count > max then\n     \
    \       max = count\n            max_word = str\n        end\n    end\n    return\
    \ max_word\nend", "    local max = nil\n    local max_length = -1\n    for i,\
    \ word in ipairs(words) do\n        local l = unique_length(word)\n        if\
    \ l > max_length then\n            max = word\n            max_length = l\n  \
    \      end\n    end\n    return max\nend", "    if not words then\n        return\
    \ nil\n    end\n    local max_index = 1\n    local max_len = #unique_chars(words[1])\n\
    \    for i, word in ipairs(words) do\n        local cur_len = #unique_chars(word)\n\
    \        if cur_len > max_len then\n            max_index = i\n            max_len\
    \ = cur_len\n        end\n    end\n    return words[max_index]\nend", "    return\
    \ nil\nend", "  local max,max_word\n  for _,word in ipairs(words) do\n    local\
    \ chars = {}\n    for c in word:gmatch'.' do\n      chars[c] = (chars[c] or 0)\
    \ + 1\n    end\n    if not max or #chars > max then\n      max = #chars\n    \
    \  max_word = word\n    end\n  end\n  return max_word\nend", "    local max_len\
    \ = 0\n    local ret = words[1]\n    for i = 1, #words do\n        local len =\
    \ unique_chars(words[i])\n        if len > max_len then\n            max_len =\
    \ len\n            ret = words[i]\n        end\n    end\n    return ret\nend",
  end, "    local max_word, max_count\n    for _, word in ipairs(words) do\n     \
    \   local chars = table.set(word:chars())\n        local count = #chars\n    \
    \    if not max_count or count > max_count then\n            max_word, max_count\
    \ = word, count\n        elseif count == max_count then\n            if word <\
    \ max_word then\n                max_word = word\n            end\n        end\n\
    \    end\n    return max_word\nend", "  local max_word = words[1]\n  local max_unique_chars\
    \ = 0\n  for i, word in ipairs(words) do\n    local unique_chars = 0\n    for\
    \ c in pairs(word_chars(word)) do\n      unique_chars = unique_chars + 1\n   \
    \ end\n    if unique_chars > max_unique_chars then\n      max_unique_chars = unique_chars\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
