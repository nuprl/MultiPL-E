name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a table of strings.\n-- The table contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- >>> find_max({'name', 'of', 'string'})\n\
  -- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n-- >>> find_max({'aaaaaaa',\
  \ 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max_words = {}\n    local max_num = 0\n    for _, v in ipairs(words)\
    \ do\n        local num = unique_letters(v)\n        if num > max_num then\n \
    \           max_num = num\n            max_words = {v}\n        elseif num ==\
    \ max_num then\n            table.insert(max_words, v)\n        end\n    end\n\
    \    return max_words[1]\nend", "  local max = {}\n  for _, w in ipairs(words)\
    \ do\n    local found = {}\n    for c in w:gmatch('.') do\n      found[c] = true\n\
    \    end\n    table.insert(max, {w, table.getn(found)})\n  end\n  table.sort(max,\
    \ function(a, b)\n    if a[2] ~= b[2] then\n      return a[2] > b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  return max[1][1]\nend", "  local\
    \ function word_cmp(a, b)\n    local uc_a = get_uniq_chars(a)\n    local uc_b\
    \ = get_uniq_chars(b)\n    if #uc_a ~= #uc_b then\n      return #uc_a > #uc_b\n\
    \    else\n      return a < b\n    end\n  end\n  table.sort(words, word_cmp)\n\
    \  return words[1]\nend", "    if not words then return nil end\n    local max\
    \ = 0\n    local max_word = nil\n    for _, word in ipairs(words) do\n       \
    \ local chars = {}\n        for c in word:gmatch(\".\") do\n            chars[c]\
    \ = true\n        end\n        local len = 0\n        for _ in pairs(chars) do\n\
    \            len = len + 1\n        end\n        if max < len then\n         \
    \   max = len\n            max_word = word\n        elseif max == len then\n \
    \           if max_word and max_word > word then\n                max_word = word\n\
    \            end\n        end\n    end\n    return max_word\nend", "  local max_value\
    \ = nil\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local\
    \ value = get_unique_letters(word)\n    if max_value == nil or value > max_value\
    \ then\n      max_value = value\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "    local max_word = ''\n    local max_chars = 0\n    for _,\
    \ word in ipairs(words) do\n        local word_chars = {}\n        for c in word:gmatch('.')\
    \ do\n            word_chars[c] = true\n        end\n        local num_chars =\
    \ 0\n        for c in pairs(word_chars) do\n            num_chars = num_chars\
    \ + 1\n        end\n        if num_chars > max_chars then\n            max_chars\
    \ = num_chars\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "  local max_word = words[1]\n  local max_unique_chars = find_unique_chars(max_word)\n\
    \  for i = 2, #words do\n    local word = words[i]\n    local unique_chars = find_unique_chars(word)\n\
    \    if unique_chars > max_unique_chars then\n      max_word = word\n      max_unique_chars\
    \ = unique_chars\n    end\n  end\n  return max_word\nend", "    local max_index\
    \ = 1\n    local max_value = words[1]\n    local max_unique = #unique_chars(words[1])\n\
    \    for i = 2, #words do\n        local word = words[i]\n        local uniq =\
    \ #unique_chars(word)\n        if uniq > max_unique or (uniq == max_unique and\
    \ word < max_value) then\n            max_index = i\n            max_value = word\n\
    \            max_unique = uniq\n        end\n    end\n    return max_value\nend",
  "  assert(type(words) == 'table', 'Expected a table')\n  local max = 0\n  local\
    \ max_word = ''\n  for _, word in ipairs(words) do\n    assert(type(word) == 'string',\
    \ 'Expected only strings')\n    local unique_chars = 0\n    for char in each_char(word)\
    \ do\n      unique_chars = unique_chars + 1\n    end\n    if unique_chars > max\
    \ then\n      max = unique_chars\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  -- Insert your code here\nend", "  local max_unique_char_count\
    \ = -1\n  local max_unique_char_word = ''\n  for _, word in ipairs(words) do\n\
    \    local unique_char_count = 0\n    for i = 1, #word do\n      local char =\
    \ word:sub(i, i)\n      if not word:find(char, i + 1) then\n        unique_char_count\
    \ = unique_char_count + 1\n      end\n    end\n    if unique_char_count > max_unique_char_count\
    \ then\n      max_unique_char_count = unique_char_count\n      max_unique_char_word\
    \ = word\n    end\n  end\n  return max_unique_char_word\nend", "    if words[1]\
    \ == nil then\n        return nil\n    end\n    local s, uniq_cnt = words[1],\
    \ #unique_chars(words[1])\n    for i = 2, #words do\n        local _uniq_cnt =\
    \ #unique_chars(words[i])\n        if _uniq_cnt > uniq_cnt then\n            s,\
    \ uniq_cnt = words[i], _uniq_cnt\n        elseif _uniq_cnt == uniq_cnt then\n\
    \            if words[i] < s then\n                s = words[i]\n            end\n\
    \        end\n    end\n    return s\nend", "\tlocal best_word, best_set_size =\
    \ nil, 0\n\tfor _, word in ipairs(words) do\n\t\tlocal set_size = get_unique_char_set_size(word)\n\
    \t\tif best_word == nil or\n\t\t   set_size > best_set_size or\n\t\t   (set_size\
    \ == best_set_size and word < best_word) then\n\t\t\tbest_word, best_set_size\
    \ = word, set_size\n\t\tend\n\tend\n\treturn best_word\nend", "    local max_len\
    \ = 0\n    local max_word = nil\n    for i, word in ipairs(words) do\n       \
    \ local len = #(make_set(word))\n        if len > max_len then\n            max_len\
    \ = len\n            max_word = word\n        end\n    end\n    return max_word\n\
    end", "\tlocal max, max_len = words[1], #words[1]\n\tfor i = 2, #words do\n\t\t\
    local word = words[i]\n\t\tlocal len = #word\n\t\tif len > max_len then\n\t\t\t\
    max_len = len\n\t\t\tmax = word\n\t\telseif len == max_len then\n\t\t\tmax = word\
    \ < max and word or max\n\t\tend\n\tend\n\treturn max\nend", "  -- error check\n\
    \  if type(words) ~= 'table' then\n    error('argument must be a table', 2)\n\
    \  end\n  -- count the words with max no. of unique characters\n  local count,\
    \ max_count = 1, 0\n  local max_word\n  for i, word in ipairs(words) do\n    if\
    \ type(word) ~= 'string' then\n      error('table elements must be strings', 2)\n\
    \    end\n    local unique_char_count = count_unique_chars(word)\n    if unique_char_count\
    \ > max_count then\n      max_count = unique_char_count\n      count = 1\n   \
    \   max_word = word\n    elseif unique_char_count == max_count then\n      count\
    \ = count + 1\n    end\n  end\n  -- return the word with max no. of unique characters\n\
    \  return max_word\nend", "    local max_count = 0\n    local max_word = nil\n\
    \    for _, word in ipairs(words) do\n        local count = num_of_unique_chars(word)\n\
    \        if count > max_count then\n            max_count = count\n          \
    \  max_word = word\n        end\n    end\n    return max_word\nend", "    local\
    \ max_word = words[1]\n    local max_count = 0\n    for _, word in ipairs(words)\
    \ do\n        local count = 0\n        for _, c in utf8.codes(word) do\n     \
    \       if not is_in_string(max_word, utf8.char(c)) then\n                count\
    \ = count + 1\n            end\n        end\n        if count > max_count then\n\
    \            max_count = count\n            max_word = word\n        end\n   \
    \ end\n    return max_word\nend", "\tlocal word_with_max_unique_chars = words[1]\n\
    \tlocal length_of_max_unique_chars = find_unique_chars(word_with_max_unique_chars)\n\
    \tfor i = 2, #words do\n\t\tlocal word = words[i]\n\t\tlocal length_of_unique_chars\
    \ = find_unique_chars(word)\n\t\tif length_of_unique_chars > length_of_max_unique_chars\
    \ then\n\t\t\tword_with_max_unique_chars = word\n\t\t\tlength_of_max_unique_chars\
    \ = length_of_unique_chars\n\t\tend\n\tend\n\treturn word_with_max_unique_chars\n\
    end", "    local char_count = {}\n    local max = 0\n    local max_word = nil\n\
    \    for i = 1, #words do\n        char_count[i] = {}\n        for char in string.gmatch(words[i],\
    \ '.') do\n            char_count[i][char] = (char_count[i][char] or 0) + 1\n\
    \        end\n        local n = table.size(char_count[i])\n        if n > max\
    \ then\n            max = n\n            max_word = words[i]\n        elseif n\
    \ == max then\n            if max_word > words[i] then\n                max_word\
    \ = words[i]\n            end\n        end\n    end\n    return max_word\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
