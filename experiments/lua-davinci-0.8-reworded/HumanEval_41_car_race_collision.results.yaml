name: HumanEval_41_car_race_collision
language: lua
results:
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \tlocal collisions = 0\n\tfor x = 1, n do\n\t\tfor y = 1, n do\n\t\t\tif y > x\
    \ then\n\t\t\t\tcollisions = collisions + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ collisions\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3),\
    \ 9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8),\
    \ 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpubdgccbr.lua:24:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpubdgccbr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \    local colliders = 0\n    for i = 1, n do\n        for j = 1, n do\n     \
    \       colliders = colliders + 1\n        end\n    end\n    return colliders\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
    \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n\
    \    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n\
    \    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \tlocal speed = 5 -- constant speed\n\tlocal x = 0 -- starting position of 1st\
    \ set of cars\n\tlocal y = 10^10 -- starting position of 2nd set of cars\n\tlocal\
    \ t = 0 -- time\n\tlocal d = 0 -- distance to cover\n\tlocal collision = 0 --\
    \ total number of collisions\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpq94btdc4.lua:27: 'end' expected (to close 'function' at line\
    \ 9) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  return n*(n-1)/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg80ozlrs.lua:16:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmpg80ozlrs.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  local r = 1\n  local l = n\n  local rl = 0\n  for i = 1, n do\n    if r > l\
    \ then\n      break\n    end\n    rl = rl + l\n    r = r + 1\n    l = l - 1\n\
    \  end\n  return rl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkecoom7w.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkecoom7w.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \    return (n*(n-1))/2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7exghm41.lua:16:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp7exghm41.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \tlocal cars_left = {};\n\tlocal cars_right = {};\n\tfor i = 1, n do\n\t\tcars_left[i]\
    \ = 0;\n\t\tcars_right[i] = 1;\n\tend\n\t\n\tlocal num_collisions = 0;\n\tlocal\
    \ i = 1;\n\tlocal j = 1;\n\t\n\twhile i <= n or j <= n do\n\t\tif cars_left[i]\
    \ <= cars_right[j] then\n\t\t\tnum_collisions = num_collisions + 1;\n\t\t\ti =\
    \ i + 1;\n\t\telse\n\t\t\tj = j + 1;\n\t\tend\n\tend\n\t\n\treturn num_collisions;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
    \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n\
    \    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n\
    \    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptcfsnldi.lua:22:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmptcfsnldi.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptcfsnldi.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \    return n * (n - 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0vu234r.lua:16:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp_0vu234r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  assert(n >= 1)\n  local left_to_right = {}\n  local right_to_left = {}\n  for\
    \ i = 1, n do\n    table.insert(left_to_right, math.random())\n    table.insert(right_to_left,\
    \ math.random())\n  end\n  table.sort(left_to_right)\n  table.sort(right_to_left)\n\
    \  local i = 1\n  local j = 1\n  local cnt = 0\n  while i <= n and j <= n do\n\
    \    if left_to_right[i] < right_to_left[j] then\n      cnt = cnt + 1\n      i\
    \ = i + 1\n    else\n      j = j + 1\n    end\n  end\n  return cnt\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = car_race_collision\n\
    \    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3), 9)\n\
    \    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8), 64)\n\
    \    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0jy61ex.lua:36:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpm0jy61ex.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp28ehmjg.lua:16:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmpp28ehmjg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  local left_to_right = {}\n  local right_to_left = {}\n  local collisions =\
    \ 0\n  for i = 1, n do\n    left_to_right[i] = 1\n    right_to_left[i] = 1\n \
    \ end\n  while true do\n    local first_car = nil\n    local second_car = nil\n\
    \    for i = 1, n do\n      if left_to_right[i] > 0 then\n        first_car =\
    \ i\n        break\n      end\n    end\n    if first_car == nil then\n      break\n\
    \    end\n    for i = n, 1, -1 do\n      if right_to_left[i] > 0 then\n      \
    \  second_car = i\n        break\n      end\n    end\n    assert(second_car ~=\
    \ nil)\n    if first_car == second_car then\n      collisions = collisions + 1\n\
    \      left_to_right[first_car] = 0\n      right_to_left[second_car] = 0\n   \
    \ else\n      left_to_right[first_car] = left_to_right[first_car] + 1\n      right_to_left[second_car]\
    \ = right_to_left[second_car] + 1\n    end\n  end\n  return collisions\nend\n\
    assert(car_race_collision(0) == 0)\nassert(car_race_collision(1) == 1)\nassert(car_race_collision(2)\
    \ == 2)\nassert(car_race_collision(3) == 3)\nassert(car_race_collision(4) == 5)\n\
    assert(car_race_collision(5) == 8)\nassert(car_race_collision(6) == 13)\nassert(car_race_collision(7)\
    \ == 21)\nassert(car_race_collision(8) == 34)\nassert(car_race_collision(9) ==\
    \ 55)\nassert(car_race_collision(10) == 89)\nassert(car_race_collision(11) ==\
    \ 144)\nassert(car_race_collision(12) == 233)\nassert(car_race_collision(13) ==\
    \ 377)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3),\
    \ 9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8),\
    \ 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \tlocal heading_right = { }\n\tlocal heading_left = { }\n\tfor i = 1, n do\n\t\
    \theading_right[i] = { x = -i }\n\t\theading_left[i] = { x = i }\n\tend\n\t\n\t\
    -- Collisions can only happen at x = 0\n\twhile true do\n\t\tlocal changed = false\n\
    \t\t\n\t\tfor i = 1, n do\n\t\t\tif heading_right[i].x == 0 then\n\t\t\t\tprint\
    \ \"collision\"\n\t\t\t\treturn\n\t\t\tend\n\t\t\tif heading_left[i].x == 0 then\n\
    \t\t\t\tprint \"collision\"\n\t\t\t\treturn\n\t\t\tend\n\t\t\t\n\t\t\tif heading_right[i].x\
    \ > 0 then\n\t\t\t\theading_right[i].x = heading_right[i].x - 1\n\t\t\t\tchanged\
    \ = true\n\t\t\tend\n\t\t\tif heading_left[i].x < 0 then\n\t\t\t\theading_left[i].x\
    \ = heading_left[i].x + 1\n\t\t\t\tchanged = true\n\t\t\tend\n\t\tend\n\t\t\n\t\
    \tif not changed then break end\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2),\
    \ 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4),\
    \ 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10),\
    \ 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3yk7fxu.lua:48:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmp_3yk7fxu.lua:48: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  local n = n or 10\n  local cars = {}\n  for i = 1, n do\n    local car = {x\
    \ = 0, y = i * -5}\n    table.insert(cars, car)\n  end\n  local cars2 = {}\n \
    \ for i = 1, n do\n    local car = {x = 100, y = i * -5}\n    table.insert(cars2,\
    \ car)\n  end\n  local t = 0\n  local collided = 0\n  while true do\n    t = t\
    \ + 1\n    local c1 = cars[1]\n    local c2 = cars2[1]\n    c1.x = c1.x + 1\n\
    \    c2.x = c2.x - 1\n    if c1.x >= c2.x then\n      collided = collided + 1\n\
    \      print('Collision at time ' .. t)\n    end\n    if c1.x >= 100 then\n  \
    \    break\n    end\n  end\n  return collided\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2),\
    \ 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4),\
    \ 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10),\
    \ 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "Collision at time 50\nCollision at time 51\nCollision at time 52\nCollision\
    \ at time 53\nCollision at time 54\nCollision at time 55\nCollision at time 56\n\
    Collision at time 57\nCollision at time 58\nCollision at time 59\nCollision at\
    \ time 60\nCollision at time 61\nCollision at time 62\nCollision at time 63\n\
    Collision at time 64\nCollision at time 65\nCollision at time 66\nCollision at\
    \ time 67\nCollision at time 68\nCollision at time 69\nCollision at time 70\n\
    Collision at time 71\nCollision at time 72\nCollision at time 73\nCollision at\
    \ time 74\nCollision at time 75\nCollision at time 76\nCollision at time 77\n\
    Collision at time 78\nCollision at time 79\nCollision at time 80\nCollision at\
    \ time 81\nCollision at time 82\nCollision at time 83\nCollision at time 84\n\
    Collision at time 85\nCollision at time 86\nCollision at time 87\nCollision at\
    \ time 88\nCollision at time 89\nCollision at time 90\nCollision at time 91\n\
    Collision at time 92\nCollision at time 93\nCollision at time 94\nCollision at\
    \ time 95\nCollision at time 96\nCollision at time 97\nCollision at time 98\n\
    Collision at time 99\nCollision at time 100\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmp35ibctim.lua:43: expected: 4, actual: 51\nstack traceback:\n\
    \t/tmp/tmp35ibctim.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  -- example: n = 4\n  local collisions = 0;\n  local car_right_to_left = 0;\n\
    \  local car_left_to_right = n-1;\n  while car_right_to_left < n do\n    collisions\
    \ = collisions + car_left_to_right;\n    car_right_to_left = car_right_to_left\
    \ + 1;\n    car_left_to_right = car_left_to_right - 1;\n  end;\n  return collisions;\n\
    end;\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3),\
    \ 9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8),\
    \ 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74tizjjb.lua:25:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp74tizjjb.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n    lu.assertEquals(candidate(3),\
    \ 9)\n    lu.assertEquals(candidate(4), 16)\n    lu.assertEquals(candidate(8),\
    \ 64)\n    lu.assertEquals(candidate(10), 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnmqi0s3.lua:16:\
    \ expected: 4, actual: nil\nstack traceback:\n\t/tmp/tmprnmqi0s3.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  local num_collisions = 0\n  local cars_left = {}\n  local cars_right = {}\n\
    \  for i = 1, n do\n    cars_left[i] = 1\n    cars_right[i] = 1\n  end\n  local\
    \ i = 1\n  local j = 1\n  while i <= n and j <= n do\n    if cars_left[i] == 1\
    \ and cars_right[j] == 1 then\n      num_collisions = num_collisions + 1\n   \
    \   i = i + 1\n      j = j + 1\n    elseif cars_left[i] == 1 then\n      i = i\
    \ + 1\n    elseif cars_right[j] == 1 then\n      j = j + 1\n    end\n  end\n \
    \ return num_collisions\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv2s2xo4w.lua:36:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpv2s2xo4w.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \    local start_line = {}\n    local end_line = {}\n    local start_line_len\
    \ = 0\n    local end_line_len = 0\n    local collisions = 0\n    for i = 1, n\
    \ do\n        start_line[i] = i\n        end_line[i] = n + i\n        start_line_len\
    \ = start_line_len + 1\n        end_line_len = end_line_len + 1\n    end\n   \
    \ if n == 0 then\n        return 0\n    end\n    for i = 1, n do\n        local\
    \ start_line_car = table.remove(start_line, 1)\n        local end_line_car = table.remove(end_line,\
    \ 1)\n        while end_line_car > start_line_car do\n            table.insert(start_line,\
    \ start_line_car)\n            start_line_car = table.remove(start_line, 1)\n\
    \            collisions = collisions + 1\n        end\n        start_line_len\
    \ = start_line_len - 1\n        end_line_len = end_line_len - 1\n        if start_line_len\
    \ > 0 then\n            table.insert(start_line, start_line_car)\n           \
    \ start_line_len = start_line_len + 1\n        end\n        if end_line_len >\
    \ 0 then\n            table.insert(end_line, end_line_car)\n            end_line_len\
    \ = end_line_len + 1\n        end\n    end\n    return collisions\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2),\
    \ 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4),\
    \ 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10),\
    \ 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  local l = {}\n  local r = {}\n  local result = 0\n  for i = 1, n do\n    l[i]\
    \ = i\n    r[i] = i\n  end\n  local i = 1\n  local j = 1\n  while i <= n and j\
    \ <= n do\n    if l[i] < r[j] then\n      result = result + 1\n      i = i + 1\n\
    \    else\n      j = j + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2),\
    \ 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4),\
    \ 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10),\
    \ 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92u9krlm.lua:33:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp92u9krlm.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \  return n * (n - 1) / 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = car_race_collision\n    lu.assertEquals(candidate(2), 4)\n \
    \   lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4), 16)\n\
    \    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10), 100)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5q8hsiuy.lua:16:\
    \ expected: 4, actual: 1\nstack traceback:\n\t/tmp/tmp5q8hsiuy.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Imagine a road that's a perfectly straight infinitely long line.\n\
    -- n cars are driving left to right;  simultaneously, a different set of n cars\n\
    -- are driving right to left.   The two sets of cars start out being very far\
    \ from\n-- each other.  All cars move in the same speed.  Two cars are said to\
    \ collide\n-- when a car that's moving left to right hits a car that's moving\
    \ right to left.\n-- However, the cars are infinitely sturdy and strong; as a\
    \ result, they continue moving\n-- in their trajectory as if they did not collide.\n\
    -- This function outputs the number of such collisions.\nlocal function car_race_collision(n)\n\
    \    if n == 0 then\n        return 0\n    end\n    local l = {}\n    local r\
    \ = {}\n    for i = 1, n do\n        local li = math.random(10000) * -1\n    \
    \    table.insert(l, li)\n        local ri = math.random(10000)\n        table.insert(r,\
    \ ri)\n    end\n    table.sort(l)\n    table.sort(r)\n    local prev_r = 0\n \
    \   local result = 0\n    for i = 1, n do\n        local li = l[i]\n        if\
    \ li < prev_r then\n            result = result + 1\n        end\n        prev_r\
    \ = r[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = car_race_collision\n    lu.assertEquals(candidate(2),\
    \ 4)\n    lu.assertEquals(candidate(3), 9)\n    lu.assertEquals(candidate(4),\
    \ 16)\n    lu.assertEquals(candidate(8), 64)\n    lu.assertEquals(candidate(10),\
    \ 100)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf_zydwj.lua:38:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpcf_zydwj.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
