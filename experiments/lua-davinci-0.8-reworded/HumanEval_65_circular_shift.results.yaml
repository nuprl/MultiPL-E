name: HumanEval_65_circular_shift
language: lua
results:
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    local digits = tostring(x)\n\
    \    local shift = shift % #digits\n    local result = digits:sub(shift + 1) ..\
    \ digits:sub(1, shift)\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5o9a7gyd.lua:18:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp5o9a7gyd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    local s = tostring(x)\n\
    \    local m = #s\n    if shift < m then\n        return s:sub(m - shift + 1)\
    \ .. s:sub(1, m - shift)\n    else\n        local n = shift % m\n        return\
    \ s:sub(m - n + 1) .. s:sub(1, m - n):reverse()\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7c4omuc.lua:23:\
    \ expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpz7c4omuc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    local x_str = tostring(x)\n\
    \    local x_len = #x_str\n    if shift > x_len then\n        return x_str:reverse()\n\
    \    end\n    return x_str:sub(x_len-shift+1) .. x_str:sub(1, x_len-shift)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
    \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    x = tostring(x)\n\
    \    shift = shift % #x\n    return x:sub(shift + 1) .. x:sub(1, shift)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
    \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jnugn0n.lua:17:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmp4jnugn0n.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n  if shift >= num_digits(x)\
    \ then\n    return reverse_digits(x)\n  end\n  return str_tens(x, shift) .. str_ones(x,\
    \ shift)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = circular_shift\n    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd8_iuixt.lua:9:\
    \ attempt to call a nil value (global 'num_digits')\nstack traceback:\n\t/tmp/tmpd8_iuixt.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpd8_iuixt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    local str = tostring(x)\n\
    \    shift = shift % #str\n    if shift == 0 then\n        return str\n    end\n\
    \    return string.sub(str, shift + 1) .. string.sub(str, 1, shift)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
    \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9uqjbhv.lua:20:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpp9uqjbhv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n  return tostring(x):reverse():sub(1,shift):reverse()\
    \ .. tostring(x):sub(1, #tostring(x) - shift)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qan5fdc.lua:17:\
    \ expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmp1qan5fdc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n  local shifted = tostring(x)\n\
    \  shift = shift % #shifted\n  local back = shifted:sub(1, -shift - 1)\n  local\
    \ front = shifted:sub(-shift)\n  return front .. back\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjhx6oky.lua:20:\
    \ expected: \"12\"\nactual: \"1212\"\nstack traceback:\n\t/tmp/tmpfjhx6oky.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    local xs = tostring(x)\n\
    \    local len = #xs\n    local shift = shift % len\n    local res = xs:sub(len\
    \ - shift + 1) .. xs:sub(1, len - shift)\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmocp3ih.lua:21:\
    \ expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmptmocp3ih.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n\treturn (('%0' .. n_digits(x)\
    \ .. 'd'):format(x) .. (shift > n_digits(x) and '' or ' '):rep(shift)):sub(shift\
    \ + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = circular_shift\n    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1qtb52yy.lua:9:\
    \ attempt to call a nil value (global 'n_digits')\nstack traceback:\n\t/tmp/tmp1qtb52yy.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1qtb52yy.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    x = tostring(x)\n\
    \    if shift < #x then\n        x = x:sub(shift + 1) .. x:sub(1, shift)\n   \
    \ else\n        x = x:reverse()\n    end\n    return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxks0jqxs.lua:21:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpxks0jqxs.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n\tlocal s = str(x)\n\t\
    if shift >= len(s) then\n\t\treturn s:reverse()\n\tend\n\treturn s:sub(shift +\
    \ 1) .. s:sub(1, shift)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = circular_shift\n    lu.assertEquals(candidate(100, 2), '001')\n\
    \    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5k_nwe3o.lua:9:\
    \ attempt to call a nil value (global 'str')\nstack traceback:\n\t/tmp/tmp5k_nwe3o.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp5k_nwe3o.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    if shift > 0 then\n\
    \        shift = shift % #tostring(x)\n    end\n    return tostring(x):sub(shift\
    \ + 1) .. tostring(x):sub(1, shift)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy22qprvb.lua:18:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpy22qprvb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n  x = tostring(x)\n  shift\
    \ = shift % #x\n  return x:sub(shift + 1) .. x:sub(1, shift)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprab97l9h.lua:17:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmprab97l9h.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n\tlocal s = tostring(x)\n\
    \tlocal n = #s\n\tif shift >= n then\n\t\ts = s:reverse()\n\telse\n\t\ts = (s:sub(n-shift+1,\
    \ n) .. s:sub(1, n-shift))\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok_x0w1i.lua:23:\
    \ expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpok_x0w1i.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    local p = x\n    local\
    \ q = x\n    local r = 0\n    local n = 0\n    repeat\n        r = q % 10\n  \
    \      q = q // 10\n        n = n + 1\n    until q == 0\n    if shift < n then\n\
    \        q = x\n        for i = 1, shift do\n            r = q % 10\n        \
    \    q = q // 10\n        end\n        local s = 0\n        for i = 1, n - shift\
    \ do\n            s = s * 10 + q % 10\n            q = q // 10\n        end\n\
    \        p = p // (10 ^ shift)\n        p = p + s * (10 ^ n)\n    else\n     \
    \   local s = 0\n        repeat\n            s = s * 10 + p % 10\n           \
    \ p = p // 10\n        until p == 0\n        p = s\n    end\n    return tostring(p)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
    \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2fellv9a.lua:45:\
    \ expected: \"001\"\nactual: \"1001.0\"\nstack traceback:\n\t/tmp/tmp2fellv9a.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    x = tostring(x)\n\
    \    if shift >= #x then\n        x = string.reverse(x)\n    else\n        x =\
    \ x:sub(#x - shift + 1) .. x:sub(1, #x - shift)\n    end\n    return x\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
    \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6f71m27.lua:22:\
    \ expected: \"12\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpl6f71m27.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n  local str = string.format(\"\
    %d\", x)\n  local len = #str\n  local shift = shift % len\n  return string.sub(str,\
    \ len - shift + 1) .. string.sub(str, 1, len - shift)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep6ra0f2.lua:20:\
    \ expected: \"79\"\nactual: \"97\"\nstack traceback:\n\t/tmp/tmpep6ra0f2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n    if shift == 0 then\n\
    \        return tostring(x)\n    end\n    local x_str = tostring(x)\n    local\
    \ length = x_str:len()\n    if shift >= length then\n        return x_str:reverse()\n\
    \    end\n    return x_str:sub(shift + 1) .. x_str:sub(1, shift)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = circular_shift\n    lu.assertEquals(candidate(100,\
    \ 2), '001')\n    lu.assertEquals(candidate(12, 2), '12')\n    lu.assertEquals(candidate(97,\
    \ 8), '79')\n    lu.assertEquals(candidate(12, 1), '21')\n    lu.assertEquals(candidate(11,\
    \ 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqja5sk8.lua:23:\
    \ expected: \"001\"\nactual: \"010\"\nstack traceback:\n\t/tmp/tmpxqja5sk8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n-- and return the result as a string.\n-- If shift > number of digits,\
    \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
    \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n  x = math.abs(x)\n  if\
    \ x == 0 then return '0' end\n  local n = math.floor(math.log10(x))\n  x = x *\
    \ (10 ^ (shift % (n + 1)))\n  x = x % (10 ^ (n + 1))\n  return tostring(x)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
    \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
    \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
    \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgd_8whxz.lua:20:\
    \ expected: \"001\"\nactual: \"0.0\"\nstack traceback:\n\t/tmp/tmpgd_8whxz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
