name: HumanEval_74_total_match
language: lua
prompt: "-- Write a function that accepts two tables of strings and returns the table\
  \ that has \n-- total number of chars in the all strings of the table less than\
  \ the other table.\n-- if the two tables have the same number of chars, return the\
  \ first table.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
  \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
  \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
  \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
  \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
  \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
  \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local len1 = 0\n  local len2 = 0\n  for i, v in ipairs(lst1) do\n\
    \    len1 = len1 + string.len(v)\n  end\n  for i, v in ipairs(lst2) do\n    len2\
    \ = len2 + string.len(v)\n  end\n  if len1 <= len2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "    local lst1_total = 0\n    local lst2_total\
    \ = 0\n    for _, str in ipairs(lst1) do\n        lst1_total = lst1_total + #str\n\
    \    end\n    for _, str in ipairs(lst2) do\n        lst2_total = lst2_total +\
    \ #str\n    end\n    if lst1_total < lst2_total then\n        return lst1\n  \
    \  else\n        return lst2\n    end\nend", "  local total1 = 0\n  local total2\
    \ = 0\n  for i, v in ipairs(lst1) do\n    total1 = total1 + #v\n  end\n  for i,\
    \ v in ipairs(lst2) do\n    total2 = total2 + #v\n  end\n  if total1 < total2\
    \ then\n    return lst1\n  else\n    return lst2\n  end\nend", "    local total1\
    \ = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n        total1 = total1\
    \ + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2 = total2 + #lst2[i]\n\
    \    end\n    if total1 < total2 then\n        return lst1\n    else\n       \
    \ return lst2\n    end\nend", "    if lst1 == {} then\n        return lst1\n \
    \   elseif lst2 == {} then\n        return lst2\n    else\n        local x = sum_table(lst1)\n\
    \        local y = sum_table(lst2)\n        if x < y then\n            return\
    \ lst1\n        else\n            return lst2\n        end\n    end\nend", " \
    \ -- body\n  local totallst1 = 0\n  local totallst2 = 0\n  for i, j in ipairs(lst1)\
    \ do\n    totallst1 = totallst1 + #lst1[i]\n  end\n  for i, j in ipairs(lst2)\
    \ do\n    totallst2 = totallst2 + #lst2[i]\n  end\n  if totallst1 < totallst2\
    \ then\n    return lst1\n  else\n    return lst2\n  end\nend", "    if table.getn(lst1)\
    \ > table.getn(lst2) then\n        return lst2\n    elseif table.getn(lst1) <\
    \ table.getn(lst2) then\n        return lst1\n    else\n        local sum1 = 0\n\
    \        local sum2 = 0\n        for i = 1, table.getn(lst1) do\n            sum1\
    \ = sum1 + string.len(lst1[i])\n        end\n        for i = 1, table.getn(lst2)\
    \ do\n            sum2 = sum2 + string.len(lst2[i])\n        end\n        if sum1\
    \ < sum2 then\n            return lst1\n        elseif sum1 > sum2 then\n    \
    \        return lst2\n        else\n            return lst1\n        end\n   \
    \ end\nend", "  local sum1 = 0\n  local sum2 = 0\n  for i = 1, #lst1 do\n    sum1\
    \ = sum1 + string.len(lst1[i])\n  end\n  for i = 1, #lst2 do\n    sum2 = sum2\
    \ + string.len(lst2[i])\n  end\n  if sum1 <= sum2 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "    local total1 = total(lst1)\n    local total2\
    \ = total(lst2)\n    if total1 < total2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "    return (reduce(function(acc, val) \n\
    \            return acc + #val \n        end, lst1) < reduce(function(acc, val)\
    \ \n            return acc + #val \n        end, lst2)) and lst2 or lst1\nend",
  "\t-- get total length of each table\n\tlocal total_lst1 = reduce(function(x, y)\
    \ return x + #y end, 0, lst1)\n\tlocal total_lst2 = reduce(function(x, y) return\
    \ x + #y end, 0, lst2)\n\tif total_lst1 <= total_lst2 then\n\t\treturn lst1\n\t\
    else\n\t\treturn lst2\n\tend\nend", "\tlocal sum1 = 0\n\tlocal sum2 = 0\n\tlocal\
    \ final_table = {}\n\tfor _,i in ipairs(lst1) do\n\t\tsum1 = sum1 + #i\n\tend\n\
    \tfor _,i in ipairs(lst2) do\n\t\tsum2 = sum2 + #i\n\tend\n\tif sum1 < sum2 then\n\
    \t\tfinal_table = lst1\n\telseif sum1 > sum2 then\n\t\tfinal_table = lst2\n\t\
    else\n\t\tfinal_table = lst1\n\tend\n\treturn final_table\nend", "  -- Code Here\n\
    end", "  local sum1 = 0\n  local sum2 = 0\n  for _, v in ipairs(lst1) do\n   \
    \ sum1 = sum1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n\
    \  end\n  if sum1 > sum2 then\n    return lst2\n  else\n    return lst1\n  end\n\
    end", "  total1 = 0\n  total2 = 0\n  for k, v in pairs(lst1) do\n    total1 =\
    \ total1 + string.len(v)\n  end\n  for k, v in pairs(lst2) do\n    total2 = total2\
    \ + string.len(v)\n  end\n  if total1 > total2 then\n    return lst2\n  elseif\
    \ total1 < total2 then\n    return lst1\n  else\n    return lst1\n  end\nend",
  "    local total1 = 0\n    local total2 = 0\n    for k,v in pairs(lst1) do\n   \
    \     total1 = total1 + string.len(v)\n    end\n    for k,v in pairs(lst2) do\n\
    \        total2 = total2 + string.len(v)\n    end\n    if total1 > total2 then\n\
    \        return lst2\n    else\n        return lst1\n    end\nend", "  local total1\
    \ = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n  end\n  if total1\
    \ < total2 then\n    return lst1\n  elseif total1 > total2 then\n    return lst2\n\
    \  elseif total1 == total2 then\n    return lst1\n  end\nend", "    return nil\n\
    end", "    local sum1 = 0\n    local sum2 = 0\n    for k, v in pairs(lst1) do\n\
    \        sum1 = sum1 + #v\n    end\n    for k, v in pairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 <= sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend", "  local function accumulate(total, str)\n\
    \    return total + string.len(str)\n  end\n  if (table.reduce(lst1, accumulate,\
    \ 0) < table.reduce(lst2, accumulate, 0)) then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
