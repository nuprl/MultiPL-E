name: HumanEval_54_same_chars
language: lua
results:
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    if #s0 ~= #s1 then\n        return false\n    end\n\
    \    local chars0 = {}\n    local chars1 = {}\n    for i = 1, #s0 do\n       \
    \ chars0[s0:sub(i, i)] = (chars0[s0:sub(i, i)] or 0) + 1\n        chars1[s1:sub(i,\
    \ i)] = (chars1[s1:sub(i, i)] or 0) + 1\n    end\n    for c in pairs(chars0) do\n\
    \        if chars0[c] ~= chars1[c] then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tyria3u.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3tyria3u.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    if #s0 == #s1 then\n        return s0:gsub('%a', '')\
    \ == s1:gsub('%a', '')\n    else\n        local c0, c1 = {}, {}\n        for c\
    \ in s0:gmatch('%a') do\n            c0[c] = c0[c] and c0[c] + 1 or 1\n      \
    \  end\n        for c in s1:gmatch('%a') do\n            c1[c] = c1[c] and c1[c]\
    \ + 1 or 1\n        end\n        for k, v in pairs(c0) do\n            if c1[k]\
    \ ~= v then\n                return false\n            end\n        end\n    \
    \    for k, v in pairs(c1) do\n            if c0[k] ~= v then\n              \
    \  return false\n            end\n        end\n        return true\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobhylugo.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpobhylugo.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local sc0 = S.chars(s0)\n    local sc1 = S.chars(s1)\n\
    \    local ts0 = T.new(#sc0, 0)\n    local ts1 = T.new(#sc1, 0)\n    for _, c\
    \ in ipairs(sc0) do\n        ts0[c] = (ts0[c] or 0) + 1\n    end\n    for _, c\
    \ in ipairs(sc1) do\n        ts1[c] = (ts1[c] or 0) + 1\n    end\n    for _, c\
    \ in ipairs(sc0) do\n        if ts0[c] ~= ts1[c] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg1omfo82.lua:15:\
    \ attempt to index a nil value (global 'S')\nstack traceback:\n\t/tmp/tmpg1omfo82.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpg1omfo82.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0\
    \ do\n        local c = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n\
    \    for i = 1, #s1 do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c]\
    \ or 0) + 1\n    end\n    return table.compare(t0, t1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkly_voj2.lua:25:\
    \ attempt to call a nil value (field 'compare')\nstack traceback:\n\t/tmp/tmpkly_voj2.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpkly_voj2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local char_count = {}\n    local len_s0 = #s0\n    local\
    \ len_s1 = #s1\n    if len_s0 ~= len_s1 then\n        return false\n    end\n\
    \    for i = 1, len_s0 do\n        local char = s0:sub(i, i)\n        char_count[char]\
    \ = (char_count[char] or 0) + 1\n    end\n    for i = 1, len_s1 do\n        local\
    \ char = s1:sub(i, i)\n        char_count[char] = (char_count[char] or 0) - 1\n\
    \        if char_count[char] < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32rl6uuf.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp32rl6uuf.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local c0 = count_chars(s0)\n    local c1 = count_chars(s1)\n\
    \    for k, v in pairs(c0) do\n        if v ~= c1[k] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzwe599k.lua:15:\
    \ attempt to call a nil value (global 'count_chars')\nstack traceback:\n\t/tmp/tmptzwe599k.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmptzwe599k.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    -- Convert the strings to tables of character counts.\n\
    \    local t0 = {}\n    local t1 = {}\n    for i = 1, #s0 do\n        local c\
    \ = s0:sub(i, i)\n        t0[c] = (t0[c] or 0) + 1\n    end\n    for i = 1, #s1\
    \ do\n        local c = s1:sub(i, i)\n        t1[c] = (t1[c] or 0) + 1\n    end\n\
    \    -- Check that the characters are present in the same quantities.\n    for\
    \ i = 1, #s0 do\n        local c = s0:sub(i, i)\n        if t0[c] ~= t1[c] then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn21qi4f2.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn21qi4f2.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkruwzaq.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvkruwzaq.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local t0 = {}\n  local t1 = {}\n  for c in (s0..s1):gmatch(\"\
    .\") do\n    t0[c] = (t0[c] or 0) + 1\n    t1[c] = (t1[c] or 0) + 1\n  end\n \
    \ for c, n in pairs(t0) do\n    if n ~= t1[c] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8817bhu.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu8817bhu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  if #s0 ~= #s1 then return false end\n  for i = 1, #s0\
    \ do\n    local c = s0:sub(i, i)\n    if s1:find(c, 1, true) == nil then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptyqdlxdr.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptyqdlxdr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  if s0 == s1 then return true end\n  if #s0 ~= #s1 then\
    \ return false end\n  local vs0 = _M.vars(s0)\n  local vs1 = _M.vars(s1)\n  if\
    \ #vs0 ~= #vs1 then return false end\n  -- if not the same number of characters\
    \ -> false\n  for _,v in ipairs(vs0) do\n    if not _M.contains(vs1, v) then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66ge_elw.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp66ge_elw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t0 = to_letters(s0)\n    local t1 = to_letters(s1)\n\
    \    for _, ch in ipairs(t0) do\n        t1[ch] = (t1[ch] or 0) - 1\n    end\n\
    \    for _, n in pairs(t1) do\n        if n ~= 0 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bk94b3p.lua:15:\
    \ attempt to call a nil value (global 'to_letters')\nstack traceback:\n\t/tmp/tmp6bk94b3p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6bk94b3p.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local chars0 = {}\n    local chars1 = {}\n    for i=1,\
    \ #s0 do\n        local c = s0:sub(i,i)\n        chars0[c] = chars0[c] and chars0[c]\
    \ + 1 or 1\n    end\n    for i=1, #s1 do\n        local c = s1:sub(i,i)\n    \
    \    chars1[c] = chars1[c] and chars1[c] + 1 or 1\n    end\n    for i=1, #s0 do\n\
    \        local c = s0:sub(i,i)\n        if chars0[c] ~= chars1[c] then\n     \
    \       return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjuqg0yc7.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjuqg0yc7.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local used = {}\n    for c in s0:gmatch('.') do\n  \
    \      used[c] = true\n    end\n    for c in s1:gmatch('.') do\n        if not\
    \ used[c] then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflem8hj4.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpflem8hj4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local t = {}\n    local i = 1\n    while i <= #s0 do\n\
    \        local c = s0:sub(i, i)\n        t[c] = (t[c] or 0) + 1\n        i = i\
    \ + 1\n    end\n    i = 1\n    while i <= #s1 do\n        local c = s1:sub(i,\
    \ i)\n        if t[c] == nil then\n            return false\n        end\n   \
    \     t[c] = t[c] - 1\n        if t[c] == 0 then\n            t[c] = nil\n   \
    \     end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9_m5451.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo9_m5451.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local char_counts = {}\n  for char in string.gmatch(s0,\
    \ \".\") do\n    char_counts[char] = (char_counts[char] or 0) + 1\n  end\n  for\
    \ char in string.gmatch(s1, \".\") do\n    if char_counts[char] == nil then\n\
    \      return false\n    end\n    char_counts[char] = char_counts[char] - 1\n\
    \    if char_counts[char] == 0 then\n      char_counts[char] = nil\n    end\n\
    \  end\n  return char_counts[next(char_counts)] == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc4aq3dh.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzc4aq3dh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n  local charcount = 0\n  local s = s0\n  if #s0 > #s1 then\n\
    \    s = s1\n  end\n  for i = 1, #s do\n    charcount = charcount + 1\n    s0\
    \ = s0:gsub(s:sub(i, i), \"\")\n    s1 = s1:gsub(s:sub(i, i), \"\")\n  end\n \
    \ return #s0 + #s1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuimpbwq.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnuimpbwq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n    local char_count = 0\n    local mask = 0\n    for i\
    \ = 1, #s0 do\n        local c = string.byte(s0, i)\n        mask = bit.bor(mask,\
    \ bit.lshift(1, c))\n        char_count = char_count + 1\n    end\n    for i =\
    \ 1, #s1 do\n        local c = string.byte(s1, i)\n        mask = bit.bxor(mask,\
    \ bit.lshift(1, c))\n        char_count = char_count - 1\n    end\n    if mask\
    \ ~= 0 or char_count ~= 0 then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = same_chars\n\
    \    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'), true)\n   \
    \ lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd_je1uxu.lua:19:\
    \ attempt to index a nil value (global 'bit')\nstack traceback:\n\t/tmp/tmpd_je1uxu.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpd_je1uxu.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n\tlocal t0 = { }\n\tlocal t1 = { }\n\tfor i = 1, #s0 do\n\
    \t\tlocal c = s0:sub(i, i)\n\t\tt0[c] = (t0[c] or 0) + 1\n\tend\n\tfor i = 1,\
    \ #s1 do\n\t\tlocal c = s1:sub(i, i)\n\t\tt1[c] = (t1[c] or 0) + 1\n\tend\n\t\
    for k, v in pairs(t0) do\n\t\tif v ~= t1[k] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\tfor k, v in pairs(t1) do\n\t\tif v ~= t0[k] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddeddabc'),\
    \ true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'), true)\n    lu.assertEquals(candidate('dddddddabc',\
    \ 'abcd'), true)\n    lu.assertEquals(candidate('eabcd', 'dddddddabc'), false)\n\
    \    lu.assertEquals(candidate('abcd', 'dddddddabcf'), false)\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddddabc'), false)\n    lu.assertEquals(candidate('aabb', 'aaccc'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9n2j4n8.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm9n2j4n8.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Check if two words have the same characters.\n-- >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n-- true\n-- >>> same_chars('abcd', 'dddddddabc')\n--\
    \ true\n-- >>> same_chars('dddddddabc', 'abcd')\n-- true\n-- >>> same_chars('eabcd',\
    \ 'dddddddabc')\n-- false\n-- >>> same_chars('abcd', 'dddddddabce')\n-- false\n\
    -- >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n-- false\nlocal function\
    \ same_chars(s0, s1)\n\tlocal charcounts = {}\n\tlocal i0, i1\n\tlocal c0, c1\n\
    \tfor i0 = 1, #s0 do\n\t\tc0 = s0:sub(i0, i0)\n\t\tcharcounts[c0] = (charcounts[c0]\
    \ or 0) + 1\n\tend\n\tfor i1 = 1, #s1 do\n\t\tc1 = s1:sub(i1, i1)\n\t\tcharcounts[c1]\
    \ = (charcounts[c1] or 0) - 1\n\tend\n\tfor _, c in pairs(charcounts) do\n\t\t\
    if c ~= 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = same_chars\n    lu.assertEquals(candidate('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc'), true)\n    lu.assertEquals(candidate('abcd', 'dddddddabc'),\
    \ true)\n    lu.assertEquals(candidate('dddddddabc', 'abcd'), true)\n    lu.assertEquals(candidate('eabcd',\
    \ 'dddddddabc'), false)\n    lu.assertEquals(candidate('abcd', 'dddddddabcf'),\
    \ false)\n    lu.assertEquals(candidate('eabcdzzzz', 'dddzzzzzzzddddabc'), false)\n\
    \    lu.assertEquals(candidate('aabb', 'aaccc'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71ixnare.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp71ixnare.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
