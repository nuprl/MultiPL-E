name: HumanEval_114_minSubArraySum
language: lua
prompt: "-- Given a table of integers nums, find the minimum sum of any non-empty\
  \ sub-table\n-- of nums.\n-- Example\n-- >>> minSubArraySum({2, 3, 4, 1, 2, 4})\n\
  -- 1\n-- >>> minSubArraySum({-1, -2, -3})\n-- -6\nlocal function minSubArraySum(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
  \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
  \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n   \
  \ lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
  \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n\
  \    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
  \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
  \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
  \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = nums[1]\n  local t = nums[1]\n  for i = 2, #nums do\n \
    \   s = math.min(s + nums[i], nums[i])\n    t = math.min(s, t)\n  end\n  return\
    \ t\nend", "  local n = #nums\n  if n == 0 then return nil end\n  local min_sum\
    \ = nums[1]\n  local c_sum = nums[1]\n  for i = 2, n do\n    c_sum = math.min(c_sum\
    \ + nums[i], nums[i])\n    min_sum = math.min(min_sum, c_sum)\n  end\n  return\
    \ min_sum\nend", "  local minSoFar = math.huge\n  local minCurr = 0\n  for _,\
    \ n in ipairs(nums) do\n    minCurr = math.min(minCurr + n, n)\n    minSoFar =\
    \ math.min(minSoFar, minCurr)\n  end\n  return minSoFar\nend", "  local min =\
    \ 1e309\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n   \
    \ if sum < min then\n      min = sum\n    end\n    if sum > 0 then\n      sum\
    \ = 0\n    end\n  end\n  return min\nend", "  local minSum = 0\n  local curSum\
    \ = 0\n  for _, v in ipairs(nums) do\n    curSum = curSum + v\n    if curSum <\
    \ minSum then\n      minSum = curSum\n    end\n  end\n  return minSum\nend", " \
    \ local min_sum, sum = math.huge, 0\n  for _, num in ipairs(nums) do\n    sum\
    \ = sum + num\n    min_sum = math.min(min_sum, sum)\n    if sum > 0 then\n   \
    \   sum = 0\n    end\n  end\n  return min_sum\nend", "    local acc, min = 0,\
    \ 0\n    for i, v in ipairs(nums) do\n        acc = acc + v\n        if acc <\
    \ min then\n            min = acc\n        end\n    end\n    return min\nend",
  "  local min_sum = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum\
    \ + nums[i]\n    if sum < min_sum then\n      min_sum = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return min_sum\nend", "  local sum\
    \ = 0\n  local min_sum = 0\n  local found = false\n  for i = 1, #nums do\n   \
    \ sum = sum + nums[i]\n    if sum < min_sum or not found then\n      min_sum =\
    \ sum\n      found = true\n    end\n  end\n  return min_sum\nend", "  local minSum\
    \ = nums[1]\n  local curSum = 0\n  for i = 1, #nums do\n    curSum = curSum +\
    \ nums[i]\n    if curSum < minSum then\n      minSum = curSum\n    end\n    if\
    \ curSum > 0 then\n      curSum = 0\n    end\n  end\n  return minSum\nend", " \
    \   local minSum, sum = math.huge, 0\n    for _, num in ipairs(nums) do\n    \
    \    sum = sum + num\n        minSum = math.min(minSum, sum)\n        if sum >\
    \ 0 then\n            sum = 0\n        end\n    end\n    return minSum\nend",
  "  local min, minsofar = 0, 0\n  for i = 1, #nums do\n    minsofar = minsofar +\
    \ nums[i]\n    if minsofar > 0 then\n      minsofar = 0\n    end\n    if min >\
    \ minsofar then\n      min = minsofar\n    end\n  end\n  return min\nend", " \
    \   local minSum = 0\n    local sum = 0\n    for i = 1, #nums do\n        sum\
    \ = sum + nums[i]\n        if sum < minSum then\n            minSum = sum\n  \
    \      end\n    end\n    return minSum\nend", "    local current_sum = 0\n   \
    \ local minimum_sum = math.huge\n    for _, v in ipairs(nums) do\n        current_sum\
    \ = current_sum + v\n        minimum_sum = math.min(minimum_sum, current_sum)\n\
    \        if current_sum > 0 then\n            current_sum = 0\n        end\n \
    \   end\n    return minimum_sum\nend", "  local minSum = nums[1]\n  local sum\
    \ = nums[1]\n  for i = 2, #nums do\n    sum = min(sum + nums[i], nums[i])\n  \
    \  minSum = min(minSum, sum)\n  end\n  return minSum\nend", "  local min_so_far\
    \ = math.huge\n  local current_min = 0\n  for _, n in ipairs(nums) do\n    current_min\
    \ = current_min + n\n    if current_min < min_so_far then\n      min_so_far =\
    \ current_min\n    end\n    if current_min > 0 then\n      current_min = 0\n \
    \   end\n  end\n  return min_so_far\nend", "    local minSoFar = math.huge\n \
    \   local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n    \
    \    minSoFar = math.min(minSoFar, sum)\n        if sum > 0 then\n           \
    \ sum = 0\n        end\n    end\n    return minSoFar\nend", "    local min_sum\
    \ = nums[1]\n    local sum = 0\n    for i = 1, #nums do\n        sum = sum + nums[i]\n\
    \        if sum < min_sum then\n            min_sum = sum\n        end\n     \
    \   if sum > 0 then\n            sum = 0\n        end\n    end\n    return min_sum\n\
    end", "  local min = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum\
    \ = sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n    if sum\
    \ > 0 then\n      sum = 0\n    end\n  end\n  return min\nend", "  local minSum\
    \ = nums[1]\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    if sum < minSum then\n      minSum = sum\n    end\n    if sum > 0 then\n\
    \      sum = 0\n    end\n  end\n  return minSum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
