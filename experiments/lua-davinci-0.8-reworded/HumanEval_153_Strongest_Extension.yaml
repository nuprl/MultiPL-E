name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a table of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ table.\n-- For example, if you are given \"Slices\" as the class and a table of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
  \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max = 0\n    local max_e = ''\n    for _, e in ipairs(extensions)\
    \ do\n        local cap = #e:gsub('[^A-Z]', '')\n        local sm = #e:gsub('[^a-z]',\
    \ '')\n        local strength = cap - sm\n        if strength > max then\n   \
    \         max = strength\n            max_e = e\n        end\n    end\n    return\
    \ class_name .. '.' .. max_e\nend", "\tlocal strongest_extension_index, strongest_extension_strength\
    \ = 1, -math.huge\n\tfor i, extension in ipairs(extensions) do\n\t\tlocal current_extension_strength\
    \ = 0\n\t\tfor j = 1, #extension do\n\t\t\tif extension:sub(j, j):match('%u')\
    \ then\n\t\t\t\tcurrent_extension_strength = current_extension_strength + 1\n\t\
    \t\telse\n\t\t\t\tcurrent_extension_strength = current_extension_strength - 1\n\
    \t\t\tend\n\t\tend\n\t\tif current_extension_strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_index, strongest_extension_strength = i, current_extension_strength\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. extensions[strongest_extension_index]\n\
    end", "    local strengths = {}\n    for i, ext in ipairs(extensions) do\n   \
    \     strengths[i] = upper(ext) - lower(ext)\n    end\n    local strongest = math.max(unpack(strengths))\n\
    \    local strongest_ext = extensions[1]\n    for i, ext in ipairs(extensions)\
    \ do\n        if strengths[i] == strongest then\n            strongest_ext = ext\n\
    \            break\n        end\n    end\n    return string.format('%s.%s', class_name,\
    \ strongest_ext)\nend", "\t-- your code here\n\tlocal best_strength = -math.huge\n\
    \tlocal best_extension = \"\"\n\tfor i, extension in ipairs(extensions) do\n\t\
    \tlocal CAP = 0\n\t\tlocal SM = 0\n\t\tfor letter in extension:gmatch('%u') do\n\
    \t\t\tCAP = CAP + 1\n\t\tend\n\t\tfor letter in extension:gmatch('%l') do\n\t\t\
    \tSM = SM + 1\n\t\tend\n\t\tlocal strength = CAP - SM\n\t\tif strength > best_strength\
    \ then\n\t\t\tbest_strength = strength\n\t\t\tbest_extension = extension\n\t\t\
    end\n\tend\n\treturn class_name .. \".\" .. best_extension\nend", "\tlocal strong_name,\
    \ strong_str = '', 0\n\tlocal extract_name = string.match\n\tfor _, name in ipairs(extensions)\
    \ do\n\t\tlocal cap, sm = 0, 0\n\t\tfor _, char in name:gmatch('%a') do\n\t\t\t\
    if char:match('%u') then cap = cap + 1 else sm = sm + 1 end\n\t\tend\n\t\tlocal\
    \ cur_str = cap - sm\n\t\tif cur_str > strong_str then strong_name, strong_str\
    \ = name, cur_str end\n\tend\n\treturn class_name .. '.' .. strong_name\nend",
  "  -- YOUR CODE HERE\n  error(\"Not Implemented\")\nend", "    local max_strength,\
    \ strongest_extension = 0, ''\n    for _, extension in ipairs(extensions) do\n\
    \        local strength = select(2, extension:gsub('%u', '')) - select(2, extension:gsub('%l',\
    \ ''))\n        if strength > max_strength then\n            max_strength, strongest_extension\
    \ = strength, extension\n        end\n    end\n    return class_name .. '.' ..\
    \ strongest_extension\nend", "    return ('')\nend", "    -- input:\n    --  \
    \ class_name - the name of the class\n    --   extensions - a table of the names\
    \ of the extensions\n    -- Output:\n    --   the strongest extension to be used\
    \ with the class_name\n    local ext = ''\n    local strength = 0\n    for i =\
    \ 1, #extensions do\n        local c = 0\n        local s = 0\n        for j =\
    \ 1, #extensions[i] do\n            if string.byte(extensions[i], j) >= 65 and\
    \ string.byte(extensions[i], j) <= 90 then\n                c = c + 1\n      \
    \      else\n                s = s + 1\n            end\n        end\n       \
    \ if c - s > strength then\n            strength = c - s\n            ext = extensions[i]\n\
    \        end\n    end\n    return class_name .. '.' .. ext\nend", "    local class_name_length\
    \ = #class_name\n    local best_extension_name, best_extension_strength = '',\
    \ 0\n    for i = 1, #extensions do\n        local extension_name = extensions[i]\n\
    \        local extension_length = #extension_name\n        local CAP = 0\n   \
    \     local SM = 0\n        for j = 1, extension_length do\n            local\
    \ current_letter = extension_name:sub(j, j)\n            if current_letter:match('%u')\
    \ then\n                CAP = CAP + 1\n            elseif current_letter:match('%l')\
    \ then\n                SM = SM + 1\n            end\n        end\n        local\
    \ strength = CAP - SM\n        if strength > best_extension_strength then\n  \
    \          best_extension_name = extension_name\n            best_extension_strength\
    \ = strength\n        end\n    end\n    return class_name .. '.' .. best_extension_name\n\
    end", "  local strong = extensions[1]\n  local strong_strength = calculate_strength(strong)\n\
    \  for i = 2, #extensions do\n    local strength = calculate_strength(extensions[i])\n\
    \    if strength > strong_strength then\n      strong = extensions[i]\n      strong_strength\
    \ = strength\n    end\n  end\n  return class_name .. '.' .. strong\nend", "  local\
    \ strongest_extension = ''\n  local strength = 0\n  for _, extension in ipairs(extensions)\
    \ do\n    local CAP, SM = extension:gsub('[A-Z]', ''), extension:gsub('[a-z]',\
    \ '')\n    local current_strength = (#CAP - #SM)\n    if current_strength > strength\
    \ then\n      strength = current_strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  \
    \  local strongest = nil\n    local strongest_strength = 0\n    for k, v in ipairs(extensions)\
    \ do\n        local cap = string.match(v, '%u')\n        local sm = string.match(v,\
    \ '%l')\n        local strength = cap - sm\n        if strength > strongest_strength\
    \ then\n            strongest = v\n            strongest_strength = strength\n\
    \        end\n    end\n    return class_name .. '.' .. strongest\nend", "    local\
    \ strongest_extension = nil\n    local strongest_strength = nil\n    for k,v in\
    \ pairs(extensions) do\n        local strength = 0\n        for i = 1, #v do\n\
    \            local char = v:sub(i,i)\n            if char == char:upper() then\n\
    \                strength = strength + 1\n            else\n                strength\
    \ = strength - 1\n            end\n        end\n        if not strongest_strength\
    \ or strongest_strength < strength then\n            strongest_strength = strength\n\
    \            strongest_extension = v\n        end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\nend", end, "\tlocal strongest_extension = extensions[1]\n\
    \tlocal strength = #strongest_extension:gsub('[^A-Z]', '') - #strongest_extension:gsub('[^a-z]',\
    \ '')\n\t\n\tfor i = 2, #extensions do\n\t\tlocal ext = extensions[i]\n\t\tlocal\
    \ ext_strength = #ext:gsub('[^A-Z]', '') - #ext:gsub('[^a-z]', '')\n\t\tif ext_strength\
    \ > strength then\n\t\t\tstrongest_extension = ext\n\t\t\tstrength = ext_strength\n\
    \t\tend\n\tend\n\t\n\treturn class_name .. '.' .. strongest_extension\nend", " \
    \   -- Keep track of the strongest extension\n    local strongest = nil\n    --\
    \ Keep track of the strength of the strongest extension\n    local strongest_strength\
    \ = -math.huge\n    -- Iterate over the extensions\n    for _, ext in ipairs(extensions)\
    \ do\n        -- Get the number of capital letters\n        local caps = 0\n \
    \       for c in ext:gmatch('%u') do\n            caps = caps + 1\n        end\n\
    \        -- Get the number of lowercase letters\n        local lowers = 0\n  \
    \      for c in ext:gmatch('%l') do\n            lowers = lowers + 1\n       \
    \ end\n        -- Calculate the strength\n        local strength = caps - lowers\n\
    \        -- Update the strongest extension if the current extension is stronger\n\
    \        if strength > strongest_strength then\n            strongest = ext\n\
    \            strongest_strength = strength\n        end\n    end\n    -- Return\
    \ the strongest extension\n    return ('%s.%s'):format(class_name, strongest)\n\
    end", "\tlocal strongest_extension_name = ''\n\tlocal strongest_extension_strength\
    \ = -math.huge\n\tlocal this_extension_strength\n\tfor extension_name in pairs(extensions)\
    \ do\n\t\tthis_extension_strength = Get_Extension_Strength(extension_name)\n\t\
    \tif (this_extension_strength > strongest_extension_strength) then\n\t\t\tstrongest_extension_name\
    \ = extension_name\n\t\t\tstrongest_extension_strength = this_extension_strength\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension_name\nend",
  "  local result = class_name\n  local max = 0\n  for _,ext in ipairs(extensions)\
    \ do\n    local s = 0\n    for i = 1, #ext do\n      local c = ext:sub(i,i)\n\
    \      if c:upper() == c then\n        s = s + 1\n      else\n        s = s -\
    \ 1\n      end\n    end\n    if s > max then\n      max = s\n      result = result\
    \ .. '.' .. ext\n    end\n  end\n  return result\nend", "    local strongest_extension\
    \ = 0\n    local strongest_name = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local upper_case_letters = 0\n        local lower_case_letters =\
    \ 0\n        for ch in extension:gmatch('.') do\n            if ch:upper() ==\
    \ ch then\n                upper_case_letters = upper_case_letters + 1\n     \
    \       else\n                lower_case_letters = lower_case_letters + 1\n  \
    \          end\n        end\n        local strength = upper_case_letters - lower_case_letters\n\
    \        if strength > strongest_extension then\n            strongest_extension\
    \ = strength\n            strongest_name = extension\n        end\n    end\n \
    \   return class_name .. '.' .. strongest_name\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
