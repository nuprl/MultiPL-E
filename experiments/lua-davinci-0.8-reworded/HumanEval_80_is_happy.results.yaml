language: lua
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- TODO: write your code here\n\tassert(type(s)\
    \ == \"string\")\n\tlocal n = #s\n\tif n < 3 then\n\t\treturn false\n\tend\n\t\
    for i = 1, n - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i)\
    \ == s:sub(i + 2, i + 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e_quf08.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2e_quf08.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- if string length is less than 3, return\
    \ false\n\tif string.len(s) < 3 then\n\t\treturn false\n\tend\n\t-- for i=1, length-2\n\
    \tfor i=1,string.len(s)-2 do\n\t\t-- check if s[i], s[i+1], s[i+2] are all distinct\n\
    \t\tif s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1)\
    \ == s:sub(i+2,i+2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local a=string.sub(s,1,1)\n   local b=string.sub(s,2,2)\n\
    \   local c=string.sub(s,3,3)\n   local len=string.len(s)\n   local happy=false\n\
    \   if len>=3 then\n      if a~=b and a~=c and b~=c then\n         happy=true\n\
    \      end\n   end\n   return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrvmz0ej.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnrvmz0ej.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ >= 3 then\n        local f = s:sub(1,1)\n        local m = s:sub(2,2)\n    \
    \    local l = s:sub(3,3)\n        if f ~= m and m ~= l and l ~= f then\n    \
    \        return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8skq_syk.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8skq_syk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if (s:len() < 3) then\n    return false\n\
    \  end\n  local i, j = 0, 0\n  while (i < s:len() - 2) do\n    local t = string.match(s,\
    \ \"(%w)%w%w\", i)\n    j = i + 1\n    while (j < s:len() - 2) do\n      if (t\
    \ == string.match(s, \"(%w)%w%w\", j)) then\n        return false\n      end\n\
    \      j = j + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_pwtsk2.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu_pwtsk2.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljbqb1jz.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpljbqb1jz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vlvi6s5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1vlvi6s5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local max_len = 3\n   if string.len(s)\
    \ < max_len then\n      return false\n   end\n   local last = nil\n   for i =\
    \ 1, max_len do\n      local c = string.sub(s, i, i)\n      if last == c then\n\
    \         return false\n      end\n      last = c\n   end\n   for i = max_len\
    \ + 1, string.len(s) do\n      local c = string.sub(s, i, i)\n      local start\
    \ = i - max_len + 1\n      local sub = string.sub(s, start, i - 1)\n      if c\
    \ == string.sub(sub, 1, 1) then\n         return false\n      end\n      if c\
    \ == string.sub(sub, 2, 2) then\n         return false\n      end\n      if c\
    \ == string.sub(sub, 3, 3) then\n         return false\n      end\n   end\n  \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local t = {}\n    for i = 1, #s - 2 do\n        if t[s:sub(i, i\
    \ + 2)] == nil then\n            t[s:sub(i, i + 2)] = true\n        else\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7qy8whs.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa7qy8whs.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    local i = 1\n\
    \    local l = #s\n    if l < 3 then\n        return false\n    end\n    while\
    \ i <= l - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i)\
    \ == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 3, #s do\n        if s:sub(i-2, i) == s:sub(i-1, i+1) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge7fnh7l.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpge7fnh7l.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe90ayf76.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe90ayf76.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return string.len(s) >= 3 and string.len(s)\
    \ % 3 == 0 and s:match(\"(.)%1%1\") == nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ikn92tr.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0ikn92tr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfol1s0ot.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfol1s0ot.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s) < 3 then\n        return\
    \ false\n    end\n    local l = string.len(s)\n    local c1 = string.sub(s, 1,\
    \ 1)\n    local c2 = string.sub(s, 2, 2)\n    local c3 = string.sub(s, 3, 3)\n\
    \    for i = 4, l do\n        if c1 == c2 and c2 == c3 then\n            return\
    \ false\n        end\n        c1 = c2\n        c2 = c3\n        c3 = string.sub(s,\
    \ i, i)\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1dxkkah.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1dxkkah.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpcfnpr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdxpcfnpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  assert(type(s) == \"string\")\n  if #s\
    \ < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n    local part =\
    \ s:sub(i, i + 2)\n    local distinct = {}\n    for c in part:gmatch(\".\") do\n\
    \      if distinct[c] then\n        return false\n      end\n      distinct[c]\
    \ = true\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- TODO: Implement is_happy here.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoardg9f3.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoardg9f3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- YOUR CODE HERE\n    if string.len(s)<3\
    \ then\n        return false\n    end\n    for i=1, string.len(s)-2 do\n     \
    \   if s:sub(i,i)==s:sub(i+1,i+1) or s:sub(i,i)==s:sub(i+2,i+2) or s:sub(i+1,i+1)==s:sub(i+2,i+2)\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpcfnpr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdxpcfnpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  for i = 1, #s-2 do\n\
    \    if s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1)\
    \ == s:sub(i+2,i+2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1pegg6qc.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1pegg6qc.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s) < 3 then\n        return\
    \ false\n    end\n    for i = 1, string.len(s) - 2 do\n        if string.sub(s,\
    \ i, i) == string.sub(s, i + 1, i + 1) or\n           string.sub(s, i, i) == string.sub(s,\
    \ i + 2, i + 2) or\n           string.sub(s, i + 1, i + 1) == string.sub(s, i\
    \ + 2, i + 2) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return not s:match('(.)%1%1') and s:match('^.%a.%a.$')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv5_1j1_.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwv5_1j1_.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   if #s < 3 then\n      return false\n\
    \   end\n   local first = string.sub(s, 1, 1)\n   local second = string.sub(s,\
    \ 2, 2)\n   local third = string.sub(s, 3, 3)\n   for i = 3, #s do\n      if string.sub(s,\
    \ i, i) == first or string.sub(s, i, i) == second or string.sub(s, i, i) == third\
    \ then\n         return false\n      end\n      first = second\n      second =\
    \ third\n      third = string.sub(s, i, i)\n   end\n   return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe3xtjx6a.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe3xtjx6a.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8z9wq2_x.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8z9wq2_x.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    --s = string.lower(s)\n    local last_letter\
    \ = ' '\n    local last_two_letters = '  '\n    local s = string.lower(s)\n  \
    \  for i = 1, string.len(s) do\n        local c = string.sub(s, i, i)\n      \
    \  if (last_letter == c or last_two_letters == c..last_letter) then\n        \
    \    return false\n        end\n        last_two_letters = last_letter..c\n  \
    \      last_letter = c\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_um9blc.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv_um9blc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3kjntci.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx3kjntci.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_07qrnz9.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_07qrnz9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif string.len(s) < 3 then\n\t\treturn\
    \ false\n\tend\n\tfor i = 1, string.len(s) - 2 do\n\t\tlocal sub_s = string.sub(s,\
    \ i, i + 2)\n\t\tif string.len(sub_s) < 3 then\n\t\t\treturn false\n\t\tend\n\t\
    \tlocal c1 = string.sub(sub_s, 1, 1)\n\t\tlocal c2 = string.sub(sub_s, 2, 2)\n\
    \t\tlocal c3 = string.sub(sub_s, 3, 3)\n\t\tif c1 == c2 or c1 == c3 or c2 == c3\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local ret = true\n  local length = string.len(s)\n\
    \  if length < 3 then\n    ret = false\n  else\n    for i = 1, length - 2 do\n\
    \      if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n\
    \        ret = false\n        break\n      end\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jbmicar.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9jbmicar.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tlocal t = {}\n\tlocal size = #s\n\tlocal\
    \ v = 0\n\t\n\tif size <= 2 then return false end\n\t\n\tfor i = 1, size - 2 do\n\
    \t\tfor j = i + 1, size - 1 do\n\t\t\tif s[i] == s[j] then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\t\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxof0w57m.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxof0w57m.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s) < 3 then\n        return\
    \ false\n    end\n    for i = 1, string.len(s) - 2 do\n        if string.sub(s,\
    \ i, i + 2) == string.sub(s, i + 1, i + 3) then\n            return false\n  \
    \      end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gh2t6fu.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7gh2t6fu.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  for i = 1, #s - 3 do\n    if s:sub(i,\
    \ i + 2) == s:sub(i + 1, i + 3) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ix2zso0.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ix2zso0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local n = #s - 2\n  for i = 1, n do\n    if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8z9wq2_x.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8z9wq2_x.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s)<3 then\n        return\
    \ false\n    end\n    for i=1,string.len(s)-2 do\n        if string.sub(s,i,i+2)==string.sub(s,i+1,i+3)\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhkdg05h.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvhkdg05h.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local s_length = string.len(s)\n   \
    \ if s_length < 3 then\n        return false\n    end\n    for i = 1, s_length\
    \ - 2 do\n        if string.sub(s, i, i) == string.sub(s, i + 1, i + 1) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wyxp3yy.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9wyxp3yy.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa3ayjt6w.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpa3ayjt6w.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3nk9stv.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn3nk9stv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  return (s:gsub('(%a)(%1%1+)', '')) == s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm8gd7i1r.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm8gd7i1r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif s:len() < 3 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, s:len() - 2 do\n\t\tlocal triplet = s:sub(i, i + 2)\n\t\t\
    if triplet:match(\"(.)%1%1\") ~= nil then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh1jm0ge.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphh1jm0ge.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    for index = 1,#s-2 do\n        if s:sub(index,index+2)\
    \ == s:sub(index+1,index+3) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7_73tbj.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo7_73tbj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljbqb1jz.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpljbqb1jz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    for i = 1, s:len() - 2 do\n        if s:sub(i, i + 2):match(\"\
    (.)%1\") then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy678igdq.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy678igdq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local count = 0\n    local a = 0\n \
    \   local b = 0\n    local c = 0\n    local d = 0\n    local e = 0\n    local\
    \ f = 0\n    local g = 0\n    local h = 0\n    local i = 0\n    local j = 0\n\
    \    local k = 0\n    local l = 0\n    local m = 0\n    local n = 0\n    local\
    \ o = 0\n    local p = 0\n    local q = 0\n    local r = 0\n    local s = 0\n\
    \    local t = 0\n    local u = 0\n    local v = 0\n    local w = 0\n    local\
    \ x = 0\n    local y = 0\n    local z = 0\n    if (#s < 3) then\n        return\
    \ false\n    end\n    for i=1,#s do\n        local c = s:sub(i,i)\n        if\
    \ c == \"a\" then\n            a = a + 1\n        elseif c == \"b\" then\n   \
    \         b = b + 1\n        elseif c == \"c\" then\n            c = c + 1\n \
    \       elseif c == \"d\" then\n            d = d + 1\n        elseif c == \"\
    e\" then\n            e = e + 1\n        elseif c == \"f\" then\n            f\
    \ = f + 1\n        elseif c == \"g\" then\n            g = g + 1\n        elseif\
    \ c == \"h\" then\n            h = h + 1\n        elseif c == \"i\" then\n   \
    \         i = i + 1\n        elseif c == \"j\" then\n            j = j + 1\n \
    \       elseif c == \"k\" then\n            k = k + 1\n        elseif c == \"\
    l\" then\n            l = l + 1\n        elseif c == \"m\" then\n            m\
    \ = m + 1\n        elseif c == \"n\" then\n            n = n + 1\n        elseif\
    \ c == \"o\" then\n            o = o + 1\n        elseif c == \"p\" then\n   \
    \         p = p + 1\n        elseif c == \"q\" then\n            q = q + 1\n \
    \       elseif c == \"r\" then\n            r = r + 1\n        elseif c ==\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgpvkr5ur.lua:87: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- your code here\n\tlocal len = string.len(s)\n\
    \tif len < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, len - 2 do\n\t\tif s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxi4k374.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqxi4k374.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuquhx29.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmuquhx29.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if string.len(s)\
    \ < 3 then\n        return false\n    end\n    local x = string.sub(s, 1, 3)\n\
    \    local n = 0\n    for i = 1, string.len(x) do\n        for j = 1, string.len(x)\
    \ do\n            if string.sub(x, i, i) == string.sub(x, j, j) then\n       \
    \         n = n + 1\n            end\n        end\n    end\n    if n == 6 then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dql20_u.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5dql20_u.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdb2kw0z.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsdb2kw0z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- TODO: implement is_happy function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ztmqk3t.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp0ztmqk3t.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local is_happy = false\n  -- check string\
    \ length\n  if string.len(s) >= 3 then\n    -- string is at least 3 characters\
    \ long\n    is_happy = true\n    -- get the first 3 characters\n    local s_part\
    \ = string.sub(s,1,3)\n    local last_char = ''\n    -- iterate over the rest\
    \ of the string\n    for i = 4, string.len(s) do\n      -- get the current character\n\
    \      local char = string.sub(s,i,i)\n      -- check the current character against\
    \ the previous character\n      if last_char == char then\n        -- found a\
    \ duplicate character; not a happy string\n        is_happy = false\n        break\n\
    \      end\n      -- get the next 3 characters\n      s_part = string.sub(s,i,i+2)\n\
    \      -- update the last character\n      last_char = char\n    end\n  end\n\
    \  return is_happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnt_28otp.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnt_28otp.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdabv9vc7.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdabv9vc7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    if #s < 3 then\n\
    \        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i + 2):find(s:sub(i, i), 2) then\n            return false\n        end\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu6e51d2.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfu6e51d2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  for i = 1, #s - 2 do\n    if s:sub(i,\
    \ i + 2) == s:sub(i + 1, i + 3) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenptr88r.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpenptr88r.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if s == nil or type(s) ~= \"string\" then\n\
    \    return false\n  end\n  if #s < 3 then\n    return false\n  end\n  for i =\
    \ 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i\
    \ + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- Your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzzk_ozyi.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpzzk_ozyi.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpcfnpr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdxpcfnpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif #s < 3 then\n\t\treturn false\n\tend\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2):match('(.).%1') then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0dkqkb2.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo0dkqkb2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 3, #s do\n        if s:sub(i - 2, i) == s:sub(i - 1, i +\
    \ 1) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm5662ud.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppm5662ud.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Put your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ytd_ik0.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3ytd_ik0.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   if #s < 3 then\n      return false\n\
    \   end\n   local size = #s\n   for i = 1, size-2 do\n      if s:sub(i, i) ==\
    \ s:sub(i+1, i+1) or s:sub(i, i) == s:sub(i+2, i+2) or s:sub(i+1, i+1) == s:sub(i+2,\
    \ i+2) then\n         return false\n      end\n   end\n   return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnnosuzs.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwnnosuzs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- you code here\n    local temp = s:len()\n\
    \    local first = s:sub(1,1)\n    local second = s:sub(2,2)\n    local third\
    \ = s:sub(3,3)\n    local res = true\n    if temp<3 then return false end\n  \
    \  for i=4,temp do\n        if third==s:sub(i,i) then\n            res = false\n\
    \            break\n        end\n        first = second\n        second = third\n\
    \        third = s:sub(i,i)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rcsf922.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9rcsf922.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqxjsdom.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcqxjsdom.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local valid = s:len() >= 3\n    local\
    \ letters = {}\n    for i = 1, s:len() do\n        if letters[s:sub(i, i)] ==\
    \ nil then\n            letters[s:sub(i, i)] = true\n        else\n          \
    \  valid = false\n            break\n        end\n    end\n    return valid\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mf66z95.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8mf66z95.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyimskeo.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmphyimskeo.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        local first = s:sub(i, i)\n      \
    \  local second = s:sub(i + 1, i + 1)\n        local third = s:sub(i + 2, i +\
    \ 2)\n        if first == second or first == third or second == third then\n \
    \           return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  assert(type(s) == \"string\")\n  return\
    \ is_happy_impl(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjcu_jxm.lua:19:\
    \ attempt to call a nil value (global 'is_happy_impl')\nstack traceback:\n\t/tmp/tmppjcu_jxm.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmppjcu_jxm.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local ret = false\n  if string.len(s)\
    \ >= 3 then\n    local c = string.sub(s, 1, 1)\n    local d = string.sub(s, 2,\
    \ 2)\n    local e = string.sub(s, 3, 3)\n    ret = c ~= d and c ~= e and d ~=\
    \ e\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp952w84.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmp952w84.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    for i = 3, s:len() do\n        if s:sub(i - 2, i) == s:sub(i\
    \ - 1, i + 1) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cz_1gr2.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5cz_1gr2.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local j = string.find(s, \"(%w)%1%1\"\
    )\n  return not j and j ~= 1 and string.len(s) >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq772yqm.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdq772yqm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local s_len = s:len()\n   if s_len <\
    \ 3 then\n      return false\n   end\n   local s_3rd = s:sub(3,3)\n   local s_2nd\
    \ = s:sub(2,2)\n   local s_1st = s:sub(1,1)\n   if s_3rd == s_2nd or s_3rd ==\
    \ s_1st or s_2nd == s_1st then\n      return false\n   end\n   return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnxdj3qq.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprnxdj3qq.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local len = #s\n   if len < 3 then\n\
    \      return false\n   end\n   local c1 = s:sub(1, 1)\n   local c2 = s:sub(2,\
    \ 2)\n   local c3 = s:sub(3, 3)\n   for i = 4, len do\n      if c1 == c2 and c2\
    \ == c3 then\n         return false\n      end\n      c1 = c2\n      c2 = c3\n\
    \      c3 = s:sub(i, i)\n   end\n   return c1 ~= c2 and c2 ~= c3 and c1 ~= c3\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local a, b, c = string.sub(s, 1, 1), string.sub(s, 2, 2), string.sub(s, 3,\
    \ 3)\n  for i = 4, #s do\n    if a == b or b == c or a == c then\n      return\
    \ false\n    end\n    a, b, c = b, c, string.sub(s, i, i)\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiusqtzpk.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiusqtzpk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s >= 3 then\n    if s:sub(1,3) ==\
    \ s:sub(2,4) or s:sub(1,3) == s:sub(3,5) then\n      return false\n    else\n\
    \      return is_happy(s:sub(2))\n    end\n  else\n    return true\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75bqbkw5.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp75bqbkw5.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplzzo_l5.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpplzzo_l5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    for i = 1, s:len() - 2 do\n        if s:sub(i, i + 2):len()\
    \ == s:sub(i, i + 2):unique():len() then\n            return true\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_jv78v6.lua:22:\
    \ attempt to call a nil value (method 'unique')\nstack traceback:\n\t/tmp/tmpn_jv78v6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpn_jv78v6.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local result = {}\n  local s_len = string.len(s)\n\
    \  local count = 0\n  for i = 1, s_len - 2 do\n    if result[string.sub(s, i,\
    \ i + 2)] == nil then\n      result[string.sub(s, i, i + 2)] = 1\n      count\
    \ = count + 1\n    end\n  end\n  return count >= 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7p8547n.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn7p8547n.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- TODO: implement is_happy\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjg6wd5wy.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpjg6wd5wy.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local length = string.len(s)\n    local\
    \ isHappy = true\n    if length < 3 then\n        isHappy = false\n    else\n\
    \        for i = 1, length - 2 do\n            local first = string.sub(s, i,\
    \ i)\n            local second = string.sub(s, i + 1, i + 1)\n            local\
    \ third = string.sub(s, i + 2, i + 2)\n            if first == second or first\
    \ == third or second == third then\n                isHappy = false\n        \
    \        break\n            end\n        end\n    end\n    return isHappy\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local seen = {}\n    local len = string.len(s)\n\
    \    if len < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n\
    \        local sub = string.sub(s, i, i + 2)\n        if seen[sub] then\n    \
    \        return false\n        end\n        seen[sub] = true\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_0gmw64.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp_0gmw64.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return s:len() >= 3 and s:sub(1, 3):match('^(%w)(%w)%1%2$')\
    \ == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfcnk9ac.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvfcnk9ac.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- check if string length is at least\
    \ 3\n    -- check if every 3 consecutive letters are distinct\n    -- return true\
    \ or false\n    if #s < 3 then\n        return false\n    end\n    for i = 1,\
    \ #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i\
    \ + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n           \
    \ return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = #s\n    if n < 3 then\n  \
    \      return false\n    end\n    local t = {}\n    for i = 1, n - 2 do\n    \
    \    local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i + 2)\n \
    \       if a == b or b == c or a == c then\n            return false\n       \
    \ end\n        t[a .. b .. c] = true\n    end\n    return not next(t)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6z64bn71.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6z64bn71.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    local n = s:len()\n    for i = 1,n-2 do\n        if s:sub(i,i)\
    \ == s:sub(i+1,i+1) then\n            return false\n        end\n    end\n   \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j3rfc7u.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1j3rfc7u.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3nk9stv.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn3nk9stv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return \"\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwmn0aex.lua:24:\
    \ expected: false, actual: \"\"\nstack traceback:\n\t/tmp/tmpvwmn0aex.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqxjsdom.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcqxjsdom.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- find out length of s\n  -- for each\
    \ 3 consecutive letters\n  -- check if they are all distinct ( no repetition )\n\
    \  -- if not, return false\n  -- if yes, then return true\n  -- if length is less\
    \ than 3, return false\n  -- if not, then return true\n  local len = string.len(s)\n\
    \  if len < 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pun3jya.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp2pun3jya.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tassert(type(s) == \"string\")\n\tlocal\
    \ prev = ''\n\tlocal prevprev = ''\n\tfor i = 1, s:len() do\n\t\tlocal c = s:sub(i,\
    \ i)\n\t\tif prev == c or prevprev == c then\n\t\t\treturn false\n\t\tend\n\t\t\
    prevprev = prev\n\t\tprev = c\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mh1gwp5.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3mh1gwp5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqxjsdom.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcqxjsdom.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- local is_happy = true\n  -- if s:len()\
    \ >= 3 then\n  --   for i = 1, s:len()-2 do\n  --     if s:sub(i, i+2):match(\"\
    %a%a%a\") then\n  --       is_happy = false\n  --     end\n  --   end\n  -- else\n\
    \  --   is_happy = false\n  -- end\n  -- return is_happy\n  return s:len() >=\
    \ 3 and not s:match(\"%a%a%a\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fcbv4k2.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0fcbv4k2.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s) >= 3 then\n       \
    \ for i = 1, string.len(s) - 2 do\n            if s:sub(i, i + 2):match(\"(.)%1%1\"\
    ) then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1wghcz5.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1wghcz5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdb2kw0z.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsdb2kw0z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local f = s:sub(1, 3)\n  local i = 2\n  while i <= #s - 2 do\n    if s:sub(i,\
    \ i + 2) == f then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_yt_yss.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps_yt_yss.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_gf417q.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpl_gf417q.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaghenb1p.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaghenb1p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if (type(s) ~= \"string\") then return\
    \ nil end\n    if (string.len(s) < 3) then return false end\n    local last_char\
    \ = s:sub(1, 1)\n    local current_char = s:sub(2, 2)\n    local next_char = s:sub(3,\
    \ 3)\n    if (next_char == last_char or next_char == current_char) then return\
    \ false end\n    if (string.len(s) > 3) then\n        return is_happy(s:sub(2))\n\
    \    else\n        return true\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sw7a5yc.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6sw7a5yc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local length = string.len(s)\n  if length\
    \ < 3 then\n    return false\n  end\n  local result = true\n  for i = 1, length\
    \ - 2 do\n    if string.sub(s, i, i) == string.sub(s, i + 1, i + 1) or string.sub(s,\
    \ i, i) == string.sub(s, i + 2, i + 2) or string.sub(s, i + 1, i + 1) == string.sub(s,\
    \ i + 2, i + 2) then\n      result = false\n      break\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Write your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_07qrnz9.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_07qrnz9.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sw7a5yc.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6sw7a5yc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_83zfya.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmph_83zfya.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local t = {}\n  local l = s:len()\n  if\
    \ l < 3 then\n    return false\n  end\n  local i = 1\n  while i < l do\n    local\
    \ c1 = s:sub(i, i)\n    local c2 = s:sub(i + 1, i + 1)\n    local c3 = s:sub(i\
    \ + 2, i + 2)\n    if c1 == c2 or c1 == c3 or c2 == c3 then\n      return false\n\
    \    end\n    i = i + 3\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetyy2a6b.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetyy2a6b.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if type(s) ~= \"string\" then return\
    \ false end\n    if string.len(s) < 3 then return false end\n    for i = 1, string.len(s)\
    \ - 2 do\n        if string.sub(s, i, i) == string.sub(s, i + 1, i + 1) or string.sub(s,\
    \ i, i) == string.sub(s, i + 2, i + 2) or string.sub(s, i + 1, i + 1) == string.sub(s,\
    \ i + 2, i + 2) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tlocal res\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vc6gewr.lua:25:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp6vc6gewr.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tlocal slen = s:len()\n\tif slen < 3 then\n\
    \t\treturn false\n\tend\n\tlocal t = {}\n\tlocal res = true\n\tfor i = 1,slen-2\
    \ do\n\t\tif not t[s:sub(i,i+2)] then\n\t\t\tt[s:sub(i,i+2)] = true\n\t\telse\n\
    \t\t\tres = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl_epipi.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnl_epipi.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if string.len(s) < 3 then\n    return\
    \ false\n  end\n  for i = 3, string.len(s) do\n    if string.sub(s, i - 2, i -\
    \ 2) == string.sub(s, i - 1, i - 1) or\n       string.sub(s, i - 2, i - 2) ==\
    \ string.sub(s, i, i) or\n       string.sub(s, i - 1, i - 1) == string.sub(s,\
    \ i, i) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif s:len() < 3 then\n\t\treturn false\n\
    \tend\n\tfor i = 1, s:len() - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1)\
    \ or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2,\
    \ i + 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if s:len() >= 3 then\n    for i = 1,s:len()-2\
    \ do\n      if s:sub(i,i) == s:sub(i+1,i+1) and s:sub(i,i) == s:sub(i+2,i+2) then\n\
    \        return false\n      end\n    end\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperg3btj7.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmperg3btj7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local arr = utils.split(s, \"\")\n  local\
    \ len = #arr\n  if len < 3 then\n    return false\n  end\n  for i = 1, len - 2\
    \ do\n    local letter = arr[i]\n    if arr[i+1] == letter or arr[i+2] == letter\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuiaumepa.lua:18:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpuiaumepa.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpuiaumepa.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   if #s < 3 then\n      return false\n\
    \   end\n   for i = 3, #s do\n      if s:sub(i - 2, i) == s:sub(i - 1, i + 1)\
    \ then\n         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzkpoo1v.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphzkpoo1v.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- YOUR CODE HERE\n  local s_len = string.len(s)\n\
    \  if s_len < 3 then\n    return false\n  end\n  if s_len % 3 ~= 0 then\n    return\
    \ false\n  end\n  local i = 1\n  while i < s_len do\n    if s:sub(i, i+2) == s:sub(i+3,\
    \ i+5) then\n      return false\n    end\n    i = i + 3\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv73wou6t.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv73wou6t.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    for i = 1, s:len() - 2 do\n        if s:sub(i, i + 2):find(s:sub(i,\
    \ i)) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps44vw92y.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps44vw92y.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- your code goes here\n\tif #s < 3 then\n\
    \t\treturn false\n\tend\n\tlocal exist = {}\n\tfor i = 1, #s - 2 do\n\t\tlocal\
    \ sub = s:sub(i, i + 2)\n\t\tif exist[sub] then\n\t\t\treturn false\n\t\tend\n\
    \t\texist[sub] = true\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_xzvb1t.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0_xzvb1t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    for i = 1, #s - 3 do\n        if s:sub(i,\
    \ i+2) == s:sub(i+1, i+3) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfmqgsoy.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkfmqgsoy.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t--check if string is of length 3 or more\n\
    \tif #s < 3 then\n\t\treturn false\n\tend\n\t--iterate through the string\n\t\
    for i = 1, #s-2 do\n\t\t--check if the 3 consecutive letters are distinct\n\t\t\
    if s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1)\
    \ == s:sub(i+2,i+2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- check length\n    local length =\
    \ #s\n    if length < 3 then\n        return false\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyv8wddjo.lua:37: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s == nil or #s < 3 then\n       \
    \ return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):find(s:sub(i,\
    \ i)) ~= nil then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpng69q532.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpng69q532.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pun3jya.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp2pun3jya.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif string.len(s) < 3 then\n\t\treturn\
    \ false\n\tend\n\tfor i = 1, string.len(s) - 2 do\n\t\tif string.byte(s, i) ==\
    \ string.byte(s, i + 1) or string.byte(s, i) == string.byte(s, i + 2) or string.byte(s,\
    \ i + 1) == string.byte(s, i + 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnnosuzs.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwnnosuzs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.).%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcgziuwc.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxcgziuwc.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local length = string.len(s)\n    if\
    \ length < 3 then\n        return false\n    end\n    local x = string.sub(s,\
    \ 1, 1)\n    local y = string.sub(s, 2, 2)\n    local z = string.sub(s, 3, 3)\n\
    \    if x == y or y == z or x == z then\n        return false\n    end\n    for\
    \ i = 4, length, 1 do\n        x = y\n        y = z\n        z = string.sub(s,\
    \ i, i)\n        if x == y or y == z or x == z then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbed3th5p.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbed3th5p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif #s < 3 then\n\t\treturn false\n\tend\n\
    \tfor i = 1, #s-2 do\n\t\tif s:sub(i, i+2):find(s:sub(i, i), 2) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69s8dx7w.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp69s8dx7w.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tassert(s, \"Expected a string\")\n\tif\
    \ #s < 3 then\n\t\treturn false\n\tend\n\tlocal prev = s:sub(1, 1)\n\tlocal current\
    \ = s:sub(2, 2)\n\tfor i = 3, #s do\n\t\tlocal next = s:sub(i, i)\n\t\tif prev\
    \ == current or current == next or prev == next then\n\t\t\treturn false\n\t\t\
    end\n\t\tprev = current\n\t\tcurrent = next\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   -- TODO: YOUR CODE HERE\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldijg6r6.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpldijg6r6.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0dh6q61.lua:25:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmph0dh6q61.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local first = s:sub(1, 1)\n    local second = s:sub(2, 2)\n    local\
    \ third = s:sub(3, 3)\n    if first == second or second == third or first == third\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvd98h8h.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcvd98h8h.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  for i = 1, #s-2 do\n    local s1 = s:sub(i,\
    \ i)\n    local s2 = s:sub(i+1, i+1)\n    local s3 = s:sub(i+2, i+2)\n    if s1\
    \ == s2 or s1 == s3 or s2 == s3 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisp80o93.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpisp80o93.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpcfnpr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdxpcfnpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- If the string is less than 3 characters\
    \ then it is invalid.\n\tif #s < 3 then\n\t\treturn false\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3mwp1i9s.lua:36: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local x = string.sub(s, 1, 3)\n    for i = 2, #s - 2 do\n      \
    \  local y = string.sub(s, i, i + 2)\n        if x == y then\n            return\
    \ false\n        end\n        x = y\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6k4ftbu7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6k4ftbu7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\ts = string.lower(s)\n\tlocal len = #s\n\
    \tlocal char = {}\n\tlocal is_happy = true\n\tfor i = 1, len do\n\t\tchar[i] =\
    \ string.sub(s, i, i)\n\tend\n\tfor i = 1, len-2 do\n\t\tif (char[i] == char[i+1])\
    \ then\n\t\t\tis_happy = false\n\t\t\tbreak\n\t\tend\n\t\tif (char[i] == char[i+2])\
    \ then\n\t\t\tis_happy = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn is_happy\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w7fyxr4.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3w7fyxr4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = string.len(s)\n  if len <\
    \ 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i\
    \ + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01tsrp1p.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp01tsrp1p.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tlocal str = string.gsub(s, \" \", \"\"\
    )\n\tlocal length = string.len(str)\n\tif length < 3 then\n\t\treturn false\n\t\
    end\n\tlocal first = string.sub(str, 1, 1)\n\tlocal second = string.sub(str, 2,\
    \ 2)\n\tlocal third = string.sub(str, 3, 3)\n\tif first == second or second ==\
    \ third or first == third then\n\t\treturn false\n\tend\n\treturn true\nend\n\
    print(is_happy(\"a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"\
    aabb\"))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\nfalse\ntrue\nfalse\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmp5whv23zm.lua:48: expected: false, actual: true\nstack\
    \ traceback:\n\t/tmp/tmp5whv23zm.lua:48: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsdb2kw0z.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpsdb2kw0z.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuquhx29.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmuquhx29.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):find(s:sub(i, i), 2) then\n  \
    \    return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wt3_z5n.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4wt3_z5n.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local result = true\n   local n = #s\n\
    \   if n >= 3 then\n      for i = 1, n - 2 do\n         if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            result = false\n            break\n  \
    \       end\n      end\n   else\n      result = false\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  local n = string.len(s)\n\
    \  if n < 3 then return false end\n  for i = 1, n - 2 do\n    if s[i] == s[i +\
    \ 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9l9fj_f.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpf9l9fj_f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local ok, res = pcall(string.match, s,\
    \ '^(.)(.)(.)$')\n  return ok and res ~= s and res ~= string.reverse(res)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprfa1nwne.lua:19:\
    \ bad argument #1 to 'reverse' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmprfa1nwne.lua:19: in local 'candidate'\n\t/tmp/tmprfa1nwne.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmuquhx29.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmuquhx29.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  local subs = {}\n  for i = 1, #s - 2 do\n    local sub = s:sub(i, i + 2)\n\
    \    if subs[sub] then\n      return false\n    end\n    subs[sub] = true\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjah1pzj.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnjah1pzj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- write your code here\n    return\
    \ not (s:len() < 3 or s:sub(1, 1) == s:sub(2, 2) or s:sub(2, 2) == s:sub(3, 3)\
    \ or s:sub(1, 1) == s:sub(3, 3))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_n6y7et0.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_n6y7et0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code goes here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnnosuzs.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpwnnosuzs.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    return (#s >= 3 and not (s:match(\"\
    (.)%1%1\") or s:match(\"(.)%1(.)%2\"))) and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuwkur22.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppuwkur22.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpcfnpr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdxpcfnpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    --\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw9gp7say.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpw9gp7say.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = #s\n  if len < 3 then\n  \
    \  return false\n  end\n  local i = 1\n  while i < len do\n    if s:sub(i, i+2):byte(1)\
    \ == s:sub(i, i+2):byte(2) or\n      s:sub(i, i+2):byte(1) == s:sub(i, i+2):byte(3)\
    \ or\n      s:sub(i, i+2):byte(2) == s:sub(i, i+2):byte(3) then\n      return\
    \ false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 0, #s - 3 do\n        local tmp = s:sub(i + 1, i + 3)\n\
    \        if tmp:sub(1, 1) == tmp:sub(2, 2) or tmp:sub(1, 1) == tmp:sub(3, 3) or\
    \ tmp:sub(2, 2) == tmp:sub(3, 3) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- check length\n    if (s:len() < 3)\
    \ then\n        return false\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbs4w9hkk.lua:36: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local len = #s\n   if len < 3 then\n\
    \      return false\n   end\n   local last = \"\"\n   for i = 1, len do\n    \
    \  local cur = s:sub(i, i)\n      if cur == last then\n         return false\n\
    \      end\n      last = cur\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_dcbkcx.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0_dcbkcx.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  \n  -- a string is haplua if its length\
    \ is at least 3 and every 3 consecutive letters are distinct\n  -- \"abcd\" is\
    \ haplua since a and b are distinct, b and c are distinct, c and d are distinct.\n\
    \  if string.len(s) < 3 then\n    return false -- not enough letters\n  end\n\
    \  \n  -- check the first 3 letters\n  if s:sub(1,3) == s:sub(2,3) then\n    return\
    \ false -- 2 of the letters were the same\n  end\n  \n  -- check the rest of the\
    \ letters\n  local prev = s:sub(1,3)\n  for i = 4,string.len(s) do\n    local\
    \ curr = s:sub(i-2,i)\n    if curr == prev then\n      return false -- 2 of the\
    \ letters were the same\n    end\n    prev = curr\n  end\n  \n  return true --\
    \ all of the letters were different\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfynxltwb.lua:49:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfynxltwb.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local n = s:len()\n    if n < 3 then\n\
    \        return false\n    end\n    local m = math.floor(n / 3)\n    local t =\
    \ {}\n    for i = 1, n do\n        local c = s:sub(i, i)\n        if t[c] then\n\
    \            return false\n        end\n        t[c] = true\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg89gp9nq.lua:43:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg89gp9nq.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local function is_happy_aux(s, i)\n \
    \     if i < 3 then\n         return true\n      else\n         local c = s:sub(i,\
    \ i)\n         local p = s:sub(i - 1, i - 1)\n         local pp = s:sub(i - 2,\
    \ i - 2)\n         if c == p and p == pp then\n            return false\n    \
    \     else\n            return is_happy_aux(s, i - 1)\n         end\n      end\n\
    \   end\n   return is_happy_aux(s, #s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s7rvxgs.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8s7rvxgs.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local utils = require \"utils\"\n  \
    \  local is_happy = true\n    if s:len() >= 3 then\n        local l = s:len()\n\
    \        for i = 1, l - 2 do\n            if s:sub(i, i) == s:sub(i + 1, i + 1)\
    \ or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2,\
    \ i + 2) then\n                is_happy = false\n                break\n     \
    \       end\n        end\n    else\n        is_happy = false\n    end\n    return\
    \ is_happy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5iemo_jl.lua:18:\
    \ module 'utils' not found:\n\tno field package.preload['utils']\n\tno file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/utils.lua'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/utils/init.lua'\n\t\
    no file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/utils.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/utils/init.lua'\n\
    \tno file './utils.lua'\n\tno file './utils/init.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/utils.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './utils.so'\nstack traceback:\n\t/tmp/tmp5iemo_jl.lua:18: in local 'candidate'\n\
    \t/tmp/tmp5iemo_jl.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- your code here\n  if #s<3 then return\
    \ false end\n  local s0=s:sub(1,1)\n  local s1=s:sub(2,2)\n  local s2=s:sub(3,3)\n\
    \  if s0==s1 or s1==s2 or s0==s2 then return false end\n  for i=4,#s do\n    s0=s1\n\
    \    s1=s2\n    s2=s:sub(i,i)\n    if s0==s1 or s1==s2 or s0==s2 then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if not s then\n        return false\n\
    \    end\n    if #s < 3 then\n        return false\n    end\n    local c_map =\
    \ {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n        if c_map[c]\
    \ then\n            return false\n        end\n        c_map[c] = true\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qxcfuz_.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6qxcfuz_.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tlocal t = { [s:sub(1,1)] = 1, [s:sub(2,2)]\
    \ = 1, [s:sub(3,3)] = 1 }\n\tlocal i = 3\n\twhile i <= #s do\n\t\tif t[s:sub(i,i)]\
    \ then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\t\tt[s:sub(i-2,i-2)] = nil\n\
    \t\tt[s:sub(i,i)] = 1\n\tend\n\treturn true\nend\nassert(not is_happy(\"a\"))\n\
    assert(not is_happy(\"aa\"))\nassert(is_happy(\"abcd\"))\nassert(not is_happy(\"\
    aabb\"))\nassert(is_happy(\"adb\"))\nassert(not is_happy(\"xyy\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmppy2_cuac.lua:30: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmppy2_cuac.lua:30: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Write your code here\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl3ukjgb9.lua:33: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local i = 1\n    while i < #s - 1 do\n\
    \        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppumw8t1k.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppumw8t1k.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\tif #s < 3 then\n\t\treturn false\n\tend\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2):find(s:sub(i, i), 1, true) then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjja63_3s.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjja63_3s.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local len = #s\n  if len < 3 then\n  \
    \  return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i, i + 2):find(s:sub(i,\
    \ i), 1, true) then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e084_dt.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5e084_dt.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  for i = 1, #s - 2 do\n    if s:sub(i,\
    \ i + 2):match('^(.)%1%1$') then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hm081r8.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6hm081r8.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match('(.)%1%1') then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_y4fti7t.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_y4fti7t.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if string.len(s) < 3 then\n    return\
    \ false\n  end\n  for i = 1, string.len(s) - 2 do\n    if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- YOUR CODE HERE\n  if #s < 3 then\n\
    \    return false\n  end\n  for i = 0, #s - 3 do\n    if s:sub(i + 1, i + 3) ==\
    \ s:sub(i + 2, i + 4) then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq0iqi8j.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppq0iqi8j.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):find(s:sub(i, i))\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1y99z8r.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk1y99z8r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  assert(type(s) == \"string\")\n  if #s\
    \ < 3 then\n    return false\n  end\n  if #s == 3 then\n    return (s:byte(1)\
    \ ~= s:byte(2)) and (s:byte(2) ~= s:byte(3)) and (s:byte(1) ~= s:byte(3))\n  end\n\
    \  local first = s:byte(1)\n  local second = s:byte(2)\n  local third = s:byte(3)\n\
    \  if first == second or second == third or first == third then\n    return false\n\
    \  end\n  return is_happy(s:sub(2))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local first = s:sub(1, 1)\n    local second = s:sub(2, 2)\n    local\
    \ third = s:sub(3, 3)\n    for i = 4, #s, 1 do\n        if first == second or\
    \ second == third or first == third then\n            return false\n        end\n\
    \        first = second\n        second = third\n        third = s:sub(i, i)\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca4zyaw8.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpca4zyaw8.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   -- Your code here\n   local s_len = string.len(s)\n\
    \   if s_len < 3 then\n      return false\n   end\n   local v = s:sub(1, 3)\n\
    \   if v:len() == 3 and v:sub(1, 1) ~= v:sub(2, 2) and v:sub(2, 2) ~= v:sub(3,\
    \ 3) and v:sub(1, 1) ~= v:sub(3, 3) then\n      return true\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_ejbnrs.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa_ejbnrs.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlzp7fwb.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpjlzp7fwb.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s<3 then return false end\n    for\
    \ i=1,#s-2 do\n        if s:sub(i,i+2)==s:sub(i+1,i+3) then return false end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkdvfzke.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkkdvfzke.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if s:len() < 3 then\n    return false\n\
    \  end\n  local max_index = s:len() - 3\n  for i = 1, max_index do\n    local\
    \ first = s:sub(i, i)\n    local second = s:sub(i + 1, i + 1)\n    local third\
    \ = s:sub(i + 2, i + 2)\n    if first == second or first == third or second ==\
    \ third then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26j3agvy.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp26j3agvy.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if type(s) ~= \"string\" then\n    \
    \    return false\n    end\n    if #s < 3 then\n        return false\n    end\n\
    \    -- check if character is unique\n    local found = {}\n    for i = 1, #s\
    \ do\n        if found[s:sub(i, i)] then\n            return false\n        end\n\
    \        found[s:sub(i, i)] = true\n    end\n    -- check if trio is unique\n\
    \    local trio = {}\n    for i = 1, #s - 2 do\n        if trio[s:sub(i, i + 2)]\
    \ then\n            return false\n        end\n        trio[s:sub(i, i + 2)] =\
    \ true\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcn_e5lv.lua:52:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvcn_e5lv.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  -- body\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1f4kc31.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpn1f4kc31.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local n = #s\n  if n < 3 then\n    return\
    \ false\n  end\n  for i = 1, n - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s) < 3 then\n        return\
    \ false\n    end\n    local i = 1\n    while i < string.len(s) do\n        if\
    \ string.sub(s, i, i + 2) == string.sub(s, i + 1, i + 3) then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjs803vj6.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjs803vj6.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if s:len() < 3 then\n        return\
    \ false\n    end\n    local ss = s:sub(1, 3)\n    for i = 4, s:len() do\n    \
    \    if ss:sub(1, 2) == s:sub(i - 1, i) then\n            return false\n     \
    \   end\n        ss = ss:sub(2) .. s:sub(i, i)\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf09s7032.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf09s7032.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- error(\"Not implemented yet\")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1078ku2.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpo1078ku2.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  local out = true\n  if #s < 3 then\n \
    \   out = false\n  else\n    local t = { [s:sub(1, 3)] = true }\n    for i = 4,\
    \ #s do\n      local v = s:sub(i - 2, i)\n      if t[v] then\n        out = false\n\
    \        break\n      else\n        t[v] = true\n      end\n    end\n  end\n \
    \ return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8p4s7oi.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy8p4s7oi.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local i = 0\n    while i < #s do\n        local v1 = s:sub(i, i)\n\
    \        local v2 = s:sub(i + 1, i + 1)\n        local v3 = s:sub(i + 2, i + 2)\n\
    \        if v1 == v2 or v1 == v3 or v2 == v3 then\n            return false\n\
    \        end\n        i = i + 3\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxn8kvqi.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvxn8kvqi.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009037
