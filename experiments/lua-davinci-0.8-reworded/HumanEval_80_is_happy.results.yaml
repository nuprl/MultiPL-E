name: HumanEval_80_is_happy
language: lua
results:
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- TODO: write your code here\n\tassert(type(s)\
    \ == \"string\")\n\tlocal n = #s\n\tif n < 3 then\n\t\treturn false\n\tend\n\t\
    for i = 1, n - 2 do\n\t\tif s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i)\
    \ == s:sub(i + 2, i + 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e_quf08.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2e_quf08.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n\t-- if string length is less than 3, return\
    \ false\n\tif string.len(s) < 3 then\n\t\treturn false\n\tend\n\t-- for i=1, length-2\n\
    \tfor i=1,string.len(s)-2 do\n\t\t-- check if s[i], s[i+1], s[i+2] are all distinct\n\
    \t\tif s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1)\
    \ == s:sub(i+2,i+2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local a=string.sub(s,1,1)\n   local b=string.sub(s,2,2)\n\
    \   local c=string.sub(s,3,3)\n   local len=string.len(s)\n   local happy=false\n\
    \   if len>=3 then\n      if a~=b and a~=c and b~=c then\n         happy=true\n\
    \      end\n   end\n   return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnrvmz0ej.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnrvmz0ej.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    local len = string.len(s)\n    if len\
    \ >= 3 then\n        local f = s:sub(1,1)\n        local m = s:sub(2,2)\n    \
    \    local l = s:sub(3,3)\n        if f ~= m and m ~= l and l ~= f then\n    \
    \        return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8skq_syk.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8skq_syk.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45vfqgoa.lua:23:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp45vfqgoa.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  if (s:len() < 3) then\n    return false\n\
    \  end\n  local i, j = 0, 0\n  while (i < s:len() - 2) do\n    local t = string.match(s,\
    \ \"(%w)%w%w\", i)\n    j = i + 1\n    while (j < s:len() - 2) do\n      if (t\
    \ == string.match(s, \"(%w)%w%w\", j)) then\n        return false\n      end\n\
    \      j = j + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_pwtsk2.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpu_pwtsk2.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljbqb1jz.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpljbqb1jz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vlvi6s5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1vlvi6s5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n   local max_len = 3\n   if string.len(s)\
    \ < max_len then\n      return false\n   end\n   local last = nil\n   for i =\
    \ 1, max_len do\n      local c = string.sub(s, i, i)\n      if last == c then\n\
    \         return false\n      end\n      last = c\n   end\n   for i = max_len\
    \ + 1, string.len(s) do\n      local c = string.sub(s, i, i)\n      local start\
    \ = i - max_len + 1\n      local sub = string.sub(s, start, i - 1)\n      if c\
    \ == string.sub(sub, 1, 1) then\n         return false\n      end\n      if c\
    \ == string.sub(sub, 2, 2) then\n         return false\n      end\n      if c\
    \ == string.sub(sub, 3, 3) then\n         return false\n      end\n   end\n  \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    local t = {}\n    for i = 1, #s - 2 do\n        if t[s:sub(i, i\
    \ + 2)] == nil then\n            t[s:sub(i, i + 2)] = true\n        else\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7qy8whs.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa7qy8whs.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\n    local i = 1\n\
    \    local l = #s\n    if l < 3 then\n        return false\n    end\n    while\
    \ i <= l - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i)\
    \ == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if #s < 3 then\n        return false\n\
    \    end\n    for i = 3, #s do\n        if s:sub(i-2, i) == s:sub(i-1, i+1) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge7fnh7l.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpge7fnh7l.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- Your code here\n    return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe90ayf76.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpe90ayf76.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  return string.len(s) >= 3 and string.len(s)\
    \ % 3 == 0 and s:match(\"(.)%1%1\") == nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ikn92tr.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0ikn92tr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfol1s0ot.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfol1s0ot.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    if string.len(s) < 3 then\n        return\
    \ false\n    end\n    local l = string.len(s)\n    local c1 = string.sub(s, 1,\
    \ 1)\n    local c2 = string.sub(s, 2, 2)\n    local c3 = string.sub(s, 3, 3)\n\
    \    for i = 4, l do\n        if c1 == c2 and c2 == c3 then\n            return\
    \ false\n        end\n        c1 = c2\n        c2 = c3\n        c3 = string.sub(s,\
    \ i, i)\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx1dxkkah.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx1dxkkah.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxpcfnpr.lua:24:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpdxpcfnpr.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n  assert(type(s) == \"string\")\n  if #s\
    \ < 3 then\n    return false\n  end\n  for i = 1, #s - 2 do\n    local part =\
    \ s:sub(i, i + 2)\n    local distinct = {}\n    for c in part:gmatch(\".\") do\n\
    \      if distinct[c] then\n        return false\n      end\n      distinct[c]\
    \ = true\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- TODO: Implement is_happy here.\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoardg9f3.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoardg9f3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ haplua or not.\n-- A string is haplua if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n-- For example:\n-- >>> is_happy(a)\n--\
    \ false\n-- >>> is_happy(aa)\n-- false\n-- >>> is_happy(abcd)\n-- true\n-- >>>\
    \ is_happy(aabb)\n-- false\n-- >>> is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n\
    -- false\nlocal function is_happy(s)\n    -- YOUR CODE HERE\n    if string.len(s)<3\
    \ then\n        return false\n    end\n    for i=1, string.len(s)-2 do\n     \
    \   if s:sub(i,i)==s:sub(i+1,i+1) or s:sub(i,i)==s:sub(i+2,i+2) or s:sub(i+1,i+1)==s:sub(i+2,i+2)\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
