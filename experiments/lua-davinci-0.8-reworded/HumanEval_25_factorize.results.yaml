name: HumanEval_25_factorize
language: lua
results:
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n\t\
    local primeFactors = {}\n\twhile n % 2 == 0 do\n\t\ttable.insert(primeFactors,\
    \ 2)\n\t\tn = n / 2\n\tend\n\tfor i = 3, math.sqrt(n), 2 do\n\t\twhile n % i ==\
    \ 0 do\n\t\t\ttable.insert(primeFactors, i)\n\t\t\tn = n / i\n\t\tend\n\tend\n\
    \tif n > 2 then\n\t\ttable.insert(primeFactors, n)\n\tend\n\treturn primeFactors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local res = {}\n    local d = 2\n    repeat\n        while n % d == 0 do\n\
    \            table.insert(res, d)\n            n = n / d\n        end\n      \
    \  d = d + 1\n    until n == 1\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local function factorizeR(n, fs)\n    if n == 1 then\n      return fs\n    else\n\
    \      local p, e = factor(n)\n      for i = 1, e do\n        table.insert(fs,\
    \ p)\n      end\n      return factorizeR(n / p^e, fs)\n    end\n  end\n  return\
    \ factorizeR(n, {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6phkj82.lua:15:\
    \ attempt to call a nil value (global 'factor')\nstack traceback:\n\t/tmp/tmp_6phkj82.lua:15:\
    \ in function </tmp/tmp_6phkj82.lua:11>\n\t(...tail calls...)\n\t/tmp/tmp_6phkj82.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local number = n\n    local divisor = 2\n    local factors = {}\n    while\
    \ number > 1 do\n        if number % divisor == 0 then\n            table.insert(factors,\
    \ divisor)\n            number = number / divisor\n        else\n            divisor\
    \ = divisor + 1\n        end\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local t = {}\n    for i = 2, n do\n        while n % i == 0 do\n         \
    \   table.insert(t, i)\n            n = n / i\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    local divisor = 2\n    while n > 1 do\n        if\
    \ n % divisor == 0 then\n            table.insert(factors, divisor)\n        \
    \    n = n / divisor\n        else\n            divisor = divisor + 1\n      \
    \  end\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    while n % 2 == 0 do\n        n = n / 2\n        table.insert(factors,\
    \ 2)\n    end\n    local factor = 3\n    while n > 1 do\n        while n % factor\
    \ == 0 do\n            n = n / factor\n            table.insert(factors, factor)\n\
    \        end\n        factor = factor + 2\n    end\n    return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 2\n  while n > 1 do\n    while n % i == 0 do\n\
    \      table.insert(factors, i)\n      n = n / i\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local _, factors = get_divisors(n)\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7laikmt.lua:11:\
    \ attempt to call a nil value (global 'get_divisors')\nstack traceback:\n\t/tmp/tmps7laikmt.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmps7laikmt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    if n < 2 then\n        return factors\n    end\n \
    \   local n_copy = n\n    local k = 2\n    while k <= n_copy do\n        if n_copy\
    \ % k == 0 then\n            n_copy = n_copy / k\n            table.insert(factors,\
    \ k)\n        else\n            k = k + 1\n        end\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local result = {}\n    if n <= 1 then\n        return result\n    end\n  \
    \  -- 2 is a prime factor of every number\n    while n % 2 == 0 do\n        result[#result\
    \ + 1] = 2\n        n = n / 2\n    end\n    -- 3 is a prime factor of every number\
    \ except 2, so we can ignore evens and start with 3, then step by 2s\n    for\
    \ i = 3, n, 2 do\n        while n % i == 0 do\n            result[#result + 1]\
    \ = i\n            n = n / i\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local function argmax(array)\n    local max = math.huge * -1\n    local max_arg\
    \ = nil\n    for i = 1, #array do\n      if array[i] > max then\n        max =\
    \ array[i]\n        max_arg = i\n      end\n    end\n    return max_arg\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmprkc5b73j.lua:36: 'end' expected (to close 'function' at line\
    \ 10) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  while n > 1 do\n    local factor = 2\n    while n % factor\
    \ ~= 0 do\n      factor = factor + 1\n    end\n    factors[#factors + 1] = factor\n\
    \    n = n / factor\n  end\n  return factors\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local divisor = 2\n  while divisor <= n do\n    if n %\
    \ divisor == 0 then\n      table.insert(factors, divisor)\n      n = n / divisor\n\
    \    else\n      divisor = divisor + 1\n    end\n  end\n  return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n\t\
    local res = {}\n\twhile n % 2 == 0 do\n\t\tres[#res + 1] = 2\n\t\tn = n / 2\n\t\
    end\n\tfor i = 3, math.sqrt(n), 2 do\n\t\twhile n % i == 0 do\n\t\t\tres[#res\
    \ + 1] = i\n\t\t\tn = n / i\n\t\tend\n\tend\n\tif n > 2 then\n\t\tres[#res + 1]\
    \ = n\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local prime_factors = {}\n    local i = 2\n    while i < n do\n        if\
    \ n % i == 0 then\n            table.insert(prime_factors, i)\n            n =\
    \ n / i\n        else\n            i = i + 1\n        end\n    end\n    table.insert(prime_factors,\
    \ n)\n    return prime_factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n\t\
    local res = {}\n\tif n == 1 then return res end\n\tfor p in isqrt_primes(n) do\n\
    \t\twhile n % p == 0 do\n\t\t\tres[#res+1] = p\n\t\t\tn = n / p\n\t\tend\n\tend\n\
    \treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6_hx5cr.lua:13:\
    \ attempt to call a nil value (global 'isqrt_primes')\nstack traceback:\n\t/tmp/tmpf6_hx5cr.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf6_hx5cr.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, math.floor(math.sqrt(n)) do\n        while\
    \ n % i == 0 do\n            n = n / i\n            table.insert(factors, i)\n\
    \        end\n    end\n    if n > 1 then\n        table.insert(factors, n)\n \
    \   end\n    return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    local primes = prime_numbers(n)\n    for _, v in ipairs(primes)\
    \ do\n        if n == 1 then\n            break\n        end\n        local remainder\
    \ = n\n        while remainder % v == 0 do\n            remainder = remainder\
    \ / v\n            table.insert(factors, v)\n        end\n    end\n    return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp39s8rar8.lua:12:\
    \ attempt to call a nil value (global 'prime_numbers')\nstack traceback:\n\t/tmp/tmp39s8rar8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp39s8rar8.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Return table of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    local d = 2\n    while n > 1 do\n        while n %\
    \ d == 0 do\n            table.insert(factors, d)\n            n = n / d\n   \
    \     end\n        d = d + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
