name: HumanEval_160_do_algebra
language: lua
prompt: "-- Given two tables operator, and operand. The first table has basic algebra\
  \ operations, and \n-- the second table is a table of integers. Use the two given\
  \ tables to build the algebric \n-- expression and return the evaluation of this\
  \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
  \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
  \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n--\
  \ result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
  \ table is equal to the length of operand table minus one.\n-- Operand is a table\
  \ of of non-negative integers.\n-- Operator table has at least one operator, and\
  \ operand table has at least two operands.\nlocal function do_algebra(operator,\
  \ operand)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
  \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
  \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3,\
  \ 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local n = #operator\n  local result = 0\n  result = operand[1]\n\
    \  for i = 1, n do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "   local res = operand[1]\n\
    \   for i = 1, #operator do\n      if operator[i] == '+' then\n         res =\
    \ res + operand[i+1]\n      elseif operator[i] == '-' then\n         res = res\
    \ - operand[i+1]\n      elseif operator[i] == '*' then\n         res = res * operand[i+1]\n\
    \      elseif operator[i] == '//' then\n         res = math.floor(res / operand[i+1])\n\
    \      elseif operator[i] == '**' then\n         res = res ^ operand[i+1]\n  \
    \    end\n   end\n   return res\nend", "    local result = operand[1]\n    for\
    \ i = 1, #operator do\n        if operator[i] == '+' then\n            result\
    \ = result + operand[i + 1]\n        elseif operator[i] == '-' then\n        \
    \    result = result - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            result = result * operand[i + 1]\n        elseif operator[i] == '//'\
    \ then\n            result = result // operand[i + 1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i + 1]\n        end\n  \
    \  end\n    return result\nend", "    local result = operand[1]\n    for i = 1,\
    \ #operator do\n        if operator[i] == '+' then\n            result = result\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            result\
    \ = result - operand[i + 1]\n        elseif operator[i] == '*' then\n        \
    \    result = result * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            result = result // operand[i + 1]\n        elseif operator[i] ==\
    \ '**' then\n            result = result ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "\tlocal op = {['+'] = function(a, b) return a + b end,\n\
    \t\t\t\t\t\t\t['-'] = function(a, b) return a - b end,\n\t\t\t\t\t\t\t['*'] =\
    \ function(a, b) return a * b end,\n\t\t\t\t\t\t\t['//'] = function(a, b) return\
    \ a // b end,\n\t\t\t\t\t\t\t['**'] = function(a, b) return a ^ b end}\n\tlocal\
    \ r = operand[1]\n\tfor i = 1, #operator do\n\t\tr = op[operator[i]](r, operand[i\
    \ + 1])\n\tend\n\treturn r\nend", "    local op_map = {['+']=function(a,b) return\
    \ a+b end,\n                    ['-']=function(a,b) return a-b end,\n        \
    \            ['*']=function(a,b) return a*b end,\n                    ['//']=function(a,b)\
    \ return math.floor(a/b) end,\n                    ['**']=function(a,b) return\
    \ a^b end}\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   result = op_map[operator[i]](result, operand[i+1])\n    end\n    return result\n\
    end", "  local res\n  for i,v in ipairs(operator) do\n    if i == 1 then\n   \
    \   res = operand[i] .. v .. operand[i+1]\n    else\n      res = res .. v .. operand[i+1]\n\
    \    end\n  end\n  return assert(load('return ' .. res))()\nend", "    local temp\
    \ = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+' then\n\
    \            temp = temp + operand[i + 1]\n        elseif operator[i] == '-' then\n\
    \            temp = temp - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            temp = temp * operand[i + 1]\n        elseif operator[i] == '//'\
    \ then\n            temp = math.floor(temp / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            temp = temp ^ operand[i + 1]\n        end\n    end\n\
    \    return temp\nend", "    local str = \"\"\n    for k, v in ipairs(operand)\
    \ do\n        if k ~= 1 then\n            str = str .. (operator[k - 1] or \"\"\
    ) .. v\n        else\n            str = str .. v\n        end\n    end\n    return\
    \ loadstring(\"return \" .. str)()\nend", "  local result = 0\n  for k,v in ipairs(operator)\
    \ do\n    if v == '+' then\n      result = result + operand[k] + operand[k+1]\n\
    \    elseif v == '-' then\n      result = result - operand[k] - operand[k+1]\n\
    \    elseif v == '*' then\n      result = result * operand[k] * operand[k+1]\n\
    \    elseif v == '//' then\n      result = result // operand[k] // operand[k+1]\n\
    \    elseif v == '**' then\n      result = result ** operand[k] ** operand[k+1]\n\
    \    end\n  end\n  return result\nend", "    return table.reduce(operator, function(i,\
    \ acc, v)\n        return acc .. \" \" .. table.get(operand, i) .. \" \" .. v\n\
    \    end) .. \" \" .. table.get(operand, #operand)\nend", "  local eq = table.concat(operand,\
    \ '')\n  for i,v in ipairs(operator) do\n    eq = eq:gsub(tostring(i), v)\n  end\n\
    \  eq = eq:gsub('//', '//')\n  eq = eq:gsub('%*%*', '^')\n  eq = eq:gsub('%*',\
    \ '*')\n  return loadstring(\"return \" .. eq)()\nend", "    local op_idx = #operator\n\
    \    local res = operand[1]\n    for i = 2, #operand do\n        if operator[op_idx]\
    \ == '+' then\n            res = res + operand[i]\n        elseif operator[op_idx]\
    \ == '-' then\n            res = res - operand[i]\n        elseif operator[op_idx]\
    \ == '*' then\n            res = res * operand[i]\n        elseif operator[op_idx]\
    \ == '//' then\n            res = math.floor(res / operand[i])\n        elseif\
    \ operator[op_idx] == '**' then\n            res = res ^ operand[i]\n        end\n\
    \        op_idx = op_idx - 1\n    end\n    return res\nend", "    local result\
    \ = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+' then\n\
    \            result = result + operand[i + 1]\n        elseif operator[i] == '-'\
    \ then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "  -- your code here\n\
    \  return nil\nend", "    local function sym(s)\n        return function(...)\n\
    \            return s:format(...)\n        end\n    end\n    local function compile(operator,\
    \ operand)\n        if #operator == 0 then\n            return tostring(operand[1])\n\
    \        end\n        local op = table.remove(operator, 1)\n        local ex =\
    \ compile(operator, operand)\n        local ey = table.remove(operand, 1)\n  \
    \      return sym[op](ex, ey)\n    end\n    local compiled = compile(operator,\
    \ operand)\n    return loadstring('return ' .. compiled)()\nend", "    local result\
    \ = operand[1]\n    for i=1,#operator do\n        if operator[i] == '+' then\n\
    \            result = result + operand[i+1]\n        elseif operator[i] == '-'\
    \ then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i+1])\n     \
    \   elseif operator[i] == '**' then\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    local sum = operand[1]\n\
    \    for i=1,#operator do\n        if operator[i] == '+' then\n            sum\
    \ = sum + operand[i+1]\n        elseif operator[i] == '-' then\n            sum\
    \ = sum - operand[i+1]\n        elseif operator[i] == '*' then\n            sum\
    \ = sum * operand[i+1]\n        elseif operator[i] == '//' then\n            sum\
    \ = math.floor(sum / operand[i+1])\n        elseif operator[i] == '**' then\n\
    \            sum = sum ^ operand[i+1]\n        end\n    end\n    return sum\n\
    end", "    local result = operand[1]\n    for i = 1, #operator do\n        local\
    \ op = operator[i]\n        local num = operand[i + 1]\n        if op == '+' then\n\
    \            result = result + num\n        elseif op == '-' then\n          \
    \  result = result - num\n        elseif op == '*' then\n            result =\
    \ result * num\n        elseif op == '//' then\n            result = math.floor(result\
    \ / num)\n        elseif op == '**' then\n            result = result ^ num\n\
    \        end\n    end\n    return result\nend", "    local res = operand[1]\n\
    \    for i=1,#operator do\n        if operator[i] == '+' then\n            res\
    \ = res + operand[i+1]\n        elseif operator[i] == '-' then\n            res\
    \ = res - operand[i+1]\n        elseif operator[i] == '*' then\n            res\
    \ = res * operand[i+1]\n        elseif operator[i] == '//' then\n            res\
    \ = math.floor(res / operand[i+1])\n        elseif operator[i] == '**' then\n\
    \            res = res ^ operand[i+1]\n        end\n    end\n    return res\n\
    end", "    local ret = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            ret = ret + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            ret = ret - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            ret = ret * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            ret = ret // operand[i + 1]\n        elseif operator[i]\
    \ == '**' then\n            ret = ret ^ operand[i + 1]\n        end\n    end\n\
    \    return ret\nend", "    if operator[1] == \"+\" then\n        return operand[1]\
    \ + operand[2]\n    elseif operator[1] == \"-\" then\n        return operand[1]\
    \ - operand[2]\n    elseif operator[1] == \"*\" then\n        return operand[1]\
    \ * operand[2]\n    elseif operator[1] == \"//\" then\n        return operand[1]\
    \ // operand[2]\n    elseif operator[1] == \"**\" then\n        return operand[1]\
    \ ** operand[2]\n    end\nend", "  -- your code here\n  local i, res\n  res =\
    \ operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n    \
    \  res = res + operand[i + 1]\n    elseif operator[i] == '-' then\n      res =\
    \ res - operand[i + 1]\n    elseif operator[i] == '*' then\n      res = res *\
    \ operand[i + 1]\n    elseif operator[i] == '//' then\n      res = res // operand[i\
    \ + 1]\n    elseif operator[i] == '**' then\n      res = res ^ operand[i + 1]\n\
    \    end\n  end\n  return res\nend", "    local result = operand[1]\n    for i\
    \ = 1, #operator do\n        if operator[i] == '+' then\n            result =\
    \ result + operand[i + 1]\n        elseif operator[i] == '-' then\n          \
    \  result = result - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            result = result * operand[i + 1]\n        elseif operator[i] == '//'\
    \ then\n            result = math.floor(result / operand[i + 1])\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i + 1]\n   \
    \     end\n    end\n    return result\nend", "  local res = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      res = res + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      res = res - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      res = res * operand[i + 1]\n    elseif\
    \ operator[i] == '//' then\n      res = res // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      res = res ^ operand[i + 1]\n    end\n  end\n  return res\n\
    end", "    if #operator ~= #operand - 1 then\n        error('operator table length\
    \ should be equal to operand table length minus one')\n    end\n    for i = 1,\
    \ #operand do\n        operand[i] = tonumber(operand[i])\n        if operand[i]\
    \ == nil then\n            error('operand[' .. i .. '] must be a number')\n  \
    \      end\n    end\n    local function check(x)\n        if x >= 1 and x <= 4\
    \ then\n            return true\n        end\n        return false\n    end\n\
    \    local function get(x)\n        if x == 1 then\n            return '+'\n \
    \       elseif x == 2 then\n            return '-'\n        elseif x == 3 then\n\
    \            return '*'\n        elseif x == 4 then\n            return '//'\n\
    \        end\n    end\n    local function dfs(pos, op_left, op_mask, cur_op, sum)\n\
    \        if pos == #operand then\n            local tmp = table.concat(operand,\
    \ ' ')\n            for i = 1, #operator do\n                tmp = tmp .. ' '\
    \ .. get(operator[i])\n            end\n            tmp = tmp .. ' = ' .. sum\n\
    \            print(tmp)\n            return\n        end\n        if op_left >\
    \ 0 then\n            for i = 1, 4 do\n                if check(i) and (op_mask\
    \ & (1 << i)) == 0 then\n                    operator[pos] = i\n             \
    \       local next_op = 0\n                    if i == 1 then\n              \
    \          next_op = sum + operand[pos + 1]\n                    elseif i == 2\
    \ then\n                        next_op = sum - operand[pos + 1]\n           \
    \         elseif i == 3 then\n                        next_op = sum * operand[pos\
    \ + 1]\n                    elseif i == 4 then\n                        next_op\
    \ = math.floor(sum / operand[pos + 1])\n                    end\n            \
    \        dfs(pos + 1, op_left - 1, op_mask | (1 << i), i, next_op)\n         \
    \       end\n            end\n        else\n            local next_op = 0\n  \
    \          if cur_op == 1 then\n                next_op = sum +", "  local expression\
    \ = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n  \
    \    expression = expression + operand[i + 1]\n    elseif operator[i] == '-' then\n\
    \      expression = expression - operand[i + 1]\n    elseif operator[i] == '*'\
    \ then\n      expression = expression * operand[i + 1]\n    elseif operator[i]\
    \ == '//' then\n      expression = expression // operand[i + 1]\n    elseif operator[i]\
    \ == '**' then\n      expression = expression ^ operand[i + 1]\n    end\n  end\n\
    \  return expression\nend", "  local total = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      total = total + operand[i + 1]\n \
    \   elseif operator[i] == '-' then\n      total = total - operand[i + 1]\n   \
    \ elseif operator[i] == '*' then\n      total = total * operand[i + 1]\n    elseif\
    \ operator[i] == '//' then\n      total = math.floor(total / operand[i + 1])\n\
    \    elseif operator[i] == '**' then\n      total = total ^ operand[i + 1]\n \
    \   end\n  end\n  return total\nend", "    local res = operand[1]\n    for i =\
    \ 1, #operator do\n        if operator[i] == '+' then\n            res = res +\
    \ operand[i + 1]\n        elseif operator[i] == '-' then\n            res = res\
    \ - operand[i + 1]\n        elseif operator[i] == '*' then\n            res =\
    \ res * operand[i + 1]\n        elseif operator[i] == '//' then\n            res\
    \ = math.floor(res / operand[i + 1])\n        elseif operator[i] == '**' then\n\
    \            res = res ^ operand[i + 1]\n        end\n    end\n    return res\n\
    end", "    local retval = operand[1]\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            retval = retval + operand[i + 1]\n    \
    \    elseif operator[i] == '-' then\n            retval = retval - operand[i +\
    \ 1]\n        elseif operator[i] == '*' then\n            retval = retval * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            retval = retval //\
    \ operand[i + 1]\n        elseif operator[i] == '**' then\n            retval\
    \ = retval ^ operand[i + 1]\n        end\n    end\n    return retval\nend", " \
    \ for i = 2, #operand do\n    if operator[i - 1] == '+' then\n      operand[i]\
    \ = operand[i - 1] + operand[i]\n    elseif operator[i - 1] == '-' then\n    \
    \  operand[i] = operand[i - 1] - operand[i]\n    elseif operator[i - 1] == '*'\
    \ then\n      operand[i] = operand[i - 1] * operand[i]\n    elseif operator[i\
    \ - 1] == '//' then\n      operand[i] = operand[i - 1] // operand[i]\n    elseif\
    \ operator[i - 1] == '**' then\n      operand[i] = operand[i - 1] ^ operand[i]\n\
    \    end\n  end\n  return operand[#operand]\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ result = result + operand[i + 1]\n        elseif operator[i] == '-' then\n \
    \           result = result - operand[i + 1]\n        elseif operator[i] == '*'\
    \ then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i + 1]\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i + 1]\n   \
    \     end\n    end\n    return result\nend", "    local result = operand[1]\n\
    \    for k,v in ipairs(operator) do\n        local op2 = operand[k+1]\n      \
    \  if v == '+' then\n            result = result + op2\n        elseif v == '-'\
    \ then\n            result = result - op2\n        elseif v == '*' then\n    \
    \        result = result * op2\n        elseif v == '//' then\n            result\
    \ = math.floor(result / op2)\n        elseif v == '**' then\n            result\
    \ = result ^ op2\n        end\n    end\n    return result\nend", "\tlocal result\
    \ = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i] == '+' then\n\t\t\
    \tresult = result + operand[i + 1]\n\t\telseif operator[i] == '-' then\n\t\t\t\
    result = result - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\t\t\tresult\
    \ = result * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\tresult\
    \ = math.floor(result / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\
    \t\t\tresult = result ^ operand[i + 1]\n\t\tend\n\tend\n\treturn result\nend",
  "  local function eval(op, num1, num2)\n    if op == '+' then\n      return num1\
    \ + num2\n    elseif op == '-' then\n      return num1 - num2\n    elseif op ==\
    \ '*' then\n      return num1 * num2\n    elseif op == '//' then\n      return\
    \ math.floor(num1 / num2)\n    elseif op == '**' then\n      return num1 ^ num2\n\
    \    end\n  end\n  local result = operand[1]\n  for i = 1, #operator do\n    result\
    \ = eval(operator[i], result, operand[i + 1])\n  end\n  return result\nend", " \
    \   local res = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            res = res + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            res = res - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            res = res // operand[i + 1]\n        elseif operator[i]\
    \ == '**' then\n            res = res ^ operand[i + 1]\n        end\n    end\n\
    \    return res\nend", "  -- Write your code here.\n  local result = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result\
    \ - operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "    for i = 1, #operator\
    \ do\n        operand[i + 1] = { ['+'] = function(op1, op2) return op1 + op2 end,\n\
    \                           ['-'] = function(op1, op2) return op1 - op2 end,\n\
    \                           ['*'] = function(op1, op2) return op1 * op2 end,\n\
    \                           ['//'] = function(op1, op2) return op1 // op2 end,\n\
    \                           ['**'] = function(op1, op2) return op1 ^ op2 end }[operator[i]](operand[i],\
    \ operand[i + 1])\n    end\n    return operand[#operand]\nend", "    -- Write\
    \ your code here\nend\n```", "  \nend", "  local result = operand[1]\n  for i\
    \ = 1, #operator do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "  local function eval(lhs,\
    \ op, rhs)\n    if op == '+' then return lhs + rhs end\n    if op == '-' then\
    \ return lhs - rhs end\n    if op == '*' then return lhs * rhs end\n    if op\
    \ == '//' then return math.floor(lhs / rhs) end\n    if op == '**' then return\
    \ lhs ^ rhs end\n  end\n  local result = table.remove(operand, 1)\n  for i, op\
    \ in ipairs(operator) do\n    result = eval(result, op, operand[i])\n  end\n \
    \ return result\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = result // operand[i + 1]\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend", "    local res = operand[1]\n    for i = 1, #operator do\n   \
    \     local x = operator[i]\n        local y = operand[i + 1]\n        if x ==\
    \ \"+\" then\n            res = res + y\n        elseif x == \"-\" then\n    \
    \        res = res - y\n        elseif x == \"*\" then\n            res = res\
    \ * y\n        elseif x == \"//\" then\n            res = math.floor(res / y)\n\
    \        elseif x == \"**\" then\n            res = res ^ y\n        end\n   \
    \ end\n    return res\nend", "    local function calc(op, a, b)\n        if op\
    \ == \"+\" then\n            return a + b\n        elseif op == \"-\" then\n \
    \           return a - b\n        elseif op == \"*\" then\n            return\
    \ a * b\n        elseif op == \"//\" then\n            return math.floor(a / b)\n\
    \        elseif op == \"**\" then\n            return a ^ b\n        end\n   \
    \ end\n    local res = operand[1]\n    for i = 1, #operator do\n        res =\
    \ calc(operator[i], res, operand[i + 1])\n    end\n    return res\nend", "   \
    \ local result = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i + 1]\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i + 1]\n   \
    \     end\n    end\n    return result\nend", "\tlocal result = 0\n\tif operator[1]\
    \ == \"+\" then\n\t\tresult = operand[1] + operand[2]\n\t\tfor i = 3, #operand\
    \ do\n\t\t\tresult = result + operand[i]\n\t\tend\n\telseif operator[1] == \"\
    -\" then\n\t\tresult = operand[1] - operand[2]\n\t\tfor i = 3, #operand do\n\t\
    \t\tresult = result - operand[i]\n\t\tend\n\telseif operator[1] == \"*\" then\n\
    \t\tresult = operand[1] * operand[2]\n\t\tfor i = 3, #operand do\n\t\t\tresult\
    \ = result * operand[i]\n\t\tend\n\telseif operator[1] == \"//\" then\n\t\tresult\
    \ = operand[1] // operand[2]\n\t\tfor i = 3, #operand do\n\t\t\tresult = result\
    \ // operand[i]\n\t\tend\n\telseif operator[1] == \"**\" then\n\t\tresult = operand[1]\
    \ ^ operand[2]\n\t\tfor i = 3, #operand do\n\t\t\tresult = result ^ operand[i]\n\
    \t\tend\n\tend\n\treturn result\nend", "    local res = 0\n    for i = 1, #operator\
    \ do\n        local op1 = operand[i]\n        local op2 = operand[i + 1]\n   \
    \     local op = operator[i]\n        if op == '+' then\n            res = op1\
    \ + op2\n        elseif op == '-' then\n            res = op1 - op2\n        elseif\
    \ op == '*' then\n            res = op1 * op2\n        elseif op == '//' then\n\
    \            res = math.floor(op1 / op2)\n        elseif op == '**' then\n   \
    \         res = op1 ^ op2\n        end\n    end\n    return res\nend", "    for\
    \ i,v in ipairs(operator) do\n        if v == '+' then\n            table.insert(operand,\
    \ i, operand[i] + operand[i+1])\n            table.remove(operand, i+1)\n    \
    \        table.remove(operand, i+1)\n            table.remove(operator, i)\n \
    \       elseif v == '-' then\n            table.insert(operand, i, operand[i]\
    \ - operand[i+1])\n            table.remove(operand, i+1)\n            table.remove(operand,\
    \ i+1)\n            table.remove(operator, i)\n        elseif v == '*' then\n\
    \            table.insert(operand, i, operand[i] * operand[i+1])\n           \
    \ table.remove(operand, i+1)\n            table.remove(operand, i+1)\n       \
    \     table.remove(operator, i)\n        elseif v == '//' then\n            table.insert(operand,\
    \ i, operand[i] // operand[i+1])\n            table.remove(operand, i+1)\n   \
    \         table.remove(operand, i+1)\n            table.remove(operator, i)\n\
    \        elseif v == '**' then\n            table.insert(operand, i, operand[i]\
    \ ^ operand[i+1])\n            table.remove(operand, i+1)\n            table.remove(operand,\
    \ i+1)\n            table.remove(operator, i)\n        end\n    end\n    return\
    \ operand[1]\nend", "  local i = 1\n  local result = operand[1]\n  while i <=\
    \ #operator do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = result // operand[i\
    \ + 1]\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n    i = i + 1\n  end\n  return result\nend", "    local result\
    \ = operand[1]\n    for i=1,#operator do\n        if operator[i] == '+' then\n\
    \            result = result + operand[i+1]\n        elseif operator[i] == '-'\
    \ then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "    local operation = {\n        ['+'] = function(x,\
    \ y) return x + y end,\n        ['-'] = function(x, y) return x - y end,\n   \
    \     ['*'] = function(x, y) return x * y end,\n        ['//'] = function(x, y)\
    \ return x // y end,\n        ['**'] = function(x, y) return x ^ y end\n    }\n\
    \    local result = table.remove(operand, 1)\n    for i = 1, #operator do\n  \
    \      result = operation[operator[i]](result, operand[i])\n    end\n    return\
    \ result\nend", "    local t = operand\n    for i = 1, #operator do\n        local\
    \ op = operator[i]\n        local arg1 = t[1]\n        local arg2 = t[2]\n   \
    \     if op == '+' then\n            table.remove(t, 1)\n            t[1] = arg1\
    \ + arg2\n        elseif op == '-' then\n            table.remove(t, 1)\n    \
    \        t[1] = arg1 - arg2\n        elseif op == '*' then\n            table.remove(t,\
    \ 1)\n            t[1] = arg1 * arg2\n        elseif op == '//' then\n       \
    \     table.remove(t, 1)\n            t[1] = math.floor(arg1 / arg2)\n       \
    \ elseif op == '**' then\n            table.remove(t, 1)\n            t[1] = arg1\
    \ ^ arg2\n        end\n    end\n    return t[1]\nend", "  local operand = tcopy(operand)\n\
    \  local temp\n  for _, op in ipairs(operator) do\n    if op == '//' then\n  \
    \    temp = table.remove(operand, 1)\n      for i = 1, #operand do\n        operand[i]\
    \ = math.floor(operand[i] / temp)\n      end\n    elseif op == '**' then\n   \
    \   temp = table.remove(operand, 1)\n      for i = 1, #operand do\n        operand[i]\
    \ = operand[i] ^ temp\n      end\n    else\n      temp = table.remove(operand,\
    \ 1)\n      for i = 1, #operand do\n        operand[i] = math.floor(operand[i]\
    \ * temp)\n      end\n    end\n  end\n  temp = operand[1]\n  for i = 2, #operand\
    \ do\n    temp = temp + operand[i]\n  end\n  return temp\nend", "    local operand\
    \ = operand\n    local operator = operator\n    local result = 0\n    for k, v\
    \ in ipairs(operator) do\n        if k == 1 then\n            result = operand[k]\
    \ .. v .. operand[k + 1]\n        else\n            result = result .. v .. operand[k\
    \ + 1]\n        end\n    end\n    return load(\"return \" .. result)()\nend",
  "  assert(type(operator) == 'table', 'Input operator should be a table')\n  assert(type(operand)\
    \ == 'table', 'Input operand should be a table')\n  assert(#operator >= 1, 'Input\
    \ operator table should have at least one element')\n  assert(#operand >= 2, 'Input\
    \ operand table should have at least two elements')\n  assert(#operator == #operand\
    \ - 1, 'Input operator table and operand table should have same length')\n  local\
    \ result = operand[1]\n  for i = 1, #operator do\n    local op = operator[i]\n\
    \    local opd = operand[i + 1]\n    assert(type(op) == 'string', 'Input operator\
    \ should be a string')\n    assert(type(opd) == 'number', 'Input operand should\
    \ be a number')\n    assert(opd >= 0, 'Input operand should be a non-negative\
    \ number')\n    if op == '+' then\n      result = result + opd\n    elseif op\
    \ == '-' then\n      result = result - opd\n    elseif op == '*' then\n      result\
    \ = result * opd\n    elseif op == '//' then\n      result = math.floor(result\
    \ / opd)\n    elseif op == '**' then\n      result = result ^ opd\n    else\n\
    \      error('Invalid operator: ' .. op)\n    end\n  end\n  return result\nend",
  "    local res = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            res = res + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            res = res - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            res = res * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            res = math.floor(res / operand[i + 1])\n        elseif\
    \ operator[i] == '**' then\n            res = res ^ operand[i + 1]\n        end\n\
    \    end\n    return res\nend", "    local result = table.remove(operand, 1)\n\
    \    for i, v in ipairs(operator) do\n        if v == \"+\" then\n           \
    \ result = result + operand[i]\n        elseif v == \"-\" then\n            result\
    \ = result - operand[i]\n        elseif v == \"*\" then\n            result =\
    \ result * operand[i]\n        elseif v == \"//\" then\n            result = result\
    \ // operand[i]\n        elseif v == \"**\" then\n            result = result\
    \ ^ operand[i]\n        end\n    end\n    return result\nend", "\tlocal r, f,\
    \ t\n\tr = operand[1]\n\tt = #operand\n\tfor i = 1, t - 1 do\n\t\tif operator[i]\
    \ == '+' then\n\t\t\tr = r + operand[i + 1]\n\t\telseif operator[i] == '-' then\n\
    \t\t\tr = r - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\t\t\tr = r\
    \ * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\tr = r // operand[i\
    \ + 1]\n\t\telseif operator[i] == '**' then\n\t\t\tr = r ^ operand[i + 1]\n\t\t\
    end\n\tend\n\treturn r\nend", "  local result = 0\n  local first = true\n  for\
    \ i,v in ipairs(operator) do\n    if first then\n      result = operand[i] ..\
    \ v .. operand[i+1]\n      first = false\n    else\n      result = result .. v\
    \ .. operand[i+1]\n    end\n  end\n  local func = loadstring(\"return \" .. result)\n\
    \  return func()\nend", "  local result = 0\n  if #operator < 1 or #operand <\
    \ 2 then\n    return result\n  end\n  result = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i + 1]\n\
    \    elseif operator[i] == '-' then\n      result = result - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      result = result * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      result = math.floor(result / operand[i\
    \ + 1])\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ result = result + operand[i + 1]\n        elseif operator[i] == '-' then\n \
    \           result = result - operand[i + 1]\n        elseif operator[i] == '*'\
    \ then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "  local table_len, sum\
    \ = #operand, 0\n  for i=1, table_len-1 do\n    if operator[i] == '+' then sum\
    \ = sum + operand[i] + operand[i+1] end\n    if operator[i] == '-' then sum =\
    \ sum + operand[i] - operand[i+1] end\n    if operator[i] == '*' then sum = sum\
    \ + operand[i] * operand[i+1] end\n    if operator[i] == '//' then sum = sum +\
    \ operand[i] // operand[i+1] end\n    if operator[i] == '**' then sum = sum +\
    \ operand[i] ^ operand[i+1] end\n  end\n  return sum\nend", "\tlocal operator_map\
    \ = {\n\t\t['+'] = function(a, b) return a + b end,\n\t\t['-'] = function(a, b)\
    \ return a - b end,\n\t\t['*'] = function(a, b) return a * b end,\n\t\t['//']\
    \ = function(a, b) return math.floor(a / b) end,\n\t\t['**'] = function(a, b)\
    \ return a ^ b end,\n\t}\n\tlocal result = operand[1]\n\tfor i = 1, #operator\
    \ do\n\t\tresult = operator_map[operator[i]](result, operand[i + 1])\n\tend\n\t\
    return result\nend", "  local res = operand[1]\n  for i=1,#operator do\n    if\
    \ operator[i] == '+' then\n      res = res + operand[i+1]\n    elseif operator[i]\
    \ == '-' then\n      res = res - operand[i+1]\n    elseif operator[i] == '*' then\n\
    \      res = res * operand[i+1]\n    elseif operator[i] == '//' then\n      res\
    \ = res // operand[i+1]\n    elseif operator[i] == '**' then\n      res = res\
    \ ^ operand[i+1]\n    end\n  end\n  return res\nend", "  return (operator[1] ==\
    \ '*' and operand[1] * operand[2] or \n         (operator[1] == '+' and operand[1]\
    \ + operand[2] or \n         (operator[1] == '-' and operand[1] - operand[2] or\
    \ \n         (operator[1] == '//' and operand[1] // operand[2] or \n         (operator[1]\
    \ == '**' and operand[1] ^ operand[2] or 0)))))\nend", "  local result = operand[1]\n\
    \  for i=1,#operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i+1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i+1]\n    elseif operator[i] == '*' then\n      result = result * operand[i+1]\n\
    \    elseif operator[i] == '//' then\n      result = result // operand[i+1]\n\
    \    elseif operator[i] == '**' then\n      result = result ^ operand[i+1]\n \
    \   end\n  end\n  return result\nend", "    local result = operand[1]\n    for\
    \ i = 1, #operator do\n        local opp = operator[i]\n        local left = operand[i]\n\
    \        local right = operand[i + 1]\n        if opp == '+' then\n          \
    \  result = left + right\n        elseif opp == '-' then\n            result =\
    \ left - right\n        elseif opp == '*' then\n            result = left * right\n\
    \        elseif opp == '//' then\n            result = left // right\n       \
    \ elseif opp == '**' then\n            result = left ^ right\n        end\n  \
    \  end\n    return result\nend", "    local result = operand[1]\n    for i = 1,\
    \ #operator do\n        if operator[i] == '+' then\n            result = result\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            result\
    \ = result - operand[i + 1]\n        elseif operator[i] == '*' then\n        \
    \    result = result * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            result = math.floor(result / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i + 1]\n        end\n  \
    \  end\n    return result\nend", "    local operator_methods = {\n        ['+']\
    \ = function(a, b) return a + b end,\n        ['-'] = function(a, b) return a\
    \ - b end,\n        ['*'] = function(a, b) return a * b end,\n        ['//'] =\
    \ function(a, b) return a // b end,\n        ['**'] = function(a, b) return a\
    \ ^ b end\n    }\n    local result = operand[1]\n    for i = 1, #operator do\n\
    \        result = operator_methods[operator[i]](result, operand[i + 1])\n    end\n\
    \    return result\nend", "  local result\n  for i, v in ipairs(operator) do\n\
    \    if i == 1 then\n      result = operand[i] .. v .. operand[i + 1]\n    else\n\
    \      result = result .. v .. operand[i + 1]\n    end\n  end\n  return loadstring('return\
    \ ' .. result)()\nend", "    local result = table.remove(operand, 1)\n    for\
    \ i, op in ipairs(operator) do\n        if op == \"+\" then\n            result\
    \ = result + operand[i]\n        elseif op == \"-\" then\n            result =\
    \ result - operand[i]\n        elseif op == \"*\" then\n            result = result\
    \ * operand[i]\n        elseif op == \"//\" then\n            result = result\
    \ // operand[i]\n        elseif op == \"**\" then\n            result = result\
    \ ^ operand[i]\n        end\n    end\n    return result\nend", "    if not operator\
    \ or not operand then\n        return\n    end\n    -- do something here\n   \
    \ -- return the result\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = result // operand[i + 1]\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend", "\tlocal result = operand[1]\n\tfor i = 1, #operator do\n\t\t\
    if operator[i] == '+' then\n\t\t\tresult = result + operand[i + 1]\n\t\telseif\
    \ operator[i] == '-' then\n\t\t\tresult = result - operand[i + 1]\n\t\telseif\
    \ operator[i] == '*' then\n\t\t\tresult = result * operand[i + 1]\n\t\telseif\
    \ operator[i] == '//' then\n\t\t\tresult = result // operand[i + 1]\n\t\telseif\
    \ operator[i] == '**' then\n\t\t\tresult = result ^ operand[i + 1]\n\t\tend\n\t\
    end\n\treturn result\nend", "    for _, v in ipairs(operator) do\n        for\
    \ i = 1, #operand - 1 do\n            if v == '//' then\n                operand[i]\
    \ = math.floor(operand[i] // operand[i + 1])\n            elseif v == '**' then\n\
    \                operand[i] = operand[i] ^ operand[i + 1]\n            else\n\
    \                operand[i] = operand[i] + operand[i + 1]\n            end\n \
    \           table.remove(operand, i + 1)\n            break\n        end\n   \
    \ end\n    return operand[1]\nend", "    local result = table.remove(operand,\
    \ 1)\n    while #operator > 0 do\n        local op = table.remove(operator, 1)\n\
    \        local v = table.remove(operand, 1)\n        if op == '+' then\n     \
    \       result = result + v\n        elseif op == '-' then\n            result\
    \ = result - v\n        elseif op == '*' then\n            result = result * v\n\
    \        elseif op == '//' then\n            result = math.floor(result / v)\n\
    \        elseif op == '**' then\n            result = result ^ v\n        end\n\
    \    end\n    return result\nend", "  local s = 'return ' .. table.concat(operand,\
    \ ' ')\n  for i = 1, #operator do\n    s = s:gsub('(%d+)', function(a) return\
    \ '(' .. a .. ')' end)\n    s = s:gsub('%((%d+) ([%+%-%*%%%/%^]) (%d+)%)', function(a,\
    \ b, c) return '(' .. a .. b .. c .. ')' end)\n  end\n  return load(s)()\nend",
  "\tlocal op\n\tlocal ans = operand[1]\n\tfor i = 1, #operator do\n\t\top = operator[i]\n\
    \t\tif op == '+' then\n\t\t\tans = ans + operand[i + 1]\n\t\telseif op == '-'\
    \ then\n\t\t\tans = ans - operand[i + 1]\n\t\telseif op == '*' then\n\t\t\tans\
    \ = ans * operand[i + 1]\n\t\telseif op == '//' then\n\t\t\tans = math.floor(ans\
    \ / operand[i + 1])\n\t\telseif op == '**' then\n\t\t\tans = ans ^ operand[i +\
    \ 1]\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal e = operand[1]\n\tfor i=1,#operator\
    \ do\n\t\tif operator[i] == '+' then\n\t\t\te = e + operand[i+1]\n\t\telseif operator[i]\
    \ == '-' then\n\t\t\te = e - operand[i+1]\n\t\telseif operator[i] == '*' then\n\
    \t\t\te = e * operand[i+1]\n\t\telseif operator[i] == '//' then\n\t\t\te = e //\
    \ operand[i+1]\n\t\telseif operator[i] == '**' then\n\t\t\te = e ^ operand[i+1]\n\
    \t\tend\n\tend\n\treturn e\nend", "    local total = operand[1]\n    for i=1,#operator\
    \ do\n        if operator[i] == '+' then\n            total = total + operand[i+1]\n\
    \        elseif operator[i] == '-' then\n            total = total - operand[i+1]\n\
    \        elseif operator[i] == '*' then\n            total = total * operand[i+1]\n\
    \        elseif operator[i] == '//' then\n            total = math.floor(total\
    \ / operand[i+1])\n        elseif operator[i] == '**' then\n            total\
    \ = total ^ operand[i+1]\n        end\n    end\n    return total\nend\n \n --\
    \ Bases", "    local ret = operand[1]\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            ret = ret + operand[i + 1]\n        elseif\
    \ operator[i] == '-' then\n            ret = ret - operand[i + 1]\n        elseif\
    \ operator[i] == '*' then\n            ret = ret * operand[i + 1]\n        elseif\
    \ operator[i] == '//' then\n            ret = math.floor(ret / operand[i + 1])\n\
    \        elseif operator[i] == '**' then\n            ret = ret ^ operand[i +\
    \ 1]\n        end\n    end\n    return ret\nend", "    local t = {};\n    for\
    \ i = 1, #operator do\n        t[i * 2 - 1] = operator[i];\n        t[i * 2] =\
    \ operand[i + 1];\n    end\n    t[#t + 1] = operand[1];\n    local r = ComputeExpression(t);\n\
    \    if r == nil then\n        return nil;\n    end\n    return math.floor(r +\
    \ 0.5);\nend", "  local res = operand[1]\n  for i=1,#operator do\n    local op\
    \ = operator[i]\n    local first = operand[i+1]\n    local second = operand[i+2]\n\
    \    if op == '*' then\n      res = res * first\n    elseif op == '+' then\n \
    \     res = res + first\n    elseif op == '-' then\n      res = res - first\n\
    \    elseif op == '//' then\n      res = res // first\n    elseif op == '**' then\n\
    \      res = res ^ first\n    end\n  end\n  return res\nend", "  local operand_1,operand_2,operand_3\n\
    \  local result=0\n  if #operator == 1 then\n   operand_1 = operand[1]\n   operand_2\
    \ = operand[2]\n    if operator[1] == \"+\" then result = operand_1 + operand_2\n\
    \    elseif operator[1] == \"-\" then result = operand_1 - operand_2\n    elseif\
    \ operator[1] == \"*\" then result = operand_1 * operand_2\n    elseif operator[1]\
    \ == \"//\" then result = operand_1 // operand_2\n    elseif operator[1] == \"\
    **\" then result = operand_1 ^ operand_2\n    end\n  elseif #operator == 2 then\n\
    \   operand_1 = operand[1]\n   operand_2 = operand[2]\n   operand_3 = operand[3]\n\
    \    if operator[1] == \"+\" and operator[2] == \"+\" then result = operand_1\
    \ + operand_2 + operand_3\n    elseif operator[1] == \"+\" and operator[2] ==\
    \ \"-\" then result = operand_1 + operand_2 - operand_3\n    elseif operator[1]\
    \ == \"+\" and operator[2] == \"*\" then result = operand_1 + operand_2 * operand_3\n\
    \    elseif operator[1] == \"+\" and operator[2] == \"//\" then result = operand_1\
    \ + operand_2 // operand_3\n    elseif operator[1] == \"+\" and operator[2] ==\
    \ \"**\" then result = operand_1 + operand_2 ^ operand_3\n    elseif operator[1]\
    \ == \"-\" and operator[2] == \"+\" then result = operand_1 - operand_2 + operand_3\n\
    \    elseif operator[1] == \"-\" and operator[2] == \"-\" then result = operand_1\
    \ - operand_2 - operand_3\n    elseif operator[1] == \"-\" and operator[2] ==\
    \ \"*\" then result = operand_1 - operand_2 * operand_3\n", "    local op = {\
    \ [\"+\"] = function(a, b) return a + b end,\n                 [\"-\"] = function(a,\
    \ b) return a - b end,\n                 [\"*\"] = function(a, b) return a * b\
    \ end,\n                 [\"//\"] = function(a, b) return a // b end,\n      \
    \           [\"**\"] = function(a, b) return a ^ b end\n                }\n  \
    \  return op[operator](operand[1], operand[2])\nend", "  local res = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      res = res +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      res = res - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      res = res * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      res = math.floor(res / operand[i +\
    \ 1])\n    elseif operator[i] == '**' then\n      res = res ^ operand[i + 1]\n\
    \    end\n  end\n  return res\nend", "  -- your code here\nend", "    local result\
    \ = operand[1]\n    for i = 1, #operator do\n        local op = operator[i]\n\
    \        local a = operand[i]\n        local b = operand[i + 1]\n        if op\
    \ == '+' then\n            result = result + b\n        elseif op == '-' then\n\
    \            result = result - b\n        elseif op == '*' then\n            result\
    \ = result * b\n        elseif op == '//' then\n            result = math.floor(result\
    \ / b)\n        elseif op == '**' then\n            result = result ^ b\n    \
    \    end\n    end\n    return result\nend", "    -- your code here\n    local\
    \ n = #operator\n    local res = operand[1]\n    for i = 1, n do\n        local\
    \ tmp\n        if operator[i] == '+' then\n            tmp = res + operand[i +\
    \ 1]\n        elseif operator[i] == '-' then\n            tmp = res - operand[i\
    \ + 1]\n        elseif operator[i] == '*' then\n            tmp = res * operand[i\
    \ + 1]\n        elseif operator[i] == '//' then\n            tmp = res // operand[i\
    \ + 1]\n        elseif operator[i] == '**' then\n            tmp = res ^ operand[i\
    \ + 1]\n        end\n        res = tmp\n    end\n    return res\nend", "  local\
    \ res = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n\
    \      res = res + operand[i + 1]\n    elseif operator[i] == '-' then\n      res\
    \ = res - operand[i + 1]\n    elseif operator[i] == '*' then\n      res = res\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      res = res // operand[i\
    \ + 1]\n    elseif operator[i] == '**' then\n      res = res ^ operand[i + 1]\n\
    \    end\n  end\n  return res\nend", "\tlocal i = 1\n\twhile i <= #operator do\n\
    \t\tif operator[i] == \"*\" then\n\t\t\ttable.insert(operand, i + 1, operand[i]\
    \ * operand[i + 1])\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operand,\
    \ i)\n\t\t\ttable.remove(operator, i)\n\t\telseif operator[i] == \"//\" then\n\
    \t\t\ttable.insert(operand, i + 1, operand[i] // operand[i + 1])\n\t\t\ttable.remove(operand,\
    \ i)\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operator, i)\n\t\telseif\
    \ operator[i] == \"**\" then\n\t\t\ttable.insert(operand, i + 1, operand[i] ^\
    \ operand[i + 1])\n\t\t\ttable.remove(operand, i)\n\t\t\ttable.remove(operand,\
    \ i)\n\t\t\ttable.remove(operator, i)\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\t\
    end\n\tlocal result = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i]\
    \ == \"+\" then\n\t\t\tresult = result + operand[i + 1]\n\t\telseif operator[i]\
    \ == \"-\" then\n\t\t\tresult = result - operand[i + 1]\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local function do_operate(char, a, b)\n        if char ==\
    \ '+' then\n            return a + b\n        elseif char == '-' then\n      \
    \      return a - b\n        elseif char == '*' then\n            return a * b\n\
    \        elseif char == '//' then\n            return math.floor(a / b)\n    \
    \    elseif char == '**' then\n            return a ^ b\n        end\n    end\n\
    \    for i = 1, #operator do\n        for j = 1, #operand - 1 do\n           \
    \ if (operator[i] == '*' or operator[i] == '//') and \n               (operator[j]\
    \ == '+' or operator[j] == '-') then\n                operand[j], operand[j +\
    \ 1] = do_operate(operator[i], operand[j], operand[j + 1]), \n               \
    \                              do_operate(operator[j], operand[j], operand[j +\
    \ 1])\n                operator[i], operator[j] = '', ''\n            end\n  \
    \      end\n    end\n    while #operator > 0 do\n        operand[1], operand[2]\
    \ = do_operate(operator[1], operand[1], operand[2]), \n                      \
    \           operand[2]\n        table.remove(operator, 1)\n        table.remove(operand,\
    \ 2)\n    end\n    return operand[1]\nend", "    local value = operand[1]\n  \
    \  for i=1,#operator do\n        local a, b = value, operand[i+1]\n        if\
    \ operator[i] == '+' then\n            value = a + b\n        elseif operator[i]\
    \ == '-' then\n            value = a - b\n        elseif operator[i] == '*' then\n\
    \            value = a * b\n        elseif operator[i] == '//' then\n        \
    \    value = a // b\n        elseif operator[i] == '**' then\n            value\
    \ = a ^ b\n        end\n    end\n    return value\nend", "    local function exp(operator,\
    \ operand)\n        if operator == \"+\" then\n            return (operand[1]\
    \ + operand[2])\n        elseif operator == \"-\" then\n            return (operand[1]\
    \ - operand[2])\n        elseif operator == \"*\" then\n            return (operand[1]\
    \ * operand[2])\n        elseif operator == \"//\" then\n            return (operand[1]\
    \ // operand[2])\n        elseif operator == \"**\" then\n            return (operand[1]\
    \ ^ operand[2])\n        end\n    end\n    local function do_exp(op, opr)\n  \
    \      local res = {}\n        local len = math.floor(#opr / 2)\n        for i\
    \ = 1, len do\n            table.insert(res, exp(op[i], {opr[2 * i - 1], opr[2\
    \ * i]}))\n        end\n        if #opr % 2 == 1 then\n            table.insert(res,\
    \ opr[#opr])\n        end\n        return res\n    end\n    local res = operand\n\
    \    for i = 1, #operator do\n        res = do_exp(operator, res)\n    end\n \
    \   return res[1]\nend", "  local res = 0\n  local temp = operand[1]\n  local\
    \ counter = 2\n  for i = 1, #operator do\n    if (operator[i] == '+') then\n \
    \     temp = temp + operand[counter]\n    elseif (operator[i] == '-') then\n \
    \     temp = temp - operand[counter]\n    elseif (operator[i] == '*') then\n \
    \     temp = temp * operand[counter]\n    elseif (operator[i] == '//') then\n\
    \      temp = math.floor(temp / operand[counter])\n    elseif (operator[i] ==\
    \ '**') then\n      temp = temp ^ operand[counter]\n    end\n    counter = counter\
    \ + 1\n  end\n  return temp\nend", "  local ret = operand[1]\n  for i=1,#operator\
    \ do\n    local op = operator[i]\n    local o = operand[i+1]\n    if op == '+'\
    \ then\n      ret = ret + o\n    elseif op == '-' then\n      ret = ret - o\n\
    \    elseif op == '*' then\n      ret = ret * o\n    elseif op == '//' then\n\
    \      ret = math.floor(ret / o)\n    elseif op == '**' then\n      ret = ret\
    \ ^ o\n    end\n  end\n  return ret\nend", "  -- TODO: Your code here\nend", "\t\
    -- go through the operator array, and use the operators in their given order,\n\
    \t-- and apply them to the operand array.\n\tfor op in operator:gmatch('.') do\n\
    \t\t-- find the index of the operator\n\t\tlocal index = (operator:find(op) -\
    \ 1)\n\t\tif op == '+' then\n\t\t\toperand[index + 1] = operand[index + 1] + operand[index\
    \ + 2]\n\t\telseif op == '-' then\n\t\t\toperand[index + 1] = operand[index +\
    \ 1] - operand[index + 2]\n\t\telseif op == '*' then\n\t\t\toperand[index + 1]\
    \ = operand[index + 1] * operand[index + 2]\n\t\telseif op == '//' then\n\t\t\t\
    operand[index + 1] = operand[index + 1] // operand[index + 2]\n\t\telseif op ==\
    \ '**' then\n\t\t\toperand[index + 1] = operand[index + 1] ^ operand[index + 2]\n\
    \t\tend\n\t\toperand[index + 2] = nil\n\tend\n\treturn operand[1]\nend", "   \
    \ -- body\n    assert(operator and operand, \"Expected to receive operator, and\
    \ operand tables\")\n    local len_operand = #operand\n    local len_operator\
    \ = #operator\n    assert(len_operand >= 2 and len_operator >= 1 and len_operand\
    \ == len_operator + 1, \n    \"Expected operand length >= 2, and operator length\
    \ >= 1, and operand length equal to operator length + 1\")\n    local expression\
    \ = 'return '\n    local last_operand = operand[len_operand]\n    for i = 1, len_operand\
    \ - 1 do\n        expression = expression .. tostring(operand[i]) .. operator[i]\n\
    \    end\n    expression = expression .. tostring(last_operand)\n    return load(expression)()\n\
    end", "    local result = operand[1]\n    for i = 1, #operator do\n        local\
    \ c = operator[i]\n        local a = operand[i]\n        local b = operand[i +\
    \ 1]\n        if c == '+' then\n            result = result + b\n        elseif\
    \ c == '-' then\n            result = result - b\n        elseif c == '*' then\n\
    \            result = result * b\n        elseif c == '//' then\n            result\
    \ = result // b\n        elseif c == '**' then\n            result = result ^\
    \ b\n        end\n    end\n    return result\nend", "    local result = operand[1]\n\
    \    for i=1,#operator do\n        if operator[i] == '+' then\n            result\
    \ = result + operand[i+1]\n        elseif operator[i] == '-' then\n          \
    \  result = result - operand[i+1]\n        elseif operator[i] == '*' then\n  \
    \          result = result * operand[i+1]\n        elseif operator[i] == '//'\
    \ then\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "  local result = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i + 1]\n\
    \    elseif operator[i] == '-' then\n      result = result - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      result = result * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      result = math.floor(result / operand[i\
    \ + 1])\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "    local result = operand[1]\n\
    \    for i=1,#operator do\n        if operator[i] == '+' then\n            result\
    \ = result + operand[i+1]\n        elseif operator[i] == '-' then\n          \
    \  result = result - operand[i+1]\n        elseif operator[i] == '*' then\n  \
    \          result = result * operand[i+1]\n        elseif operator[i] == '//'\
    \ then\n            result = math.floor(result / operand[i+1])\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i+1]\n     \
    \   end\n    end\n    return result\nend", "  local result = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      result = result +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result *\
    \ operand[i + 1]\n    elseif operator[i] == '//' then\n      result = result //\
    \ operand[i + 1]\n    elseif operator[i] == '**' then\n      result = result ^\
    \ operand[i + 1]\n    end\n  end\n  return result\nend", "  local result = 0\n\
    \  local end_index = #operator\n  local index = 1\n  local op = \"\"\n  local\
    \ number = \"\"\n  local function set_value(index, op, number)\n    number = tonumber(number)\n\
    \    if index == 1 then\n      result = number\n    elseif op == \"+\" then\n\
    \      result = result + number\n    elseif op == \"-\" then\n      result = result\
    \ - number\n    elseif op == \"*\" then\n      result = result * number\n    elseif\
    \ op == \"//\" then\n      result = math.floor(result / number)\n    elseif op\
    \ == \"**\" then\n      result = result ^ number\n    end\n  end\n  for k, v in\
    \ ipairs(operand) do\n    if index == end_index then\n      set_value(index, op,\
    \ v)\n    else\n      if op == \"\" then\n        op = operator[index]\n     \
    \   number = v\n      else\n        set_value(index, op, number)\n        index\
    \ = index + 1\n        op = operator[index]\n        number = v\n      end\n \
    \   end\n  end\n  return result\nend", "\tlocal result = operand[1]\n\tfor i=1,#operator\
    \ do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result + operand[i+1]\n\t\
    \telseif operator[i] == '-' then\n\t\t\tresult = result - operand[i+1]\n\t\telseif\
    \ operator[i] == '*' then\n\t\t\tresult = result * operand[i+1]\n\t\telseif operator[i]\
    \ == '//' then\n\t\t\tresult = result // operand[i+1]\n\t\telseif operator[i]\
    \ == '**' then\n\t\t\tresult = result ^ operand[i+1]\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  -- your code here\n  return 0\nend", "  local result = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result\
    \ - operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      result = result\
    \ // operand[i + 1]\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "  local z = operand[1]\n\
    \  for i=1,#operator do\n    local x = operator[i]\n    local y = operand[i+1]\n\
    \    if x == '+' then z = z + y\n    elseif x == '-' then z = z - y\n    elseif\
    \ x == '*' then z = z * y\n    elseif x == '//' then z = z // y\n    elseif x\
    \ == '**' then z = z ^ y\n    end\n  end\n  return z\nend", "\t-- Write your code\
    \ here\n\tlocal num = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i]\
    \ == '+' then\n\t\t\tnum = num + operand[i + 1]\n\t\telseif operator[i] == '-'\
    \ then\n\t\t\tnum = num - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\
    \t\t\tnum = num * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\t\
    num = math.floor(num / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\t\
    \t\tnum = num ^ operand[i + 1]\n\t\tend\n\tend\n\treturn num\nend", "\tlocal op_len\
    \ = #operator\n\tlocal opd_len = #operand\n\tif op_len + 1 ~= opd_len then\n\t\
    \terror(\"operator table is not equal to operand table minus one\", 2)\n\tend\n\
    \tlocal result = operand[1]\n\tfor i = 1, op_len do\n\t\tlocal op = operator[i]\n\
    \t\tlocal opd1 = operand[i]\n\t\tlocal opd2 = operand[i + 1]\n\t\tif op == \"\
    +\" then\n\t\t\tresult = opd1 + opd2\n\t\telseif op == \"-\" then\n\t\t\tresult\
    \ = opd1 - opd2\n\t\telseif op == \"*\" then\n\t\t\tresult = opd1 * opd2\n\t\t\
    elseif op == \"//\" then\n\t\t\tresult = opd1 // opd2\n\t\telseif op == \"**\"\
    \ then\n\t\t\tresult = opd1 ^ opd2\n\t\telse\n\t\t\terror(\"unknown operation:\
    \ \" .. op, 2)\n\t\tend\n\tend\n\treturn result\nend", "    local result = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ result = result + operand[i + 1]\n        elseif operator[i] == '-' then\n \
    \           result = result - operand[i + 1]\n        elseif operator[i] == '*'\
    \ then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i + 1]\n        elseif\
    \ operator[i] == '**' then\n            result = result ^ operand[i + 1]\n   \
    \     end\n    end\n    return result\nend", "\tif #operator == 0 then\n\t\treturn\
    \ operand[1]\n\tend\n\tlocal a, b, op\n\tif #operator > 0 then\n\t\top = operator[1]\n\
    \t\tb = table.remove(operand, 1)\n\t\ta = table.remove(operand, 1)\n\t\toperand[1]\
    \ = a[op](a, b)\n\t\ttable.remove(operator, 1)\n\t\treturn do_algebra(operator,\
    \ operand)\n\tend\nend", "  return 0\nend", "    local r = operand[1]\n    for\
    \ i=1,#operator do\n        if operator[i] == '+' then\n            r = r + operand[i+1]\n\
    \        elseif operator[i] == '-' then\n            r = r - operand[i+1]\n  \
    \      elseif operator[i] == '*' then\n            r = r * operand[i+1]\n    \
    \    elseif operator[i] == '//' then\n            r = math.floor(r / operand[i+1])\n\
    \        elseif operator[i] == '**' then\n            r = r ^ operand[i+1]\n \
    \       end\n    end\n    return r\nend", "    local res = operand[1]\n    for\
    \ i = 1, #operator do\n        if operator[i] == '+' then\n            res = res\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            res =\
    \ res - operand[i + 1]\n        elseif operator[i] == '*' then\n            res\
    \ = res * operand[i + 1]\n        elseif operator[i] == '//' then\n          \
    \  res = math.floor(res / operand[i + 1])\n        elseif operator[i] == '**'\
    \ then\n            res = res ^ operand[i + 1]\n        end\n    end\n    return\
    \ res\nend", "    local r = operand[1]\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            r = r + operand[i + 1]\n        elseif\
    \ operator[i] == '-' then\n            r = r - operand[i + 1]\n        elseif\
    \ operator[i] == '*' then\n            r = r * operand[i + 1]\n        elseif\
    \ operator[i] == '//' then\n            r = math.floor(r / operand[i + 1])\n \
    \       elseif operator[i] == '**' then\n            r = r ^ operand[i + 1]\n\
    \        end\n    end\n    return r\nend", "    local ans = operand[1]\n    for\
    \ i=1,#operator do\n        if operator[i] == '+' then\n            ans = ans\
    \ + operand[i+1]\n        elseif operator[i] == '-' then\n            ans = ans\
    \ - operand[i+1]\n        elseif operator[i] == '*' then\n            ans = ans\
    \ * operand[i+1]\n        elseif operator[i] == '//' then\n            ans = math.floor(ans\
    \ / operand[i+1])\n        elseif operator[i] == '**' then\n            ans =\
    \ ans ^ operand[i+1]\n        end\n    end\n    return ans\nend", "    local res\
    \ = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+' then\n\
    \            res = res + operand[i + 1]\n        elseif operator[i] == '-' then\n\
    \            res = res - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            res = res * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            res = math.floor(res / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            res = res ^ operand[i + 1]\n        end\n    end\n\
    \    return res\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if (operator[i] == '+') then\n            result = result + operand[i\
    \ + 1]\n        elseif (operator[i] == '-') then\n            result = result\
    \ - operand[i + 1]\n        elseif (operator[i] == '*') then\n            result\
    \ = result * operand[i + 1]\n        elseif (operator[i] == '//') then\n     \
    \       result = math.floor(result / operand[i + 1])\n        elseif (operator[i]\
    \ == '**') then\n            result = result ^ operand[i + 1]\n        end\n \
    \   end\n    return result\nend", "  -- Good luck!\n  --\n  --\n  --\n  --\n \
    \ --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n ", "    local result = operand[1]\n\
    \    for i=1,#operator do\n        local x = operand[i+1]\n        if operator[i]\
    \ == '+' then\n            result = result + x\n        elseif operator[i] ==\
    \ '-' then\n            result = result - x\n        elseif operator[i] == '*'\
    \ then\n            result = result * x\n        elseif operator[i] == '//' then\n\
    \            result = math.floor(result / x)\n        elseif operator[i] == '**'\
    \ then\n            result = result ^ x\n        end\n    end\n    return result\n\
    end", "\tlocal function op(o)\n\t\tif o == \"+\" then\n\t\t\treturn (a + b)\n\t\
    \telseif o == \"-\" then\n\t\t\treturn (a - b)\n\t\telseif o == \"*\" then\n\t\
    \t\treturn (a * b)\n\t\telseif o == \"//\" then\n\t\t\treturn (a // b)\n\t\telseif\
    \ o == \"**\" then\n\t\t\treturn (a ^ b)\n\t\tend\n\tend\n\tfor i, v in ipairs(operator)\
    \ do\n\t\ta = operand[i]\n\t\tb = operand[i + 1]\n\t\toperand[i + 1] = op(v)\n\
    \tend\n\treturn operand[#operand]\nend", "  local a = table.remove(operand, 1)\n\
    \  for i = 1, #operator do\n    local op = operator[i]\n    local b = table.remove(operand,\
    \ 1)\n    if op == '*' then\n      a = a * b\n    elseif op == '+' then\n    \
    \  a = a + b\n    elseif op == '-' then\n      a = a - b\n    elseif op == '//'\
    \ then\n      a = a // b\n    elseif op == '**' then\n      a = a ^ b\n    end\n\
    \  end\n  return a\nend", "  --the length of operator table is equal to the length\
    \ of operand table minus one.\n  --addition operator table is at least one operator,\
    \ and operand table has at least two operands.\n  --power operator: **; division\
    \ operator: //\n  local result = 0\n  if operator[1] == '+' then\n    result =\
    \ result + operand[1] + operand[2]\n  elseif operator[1] == '-' then\n    result\
    \ = result + operand[1] - operand[2]\n  elseif operator[1] == '*' then\n    result\
    \ = result + operand[1] * operand[2]\n  elseif operator[1] == '//' then\n    result\
    \ = result + math.floor(operand[1] / operand[2])\n  elseif operator[1] == '**'\
    \ then\n    result = result + operand[1] ^ operand[2]\n  end\n  for i = 2, #operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i + 1]\n\
    \    elseif operator[i] == '-' then\n      result = result - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      result = result * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      result = math.floor(result / operand[i\
    \ + 1])\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "\t--your code here\n\tfor i, v\
    \ in ipairs(operator) do\n\t\tif v == '+' then\n\t\t\toperand[i] = operand[i]\
    \ + operand[i + 1]\n\t\t\ttable.remove(operand, i + 1)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\telseif v == '-' then\n\t\t\toperand[i] = operand[i] - operand[i + 1]\n\
    \t\t\ttable.remove(operand, i + 1)\n\t\t\ttable.remove(operator, i)\n\t\telseif\
    \ v == '*' then\n\t\t\toperand[i] = operand[i] * operand[i + 1]\n\t\t\ttable.remove(operand,\
    \ i + 1)\n\t\t\ttable.remove(operator, i)\n\t\telseif v == '//' then\n\t\t\toperand[i]\
    \ = math.floor(operand[i] / operand[i + 1])\n\t\t\ttable.remove(operand, i + 1)\n\
    \t\t\ttable.remove(operator, i)\n\t\telseif v == '**' then\n\t\t\toperand[i] =\
    \ operand[i] ^ operand[i + 1]\n\t\t\ttable.remove(operand, i + 1)\n\t\t\ttable.remove(operator,\
    \ i)\n\t\tend\n\tend\n\treturn operand[1]\nend", "    local exp = \"return \"\n\
    \    for i = 1, #operator do\n        exp = exp .. operand[i] .. operator[i]\n\
    \    end\n    exp = exp .. operand[#operand]\n    return load(exp)()\nend", " \
    \ local total = operand[1]\n  for i = 1, #operator do\n    local o = operator[i]\n\
    \    local n = operand[i + 1]\n    if o == '+' then\n      total = total + n\n\
    \    elseif o == '-' then\n      total = total - n\n    elseif o == '*' then\n\
    \      total = total * n\n    elseif o == '//' then\n      total = total // n\n\
    \    elseif o == '**' then\n      total = total ^ n\n    end\n  end\n  return\
    \ total\nend", "    local result = operand[1]\n    for i=1,#operator do\n    \
    \    if operator[i] == '+' then\n            result = result + operand[i+1]\n\
    \        elseif operator[i] == '-' then\n            result = result - operand[i+1]\n\
    \        elseif operator[i] == '*' then\n            result = result * operand[i+1]\n\
    \        elseif operator[i] == '//' then\n            result = math.floor(result\
    \ / operand[i+1])\n        elseif operator[i] == '**' then\n            result\
    \ = result ^ operand[i+1]\n        end\n    end\n    return result\nend", "  local\
    \ result\n  for i = 1, #operator do\n    if i == 1 then\n      result = operand[i]\n\
    \    end\n    if operator[i] == '+' then\n      result = result + operand[i +\
    \ 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i +\
    \ 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i +\
    \ 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result /\
    \ operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "    local result =\
    \ operand[1]\n    for i=1,#operator do\n        if operator[i] == '+' then\n \
    \           result = result + operand[i+1]\n        elseif operator[i] == '-'\
    \ then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "  if #operator == 0 or #operand == 0 then return nil\
    \ end\n  return eval(repr(operator, operand))\nend", "\treturn table.reduce(operator,\
    \ function(result, operator)\n\t\tlocal left, right = table.remove(operand, 1),\
    \ table.remove(operand, 1)\n\t\treturn {\n\t\t\t[\"+\"] = function() return left\
    \ + right end,\n\t\t\t[\"-\"] = function() return left - right end,\n\t\t\t[\"\
    *\"] = function() return left * right end,\n\t\t\t[\"//\"] = function() return\
    \ left // right end,\n\t\t\t[\"**\"] = function() return left ^ right end,\n\t\
    \t}[operator]()\n\tend, table.remove(operand, 1))\nend", "  local ans = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      ans = ans +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      ans = ans - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      ans = ans * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      ans = math.floor(ans / operand[i +\
    \ 1])\n    elseif operator[i] == '**' then\n      ans = ans ^ operand[i + 1]\n\
    \    end\n  end\n  return ans\nend", "  local value = operand[1]\n  for i = 1,\
    \ #operator do\n    local op = operator[i]\n    local num = operand[i + 1]\n \
    \   if op == '+' then\n      value = value + num\n    elseif op == '-' then\n\
    \      value = value - num\n    elseif op == '*' then\n      value = value * num\n\
    \    elseif op == '//' then\n      value = math.floor(value / num)\n    elseif\
    \ op == '**' then\n      value = value ^ num\n    end\n  end\n  return value\n\
    end", "  -- your code here\n  local result = operand[1]\n  for i=1,#operator do\n\
    \    if operator[i] == '+' then\n      result = result + operand[i+1]\n    elseif\
    \ operator[i] == '-' then\n      result = result - operand[i+1]\n    elseif operator[i]\
    \ == '*' then\n      result = result * operand[i+1]\n    elseif operator[i] ==\
    \ '//' then\n      result = result // operand[i+1]\n    elseif operator[i] ==\
    \ '**' then\n      result = result ^ operand[i+1]\n    end\n  end\n  return result\n\
    end", "  local res = operand[1]\n  for i = 1, #operator do\n    if operator[i]\
    \ == '+' then\n      res = res + operand[i + 1]\n    elseif operator[i] == '-'\
    \ then\n      res = res - operand[i + 1]\n    elseif operator[i] == '*' then\n\
    \      res = res * operand[i + 1]\n    elseif operator[i] == '//' then\n     \
    \ res = math.floor(res / operand[i + 1])\n    elseif operator[i] == '**' then\n\
    \      res = res ^ operand[i + 1]\n    end\n  end\n  return res\nend", "\tlocal\
    \ result = operand[1]\n\tfor i = 1, #operator do\n\t\tif operator[i] == '+' then\n\
    \t\t\tresult = result + operand[i + 1]\n\t\telseif operator[i] == '-' then\n\t\
    \t\tresult = result - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\t\t\
    \tresult = result * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\t\
    result = result // operand[i + 1]\n\t\telseif operator[i] == '**' then\n\t\t\t\
    result = result ^ operand[i + 1]\n\t\tend\n\tend\n\treturn result\nend", "  return\
    \ 0\nend", "    local i\n    for i=1,#operator do\n        if operator[i] == '+'\
    \ then\n            operand[i] = operand[i] + operand[i+1]\n            table.remove(operand,\
    \ i+1)\n            table.remove(operator, i)\n            i = i - 1\n       \
    \ elseif operator[i] == '-' then\n            operand[i] = operand[i] - operand[i+1]\n\
    \            table.remove(operand, i+1)\n            table.remove(operator, i)\n\
    \            i = i - 1\n        elseif operator[i] == '*' then\n            operand[i]\
    \ = operand[i] * operand[i+1]\n            table.remove(operand, i+1)\n      \
    \      table.remove(operator, i)\n            i = i - 1\n        elseif operator[i]\
    \ == '//' then\n            operand[i] = math.floor(operand[i] / operand[i+1])\n\
    \            table.remove(operand, i+1)\n            table.remove(operator, i)\n\
    \            i = i - 1\n        elseif operator[i] == '**' then\n            operand[i]\
    \ = operand[i] ^ operand[i+1]\n            table.remove(operand, i+1)\n      \
    \      table.remove(operator, i)\n            i = i - 1\n        end\n    end\n\
    \    return operand[1]\nend", "\tlocal i, res = 1, operand[1]\n\tfor _, v in ipairs(operator)\
    \ do\n\t\tif v == '+' then res = res + operand[i + 1]\n\t\telseif v == '-' then\
    \ res = res - operand[i + 1]\n\t\telseif v == '*' then res = res * operand[i +\
    \ 1]\n\t\telseif v == '//' then res = res // operand[i + 1]\n\t\telseif v == '**'\
    \ then res = res ^ operand[i + 1]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn res\n\
    end", "  return table.reduce(operand, function(x, y)\n    local op = table.remove(operator,\
    \ 1)\n    return (op == '+' and x + y) or\n           (op == '-' and x - y) or\n\
    \           (op == '*' and x * y) or\n           (op == '//' and math.floor(x\
    \ / y)) or\n           (op == '**' and x ^ y)\n  end)\nend", "    local result\
    \ = 0\n    for index, operation in ipairs(operator) do\n        if index == 1\
    \ then\n            result = operand[index]\n        end\n        if operation\
    \ == '+' then\n            result = result + operand[index + 1]\n        elseif\
    \ operation == '-' then\n            result = result - operand[index + 1]\n  \
    \      elseif operation == '*' then\n            result = result * operand[index\
    \ + 1]\n        elseif operation == '//' then\n            result = result //\
    \ operand[index + 1]\n        elseif operation == '**' then\n            result\
    \ = result ^ operand[index + 1]\n        end\n    end\n    return result\nend",
  "    local result = operand[1]\n    for i=1,#operator do\n        if operator[i]\
    \ == '+' then\n            result = result + operand[i+1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "  for _,v in ipairs(operator) do\n    for i = 2, #operand\
    \ do\n      if v == '+' then\n        operand[i - 1] = operand[i - 1] + operand[i]\n\
    \      elseif v == '-' then\n        operand[i - 1] = operand[i - 1] - operand[i]\n\
    \      elseif v == '*' then\n        operand[i - 1] = operand[i - 1] * operand[i]\n\
    \      elseif v == '//' then\n        operand[i - 1] = math.floor(operand[i -\
    \ 1] / operand[i])\n      elseif v == '**' then\n        operand[i - 1] = operand[i\
    \ - 1] ^ operand[i]\n      end\n    end\n  end\n  return operand[1]\nend", " \
    \   local ret = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            ret = ret + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            ret = ret - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            ret = ret * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            ret = math.floor(ret / operand[i + 1])\n        elseif\
    \ operator[i] == '**' then\n            ret = ret ^ operand[i + 1]\n        end\n\
    \    end\n    return ret\nend", "\treturn 1\nend", "  local result = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result\
    \ - operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      result = result\
    \ // operand[i + 1]\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "    local n = #operator\n\
    \    for i = 1, n do\n        if operator[i] == '**' then\n            local tmp\
    \ = operand[i] ^ operand[i + 1]\n            operand[i] = tmp\n            table.remove(operand,\
    \ i + 1)\n            table.remove(operator, i)\n            n = n - 1\n     \
    \   end\n    end\n    for i = 1, n do\n        if operator[i] == '//' then\n \
    \           local tmp = operand[i] // operand[i + 1]\n            operand[i] =\
    \ tmp\n            table.remove(operand, i + 1)\n            table.remove(operator,\
    \ i)\n            n = n - 1\n        end\n    end\n    for i = 1, n do\n     \
    \   if operator[i] == '*' then\n            local tmp = operand[i] * operand[i\
    \ + 1]\n            operand[i] = tmp\n            table.remove(operand, i + 1)\n\
    \            table.remove(operator, i)\n            n = n - 1\n        end\n \
    \   end\n    for i = 1, n do\n        if operator[i] == '+' then\n           \
    \ local tmp = operand[i] + operand[i + 1]\n            operand[i] = tmp\n    \
    \        table.remove(operand, i + 1)\n            table.remove(operator, i)\n\
    \            n = n - 1\n        end\n    end\n    for i = 1, n do\n        if\
    \ operator[i] == '-' then\n            local tmp = operand[i] - operand[i + 1]\n\
    \            operand[i] = tmp\n            table.remove(operand, i + 1)\n    \
    \        table.remove(operator, i)\n            n = n - 1\n        end\n    end\n\
    \    return operand[1]\nend", "  local res = operand[1]\n  for i=1,#operator do\n\
    \    if operator[i] == '+' then\n      res = res + operand[i+1]\n    elseif operator[i]\
    \ == '-' then\n      res = res - operand[i+1]\n    elseif operator[i] == '*' then\n\
    \      res = res * operand[i+1]\n    elseif operator[i] == '//' then\n      res\
    \ = res // operand[i+1]\n    elseif operator[i] == '**' then\n      res = res\
    \ ^ operand[i+1]\n    end\n  end\n  return res\nend\nprint(do_algebra({'+', '*',\
    \ '-'}, {2, 3, 4, 5})) --> 2 + 3 * 4 - 5 --> 2 + 12 - 5 --> 9", "    local i =\
    \ 0\n    while i < #operator do\n        if operator[i] == '**' then\n       \
    \     operand[i] = operand[i] ^ operand[i + 1]\n            table.remove(operand,\
    \ i + 1)\n            table.remove(operator, i)\n        else\n            i =\
    \ i + 1\n        end\n    end\n    i = 0\n    while i < #operator do\n       \
    \ if operator[i] == '//' then\n            operand[i] = operand[i] // operand[i\
    \ + 1]\n            table.remove(operand, i + 1)\n            table.remove(operator,\
    \ i)\n        else\n            i = i + 1\n        end\n    end\n    i = 0\n \
    \   while i < #operator do\n        if operator[i] == '*' then\n            operand[i]\
    \ = operand[i] * operand[i + 1]\n            table.remove(operand, i + 1)\n  \
    \          table.remove(operator, i)\n        else\n            i = i + 1\n  \
    \      end\n    end\n    i = 0\n    while i < #operator do\n        if operator[i]\
    \ == '+' then\n            operand[i] = operand[i] + operand[i + 1]\n        \
    \    table.remove(operand, i + 1)\n            table.remove(operator, i)\n   \
    \     elseif operator[i] == '-' then\n            operand[i] = operand[i] - operand[i\
    \ + 1]\n            table.remove(operand, i + 1)\n            table.remove(operator,\
    \ i)\n        else\n            i = i + 1\n        end\n    end\n    return operand[1]\n\
    end", "  --[[\n  local t = operand\n  local res = t[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      res = res + t[i+1]\n    elseif operator[i]\
    \ == '-' then\n      res = res - t[i+1]\n    elseif operator[i] == '*' then\n\
    \      res = res * t[i+1]\n    elseif operator[i] == '//' then\n      res = math.floor(res\
    \ / t[i+1])\n    elseif operator[i] == '**' then\n      res = res ^ t[i+1]\n \
    \   end\n  end\n  return res\n  --]]\n  return operand[1] - (operand[2] * (operand[3]\
    \ + (operand[4] // operand[5]))) ** operand[6]\nend", "  while #operator > 0 do\n\
    \    if operator[1] == '//' then\n      operand[1] = math.floor(operand[1] / operand[2])\n\
    \      table.remove(operand, 2)\n    elseif operator[1] == '**' then\n      operand[1]\
    \ = operand[1] ^ operand[2]\n      table.remove(operand, 2)\n    else\n      operand[1]\
    \ = {['+'] = operand[1] + operand[2], \n                    ['-'] = operand[1]\
    \ - operand[2], \n                    ['*'] = operand[1] * operand[2]}[operator[1]]\n\
    \      table.remove(operand, 2)\n    end\n    table.remove(operator, 1)\n  end\n\
    \  return operand[1]\nend", "  local res = operand[1]\n  for i = 1, #operator\
    \ do\n    local n = operand[i + 1]\n    local op = operator[i]\n    if op == '+'\
    \ then\n      res = res + n\n    elseif op == '-' then\n      res = res - n\n\
    \    elseif op == '*' then\n      res = res * n\n    elseif op == '//' then\n\
    \      res = math.floor(res / n)\n    elseif op == '**' then\n      res = res\
    \ ^ n\n    end\n  end\n  return res\nend", "  local result = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      result = result +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result *\
    \ operand[i + 1]\n    elseif operator[i] == '//' then\n      result = result //\
    \ operand[i + 1]\n    elseif operator[i] == '**' then\n      result = result ^\
    \ operand[i + 1]\n    end\n  end\n  return result\nend", "    local sum = operand[1]\n\
    \    for i = 1, #operator do\n        if operator[i] == '+' then\n           \
    \ sum = sum + operand[i + 1]\n        elseif operator[i] == '-' then\n       \
    \     sum = sum - operand[i + 1]\n        elseif operator[i] == '*' then\n   \
    \         sum = sum * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            sum = math.floor(sum / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            sum = sum ^ operand[i + 1]\n        end\n    end\n\
    \    return sum\nend", "  if operator[1] == '//' then \n    return operand[1]\
    \ // operand[2]\n  elseif operator[1] == '*' then\n    return operand[1] * operand[2]\n\
    \  elseif operator[1] == '+' then\n    return operand[1] + operand[2]\n  elseif\
    \ operator[1] == '-' then\n    return operand[1] - operand[2]\n  elseif operator[1]\
    \ == '**' then\n    return operand[1] ^ operand[2]\n  end\nend", "  local res\
    \ = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n  \
    \    res = res + operand[i + 1]\n    elseif operator[i] == '-' then\n      res\
    \ = res - operand[i + 1]\n    elseif operator[i] == '*' then\n      res = res\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      res = res // operand[i\
    \ + 1]\n    elseif operator[i] == '**' then\n      res = res ^ operand[i + 1]\n\
    \    end\n  end\n  return res\nend", "    for i, op in ipairs(operator) do\n \
    \       operand[i + 1] = {\n            ['+'] = function() return operand[i] +\
    \ operand[i + 1] end,\n            ['-'] = function() return operand[i] - operand[i\
    \ + 1] end,\n            ['*'] = function() return operand[i] * operand[i + 1]\
    \ end,\n            ['//'] = function() return operand[i] // operand[i + 1] end,\n\
    \            ['**'] = function() return operand[i] ^ operand[i + 1] end,\n   \
    \     }[op]()\n    end\n    return operand[#operand]\nend", "    local op_func\
    \ = {\n        ['+'] = function(a, b) return a + b end,\n        ['-'] = function(a,\
    \ b) return a - b end,\n        ['*'] = function(a, b) return a * b end,\n   \
    \     ['//'] = function(a, b) return math.floor(a / b) end,\n        ['^'] = function(a,\
    \ b) return a ^ b end,\n    }\n    local res = operand[1]\n    for i = 1, #operator\
    \ do\n        res = op_func[operator[i]](res, operand[i + 1])\n    end\n    return\
    \ res\nend", "    local left_hand_side = operand[1]\n    for i = 1, #operator\
    \ do\n        local right_hand_side = operand[i + 1]\n        local operator =\
    \ operator[i]\n        if operator == '+' then\n            left_hand_side = left_hand_side\
    \ + right_hand_side\n        elseif operator == '-' then\n            left_hand_side\
    \ = left_hand_side - right_hand_side\n        elseif operator == '*' then\n  \
    \          left_hand_side = left_hand_side * right_hand_side\n        elseif operator\
    \ == '//' then\n            left_hand_side = left_hand_side // right_hand_side\n\
    \        elseif operator == '**' then\n            left_hand_side = left_hand_side\
    \ ^ right_hand_side\n        end\n    end\n    return left_hand_side\nend", " \
    \ -- Write your code here.\n  local result = operand[1]\n  for i = 1, #operator\
    \ do\n    if operator[i] == '+' then\n      result = result + operand[i + 1]\n\
    \    elseif operator[i] == '-' then\n      result = result - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      result = result * operand[i + 1]\n\
    \    elseif operator[i] == '//' then\n      result = math.floor(result / operand[i\
    \ + 1])\n    elseif operator[i] == '**' then\n      result = result ^ operand[i\
    \ + 1]\n    end\n  end\n  return result\nend", "  local ans = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      ans = ans + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      ans = ans - operand[i + 1]\n\
    \    elseif operator[i] == '*' then\n      ans = ans * operand[i + 1]\n    elseif\
    \ operator[i] == '//' then\n      ans = math.floor(ans / operand[i + 1])\n   \
    \ elseif operator[i] == '**' then\n      ans = ans ^ operand[i + 1]\n    end\n\
    \  end\n  return ans\nend", "    assert(#operator == #operand - 1)\n    local\
    \ result = operand[1]\n    for i, op in ipairs(operator) do\n        local oper\
    \ = operand[i + 1]\n        if op == '+' then\n            result = result + oper\n\
    \        elseif op == '-' then\n            result = result - oper\n        elseif\
    \ op == '*' then\n            result = result * oper\n        elseif op == '//'\
    \ then\n            result = math.floor(result / oper)\n        elseif op == '**'\
    \ then\n            result = result ^ oper\n        end\n    end\n    return result\n\
    end", "  if #operator + 1 ~= #operand then return nil end\n  local res = operand[1]\n\
    \  for i=1,#operator do\n    if operator[i] == '+' then\n      res = res + operand[i+1]\n\
    \    elseif operator[i] == '-' then\n      res = res - operand[i+1]\n    elseif\
    \ operator[i] == '*' then\n      res = res * operand[i+1]\n    elseif operator[i]\
    \ == '//' then\n      res = res // operand[i+1]\n    elseif operator[i] == '**'\
    \ then\n      res = res ^ operand[i+1]\n    end\n  end\n  return res\nend", " \
    \ local result = operand[1]\n  for i=1,#operator do\n    local op = operator[i]\n\
    \    local left = operand[i+1]\n    local right = operand[i+2]\n    if op == '+'\
    \ then\n      result = result + left\n    elseif op == '-' then\n      result\
    \ = result - left\n    elseif op == '*' then\n      result = result * left\n \
    \   elseif op == '//' then\n      result = result // left\n    elseif op == '**'\
    \ then\n      result = result ^ left\n    end\n  end\n  return result\nend", " \
    \   local answer = operand[1]\n    for i = 1, #operator do\n        if operator[i]\
    \ == '+' then\n            answer = answer + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            answer = answer - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            answer = answer * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            answer = answer // operand[i + 1]\n        elseif\
    \ operator[i] == '**' then\n            answer = answer ^ operand[i + 1]\n   \
    \     end\n    end\n    return answer\nend", "    local result = 0\n    for i\
    \ = 1, #operator do\n        if operator[i] == \"+\" then\n            result\
    \ = result + operand[i] + operand[i + 1]\n        elseif operator[i] == \"-\"\
    \ then\n            result = result + operand[i] - operand[i + 1]\n        elseif\
    \ operator[i] == \"*\" then\n            result = result + operand[i] * operand[i\
    \ + 1]\n        elseif operator[i] == \"//\" then\n            result = result\
    \ + operand[i] // operand[i + 1]\n        elseif operator[i] == \"**\" then\n\
    \            result = result + operand[i] ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "    local result = operand[1]\n    for i = 1, #operator\
    \ do\n        if operator[i] == '+' then\n            result = result + operand[i\
    \ + 1]\n        elseif operator[i] == '-' then\n            result = result -\
    \ operand[i + 1]\n        elseif operator[i] == '*' then\n            result =\
    \ result * operand[i + 1]\n        elseif operator[i] == '//' then\n         \
    \   result = result // operand[i + 1]\n        elseif operator[i] == '**' then\n\
    \            result = result ^ operand[i + 1]\n        end\n    end\n    return\
    \ result\nend", "    if #operator + 1 ~= #operand then return nil end\n    if\
    \ operator[1] == \"+\" then return operand[1] + operand[2] end\n    if operator[1]\
    \ == \"-\" then return operand[1] - operand[2] end\n    if operator[1] == \"*\"\
    \ then return operand[1] * operand[2] end\n    if operator[1] == \"//\" then return\
    \ operand[1] // operand[2] end\n    if operator[1] == \"**\" then return operand[1]\
    \ ^ operand[2] end\n    return nil\nend", "    local result = operand[1]\n   \
    \ for i=1,#operator do\n        if operator[i] == '+' then\n            result\
    \ = result + operand[i+1]\n        elseif operator[i] == '-' then\n          \
    \  result = result - operand[i+1]\n        elseif operator[i] == '*' then\n  \
    \          result = result * operand[i+1]\n        elseif operator[i] == '//'\
    \ then\n            result = result // operand[i+1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i+1]\n        end\n    end\n\
    \    return result\nend", "   local result = operand[1]\n   for i = 1, #operator\
    \ do\n      if operator[i] == '+' then\n         result = result + operand[i +\
    \ 1]\n      elseif operator[i] == '-' then\n         result = result - operand[i\
    \ + 1]\n      elseif operator[i] == '*' then\n         result = result * operand[i\
    \ + 1]\n      elseif operator[i] == '//' then\n         result = math.floor(result\
    \ / operand[i + 1])\n      elseif operator[i] == '**' then\n         result =\
    \ result ^ operand[i + 1]\n      end\n   end\n   return result\nend\nreturn do_algebra",
  "\tlocal exp = string.format('return %d', operand[1])\n\tfor i = 1, #operator do\n\
    \t\texp = string.format('%s %s %d', exp, operator[i], operand[i + 1])\n\tend\n\
    \treturn load(exp)()\nend", "  local result = operand[1]\n  for i = 1, #operator\
    \ do\n    local op = operator[i]\n    local y = operand[i + 1]\n    if op == '+'\
    \ then\n      result = result + y\n    elseif op == '-' then\n      result = result\
    \ - y\n    elseif op == '*' then\n      result = result * y\n    elseif op ==\
    \ '//' then\n      result = math.floor(result / y)\n    elseif op == '**' then\n\
    \      result = result ^ y\n    end\n  end\n  return result\nend", "  local result\
    \ = operand[1]\n  for i = 1, #operator do\n    if operator[i] == '+' then\n  \
    \    result = result + operand[i + 1]\n    elseif operator[i] == '-' then\n  \
    \    result = result - operand[i + 1]\n    elseif operator[i] == '*' then\n  \
    \    result = result * operand[i + 1]\n    elseif operator[i] == '//' then\n \
    \     result = result // operand[i + 1]\n    elseif operator[i] == '**' then\n\
    \      result = result ^ operand[i + 1]\n    end\n  end\n  return result\nend",
  "    local str = ''\n    for i = 1, #operator do\n        str = str .. operand[i]\
    \ .. operator[i]\n    end\n    str = str .. operand[#operand]\n    return load('return\
    \ ' .. str)()\nend", "  local res = operand[1]\n  for i = 1, #operator do\n  \
    \  if operator[i] == '+' then\n      res = res + operand[i + 1]\n    elseif operator[i]\
    \ == '-' then\n      res = res - operand[i + 1]\n    elseif operator[i] == '*'\
    \ then\n      res = res * operand[i + 1]\n    elseif operator[i] == '//' then\n\
    \      res = math.floor(res / operand[i + 1])\n    elseif operator[i] == '**'\
    \ then\n      res = res ^ operand[i + 1]\n    end\n  end\n  return res\nend",
  "    local res = operand[1]\n    for i = 1, #operator do\n        local op = operator[i]\n\
    \        local arg = operand[i + 1]\n        if op == '+' then\n            res\
    \ = res + arg\n        elseif op == '-' then\n            res = res - arg\n  \
    \      elseif op == '*' then\n            res = res * arg\n        elseif op ==\
    \ '//' then\n            res = res // arg\n        elseif op == '**' then\n  \
    \          res = res ^ arg\n        end\n    end\n    return res\nend", "    --\
    \ your code here\n    -- Variables\n    local result = operand[1]\n    local oper1\
    \ = operand[1]\n    local oper2 = operand[2]\n    local oper3 = operand[3]\n \
    \   local oper4 = operand[4]\n    local op1 = operator[1]\n    local op2 = operator[2]\n\
    \    local op3 = operator[3]\n    local op4 = operator[4]\n    local expression\
    \ = \"\"\n    -- Arithmetic operators\n    for i = 1, #operator do\n        if\
    \ operator[i] == '+' then\n            result = oper1 + oper2\n            oper1\
    \ = result\n            oper2 = oper3\n            oper3 = oper4\n           \
    \ if op1 == \"+\" then\n                expression = expression .. oper1 .. \"\
    \ + \" .. oper2\n            elseif op1 == \"-\" then\n                expression\
    \ = expression .. oper1 .. \" - \" .. oper2\n            elseif op1 == \"*\" then\n\
    \                expression = expression .. oper1 .. \" * \" .. oper2\n      \
    \      elseif op1 == \"//\" then\n                expression = expression .. oper1\
    \ .. \" // \" .. oper2\n            elseif op1 == \"**\" then\n              \
    \  expression = expression .. oper1 .. \" ** \" .. oper2\n            end\n  \
    \          op1 = op2\n            op2 = op3\n            op3 = op4\n        elseif\
    \ operator[i] == '-' then\n            result = oper1 - oper2\n            oper1\
    \ = result\n            oper2 = oper3\n            oper3 = oper4\n           \
    \ if op1 == \"+\" then\n                expression = expression .. oper1 .. \"\
    \ + \" .. oper2\n            elseif op1 == \"-\" then\n                expression\
    \ = expression .. oper1 .. \" - \" .. oper2\n            elseif op1 == \"*\" then\n\
    \                expression = expression .. oper1 .. \" * \" .. oper2\n      \
    \      elseif op1 == \"//\" then\n                expression = expression .. oper1\
    \ .. \" // \" .. oper2\n            elseif op1 == \"**\" then\n              \
    \  expression = expression .. oper1 .. \" ** \" .. oper2\n            end\n  \
    \          op1 = op2\n            op2 = op3\n            op3 = op4\n", "    local\
    \ result = operand[1]\n    for i = 1, #operator do\n        if operator[i] ==\
    \ '+' then\n            result = result + operand[i + 1]\n        elseif operator[i]\
    \ == '-' then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "    local num = operand[1]\n\
    \    for i = 1, #operator do\n        local op = operator[i]\n        local x\
    \ = operand[i + 1]\n        if op == '+' then\n            num = num + x\n   \
    \     elseif op == '-' then\n            num = num - x\n        elseif op == '*'\
    \ then\n            num = num * x\n        elseif op == '//' then\n          \
    \  num = math.floor(num / x)\n        elseif op == '**' then\n            num\
    \ = num ^ x\n        end\n    end\n    return num\nend", "    -- TODO\n    local\
    \ newOperand = {}\n    -- find all *,/\n    for i = 1, #operator do\n        if\
    \ operator[i] == '*' or operator[i] == '//' then\n            -- do it, and save\
    \ to operand[i+1]\n            if operator[i] == '*' then\n                newOperand[i]\
    \ = operand[i] * operand[i+1]\n            else\n                newOperand[i]\
    \ = operand[i] // operand[i+1]\n            end\n            -- remove operator\
    \ and operand\n            operator[i] = ''\n            operand[i+1] = ''\n \
    \       end\n    end\n    -- put all newOperand to operand\n    for i = 1, #newOperand\
    \ do\n        operand[i] = newOperand[i]\n    end\n    -- remove all ''\n    for\
    \ i = 1, #operator do\n        if operator[i] == '' then\n            table.remove(operator,\
    \ i)\n            table.remove(operand, i+1)\n        end\n    end\n    -- find\
    \ all +,-\n    for i = 1, #operator do\n        if operator[i] == '+' or operator[i]\
    \ == '-' then\n            -- do it, and save to operand[i+1]\n            if\
    \ operator[i] == '+' then\n                newOperand[i] = operand[i] + operand[i+1]\n\
    \            else\n                newOperand[i] = operand[i] - operand[i+1]\n\
    \            end\n            -- remove operator and operand\n            operator[i]\
    \ = ''\n            operand[i+1] = ''\n        end\n    end\n    -- put all newOperand\
    \ to operand\n    for i = 1, #newOperand do\n        operand[i] = newOperand[i]\n\
    \    end\n    -- remove all ''\n    for i = 1, #operator do\n        if operator[i]\
    \ == '' then\n            table.remove(operator, i)\n            table.remove(operand,\
    \ i+1)\n        end\n    end\n    -- find all **\n    for i =", "  if #operator\
    \ + 1 ~= #operand then\n    return 0\n  end\n  local result = operand[1]\n  for\
    \ i = 1, #operator do\n    if operator[i] == '+' then\n      result = result +\
    \ operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result -\
    \ operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result *\
    \ operand[i + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "\tlocal expr = operand[1]\n\
    \tfor i = 1, #operator do\n\t\texpr = loadstring('return ' .. expr .. operator[i]\
    \ .. operand[i + 1])()\n\tend\n\treturn expr\nend", "  -- your code here\nend",
  "    local x, y = operand[1], operand[2]\n    local op = operator[1]\n    if op\
    \ == '+' then\n        return x + y\n    elseif op == '-' then\n        return\
    \ x - y\n    elseif op == '*' then\n        return x * y\n    elseif op == '//'\
    \ then\n        return math.floor(x / y)\n    elseif op == '**' then\n       \
    \ return x ^ y\n    end\nend", "    local function operator_list(list)\n     \
    \   local operator_table = {\n            ['+'] = function(x, y) return x + y\
    \ end,\n            ['-'] = function(x, y) return x - y end,\n            ['*']\
    \ = function(x, y) return x * y end,\n            ['//'] = function(x, y) return\
    \ x // y end,\n            ['**'] = function(x, y) return x ^ y end\n        }\n\
    \        return operator_table[list]\n    end\n    local function calculation(operand_list,\
    \ operator_list)\n        local op = operator_list(operator)\n        local x\
    \ = table.remove(operand_list, 1)\n        local y = table.remove(operand_list,\
    \ 1)\n        table.insert(operand_list, 1, op(x, y))\n        return operand_list\n\
    \    end\n    for i = 1, #operator do\n        operand = calculation(operand,\
    \ operator_list)\n    end\n    return operand[1]\nend", "\tlocal result = operand[1]\n\
    \tfor i = 1, #operator do\n\t\tif operator[i] == '+' then\n\t\t\tresult = result\
    \ + operand[i + 1]\n\t\telseif operator[i] == '-' then\n\t\t\tresult = result\
    \ - operand[i + 1]\n\t\telseif operator[i] == '*' then\n\t\t\tresult = result\
    \ * operand[i + 1]\n\t\telseif operator[i] == '//' then\n\t\t\tresult = math.floor(result\
    \ / operand[i + 1])\n\t\telseif operator[i] == '**' then\n\t\t\tresult = result\
    \ ^ operand[i + 1]\n\t\tend\n\tend\n\treturn result\nend", "  local result = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result\
    \ - operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "\t\nend", "    --\
    \ your code here\nend", "  local result = operand[1]\n  for i = 1, #operator do\n\
    \    if operator[i] == '+' then\n      result = result + operand[i + 1]\n    elseif\
    \ operator[i] == '-' then\n      result = result - operand[i + 1]\n    elseif\
    \ operator[i] == '*' then\n      result = result * operand[i + 1]\n    elseif\
    \ operator[i] == '//' then\n      result = result // operand[i + 1]\n    elseif\
    \ operator[i] == '**' then\n      result = result ^ operand[i + 1]\n    end\n\
    \  end\n  return result\nend", "\tlocal r = operand[1]\n\tfor i = 1, #operator\
    \ do\n\t\tlocal op = operator[i]\n\t\tlocal a = operand[i + 1]\n\t\tif op == '+'\
    \ then\n\t\t\tr = r + a\n\t\telseif op == '-' then\n\t\t\tr = r - a\n\t\telseif\
    \ op == '*' then\n\t\t\tr = r * a\n\t\telseif op == '//' then\n\t\t\tr = math.floor(r\
    \ / a)\n\t\telseif op == '**' then\n\t\t\tr = r ^ a\n\t\tend\n\tend\n\treturn\
    \ r\nend", "    local expr = table.concat(operand, ' ')\n    for i, v in ipairs(operator)\
    \ do\n        expr = string.gsub(expr, ' ', v .. ' ', 1)\n    end\n    return\
    \ load('return ' .. expr)()\nend", "    local index = 1\n    for _, value in ipairs(operator)\
    \ do\n        if value == \"*\" or value == \"//\" then\n            local first\
    \ = operand[index]\n            local second = operand[index + 1]\n          \
    \  operand[index] = value == \"*\" and first * second or first // second\n   \
    \         table.remove(operand, index + 1)\n            table.remove(operator,\
    \ index)\n        else\n            index = index + 1\n        end\n    end\n\
    \    for _, value in ipairs(operator) do\n        if value == \"+\" or value ==\
    \ \"-\" then\n            local first = operand[index]\n            local second\
    \ = operand[index + 1]\n            operand[index] = value == \"+\" and first\
    \ + second or first - second\n            table.remove(operand, index + 1)\n \
    \           table.remove(operator, index)\n        else\n            index = index\
    \ + 1\n        end\n    end\n    return operand[1]\nend\nprint(do_algebra({\"\
    *\", \"*\", \"*\", \"+\", \"+\", \"+\"}, {1, 2, 3, 4, 5, 6, 7}))", "    return\
    \ table.reduce(operator, function(result, op)\n        return {op, result, table.remove(operand,\
    \ 1)}\n    end, table.remove(operand, 1))\nend", "  local result = operand[1]\n\
    \  for i = 1, #operator do\n    if operator[i] == '+' then\n      result = result\
    \ + operand[i + 1]\n    elseif operator[i] == '-' then\n      result = result\
    \ - operand[i + 1]\n    elseif operator[i] == '*' then\n      result = result\
    \ * operand[i + 1]\n    elseif operator[i] == '//' then\n      result = result\
    \ // operand[i + 1]\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "  -- your code here\n\
    \  local operator_map = {\n    ['+'] = function(a, b) return a + b end,\n    ['-']\
    \ = function(a, b) return a - b end,\n    ['*'] = function(a, b) return a * b\
    \ end,\n    ['//'] = function(a, b) return a // b end,\n    ['**'] = function(a,\
    \ b) return a ^ b end\n  }\n  local result = operand[1]\n  for i=1, #operator\
    \ do\n    result = operator_map[operator[i]](result, operand[i+1])\n  end\n  return\
    \ result\nend", "    local res = operand[1]\n    for i=1,#operator do\n      \
    \  if operator[i] == '+' then\n            res = res + operand[i+1]\n        elseif\
    \ operator[i] == '-' then\n            res = res - operand[i+1]\n        elseif\
    \ operator[i] == '*' then\n            res = res * operand[i+1]\n        elseif\
    \ operator[i] == '//' then\n            res = math.floor(res / operand[i+1])\n\
    \        elseif operator[i] == '**' then\n            res = res ^ operand[i+1]\n\
    \        end\n    end\n    return res\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
