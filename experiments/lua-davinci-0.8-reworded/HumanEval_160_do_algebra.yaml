name: HumanEval_160_do_algebra
language: lua
prompt: "-- Given two tables operator, and operand. The first table has basic algebra\
  \ operations, and \n-- the second table is a table of integers. Use the two given\
  \ tables to build the algebric \n-- expression and return the evaluation of this\
  \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
  \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
  \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n--\
  \ result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
  \ table is equal to the length of operand table minus one.\n-- Operand is a table\
  \ of of non-negative integers.\n-- Operator table has at least one operator, and\
  \ operand table has at least two operands.\nlocal function do_algebra(operator,\
  \ operand)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
  \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
  \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3,\
  \ 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local n = #operator\n  local result = 0\n  result = operand[1]\n\
    \  for i = 1, n do\n    if operator[i] == '+' then\n      result = result + operand[i\
    \ + 1]\n    elseif operator[i] == '-' then\n      result = result - operand[i\
    \ + 1]\n    elseif operator[i] == '*' then\n      result = result * operand[i\
    \ + 1]\n    elseif operator[i] == '//' then\n      result = math.floor(result\
    \ / operand[i + 1])\n    elseif operator[i] == '**' then\n      result = result\
    \ ^ operand[i + 1]\n    end\n  end\n  return result\nend", "   local res = operand[1]\n\
    \   for i = 1, #operator do\n      if operator[i] == '+' then\n         res =\
    \ res + operand[i+1]\n      elseif operator[i] == '-' then\n         res = res\
    \ - operand[i+1]\n      elseif operator[i] == '*' then\n         res = res * operand[i+1]\n\
    \      elseif operator[i] == '//' then\n         res = math.floor(res / operand[i+1])\n\
    \      elseif operator[i] == '**' then\n         res = res ^ operand[i+1]\n  \
    \    end\n   end\n   return res\nend", "    local result = operand[1]\n    for\
    \ i = 1, #operator do\n        if operator[i] == '+' then\n            result\
    \ = result + operand[i + 1]\n        elseif operator[i] == '-' then\n        \
    \    result = result - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            result = result * operand[i + 1]\n        elseif operator[i] == '//'\
    \ then\n            result = result // operand[i + 1]\n        elseif operator[i]\
    \ == '**' then\n            result = result ^ operand[i + 1]\n        end\n  \
    \  end\n    return result\nend", "    local result = operand[1]\n    for i = 1,\
    \ #operator do\n        if operator[i] == '+' then\n            result = result\
    \ + operand[i + 1]\n        elseif operator[i] == '-' then\n            result\
    \ = result - operand[i + 1]\n        elseif operator[i] == '*' then\n        \
    \    result = result * operand[i + 1]\n        elseif operator[i] == '//' then\n\
    \            result = result // operand[i + 1]\n        elseif operator[i] ==\
    \ '**' then\n            result = result ^ operand[i + 1]\n        end\n    end\n\
    \    return result\nend", "\tlocal op = {['+'] = function(a, b) return a + b end,\n\
    \t\t\t\t\t\t\t['-'] = function(a, b) return a - b end,\n\t\t\t\t\t\t\t['*'] =\
    \ function(a, b) return a * b end,\n\t\t\t\t\t\t\t['//'] = function(a, b) return\
    \ a // b end,\n\t\t\t\t\t\t\t['**'] = function(a, b) return a ^ b end}\n\tlocal\
    \ r = operand[1]\n\tfor i = 1, #operator do\n\t\tr = op[operator[i]](r, operand[i\
    \ + 1])\n\tend\n\treturn r\nend", "    local op_map = {['+']=function(a,b) return\
    \ a+b end,\n                    ['-']=function(a,b) return a-b end,\n        \
    \            ['*']=function(a,b) return a*b end,\n                    ['//']=function(a,b)\
    \ return math.floor(a/b) end,\n                    ['**']=function(a,b) return\
    \ a^b end}\n    local result = operand[1]\n    for i = 1, #operator do\n     \
    \   result = op_map[operator[i]](result, operand[i+1])\n    end\n    return result\n\
    end", "  local res\n  for i,v in ipairs(operator) do\n    if i == 1 then\n   \
    \   res = operand[i] .. v .. operand[i+1]\n    else\n      res = res .. v .. operand[i+1]\n\
    \    end\n  end\n  return assert(load('return ' .. res))()\nend", "    local temp\
    \ = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+' then\n\
    \            temp = temp + operand[i + 1]\n        elseif operator[i] == '-' then\n\
    \            temp = temp - operand[i + 1]\n        elseif operator[i] == '*' then\n\
    \            temp = temp * operand[i + 1]\n        elseif operator[i] == '//'\
    \ then\n            temp = math.floor(temp / operand[i + 1])\n        elseif operator[i]\
    \ == '**' then\n            temp = temp ^ operand[i + 1]\n        end\n    end\n\
    \    return temp\nend", "    local str = \"\"\n    for k, v in ipairs(operand)\
    \ do\n        if k ~= 1 then\n            str = str .. (operator[k - 1] or \"\"\
    ) .. v\n        else\n            str = str .. v\n        end\n    end\n    return\
    \ loadstring(\"return \" .. str)()\nend", "  local result = 0\n  for k,v in ipairs(operator)\
    \ do\n    if v == '+' then\n      result = result + operand[k] + operand[k+1]\n\
    \    elseif v == '-' then\n      result = result - operand[k] - operand[k+1]\n\
    \    elseif v == '*' then\n      result = result * operand[k] * operand[k+1]\n\
    \    elseif v == '//' then\n      result = result // operand[k] // operand[k+1]\n\
    \    elseif v == '**' then\n      result = result ** operand[k] ** operand[k+1]\n\
    \    end\n  end\n  return result\nend", "    return table.reduce(operator, function(i,\
    \ acc, v)\n        return acc .. \" \" .. table.get(operand, i) .. \" \" .. v\n\
    \    end) .. \" \" .. table.get(operand, #operand)\nend", "  local eq = table.concat(operand,\
    \ '')\n  for i,v in ipairs(operator) do\n    eq = eq:gsub(tostring(i), v)\n  end\n\
    \  eq = eq:gsub('//', '//')\n  eq = eq:gsub('%*%*', '^')\n  eq = eq:gsub('%*',\
    \ '*')\n  return loadstring(\"return \" .. eq)()\nend", "    local op_idx = #operator\n\
    \    local res = operand[1]\n    for i = 2, #operand do\n        if operator[op_idx]\
    \ == '+' then\n            res = res + operand[i]\n        elseif operator[op_idx]\
    \ == '-' then\n            res = res - operand[i]\n        elseif operator[op_idx]\
    \ == '*' then\n            res = res * operand[i]\n        elseif operator[op_idx]\
    \ == '//' then\n            res = math.floor(res / operand[i])\n        elseif\
    \ operator[op_idx] == '**' then\n            res = res ^ operand[i]\n        end\n\
    \        op_idx = op_idx - 1\n    end\n    return res\nend", "    local result\
    \ = operand[1]\n    for i = 1, #operator do\n        if operator[i] == '+' then\n\
    \            result = result + operand[i + 1]\n        elseif operator[i] == '-'\
    \ then\n            result = result - operand[i + 1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i + 1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i + 1])\n   \
    \     elseif operator[i] == '**' then\n            result = result ^ operand[i\
    \ + 1]\n        end\n    end\n    return result\nend", "  -- your code here\n\
    \  return nil\nend", "    local function sym(s)\n        return function(...)\n\
    \            return s:format(...)\n        end\n    end\n    local function compile(operator,\
    \ operand)\n        if #operator == 0 then\n            return tostring(operand[1])\n\
    \        end\n        local op = table.remove(operator, 1)\n        local ex =\
    \ compile(operator, operand)\n        local ey = table.remove(operand, 1)\n  \
    \      return sym[op](ex, ey)\n    end\n    local compiled = compile(operator,\
    \ operand)\n    return loadstring('return ' .. compiled)()\nend", "    local result\
    \ = operand[1]\n    for i=1,#operator do\n        if operator[i] == '+' then\n\
    \            result = result + operand[i+1]\n        elseif operator[i] == '-'\
    \ then\n            result = result - operand[i+1]\n        elseif operator[i]\
    \ == '*' then\n            result = result * operand[i+1]\n        elseif operator[i]\
    \ == '//' then\n            result = math.floor(result / operand[i+1])\n     \
    \   elseif operator[i] == '**' then\n            result = result ^ operand[i+1]\n\
    \        end\n    end\n    return result\nend", "    local sum = operand[1]\n\
    \    for i=1,#operator do\n        if operator[i] == '+' then\n            sum\
    \ = sum + operand[i+1]\n        elseif operator[i] == '-' then\n            sum\
    \ = sum - operand[i+1]\n        elseif operator[i] == '*' then\n            sum\
    \ = sum * operand[i+1]\n        elseif operator[i] == '//' then\n            sum\
    \ = math.floor(sum / operand[i+1])\n        elseif operator[i] == '**' then\n\
    \            sum = sum ^ operand[i+1]\n        end\n    end\n    return sum\n\
    end", "    local result = operand[1]\n    for i = 1, #operator do\n        local\
    \ op = operator[i]\n        local num = operand[i + 1]\n        if op == '+' then\n\
    \            result = result + num\n        elseif op == '-' then\n          \
    \  result = result - num\n        elseif op == '*' then\n            result =\
    \ result * num\n        elseif op == '//' then\n            result = math.floor(result\
    \ / num)\n        elseif op == '**' then\n            result = result ^ num\n\
    \        end\n    end\n    return result\nend", "    local res = operand[1]\n\
    \    for i=1,#operator do\n        if operator[i] == '+' then\n            res\
    \ = res + operand[i+1]\n        elseif operator[i] == '-' then\n            res\
    \ = res - operand[i+1]\n        elseif operator[i] == '*' then\n            res\
    \ = res * operand[i+1]\n        elseif operator[i] == '//' then\n            res\
    \ = math.floor(res / operand[i+1])\n        elseif operator[i] == '**' then\n\
    \            res = res ^ operand[i+1]\n        end\n    end\n    return res\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
