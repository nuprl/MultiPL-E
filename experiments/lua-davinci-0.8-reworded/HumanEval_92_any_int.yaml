name: HumanEval_92_any_int
language: lua
prompt: "-- Create a function that takes 3 numbers.\n-- Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n-- true\n\
  -- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n-- >>> any_int(3.6,\
  \ -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
  \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
  \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
  \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
  \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
  \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return math.floor(x) == x and math.floor(y) == y and math.floor(z)\
    \ == z and x + y == z or\n        math.floor(x) == x and math.floor(y) == y and\
    \ math.floor(z) == z and x + z == y or\n        math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z and y + z == x\nend", "  return math.floor(x) ==\
    \ x and math.floor(y) == y and math.floor(z) == z and (x + y == z or x + z ==\
    \ y or y + z == x)\nend", "  return ((x + y == z) or (x + z == y) or (y + z ==\
    \ x)) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)\nend", "    local sum\
    \ = y + z\n    return math.tointeger(x) and math.tointeger(y) and math.tointeger(z)\
    \ and (x == sum or y == sum or z == sum)\nend", "  return true\nend", "  if type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n   \
    \ return (x == y + z) or (y == x + z) or (z == x + y)\n  else\n    return false\n\
    \  end\nend", "    local x_is_int = is_int(x)\n    local y_is_int = is_int(y)\n\
    \    local z_is_int = is_int(z)\n    local x_plus_y = x + y\n    local x_plus_z\
    \ = x + z\n    local y_plus_z = y + z\n    if (x_is_int and y_is_int and z_is_int)\
    \ then\n        if (x_plus_y == z or x_plus_z == y or y_plus_z == x) then\n  \
    \          return true\n        else\n            return false\n        end\n\
    \    else\n        return false\n    end\nend", "  local ints = {}\n  if math.floor(x)\
    \ == x then ints[#ints+1] = x end\n  if math.floor(y) == y then ints[#ints+1]\
    \ = y end\n  if math.floor(z) == z then ints[#ints+1] = z end\n  if #ints < 3\
    \ then return false end\n  if ints[1] == ints[2] + ints[3] then return true end\n\
    \  if ints[2] == ints[1] + ints[3] then return true end\n  if ints[3] == ints[1]\
    \ + ints[2] then return true end\n  return false\nend", "  if math.floor(x) ==\
    \ x and math.floor(y) == y and math.floor(z) == z then\n    return (x + y == z)\
    \ or (x + z == y) or (y + z == x)\n  else\n    return false\n  end\nend", "  \
    \  return math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and\
    \ (x + y == z or x + z == y or y + z == x)\nend", "  --your code here\nend", " \
    \ return true\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" then\n    if x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z) then\n      if (x + y == z) or (x + z == y) or (y + z\
    \ == x) then\n        return true\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  else\n    return false\n  end\nend",
  "    if (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n\
    \    else\n        return false\n    end\nend", "    return (x + y == z) or (x\
    \ + z == y) or (y + z == x)\nend", "  if (x == (y + z)) and (x % 1 == 0) then\n\
    \    return true\n  elseif (y == (x + z)) and (y % 1 == 0) then\n    return true\n\
    \  elseif (z == (x + y)) and (z % 1 == 0) then\n    return true\n  else\n    return\
    \ false\n  end\nend", "  return ((x == y + z) or (y == x + z) or (z == x + y))\
    \ and (x == math.floor(x)) and (y == math.floor(y)) and (z == math.floor(z))\n\
    end", "    return not((x % 1) + (y % 1) + (z % 1)) and (x + y == z or x + z ==\
    \ y or y + z == x)\nend", "    return (x + y == z) or (x + z == y) or (y + z ==\
    \ x)\nend", "\treturn (x + y == z or x + z == y or y + z == x) and (x % 1 == 0\
    \ and y % 1 == 0 and z % 1 == 0)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
