name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- TODO: implement function\n    return  a^2 + b^2 == c^2\nend",
  "\tif a == math.sqrt(b^2 + c^2) or b == math.sqrt(a^2 + c^2) or c == math.sqrt(a^2\
    \ + b^2) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    --\
    \ INSERT YOUR CODE HERE\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    if a == b and b\
    \ == c then\n        return false\n    end\n    if a < b then\n        a, b =\
    \ b, a\n    end\n    if a < c then\n        a, c = c, a\n    end\n    return a\
    \ * a == b * b + c * c\nend", "\tlocal a2 = a * a\n\tlocal b2 = b * b\n\tlocal\
    \ c2 = c * c\n\treturn a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2\nend",
  "    -- TODO: Implement it\n    return a*a + b*b == c*c\nend", "    local a2 = a\
    \ * a\n    local b2 = b * b\n    local c2 = c * c\n    if c2 == a2 + b2 then\n\
    \        return true\n    elseif a2 == b2 + c2 then\n        return true\n   \
    \ elseif b2 == a2 + c2 then\n        return true\n    else\n        return false\n\
    \    end\nend", "  -- your code here\nend", "  -- TODO: implement right_angle_triangle\n\
    \  return false\nend", "  -- BEGIN SOLUTION\n  return a^2 + b^2 == c^2\n  -- END\
    \ SOLUTION\nend", "    --find hypotenuse (longest side)\n    local max = math.max(a,\
    \ b, c)\n    local sum = a + b + c\n    local hypotenuse = sum - max\n    --check\
    \ if it is a right angle triangle\n    if max*max == hypotenuse*hypotenuse then\n\
    \        return true\n    else\n        return false\n    end\nend", "  return\
    \ false\nend", "  -- TODO: Implementation\nend", "    if (c^2 - (a^2 + b^2)) ==\
    \ 0 then\n        return true\n    else\n        return false\n    end\nend",
  "  if a^2 + b^2 == c^2 then return true\n  elseif a^2 + c^2 == b^2 then return true\n\
    \  elseif b^2 + c^2 == a^2 then return true\n  else return false\n  end\nend",
  "  local a, b, c = math.max(a, b, c), math.min(a, b, c),\n  math.min(math.max(a,\
    \ b), math.max(b, c))\n  return a * a - b * b - c * c == 0\nend", "    if (a^2\
    \ + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    -- check the length\
    \ of sides is valid\n    if a == 0 or b == 0 or c == 0 then\n        return false\n\
    \    end\n    -- check the relationship between sides\n    if (a * a + b * b ==\
    \ c * c) or\n    (a * a + c * c == b * b) or\n    (b * b + c * c == a * a) then\n\
    \        return true\n    end\n    return false\nend", "  return a*a + b*b ==\
    \ c*c\nend", "    -- your code here\n    if a * a + b * b == c * c then\n    \
    \    return true\n    elseif b * b + c * c == a * a then\n        return true\n\
    \    elseif a * a + c * c == b * b then\n        return true\n    else\n     \
    \   return false\n    end\nend", "  -- Note that, since the triangle inequality\
    \ says that a+b>c, it is enough\n  -- to just check a^2+b^2==c^2.\n  return a^2+b^2==c^2\n\
    end", "  if(a^2 + b^2 == c^2) then\n    return true\n  elseif(a^2 + c^2 == b^2)\
    \ then\n    return true\n  elseif(b^2 + c^2 == a^2) then\n    return true\n  else\n\
    \    return false\n  end\nend", "    local function is_integer(num)\n        return\
    \ math.floor(num) == num\n    end\n    local function is_right_angle_triangle(a,\
    \ b, c)\n        local max_len = math.max(a, b, c)\n        if max_len == a then\n\
    \            return (a^2 == b^2 + c^2)\n        elseif max_len == b then\n   \
    \         return (b^2 == a^2 + c^2)\n        else\n            return (c^2 ==\
    \ a^2 + b^2)\n        end\n    end\n    return (is_integer(a) and is_integer(b)\
    \ and is_integer(c)) and \n            (a > 0 and b > 0 and c > 0) and is_right_angle_triangle(a,\
    \ b, c)\nend", "    local max = math.max(a, b, c)\n    local sum = a + b + c -\
    \ max\n    return max * max == sum * sum\nend", "  local t = {a, b, c}\n  table.sort(t)\n\
    \  return t[1]^2 + t[2]^2 == t[3]^2\nend", "    local m, n = a, b\n    if a ==\
    \ b or a == c or b == c then\n        return false\n    end\n    if a > b then\n\
    \        m, n = b, a\n    end\n    if b > c then\n        m, n = c, b\n    end\n\
    \    return m * m + n * n == c * c\nend", "    -- a, b, c is the length of the\
    \ three sides of a triangle.\n    -- Given a, b, c, we can use the Pythagorean\
    \ theorem to determine whether\n    -- the triangle is right-angled triangle or\
    \ not.\n    -- Here we assume that a, b, c is integer, and the three sides \n\
    \    -- form a triangle.\n    local max_len = math.max(a, b, c)\n    local min_len\
    \ = math.min(a, b, c)\n    local middle_len = a + b + c - max_len - min_len\n\
    \    if math.pow(max_len, 2) == math.pow(min_len, 2) + math.pow(middle_len, 2)\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ local s = {a, b, c}\n  table.sort(s)\n  return (s[1] ^ 2 + s[2] ^ 2) == s[3]\
    \ ^ 2\nend", "    -- Insert your code here\n    -- a^2 + b^2 = c^2\n    a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n    if a^2 + b^2 == c^2 then\n  \
    \      return true\n    else\n        return false\n    end\nend", "    if a >\
    \ b and a > c then\n        return (a^2) == (b^2) + (c^2)\n    elseif b > a and\
    \ b > c then\n        return (b^2) == (a^2) + (c^2)\n    elseif c > a and c >\
    \ b then\n        return (c^2) == (a^2) + (b^2)\n    end\nend", "    if a == 0\
    \ or b == 0 or c == 0 then\n        return false\n    end\n    local function\
    \ square(x)\n        return x * x\n    end\n    return square(a) + square(b) ==\
    \ square(c) or\n           square(a) + square(c) == square(b) or\n           square(b)\
    \ + square(c) == square(a)\nend", "  return a^2 + b^2 == c^2\nend", "    if (a^2)\
    \ + (b^2) == (c^2) then\n        return true\n    elseif (a^2) + (c^2) == (b^2)\
    \ then\n        return true\n    elseif (b^2) + (c^2) == (a^2) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  -- TODO: implement this\
    \ function\nend", "\t-- your code here\nend", end, "    if a + b > c and a + c\
    \ > b and b + c > a then\n        local s = math.max(a, b, c)\n        local r\
    \ = math.min(a, b, c)\n        local t = a + b + c - s - r\n        return math.pow(r,\
    \ 2) + math.pow(t, 2) == math.pow(s, 2)\n    else\n        return false\n    end\n\
    end", "  local arr = {a, b, c}\n  table.sort(arr)\n  if arr[1] + arr[2] == arr[3]\
    \ or arr[1] ^ 2 + arr[2] ^ 2 == arr[3] ^ 2 then\n    return true\n  else\n   \
    \ return false\n  end\nend", "  local triangle = {a, b, c}\n  local lengths =\
    \ { }\n  for i, v in ipairs(triangle) do\n    table.insert(lengths, v * v)\n \
    \ end\n  table.sort(lengths)\n  if lengths[1] + lengths[2] == lengths[3] then\n\
    \    return true\n  else\n    return false\n  end\nend", "  return a^2 + b^2 ==\
    \ c^2\nend", "  return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2\
    \ == a^2)\nend", "\tif ((a*a + b*b) == c*c) or ((a*a + c*c) == b*b) or ((b*b +\
    \ c*c) == a*a) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", " \
    \   -- your code here\nend", "    if math.pow(a, 2) + math.pow(b, 2) == math.pow(c,\
    \ 2) then\n        return true\n    elseif math.pow(b, 2) + math.pow(c, 2) ==\
    \ math.pow(a, 2) then\n        return true\n    elseif math.pow(c, 2) + math.pow(a,\
    \ 2) == math.pow(b, 2) then\n        return true\n    else\n        return false\n\
    \    end\nend", "    return (a * a + b * b == c * c) or (a * a + c * c == b *\
    \ b) or (b * b + c * c == a * a)\nend", "  -- Insert your code here\nend", "\t\
    if a < b and a < c then\n\t\treturn a*a + b*b == c*c\n\telseif b < a and b < c\
    \ then\n\t\treturn b*b + a*a == c*c\n\telseif c < a and c < b then\n\t\treturn\
    \ c*c + a*a == b*b\n\tend\nend", "    if a <= 0 or b <= 0 or c <= 0 then\n   \
    \     return false\n    end\n    local f = a*a + b*b == c*c\n    local s = a*a\
    \ + c*c == b*b\n    local t = b*b + c*c == a*a\n    return f or s or t\nend",
  "    return a^2 + b^2 == c^2\nend", "  -- your code goes here\n  local triangles\
    \ = { a, b, c }\n  table.sort(triangles)\n  if triangles[1]*triangles[1] + triangles[2]*triangles[2]\
    \ == triangles[3]*triangles[3] then\n    return true\n  else\n    return false\n\
    \  end\nend", "  -- can not create a triangle with any sides less than or equal\
    \ to 0\n  if a <= 0 or b <= 0 or c <= 0 then\n    return false\n  end\n  -- can\
    \ not create a triangle with a side greater than the sum of the other two\n  if\
    \ a > b + c or b > a + c or c > a + b then\n    return false\n  end\n  -- the\
    \ square of the longest side must be equal to the sum of the squares of\n  --\
    \ the other two sides to form a right-angled triangle\n  local largest = math.max(a,\
    \ b, c)\n  local squares = {a * a, b * b, c * c}\n  local other_squares = 0\n\
    \  for i = 1, 3 do\n    if squares[i] ~= largest * largest then\n      other_squares\
    \ = other_squares + squares[i]\n    end\n  end\n  return largest * largest ==\
    \ other_squares\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n  if (math.pow(sides[1],\
    \ 2) + math.pow(sides[2], 2)) == math.pow(sides[3], 2) then\n    return true\n\
    \  else\n    return false\n  end\nend", "    if (a*a + b*b == c*c) or (a*a + c*c\
    \ == b*b) or (b*b + c*c == a*a) then\n        return true\n    else\n        return\
    \ false\n    end\nend", "  if a^2 + b^2 == c^2 then\n    return true\n  else\n\
    \    return false\n  end\nend", "\tlocal A, B, C = a^2, b^2, c^2\n\treturn A +\
    \ B == C or A + C == B or B + C == A\nend", "  if a >= b and a >= c then\n   \
    \ return (a * a) == (b * b) + (c * c)\n  elseif b >= a and b >= c then\n    return\
    \ (b * b) == (a * a) + (c * c)\n  elseif c >= a and c >= b then\n    return (c\
    \ * c) == (a * a) + (b * b)\n  end\nend", "  if (a == math.sqrt(b * b + c * c))\
    \ then\n    return true\n  elseif (b == math.sqrt(a * a + c * c)) then\n    return\
    \ true\n  elseif (c == math.sqrt(a * a + b * b)) then\n    return true\n  else\n\
    \    return false\n  end\nend", "    -- Calculate the angles of a triangle with\
    \ 3 sides\n    -- http://www.afrisam.co.za/Pages/Calculator.aspx\n    local A\
    \ = math.acos(((b * b) + (c * c) - (a * a)) / (2 * b * c))\n    local B = math.acos(((a\
    \ * a) + (c * c) - (b * b)) / (2 * a * c))\n    local C = math.acos(((a * a) +\
    \ (b * b) - (c * c)) / (2 * a * b))\n    local pi = math.pi\n    -- Return true\
    \ if one of the angles is 90 degree\n    return (A == (pi / 2)) or (B == (pi /\
    \ 2)) or (C == (pi / 2))\nend", "    -- TODO: implement the function\nend", " \
    \   if a^2 + b^2 == c^2 then\n        return true\n    elseif b^2 + c^2 == a^2\
    \ then\n        return true\n    elseif c^2 + a^2 == b^2 then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    if a + b > c then\n\
    \        return math.abs(a^2 + b^2 - c^2) < 0.01\n    elseif a + c > b then\n\
    \        return math.abs(a^2 + c^2 - b^2) < 0.01\n    elseif b + c > a then\n\
    \        return math.abs(b^2 + c^2 - a^2) < 0.01\n    else\n        return false\n\
    \    end\nend", "  return a^2 + b^2 == c^2\nend", "    if a*a + b*b == c*c then\
    \ return true\n    elseif a*a + c*c == b*b then return true\n    elseif b*b +\
    \ c*c == a*a then return true\n    else return false end\nend", "    if not a\
    \ or not b or not c then\n        return false\n    end\n    if a <= 0 or b <=\
    \ 0 or c <= 0 then\n        return false\n    end\n    if a + b <= c or a + c\
    \ <= b or b + c <= a then\n        return false\n    end\n    return math.pow(a,\
    \ 2) + math.pow(b, 2) == math.pow(c, 2) or\n           math.pow(a, 2) + math.pow(c,\
    \ 2) == math.pow(b, 2) or\n           math.pow(b, 2) + math.pow(c, 2) == math.pow(a,\
    \ 2)\nend", "  local longest_side = math.max(a, b, c)\n  local sum_of_shorter_sides\
    \ = a + b + c - longest_side\n  if (longest_side * longest_side) == (sum_of_shorter_sides\
    \ * sum_of_shorter_sides) then\n    return true\n  else\n    return false\n  end\n\
    end", "    if a * a + b * b == c * c then\n        return true\n    elseif a *\
    \ a + c * c == b * b then\n        return true\n    elseif b * b + c * c == a\
    \ * a then\n        return true\n    else\n        return false\n    end\nend",
  "    if a > b and a > c then\n        return (a*a == b*b + c*c)\n    elseif b >\
    \ a and b > c then\n        return (b*b == a*a + c*c)\n    elseif c > a and c\
    \ > b then\n        return (c*c == a*a + b*b)\n    end\nend", "    return a ^\
    \ 2 + b ^ 2 == c ^ 2\nend", "\tlocal tri_sort = {a, b, c}\n\ttable.sort(tri_sort)\n\
    \treturn tri_sort[1] ^ 2 + tri_sort[2] ^ 2 == tri_sort[3] ^ 2\nend", "\tif a ==\
    \ nil or b == nil or c == nil then\n\t\treturn false\n\tend\n\tlocal max = math.max(a,\
    \ b, c)\n\tif max == a then\n\t\treturn b * b + c * c == a * a\n\telseif max ==\
    \ b then\n\t\treturn a * a + c * c == b * b\n\telseif max == c then\n\t\treturn\
    \ a * a + b * b == c * c\n\tend\nend", "  --[[\n  if ((a * a) + (b * b) == (c\
    \ * c)) or ((b * b) + (c * c) == (a * a)) or ((c * c) + (a * a) == (b * b)) then\n\
    \    return true\n  else\n    return false\n  end\n  --]]\n  -- If a and b are\
    \ biggest, then a must bigger than c, and b must bigger than c,\n  -- then a^2\
    \ + b^2 > c^2 is true, so we only need to check a^2 + b^2 > c^2.\n  -- And the\
    \ same to other cases.\n  if a > b and a > c then\n    return (a * a) + (b * b)\
    \ > (c * c)\n  elseif b > a and b > c then\n    return (b * b) + (c * c) > (a\
    \ * a)\n  elseif c > a and c > b then\n    return (c * c) + (a * a) > (b * b)\n\
    \  end\nend", "  if a + b > c and a + c > b and b + c > a then\n    if a * a +\
    \ b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a then\n  \
    \    return true\n    end\n  end\n  return false\nend", "    -- your code goes\
    \ here\n    return false\nend", "    local m = math.max(a, b, c)\n    local rest\
    \ = (a + b + c) - m\n    return m * m == a * a + b * b + c * c - m * m\nend",
  "  -- your code here\n  local arr = {a, b, c}\n  table.sort(arr)\n  return (arr[1]^2\
    \ + arr[2]^2) == arr[3]^2\nend", "  if a^2 + b^2 == c^2 then\n    return true\n\
    \  elseif a^2 + c^2 == b^2 then\n    return true\n  elseif b^2 + c^2 == a^2 then\n\
    \    return true\n  else\n    return false\n  end\nend", "  -- Use Pythagorean\
    \ theorem.\n  local m = math.max(a, b, c)\n  local s = a + b + c - m\n  if m *\
    \ m == s * s then\n    return true\n  else\n    return false\n  end\nend", " \
    \ if (a*a)+(b*b) == (c*c) then\n    return true\n  else\n    return false\n  end\n\
    end", "    if a > b and a > c then\n        return b*b + c*c == a*a\n    elseif\
    \ b > a and b > c then\n        return a*a + c*c == b*b\n    else\n        return\
    \ a*a + b*b == c*c\n    end\nend", "\t-- Return true if the three sides form a\
    \ right-angled triangle\n\t-- otherwise return false.\n\treturn (a*a + b*b ==\
    \ c*c) or (a*a + c*c == b*b) or (b*b + c*c == a*a)\nend", "    -- local m = math.max(a,\
    \ b, c)\n    -- if m == a then\n    --     return a * a == b * b + c * c\n   \
    \ -- elseif m == b then\n    --     return b * b == a * a + c * c\n    -- else\n\
    \    --     return c * c == a * a + b * b\n    -- end\n    return a * a == b *\
    \ b + c * c or\n           b * b == a * a + c * c or\n           c * c == a *\
    \ a + b * b\nend", "    -- TODO: implement it.\n    local function is_triangle(a,\
    \ b, c)\n        if(a+b > c and a+c > b and b+c > a) then\n            return\
    \ true\n        else\n            return false\n        end\n    end", "    --\
    \ TODO: implement this function\n    return false\nend", "    if a > b and a >\
    \ c then\n        return a^2 == b^2 + c^2\n    elseif b > a and b > c then\n \
    \       return b^2 == a^2 + c^2\n    elseif c > a and c > b then\n        return\
    \ c^2 == a^2 + b^2\n    end\nend", "\tif ((a*a) + (b*b) == (c*c)) then\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "  return a * a + b * b == c *\
    \ c\nend", "\t-- YOUR CODE HERE\n\tif a+b>c and a+c>b and b+c>a then\n\t\tlocal\
    \ s=math.pow(a,2)+math.pow(b,2)\n\t\tlocal p=math.pow(c,2)\n\t\tif s==p then\n\
    \t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\
    \tend\nend", "    -- do the math\n    local s = (a+b+c)/2\n    local area = math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \    -- square of the hypotenuse should be equal to\n    -- sum of the squares\
    \ of the other two sides.\n    return math.pow(c, 2) == math.pow(a, 2) + math.pow(b,\
    \ 2)\nend", "  if (a * a + b * b == c * c) or (a * a + c * c == b * b) or (b *\
    \ b + c * c == a * a) then\n    return true\n  else\n    return false\n  end\n\
    end", "    -- TODO: type check\n    local longest = math.max(a, b, c)\n    local\
    \ rest = math.min(a, b, c) + math.min(math.max(a, b), math.max(b, c))\n    return\
    \ longest ^ 2 == rest ^ 2\nend", "    return (math.pow(a, 2) + math.pow(b, 2)\
    \ == math.pow(c, 2)) or (math.pow(a, 2) + math.pow(c, 2) == math.pow(b, 2)) or\
    \ (math.pow(b, 2) + math.pow(c, 2) == math.pow(a, 2))\nend", "  -- To check if\
    \ a, b, c form a right-angled triangle, we can check\n  -- if a^2 + b^2 = c^2\n\
    \  if (a * a + b * b == c * c) then\n    return true\n  else\n    return false\n\
    \  end\nend", "    -- ...\nend", "    return math.abs(a^2 + b^2 - c^2) < 1e-10\n\
    end", "\treturn (a ^ 2 + b ^ 2 == c ^ 2) or (a ^ 2 + c ^ 2 == b ^ 2) or (b ^ 2\
    \ + c ^ 2 == a ^ 2)\nend", "  -- verify the sides of the triangle are valid\n\
    \  if a <= 0 or b <= 0 or c <= 0 then\n    return false\n  end\n  -- compute the\
    \ squared values for the sides of the triangle\n  local a_sq = a * a\n  local\
    \ b_sq = b * b\n  local c_sq = c * c\n  -- check if the squared value of two sides\
    \ equal the squared value of the\n  -- third side\n  return (a_sq + b_sq == c_sq)\
    \ or (a_sq + c_sq == b_sq) or (b_sq + c_sq == a_sq)\nend", "  return a^2 + b^2\
    \ == c^2\nend", "  if a > b and a > c then\n    return (a * a) == (b * b) + (c\
    \ * c)\n  elseif b > a and b > c then\n    return (b * b) == (a * a) + (c * c)\n\
    \  elseif c > a and c > b then\n    return (c * c) == (a * a) + (b * b)\n  end\n\
    end", "  -- Write your code here\nend", "  if a*a + b*b == c*c then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    if (a * a + b * b == c * c)\
    \ or (a * a + c * c == b * b) or (b * b + c * c == a * a) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "  return a^2 + b^2 ==\
    \ c^2 or a^2 + c^2 == b^2 or b^2 + c^2 == a^2\nend", "    local sides = {a, b,\
    \ c}\n    table.sort(sides)\n    local a, b, c = unpack(sides)\n    if a * a +\
    \ b * b == c * c then\n        return true\n    else\n        return false\n \
    \   end\nend", "\tlocal largest = math.max(a, b, c)\n\tif largest == a then\n\t\
    \treturn a*a == b*b + c*c\n\telseif largest == b then\n\t\treturn b*b == a*a +\
    \ c*c\n\telse\n\t\treturn c*c == a*a + b*b\n\tend\nend", "\tlocal function get_max(a,\
    \ b, c)\n\t\tif a > b and a > c then\n\t\t\treturn a\n\t\telseif b > a and b >\
    \ c then\n\t\t\treturn b\n\t\telse\n\t\t\treturn c\n\t\tend\n\tend\n\tlocal a,\
    \ b, c = a * a, b * b, c * c\n\tlocal max = get_max(a, b, c)\n\tif max == a then\n\
    \t\treturn (b + c) == a\n\telseif max == b then\n\t\treturn (a + c) == b\n\telse\n\
    \t\treturn (a + b) == c\n\tend\nend", "    return a^2 + b^2 == c^2\nend", "  \
    \  local sides = {a, b, c}\n    table.sort(sides)\n    return (sides[1] ^ 2 +\
    \ sides[2] ^ 2) == sides[3] ^ 2\nend", "    local square_a = a * a\n    local\
    \ square_b = b * b\n    local square_c = c * c\n    return (square_a + square_b\
    \ == square_c) or\n           (square_a + square_c == square_b) or\n         \
    \  (square_b + square_c == square_a)\nend", "    if a^2 + b^2 == c^2 then\n  \
    \      return true\n    elseif a^2 + c^2 == b^2 then\n        return true\n  \
    \  elseif b^2 + c^2 == a^2 then\n        return true\n    else\n        return\
    \ false\n    end\nend", end, "\tlocal x, y, z = math.max(a, b, c), 0, 0\n\tif\
    \ x == a then\n\t\ty, z = b, c\n\telseif x == b then\n\t\ty, z = a, c\n\telse\n\
    \t\ty, z = a, b\n\tend\n\treturn (x*x == y*y + z*z)\nend", "  if a > b and a >\
    \ c then\n    return (a*a) == (b*b) + (c*c)\n  elseif b > a and b > c then\n \
    \   return (b*b) == (a*a) + (c*c)\n  else\n    return (c*c) == (a*a) + (b*b)\n\
    \  end\nend", "    -- if two sides are equal, then it's not a right angle triangle\n\
    \    if a == b or b == c or a == c then\n        return false\n    end\n    --\
    \ for a right angle triangle, the sum of squares of any two sides should\n   \
    \ -- equal the square of the third side\n    if (a*a + b*b == c*c) or (a*a + c*c\
    \ == b*b) or (b*b + c*c == a*a) then\n        return true\n    end\n    return\
    \ false\nend", "  local m = math.max(a, b, c)\n  local f = math.min(a, b, c)\n\
    \  local mid = a + b + c - m - f\n  if f*f + mid*mid == m*m then\n    return true\n\
    \  else\n    return false\n  end\nend", "    if a == nil or b == nil or c == nil\
    \ then\n        return false\n    end\n    if a < 0 or b < 0 or c < 0 then\n \
    \       return false\n    end\n    if a == 0 or b == 0 or c == 0 then\n      \
    \  return false\n    end\n    local a2 = a * a\n    local b2 = b * b\n    local\
    \ c2 = c * c\n    if (a2 + b2 == c2) or (a2 + c2 == b2) or (b2 + c2 == a2) then\n\
    \        return true\n    end\n    return false\nend", "    local list = {a, b,\
    \ c}\n    table.sort(list)\n    return list[1] ^ 2 + list[2] ^ 2 == list[3] ^\
    \ 2\nend", "    if a > b and a > c then\n        return a*a == b*b + c*c\n   \
    \ elseif b > a and b > c then\n        return b*b == a*a + c*c\n    elseif c >\
    \ a and c > b then\n        return c*c == a*a + b*b\n    end\nend", "    if a^2\
    \ + b^2 == c^2 then\n        return true\n    elseif a^2 + c^2 == b^2 then\n \
    \       return true\n    elseif b^2 + c^2 == a^2 then\n        return true\n \
    \   else\n        return false\n    end\nend", "    if a == 0 or b == 0 or c ==\
    \ 0 then\n        return false\n    end\n    return (a^2 + b^2 == c^2) or (a^2\
    \ + c^2 == b^2) or (b^2 + c^2 == a^2)\nend", "    return a^2 + b^2 == c^2\nend",
  "  return a^2 + b^2 == c^2\nend", "    return (a * a + b * b == c * c) or (a * a\
    \ + c * c == b * b) or (b * b + c * c == a * a)\nend", "\tlocal x, y, z = 0, 0,\
    \ 0\n\tif a > b then\n\t\tx = a\n\t\ty = b\n\telse\n\t\tx = b\n\t\ty = a\n\tend\n\
    \tif c > x then\n\t\tz = x\n\t\tx = c\n\telse\n\t\tz = c\n\tend\n\treturn x ^\
    \ 2 == y ^ 2 + z ^ 2\nend", "    -- your code here\nend", "\t-- find the longest\
    \ side\n\tlocal longest = math.max(a, b, c)\n\tlocal square_sum = a * a + b *\
    \ b + c * c - longest * longest\n\treturn square_sum == longest * longest\nend",
  "    return ((a^2 + b^2) == c^2) or ((a^2 + c^2) == b^2) or ((b^2 + c^2) == a^2)\n\
    end", "    local x, y, z = a, b, c\n    if x > y then x, y = y, x end\n    if\
    \ x > z then x, z = z, x end\n    if y > z then y, z = z, y end\n    return x*x\
    \ + y*y == z*z\nend", "    if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2)\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \ return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend",
  '    if a == b and b == c then return false end', "  -- TODO: implement the function\n\
    end", "  -- your code here\nend", "\tlocal t = {a, b, c}\n\ttable.sort(t)\n\t\
    return t[1] ^ 2 + t[2] ^ 2 == t[3] ^ 2\nend", "    if a^2 + b^2 == c^2 then\n\
    \        return true\n    else\n        return false\n    end\nend", "  local\
    \ arr = {a, b, c}\n  table.sort(arr)\n  return arr[1] ^ 2 + arr[2] ^ 2 == arr[3]\
    \ ^ 2\nend", "  if ((a*a) + (b*b) == (c*c)) then\n    return true\n  elseif ((a*a)\
    \ + (c*c) == (b*b)) then\n    return true\n  elseif ((b*b) + (c*c) == (a*a)) then\n\
    \    return true\n  else\n    return false\n  end\nend", "    return (a^2 + b^2\
    \ == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend", "    -- return true\
    \ if the three sides form a right-angled triangle, false otherwise\n    if (a\
    \ * a + b * b == c * c) or (a * a + c * c == b * b) or (b * b + c * c == a * a)\
    \ then\n        return true\n    else\n        return false\n    end\nend", " \
    \   -- body\n    if a * a + b * b == c * c then\n        return true\n    else\n\
    \        return false\n    end\nend", "  -- TODO: write your code here\n  if a\
    \ > b and a > c then\n    if a * a == b * b + c * c then\n      return true\n\
    \    else\n      return false\n    end\n  elseif b > a and b > c then\n    if\
    \ b * b == a * a + c * c then\n      return true\n    else\n      return false\n\
    \    end\n  elseif c > a and c > b then\n    if c * c == a * a + b * b then\n\
    \      return true\n    else\n      return false\n    end\n  end\nend", "    --\
    \ Write your code here ...\n    if math.pow(a, 2) + math.pow(b, 2) == math.pow(c,\
    \ 2) then\n        return true\n    else\n        return false\n    end\nend",
  "  -- YOUR CODE HERE\n  local max = math.max(a, b, c)\n  if max == a then\n    return\
    \ a * a == b * b + c * c\n  elseif max == b then\n    return b * b == a * a +\
    \ c * c\n  else\n    return c * c == a * a + b * b\n  end\nend", "    local res\n\
    \    local a2 = a * a\n    local b2 = b * b\n    local c2 = c * c\n    if a2 +\
    \ b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2 then\n        res = true\n    else\n\
    \        res = false\n    end\n    return res\nend", "  -- your implementation\
    \ here\n  if a*a + b*b == c*c then\n    return true\n  elseif a*a + c*c == b*b\
    \ then\n    return true\n  elseif b*b + c*c == a*a then\n    return true\n  else\n\
    \    return false\n  end\nend", "    -- TODO: ...\nend", "\tif a^2 + b^2 == c^2\
    \ then\n\t\treturn true\n\telseif a^2 + c^2 == b^2 then\n\t\treturn true\n\telseif\
    \ b^2 + c^2 == a^2 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "    -- your solution here\n    -- use Pythagorean theorem to determine a right\
    \ triangle\n    -- a^2 + b^2 = c^2\n    if(a*a + b*b == c*c) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    return (a * a + b\
    \ * b == c * c) or (a * a + c * c == b * b) or (b * b + c * c == a * a)\nend",
  "  return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2)\nend",
  "    local sum = c*c\n    if (sum == a*a + b*b) then\n        return true\n    else\n\
    \        return false\n    end\nend", "    if (a * a + b * b == c * c) or (a *\
    \ a + c * c == b * b) or (b * b + c * c == a * a) then\n        return true\n\
    \    else\n        return false\n    end\nend", "  local sides = {a, b, c}\n \
    \ local longest = 0\n  for _, v in ipairs(sides) do\n    if v > longest then\n\
    \      longest = v\n    end\n  end\n  for _, v in ipairs(sides) do\n    if v ~=\
    \ longest and v * v + longest * longest == longest * longest then\n      return\
    \ true\n    end\n  end\n  return false\nend", "    local squares = {a*a, b*b,\
    \ c*c}\n    table.sort(squares)\n    return squares[1] + squares[2] == squares[3]\n\
    end", "  -- Your code here.\nend", "\tlocal function square(x)\n\t\treturn x *\
    \ x\n\tend\n\treturn square(a) + square(b) == square(c) or\n\t\tsquare(a) + square(c)\
    \ == square(b) or\n\t\tsquare(b) + square(c) == square(a)\nend", end, "  return\
    \ (a^2 + b^2 == c^2) or (b^2 + c^2 == a^2) or (c^2 + a^2 == b^2)\nend", "    if\
    \ a * a + b * b == c * c then\n        return true\n    elseif b * b + c * c ==\
    \ a * a then\n        return true\n    elseif c * c + a * a == b * b then\n  \
    \      return true\n    else\n        return false\n    end\nend", "    -- should\
    \ not be less than 0\n    if a <= 0 or b <= 0 or c <= 0 then\n        return false\n\
    \    end\n    -- sum of two sides is greater than the other side\n    if a + b\
    \ <= c or a + c <= b or b + c <= a then\n        return false\n    end\n    --\
    \ return the result\n    return (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2\
    \ + c^2 == a^2)\nend", "    local function max(a, b)\n        if a > b then\n\
    \            return a\n        else\n            return b\n        end\n    end\n\
    \    local max_side = max(a, max(b, c))\n    local sum = a * a + b * b + c * c\n\
    \    return sum - max_side * max_side == max_side * max_side\nend", "    if a\
    \ == math.sqrt(b^2 + c^2) then\n        return true\n    elseif b == math.sqrt(a^2\
    \ + c^2) then\n        return true\n    elseif c == math.sqrt(a^2 + b^2) then\n\
    \        return true\n    else\n        return false\n    end\nend", "    if (a*a)\
    \ + (b*b) == (c*c) then\n        return true\n    else\n        return false\n\
    \    end\nend", "    -- TODO: implement your right_angle_triangle function here\n\
    end", "\tif a^2 + b^2 == c^2 then\n\t\treturn true\n\telseif a^2 + c^2 == b^2\
    \ then\n\t\treturn true\n\telseif b^2 + c^2 == a^2 then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "  -- write your solution here\nend", "  -- remove\
    \ 'return' and type your code here\nend", "    if a^2 + b^2 == c^2 then\n    \
    \    return true\n    elseif a^2 + c^2 == b^2 then\n        return true\n    elseif\
    \ b^2 + c^2 == a^2 then\n        return true\n    else\n        return false\n\
    \    end\nend", "    -- Finding the hypotenuse, the longest side\n    local hypotenuse\n\
    \    if (a > b and a > c) then\n        hypotenuse = a\n    elseif (b > a and\
    \ b > c) then\n        hypotenuse = b\n    else\n        hypotenuse = c\n    end",
  "  if a^2 + b^2 == c^2 then\n    return true\n  else\n    return false\n  end\n\
    end", "\t-- body\n\tif (a^2 + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2\
    \ == a^2) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  if\
    \ a > b and a > c then\n    return a*a == b*b + c*c\n  elseif b > a and b > c\
    \ then\n    return b*b == a*a + c*c\n  else\n    return c*c == a*a + b*b\n  end\n\
    end", "  if math.pow(a, 2) + math.pow(b, 2) == math.pow(c, 2) then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  -- add your code here\n  if\
    \ a^2+b^2==c^2 then\n  \treturn true\n  else\n  \treturn false\n  end\nend", " \
    \   -- write your code here\n    local ans = false\n    local x = math.max(a,b,c)\n\
    \    local y = math.min(a,b,c)\n    local z = a+b+c-x-y\n    if x^2 == y^2 + z^2\
    \ then\n        ans = true\n    end\n    return ans\nend", "    -- Given the lengths\
    \ of the three sides of a triangle. Return true if the three\n    -- sides form\
    \ a right-angled triangle, false otherwise.\n    -- A right-angled triangle is\
    \ a triangle in which one angle is right angle or \n    -- 90 degree.\n    --\
    \ Example:\n    -- >>> right_angle_triangle(3, 4, 5)\n    -- true\n    -- >>>\
    \ right_angle_triangle(1, 2, 3)\n    -- false\n    local function square(x)\n\
    \        return x * x\n    end\n    if square(a) + square(b) == square(c) or square(a)\
    \ + square(c) == square(b) or square(b) + square(c) == square(a) then\n      \
    \  return true\n    else\n        return false\n    end\nend", "  local sqrt =\
    \ math.sqrt\n  local atan2 = math.atan2\n  -- theta = opposite / hypotenuse =\
    \ a / c\n  local theta = atan2(a, c)\n  -- a = c * sin(theta) = c * sin(atan2(a,\
    \ c))\n  -- b = c * cos(theta) = c * cos(atan2(a, c))\n  local c2 = c^2\n  local\
    \ a2 = c2 * math.sin(theta)^2\n  local b2 = c2 * math.cos(theta)^2\n  local delta\
    \ = a2 + b2 - c2\n  return delta == 0\nend", "  -- Make sure a, b, c are integer.\n\
    \  a = math.floor(a)\n  b = math.floor(b)\n  c = math.floor(c)\n  -- Use the Pythagorean\
    \ theorem to check if the length of one side\n  -- is the square root of the length\
    \ of other two sides.\n  if a^2 + b^2 == c^2 or b^2 + c^2 == a^2 or c^2 + a^2\
    \ == b^2 then\n    return true\n  else\n    return false\n  end\nend", end, "\t\
    local squares = {}\n\tsquares[a * a] = { a, b, c }\n\tsquares[b * b] = { a, b,\
    \ c }\n\tsquares[c * c] = { a, b, c }\n\tif squares[a * a + b * b] or squares[a\
    \ * a + c * c] or squares[b * b + c * c] then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend", "    local sides = {a, b, c}\n    local sides_sq = {}\n\
    \    for i, _ in ipairs(sides) do\n        sides_sq[i] = sides[i] * sides[i]\n\
    \    end\n    table.sort(sides_sq)\n    return sides_sq[1] + sides_sq[2] == sides_sq[3]\n\
    end", "    return a * a + b * b == c * c\nend", "    if (a^2 + b^2 == c^2) or\
    \ (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return true\n    else\n\
    \        return false\n    end\nend", "    return ((a * a) + (b * b)) == (c *\
    \ c)\nend", "  if a+b > c and a+c > b and b+c > a then\n    -- Sort the array\n\
    \    local temp, sorted = {a, b, c}, {}\n    while #temp > 0 do\n      local min_index,\
    \ min_value = 1, temp[1]\n      for i = 2, #temp do\n        if temp[i] < min_value\
    \ then\n          min_index, min_value = i, temp[i]\n        end\n      end\n\
    \      table.insert(sorted, min_value)\n      table.remove(temp, min_index)\n\
    \    end\n    -- Get the sum of the squares of the two smaller numbers\n    local\
    \ sum = 0\n    for i = 1, 2 do\n      sum = sum + sorted[i]*sorted[i]\n    end\n\
    \    -- If the largest number's square is equal to the sum, then it's a right\
    \ angle\n    if sorted[3]*sorted[3] == sum then\n      return true\n    end\n\
    \  end\n  return false\nend", "    -- return (a^2 + b^2 == c^2)\n    return (a\
    \ ^ 2 + b ^ 2 == c ^ 2) or (a ^ 2 + c ^ 2 == b ^ 2) or (b ^ 2 + c ^ 2 == a ^ 2)\n\
    end", "    local lst = {a, b, c}\n    table.sort(lst)\n    return lst[1]^2 + lst[2]^2\
    \ == lst[3]^2\nend", "\tlocal sorted = sort({a, b, c})\n\treturn sorted[1] ^ 2\
    \ + sorted[2] ^ 2 == sorted[3] ^ 2\nend", "    local large, medium, small = a,\
    \ b, c\n    if a < b then\n        large, medium, small = b, a, c\n    elseif\
    \ a < c then\n        large, medium, small = c, a, b\n    end\n    return math.pow(large,\
    \ 2) == math.pow(medium, 2) + math.pow(small, 2)\nend", "    -- Insert your code\
    \ here\n    if a^2 + b^2 == c^2 then\n        return true\n    else\n        return\
    \ false\n    end\nend", "    -- return a^2 + b^2 == c^2\n    -- or\n    -- return\
    \ a^2 + c^2 == b^2\n    -- or\n    -- return b^2 + c^2 == a^2\n    -- or\n   \
    \ return (a^2 + b^2 == c^2 or a^2 + c^2 == b^2 or b^2 + c^2 == a^2)\nend", " \
    \   local sides = {a, b, c}\n    table.sort(sides)\n    return sides[1]^2 + sides[2]^2\
    \ == sides[3]^2\nend", "  local sides = {a, b, c}\n  table.sort(sides)\n  return\
    \ sides[1] ^ 2 + sides[2] ^ 2 == sides[3] ^ 2\nend", "  -- TODO: Your code here.\n\
    \  return false\nend", "    if a < b then\n        a, b = b, a\n    end\n    if\
    \ a < c then\n        a, c = c, a\n    end\n    return a^2 == b^2 + c^2\nend",
  "    local sides = {a, b, c}\n    local biggest = table.remove(sides, math.max(a,\
    \ b, c))\n    local sum_of_squares = 0\n    for i, v in ipairs(sides) do\n   \
    \     sum_of_squares = sum_of_squares + v^2\n    end\n    return sum_of_squares\
    \ == biggest^2\nend", "  return a^2 + b^2 == c^2\nend", "\t-- TODO: your code\
    \ here\nend", "    if a == 0 or b == 0 or c == 0 then\n        return false\n\
    \    end\n    local max = math.max(a, b, c)\n    local sum = 0\n    if max ==\
    \ a then\n        sum = b * b + c * c\n    elseif max == b then\n        sum =\
    \ a * a + c * c\n    else\n        sum = a * a + b * b\n    end\n    if max *\
    \ max == sum then\n        return true\n    else\n        return false\n    end\n\
    end", "  if ( a^2 + b^2 == c^2 ) then return true\n  else return false\n  end\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
