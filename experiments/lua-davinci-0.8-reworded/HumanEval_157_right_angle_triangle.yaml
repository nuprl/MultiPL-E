name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- TODO: implement function\n    return  a^2 + b^2 == c^2\nend",
  "\tif a == math.sqrt(b^2 + c^2) or b == math.sqrt(a^2 + c^2) or c == math.sqrt(a^2\
    \ + b^2) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    --\
    \ INSERT YOUR CODE HERE\nend", "    local sides = {a, b, c}\n    table.sort(sides)\n\
    \    return sides[1]^2 + sides[2]^2 == sides[3]^2\nend", "    if a == b and b\
    \ == c then\n        return false\n    end\n    if a < b then\n        a, b =\
    \ b, a\n    end\n    if a < c then\n        a, c = c, a\n    end\n    return a\
    \ * a == b * b + c * c\nend", "\tlocal a2 = a * a\n\tlocal b2 = b * b\n\tlocal\
    \ c2 = c * c\n\treturn a2 + b2 == c2 or a2 + c2 == b2 or b2 + c2 == a2\nend",
  "    -- TODO: Implement it\n    return a*a + b*b == c*c\nend", "    local a2 = a\
    \ * a\n    local b2 = b * b\n    local c2 = c * c\n    if c2 == a2 + b2 then\n\
    \        return true\n    elseif a2 == b2 + c2 then\n        return true\n   \
    \ elseif b2 == a2 + c2 then\n        return true\n    else\n        return false\n\
    \    end\nend", "  -- your code here\nend", "  -- TODO: implement right_angle_triangle\n\
    \  return false\nend", "  -- BEGIN SOLUTION\n  return a^2 + b^2 == c^2\n  -- END\
    \ SOLUTION\nend", "    --find hypotenuse (longest side)\n    local max = math.max(a,\
    \ b, c)\n    local sum = a + b + c\n    local hypotenuse = sum - max\n    --check\
    \ if it is a right angle triangle\n    if max*max == hypotenuse*hypotenuse then\n\
    \        return true\n    else\n        return false\n    end\nend", "  return\
    \ false\nend", "  -- TODO: Implementation\nend", "    if (c^2 - (a^2 + b^2)) ==\
    \ 0 then\n        return true\n    else\n        return false\n    end\nend",
  "  if a^2 + b^2 == c^2 then return true\n  elseif a^2 + c^2 == b^2 then return true\n\
    \  elseif b^2 + c^2 == a^2 then return true\n  else return false\n  end\nend",
  "  local a, b, c = math.max(a, b, c), math.min(a, b, c),\n  math.min(math.max(a,\
    \ b), math.max(b, c))\n  return a * a - b * b - c * c == 0\nend", "    if (a^2\
    \ + b^2 == c^2) or (a^2 + c^2 == b^2) or (b^2 + c^2 == a^2) then\n        return\
    \ true\n    else\n        return false\n    end\nend", "    -- check the length\
    \ of sides is valid\n    if a == 0 or b == 0 or c == 0 then\n        return false\n\
    \    end\n    -- check the relationship between sides\n    if (a * a + b * b ==\
    \ c * c) or\n    (a * a + c * c == b * b) or\n    (b * b + c * c == a * a) then\n\
    \        return true\n    end\n    return false\nend", "  return a*a + b*b ==\
    \ c*c\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
