name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- sum all digits of N in binary number\n    local bin = math.tointeger(N)\n\
    \    local sum = 0\n    while bin > 0 do\n        sum = sum + bin % 2\n      \
    \  bin = math.floor(bin / 2)\n    end\n    return tostring(sum)\nend", "    return\
    \ dec2bin(N)\nend", "  -- your code here\nend", "    return tostring(0)\nend",
  "  -- your code here\nend", "  return N:to_binary()\nend", "  local sum = 0\n  local\
    \ stringN = tostring(N)\n  for i=1, #stringN do\n    local digit = tonumber(stringN:sub(i,i))\n\
    \    sum = sum + digit\n  end\n  return sum\nend", "  local bin = {}\n  local\
    \ j = 1\n  while N > 0 do\n    local remainder = N % 2\n    bin[j] = remainder\n\
    \    N = (N - remainder) / 2\n    j = j + 1\n  end\n  -- reverse array\n  local\
    \ len = #bin\n  local half = math.floor(len / 2)\n  for i = 1, half do\n    bin[i],\
    \ bin[len - i + 1] = bin[len - i + 1], bin[i]\n  end\n  return table.concat(bin)\n\
    end", "  local num = math.floor(N)\n  local total = 0\n  while num > 0 do\n  \
    \  local lsd = num % 2\n    num = math.floor(num / 2)\n    total = total + lsd\n\
    \  end\n  return tostring(total)\nend", "  local bit=require 'bit'\n  local bin=bit.tobinary(N)\n\
    \  return bin\nend", "    local r = 0\n    repeat\n        r = r + N % 2\n   \
    \     N = N / 2\n    until N <= 0\n    return r\nend", "  -- Write your code here\n\
    \  -- To print results to the standard output you can use print\n  -- Example:\
    \ print(\"Hello world\")\n  return tostring(N, 2)\nend", "    return string.format(\"\
    %b\", N)\nend", "  local function toBinary(n)\n    local b = ''\n    while n >\
    \ 0 do\n      local mod = n % 2\n      n = math.floor(n / 2)\n      b = mod ..\
    \ b\n    end\n    return b\n  end\n  local function sumDigits(n)\n    local s\
    \ = 0\n    while n > 0 do\n      local mod = n % 10\n      n = math.floor(n /\
    \ 10)\n      s = s + mod\n    end\n    return s\n  end\n  local sum = sumDigits(N)\n\
    \  return toBinary(sum)\nend", "  -- Binary representation of N\n  local bin =\
    \ string.format(\"%b\", N)\n  -- sum of digits of binary number\n  local sum =\
    \ 0\n  -- \n  for i = 1, #bin do\n    sum = sum + tonumber(bin:sub(i, i))\n  end\n\
    \  return tostring(sum)\nend", "    local binary = {}\n    local x = 0\n    local\
    \ sum = 0\n    for i = 10000, 0, -1 do\n        x = math.floor(N / i)\n      \
    \  if x == 1 then\n            table.insert(binary, x)\n            N = N - i\n\
    \        else\n            table.insert(binary, 0)\n        end\n    end\n   \
    \ for i, v in ipairs(binary) do\n        sum = sum + v\n    end\n    return sum\n\
    end", "  local function decimalToBinary(N)\n    return tonumber(N, 2)\n  end\n\
    \  local function countDigits(N)\n    local result = 0\n    for _ in tostring(N):gmatch(\"\
    .\") do\n      result = result + 1\n    end\n    return result\n  end\n  local\
    \ function addBinaryDigits(N)\n    local result = 0\n    for n in tostring(N):gmatch(\"\
    .\") do\n      result = result + tonumber(n)\n    end\n    return result\n  end\n\
    \  return addBinaryDigits(countDigits(decimalToBinary(N)))\nend", "    -- Write\
    \ your code here\n    -- To print results to the standard output you can use print\n\
    \    -- Example: print(\"Hello world\")\n    local result = ''\n    while N ~=\
    \ 0 do\n        local remainder = N % 2\n        N = math.floor(N / 2)\n     \
    \   result = remainder .. result\n    end\n    return result\nend\nreturn solve",
  "  local out = 0\n  while N > 0 do\n    out = out + N % 2\n    N = math.floor(N\
    \ / 2)\n  end\n  return out\nend", "  local result = 0\n  local number_to_string\
    \ = tostring(N)\n  for i = 1, #number_to_string do\n    result = result + tonumber(number_to_string:sub(i,\
    \ i))\n  end\n  return tostring(result)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
