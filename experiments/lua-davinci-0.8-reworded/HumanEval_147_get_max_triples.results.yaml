name: HumanEval_147_get_max_triples
language: lua
results:
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n\tlocal\
    \ c = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i + 1, n - 1 do\n\t\t\tfor k = j +\
    \ 1, n do\n\t\t\t\tif ((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) %\
    \ 3 == 0 then\n\t\t\t\t\tc = c + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\
    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local\
    \ count = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n      \
    \      for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ x = {}\n    for i = 1, n do\n        x[i] = i * i - i + 1\n    end\n    local\
    \ count = 0\n    for i = 1, n do\n        for j = i + 1, n do\n            for\
    \ k = j + 1, n do\n                if (x[i] + x[j] + x[k]) % 3 == 0 then\n   \
    \                 count = count + 1\n                end\n            end\n  \
    \      end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ a = { 1 }\n    for i = 2, n do\n        a[i] = i * i - i + 1\n    end\n    local\
    \ count = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n      \
    \      for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ s = {}\n    for i = 1, n do\n        s[i] = (i * i - i + 1) % 3\n    end\n \
    \   local f = {[0] = 0, [1] = 0, [2] = 0}\n    for i = 1, n do\n        f[s[i]]\
    \ = f[s[i]] + 1\n    end\n    local cnt = 0\n    for i = 1, n do\n        for\
    \ j = i + 1, n do\n            for k = j + 1, n do\n                if (s[i] +\
    \ s[j] + s[k]) % 3 == 0 then\n                    cnt = cnt + 1\n            \
    \    end\n            end\n        end\n    end\n    cnt = cnt + f[0] * (f[0]\
    \ - 1) * (f[0] - 2) / 6 + f[1] * f[2] * (f[1] - 1) / 2 + f[1] * f[2] * (f[2] -\
    \ 1) / 2\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0iow75b.lua:39:\
    \ expected: 36, actual: 37\nstack traceback:\n\t/tmp/tmpl0iow75b.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n\tlocal\
    \ arr = {}\n\tfor i = 1, n do\n\t\tarr[i] = i * i - i + 1\n\tend\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\t\tfor k = j + 1, n do\n\
    \t\t\t\tif arr[i] + arr[j] + arr[k] % 3 == 0 then\n\t\t\t\t\tcount = count + 1\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhlmtews.lua:32:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpyhlmtews.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n\tif n\
    \ < 3 then return 0 end\n\tlocal tmp = {}\n\tfor i = 1, n do\n\t\ttable.insert(tmp,\
    \ i * i - i + 1)\n\tend\n\tlocal cnt = 0\n\tfor i = 1, n - 2 do\n\t\tfor j = i\
    \ + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif (tmp[i] + tmp[j] + tmp[k])\
    \ % 3 == 0 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ ret = 0\n    local sum = 0\n    local a = {}\n    for i = 1, n do\n        a[i]\
    \ = i * i - i + 1\n    end\n    for i = 1, n - 2 do\n        for j = i + 1, n\
    \ - 1 do\n            for k = j + 1, n do\n                sum = a[i] + a[j] +\
    \ a[k]\n                if sum % 3 == 0 then\n                    ret = ret +\
    \ 1\n                end\n            end\n        end\n    end\n    return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n\
    \    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n\
    \    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ s = 0\n    for i = 1, n do\n        local a = i * i - i + 1\n        local r\
    \ = (a % 3)\n        if r == 0 then\n            s = s + ((n - i) * (n - i - 1)\
    \ / 2)\n        elseif r == 1 then\n            s = s + ((n - i) * (n - i - 1)\
    \ / 4)\n        else\n            s = s + ((n - i) * (n - i - 1) / 4)\n      \
    \  end\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd27c1cc8.lua:30:\
    \ expected: 1, actual: 6.5\nstack traceback:\n\t/tmp/tmpd27c1cc8.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local\
    \ res = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n        \
    \    for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0 then\n\
    \                    res = res + 1\n                end\n            end\n   \
    \     end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ a = {}\n    for i = 1, n do\n        a[i] = i * i - i + 1\n    end\n    local\
    \ result = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n     \
    \       for k = j + 1, n do\n                if (a[i] + a[j] + a[k]) % 3 == 0\
    \ then\n                    result = result + 1\n                end\n       \
    \     end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n  local\
    \ a = {}\n  for i = 1, n do a[i] = i * i - i + 1 end\n  local cnt = 0\n  for i\
    \ = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n    \
    \    if (a[i] + a[j] + a[k]) % 3 == 0 then cnt = cnt + 1 end\n      end\n    end\n\
    \  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ table_max = {}\n    for i = 1, n do\n        table_max[i] = i * i - i + 1\n\
    \    end\n    local result = 0\n    for i = 1, n - 2 do\n        for j = i + 1,\
    \ n - 1 do\n            for k = j + 1, n do\n                if (table_max[i]\
    \ + table_max[j] + table_max[k]) % 3 == 0 then\n                    result = result\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n\tlocal\
    \ t, sum = {}, 0\n\tfor i = 1, n do\n\t\tt[i] = i * i - i + 1\n\t\tif t[i] % 3\
    \ == 0 then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\tfor i = 1, n - 2 do\n\t\t\
    for j = i + 1, n - 1 do\n\t\t\tfor k = j + 1, n do\n\t\t\t\tif t[i] + t[j] + t[k]\
    \ % 3 == 0 then\n\t\t\t\t\tsum = sum + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgcq5ogh2.lua:34:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpgcq5ogh2.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    --\
    \ your code goes here\n    local res = 0\n    for i = 1, n - 2 do\n        for\
    \ j = i + 1, n - 1 do\n            for k = j + 1, n do\n                if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0 then\n               \
    \     res = res + 1\n                end\n            end\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.030 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n  local\
    \ tab = {}\n  for i = 1, n do\n    tab[i] = i * i - i + 1\n  end\n  local count\
    \ = 0\n  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1,\
    \ n do\n        if (tab[i] + tab[j] + tab[k]) % 3 == 0 then\n          count =\
    \ count + 1\n        end\n      end\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n\
    \    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n\
    \    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.020 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    --\
    \ Write your code here\n    -- a[i] = i * i - i + 1\n    -- a[i] + a[j] + a[k]\
    \ is a multiple of 3\n    -- a[i] + a[j] + a[k] % 3 == 0\n    -- a[i] % 3 == a[j]\
    \ % 3 == a[k] % 3 \n    -- let m = a[i] % 3 == 0\n    -- let n = a[i] % 3 == 1\n\
    \    -- let p = a[i] % 3 == 2\n    -- a[j] % 3 == 1 - m == n\n    -- a[k] % 3\
    \ == 2 - m == p\n    -- return m * n * p\n    local m = 0\n    local n = 0\n \
    \   local p = 0\n    for i = 1, n do\n        local temp = i * i - i + 1\n   \
    \     if temp % 3 == 0 then\n            m = m + 1\n        elseif temp % 3 ==\
    \ 1 then\n            n = n + 1\n        else\n            p = p + 1\n       \
    \ end\n    end\n    return m * n * p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6klhh21.lua:42:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpc6klhh21.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n    local\
    \ result = 0\n    for i = 1, n - 2 do\n        for j = i + 1, n - 1 do\n     \
    \       for k = j + 1, n do\n                if (i * i - i + 1 + j * j - j + 1\
    \ + k * k - k + 1) % 3 == 0 then\n                    result = result + 1\n  \
    \              end\n            end\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_max_triples\n\
    \    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6), 4)\n\
    \    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100), 53361)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.040 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n   local\
    \ sum = 0\n   for i = 1, n do\n      local a_i = i * i - i + 1\n      if a_i %\
    \ 3 == 0 then\n         sum = sum + 1\n      end\n   end\n   return sum * (n -\
    \ 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_max_triples\n    lu.assertEquals(candidate(5), 1)\n    lu.assertEquals(candidate(6),\
    \ 4)\n    lu.assertEquals(candidate(10), 36)\n    lu.assertEquals(candidate(100),\
    \ 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzrh8hva.lua:25:\
    \ expected: 1, actual: 6\nstack traceback:\n\t/tmp/tmpgzrh8hva.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- You are given a positive integer n. You have to create an integer table\
    \ a of length n.\n-- For each i (1 \u2264 i \u2264 n), the value of a[i] = i *\
    \ i - i + 1.\n-- Return the number of triples (a[i], a[j], a[k]) of a where i\
    \ < j < k, \n-- and a[i] + a[j] + a[k] is a multiple of 3.\n-- Example :\n-- >>>\
    \ get_max_triples(5)\n-- 1\n-- Explanation: \n-- a = [1, 3, 7, 13, 21]\n-- The\
    \ only valid triple is (1, 7, 13).\nlocal function get_max_triples(n)\n  local\
    \ a = {}\n  for i = 1, n do\n    a[i] = i * i - i + 1\n  end\n  local cnt = 0\n\
    \  for i = 1, n - 2 do\n    for j = i + 1, n - 1 do\n      for k = j + 1, n do\n\
    \        if (a[i] + a[j] + a[k]) % 3 == 0 then\n          cnt = cnt + 1\n    \
    \    end\n      end\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_max_triples\n    lu.assertEquals(candidate(5),\
    \ 1)\n    lu.assertEquals(candidate(6), 4)\n    lu.assertEquals(candidate(10),\
    \ 36)\n    lu.assertEquals(candidate(100), 53361)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.010 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
