language: lua
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and x + y ==\
    \ z or\n        math.floor(x) == x and math.floor(y) == y and math.floor(z) ==\
    \ z and x + z == y or\n        math.floor(x) == x and math.floor(y) == y and math.floor(z)\
    \ == z and y + z == x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4k6b9n7i.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4k6b9n7i.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and (x + y\
    \ == z or x + z == y or y + z == x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14or251h.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp14or251h.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ ((x + y == z) or (x + z == y) or (y + z == x)) and (x % 1 == 0) and (y % 1 ==\
    \ 0) and (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13_hb5xu.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp13_hb5xu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = y + z\n    return math.tointeger(x) and math.tointeger(y) and math.tointeger(z)\
    \ and (x == sum or y == sum or z == sum)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98uxom3o.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp98uxom3o.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8h9ibq8.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj8h9ibq8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \    return (x == y + z) or (y == x + z) or (z == x + y)\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3edk1gx.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz3edk1gx.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ x_is_int = is_int(x)\n    local y_is_int = is_int(y)\n    local z_is_int = is_int(z)\n\
    \    local x_plus_y = x + y\n    local x_plus_z = x + z\n    local y_plus_z =\
    \ y + z\n    if (x_is_int and y_is_int and z_is_int) then\n        if (x_plus_y\
    \ == z or x_plus_z == y or y_plus_z == x) then\n            return true\n    \
    \    else\n            return false\n        end\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqtj3hwlp.lua:14:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmpqtj3hwlp.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqtj3hwlp.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ ints = {}\n  if math.floor(x) == x then ints[#ints+1] = x end\n  if math.floor(y)\
    \ == y then ints[#ints+1] = y end\n  if math.floor(z) == z then ints[#ints+1]\
    \ = z end\n  if #ints < 3 then return false end\n  if ints[1] == ints[2] + ints[3]\
    \ then return true end\n  if ints[2] == ints[1] + ints[3] then return true end\n\
    \  if ints[3] == ints[1] + ints[2] then return true end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihwnutxj.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpihwnutxj.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporzscs87.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmporzscs87.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and (x + y\
    \ == z or x + z == y or y + z == x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7n5cgw_d.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7n5cgw_d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccl6gcij.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpccl6gcij.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpak4v3d2q.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpak4v3d2q.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \    if x == math.floor(x) and y == math.floor(y) and z == math.floor(z) then\n\
    \      if (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n\
    \      else\n        return false\n      end\n    else\n      return false\n \
    \   end\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7x43jgx.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe7x43jgx.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5mwjcid.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa5mwjcid.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplautg328.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplautg328.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ (x == (y + z)) and (x % 1 == 0) then\n    return true\n  elseif (y == (x + z))\
    \ and (y % 1 == 0) then\n    return true\n  elseif (z == (x + y)) and (z % 1 ==\
    \ 0) then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfi4dblo.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzfi4dblo.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ ((x == y + z) or (y == x + z) or (z == x + y)) and (x == math.floor(x)) and\
    \ (y == math.floor(y)) and (z == math.floor(z))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ppms5ek.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4ppms5ek.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ not((x % 1) + (y % 1) + (z % 1)) and (x + y == z or x + z == y or y + z == x)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperw1x4d8.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmperw1x4d8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufjluj6e.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufjluj6e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_a7z63w7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_a7z63w7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tl0rfz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm4tl0rfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufjluj6e.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufjluj6e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q5mktnd.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1q5mktnd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x + y == z or x + z == y or y + z == x then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xd_tn8_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8xd_tn8_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ isinteger(x) and isinteger(y) and isinteger(z) and\n            (x == y + z\
    \ or y == x + z or z == x + y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqqlb06r5.lua:14:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpqqlb06r5.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpqqlb06r5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tl0rfz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm4tl0rfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ YOUR SOLUTION HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnazcvqn.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdnazcvqn.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  if sum % 2 == 0 and sum % 3 == 0 then\n    return true\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppeazbrz1.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppeazbrz1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    return (x == sum - y and x == sum - z) or (y == sum - x\
    \ and y == sum - z) or (z == sum - x and z == sum - y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6evln6y.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb6evln6y.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (math.floor(x) + math.floor(y) == math.floor(z)) or (math.floor(x) + math.floor(z)\
    \ == math.floor(y)) or (math.floor(y) + math.floor(z) == math.floor(x))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxittygdk.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxittygdk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ ((x + y == z) or (x + z == y) or (y + z == x)) and (is_int(x) and is_int(y)\
    \ and is_int(z)) then\n        return true\n    else\n        return false\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62bxmsbt.lua:14:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmp62bxmsbt.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp62bxmsbt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ not math.type(x) or not math.type(y) or not math.type(z) then\n    return false\n\
    \  end\n  return x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_z93ishq.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_z93ishq.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ you can add extra code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1law9not.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1law9not.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ (x == y + z or y == x + z or z == x + y) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5p2kfp6e.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5p2kfp6e.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sbqct4u.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7sbqct4u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn97nini9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn97nini9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ex15hla.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ex15hla.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ x1 = x + y\n    local x2 = x + z\n    local x3 = y + z\n    if x1 == z or x2\
    \ == y or x3 == x then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ehscb6h.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ehscb6h.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5mwjcid.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa5mwjcid.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x%1 == 0 and y%1 == 0 and z%1 == 0 and\n        (x == y + z or y == x + z or\
    \ z == x + y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz33t4egb.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz33t4egb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ex15hla.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ex15hla.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ max = math.max(x, y, z)\n    local sum = x + y + z - max\n    if type(x) ==\
    \ \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n      \
    \  if x - math.floor(x) ~= 0 or y - math.floor(y) ~= 0 or z - math.floor(z) ~=\
    \ 0 then\n            return false\n        elseif max == sum then\n         \
    \   return true\n        else\n            return false\n        end\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoky8d0yw.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoky8d0yw.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ temp = {x, y, z}\n  table.sort(temp)\n  if (temp[1] == temp[2] + temp[3]) and\
    \ (math.floor(temp[1]) == temp[1]) and (math.floor(temp[2]) == temp[2]) and (math.floor(temp[3])\
    \ == temp[3]) then\n    return true\n  else\n    return false\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5poo5s_3.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5poo5s_3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqygpihm1.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqygpihm1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 0
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ math.type(x) == \"integer\" and math.type(y) == \"integer\" and math.type(z)\
    \ == \"integer\" then\n    if x + y == z or x + z == y or y + z == x then\n  \
    \    return true\n    else\n      return false\n    end\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptji5fixl.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptji5fixl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  if sum - x == x and (sum - x) % 1 == 0 then\n    return true\n\
    \  elseif sum - y == y and (sum - y) % 1 == 0 then\n    return true\n  elseif\
    \ sum - z == z and (sum - z) % 1 == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqmipfpva.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqmipfpva.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ if any of the variables have a decimal point\n  if x % 1 ~= 0 or y % 1 ~= 0\
    \ or z % 1 ~= 0 then\n    return false\n  end\n  if x + y == z or x + z == y or\
    \ y + z == x then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufyrqpar.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufyrqpar.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp794il31x.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp794il31x.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7afdhd7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg7afdhd7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ ((x == y + z) or (y == x + z) or (z == x + y)) and (x % 1 == 0) and (y % 1 ==\
    \ 0) and (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbxo3iww.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsbxo3iww.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ (x % 1 ~= 0) or (y % 1 ~= 0) or (z % 1 ~= 0) then\n    return false\n  end\n\
    \  if (x == y + z) or (y == x + z) or (z == x + y) then\n    return true\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d_fcy0s.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7d_fcy0s.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z then\n        return true\n    elseif y == x + z then\n        return\
    \ true\n    elseif z == x + y then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj51m0yx3.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj51m0yx3.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ x == y + z then\n    return true\n  elseif y == x + z then\n    return true\n\
    \  elseif z == x + y then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35r02_7p.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp35r02_7p.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" and\n\
    \    (x == y + z or y == x + z or z == x + y) and x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4tigeaa.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy4tigeaa.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\
    \    return false\n  end\n  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y + z or y == x + z or z ==\
    \ x + y\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7nyhul7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt7nyhul7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if x == y + z or y == x + z or z == x + y then\n            return true\n\
    \        else\n            return false\n        end\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6ijl8mz.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe6ijl8mz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ x + y == z then\n    return true\n  elseif x + z == y then\n    return true\n\
    \  elseif y + z == x then\n    return true\n  elseif z + y == x then\n    return\
    \ true\n  elseif x + y == z then\n    return true\n  elseif x + z == y then\n\
    \    return true\n  elseif y + z == x then\n    return true\n  elseif z + y ==\
    \ x then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g92wcwc.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3g92wcwc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ x == y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnndr0k90.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnndr0k90.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    return (x == sum or y == sum or z == sum) and\n       \
    \ (math.floor(x) == x and math.floor(y) == y and math.floor(z) == z)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp303zazvy.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp303zazvy.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3eutkyf.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmps3eutkyf.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ Write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedidfzbn.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpedidfzbn.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxxtslpk.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmppxxtslpk.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) then\n        if (x == y + z)\
    \ or (y == x + z) or (z == x + y) then\n            return true\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8wz2054.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr8wz2054.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ TODO: your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hwx1r6x.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp1hwx1r6x.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ TODO: Implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2baj5ks.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpn2baj5ks.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0jzk_55.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi0jzk_55.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp794il31x.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp794il31x.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e53t334.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9e53t334.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) then\n        if (x + y == z)\
    \ or (x + z == y) or (y + z == x) then\n            return true\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3xoc2rt.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph3xoc2rt.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and ((x + y == z) or (x + z == y) or\
    \ (y + z == x))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfud34q3c.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfud34q3c.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo4bhkka.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmo4bhkka.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\"\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzqa8grs.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptzqa8grs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0) then\n        return true\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbuorwzt_.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbuorwzt_.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ s = {x, y, z}\n  local sum = 0\n  for _, v in ipairs(s) do\n    sum = sum +\
    \ v\n  end\n  for _, v in ipairs(s) do\n    if sum - v == v then\n      return\
    \ true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagrlg7rb.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpagrlg7rb.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x - y == z) or (x - z == y) or (y - x == z) or (y - z == x) or (z - x == y)\
    \ or (z - y == x) then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l2hak3t.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9l2hak3t.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ (x % 1 == 0 and y % 1 == 0 and z % 1 == 0) and ((x + y == z) or (x + z == y)\
    \ or (y + z == x))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61kwe7hr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp61kwe7hr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ x == y + z or y == x + z or z == x + y then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nprint(any_int(5, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3,\
    \ -2, 1))\nprint(any_int(3.6, -2.2, 2))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp118vko9h.lua:30: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp118vko9h.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q5mktnd.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1q5mktnd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and ((x + y\
    \ == z) or (x + z == y) or (y + z == x))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_nye5o6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz_nye5o6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ (math.floor(x) ~= x) or (math.floor(y) ~= y) or (math.floor(z) ~= z) then\n\
    \    return false\n  end\n  return ((x + y == z) or (x + z == y) or (y + z ==\
    \ x))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfkn47je9.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfkn47je9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ TODO: implement this\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp81ge8tpk.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp81ge8tpk.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4tl0rfz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm4tl0rfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) and (isint(x) and isint(y) and isint(z)) then\n        return true\n\
    \    elseif (x + z == y) and (isint(x) and isint(y) and isint(z)) then\n     \
    \   return true\n    elseif (y + z == x) and (isint(x) and isint(y) and isint(z))\
    \ then\n        return true\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4qea57y.lua:16:\
    \ attempt to call a nil value (global 'isint')\nstack traceback:\n\t/tmp/tmpm4qea57y.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpm4qea57y.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ a = x + y\n  local b = x + z\n  local c = y + z\n  return (a == z) or (b ==\
    \ y) or (c == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zd166a1.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8zd166a1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\
    \        return false\n    end\n    if math.floor(x) ~= x or math.floor(y) ~=\
    \ y or math.floor(z) ~= z then\n        return false\n    end\n    if (x + y ==\
    \ z) or (x + z == y) or (y + z == x) then\n        return true\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufw_zgah.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufw_zgah.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko83fwe9.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpko83fwe9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ not (x % 1 == 0 and y % 1 == 0 and z % 1 == 0) then\n        return false\n\
    \    end\n    if x == y + z or y == x + z or z == x + y then\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj6iiv9w.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxj6iiv9w.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o1wi647.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp2o1wi647.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ function is_int(x)\n        return x % 1 == 0\n    end\n    return x + y ==\
    \ z or x + z == y or y + z == x and is_int(x) and is_int(y) and is_int(z)\nend\n\
    assert(any_int(5, 2, 7))\nassert(any_int(3, -2, 1))\nassert(not any_int(3, 2,\
    \ 2))\nassert(not any_int(3.6, -2.2, 2))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf05i8s4.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgf05i8s4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ isinteger(x) and isinteger(y) and isinteger(z) then\n        if x == y + z or\
    \ y == x + z or z == x + y then\n            return true\n        else\n     \
    \       return false\n        end\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi_lelgx9.lua:14:\
    \ attempt to call a nil value (global 'isinteger')\nstack traceback:\n\t/tmp/tmpi_lelgx9.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpi_lelgx9.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ sum = x + y + z\n  return sum % 3 == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jq9h0l5.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1jq9h0l5.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ true or false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0mwhe3m.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf0mwhe3m.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5mwjcid.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa5mwjcid.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ your code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuzs_i0y.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpwuzs_i0y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ math.floor(x) ~= x or math.floor(y) ~= y or math.floor(z) ~= z then\n    return\
    \ false\n  end\n  return x == y + z or y == x + z or z == x + y\nend\nassert(any_int(5,\
    \ 2, 7))\nassert(not any_int(3, 2, 2))\nassert(any_int(3, -2, 1))\nassert(not\
    \ any_int(3.6, -2.2, 2))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd0fzvne2.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd0fzvne2.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ not is_int(x) or not is_int(y) or not is_int(z) then\n        return false\n\
    \    end\n    return x == y + z or y == x + z or z == x + y\nend\nexports.any_int\
    \ = any_int\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmppg2xqgka.lua:19: attempt to index a nil value (global 'exports')\n\
    stack traceback:\n\t/tmp/tmppg2xqgka.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ function code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfnveb5p.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpkfnveb5p.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or x + z == y or y\
    \ + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9gq7o7d.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz9gq7o7d.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ a = x + y\n    local b = x + z\n    local c = y + z\n    return (a == x or a\
    \ == y or a == z) and x == math.floor(x) and y == math.floor(y) and z == math.floor(z)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoinguiek.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoinguiek.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ any_equal(x + y, z) or any_equal(x + z, y) or any_equal(y + z, x)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0o88lbxg.lua:14:\
    \ attempt to call a nil value (global 'any_equal')\nstack traceback:\n\t/tmp/tmp0o88lbxg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0o88lbxg.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z\
    \ % 1 == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnda6xsu2.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnda6xsu2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q5mktnd.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1q5mktnd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp794il31x.lua:19:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp794il31x.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k24mol6.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1k24mol6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x + y == z or x + z == y or y + z == x then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xd_tn8_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8xd_tn8_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e53t334.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9e53t334.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3eutkyf.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmps3eutkyf.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x == y + z or y == x + z or z == x + y) and (type(x) == 'number' and type(y)\
    \ == 'number' and type(z) == 'number') then\n        return true\n    else\n \
    \       return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36uo5ah1.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp36uo5ah1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ex15hla.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8ex15hla.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ x_p, y_p, z_p = math.floor(x) == x, math.floor(y) == y, math.floor(z) == z\n\
    \  return (x_p and y_p and z_p) and ((x == y + z) or (y == x + z) or (z == x +\
    \ y))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufcm6u44.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufcm6u44.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w1xkwkc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7w1xkwkc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ result = false\n  if (x + y == z) or (x + z == y) or (y + z == x) then\n   \
    \ result = true\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xc93g3k.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2xc93g3k.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ ((x == y + z) or (y == x + z) or (z == x + y)) and (x % 1 == 0) and (y % 1 ==\
    \ 0) and (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctl9ogjg.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpctl9ogjg.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ x == y + z or y == x + z or z == x + y then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu11dh__3.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu11dh__3.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_8owcdz.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9_8owcdz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ is_integer = function(value)\n        return math.floor(value) == value\n  \
    \  end\n    if is_integer(x) and is_integer(y) and is_integer(z) then\n      \
    \  if x == y + z or y == x + z or z == x + y then\n            return true\n \
    \       end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp462wzuk4.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp462wzuk4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tlocal\
    \ sum = x + y\n\tif math.mod(x, 1) == 0 and math.mod(y, 1) == 0 and math.mod(z,\
    \ 1) == 0 then\n\t\tif z == sum or x == sum or y == sum then\n\t\t\treturn true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxozktdu1.lua:15:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpxozktdu1.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxozktdu1.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5q_21ns.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpl5q_21ns.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ Return true if one of the numbers is equal to the sum of the other two, and\
    \ all numbers are integers.\n    return (x == (y + z) or y == (x + z) or z ==\
    \ (x + y)) and (x == math.floor(x) and y == math.floor(y) and z == math.floor(z))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcaeehao.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqcaeehao.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if x == math.floor(x) and y == math.floor(y) and z == math.floor(z) then\n\
    \            return (x + y == z) or (x + z == y) or (y + z == x)\n        end\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xcpcqgm.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3xcpcqgm.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if math.ceil(x) == x and math.ceil(y) == y and math.ceil(z) == z then\n\
    \            if x == y + z or y == x + z or z == x + y then\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    else\n            return false\n        end\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_wyc01v.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt_wyc01v.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ total = x + y + z\n    if (x == total - x - y or y == total - x - z or z ==\
    \ total - x - y) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        return\
    \ true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fq90_m2.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0fq90_m2.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ result = false\n    if (x == y + z) and (x == math.floor(x)) then\n        result\
    \ = true\n    elseif (y == x + z) and (y == math.floor(y)) then\n        result\
    \ = true\n    elseif (z == x + y) and (z == math.floor(z)) then\n        result\
    \ = true\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xd5i3lp.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0xd5i3lp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7sbqct4u.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7sbqct4u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    local check = x == sum or y == sum or z == sum\n    return\
    \ check and (x == math.floor(x) and y == math.floor(y) and z == math.floor(z))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kt9gna8.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0kt9gna8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ (x + y == z or x + z == y or y + z == x) and (x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z)) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcdcobw2.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbcdcobw2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ ((x + y == z) or (x + z == y) or (y + z == x)) and (x % 1 == 0) and (y % 1 ==\
    \ 0) and (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fo6elue.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7fo6elue.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\
    \    return false\n  end\n  if math.floor(x) ~= x or math.floor(y) ~= y or math.floor(z)\
    \ ~= z then\n    return false\n  end\n  if x == y + z or y == x + z or z == x\
    \ + y then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg1exm0fw.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg1exm0fw.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ is_int = true\n    local nums = {x, y, z}\n    for i, v in ipairs(nums) do\n\
    \        if v ~= math.floor(v) then\n            is_int = false\n        end\n\
    \    end\n    if is_int then\n        local sum = 0\n        for i, v in ipairs(nums)\
    \ do\n            sum = sum + v\n        end\n        for i, v in ipairs(nums)\
    \ do\n            if v == sum - v then\n                return true\n        \
    \    end\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1bp1hsd.lua:47:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk1bp1hsd.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa_cjin9.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaa_cjin9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn97nini9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn97nini9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        return (x - math.floor(x) == 0 and y - math.floor(y) == 0 and z - math.floor(z)\
    \ == 0 and\n            (x == y + z or y == x + z or z == x + y))\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgk8mfp_l.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgk8mfp_l.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ y + z == x or z + x == y or x + y == z\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0hw7t84.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi0hw7t84.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ ints = {\n        [3] = true,\n        [4] = true,\n        [5] = true,\n  \
    \      [6] = true,\n        [7] = true,\n        [8] = true,\n        [9] = true,\n\
    \        [10] = true,\n        [11] = true,\n        [12] = true,\n        [13]\
    \ = true,\n        [14] = true,\n        [15] = true,\n        [16] = true,\n\
    \        [17] = true,\n        [18] = true,\n        [19] = true,\n        [20]\
    \ = true,\n        [21] = true,\n        [22] = true,\n        [23] = true,\n\
    \        [24] = true,\n        [25] = true,\n        [26] = true,\n        [27]\
    \ = true,\n        [28] = true,\n        [29] = true,\n        [30] = true,\n\
    \        [31] = true,\n        [32] = true,\n        [33] = true,\n        [34]\
    \ = true,\n        [35] = true,\n        [36] = true,\n        [37] = true,\n\
    \        [38] = true,\n        [39] = true,\n        [40] = true,\n        [41]\
    \ = true,\n        [42] = true,\n        [43] = true,\n        [44] = true,\n\
    \        [45] = true,\n        [46] = true,\n        [47] = true,\n        [48]\
    \ = true,\n        [49] = true,\n        [50] = true,\n        [51] = true,\n\
    \        [52] = true,\n        [53] = true,\n        [54] = true,\n        [55]\
    \ = true,\n        [56] = true,\n        [57] = true,\n        [58] = true,\n\
    \        [59] = true,\n        [60] = true,\n        [61] = true,\n        [62]\
    \ = true,\n        [63] = true,\n        [64] = true,\n        [65] = true,\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2zbjohh2.lua:81: ''}'' expected (to close ''{'' at line 14)
    near ''function''

    '
  stdout: ''
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\treturn\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) and ((x == y + z) or (y == x\
    \ + z) or (z == x + y))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nh6aoe6.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2nh6aoe6.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ ((x + y == z) or (x + z == y) or (y + z == x)) and (x % 1 == 0) and (y % 1 ==\
    \ 0) and (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp13_hb5xu.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp13_hb5xu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 and (x + y == z or x + z == y or y\
    \ + z == x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyt6w1fi.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyyt6w1fi.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \        if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z then\n\
    \            if x == y + z or y == x + z or z == x + y then\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    else\n            return false\n        end\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4i54pys.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz4i54pys.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ x = math.floor(x)\n    local y = math.floor(y)\n    local z = math.floor(z)\n\
    \    if x == y + z or y == x + z or z == x + y then\n        return true\n   \
    \ else\n        return false\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8xxm815.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi8xxm815.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  x_sum\
    \ = x + y\n  y_sum = x + z\n  z_sum = y + z\n  if (x_sum == z or y_sum == y or\
    \ z_sum == x) and (x % 1 == 0 and y % 1 == 0 and z % 1 == 0) then\n    return\
    \ true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjt4w8auh.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjt4w8auh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    return x == sum or y == sum or z == sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cy42zda.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9cy42zda.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ (type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\")\
    \ then\n\t\tif (x == y + z or y == x + z or z == x + y) then\n\t\t\treturn true\n\
    \t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70pfjdr2.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp70pfjdr2.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn97nini9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn97nini9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x==y+z or y==x+z or z==x+y) and type(x)=='number' and type(y)=='number' and\
    \ type(z)=='number'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6dw1l7j.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe6dw1l7j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2apdopx.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb2apdopx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ values = {x, y, z}\n    local sorted = sort(values)\n    return sorted[1] +\
    \ sorted[2] == sorted[3]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp33pcvo7n.lua:15:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmp33pcvo7n.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp33pcvo7n.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ stuff\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpsx9b31.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdpsx9b31.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko83fwe9.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpko83fwe9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3inw22r.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpx3inw22r.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ sum = x + y + z\n    return (sum - math.floor(sum)) == 0 and\n    (math.abs(x)\
    \ == math.abs(y) + math.abs(z) or\n    math.abs(y) == math.abs(x) + math.abs(z)\
    \ or\n    math.abs(z) == math.abs(x) + math.abs(y))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpq12v4g.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprpq12v4g.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ math.floor(x) == x and math.floor(y) == y and math.floor(z) == z and (x + y\
    \ == z or x + z == y or y + z == x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp14or251h.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp14or251h.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ is_int(x) == false or is_int(y) == false or is_int(z) == false then\n      \
    \  return false\n    end\n    return x + y == z or x + z == y or y + z == x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsghbzuyl.lua:14:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmpsghbzuyl.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsghbzuyl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x + y == z or x + z == y or y + z == x then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xd_tn8_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8xd_tn8_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufjluj6e.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufjluj6e.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ is_int(x) and is_int(y) and is_int(z) then\n        return x + y == z or x +\
    \ z == y or y + z == x\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlgznu9x.lua:14:\
    \ attempt to call a nil value (global 'is_int')\nstack traceback:\n\t/tmp/tmptlgznu9x.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmptlgznu9x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ TODO: Write a function that returns true if one of the numbers is equal to the\
    \ sum of the other two.\n  if x+y == z or x+z == y or y+z == x then\n    return\
    \ true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm_9z8e7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgm_9z8e7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfpppkuo.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppfpppkuo.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ x_ = x\n  local y_ = y\n  local z_ = z\n  if math.floor(x_) ~= x or math.floor(y_)\
    \ ~= y or math.floor(z_) ~= z then\n    return false\n  end\n  if x_ == y_ + z_\
    \ or y_ == x_ + z_ or z_ == x_ + y_ then\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5j3pgp7.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg5j3pgp7.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n    return x == y + z or y ==\
    \ x + z or z == x + y\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_5zf8cn.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq_5zf8cn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ x + y == z or x + z == y or y + z == x\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa_cjin9.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaa_cjin9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko83fwe9.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpko83fwe9.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1k24mol6.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1k24mol6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ x_is_int = math.floor(x) == x\n  local y_is_int = math.floor(y) == y\n  local\
    \ z_is_int = math.floor(z) == z\n  return x_is_int and y_is_int and z_is_int and\
    \ (x == y + z or y == x + z or z == x + y)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e6hxuwl.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5e6hxuwl.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and\n        (type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb3sb94h.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppb3sb94h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n\
    \        return false\n    end\n    if math.floor(x) ~= x or math.floor(y) ~=\
    \ y or math.floor(z) ~= z then\n        return false\n    end\n    if x + y ==\
    \ z or x + z == y or y + z == x then\n        return true\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpnijzny.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzpnijzny.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ ((x + y == z) or (x + z == y) or (y + z == x)) and ((math.floor(x) == x) and\
    \ (math.floor(y) == y) and (math.floor(z) == z))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp31m9891w.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp31m9891w.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" and\n\
    \         x == floor(x) and y == floor(y) and z == floor(z) and\n         (x ==\
    \ y + z or y == x + z or z == x + y)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdglkg72.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpxdglkg72.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxdglkg72.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        if x == y + z or y ==\
    \ x + z or z == x + y then\n            return true\n        else\n          \
    \  return false\n        end\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3p85828a.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3p85828a.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo4bhkka.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmo4bhkka.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e53t334.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp9e53t334.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ (x == y + z) and (x - math.floor(x) == 0) then\n    return true\n  elseif (y\
    \ == x + z) and (y - math.floor(y) == 0) then\n    return true\n  elseif (z ==\
    \ x + y) and (z - math.floor(z) == 0) then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7p5r_g1.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph7p5r_g1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ (x + y == z or x + z == y or y + z == x) and x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vye0m8n.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1vye0m8n.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ type(x) == \"number\" and\n  type(y) == \"number\" and\n  type(z) == \"number\"\
    \ and\n  x % 1 == 0 and\n  y % 1 == 0 and\n  z % 1 == 0 and\n  (x == y + z or\n\
    \  y == x + z or\n  z == x + y)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrzvm4te.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmrzvm4te.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ x == y + z then\n    return true\n  elseif y == x + z then\n    return true\n\
    \  elseif z == x + y then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp35r02_7p.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp35r02_7p.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x%1 ~= 0 or y%1 ~= 0 or z%1 ~= 0 then\n        return false\n    end\n    return\
    \ x == y + z or y == x + z or z == x + y\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetvdebuj.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpetvdebuj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps3eutkyf.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmps3eutkyf.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ l = {x, y, z}\n    local m = math.min(x, y, z)\n    local s = math.max(x, y,\
    \ z)\n    for i, v in ipairs(l) do\n        if v == s + m and v ~= s and v ~=\
    \ m then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk84dlz5p.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpk84dlz5p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ BEGIN\n  return (x + y == z) or (x + z == y) or (y + z == x)\n  -- END\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4u3mjho.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb4u3mjho.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    local\
    \ function is_int(x)\n        return type(x) == \"number\" and x == math.floor(x)\n\
    \    end\n    if not is_int(x) or not is_int(y) or not is_int(z) then\n      \
    \  return false\n    end\n    return x + y == z or x + z == y or y + z == x\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jje8wel.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3jje8wel.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0) then\n\t\tif x == y + z or y\
    \ == x + z or z == x + y then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3y9_1te.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_3y9_1te.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ (x == y + z or y == x + z or z == x + y) and (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporb41r8e.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmporb41r8e.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \ not (math.floor(x) == x and math.floor(y) == y and math.floor(z) == z) and false\
    \ or (x + y == z or x + z == y or y + z == x)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgoo02v3.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphgoo02v3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ x % 1 == 0 then\n    if y % 1 == 0 then\n      if z % 1 == 0 then\n        if\
    \ x + y == z then\n          return true\n        elseif x + z == y then\n   \
    \       return true\n        elseif y + z == x then\n          return true\n \
    \       else\n          return false\n        end\n      else\n        return\
    \ false\n      end\n    else\n      return false\n    end\n  else\n    return\
    \ false\n  end\nend\nprint(any_int(3, 2, 7))\nprint(any_int(3, 2, 2))\nprint(any_int(3,\
    \ -2, 1))\nprint(any_int(3.6, -2.2, 2))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\ntrue\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmppl_2lpko.lua:53: expected: false, actual: true\nstack traceback:\n\t/tmp/tmppl_2lpko.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphejx7_4m.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmphejx7_4m.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    if\
    \ x + y == z or x + z == y or y + z == x then\n        return true\n    else\n\
    \        return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xd_tn8_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8xd_tn8_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ list = {x, y, z}\n  local is_int = function(n) return math.floor(n) == n end\n\
    \  local is_sum = function(a, b, c) return a + b == c or a + c == b or b + c ==\
    \ a end\n  for _, n in ipairs(list) do\n    if not is_int(n) then return false\
    \ end\n  end\n  return is_sum(x, y, z)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuwa0kkl.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnuwa0kkl.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ check that all parameters are integers\n    if x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z) then\n        -- check that the sum of any two numbers\
    \ equals the remaining one\n        if x + y == z or x + z == y or y + z == x\
    \ then\n            return true\n        end\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
    \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvdu4wbt.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmvdu4wbt.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  local\
    \ x_int = math.floor(x) == x\n  local y_int = math.floor(y) == y\n  local z_int\
    \ = math.floor(z) == z\n  return (x_int and y_int and z_int) and ((x == y + z)\
    \ or (y == x + z) or (z == x + y))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vttsqco.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0vttsqco.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    return\
    \  x % 1 == 0 and\n            y % 1 == 0 and\n            z % 1 == 0 and\n  \
    \          (\n                x == y + z or\n                y == x + z or\n \
    \               z == x + y\n            )\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpip_lc31j.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpip_lc31j.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  --\
    \ 1: Check if all the numbers are integers.\n  -- 2: Check if any of the numbers\
    \ are equal to the sum of the other two.\n  -- 3: Return true if any of the two\
    \ conditions are true.\n  -- 4: Return false in any other cases.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeaqsz0za.lua:23:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpeaqsz0za.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo4bhkka.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmo4bhkka.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x+y == z or x+z == y or y+z == x) and x % 1 == 0 and y % 1 == 0 and z % 1 ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_wg9ula.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn_wg9ula.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqygpihm1.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqygpihm1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n   \
    \ lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp552b3y_m.lua:20:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp552b3y_m.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  if\
    \ (x == y + z or y == x + z or z == x + y) and x%1 == 0 and y%1 == 0 and z%1 ==\
    \ 0 then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllf0lppr.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpllf0lppr.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x+y == z or x+z == y or y+z == x) and (x % 1 == 0 and y % 1 == 0 and z % 1\
    \ == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2i24c_z.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu2i24c_z.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n\tif\
    \ x + y == z or x + z == y or y + z == x then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx9duu8p.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplx9duu8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = any_int\n    lu.assertEquals(candidate(2,\
    \ 3, 1), true)\n    lu.assertEquals(candidate(2.5, 2, 3), false)\n    lu.assertEquals(candidate(1.5,\
    \ 5, 3.5), false)\n    lu.assertEquals(candidate(2, 6, 2), false)\n    lu.assertEquals(candidate(4,\
    \ 2, 2), true)\n    lu.assertEquals(candidate(2.2, 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4,\
    \ 6, 2), true)\n    lu.assertEquals(candidate(2, 1, 1), true)\n    lu.assertEquals(candidate(3,\
    \ 4, 7), true)\n    lu.assertEquals(candidate(3.0, 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqygpihm1.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqygpihm1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
- exit_code: 1
  program: "-- Create a function that takes 3 numbers.\n-- Returns true if one of\
    \ the numbers is equal to the sum of the other two, and all numbers are integers.\n\
    -- Returns false in any other cases.\n-- Examples\n-- >>> any_int(5, 2, 7)\n--\
    \ true\n-- >>> any_int(3, 2, 2)\n-- false\n-- >>> any_int(3, -2, 1)\n-- true\n\
    -- >>> any_int(3.6, -2.2, 2)\n-- false\nlocal function any_int(x, y, z)\n  return\
    \ (x + y == z or x + z == y or y + z == x) and (x % 1 == 0) and (y % 1 == 0) and\
    \ (z % 1 == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = any_int\n    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
    \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
    \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
    \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
    \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa88y_a1_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa88y_a1_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978432
