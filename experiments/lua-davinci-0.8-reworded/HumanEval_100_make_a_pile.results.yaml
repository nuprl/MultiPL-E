name: HumanEval_100_make_a_pile
language: lua
results:
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local pile = {}\n    local i = 1\n    while n > 0 do\n        pile[i] = n\n\
    \        if n % 2 == 0 then\n            n = n + 1\n        else\n           \
    \ n = n + 2\n        end\n        i = i + 1\n    end\n    return pile\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
    \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local t = {}\n  while n > 0 do\n    t[#t+1] = n\n    n = n % 2 == 0 and n +\
    \ 1 or n + 2\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local t = {}\n  for i = 1, n do\n    table.insert(t, ((i-1)*2)+n)\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local t = {}\n  for i = 1, n do\n    t[i] = (2 * i - 1) * n\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_b1f4y9w.lua:22:\
    \ expected: {3, 5, 7}\nactual: {3, 9, 15}\nstack traceback:\n\t/tmp/tmp_b1f4y9w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local result = {}\n  local current = n\n  for i = 1, n do\n    result[i] =\
    \ current\n    if current % 2 == 0 then\n      current = current + 1\n    else\n\
    \      current = current + 2\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3),\
    \ {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwycjlpa1.lua:29:\
    \ expected: {4, 6, 8, 10}\nactual: {4, 5, 7, 9}\nstack traceback:\n\t/tmp/tmpwycjlpa1.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local r = {}\n  while n > 0 do\n    r[#r+1] = n\n    n = n + (n % 2 == 0 and\
    \ 2 or 1)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local t = {}\n    for i = 1, n do\n        t[i] = (i * 2) - 1\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn5iadx9w.lua:22:\
    \ expected: {3, 5, 7}\nactual: {1, 3, 5}\nstack traceback:\n\t/tmp/tmpn5iadx9w.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local pile = {}\n  for i = 1, n do\n    pile[i] = n\n    if (n % 2 == 0) then\n\
    \      n = n + 1\n    else\n      n = n + 2\n    end\n  end\n  return pile\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_a_pile\n\
    \    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuerqm_g.lua:28:\
    \ expected: {4, 6, 8, 10}\nactual: {4, 5, 7, 9}\nstack traceback:\n\t/tmp/tmpvuerqm_g.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local t = {}\n    while n ~= 0 do\n        t[#t+1] = n\n        if n % 2\
    \ == 0 then\n            n = n / 2\n        else\n            n = (n - 1) / 2\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3),\
    \ {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgrbb4_f.lua:27:\
    \ expected: {3, 5, 7}\nactual: {3, 1}\nstack traceback:\n\t/tmp/tmplgrbb4_f.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local pile = {}\n  local i = 1\n  while n > 0 do\n    pile[i] = n\n    if n\
    \ % 2 == 0 then\n      n = n + 1\n    else\n      n = n + 2\n    end\n    i =\
    \ i + 1\n  end\n  return pile\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local pile = {}\n    for i = 1, n do\n        pile[i] = n + 2 * i - 1\n \
    \   end\n    return pile\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpna0owe58.lua:22:\
    \ expected: {3, 5, 7}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmpna0owe58.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local pile = {}\n  for i = 1, n do\n    table.insert(pile, 2 * i - 1)\n  end\n\
    \  return pile\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1y116t3.lua:22:\
    \ expected: {3, 5, 7}\nactual: {1, 3, 5}\nstack traceback:\n\t/tmp/tmpp1y116t3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local pile = {}\n    for i = 1, n do\n        table.insert(pile, i * 2 -\
    \ 1)\n    end\n    return pile\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajcpfhag.lua:22:\
    \ expected: {3, 5, 7}\nactual: {1, 3, 5}\nstack traceback:\n\t/tmp/tmpajcpfhag.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  if n < 1 then\n    return nil\n  end\n  local result = {}\n  for i = 0, n-1\
    \ do\n    table.insert(result, n+i*2)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3),\
    \ {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local res = {}\n  while n >= 1 do\n    res[#res+1] = n\n    n = (n % 2 == 0)\
    \ and (n + 1) or (n + 2)\n  end\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3),\
    \ {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \  local stones = {n}\n  while n > 1 do\n    n = n + ((n % 2 == 0) and 1 or 2)\n\
    \    table.insert(stones, n)\n  end\n  return stones\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3),\
    \ {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    -- implement your solution here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_a_pile\n    lu.assertEquals(candidate(3),\
    \ {3, 5, 7})\n    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnj5axj9.lua:18:\
    \ expected: {3, 5, 7}\nactual: nil\nstack traceback:\n\t/tmp/tmppnj5axj9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local t = {}\n    while n > 0 do\n        t[#t+1] = n\n        if n % 2 ==\
    \ 0 then\n            n = n - 1\n        else\n            n = n - 2\n       \
    \ end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00loslgl.lua:27:\
    \ expected: {3, 5, 7}\nactual: {3, 1}\nstack traceback:\n\t/tmp/tmp00loslgl.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local res = {}\n    for i = 1, n do\n        res[i] = n + 2 * i - 1\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n\
    \    lu.assertEquals(candidate(4), {4, 6, 8, 10})\n    lu.assertEquals(candidate(5),\
    \ {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6), {6, 8, 10, 12, 14, 16})\n\
    \    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16, 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m3bhpg8.lua:22:\
    \ expected: {3, 5, 7}\nactual: {4, 6, 8}\nstack traceback:\n\t/tmp/tmp6m3bhpg8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a positive integer n, you have to make a pile of n levels of\
    \ stones.\n-- The first level has n stones.\n-- The number of stones in the next\
    \ level is:\n-- - the next odd number if n is odd.\n-- - the next even number\
    \ if n is even.\n-- Return the number of stones in each level in a table, where\
    \ element at index\n-- i represents the number of stones in the level (i+1).\n\
    -- Examples:\n-- >>> make_a_pile(3)\n-- {3, 5, 7}\nlocal function make_a_pile(n)\n\
    \    local t = {}\n    for i = 1, n do\n        if i == 1 then\n            t[i]\
    \ = n\n        elseif (t[i-1] % 2) == 0 then\n            t[i] = t[i-1] + 1\n\
    \        else\n            t[i] = t[i-1] + 2\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_a_pile\n    lu.assertEquals(candidate(3), {3, 5, 7})\n    lu.assertEquals(candidate(4),\
    \ {4, 6, 8, 10})\n    lu.assertEquals(candidate(5), {5, 7, 9, 11, 13})\n    lu.assertEquals(candidate(6),\
    \ {6, 8, 10, 12, 14, 16})\n    lu.assertEquals(candidate(8), {8, 10, 12, 14, 16,\
    \ 18, 20, 22})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplunyb1ys.lua:29:\
    \ expected: {4, 6, 8, 10}\nactual: {4, 5, 7, 9}\nstack traceback:\n\t/tmp/tmplunyb1ys.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
