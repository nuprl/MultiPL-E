name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes a table of numbers as input and returns \n\
  -- the number of elements in the table that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>>\
  \ specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2, -3, 45,\
  \ 21, 109})\n-- 2\nlocal function specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function greaterThan10(val)\n        return val > 10\n  \
    \  end", "\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v > 10 and\
    \ nums[1] % 2 ~= 0 and nums[#nums] % 2 ~= 0 then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "   local result = 0\n   for _, num in ipairs(nums)\
    \ do\n      if num > 10 and isOdd(getFirstDigit(num)) and isOdd(getLastDigit(num))\
    \ then\n         result = result + 1\n      end\n   end\n   return result\nend",
  "  local count = 0\n  for i, num in ipairs(nums) do\n    if num > 10 and isOdd(num)\
    \ and isOdd(num % 10) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    -- TODO: Implement this function\nend", "\tlocal count = 0\n\
    \tfor i = 1, #nums do\n\t\tlocal n = nums[i]\n\t\tif n > 10 and math.abs(n % 10)\
    \ % 2 == 1 and math.abs(n / 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "    local count = 0\n    for _, v in ipairs(nums)\
    \ do\n        local first = v % 10\n        while v >= 10 do\n            v =\
    \ v / 10\n        end\n        local last = v\n        if first % 2 ~= 0 and last\
    \ % 2 ~= 0 and last * 10 + first > 10 then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "  -- your code here\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and (nums[i] % 2 == 1)\
    \ and (nums[i] // 100 % 2 == 1) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local count = 0\n  for i = 1, #nums do\n    local n\
    \ = nums[i]\n    if n > 10 and math.abs(n) % 10 % 2 == 1 and n % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and (nums[i] % 2 ~= 0) and math.floor(nums[i]\
    \ / 10) % 2 ~= 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #nums do\n    local num = nums[i]\n   \
    \ if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "\tlocal counter = 0\n\t\
    for i, v in ipairs(nums) do\n\t\tlocal lastDigit = v % 10\n\t\tlocal firstDigit\
    \ = 0\n\t\twhile v > 0 do\n\t\t\tfirstDigit = v % 10\n\t\t\tv = math.floor(v /\
    \ 10)\n\t\tend\n\t\tif v > 10 and lastDigit % 2 ~= 0 and firstDigit % 2 ~= 0 then\n\
    \t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ getFirst(nums[i]) % 2 == 1 and getLast(nums[i]) % 2 == 1 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 and \n            math.abs(num)\
    \ % 10 % 2 ~= 0 and\n            math.abs(num // 10) % 10 % 2 ~= 0 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ counter = 0\n  for _,num in ipairs(nums) do\n    if num > 10 and math.abs(num)%10%2\
    \ == 1 and math.floor(math.abs(num)/10)%2 == 1 then\n      counter = counter +\
    \ 1\n    end\n  end\n  return counter\nend", "  -- TODO: Implement the function\
    \ here\nend", "    -- implementation\nend", "  local count = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    if num > 10 and math.abs(num) > 9 then\n  \
    \    local firstDigit = math.abs(num) % 10\n      local lastDigit = math.floor(math.abs(num)\
    \ / 10) % 10\n      if firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n     \
    \   count = count + 1\n      end\n    end\n  end\n  return count\nend", "    --\
    \ TODO: Write this function\nend", "    local matches = 0\n    for _, number in\
    \ ipairs(nums) do\n        if number > 10 and number % 2 == 1 and (number // 10)\
    \ % 2 == 1 then\n            matches = matches + 1\n        end\n    end\n   \
    \ return matches\nend", "    local count = 0\n    for _, n in ipairs(nums) do\n\
    \        local first = n % 10\n        local last = n\n        while last >= 10\
    \ do\n            last = last / 10\n        end\n        last = math.floor(last)\n\
    \        if n > 10 and (first % 2 == 1) and (last % 2 == 1) then\n           \
    \ count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ r = 0\n    for _, n in ipairs(nums) do\n        if n > 10 and n % 2 == 1 and\
    \ n // 10 % 2 == 1 then\n            r = r + 1\n        end\n    end\n    return\
    \ r\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n        if\
    \ num > 10 then\n            local left = math.floor(num / 10)\n            local\
    \ right = num % 10\n            if (left % 2 == 1) and (right % 2 == 1) then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "    local count = 0\n    for _,n in ipairs(nums) do\n\
    \        if n > 10 and math.abs(n) % 10 % 2 == 1 and n % 2 == 1 then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ count = 0\n  for _, i in ipairs(nums) do\n    if i >= 10 and (math.abs(i) -\
    \ (math.abs(i) % 10)) % 2 == 1 and i % 2 == 1 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "    local count = 0\n    for i, num in\
    \ ipairs(nums) do\n        if num > 10 and is_odd(firstDigit(num)) and is_odd(lastDigit(num))\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for k, v in pairs(nums) do\n        if v > 10\
    \ and not(v % 2 == 0) and not(v // 10 % 2 == 0) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor\
    \ k, v in pairs(nums) do\n\t\tlocal first = string.sub(v, 1, 1)\n\t\tlocal last\
    \ = string.sub(v, -1)\n\t\tif v > 10 and tonumber(first) % 2 ~= 0 and tonumber(last)\
    \ % 2 ~= 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend",
  "  local result = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local firstDigit\
    \ = num % 10\n    local lastDigit = math.floor(num / 10 ^ (math.floor(math.log10(num))))\n\
    \    if num > 10 and firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n      result\
    \ = result + 1\n    end\n  end\n  return result\nend", "    -- TODO: Write the\
    \ specialFilter function\n    local count = 0\n    for i, v in ipairs(nums) do\n\
    \        if v > 10 and \n            (v % 10) % 2 ~= 0 and \n            math.floor(v\
    \ / math.pow(10, math.floor(math.log10(v)))) % 2 ~= 0 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "    -- Write your\
    \ code here\n    -- nums is a table, an array, of numbers\n    -- iterate through\
    \ each item in the array\n    -- if it is greater than 10, then make sure its\n\
    \    -- first and last digits are odd\n    -- make sure to return the number of\
    \ times these are true\n    -- \n    -- table.insert(table, value)", "\tlocal\
    \ count = 0\n\tfor _, num in ipairs(nums) do\n\t\tif isGreaterThan10(num) and\
    \ isFirstLastDigitOdd(num) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "    local count = 0\n    for i, v in ipairs(nums) do\n       \
    \ if v > 10 and math.fmod(v, 2) ~= 0 and math.fmod(v % 10, 2) ~= 0 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  \
    \  local count = 0\n    for i = 1, #nums do\n        local num = nums[i]\n   \
    \     if num > 10 and (num % 2 == 1) and (math.floor(num / 10) % 2 == 1) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for k,v in pairs(nums) do\n        if v > 10 and math.floor(v\
    \ / 10) % 2 ~= 0 and v % 2 ~= 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "\tlocal count = 0\n\tfor _, v in ipairs(nums)\
    \ do\n\t\tif v > 10 and (v % 10) % 2 == 1 and (v / 10 ^ floor(log10(v))) % 2 ==\
    \ 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "   \
    \ local count = 0\n    for i = 1, #nums do\n        local num = nums[i]\n    \
    \    if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \   local count = 0\n    for i, num in ipairs(nums) do\n        if num > 10 and\
    \ math.abs(num) % 10 % 2 == 1 and\n        math.floor(math.abs(num) / 10) % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for _, n in ipairs(nums) do\n        if n > 10\
    \ and math.abs(n) % 10 % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "\tlocal count = 0\n\tlocal isValid = function(num)\n\
    \t\tlocal s = tostring(num)\n\t\treturn (s:len() > 1) and (tonumber(s:sub(1, 1))\
    \ % 2 == 1) and (tonumber(s:sub(-1)) % 2 == 1)\n\tend\n\tfor i, num in ipairs(nums)\
    \ do\n\t\tif num > 10 and isValid(num) then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "  local count = 0\n  for _,v in ipairs(nums) do\n\
    \    local m, a, b = v, math.abs(v), 0\n    while m > 0 do\n      m, b = math.floor(m\
    \ / 10), m % 10\n    end\n    if math.abs(v) > 10 and a % 2 == 1 and b % 2 ==\
    \ 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", "   \
    \ -- fill in code here\n    local count = 0\n    for i, n in ipairs(nums) do\n\
    \        if n > 10 and n % 2 == 1 and n % 10 % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local count =\
    \ 0\n  for _,n in ipairs(nums) do\n    if n > 10 and math.abs(n)%10%2==1 and n//10%10%2==1\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    local isOverTen = nums[i] > 10\n    local\
    \ isFirstDigitOdd = string.sub(tostring(nums[i]), 1, 1) % 2 == 1\n    local isLastDigitOdd\
    \ = string.sub(tostring(nums[i]), -1, -1) % 2 == 1\n    if isOverTen and isFirstDigitOdd\
    \ and isLastDigitOdd then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local nums_greater_than_10 = filter(function(num)\n    return num > 10\n\
    \  end, nums)", "    local cnt = 0\n    for _, num in ipairs(nums) do\n      \
    \  local a, b = math.floor(num / 10), num % 10\n        if a > 0 and a % 2 ==\
    \ 1 and b % 2 == 1 and num > 10 then\n            cnt = cnt + 1\n        end\n\
    \    end\n    return cnt\nend", "  local count = 0\n  for i = 1, #nums do\n  \
    \  if nums[i] > 10 and nums[i] % 2 == 1 and\n      nums[i] % 10 == 1 or nums[i]\
    \ % 10 == 3 or\n      nums[i] % 10 == 5 or nums[i] % 10 == 7 or\n      nums[i]\
    \ % 10 == 9 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, #nums do\n    if math.abs(nums[i]) > 10 and math.abs(nums[i])\
    \ % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    -- your code here\n    return -1\nend", "  -- your code here\nend", end, " \
    \ local cnt = 0\n  for i = 1, #nums do\n    local n = nums[i]\n    if n > 10 and\
    \ isOdd(n % 10) and isOdd(math.floor(n / 10)) then\n      cnt = cnt + 1\n    end\n\
    \  end\n  return cnt\nend", "    local count = 0\n    for k,v in pairs(nums) do\n\
    \        if v > 10 and v%2 == 1 and v%10%2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    -- your code here\n\
    end", "    local count = 0\n    for _,n in ipairs(nums) do\n        if (n>10)\
    \ and (n%2==1) and (math.floor(n/10)%2==1) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "\tlocal count = 0\n\tfor i, v\
    \ in ipairs(nums) do\n\t\tif v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v)\
    \ / 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "  local num = 0\n  for i = 1, #nums do\n    local rem = nums[i] % 10\n\
    \    if rem % 2 ~= 0 and nums[i] > 10 then\n      local div = nums[i]\n      while\
    \ div > 0 do\n        div = math.floor(div / 10)\n        if div > 0 then\n  \
    \        local rem = div % 10\n          if rem % 2 ~= 0 then\n            num\
    \ = num + 1\n            break\n          end\n        end\n      end\n    end\n\
    \  end\n  return num\nend", "    -- TODO: implement this function\nend", "\t--\
    \ your code here\n\treturn 0\nend", "\tlocal count = 0\n\tfor _, v in ipairs(nums)\
    \ do\n\t\tif v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v) /\
    \ 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        if num\
    \ > 10 and math.abs(num % 10) % 2 == 1 and math.abs(num // 10) % 2 == 1 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local result = 0\n    for _, num in ipairs(nums) do\n        local s = tostring(num)\n\
    \        if #s > 1 and \n            (s:sub(1, 1) == '1' or s:sub(1, 1) == '3'\
    \ or s:sub(1, 1) == '5' or \n            s:sub(1, 1) == '7' or s:sub(1, 1) ==\
    \ '9') and \n            (s:sub(-1) == '1' or s:sub(-1) == '3' or s:sub(-1) ==\
    \ '5' or \n            s:sub(-1) == '7' or s:sub(-1) == '9') and \n          \
    \  num > 10 then\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend", "    return 0\nend", "  -- YOUR CODE HERE\n  local function isGoodNum(x)\n\
    \    if x < 10 then return false end\n    local last = x % 10\n    if last % 2\
    \ == 0 then return false end\n    while x > 0 do\n      local first = x % 10\n\
    \      if first % 2 == 0 then return false end\n      x = x / 10\n    end\n  \
    \  return true\n  end\n  local count = 0\n  for i, v in ipairs(nums) do\n    if\
    \ isGoodNum(v) then count = count + 1 end\n  end\n  return count\nend", "  return\n\
    end", "  local count = 0\n  for i = 1, #nums do\n    local num = nums[i]\n   \
    \ local first = math.floor(math.abs(num) / 10)\n    local last = num % 10\n  \
    \  if math.abs(num) > 10 and first % 2 ~= 0 and last % 2 ~= 0 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n  \
    \  for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and (math.floor(num\
    \ / 10) % 2 == 1 or num % 10 % 2 == 1) then\n            count = count + 1\n \
    \       end\n    end\n    return count\nend", "  local count = 0\n  for _, n in\
    \ ipairs(nums) do\n    if n > 10 and n % 2 == 1 and (math.floor(n / 10) % 2 ==\
    \ 1 or n % 10 == 1) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "\treturn 0\nend", "  -- your code here\nend", "    local cnt = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 then\n            local firstDigit\
    \ = math.floor(math.abs(num) / 10)\n            local lastDigit = num % 10\n \
    \           if firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n             \
    \   cnt = cnt + 1\n            end\n        end\n    end\n    return cnt\nend",
  "    local cnt = 0\n    for _, n in ipairs(nums) do\n        local nf, nl = tostring(n):sub(1,\
    \ 1), tostring(n):sub(-1)\n        if nf == \"-\" then nf = tostring(n):sub(2,\
    \ 2) end\n        if nl == \"-\" then nl = tostring(n):sub(-2, -2) end\n     \
    \   if math.abs(n) > 10 and tonumber(nf) % 2 == 1 and tonumber(nl) % 2 == 1 then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "  --\
    \ your code here\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n\
    \        local first = num % 10\n        local last = num\n        while last\
    \ >= 10 do\n            last = last / 10\n        end\n        if math.abs(num)\
    \ > 10 and first % 2 == 1 and last % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    return nil\nend", "  \
    \  local cnt = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n\
    \            local a, b = num % 10, num\n            while b >= 10 do\n      \
    \          b = b / 10\n            end\n            if a % 2 == 1 and b % 2 ==\
    \ 1 then\n                cnt = cnt + 1\n            end\n        end\n    end\n\
    \    return cnt\nend", "    local count = 0\n    for i = 1, #nums do\n       \
    \ if nums[i] > 10 and (nums[i] % 2 == 1) and (math.floor(nums[i] / 10) % 2 ==\
    \ 1) then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i = 1, #nums do\n        local n = nums[i]\n\
    \        if math.abs(n) > 10 then\n            local q, r = math.modf(math.abs(n))\n\
    \            if q % 2 == 1 and r % 2 == 1 then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "\treturn\
    \ filter(nums, function(x)\n\t\tlocal last = math.abs(x) % 10\n\t\tlocal first\
    \ = x\n\t\twhile first > 10 do\n\t\t\tfirst = first / 10\n\t\tend\n\t\tfirst =\
    \ math.abs(first) % 10\n\t\treturn (x > 10) and (first % 2 ~= 0) and (last % 2\
    \ ~= 0)\n\tend)\nend", "  local count = 0\n  for _, num in ipairs(nums) do\n \
    \   local firstDigit = num % 10\n    local lastDigit = math.floor(num / 10 ^ math.floor(math.log10(num)))\
    \ % 10\n    if num > 10 and firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local cnt\
    \ = 0\n    for _, num in ipairs(nums) do\n        if (num > 10) and (math.abs(num)\
    \ % 10 % 2 ~= 0) and (math.floor(math.abs(num / 10)) % 2 ~= 0) then\n        \
    \    cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "    -- YOUR CODE\
    \ HERE\nend", "    -- Start with 0 count.\n    local count = 0\n    -- Loop through\
    \ each number.\n    for _,num in ipairs(nums) do\n        -- Check if number is\
    \ greater than 10, and first and last digits are odd.\n        if num > 10 and\
    \ math.abs(num) % 10 % 2 == 1 and num // 10 % 2 == 1 then\n            -- Increase\
    \ count by 1.\n            count = count + 1\n        end\n    end\n    -- Return\
    \ the count.\n    return count\nend", "  -- TODO\nend", "    local count = 0\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        if (num > 10) and\
    \ (num % 2 == 1) and ((num // 10) % 2 == 1) then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  -- your code here\nend",
  "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\
    \ num % 2 == 1 and (num // 10) % 2 == 1 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    -- WRITE YOUR CODE HERE\n\
    end", "    local count = 0\n    for _, num in ipairs(nums) do\n        local firstDigit\
    \ = num % 10\n        while num > 0 do\n            local lastDigit = num % 10\n\
    \            num = num // 10\n        end\n        if firstDigit % 2 ~= 0 and\
    \ lastDigit % 2 ~= 0 and num > 10 then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "  local count = 0\n  for i, v in ipairs(nums)\
    \ do\n    if v > 10 and math.abs(v % 10) % 2 == 1 and math.abs(v / 10) % 2 ==\
    \ 1 then\n      count = count + 1\n    end\n  end\n  return count\nend", "   \
    \ return 0\nend", "    local counter = 0\n    for key, num in pairs(nums) do\n\
    \        if num > 10 and string.match(num, \"%d%D*%d\") then\n            counter\
    \ = counter + 1\n        end\n    end\n    return counter\nend", "    local cnt\
    \ = 0\n    for i,v in ipairs(nums) do\n        if v>10 and math.abs(v%10)%2~=0\
    \ and math.abs(v//10)%2~=0 then\n            cnt = cnt + 1\n        end\n    end\n\
    \    return cnt\nend", '  local counter = 0', "  local a = {}\n  for i,num in\
    \ ipairs(nums) do\n    a[i] = num\n  end\n  local k = 0\n  for i = 1, #a do\n\
    \    if a[i] % 2 ~= 0 and a[i] > 10 then\n      local firstDigit = math.abs(math.floor(a[i]/10))\n\
    \      local lastDigit = math.abs(a[i]%10)\n      if firstDigit % 2 ~= 0 and lastDigit\
    \ % 2 ~= 0 then\n        k = k + 1\n      end\n    end\n  end\n  return k\nend",
  "    local result = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\
    \ num % 2 == 1 and num // 10 % 2 == 1 then\n            result = result + 1\n\
    \        end\n    end\n    return result\nend", "    local count = 0\n    for\
    \ _, num in ipairs(nums) do\n        if (num > 10) and (math.abs(num) % 10 % 2\
    \ == 1) and (math.abs(num) / 10 % 10 % 2 == 1) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local count = 0\n  \
    \  for i, v in ipairs(nums) do\n        if v > 10 and math.fmod(math.floor(v /\
    \ 10), 2) ~= 0 and math.fmod(v, 2) ~= 0 then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "  local count = 0\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    if num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "    local total = 0\n    for _, num in ipairs(nums) do\n        local lastDigit\
    \ = num % 10\n        if num > 10 and lastDigit % 2 == 1 then\n            local\
    \ firstDigit = 0\n            while num > 0 do\n                num = math.floor(num\
    \ / 10)\n                firstDigit = num % 10\n            end\n            if\
    \ firstDigit % 2 == 1 then\n                total = total + 1\n            end\n\
    \        end\n    end\n    return total\nend", "  local count = 0\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    if num > 10 and math.abs(num) % 10 %\
    \ 2 == 1 and math.floor(math.abs(num / 10)) % 2 == 1 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local result = 0\n    for i,v\
    \ in ipairs(nums) do\n        if v > 10 and \n            (v%10)%2 ~= 0 and\n\
    \            math.floor(v/10)%2 ~= 0 then\n            result = result + 1\n \
    \       end\n    end\n    return result\nend", "   local count = 0\n   for _,\
    \ num in ipairs(nums) do\n      local firstDigit = num % 10\n      local lastDigit\
    \  = num\n      while lastDigit >= 10 do\n         lastDigit = lastDigit / 10\n\
    \      end\n      if num > 10 and (lastDigit % 2 == 1) and (firstDigit % 2 ==\
    \ 1) then\n         count = count + 1\n      end\n   end\n   return count\nend",
  "  local count = 0\n  for i, num in ipairs(nums) do\n    if num >= 10 and math.abs(num)\
    \ % 10 % 2 == 1 and\n    math.floor(math.abs(num) / 10) % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    local first_digit = num % 10\n\
    \    local last_digit = num % 10^(math.floor(math.log10(num)) + 1)\n    if first_digit\
    \ % 2 ~= 0 and last_digit % 2 ~= 0 and num > 10 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "   local count = 0\n   for i = 1, #nums\
    \ do\n      local n = nums[i]\n      if n > 10 and n % 2 == 1 and n // 10 % 2\
    \ == 1 then\n         count = count + 1\n      end\n   end\n   return count\n\
    end", "\tlocal cnt = 0\n\tfor _, n in ipairs(nums) do\n\t\tif n > 10 then\n\t\t\
    \tlocal a, b = math.floor(n / 10), n % 10\n\t\t\tif a % 2 == 1 and b % 2 == 1\
    \ then\n\t\t\t\tcnt = cnt + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn cnt\nend",
  "    local count = 0\n    for k, v in pairs(nums) do\n        if v > 10 and v %\
    \ 2 == 1 and v > 10 and math.floor(v/10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local num_greater_than_10\
    \ = 0\n  for _, num in ipairs(nums) do\n    local first_digit = math.floor(math.abs(num)\
    \ / 10)\n    local last_digit = math.abs(num) % 10\n    if num > 10 and (first_digit\
    \ % 2 == 1) and (last_digit % 2 == 1) then\n      num_greater_than_10 = num_greater_than_10\
    \ + 1\n    end\n  end\n  return num_greater_than_10\nend", "    local count =\
    \ 0\n    for _, v in ipairs(nums) do\n        if v > 10 and math.abs(v) % 10 %\
    \ 2 == 1 and math.floor(math.abs(v) / 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "\tlocal counter = 0\n\t\
    for _,num in ipairs(nums) do\n\t\tif num > 10 and num % 2 == 1 and math.floor(num\
    \ / 10) % 2 == 1 then\n\t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\n\
    end", "    local count = 0\n    for i,num in ipairs(nums) do\n        if num >\
    \ 10 and isOdd(firstDigit(num)) and isOdd(lastDigit(num)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "\tlocal count =\
    \ 0\n\tfor _, n in ipairs(nums) do\n\t\tif n > 10 and isFirstDigitOdd(n) and isLastDigitOdd(n)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ count = 0\n  for _, num in ipairs(nums) do\n    if num > 10 and math.abs(num\
    \ % 10) % 2 == 1 and math.abs(num // 10) % 2 == 1 then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for _, x\
    \ in ipairs(nums) do\n        if x > 10 and \n           math.abs(x % 10) % 2\
    \ == 1 and \n           math.abs(x / 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local number = 0\n  for\
    \ i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and (nums[i] % 10)\
    \ % 2 == 1 then\n      number = number + 1\n    end\n  end\n  return number\n\
    end", "    -- TODO: implement your solution here\n    local cnt = 0\n    for _,num\
    \ in ipairs(nums) do\n        if num>10 and math.abs(num)%10%2~=0 and math.floor(math.abs(num)/10)%2~=0\
    \ then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend",
  "    local count = 0\n    for i = 1, #nums do\n        local num = nums[i]\n   \
    \     if num > 10 and isFirstAndLastDigitsOdd(num) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "  local count = 0\n  for\
    \ _, num in ipairs(nums) do\n    local first = tostring(num):sub(1, 1)\n    local\
    \ last = tostring(num):sub(-1)\n    if num > 10 and (first == '1' or first ==\
    \ '3' or first == '5' or first == '7' or first == '9') and (last == '1' or last\
    \ == '3' or last == '5' or last == '7' or last == '9') then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local cnt = 0\n    for _, num\
    \ in ipairs(nums) do\n        if num > 10 and math.abs(num) % 10 % 2 == 1 and\
    \ num % 2 == 1 then\n            cnt = cnt + 1\n        end\n    end\n    return\
    \ cnt\nend", "    local count = 0\n    for i = 1, #nums do\n        local num\
    \ = nums[i]\n        if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2\
    \ == 1 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "   -- TODO: Write this function!\nend", "\tlocal sum = 0\n\tfor i,v in\
    \ ipairs(nums) do\n\t\tif v > 10 and math.abs(v) % 10 % 2 == 1 and math.floor(math.abs(v)\
    \ / 10) % 2 == 1 then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend",
  "    local count = 0\n    for _, num in ipairs(nums) do\n        if num > 10 and\
    \ isFirstAndLastDigitsOdd(num) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "\tlocal sum = 0\n\tfor _, v in ipairs(nums)\
    \ do\n\t\tif v > 10 and v % 2 == 1 and (math.floor(v / 10) % 2 == 1 or v % 10\
    \ == 1) then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend", "  local\
    \ sum = 0\n  for i, v in ipairs(nums) do\n    local isFirstNumOdd = true\n   \
    \ local isLastNumOdd = true\n    local temp = v\n    while temp >= 10 do\n   \
    \   temp = temp/10\n    end\n    if temp == 2 or temp == 4 or temp == 6 or temp\
    \ == 8 or temp == 0 then\n      isFirstNumOdd = false\n    end\n    local lastDigit\
    \ = v % 10\n    if lastDigit == 2 or lastDigit == 4 or lastDigit == 6 or lastDigit\
    \ == 8 or lastDigit == 0 then\n      isLastNumOdd = false\n    end\n    if v >\
    \ 10 and isFirstNumOdd and isLastNumOdd then\n      sum = sum + 1\n    end\n \
    \ end\n  return sum\nend", "    local count = 0\n    for i = 1, #nums do\n   \
    \     local num = nums[i]\n        if num > 10 and math.abs(num) % 10 % 2 == 1\
    \ and math.floor(math.abs(num) / 10) % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    --Your code goes here.\n\
    end", "  local function checkOdd(n)\n    if n < 0 then\n      n = -n\n    end\n\
    \    local lastDigit = n % 10\n    if lastDigit == 0 or lastDigit == 2 or lastDigit\
    \ == 4 or lastDigit == 6 or lastDigit == 8 then\n      return false\n    end\n\
    \    local firstDigit = n\n    while firstDigit >= 10 do\n      firstDigit = firstDigit\
    \ / 10\n    end\n    if firstDigit == 0 or firstDigit == 2 or firstDigit == 4\
    \ or firstDigit == 6 or firstDigit == 8 then\n      return false\n    end\n  \
    \  return true\n  end\n  local count = 0\n  for _, n in ipairs(nums) do\n    if\
    \ n > 10 and checkOdd(n) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  local count = 0\n  for _, x in ipairs(nums) do\n    if x > 10\
    \ and math.abs(x) % 10 % 2 == 1 and x // 10 % 10 % 2 == 1 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "  return 0\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and math.fmod(nums[i],\
    \ 2) == 1 and math.fmod(math.floor(nums[i] / 10), 2) == 1 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "\tlocal n = 0\n\tfor i = 1,\
    \ #nums do\n\t\tlocal v = nums[i]\n\t\tif v > 10 and math.abs(v) % 10 % 2 == 1\
    \ and v < 0 then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ math.floor(nums[i]/10) % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local cnt = 0\n    for i, v in ipairs(nums) do\n \
    \       local first = math.abs(v) % 10\n        local last = math.floor(math.abs(v)\
    \ / 10) % 10\n        if (v > 10) and (first % 2 == 1) and (last % 2 == 1) then\n\
    \            cnt = cnt + 1\n        end\n    end\n    return cnt\nend", "    --\
    \ Your code here\n    local count = 0\n    for _,value in ipairs(nums) do\n  \
    \      if value >= 10 and (value % 2 == 1) and (value % 10 == 1 or value % 10\
    \ == 3 or value % 10 == 5 or value % 10 == 7 or value % 10 == 9) then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ count = 0\n  for i, num in ipairs(nums) do\n    if num > 10 and num % 2 == 1\
    \ and math.floor(num / 10) % 2 == 1 then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "    local count = 0\n    for i = 1, #nums do\n \
    \       local curNum = nums[i]\n        local lastDigit = curNum % 10\n      \
    \  local firstDigit = 0\n        while curNum ~= 0 do\n            firstDigit\
    \ = curNum % 10\n            curNum = math.floor(curNum / 10)\n        end\n \
    \       if math.abs(curNum) > 10 and lastDigit % 2 ~= 0 and firstDigit % 2 ~=\
    \ 0 then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "    local count = 0\n    for i, v in ipairs(nums) do\n        local start,\
    \ finish = tostring(v):sub(1, 1), tostring(v):sub(-1)\n        if v > 10 and start\
    \ % 2 ~= 0 and finish % 2 ~= 0 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "    local count = 0\n    for i = 1, #nums do\n\
    \        local num = nums[i]\n        if num > 10 and math.abs(num) % 10 % 2 ==\
    \ 1 then\n            local last = num % 10\n            local first = 0\n   \
    \         while num > 0 do\n                first = num % 10\n               \
    \ num = num // 10\n            end\n            if first % 2 == 1 then\n     \
    \           count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local count = 0\n    for _, num in ipairs(nums) do\n     \
    \   if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  --\
    \ TODO: Implement me\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums) do\n\
    \t\tlocal firstDigit = num % 10\n\t\tif (num > 10) and (firstDigit % 2 == 1) then\n\
    \t\t\tlocal numCopy = num\n\t\t\tlocal lastDigit = 0\n\t\t\twhile numCopy > 0\
    \ do\n\t\t\t\tlastDigit = numCopy % 10\n\t\t\t\tnumCopy = math.floor(numCopy /\
    \ 10)\n\t\t\tend\n\t\t\tif lastDigit % 2 == 1 then\n\t\t\t\tcount = count + 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count\nend", "    -- YOUR CODE HERE\nend",
  "\tlocal count = 0\n\tfor _,n in ipairs(nums) do\n\t\tif n > 10 and n % 2 == 1 and\
    \ (n % 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "\tlocal count = 0\n\tfor _, n in ipairs(nums) do\n\t\tlocal first, last\
    \ = math.floor(math.abs(n) / 10), math.abs(n) % 10\n\t\tif n > 10 and first %\
    \ 2 == 1 and last % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend", "  local count = 0\n  for _,num in ipairs(nums) do\n    local firstDigit\
    \ = num % 10\n    local lastDigit = (num - firstDigit) % 10\n    if num > 10 and\
    \ firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend", "  return error(\"Not implemented yet\"\
    )\nend", "  local result = 0\n  for _, num in ipairs(nums) do\n    if num > 10\
    \ and \n      math.floor(num/10)%2 ~= 0 and \n      num%10 ~= 0 and \n      num%2\
    \ ~= 0 then\n      result = result + 1\n    end\n  end\n  return result\nend",
  "    local count = 0\n    for i, num in ipairs(nums) do\n        local lastNum =\
    \ num % 10\n        while num > 10 do\n            num = num / 10\n        end\n\
    \        if num > 10 and (num % 2 == 1 and lastNum % 2 == 1) then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend", "    local\
    \ function special(num)\n        if num < 10 then\n            return num % 2\
    \ == 1\n        else\n            return num % 2 == 1 and special((num - num %\
    \ 10) / 10)\n        end\n    end\n    local count = 0\n    for _, num in ipairs(nums)\
    \ do\n        if num > 10 and special(num) then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local cnt = 0\n    for _,\
    \ num in ipairs(nums) do\n        local last = num % 10\n        while num > 0\
    \ do\n            local first = num % 10\n            if first ~= last then\n\
    \                num = math.floor(num / 10)\n                last = num % 10\n\
    \            else\n                break\n            end\n        end\n     \
    \   if num > 10 and first % 2 == 1 and last % 2 == 1 then\n            cnt = cnt\
    \ + 1\n        end\n    end\n    return cnt\nend", "  -- write your solution here\n\
    end", "    local count = 0\n    for k, v in pairs(nums) do\n        local firstDigit\
    \ = math.floor(v / 10)\n        local lastDigit = v % 10\n        if v > 10 and\
    \ firstDigit % 2 ~= 0 and lastDigit % 2 ~= 0 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "    local count = 0\n    for\
    \ _, v in ipairs(nums) do\n        if v > 10 and v % 2 == 1 and isOdd(v) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    local count = 0\n    for i = 1, #nums do\n        local num = nums[i]\n   \
    \     if num > 10 and num % 2 == 1 and num >= 10 then\n            local lastDigit\
    \ = num % 10\n            local firstDigit = (num - lastDigit) / 10\n        \
    \    if lastDigit % 2 == 1 and firstDigit % 2 == 1 then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "\tlocal count = 0\n\tfor k, v in pairs(nums) do\n\t\tif (v > 10) and string.match(v,\
    \ \"^[13579]\") and string.match(v, \"[13579]$\") then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend", "  local res = 0\n  for i = 1, #nums\
    \ do\n    local n = nums[i]\n    if n > 10 and math.abs(n) % 10 % 2 == 1 and math.floor(math.abs(n)\
    \ / 10) % 2 == 1 then\n      res = res + 1\n    end\n  end\n  return res\nend",
  end, "  local count = 0\n  for i, v in ipairs(nums) do\n    if v > 10 and v % 2\
    \ == 1 and math.floor(v / 10) % 2 == 1 and v % 10 == math.floor(v / 10) % 10 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "    local count\
    \ = 0\n    for i = 1, #nums do\n        local num = nums[i]\n        if num >\
    \ 10 and (num % 2 == 1) and (num % 10 == 1 or num % 10 == 3 or num % 10 == 5 or\
    \ num % 10 == 7 or num % 10 == 9) then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "  local count = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    if num > 10 and math.abs(num) >= 10 and num\
    \ % 2 == 1 and num % 10 % 2 == 1 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, n in ipairs(nums) do\n\
    \        if n > 10 and n % 2 == 1 and math.floor(n / 10) % 2 == 1 then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ n = 0\n  for i = 1, #nums do\n    local d1 = nums[i] % 10\n    local d2 = math.floor(nums[i]\
    \ / 10) % 10\n    if nums[i] > 10 and d1 % 2 == 1 and d2 % 2 == 1 then\n     \
    \ n = n + 1\n    end\n  end\n  return n\nend", "    local result = 0\n    for\
    \ i = 1, #nums do\n        local num = nums[i]\n        local lastDigit = num\
    \ % 10\n        local firstDigit = math.floor(num / 10)\n        if firstDigit\
    \ < 0 then\n            firstDigit = -firstDigit\n        end\n        firstDigit\
    \ = firstDigit % 10\n        if (num > 10) and (lastDigit % 2 == 1) and (firstDigit\
    \ % 2 == 1) then\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tif nums[i] > 10\
    \ and isFirstAndLastDigitsOdd(nums[i]) then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "\tlocal count = 0\n\tfor _, num in ipairs(nums)\
    \ do\n\t\tif num > 10 and isSpecialNumber(num) then\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend", "    local count = 0\n    for i = 1, #nums\
    \ do\n        local odd = true\n        local num = nums[i]\n        local first,\
    \ last\n        if num > 10 then\n            first = num % 10\n            last\
    \ = math.floor(num / 10) % 10\n            if first % 2 == 0 or last % 2 == 0\
    \ then\n                odd = false\n            end\n        else\n         \
    \   odd = false\n        end\n        if odd then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend", "  local count = 0\n  for _,\
    \ num in ipairs(nums) do\n    local firstDigit = math.floor(math.abs(num / 10))\n\
    \    local lastDigit = math.abs(num % 10)\n    if num > 10 and firstDigit % 2\
    \ ~= 0 and lastDigit % 2 ~= 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, n in ipairs(nums) do\n\
    \        if (n > 10) and (n % 2 == 1) and ((n // 10) % 2 == 1) then\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend", "    --\
    \ write your code here\n    local count = 0\n    for i = 1, #nums do\n       \
    \ local lastDigit = nums[i] % 10\n        local firstDigit = 0\n        local\
    \ temp = nums[i]\n        while (temp > 10) do\n            temp = temp / 10\n\
    \            firstDigit = temp % 10\n        end\n        if (nums[i] > 10 and\
    \ (lastDigit % 2 ~= 0) and (firstDigit % 2 ~= 0)) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    count = 0\n    for _,\
    \ num in ipairs(nums) do\n        local firstDigit = num\n        while firstDigit\
    \ > 10 do\n            firstDigit = firstDigit / 10\n        end\n        if num\
    \ > 10 and firstDigit % 2 == 1 and num % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local sum = 0\n    for\
    \ i = 1, #nums do\n        local num = nums[i]\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 then\n            local num2 = math.abs(num)\n            local\
    \ isOdd = false\n            while num2 > 10 do\n                num2 = num2 /\
    \ 10\n            end\n            if num2 % 2 == 1 then\n                sum\
    \ = sum + 1\n            end\n        end\n    end\n    return sum\nend", "\t\
    local count = 0\n\tfor i = 1, #nums do\n\t\tlocal abs = math.abs(nums[i])\n\t\t\
    if abs > 10 and abs % 2 == 1 and abs >= 10 then\n\t\t\tlocal first = abs % 10\n\
    \t\t\tlocal last = (abs - first) / 10\n\t\t\tif first % 2 == 1 and last % 2 ==\
    \ 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end", "\tlocal count = 0\n\tfor i = 1, #nums do\n\t\tlocal s = nums[i]\n\t\tif\
    \ s > 10 and s % 2 == 1 and (s % 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\
    \tend\n\tend\n\treturn count\nend", "  local count = 0\n  for _, n in ipairs(nums)\
    \ do\n    local first, last = n % 10, math.floor(n / 10) % 10\n    if n > 10 and\
    \ (first % 2 ~= 0) and (last % 2 ~= 0) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, #nums do\n    if\
    \ nums[i] > 10 and math.abs(nums[i]) % 2 == 1 and nums[i] % 10 % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "\t-- TODO: implement\
    \ this function\nend", "  local count = 0\n  for _, v in ipairs(nums) do\n   \
    \ local first = math.floor(math.abs(v) / 10)\n    local last = math.abs(v) % 10\n\
    \    if first % 2 ~= 0 and last % 2 ~= 0 and v > 10 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for i =\
    \ 1, #nums do\n        local num = nums[i]\n        if num > 10 and math.abs(num)\
    \ % 10 % 2 == 1 then\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend", "  local count = 0\n  for i, num in ipairs(nums) do\n \
    \   local first_digit = math.abs(num)\n    while first_digit >= 10 do\n      first_digit\
    \ = first_digit / 10\n    end\n    local last_digit = math.abs(num) % 10\n   \
    \ if num > 10 and first_digit % 2 == 1 and last_digit % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "\tlocal count = 0\n\tfor\
    \ _, num in ipairs(nums) do\n\t\tif num > 10 and \n\t\t   num % 2 == 1 and \n\t\
    \t   math.floor(num / 10) % 2 == 1 and \n\t\t   num % 10 % 2 == 1 then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend", "    local total = 0\n\
    \    for _, num in ipairs(nums) do\n        if num > 10 and num % 2 == 1 and math.floor(num/10)\
    \ % 2 == 1 then\n            total = total + 1\n        end\n    end\n    return\
    \ total\nend", "  local count = 0\n  for _, num in ipairs(nums) do\n    if num\
    \ > 10 and math.floor(num / 10) % 2 ~= 0 and num % 2 ~= 0 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "    -- TODO: Implement function\
    \ here\nend", "  local count = 0\n  for i = 1, #nums do\n    local n = nums[i]\n\
    \    if n > 10 and math.abs(n) % 10 % 2 == 1 and math.floor(math.abs(n) / 10)\
    \ % 2 == 1 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  -- your code here\nend", "  local count = 0\n  for _, num in ipairs(nums) do\n\
    \    local firstDigit = num % 10\n    local lastDigit = num\n    while lastDigit\
    \ >= 10 do\n      lastDigit = lastDigit / 10\n    end\n    lastDigit = math.floor(lastDigit)\n\
    \    if num > 10 and firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "    local result = 0\n \
    \   for i = 1, #nums do\n        local num = nums[i]\n        local d1 = num %\
    \ 10\n        if num > 10 and odd(d1) then\n            d2 = (num - d1) % 100\n\
    \            if d2 > 0 and odd(d2 / 10) then\n                result = result\
    \ + 1\n            end\n        end\n    end\n    return result\nend", "  --\n\
    end", "    local function isSpecial(n)\n        if n < 10 then\n            return\
    \ n % 2 == 1\n        else\n            local first = math.floor(n / 10)\n   \
    \         local last = n % 10\n            return first % 2 == 1 and last % 2\
    \ == 1\n        end\n    end", "    local count = 0\n    for k, v in pairs(nums)\
    \ do\n        local lastDigit = v % 10\n        local firstDigit = v\n       \
    \ while firstDigit > 10 do\n            firstDigit = firstDigit / 10\n       \
    \ end\n        if firstDigit > 10 and lastDigit > 10 and \n        firstDigit\
    \ % 2 ~= 0 and lastDigit % 2 ~= 0 then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend", "  local count = 0\n  for _, v in ipairs(nums)\
    \ do\n    if v > 10 and v%2 ~= 0 and v%10%2 ~= 0 then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "  local count = 0\n  for _, n in ipairs(nums)\
    \ do\n    local n_str = tostring(n)\n    if n > 10 and n_str:sub(1, 1) % 2 ~=\
    \ 0 and n_str:sub(-1) % 2 ~= 0 then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\t\
    if v > 10 and string.find(tostring(v):sub(1, 1), \"[13579]\") and \n\t\t\tstring.find(tostring(v):sub(-1),\
    \ \"[13579]\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\n\
    end", "    local result = 0\n    for i = 1, #nums do\n        local n = nums[i]\n\
    \        if n > 10 and string.find(tostring(n), \"^[13579]\") and string.find(tostring(n),\
    \ \"[13579]$\") then\n            result = result + 1\n        end\n    end\n\
    \    return result\nend", "  return specialFilterWithAcc(nums, 0)\nend", "  local\
    \ function isSpecial(n)\n    local first = n % 10\n    local last = n\n    while\
    \ last >= 10 do\n      last = last / 10\n    end\n    last = math.floor(last)\n\
    \    return first ~= last and first % 2 == 1 and last % 2 == 1\n  end\n  local\
    \ cnt = 0\n  for _, n in ipairs(nums) do\n    if n > 10 and isSpecial(n) then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "  local count = 0\n\
    \  for i = 1, #nums do\n    if (nums[i] > 10) and (nums[i] % 2 == 1) and (nums[1]\
    \ % 2 == 1) then\n      count = count + 1\n    end\n  end\n  return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
