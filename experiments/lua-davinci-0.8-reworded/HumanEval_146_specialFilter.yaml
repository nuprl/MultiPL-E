name: HumanEval_146_specialFilter
language: lua
prompt: "-- Write a function that takes a table of numbers as input and returns \n\
  -- the number of elements in the table that are greater than 10 and both \n-- first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n-- >>>\
  \ specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2, -3, 45,\
  \ 21, 109})\n-- 2\nlocal function specialFilter(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
  \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
  \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
  \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
  \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local function greaterThan10(val)\n        return val > 10\n  \
    \  end", "\tlocal count = 0\n\tfor i, v in ipairs(nums) do\n\t\tif v > 10 and\
    \ nums[1] % 2 ~= 0 and nums[#nums] % 2 ~= 0 then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend", "   local result = 0\n   for _, num in ipairs(nums)\
    \ do\n      if num > 10 and isOdd(getFirstDigit(num)) and isOdd(getLastDigit(num))\
    \ then\n         result = result + 1\n      end\n   end\n   return result\nend",
  "  local count = 0\n  for i, num in ipairs(nums) do\n    if num > 10 and isOdd(num)\
    \ and isOdd(num % 10) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "    -- TODO: Implement this function\nend", "\tlocal count = 0\n\
    \tfor i = 1, #nums do\n\t\tlocal n = nums[i]\n\t\tif n > 10 and math.abs(n % 10)\
    \ % 2 == 1 and math.abs(n / 10) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\
    \tend\n\treturn count\nend", "    local count = 0\n    for _, v in ipairs(nums)\
    \ do\n        local first = v % 10\n        while v >= 10 do\n            v =\
    \ v / 10\n        end\n        local last = v\n        if first % 2 ~= 0 and last\
    \ % 2 ~= 0 and last * 10 + first > 10 then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "  -- your code here\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and (nums[i] % 2 == 1)\
    \ and (nums[i] // 100 % 2 == 1) then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local count = 0\n  for i = 1, #nums do\n    local n\
    \ = nums[i]\n    if n > 10 and math.abs(n) % 10 % 2 == 1 and n % 2 == 1 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and (nums[i] % 2 ~= 0) and math.floor(nums[i]\
    \ / 10) % 2 ~= 0 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #nums do\n    local num = nums[i]\n   \
    \ if num > 10 and num % 2 == 1 and math.floor(num / 10) % 2 == 1 then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "\tlocal counter = 0\n\t\
    for i, v in ipairs(nums) do\n\t\tlocal lastDigit = v % 10\n\t\tlocal firstDigit\
    \ = 0\n\t\twhile v > 0 do\n\t\t\tfirstDigit = v % 10\n\t\t\tv = math.floor(v /\
    \ 10)\n\t\tend\n\t\tif v > 10 and lastDigit % 2 ~= 0 and firstDigit % 2 ~= 0 then\n\
    \t\t\tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\nend", "  local\
    \ count = 0\n  for i = 1, #nums do\n    if nums[i] > 10 and nums[i] % 2 == 1 and\
    \ getFirst(nums[i]) % 2 == 1 and getLast(nums[i]) % 2 == 1 then\n      count =\
    \ count + 1\n    end\n  end\n  return count\nend", "    local count = 0\n    for\
    \ _, num in ipairs(nums) do\n        if num > 10 and \n            math.abs(num)\
    \ % 10 % 2 ~= 0 and\n            math.abs(num // 10) % 10 % 2 ~= 0 then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ counter = 0\n  for _,num in ipairs(nums) do\n    if num > 10 and math.abs(num)%10%2\
    \ == 1 and math.floor(math.abs(num)/10)%2 == 1 then\n      counter = counter +\
    \ 1\n    end\n  end\n  return counter\nend", "  -- TODO: Implement the function\
    \ here\nend", "    -- implementation\nend", "  local count = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    if num > 10 and math.abs(num) > 9 then\n  \
    \    local firstDigit = math.abs(num) % 10\n      local lastDigit = math.floor(math.abs(num)\
    \ / 10) % 10\n      if firstDigit % 2 == 1 and lastDigit % 2 == 1 then\n     \
    \   count = count + 1\n      end\n    end\n  end\n  return count\nend", "    --\
    \ TODO: Write this function\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
