name: HumanEval_121_solution
language: lua
prompt: "-- Given a non-empty table of integers, return the sum of all of the odd\
  \ elements that are in even positions.\n-- Examples\n-- >>> solution({5, 8, 7, 1})\n\
  -- 12\n-- >>> solution({3, 3, 3, 3, 3})\n-- 9\n-- >>> solution({30, 13, 24, 321})\n\
  -- 0\nlocal function solution(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
  \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
  \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5,\
  \ 9}), 5)\n    lu.assertEquals(candidate({2, 4, 8}), 0)\n    lu.assertEquals(candidate({30,\
  \ 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3, 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and\
    \ v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend", " \
    \   local sum = 0\n    for i = 1, #lst do\n        if (lst[i] % 2 ~= 0) and (i\
    \ % 2 == 0) then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nreturn solution", "    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if i % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n \
    \       end\n    end\n    return sum\nend", "  return 12\nend\nreturn solution",
  "  return 0\nend", "    local sum = 0\n    for i = 1, #lst do\n        if lst[i]\
    \ % 2 == 1 and i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend", "  local sum = 0\n  for i, v in ipairs(lst) do\n\
    \    if i % 2 == 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend", "  sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 ==\
    \ 0 and v % 2 == 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend",
  "    local sum = 0\n    for i = 1, #lst do\n        if math.fmod(i, 2) == 0 and\
    \ math.fmod(lst[i], 2) == 1 then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend", "    local sum = 0\n    for i, v in ipairs(lst)\
    \ do\n        if v % 2 == 1 and i % 2 == 0 then\n            sum = sum + v\n \
    \       end\n    end\n    return sum\nend", "  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if v % 2 == 1 and i % 2 == 0 then\n      sum = sum + v\n    end\n  end\n\
    \  return sum\nend", "    local sum = 0\n    for i, v in ipairs(lst) do\n    \
    \    if v % 2 == 1 and i % 2 == 0 then\n            sum = sum + v\n        end\n\
    \    end\n    return sum\nend", "\tlocal sum = 0\n\tfor i, value in ipairs(lst)\
    \ do\n\t\tif math.fmod(i, 2) == 0 and math.fmod(value, 2) == 1 then\n\t\t\tsum\
    \ = sum + value\n\t\tend\n\tend\n\treturn sum\nend\nreturn solution", "  return\
    \ reduce(\n    function(acc, elem, idx)\n      if idx % 2 == 0 and elem % 2 ==\
    \ 1 then\n        return acc + elem\n      else\n        return acc\n      end\n\
    \    end,\n    0,\n    lst\n  )\nend", "    local res = 0\n    for i = 1, #lst\
    \ do\n        if i % 2 == 0 and lst[i] % 2 == 1 then\n            res = res +\
    \ lst[i]\n        end\n    end\n    return res\nend", "  local sum = 0\n  for\
    \ k, v in ipairs(lst) do\n    if k % 2 == 0 and v % 2 == 1 then\n      sum = sum\
    \ + v\n    end\n  end\n  return sum\nend", "    local res = 0\n    for i, v in\
    \ ipairs(lst) do\n        if i % 2 == 0 and v % 2 == 1 then\n            res =\
    \ res + v\n        end\n    end\n    return res\nend", "    local odd_elements\
    \ = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i] % 2 == 1 then\n\
    \            odd_elements = odd_elements + lst[i]\n        end\n    end\n    return\
    \ odd_elements\nend", "  local ret = 0\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 and lst[i] % 2 == 1 then\n      ret = ret + lst[i]\n    end\n  end\n  return\
    \ ret\nend", "  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1\
    \ and i % 2 == 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
