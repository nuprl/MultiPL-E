name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\n-- >>> file_name_check('example.txt')\n\
  -- 'Yes'\n-- >>> file_name_check('1example.dll')\n-- 'No'\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal result_1, result_2, result_3 = \"No\", \"No\", \"No\"\n\tlocal\
    \ count_of_digits = 0\n\tlocal count_of_dots = 0\n\tlocal count_of_letters = 0\n\
    \tlocal count_of_letters_after_dot = 0\n\tfor i = 1, string.len(file_name) do\n\
    \t\tif string.sub(file_name, i, i) == \".\" then\n\t\t\tcount_of_dots = count_of_dots\
    \ + 1\n\t\telseif string.match(string.sub(file_name, i, i), \"[0-9]\") then\n\t\
    \t\tcount_of_digits = count_of_digits + 1\n\t\telseif string.match(string.sub(file_name,\
    \ i, i), \"[a-zA-Z]\") then\n\t\t\tcount_of_letters = count_of_letters + 1\n\t\
    \tend\n\tend\n\tif count_of_digits <= 3 and count_of_dots == 1 and count_of_letters\
    \ > 0 then\n\t\tresult_1 = \"Yes\"\n\tend\n\tfor i = string.find(file_name, \"\
    %.\") + 1, string.len(file_name) do\n\t\tif string.match(string.sub(file_name,\
    \ i, i), \"[a-zA-Z]\") then\n\t\t\tcount_of_letters_after_dot = count_of_letters_after_dot\
    \ + 1\n\t\tend\n\tend\n\tif count_of_letters_after_dot == 3 then\n\t\tresult_2\
    \ = \"Yes\"\n\tend\n\tif string.sub(file_name, string.find(file_name, \"%.\")\
    \ + 1, string.find(file_name, \"%.\") + 3) == \"txt\" or\n\tstring.sub(file_name,\
    \ string.find(file_name, \"%.\") + 1, string.find(file_name, \"%.\") + 3) == \"\
    exe\" or\n\tstring.sub(file_name, string.find(file_name, \"%.\") + 1, string.find(file_name,\
    \ \"%.\") + 3) == \"dll\" then\n\t", "    local s,e = file_name:find(\"%.\")\n\
    \    if not s then return \"No\" end\n    local first = file_name:sub(1,s-1)\n\
    \    local ext = file_name:sub(e+1)\n    if first:find(\"%d\") or #first==0 or\
    \ #first:gsub(\"%d\",\"\")>2 then return \"No\" end\n    return ext == \"txt\"\
    \ or ext == \"exe\" or ext == \"dll\" and \"Yes\" or \"No\"\nend", end, "\t--\
    \ TODO: your code here\nend", "    -- write your code here\nend", "    local digit_check\
    \ = string.match(file_name, '%d%d%d')\n    local dot_check = string.match(file_name,\
    \ '%.')\n    local alpha_check = string.match(file_name, '^[a-zA-Z]')\n    local\
    \ suffix_check = string.match(file_name, '[.][a-zA-Z]+$')\n    if digit_check\
    \ == nil and dot_check ~= nil and alpha_check ~= nil and \n        (suffix_check\
    \ == '.txt' or suffix_check == '.exe' or suffix_check == '.dll') then\n      \
    \  return 'Yes'\n    else\n        return 'No'\n    end\nend", "    local name,\
    \ file_type = file_name:match('(.+)%.(.+)')\n    if not (name and file_type) then\n\
    \        return 'No'\n    end\n    if not (name:match('%a') and name:match('%d')\
    \ and name:match('%d%d%d')) then\n        return 'No'\n    end\n    if file_type\
    \ ~= 'txt' and file_type ~= 'exe' and file_type ~= 'dll' then\n        return\
    \ 'No'\n    end\n    return 'Yes'\nend", "\tlocal counter = 0\n\tlocal count_digits\
    \ = 0\n\tlocal dot_check = 0\n\tlocal file_name_type = \"\"\n\tlocal file_name_type_check\
    \ = 0\n\tlocal file_name_error = \"No\"\n\tlocal file_name_patt = [[([a-zA-Z]+)([0-9]+)([a-zA-Z]*)([0-9]*)([a-zA-Z]*)([0-9]*)(\\\
    ..+)]]\n\tlocal name_patt = \"[a-zA-Z]+\"\n\tlocal file_name_type_patt = [[(txt)|(exe)|(dll)]]\n\
    \t\n\tfile_name_type = file_name:match(file_name_patt)\n\t\n\tfor i in file_name:gmatch(\"\
    %d\") do\n\t\tcounter = counter + 1\n\tend\n\t\n\tfor i in file_name:gmatch(\"\
    %.\") do\n\t\tdot_check = dot_check + 1\n\tend\n\t\n\tif file_name:match(name_patt)\
    \ and counter <= 3 and dot_check == 1 then\n\t\tfile_name_error = \"Yes\"\n\t\
    end\n\t\n\treturn file_name_error\nend", "\nend", "    local i, j = string.find(file_name,\
    \ \"%.%w+$\")\n    local file_type = string.sub(file_name, i+1)\n    if file_type\
    \ == \"txt\" or file_type == \"exe\" or file_type == \"dll\" then\n        local\
    \ substr_before_dot = string.sub(file_name, 1, i-1)\n        local substr_after_dot\
    \ = string.sub(file_name, i+1)\n        local k = string.match(substr_before_dot,\
    \ \"[%a]+\")\n        if substr_before_dot ~= k or string.len(k) == 0 then\n \
    \           return \"No\"\n        end\n        local pattern = \"[%d]{4,}\"\n\
    \        local substr_before_dot_has_four_or_more_digits = string.match(substr_before_dot,\
    \ pattern)\n        if substr_before_dot_has_four_or_more_digits then\n      \
    \      return \"No\"\n        end\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend", "    -- https://www.tutorialspoint.com/lua/lua_strings.htm\n \
    \   local dot_index = file_name:find('.')\n    local file_type = file_name:sub(dot_index\
    \ + 1)", "    local function check_type(s)\n        local str = s\n        local\
    \ i = 0\n        while string.sub(str, 1, 1) ~= '.' do\n            local ch =\
    \ string.sub(str, 1, 1)\n            if string.byte(ch) >= string.byte('0') and\
    \ string.byte(ch) <= string.byte('9') then\n                i = i + 1\n      \
    \      end\n            str = string.sub(str, 2)\n        end\n        if i >\
    \ 3 then\n            return false\n        end\n        return true\n    end\n\
    \    local f_name = file_name\n    local dot_count = 0\n    while string.len(f_name)\
    \ ~= 0 do\n        local first_char = string.sub(f_name, 1, 1)\n        if first_char\
    \ == '.' then\n            dot_count = dot_count + 1\n        end\n        f_name\
    \ = string.sub(f_name, 2)\n    end\n    if dot_count ~= 1 then\n        return\
    \ 'No'\n    end\n    local first_dot = string.find(file_name, '.')\n    local\
    \ type_name = string.sub(file_name, first_dot + 1)\n    if type_name ~= 'txt'\
    \ and type_name ~= 'exe' and type_name ~= 'dll' then\n        return 'No'\n  \
    \  end\n    if string.len(file_name) <= 5 then\n        return 'No'\n    end\n\
    \    if string.sub(file_name, 1, 1) == '.' then\n        return 'No'\n    end\n\
    \    local ch = string.sub(file_name, 1, 1)\n    if (string.byte(ch) < string.byte('a')\
    \ or string.byte(ch) > string.byte('z')) and\n       (string.byte(ch) < string.byte('A')\
    \ or string.byte(ch) > string.byte('Z')) then\n        return 'No'\n    end\n\
    \    if not check_type(file_name) then\n        return 'No'\n    end\n    return\
    \ 'Yes'\nend", "    local dot_pos = file_name:find('.')\n    local name = file_name:sub(1,\
    \ dot_pos - 1)\n    local ext = file_name:sub(dot_pos + 1)\n    local num_of_digits\
    \ = name:gsub('%D', ''):len()\n    if num_of_digits > 3 then\n        return 'No'\n\
    \    end\n    if not name:find('%a') then\n        return 'No'\n    end\n    if\
    \ ext ~= 'txt' and ext ~= 'exe' and ext ~= 'dll' then\n        return 'No'\n \
    \   end\n    return 'Yes'\nend", "    local dot_count = 0\n    local digit_count\
    \ = 0\n    for i = 1, #file_name do\n        if (file_name:sub(i, i) == '.') then\n\
    \            dot_count = dot_count + 1\n        elseif (file_name:sub(i, i):match('%d'))\
    \ then\n            digit_count = digit_count + 1\n        end\n    end\n    local\
    \ prefix, suffix = file_name:match('^([%a]+).([%a]+)$')\n    return ((dot_count\
    \ == 1) and (digit_count <= 3) and (suffix == 'txt' or suffix == 'exe' or suffix\
    \ == 'dll')) and 'Yes' or 'No'\nend", "    -- edit here!\n    return 'Yes'\nend",
  end, "\tlocal number_count = 0\n\tlocal suffix = ''\n\tlocal prefix = ''\n\tlocal\
    \ dot_pos = -1\n\tfor i = 1, #file_name do\n\t\tlocal ch = file_name:sub(i, i)\n\
    \t\tif ch >= '0' and ch <= '9' then\n\t\t\tnumber_count = number_count + 1\n\t\
    \telseif ch == '.' then\n\t\t\tdot_pos = i\n\t\tend\n\tend\n\tif number_count\
    \ > 3 then\n\t\treturn 'No'\n\tend\n\tif dot_pos == -1 then\n\t\treturn 'No'\n\
    \tend\n\tif dot_pos == 1 then\n\t\treturn 'No'\n\tend\n\tprefix = file_name:sub(1,\
    \ dot_pos - 1)\n\tsuffix = file_name:sub(dot_pos + 1)\n\tif (prefix:match('^[a-zA-Z]+$')\
    \ ~= prefix) then\n\t\treturn 'No'\n\tend\n\tif suffix ~= 'txt' and suffix ~=\
    \ 'exe' and suffix ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn 'Yes'\nend",
  "    if file_name:match('^[a-zA-Z][^%d.]+%.[a-z]+$') then return 'Yes'\n    else\
    \ return 'No' end\nend", "  local before_dot, after_dot = file_name:match('^([%a]%w*)%.([%a]%w*)$')\n\
    \  if before_dot == nil or after_dot == nil then\n    return 'No'\n  end\n  if\
    \ before_dot:match('%d%d%d') or after_dot:match('%w+') == nil then\n    return\
    \ 'No'\n  end\n  if after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll'\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "\tlocal digit = 0\n\tlocal\
    \ idx = 1\n\tlocal last_idx = string.len(file_name)\n\tlocal dot_idx = nil\n\t\
    while idx <= last_idx do\n\t\tlocal byte = string.byte(file_name, idx)\n\t\tif\
    \ byte >= 0x30 and byte <= 0x39 then\n\t\t\tdigit = digit + 1\n\t\telseif byte\
    \ == 0x2E then\n\t\t\tdot_idx = idx\n\t\tend\n\t\tidx = idx + 1\n\tend\n\tif digit\
    \ > 3 then\n\t\treturn 'No'\n\tend\n\tif dot_idx == nil then\n\t\treturn 'No'\n\
    \tend\n\tlocal prefix = string.sub(file_name, 1, dot_idx - 1)\n\tlocal suffix\
    \ = string.sub(file_name, dot_idx + 1)\n\tif string.len(prefix) == 0 then\n\t\t\
    return 'No'\n\tend\n\tif string.byte(prefix, 1) < 0x41 then\n\t\treturn 'No'\n\
    \tend\n\tif suffix ~= 'txt' and suffix ~= 'exe' and suffix ~= 'dll' then\n\t\t\
    return 'No'\n\tend\n\treturn 'Yes'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
