language: lua
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9dkpmbq.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpi9dkpmbq.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local dict = {}\n    for _, v in ipairs(nums) do\n        local sum = 0\n\
    \        local tmp = v\n        while tmp ~= 0 do\n            sum = sum + tmp\
    \ % 10\n            tmp = math.floor(tmp / 10)\n        end\n        dict[v] =\
    \ sum\n    end\n    table.sort(nums, function(a, b)\n        if dict[a] == dict[b]\
    \ then\n            return a < b\n        else\n            return dict[a] < dict[b]\n\
    \        end\n    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function sum(num)\n    local s = 0\n    while num > 0 do\n      s = s\
    \ + num % 10\n      num = math.floor(num / 10)\n    end\n    return s\n  end\n\
    \  table.sort(nums, function(a, b)\n    return sum(a) < sum(b) or (sum(a) == sum(b)\
    \ and a < b)\n  end)\n  return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd2d838k.lua:28:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmptd2d838k.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function _order_by_points(...)\n    local sums = {}\n    local nums =\
    \ {...}\n    for i, v in ipairs(nums) do\n      sums[i] = sum_of_digits(v)\n \
    \   end\n    return _sort_by_index(sums, nums)\n  end\n  return _order_by_points(unpack(nums))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpis8izy_e.lua:19:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpis8izy_e.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpis8izy_e.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  if #nums <= 1 then\n    return nums\n  end\n  local pivot = nums[1]\n  local\
    \ pivot_sum = sum_of_digits(pivot)\n  local less = {}\n  local more = {}\n  for\
    \ _, num in ipairs(nums) do\n    if num ~= pivot then\n      local num_sum = sum_of_digits(num)\n\
    \      if num_sum < pivot_sum then\n        table.insert(less, num)\n      else\n\
    \        table.insert(more, num)\n      end\n    end\n  end\n  local result =\
    \ {}\n  for _, num in ipairs(order_by_points(less)) do\n    table.insert(result,\
    \ num)\n  end\n  table.insert(result, pivot)\n  for _, num in ipairs(order_by_points(more))\
    \ do\n    table.insert(result, num)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfek8sekc.lua:15:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpfek8sekc.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpfek8sekc.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function digit_sum(num)\n        local sum = 0\n        while num >\
    \ 0 do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n\
    \        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsqrpnrdy.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \ttable.sort(nums, function(a, b)\n\t\tlocal a_sum = sum_of_digits(a)\n\t\tlocal\
    \ b_sum = sum_of_digits(b)\n\t\tif a_sum == b_sum then\n\t\t\treturn a < b\n\t\
    \telse\n\t\t\treturn a_sum < b_sum\n\t\tend\n\tend)\n\treturn nums\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt3xd7xfr.lua:12:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpt3xd7xfr.lua:12:\
    \ in function </tmp/tmpt3xd7xfr.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpt3xd7xfr.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpt3xd7xfr.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i = 1, #nums do\n        sums[i] = 0\n        local\
    \ num = nums[i]\n        while num ~= 0 do\n            sums[i] = sums[i] + num\
    \ % 10\n            num = math.floor(num / 10)\n        end\n    end\n    local\
    \ function compare(a, b)\n        return sums[a] < sums[b] or (sums[a] == sums[b]\
    \ and a < b)\n    end\n    local indexes = {}\n    for i = 1, #nums do\n     \
    \   indexes[i] = i\n    end\n    table.sort(indexes, compare)\n    local result\
    \ = {}\n    for i = 1, #indexes do\n        result[i] = nums[indexes[i]]\n   \
    \ end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- TODO: Implement this\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29m98j15.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp29m98j15.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- TODO: implement\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvm17mwdn.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpvm17mwdn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local point_sum = {}\n    for idx, num in ipairs(nums) do\n        local\
    \ sum = 0\n        for digit in string.gmatch(string.format(\"%d\", math.abs(num)),\
    \ \"%d\") do\n            sum = sum + tonumber(digit)\n        end\n        point_sum[idx]\
    \ = sum\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwd7i2hvt.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local mapped = {}\n    for i, num in ipairs(nums) do\n        local sum =\
    \ 0\n        while num ~= 0 do\n            sum = sum + num % 10\n           \
    \ num = math.floor(num / 10)\n        end\n        table.insert(mapped, { num\
    \ = nums[i], sum = sum, index = i })\n    end\n    table.sort(mapped, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.index < b.index\n \
    \       else\n            return a.sum < b.sum\n        end\n    end)\n    local\
    \ ordered = {}\n    for _, map in ipairs(mapped) do\n        table.insert(ordered,\
    \ map.num)\n    end\n    return ordered\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local copy = nums\n    table.sort(copy,\n        function(a, b)\n       \
    \     local sum_a = 0\n            local sum_b = 0\n            for digit in tostring(a):gmatch(\"\
    %d\") do\n                sum_a = sum_a + tonumber(digit)\n            end\n \
    \           for digit in tostring(b):gmatch(\"%d\") do\n                sum_b\
    \ = sum_b + tonumber(digit)\n            end\n            if sum_a == sum_b then\n\
    \                return a < b\n            else\n                return sum_a\
    \ < sum_b\n            end\n        end\n    )\n    return copy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0f6awqsk.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, 1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmp0f6awqsk.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ck5vten.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ck5vten.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return {}\n    end\n    local nums_table = {}\n\
    \    for i, n in ipairs(nums) do\n        nums_table[i] = { n, n % 10 + n // 10\
    \ }\n    end\n    table.sort(nums_table, function(a, b)\n        if a[2] ~= b[2]\
    \ then\n            return a[2] < b[2]\n        else\n            return a[1]\
    \ < b[1]\n        end\n    end)\n    local res = {}\n    for i, n in ipairs(nums_table)\
    \ do\n        res[i] = n[1]\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphywla2mu.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmphywla2mu.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local rt = {}\n    local n = #nums\n    for i = 1, n do\n        local s\
    \ = nums[i]\n        if rt[s] == nil then\n            rt[s] = {}\n        end\n\
    \        table.insert(rt[s], i)\n    end\n    local tbl = {}\n    for k, v in\
    \ pairs(rt) do\n        table.insert(tbl, {k, v})\n    end\n    table.sort(tbl,\
    \ function(x, y)\n        local sx = sum_of_digits(x[1])\n        local sy = sum_of_digits(y[1])\n\
    \        if sx == sy then\n            local nx = #x[2]\n            local ny\
    \ = #y[2]\n            for i = 1, math.min(nx, ny) do\n                if x[2][i]\
    \ ~= y[2][i] then\n                    return x[2][i] < y[2][i]\n            \
    \    end\n            end\n            return nx < ny\n        else\n        \
    \    return sx < sy\n        end\n    end)\n    local rt = {}\n    for _, v in\
    \ ipairs(tbl) do\n        for _, v2 in ipairs(v[2]) do\n            table.insert(rt,\
    \ nums[v2])\n        end\n    end\n    return rt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbk9g6df_.lua:25:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpbk9g6df_.lua:25:\
    \ in function </tmp/tmpbk9g6df_.lua:24>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpbk9g6df_.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpbk9g6df_.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, num in ipairs(nums) do\n        sums[i] = {sum\
    \ = sum_of_digits(num), index = i}\n    end\n    table.sort(sums, function(a,\
    \ b)\n        if a.sum == b.sum then\n            return a.index < b.index\n \
    \       else\n            return a.sum < b.sum\n        end\n    end)\n    local\
    \ res = {}\n    for i, sum in ipairs(sums) do\n        res[i] = nums[sum.index]\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy70migk3.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpy70migk3.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpy70migk3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  if #nums == 0 then\n    return {}\n  end\n  local sorted = {}\n  for i, num\
    \ in ipairs(nums) do\n    table.insert(sorted, {num, i})\n  end\n  table.sort(sorted,\
    \ function(a, b)\n    local sum_a = 0\n    local sum_b = 0\n    for _, digit in\
    \ ipairs(get_digits(a[1])) do\n      sum_a = sum_a + digit\n    end\n    for _,\
    \ digit in ipairs(get_digits(b[1])) do\n      sum_b = sum_b + digit\n    end\n\
    \    if sum_a == sum_b then\n      return a[2] < b[2]\n    end\n    return sum_a\
    \ < sum_b\n  end)\n  local result = {}\n  for _, v in ipairs(sorted) do\n    table.insert(result,\
    \ v[1])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqhjrnfij.lua:21:\
    \ attempt to call a nil value (global 'get_digits')\nstack traceback:\n\t/tmp/tmpqhjrnfij.lua:21:\
    \ in function </tmp/tmpqhjrnfij.lua:18>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpqhjrnfij.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpqhjrnfij.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- your code here\n    return {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33a74vsf.lua:18:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp33a74vsf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp0i6cyf.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplp0i6cyf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  local points = {}\n  local sorted = {}\n  local function\
    \ sum_digits(n)\n    local s = 0\n    while n > 0 do\n      s = s + n % 10\n \
    \     n = math.floor(n / 10)\n    end\n    return s\n  end\n  for _, n in ipairs(nums)\
    \ do\n    local p = sum_digits(n)\n    points[n] = p\n    if result[p] == nil\
    \ then\n      result[p] = {n}\n    else\n      table.insert(result[p], n)\n  \
    \  end\n  end\n  for _, v in pairs(result) do\n    table.sort(v)\n    for _, n\
    \ in ipairs(v) do\n      table.insert(sorted, n)\n    end\n  end\n  return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqldnw4s_.lua:43:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmpqldnw4s_.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function digit_sum(n)\n    local sum = 0\n    for d in string.gmatch(tostring(math.abs(n)),\
    \ \"%d\") do\n      sum = sum + tonumber(d)\n    end\n    return sum\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwl5wzlhe.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  if #nums == 0 then\n    return {}\n  end\n  local new_nums = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    local str = tostring(nums[i])\n    for j\
    \ = 1, #str do\n      local c = str:sub(j, j)\n      sum = sum + tonumber(c)\n\
    \    end\n    new_nums[i] = {nums[i], sum}\n  end\n  table.sort(new_nums, function(a,\
    \ b)\n    if a[2] < b[2] then\n      return true\n    elseif a[2] > b[2] then\n\
    \      return false\n    else\n      return a[1] < b[1]\n    end\n  end)\n  local\
    \ ret = {}\n  for i = 1, #new_nums do\n    ret[i] = new_nums[i][1]\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnqubcik.lua:20:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpwnqubcik.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpwnqubcik.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function compare(a, b)\n        local sum_a = 0\n        local sum_b\
    \ = 0\n        for _, n in ipairs(a) do\n            sum_a = sum_a + n\n     \
    \   end\n        for _, n in ipairs(b) do\n            sum_b = sum_b + n\n   \
    \     end\n        if sum_a == sum_b then\n            return a.index < b.index\n\
    \        else\n            return sum_a < sum_b\n        end\n    end\n    local\
    \ array = {}\n    for i, num in ipairs(nums) do\n        local digits = {}\n \
    \       while num ~= 0 do\n            digits[#digits + 1] = num % 10\n      \
    \      num = (num - num % 10) / 10\n        end\n        array[#array + 1] = {index\
    \ = i, digits = digits}\n    end\n    table.sort(array, compare)\n    local result\
    \ = {}\n    for _, v in ipairs(array) do\n        result[#result + 1] = nums[v.index]\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local s = {}\n  for i,n in ipairs(nums) do\n    table.insert(s, {n, sum_of_digits(n),\
    \ i})\n  end\n  table.sort(s, function(a,b) return a[2] < b[2] or (a[2] == b[2]\
    \ and a[3] < b[3]) end)\n  for i,s in ipairs(s) do\n    nums[i] = s[1]\n  end\n\
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpscj6yny_.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpscj6yny_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpscj6yny_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sum = {}\n  for index, value in ipairs(nums) do\n    sum[index] = 0\n\
    \    for i in tostring(value):gmatch(\"%d\") do\n      sum[index] = sum[index]\
    \ + tonumber(i)\n    end\n  end\n  table.sort(sum)\n  local nums2 = {}\n  for\
    \ _, value in ipairs(sum) do\n    for index, value2 in ipairs(nums) do\n     \
    \ local sum2 = 0\n      for i in tostring(value2):gmatch(\"%d\") do\n        sum2\
    \ = sum2 + tonumber(i)\n      end\n      if sum2 == value then\n        table.insert(nums2,\
    \ value2)\n        table.remove(nums, index)\n        break\n      end\n    end\n\
    \  end\n  return nums2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllo2q1m1.lua:39:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpllo2q1m1.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function helper(a, b)\n        local sum_a = 0\n        local sum_b\
    \ = 0\n        for i = 1, #tostring(a) do\n            sum_a = sum_a + tonumber(tostring(a):sub(i,\
    \ i))\n        end\n        for i = 1, #tostring(b) do\n            sum_b = sum_b\
    \ + tonumber(tostring(b):sub(i, i))\n        end\n        if sum_a == sum_b then\n\
    \            return a < b\n        else\n            return sum_a < sum_b\n  \
    \      end\n    end\n    table.sort(nums, helper)\n    return nums\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1vdi1k_.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpq1vdi1k_.lua:15:\
    \ in function </tmp/tmpq1vdi1k_.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpq1vdi1k_.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpq1vdi1k_.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function helper(num)\n        local sum = 0\n        while num ~= 0\
    \ do\n            sum = sum + num % 10\n            num = math.floor(num / 10)\n\
    \        end\n        return sum\n    end\n    local helper_sort = function(a,\
    \ b)\n        return helper(a) < helper(b)\n    end\n    table.sort(nums, helper_sort)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- your code here\n    if #nums == 0 then return nums end\n    local sum\
    \ = {}\n    for i = 1, #nums do\n        local s = 0\n        while nums[i] ~=\
    \ 0 do\n            s = s + nums[i] % 10\n            nums[i] = math.floor(nums[i]\
    \ / 10)\n        end\n        table.insert(sum, {i, s})\n    end\n    for i =\
    \ 1, #sum - 1 do\n        for j = 1, #sum - i do\n            if sum[j][2] > sum[j\
    \ + 1][2] then\n                sum[j], sum[j + 1] = sum[j + 1], sum[j]\n    \
    \        end\n        end\n    end\n    local ret = {}\n    for i = 1, #sum do\n\
    \        table.insert(ret, nums[sum[i][1]])\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal digits = {}\n\tlocal index = 1\n\tfor k,v in pairs(nums) do\n\t\tdigits[index]\
    \ = {sum = 0, num = v}\n\t\tlocal num = v\n\t\twhile num ~= 0 do\n\t\t\tdigits[index].sum\
    \ = digits[index].sum + num % 10\n\t\t\tnum = math.floor(num / 10)\n\t\tend\n\t\
    \tindex = index + 1\n\tend\n\ttable.sort(digits, function(a, b)\n\t\tif a.sum\
    \ == b.sum then\n\t\t\treturn a.num < b.num\n\t\telse\n\t\t\treturn a.sum < b.sum\n\
    \t\tend\n\tend)\n\tlocal result = {}\n\tindex = 1\n\tfor k,v in pairs(digits)\
    \ do\n\t\tresult[index] = v.num\n\t\tindex = index + 1\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp0i6cyf.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplp0i6cyf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function compare(a, b)\n    local a_sum = sum_of_digits(a)\n    local\
    \ b_sum = sum_of_digits(b)\n    if a_sum ~= b_sum then\n      return a_sum < b_sum\n\
    \    else\n      return a < b\n    end\n  end\n  table.sort(nums, compare)\n \
    \ return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jbzqs8b.lua:12:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp3jbzqs8b.lua:12:\
    \ in function </tmp/tmp3jbzqs8b.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp3jbzqs8b.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp3jbzqs8b.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cp6w1qh.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp_cp6w1qh.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ck5vten.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ck5vten.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal sum_pts = {}\n\tfor k, v in pairs(nums) do\n\t\tlocal sum = 0\n\t\tfor\
    \ i in string.gmatch(string.format(\"%d\", v), \"%d\") do\n\t\t\tsum = sum + tonumber(i)\n\
    \t\tend\n\t\tif sum_pts[sum] == nil then\n\t\t\tsum_pts[sum] = {}\n\t\tend\n\t\
    \ttable.insert(sum_pts[sum], v)\n\tend\n\treturn sum_pts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lxfdoyf.lua:28:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {{1, -1}, {11, -11}, {-12}}\nstack\
    \ traceback:\n\t/tmp/tmp5lxfdoyf.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    for i = 1, #nums do\n        for j = i + 1, #nums do\n            if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) then\n                nums[i], nums[j] = nums[j], nums[i]\n\
    \            end\n        end\n    end\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzw6enbie.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpzw6enbie.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzw6enbie.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- TODO: Add implementation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaz5zud2.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpuaz5zud2.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local res = {}\n    local sums = {}\n    for i = 1, #nums do\n        sums[i]\
    \ = {num = nums[i], index = i, sum = 0}\n        for j = 1, #tostring(nums[i])\
    \ do\n            sums[i].sum = sums[i].sum + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n        end\n    end\n    table.sort(sums, function(a, b)\n        if a.sum\
    \ < b.sum then\n            return true\n        elseif a.sum > b.sum then\n \
    \           return false\n        else\n            return a.index < b.index\n\
    \        end\n    end)\n    for i = 1, #sums do\n        res[i] = sums[i].num\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjas7a0b8.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpjas7a0b8.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpjas7a0b8.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\n    local sum = {}\n    for i,v in ipairs(nums) do\n \
    \       local s = 0\n        if v < 0 then\n            v = v * -1\n        end\n\
    \        while v ~= 0 do\n            s = s + (v % 10)\n            v = math.floor(v\
    \ / 10)\n        end\n        sum[i] = s\n    end\n    local t = {}\n    for i,v\
    \ in ipairs(sum) do\n        t[v] = i\n    end\n    local ret = {}\n    for i,v\
    \ in ipairs(sum) do\n        ret[i] = nums[t[v]]\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkpoqmhl.lua:38:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpnkpoqmhl.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function get_points(num)\n        local p = 0\n        for i = 1, #tostring(num)\
    \ do\n            p = p + tonumber(tostring(num):sub(i, i))\n        end\n   \
    \     return p\n    end\n    local result = {}\n    for i = 1, #nums do\n    \
    \    local key = get_points(nums[i])\n        if result[key] == nil then\n   \
    \         result[key] = {}\n        end\n        table.insert(result[key], nums[i])\n\
    \    end\n    local sorted_result = {}\n    for i = 1, #result do\n        for\
    \ j = 1, #result[i] do\n            table.insert(sorted_result, result[i][j])\n\
    \        end\n    end\n    return sorted_result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkk72jnsj.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpkk72jnsj.lua:14:\
    \ in local 'get_points'\n\t/tmp/tmpkk72jnsj.lua:20: in local 'candidate'\n\t/tmp/tmpkk72jnsj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local table_length = #nums\n  local sorted_nums = {}\n  local sum_of_digits_with_indices\
    \ = {}\n  local sum_of_digits_with_indices_length = 0\n  local sum = 0\n  local\
    \ len = 0\n  local sorted_nums_index = 1\n  local i = 1\n  local j = 1\n  local\
    \ b = 0\n  for i = 1, table_length do\n    sum = 0\n    for j = 1, string.len(tostring(nums[i]))\
    \ do\n      sum = sum + tonumber(string.sub(tostring(nums[i]), j, j))\n    end\n\
    \    sum_of_digits_with_indices_length = #sum_of_digits_with_indices\n    -- find\
    \ the index in sorted table where to insert it\n    if sum_of_digits_with_indices_length\
    \ == 0 then\n      table.insert(sum_of_digits_with_indices, {{sum, i}})\n    else\n\
    \      -- search where the new element can be inserted and insert it there\n \
    \     local function insert_at_right_position(sum, i)\n        local index = 1\n\
    \        local length = #sum_of_digits_with_indices\n        local found = false\n\
    \        for k = 1, length do\n          if sum < sum_of_digits_with_indices[k][1][1]\
    \ then\n            table.insert(sum_of_digits_with_indices, k, {{sum, i}})\n\
    \            found = true\n            break\n          elseif sum == sum_of_digits_with_indices[k][1][1]\
    \ then\n            table.insert(sum_of_digits_with_indices[k], {{sum, i}})\n\
    \            found = true\n            break\n          end\n        end\n   \
    \     if not found then\n          table.insert(sum_of_digits_with_indices, {{sum,\
    \ i}})\n        end\n      end\n      insert_at_right_position(sum, i)\n    end\n\
    \  end\n  -- get all the numbers in a sorted array\n  local function get\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2mtok00e.lua:56: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal function fsum(num)\n\t\tlocal str_num = tostring(num)\n\t\tlocal sum =\
    \ 0\n\t\tfor i = 1, #str_num do\n\t\t\tsum = sum + tonumber(str_num:sub(i, i))\n\
    \t\tend\n\t\treturn sum\n\tend\n\ttable.sort(nums, function(a, b) return fsum(a)\
    \ == fsum(b) and a < b or fsum(a) < fsum(b) end)\n\treturn nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3un5ncdl.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp3un5ncdl.lua:15:\
    \ in upvalue 'fsum'\n\t/tmp/tmp3un5ncdl.lua:19: in function </tmp/tmp3un5ncdl.lua:19>\n\
    \t[C]: in function 'table.sort'\n\t/tmp/tmp3un5ncdl.lua:19: in local 'candidate'\n\
    \t/tmp/tmp3un5ncdl.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- Insert your code here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpood1pgf7.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpood1pgf7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal points = {}\n\tlocal res = {}\n\tfor i = 1, #nums do\n\t\tlocal p = sum_of_digits(nums[i])\n\
    \t\tpoints[p] = points[p] or {}\n\t\ttable.insert(points[p], i)\n\tend\n\tlocal\
    \ k = 0\n\tfor i = 1, #nums do\n\t\tlocal min = nil\n\t\tfor j = 1, #nums do\n\
    \t\t\tif not min or points[j] and #points[j] > 0 and min > j then\n\t\t\t\tmin\
    \ = j\n\t\t\tend\n\t\tend\n\t\tif min then\n\t\t\tk = k + 1\n\t\t\tres[k] = nums[points[min][1]]\n\
    \t\t\ttable.remove(points[min], 1)\n\t\tend\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3l_7yo4.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpf3l_7yo4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpf3l_7yo4.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  for i=1, #nums do\n    for j=i+1, #nums do\n      if sum_of_digits(nums[i])\
    \ > sum_of_digits(nums[j]) then\n        nums[i], nums[j] = nums[j], nums[i]\n\
    \      end\n    end\n  end\n  return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjey6adyg.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpjey6adyg.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpjey6adyg.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(num)\n        local sum = 0\n        while num\
    \ > 0 do\n            sum = sum + num % 10\n            num = math.floor(num /\
    \ 10)\n        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lm04fec.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum(n)\n        local s = 0\n        while n ~= 0 do\n   \
    \         s = s + (n % 10)\n            n = math.floor(n / 10)\n        end\n\
    \        return s\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgaa_kc1g.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- Extract a table of indices and a table of digits.\n  local indices = {}\n\
    \  local digits = {}\n  for i, n in ipairs(nums) do\n    local d = math.abs(n)\n\
    \    digits[#digits + 1] = d\n    indices[#indices + 1] = i\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdg_tz0ni.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    local digits = {}\n    for i, v in ipairs(nums) do\n\
    \        local sum = 0\n        while v > 0 do\n            sum = sum + v % 10\n\
    \            v = math.floor(v / 10)\n        end\n        digits[i] = sum\n  \
    \  end\n    table.sort(digits)\n    for i, v in ipairs(digits) do\n        for\
    \ j, w in ipairs(nums) do\n            local sum = 0\n            while w > 0\
    \ do\n                sum = sum + w % 10\n                w = math.floor(w / 10)\n\
    \            end\n            if sum == v then\n                table.insert(result,\
    \ nums[j])\n                table.remove(nums, j)\n                break\n   \
    \         end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lh3_wtt.lua:42:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp1lh3_wtt.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    table.sort(nums,\n    function(a, b)\n        local a_sum = sum_of_digits(a)\n\
    \        local b_sum = sum_of_digits(b)\n        return a_sum < b_sum or (a_sum\
    \ == b_sum and a < b)\n    end)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrx71job.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpzrx71job.lua:13:\
    \ in function </tmp/tmpzrx71job.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpzrx71job.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzrx71job.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyuupgck.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpxyuupgck.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxrhp2uc.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpkxrhp2uc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum_digits = {}\n    for i = 1, #nums do\n        sum_digits[i] = digit_sum(nums[i])\n\
    \    end\n    for i = 1, #nums do\n        for j = i + 1, #nums do\n         \
    \   if sum_digits[i] > sum_digits[j] then\n                local tmp = nums[i]\n\
    \                nums[i] = nums[j]\n                nums[j] = tmp\n          \
    \      tmp = sum_digits[i]\n                sum_digits[i] = sum_digits[j]\n  \
    \              sum_digits[j] = tmp\n            end\n        end\n    end\n  \
    \  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptha_3v11.lua:13:\
    \ attempt to call a nil value (global 'digit_sum')\nstack traceback:\n\t/tmp/tmptha_3v11.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmptha_3v11.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- Implement your solution here\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2_5nydo.lua:18:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpt2_5nydo.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local score_table = {}\n  for i, v in ipairs(nums) do\n    local sum = 0\n\
    \    for digit in tostring(v):gmatch(\"%d\") do\n      sum = sum + tonumber(digit)\n\
    \    end\n    table.insert(score_table, {v, sum, i})\n  end\n  table.sort(score_table,\
    \ function(a, b)\n    if a[2] == b[2] then\n      return a[3] < b[3]\n    else\n\
    \      return a[2] < b[2]\n    end\n  end)\n  local ret = {}\n  for _, v in ipairs(score_table)\
    \ do\n    table.insert(ret, v[1])\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphclo4ny0.lua:36:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmphclo4ny0.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function get_points(x)\n        local x_abs = math.abs(x)\n       \
    \ local points = 0\n        while x_abs > 0 do\n            points = points +\
    \ x_abs % 10\n            x_abs = math.floor(x_abs / 10)\n        end\n      \
    \  return points\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp_83mji3.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local digitsum = {}\n  for index, value in ipairs(nums) do\n    local sum =\
    \ 0\n    for i = 1, tostring(value):len() do\n      sum = sum + tonumber(tostring(value):sub(i,\
    \ i))\n    end\n    digitsum[index] = sum\n  end\n  table.sort(digitsum)\n  local\
    \ points = {}\n  for i = 1, #digitsum do\n    for index, value in ipairs(nums)\
    \ do\n      local sum = 0\n      for j = 1, tostring(value):len() do\n       \
    \ sum = sum + tonumber(tostring(value):sub(j, j))\n      end\n      if sum ==\
    \ digitsum[i] then\n        points[#points + 1] = value\n        nums[index] =\
    \ nums[#nums]\n        table.remove(nums)\n        break\n      end\n    end\n\
    \  end\n  return points\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4p8czau.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpo4p8czau.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpo4p8czau.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    local queue = {}\n    for i, v in ipairs(nums) do\n\
    \        local key = tostring(v):gsub(\"%D\", \"\"):gsub(\"0\", \"\"):len()\n\
    \        queue[key] = queue[key] or {}\n        queue[key][#queue[key] + 1] =\
    \ {\n            key = key,\n            index = i,\n            value = v\n \
    \       }\n    end\n    for i = 1,#queue do\n        if queue[i] then\n      \
    \      queue[i] = queue[i]:sort(function(a, b)\n                return a.index\
    \ < b.index\n            end)\n            for _, v in ipairs(queue[i]) do\n \
    \               result[#result + 1] = v.value\n            end\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7vyjg95.lua:24:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpp7vyjg95.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpp7vyjg95.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfylh8ku.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpqfylh8ku.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal sum = 0\n\tlocal array = {}\n\tfor i = 1, #nums do\n\t\tsum = 0\n\t\t\
    for d in tostring(nums[i]):gmatch(\".\") do\n\t\t\tsum = sum + tonumber(d)\n\t\
    \tend\n\t\tarray[i] = {nums[i], sum}\n\tend\n\tlocal function cmp(a, b)\n\t\t\
    if a[2] < b[2] then\n\t\t\treturn true\n\t\telseif a[2] == b[2] then\n\t\t\treturn\
    \ nums[a[1]] < nums[b[1]]\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\ttable.sort(array,\
    \ cmp)\n\tlocal result = {}\n\tfor i = 1, #array do\n\t\tresult[i] = array[i][1]\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfd1usmv.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpbfd1usmv.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpbfd1usmv.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(x, y)\n        local x_value = sum_of_digits(x)\n\
    \        local y_value = sum_of_digits(y)\n        if x_value == y_value then\n\
    \            return x < y\n        else\n            return x_value < y_value\n\
    \        end\n    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7aagzww.lua:12:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpj7aagzww.lua:12:\
    \ in function </tmp/tmpj7aagzww.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpj7aagzww.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpj7aagzww.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- YOUR CODE HERE\n  -- Hint: you can use 'reduce' function to calculate sum\
    \ of all digits\n  local function split(n)\n    local res = {}\n    while n >\
    \ 0 do\n      table.insert(res, n % 10)\n      n = math.floor(n / 10)\n    end\n\
    \    return res\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpzel1nc.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sumOfDigits = {}\n  local unorderedArray = {}\n  local orderedArray =\
    \ {}\n  local len = 0\n  local flag = false\n  local sum = 0\n  for i,v in ipairs(nums)\
    \ do\n    sum = 0\n    while v > 0 do\n      sum = sum + (v % 10)\n      v = math.floor(v\
    \ / 10)\n    end\n    table.insert(sumOfDigits,sum)\n    table.insert(unorderedArray,i)\n\
    \  end\n  --print(unorderedArray)\n  for i,v in ipairs(sumOfDigits) do\n    for\
    \ j = 1,len do\n      if sumOfDigits[j] >= v then\n        table.insert(orderedArray,j,unorderedArray[i])\n\
    \        flag = true\n        break\n      end\n    end\n    if flag == false\
    \ then\n      table.insert(orderedArray,unorderedArray[i])\n    end\n    len =\
    \ len + 1\n    flag = false\n  end\n  --print(orderedArray)\n  for i,v in ipairs(orderedArray)\
    \ do\n    orderedArray[i] = nums[v]\n  end\n  return orderedArray\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3aui_i62.lua:51:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp3aui_i62.lua:51: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp0i6cyf.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplp0i6cyf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local result = {}\n  local s = {}\n  local count = 1\n  for i = 1, #nums do\n\
    \    if not s[sum_of_digits(nums[i])] then\n      s[sum_of_digits(nums[i])] =\
    \ {nums[i]}\n    else\n      s[sum_of_digits(nums[i])][#s[sum_of_digits(nums[i])]\
    \ + 1] = nums[i]\n    end\n  end\n  for k, v in pairs(s) do\n    for i = 1, #v\
    \ do\n      result[count] = v[i]\n      count = count + 1\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3_uu7lp.lua:15:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpk3_uu7lp.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpk3_uu7lp.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sum = 0\n  local nums_new = {}\n  for i = 1, #nums do\n    sum = 0\n\
    \    for j = 1, #tostring(nums[i]) do\n      sum = sum + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n    end\n    nums_new[i] = sum * nums[i]\n  end\n  table.sort(nums_new)\n\
    \  for i = 1, #nums_new do\n    nums_new[i] = nums_new[i] / (nums_new[i] - nums_new[i]\
    \ % 1)\n  end\n  return nums_new\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb9mgwzbv.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpb9mgwzbv.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpb9mgwzbv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(left, right)\n        local leftPoints = sum_of_digits(left)\n\
    \        local rightPoints = sum_of_digits(right)\n        if leftPoints == rightPoints\
    \ then\n            return left < right\n        end\n        return leftPoints\
    \ < rightPoints\n    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xw35mv6.lua:12:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp8xw35mv6.lua:12:\
    \ in function </tmp/tmp8xw35mv6.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp8xw35mv6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8xw35mv6.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function cmp(a, b)\n        local sumA = a:sum_digits()\n        local\
    \ sumB = b:sum_digits()\n        if sumA ~= sumB then\n            return sumA\
    \ < sumB\n        else\n            return a < b\n        end\n    end\n    table.sort(nums,\
    \ cmp)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpssndvnxv.lua:12:\
    \ attempt to index a number value (local 'a')\nstack traceback:\n\t/tmp/tmpssndvnxv.lua:12:\
    \ in function </tmp/tmpssndvnxv.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpssndvnxv.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpssndvnxv.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum_of_digits = {}\n    local ordered_nums = {}\n    for i, v in ipairs(nums)\
    \ do\n        local abs_v = math.abs(v)\n        local index = i\n        local\
    \ sum = 0\n        while (abs_v > 0) do\n            sum = sum + (abs_v % 10)\n\
    \            abs_v = math.floor(abs_v / 10)\n        end\n        table.insert(sum_of_digits,\
    \ {sum, index, v})\n    end\n    table.sort(sum_of_digits, function(a, b) return\
    \ a[1] < b[1] end)\n    for _, v in ipairs(sum_of_digits) do\n        table.insert(ordered_nums,\
    \ v[3])\n    end\n    return ordered_nums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nk2lo0v.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmp_nk2lo0v.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum_table = {}\n    for i, v in ipairs(nums) do\n        sum_table[i]\
    \ = nums[i]\n        local sum = 0\n        for s in string.gmatch(tostring(v),\
    \ \"%d\") do\n            sum = sum + tonumber(s)\n        end\n        sum_table[i]\
    \ = {v, sum}\n    end\n    table.sort(sum_table, function(a, b) return a[2] <\
    \ b[2] end)\n    local result = {}\n    for i, v in ipairs(sum_table) do\n   \
    \     result[i] = v[1]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bhr2yqa.lua:31:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmp8bhr2yqa.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function get_sum(num)\n        local sum = 0\n        for c in tostring(num):gmatch('%d')\
    \ do\n            sum = sum + tonumber(c)\n        end\n        return sum\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ffpj8k0.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- YOUR CODE HERE\n    error(\"Not implemented yet\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp08g165va.lua:12:\
    \ Not implemented yet\nstack traceback:\n\t/tmp/tmp08g165va.lua:12: in local 'candidate'\n\
    \t/tmp/tmp08g165va.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local compare = function(left, right)\n        local left_point = 0\n   \
    \     local right_point = 0\n        while left > 0 do\n            left_point\
    \ = left_point + left % 10\n            left = math.floor(left / 10)\n       \
    \ end\n        while right > 0 do\n            right_point = right_point + right\
    \ % 10\n            right = math.floor(right / 10)\n        end\n        if left_point\
    \ == right_point then\n            return left < right\n        else\n       \
    \     return left_point < right_point\n        end\n    end\n    table.sort(nums,\
    \ compare)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp763gs20e.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp763gs20e.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local order = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    local\
    \ num_abs = math.abs(num)\n    while num_abs > 0 do\n      sum = sum + num_abs\
    \ % 10\n      num_abs = math.floor(num_abs / 10)\n    end\n    table.insert(order,\
    \ {sum, num})\n  end\n  table.sort(order, function(a, b)\n    if a[1] < b[1] then\n\
    \      return true\n    elseif a[1] > b[1] then\n      return false\n    else\n\
    \      return a[2] < b[2]\n    end\n  end)\n  local res = {}\n  for _, tuple in\
    \ ipairs(order) do\n    table.insert(res, tuple[2])\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplyleb88a.lua:40:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, 1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmplyleb88a.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function helper(a, b)\n        return a:sum_of_digits() < b:sum_of_digits()\n\
    \    end\n    if not nums:is_empty() then\n        table.sort(nums, helper)\n\
    \    end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy8gkhi56.lua:14:\
    \ attempt to call a nil value (method 'is_empty')\nstack traceback:\n\t/tmp/tmpy8gkhi56.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpy8gkhi56.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sum_of_digits = function(num)\n    local sum = 0\n    for digit in num:gmatch('%d')\
    \ do\n      sum = sum + tonumber(digit)\n    end\n    return sum\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpak0kxmva.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local digits_sum = {}\n  local ordered_points = {}\n  local output = {}\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo3hzi9_o.lua:26: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function compare(a, b)\n        local sum_a = a % 10 + math.floor(a\
    \ / 10)\n        local sum_b = b % 10 + math.floor(b / 10)\n        if sum_a <\
    \ sum_b then\n            return true\n        elseif sum_a > sum_b then\n   \
    \         return false\n        else\n            return a < b\n        end\n\
    \    end\n    table.sort(nums, compare)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg932vdz8.lua:29:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -12, -11, -1}\nstack traceback:\n\
    \t/tmp/tmpg932vdz8.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    for i,v in ipairs(nums) do\n        local sum = 0\n\
    \        for j=1,#tostring(v) do\n            sum = sum + tonumber(tostring(v):sub(j,j))\n\
    \        end\n        table.insert(result, {idx=i, num=v, points=sum})\n    end\n\
    \    table.sort(result, function(a,b)\n        if a.points==b.points then\n  \
    \          return a.idx<b.idx\n        else\n            return a.points<b.points\n\
    \        end\n    end)\n    for i,v in ipairs(result) do\n        result[i] =\
    \ v.num\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxltxfnk9.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpxltxfnk9.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxltxfnk9.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum = function(t)\n        local s = 0\n        for i = 1, #t do\n\
    \            s = s + (t[i] < 0 and -t[i] or t[i])\n        end\n        return\
    \ s\n    end\n    local order = function(x, y)\n        return sum(x) < sum(y)\n\
    \    end\n    table.sort(nums, order)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhw255e5.lua:13:\
    \ attempt to get length of a number value (local 't')\nstack traceback:\n\t/tmp/tmpzhw255e5.lua:13:\
    \ in upvalue 'sum'\n\t/tmp/tmpzhw255e5.lua:19: in function </tmp/tmpzhw255e5.lua:18>\n\
    \t[C]: in function 'table.sort'\n\t/tmp/tmpzhw255e5.lua:21: in local 'candidate'\n\
    \t/tmp/tmpzhw255e5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local new = {}\n    local points = {}\n    for i, k in ipairs(nums) do\n\
    \        local sum = 0\n        while k > 0 do\n            sum = sum + k % 10\n\
    \            k = k // 10\n        end\n        new[i] = sum\n        points[sum]\
    \ = i\n    end\n    table.sort(new)\n    local result = {}\n    for i, sum in\
    \ ipairs(new) do\n        result[i] = nums[points[sum]]\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgbq_e9a.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -12, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpzgbq_e9a.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local key_value_pairs = {}\n  for i, v in ipairs(nums) do\n    local sum =\
    \ 0\n    for _, num in ipairs(str_split(v)) do\n      sum = sum + num\n    end\n\
    \    table.insert(key_value_pairs, {sum, i, v})\n  end\n  table.sort(key_value_pairs,\
    \ function(a, b)\n    if a[1] == b[1] then\n      return a[2] < b[2]\n    else\n\
    \      return a[1] < b[1]\n    end\n  end)\n  local result = {}\n  for _, item\
    \ in ipairs(key_value_pairs) do\n    table.insert(result, item[3])\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_loyizn8.lua:14:\
    \ attempt to call a nil value (global 'str_split')\nstack traceback:\n\t/tmp/tmp_loyizn8.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_loyizn8.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    local sums = {}\n    for i, v in ipairs(nums) do\n\
    \        table.insert(sums, {i = i, v = v, sum = sum_of_digits(v)})\n    end\n\
    \    table.sort(sums, function(a, b)\n        if a.sum == b.sum then\n       \
    \     return a.i < b.i\n        else\n            return a.sum < b.sum\n     \
    \   end\n    end)\n    for _, v in ipairs(sums) do\n        table.insert(result,\
    \ v.v)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsr2f2mzg.lua:14:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpsr2f2mzg.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsr2f2mzg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function comp(a, b)\n        if a == b then\n            return false\n\
    \        end\n        local suma = sum_of_digits(a)\n        local sumb = sum_of_digits(b)\n\
    \        if suma == sumb then\n            return index(nums, a) < index(nums,\
    \ b)\n        end\n        return suma < sumb\n    end\n    return sort(nums,\
    \ comp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptzxxtz5j.lua:22:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmptzxxtz5j.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmptzxxtz5j.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal tab = {}\n\tfor k,v in pairs(nums) do\n\t\tlocal sum = 0\n\t\tfor i =\
    \ 1, #tostring(v) do\n\t\t\tsum = sum + tonumber(tostring(v):sub(i,i))\n\t\tend\n\
    \t\ttab[k] = {v, sum}\n\tend\n\t\n\tfor i = 1, #tab do\n\t\tfor j = 1, #tab-1\
    \ do\n\t\t\tif tab[j][2] > tab[j+1][2] then\n\t\t\t\ttab[j], tab[j+1] = tab[j+1],\
    \ tab[j]\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal new_tab = {}\n\tfor k,v in pairs(tab)\
    \ do\n\t\tnew_tab[k] = v[1]\n\tend\n\t\n\treturn new_tab\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyitrfzny.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpyitrfzny.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpyitrfzny.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local digit = {}\n  local final = {}\n  local sum = 0\n  local pos = 0\n  local\
    \ index = 0\n  for i = 1, #nums do\n    digit[i] = 0\n    sum = 0\n    for j =\
    \ 1, tostring(nums[i]):len() do\n      sum = sum + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n    end\n    digit[i] = sum\n  end\n  for i = 1, #nums do\n    pos = 0\n\
    \    index = 0\n    for j = 1, #nums do\n      if digit[j] < digit[i] then\n \
    \       pos = pos + 1\n      end\n      if nums[j] == nums[i] then\n        index\
    \ = j\n      end\n    end\n    final[index] = pos\n  end\n  return final\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6o48t9ec.lua:20:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp6o48t9ec.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp6o48t9ec.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local points_of = function(x)\n        local p = 0\n        while x ~= 0\
    \ do\n            p = p + x % 10\n            x = math.floor(x / 10)\n       \
    \ end\n        return p\n    end\n    local t = {}\n    for i,n in ipairs(nums)\
    \ do\n        t[i] = {n, points_of(n)}\n    end\n    table.sort(t, function(a,b)\n\
    \        if a[2] == b[2] then\n            return a[1] < b[1]\n        else\n\
    \            return a[2] < b[2]\n        end\n    end)\n    for i,v in ipairs(t)\
    \ do\n        t[i] = v[1]\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return {}\n    end\n    local result = {}\n \
    \   for i = 1, #nums do\n        local sum = 0\n        for digit in tostring(nums[i]):gmatch(\"\
    %d\") do\n            sum = sum + tonumber(digit)\n        end\n        table.insert(result,\
    \ {nums[i], sum, i})\n    end\n    table.sort(result, function(a, b)\n       \
    \ if a[2] == b[2] then\n            return a[3] < b[3]\n        else\n       \
    \     return a[2] < b[2]\n        end\n    end)\n    local new_result = {}\n \
    \   for i = 1, #result do\n        table.insert(new_result, result[i][1])\n  \
    \  end\n    return new_result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6i_no9u.lua:39:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpv6i_no9u.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- TODO: implement this\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfy3yw_b.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpsfy3yw_b.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function compare(a, b)\n        local a_digits = digits(a)\n      \
    \  local b_digits = digits(b)\n        local a_sum = 0\n        local b_sum =\
    \ 0\n        for i, v in ipairs(a_digits) do\n            a_sum = a_sum + v\n\
    \        end\n        for i, v in ipairs(b_digits) do\n            b_sum = b_sum\
    \ + v\n        end\n        if a_sum == b_sum then\n            return (a < b)\n\
    \        else\n            return (a_sum < b_sum)\n        end\n    end\n    table.sort(nums,\
    \ compare)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv9vzxoui.lua:12:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpv9vzxoui.lua:12:\
    \ in function </tmp/tmpv9vzxoui.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpv9vzxoui.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmpv9vzxoui.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function order_by_points_cmp(a, b)\n        local function get_points(n)\n\
    \            local sum = 0\n            while n > 0 do\n                sum =\
    \ sum + n % 10\n                n = math.floor(n / 10)\n            end\n    \
    \        return sum\n        end\n        local sum_a = get_points(a)\n      \
    \  local sum_b = get_points(b)\n        if sum_a == sum_b then\n            return\
    \ a < b\n        else\n            return sum_a < sum_b\n        end\n    end\n\
    \    table.sort(nums, order_by_points_cmp)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab6yt_4o.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpab6yt_4o.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- Fill in your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmtavmh9w.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpmtavmh9w.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    local sum = 0\n    local curr_index = 1\n    local\
    \ table_len = #nums\n    local max_index = 1\n    local max_points = 0\n    local\
    \ max_points_index = 1\n    while table_len > 0 do\n        max_points = 0\n \
    \       for i = curr_index, #nums do\n            sum = 0\n            for j =\
    \ 1, #tostring(nums[i]) do\n                sum = sum + tonumber(tostring(nums[i]):sub(j,\
    \ j))\n            end\n            if max_points < sum then\n               \
    \ max_points = sum\n                max_points_index = i\n            end\n  \
    \      end\n        result[max_index] = nums[max_points_index]\n        max_index\
    \ = max_index + 1\n        table.remove(nums, max_points_index)\n        table_len\
    \ = table_len - 1\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpccukka_l.lua:23:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpccukka_l.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpccukka_l.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(left, right)\n        local l_sum = sum_of_digits(left)\n\
    \        local r_sum = sum_of_digits(right)\n        if l_sum == r_sum then\n\
    \            return left < right\n        end\n        return l_sum < r_sum\n\
    \    end)\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprlwvpvlb.lua:12:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmprlwvpvlb.lua:12:\
    \ in function </tmp/tmprlwvpvlb.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmprlwvpvlb.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprlwvpvlb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo6zwpb4p.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpo6zwpb4p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local indexed_table = {}\n    for k, v in pairs(nums) do\n        indexed_table[k]\
    \ = {v, sum_of_digits(v)}\n    end\n    table.sort(indexed_table, function(a,\
    \ b)\n        if a[2] == b[2] then\n            return a[1] < b[1]\n        else\n\
    \            return a[2] < b[2]\n        end\n    end)\n    local res = {}\n \
    \   for _, val in ipairs(indexed_table) do\n        table.insert(res, val[1])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5axzhus.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpk5axzhus.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpk5axzhus.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qos5xjd.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp_qos5xjd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sum_of_digits = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = {}\n    while num > 0 do\n      table.insert(digits, num %\
    \ 10)\n      num = math.floor(num / 10)\n    end\n    local sum = 0\n    for j\
    \ = 1, #digits do\n      sum = sum + digits[j]\n    end\n    sum_of_digits[i]\
    \ = sum\n  end\n  table.sort(sum_of_digits)\n  local output = {}\n  for i = 1,\
    \ #sum_of_digits do\n    for j = 1, #nums do\n      local digits = {}\n      local\
    \ num = nums[j]\n      while num > 0 do\n        table.insert(digits, num % 10)\n\
    \        num = math.floor(num / 10)\n      end\n      local sum = 0\n      for\
    \ k = 1, #digits do\n        sum = sum + digits[k]\n      end\n      if sum ==\
    \ sum_of_digits[i] then\n        table.insert(output, nums[j])\n        table.remove(nums,\
    \ j)\n        break\n      end\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedp4kvyl.lua:52:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpedp4kvyl.lua:52: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmflo8zi8.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpmflo8zi8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum(n)\n        local total = 0\n        while n > 0 do\n\
    \            total = total + n % 10\n            n = math.floor(n / 10)\n    \
    \    end\n        return total\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmple8clk4g.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp0i6cyf.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplp0i6cyf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum_of_digits(n)\n        local acc = 0\n        for digit\
    \ in tostring(n):gmatch('.') do\n            acc = acc + tonumber(digit)\n   \
    \     end\n        return acc\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmo5g_jsl.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sorted = {}\n  local sums = {}\n  local result = {}\n  local count =\
    \ 1\n  local function sum_of_digits(num)\n    local sum = 0\n    while num > 0\
    \ do\n      sum = sum + num % 10\n      num = num // 10\n    end\n    return sum\n\
    \  end\n  for _, v in ipairs(nums) do\n    sums[count] = sum_of_digits(v)\n  \
    \  sorted[count] = v\n    count = count + 1\n  end\n  table.sort(sums)\n  for\
    \ _, v in ipairs(sums) do\n    for k, n in ipairs(sorted) do\n      if v == sum_of_digits(n)\
    \ then\n        table.insert(result, n)\n        table.remove(sorted, k)\n   \
    \     break\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpup803d6b.lua:44:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpup803d6b.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sorted_list = table.sort(nums, function(a, b)\n        return a + b\n\
    \    end)\n    return sorted_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpindy0gjr.lua:11:\
    \ invalid order function for sorting\nstack traceback:\n\t/tmp/tmpindy0gjr.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpindy0gjr.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function digit_sum(i)\n    local sum = 0\n    for _, c in string.gmatch(i,\
    \ \"(%d)\") do\n      sum = sum + tonumber(c)\n    end\n    return sum\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmwaj37_d.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local nums_copy = table.copy(nums)\n    table.sort(nums_copy, function(num1,\
    \ num2)\n        return get_num_score(num1) < get_num_score(num2)\n    end)\n\
    \    return nums_copy\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt0j_qor2.lua:11:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpt0j_qor2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpt0j_qor2.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwywysayr.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpwywysayr.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal res={}\n\tfor i,n in ipairs(nums) do\n\t\tres[i]={sum_digits(n),n}\n\t\
    end\n\ttable.sort(res,function(a,b) return a[1]<b[1] end)\n\tfor i,v in ipairs(res)\
    \ do\n\t\tres[i]=v[2]\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizs1xecb.lua:13:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpizs1xecb.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpizs1xecb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local res = {}\n    local sum_digits = function(n)\n        local res = 0\n\
    \        while n > 0 do\n            res = res + n % 10\n            n = math.floor(n\
    \ / 10)\n        end\n        return res\n    end\n    table.sort(nums, function(a,\
    \ b)\n        local sum_a = sum_digits(a)\n        local sum_b = sum_digits(b)\n\
    \        if sum_a == sum_b then\n            return a < b\n        else\n    \
    \        return sum_a < sum_b\n        end\n    end)\n    return nums\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7co8zci.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp_7co8zci.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local res = {}\n    local num_sum = {}\n    for i = 1, #nums do\n       \
    \ local sum = 0\n        for _, d in pairs(to_digits(nums[i])) do\n          \
    \  sum = sum + d\n        end\n        table.insert(num_sum, {i, sum})\n    end\n\
    \    table.sort(num_sum, function(a, b)\n        if a[2] == b[2] then\n      \
    \      return a[1] < b[1]\n        else\n            return a[2] < b[2]\n    \
    \    end\n    end)\n    for _, pair in pairs(num_sum) do\n        table.insert(res,\
    \ nums[pair[1]])\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ztdlwhj.lua:15:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmp9ztdlwhj.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9ztdlwhj.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local num_points = {}\n    for i, v in ipairs(nums) do\n        local p =\
    \ sum_of_digits(v)\n        if num_points[p] == nil then\n            num_points[p]\
    \ = {}\n        end\n        table.insert(num_points[p], i)\n    end\n    local\
    \ sorted_nums = {}\n    for p, v in pairs(num_points) do\n        for _, i in\
    \ ipairs(v) do\n            table.insert(sorted_nums, nums[i])\n        end\n\
    \    end\n    return sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrbnq2b6.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpzrbnq2b6.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpzrbnq2b6.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function digit_sum(num)\n    local res = 0\n    for i in tostring(num):gmatch('.')\
    \ do\n      res = res + tonumber(i)\n    end\n    return res\n  end\n  local pair\
    \ = {}\n  for i = 1, #nums do\n    pair[i] = {index = i, point = digit_sum(nums[i])}\n\
    \  end\n  local function comp(a, b)\n    if a.point == b.point then\n      return\
    \ a.index < b.index\n    else\n      return a.point < b.point\n    end\n  end\n\
    \  table.sort(pair, comp)\n  local result = {}\n  for i = 1, #pair do\n    result[i]\
    \ = nums[pair[i].index]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdp9ynxz.lua:14:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpfdp9ynxz.lua:14:\
    \ in local 'digit_sum'\n\t/tmp/tmpfdp9ynxz.lua:20: in local 'candidate'\n\t/tmp/tmpfdp9ynxz.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxrhp2uc.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpkxrhp2uc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local index_to_points = {}\n  for i, num in ipairs(nums) do\n    local points\
    \ = 0\n    for digit in tostring(num):gmatch(\"[0-9]\") do\n      points = points\
    \ + tonumber(digit)\n    end\n    index_to_points[i] = points\n  end\n  table.sort(index_to_points)\n\
    \  local result = {}\n  for i, index in ipairs(index_to_points) do\n    result[i]\
    \ = nums[index]\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwy95b4k.lua:30:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 1, 11, 11, -1}\nstack traceback:\n\
    \t/tmp/tmptwy95b4k.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \t-- get a list of the number and the sum of their digits and index\n\tlocal list\
    \ = {}\n\tfor i, v in ipairs(nums) do\n\t\tlocal temp = v\n\t\tlocal sum = 0\n\
    \t\twhile temp ~= 0 do\n\t\t\tsum = sum + temp % 10\n\t\t\ttemp = temp // 10\n\
    \t\tend\n\t\ttable.insert(list, {v, sum, i})\n\tend\n\t-- sort the list by their\
    \ digit sum\n\ttable.sort(list, function(a, b) return a[2] < b[2] end)\n\t-- extract\
    \ the original number\n\tlocal result = {}\n\tfor _, v in ipairs(list) do\n\t\t\
    table.insert(result, v[1])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  if #nums == 0 then\n    return {}\n  end\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpm8bx5k.lua:20:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpwpm8bx5k.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal points = {}\n\tfor i, num in ipairs(nums) do\n\t\tlocal point = 0\n\t\t\
    while num ~= 0 do\n\t\t\tpoint = point + num % 10\n\t\t\tnum = math.floor(num\
    \ / 10)\n\t\tend\n\t\ttable.insert(points, {point, i})\n\tend\n\ttable.sort(points,\
    \ function(a, b)\n\t\tif a[1] == b[1] then\n\t\t\treturn a[2] < b[2]\n\t\telse\n\
    \t\t\treturn a[1] < b[1]\n\t\tend\n\tend)\n\tlocal result = {}\n\tfor _, item\
    \ in ipairs(points) do\n\t\ttable.insert(result, nums[item[2]])\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sort(a, b)\n        if sum_of_digits(a) == sum_of_digits(b)\
    \ then\n            return a < b\n        else\n            return sum_of_digits(a)\
    \ < sum_of_digits(b)\n        end\n    end\n    return sort_by(nums, sort)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6ka6wtp.lua:18:\
    \ attempt to call a nil value (global 'sort_by')\nstack traceback:\n\t/tmp/tmpk6ka6wtp.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpk6ka6wtp.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    if #nums < 2 then\n        return nums\n    end\n    local mid = #nums/2\n\
    \    local l = {}\n    local r = {}\n    for i = 1, mid do\n        l[i] = nums[i]\n\
    \    end\n    for i = mid+1, #nums do\n        r[i-mid] = nums[i]\n    end\n \
    \   l = order_by_points(l)\n    r = order_by_points(r)\n    return merge(l, r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgqvjz89.lua:25:\
    \ attempt to call a nil value (global 'merge')\nstack traceback:\n\t/tmp/tmpjgqvjz89.lua:25:\
    \ in upvalue 'order_by_points'\n\t/tmp/tmpjgqvjz89.lua:23: in local 'candidate'\n\
    \t/tmp/tmpjgqvjz89.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i,v in ipairs(nums) do\n    local sum = 0\n    for n\
    \ in tostring(v):gmatch(\"%d\") do\n      sum = sum + tonumber(n)\n    end\n \
    \   table.insert(sums, {i, sum})\n  end\n  table.sort(sums, function(a,b) return\
    \ a[2] < b[2] end)\n  local sorted = {}\n  for _,v in ipairs(sums) do\n    table.insert(sorted,\
    \ nums[v[1]])\n  end\n  return sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicqkd_c9.lua:30:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmpicqkd_c9.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function compare(t1, t2)\n        local sum1 = sum_digits(t1)\n   \
    \     local sum2 = sum_digits(t2)\n        if sum1 < sum2 then\n            return\
    \ true\n        elseif sum1 > sum2 then\n            return false\n        else\n\
    \            return t1 < t2\n        end\n    end\n    table.sort(nums, compare)\n\
    \    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcpnpgvwk.lua:12:\
    \ attempt to call a nil value (global 'sum_digits')\nstack traceback:\n\t/tmp/tmpcpnpgvwk.lua:12:\
    \ in function </tmp/tmpcpnpgvwk.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpcpnpgvwk.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpcpnpgvwk.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function digit_sum(num)\n        local s = 0\n        num = math.abs(num)\n\
    \        while num > 0 do\n            s = s + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        return s\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc06wdakf.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function order_by_points_helper(nums, sum)\n        local min = 0\n\
    \        local minIndex = 0\n        for i, item in ipairs(nums) do\n        \
    \    if i == 1 then\n                min = sum(item)\n                minIndex\
    \ = i\n            else\n                if sum(item) < min then\n           \
    \         min = sum(item)\n                    minIndex = i\n                end\n\
    \            end\n        end\n        return table.remove(nums, minIndex)\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgymp4kab.lua:39: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    if type(nums) ~= \"table\" then\n        return nil\n    end\n    if #nums\
    \ == 0 then\n        return {}\n    end\n    local sum_digits = {}\n    for i\
    \ = 1, #nums do\n        if nums[i] < 0 then\n            sum_digits[#sum_digits\
    \ + 1] = -get_sum_of_digits(nums[i])\n        else\n            sum_digits[#sum_digits\
    \ + 1] = get_sum_of_digits(nums[i])\n        end\n    end\n    local used = {}\n\
    \    local result = {}\n    for i = 1, #sum_digits do\n        local min_sum_digit\
    \ = math.huge\n        local index = 1\n        for j = 1, #sum_digits do\n  \
    \          if not used[j] and sum_digits[j] < min_sum_digit then\n           \
    \     min_sum_digit = sum_digits[j]\n                index = j\n            end\n\
    \        end\n        result[#result + 1] = nums[index]\n        used[index] =\
    \ true\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaenc9d2x.lua:22:\
    \ attempt to call a nil value (global 'get_sum_of_digits')\nstack traceback:\n\
    \t/tmp/tmpaenc9d2x.lua:22: in local 'candidate'\n\t/tmp/tmpaenc9d2x.lua:45: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function compare(a, b)\n    local a_sum = 0\n    local b_sum = 0\n  \
    \  while a > 0 do\n      a_sum = a_sum + a % 10\n      a = math.floor(a / 10)\n\
    \    end\n    while b > 0 do\n      b_sum = b_sum + b % 10\n      b = math.floor(b\
    \ / 10)\n    end\n    if a_sum == b_sum then\n      return a < b\n    else\n \
    \     return a_sum < b_sum\n    end\n  end\n  table.sort(nums, compare)\n  return\
    \ nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppifss_m9.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmppifss_m9.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwrhxvj5.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpzwrhxvj5.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, num in ipairs(nums) do\n        local sum = 0\n\
    \        for d in (tostring(num)):gmatch(\"%d\") do\n            sum = sum + tonumber(d)\n\
    \        end\n        sums[i] = sum\n    end\n    table.sort(sums)\n    local\
    \ order = {}\n    for _, sum in ipairs(sums) do\n        for i, num in ipairs(nums)\
    \ do\n            local s = 0\n            for d in (tostring(num)):gmatch(\"\
    %d\") do\n                s = s + tonumber(d)\n            end\n            if\
    \ s == sum then\n                order[#order + 1] = num\n                nums[i]\
    \ = nil\n                break\n            end\n        end\n    end\n    return\
    \ order\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dnrt5gb.lua:40:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1}\nstack traceback:\n\t/tmp/tmp8dnrt5gb.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local res = {}\n  local sum = {}\n  for i, v in ipairs(nums) do\n    local\
    \ key = 0\n    while (v ~= 0) do\n      key = key + v % 10\n      v = math.floor(v\
    \ / 10)\n    end\n    res[i] = nums[i]\n    sum[i] = key\n  end\n  local function\
    \ quickSort(arr, res, low, high)\n    if low < high then\n      local pivot =\
    \ partition(arr, res, low, high)\n      quickSort(arr, res, low, pivot - 1)\n\
    \      quickSort(arr, res, pivot + 1, high)\n    end\n  end\n  local function\
    \ partition(arr, res, low, high)\n    local pivot = arr[high]\n    local i = low\
    \ - 1\n    for j = low, high - 1 do\n      if arr[j] <= pivot then\n        i\
    \ = i + 1\n        arr[i], arr[j] = arr[j], arr[i]\n        res[i], res[j] = res[j],\
    \ res[i]\n      end\n    end\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n\
    \    res[i + 1], res[high] = res[high], res[i + 1]\n    return i + 1\n  end\n\
    \  quickSort(sum, res, 1, #sum)\n  return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmflo8zi8.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpmflo8zi8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \t-- your implementation here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjoznbya.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpyjoznbya.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum_digits(num)\n        local total = 0\n        for digit\
    \ in string.gmatch(math.abs(num), '%d') do\n            total = total + tonumber(digit)\n\
    \        end\n        return total\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyh182sf5.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxrhp2uc.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpkxrhp2uc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp0i6cyf.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplp0i6cyf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sum_of_digits = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local sum = 0\n    while num ~= 0 do\n      sum = sum + num % 10\n      num\
    \ = math.floor(num / 10)\n    end\n    sum_of_digits[i] = sum\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo61nn4s2.lua:33: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- Implement your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1d8o9fba.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp1d8o9fba.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal t = {}\n\tfor i, v in ipairs(nums) do\n\t\tlocal sum = 0\n\t\tlocal j\
    \ = v\n\t\twhile j > 0 do\n\t\t\tsum = sum + j % 10\n\t\t\tj = math.floor(j /\
    \ 10)\n\t\tend\n\t\tt[sum] = t[sum] or {}\n\t\ttable.insert(t[sum], v)\n\tend\n\
    \tlocal ret = {}\n\tfor i = 0, 100 do\n\t\tif t[i] then\n\t\t\tfor j, v in ipairs(t[i])\
    \ do\n\t\t\t\ttable.insert(ret, v)\n\t\t\tend\n\t\tend\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjwqyf0s.lua:36:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpsjwqyf0s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sort_table = {}\n    local result = {}\n    for i, v in ipairs(nums)\
    \ do\n        local sum = 0\n        local num = v\n        while num > 0 do\n\
    \            sum = sum + (num % 10)\n            num = math.floor(num / 10)\n\
    \        end\n        local item = {\n            index = i,\n            sum\
    \ = sum,\n            number = v\n        }\n        table.insert(sort_table,\
    \ item)\n    end\n    table.sort(sort_table, function(a, b)\n        if a.sum\
    \ == b.sum then\n            return a.index < b.index\n        else\n        \
    \    return a.sum < b.sum\n        end\n    end)\n    for _, v in ipairs(sort_table)\
    \ do\n        table.insert(result, v.number)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8849ycz.lua:43:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpc8849ycz.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- your code here\n    local array={}\n    for _,v in ipairs(nums) do\n \
    \       local key=0\n        for i in string.gmatch(tostring(v), \"%d\") do\n\
    \            key=key+tonumber(i)\n        end\n        array[key]=v\n    end\n\
    \    return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1om6dyyx.lua:26:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12}\nstack traceback:\n\t\
    /tmp/tmp1om6dyyx.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function sum_of_digits(x)\n    local s = 0\n    while x > 0 do\n    \
    \  s = s + (x % 10)\n      x = math.floor(x / 10)\n    end\n    return s\n  end\n\
    \  local function sum_of_digits_index(a, b)\n    local sa = sum_of_digits(a)\n\
    \    local sb = sum_of_digits(b)\n    if sa < sb then\n      return true\n   \
    \ elseif sa > sb then\n      return false\n    else\n      return a < b\n    end\n\
    \  end\n  table.sort(nums, sum_of_digits_index)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x413u49.lua:37:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp_x413u49.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sort_table = {}\n    for i, num in ipairs(nums) do\n        -- We build\
    \ a table like:\n        -- {key = i, value = sum_of_digits(num)}\n        sort_table[i]\
    \ = {\n            key = i,\n            value = sum_of_digits(num)\n        }\n\
    \    end\n    table.sort(sort_table, function(a, b)\n        return a.value <\
    \ b.value\n    end)\n    local result = {}\n    for _, entry in ipairs(sort_table)\
    \ do\n        result[#result + 1] = nums[entry.key]\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyk3kidp8.lua:17:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpyk3kidp8.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpyk3kidp8.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local arr = {}\n    for i, v in ipairs(nums) do\n        local s = string.format(\"\
    %d\", v)\n        local sum = 0\n        for i = 1, #s do\n            sum = sum\
    \ + tonumber(s:sub(i, i))\n        end\n        arr[#arr + 1] = {v, sum, i}\n\
    \    end\n    table.sort(arr, function(a, b)\n        if a[2] == b[2] then\n \
    \           return a[3] < b[3]\n        else\n            return a[2] < b[2]\n\
    \        end\n    end)\n    local result = {}\n    for i, v in ipairs(arr) do\n\
    \        result[i] = v[1]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpia1ued3k.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpia1ued3k.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpia1ued3k.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- Your solution goes here\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplvxfwbmr.lua:24: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local temp = {}\n  local length = #nums\n  for i = 1, length do\n    temp[i]\
    \ = {i, nums[i]}\n  end\n  table.sort(temp, function(a, b)\n    local a_sum =\
    \ 0\n    local b_sum = 0\n    for j = 1, #tostring(a[2]) do\n      a_sum = a_sum\
    \ + tonumber(string.sub(tostring(a[2]), j, j))\n    end\n    for j = 1, #tostring(b[2])\
    \ do\n      b_sum = b_sum + tonumber(string.sub(tostring(b[2]), j, j))\n    end\n\
    \    if a_sum == b_sum then\n      return a[1] < b[1]\n    else\n      return\
    \ a_sum < b_sum\n    end\n  end)\n  local result = {}\n  for i = 1, length do\n\
    \    result[i] = temp[i][2]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpax0fygfd.lua:20:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpax0fygfd.lua:20:\
    \ in function </tmp/tmpax0fygfd.lua:16>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpax0fygfd.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpax0fygfd.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    if #nums == 0 then\n        return {}\n    end\n    return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk47w66p7.lua:20:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpk47w66p7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- ... your code here ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwi6lz00.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmprwi6lz00.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sorted_nums = {}\n    for _, value in ipairs(nums) do\n        local\
    \ sum = sum_of_digits(value)\n        local found = false\n        for i, v in\
    \ ipairs(sorted_nums) do\n            if sum_of_digits(v) > sum then\n       \
    \         table.insert(sorted_nums, i, value)\n                found = true\n\
    \                break\n            end\n        end\n        if not found then\n\
    \            table.insert(sorted_nums, value)\n        end\n    end\n    return\
    \ sorted_nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3xk8owe.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpq3xk8owe.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq3xk8owe.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum(num)\n        if num < 0 then\n            num = -num\n\
    \        end\n        local sum = 0\n        while num > 0 do\n            sum\
    \ = sum + num % 10\n            num = math.floor(num / 10)\n        end\n    \
    \    return sum\n    end\n    local function compare(a, b)\n        local a_sum\
    \ = sum(a)\n        local b_sum = sum(b)\n        if a_sum ~= b_sum then\n   \
    \         return a_sum < b_sum\n        else\n            return a < b\n     \
    \   end\n    end\n    table.sort(nums, compare)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn547jti.lua:38:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, 1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmpxn547jti.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- TODO: implement this function.\n    -- Find sum of digits for each number\n\
    \    for i = 1, #nums do\n        local num = nums[i]\n        nums[i] = {index\
    \ = i, sum = sum_of_digits(num), num = num}\n    end\n    -- Sort table by \"\
    sum\" field\n    table.sort(nums, function(a, b)\n        return a.sum < b.sum\n\
    \    end)\n    -- Replace \"sum\" field with \"num\" field\n    for i = 1, #nums\
    \ do\n        nums[i] = nums[i].num\n    end\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4h3wmju.lua:15:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpm4h3wmju.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpm4h3wmju.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  return table.sort(nums, function(a, b)\n    return get_points(a) < get_points(b)\n\
    \  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgpxpf60_.lua:12:\
    \ attempt to call a nil value (global 'get_points')\nstack traceback:\n\t/tmp/tmpgpxpf60_.lua:12:\
    \ in function </tmp/tmpgpxpf60_.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpgpxpf60_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpgpxpf60_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local digits_sum = {}\n  local ordered_nums = {}\n  for i = 1, #nums do\n \
    \   local result = 0\n    local string_num = tostring(nums[i])\n    for j = 1,\
    \ #string_num do\n      local char = string_num:sub(j, j)\n      result = result\
    \ + tonumber(char)\n    end\n    digits_sum[i] = result\n  end\n  local order\
    \ = {}\n  for i = 1, #digits_sum do\n    local value = digits_sum[i]\n    if (order[value]\
    \ == nil) then\n      order[value] = {}\n    end\n    table.insert(order[value],\
    \ i)\n  end\n  for i = 0, #nums do\n    if (order[i] ~= nil) then\n      for j\
    \ = 1, #order[i] do\n        table.insert(ordered_nums, nums[order[i][j]])\n \
    \     end\n    end\n  end\n  return ordered_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphyk8fe87.lua:18:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmphyk8fe87.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmphyk8fe87.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \treturn {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojx11qzl.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpojx11qzl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyuupgck.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpxyuupgck.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum_of_digits = {}\n    for i, num in ipairs(nums) do\n        local\
    \ sum = 0\n        for digit in tostring(num):gmatch(\"%d\") do\n            sum\
    \ = sum + tonumber(digit)\n        end\n        sum_of_digits[i] = sum\n    end\n\
    \    table.sort(nums, function(n1, n2)\n            return sum_of_digits[n1] <\
    \ sum_of_digits[n2]\n    end)\n    return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg373izkj.lua:20:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpg373izkj.lua:20:\
    \ in function </tmp/tmpg373izkj.lua:19>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpg373izkj.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpg373izkj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- You can use extra table (i.e. dict)\n  -- Do not mutate original table\n\
    \  -- Return the new table\n  -- The order of items in new table should be the\
    \ same as in old one\n  -- HINT:\n  -- Lua docs for table.sort()\n  -- https://www.lua.org/manual/5.3/manual.html#pdf-table.sort\n\
    \  --\n  -- You may use pairs() over table to get index, value pair\n  -- The\
    \ first element of the pair returned by pairs() is\n  -- the index of the element\
    \ in the table.\n  -- For example:\n  -- > for key, value in pairs({2, 3, 4})\
    \ do\n  -- >    print(key, value)\n  -- > end\n  -- 1       2\n  -- 2       3\n\
    \  -- 3       4\n  -- nil\n  --\n  -- You may use unpack() to get several return\
    \ values.\n  -- For example:\n  -- > local first, second, third = unpack({1, 2,\
    \ 3})\n  -- > print(first, second, third)\n  -- 1       2       3\n  --\n  --\
    \ You may use a closure to pass custom function\n  -- to the table.sort()\n  --\n\
    \  -- For example:\n  -- > local function comparator(a, b)\n  -- >   return a\
    \ > b\n  -- > end\n  -- > table.sort({1, 4, 2, 3}, comparator)\n  -- {1, 2, 3,\
    \ 4}\n  local result = {}\n  for i, v in pairs(nums) do\n    table.insert(result,\
    \ {i, v})\n  end\n  local function comparator(a, b)\n    local sum_a = 0\n   \
    \ for i = 1, #tostring(a[2]) do\n      sum_a = sum_a + tonumber(tostring(a[2]):sub(i,\
    \ i))\n    end\n    local sum_b = 0\n    for i = 1, #tostring(b[2]) do\n     \
    \ sum_b = sum_b + tonumber(tostring(b[2]):sub(i, i))\n   \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp72iqwuaf.lua:71: ''end'' expected (to close ''for'' at line
    56) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- function that takes a number, and\n  -- returns its sum of digits\n  local\
    \ function get_points(num)\n    if num == 0 then\n      return 0\n    else\n \
    \     return num % 10 + get_points(math.floor(num / 10))\n    end\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq2oeg45p.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \ttable.sort(nums, function(a, b)\n\t\tif get_sum_of_digits(a) == get_sum_of_digits(b)\
    \ then\n\t\t\treturn a < b\n\t\telse\n\t\t\treturn get_sum_of_digits(a) < get_sum_of_digits(b)\n\
    \t\tend\n\tend)\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9kjd0dek.lua:12:\
    \ attempt to call a nil value (global 'get_sum_of_digits')\nstack traceback:\n\
    \t/tmp/tmp9kjd0dek.lua:12: in function </tmp/tmp9kjd0dek.lua:11>\n\t[C]: in function\
    \ 'table.sort'\n\t/tmp/tmp9kjd0dek.lua:11: in local 'candidate'\n\t/tmp/tmp9kjd0dek.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    for i, num in ipairs(nums) do\n        local sum =\
    \ 0\n        for j = 1, #tostring(num) do\n            sum = sum + tonumber(tostring(num):sub(j,\
    \ j))\n        end\n        result[i] = {num, sum}\n    end\n    table.sort(result,\
    \ function(a, b)\n        if a[2] == b[2] then\n            return a[1] < b[1]\n\
    \        else\n            return a[2] < b[2]\n        end\n    end)\n    for\
    \ i, num in ipairs(result) do\n        result[i] = num[1]\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6brofing.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp6brofing.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp6brofing.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i, v in ipairs(nums) do\n    sums[i] = v % 10 + math.floor(v\
    \ / 10)\n  end\n  table.sort(sums)\n  local result = {}\n  for i, v in ipairs(sums)\
    \ do\n    table.insert(result, table.remove(nums, v))\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw8f9_m9j.lua:18:\
    \ bad argument #1 to 'remove' (position out of bounds)\nstack traceback:\n\t/tmp/tmpw8f9_m9j.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpw8f9_m9j.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i, n in ipairs(nums) do\n    local digits = {}\n   \
    \ while n ~= 0 do\n      digits[#digits + 1] = n % 10\n      n = math.floor(n\
    \ / 10)\n    end\n    sums[i] = {sum = sum(digits), index = i}\n  end\n  table.sort(sums,\
    \ function(x, y)\n    if x.sum == y.sum then\n      return x.index < y.index\n\
    \    else\n      return x.sum < y.sum\n    end\n  end)\n  local result = {}\n\
    \  for i, v in ipairs(sums) do\n    result[i] = nums[v.index]\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojfhxku0.lua:18:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpojfhxku0.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpojfhxku0.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local buckets = {}\n  for k, v in ipairs(nums) do\n    local digits_sum = sum_of_digits(v)\n\
    \    if buckets[digits_sum] == nil then\n      buckets[digits_sum] = {}\n    end\n\
    \    table.insert(buckets[digits_sum], v)\n  end\n  local result = {}\n  for i\
    \ = 1, math.huge do\n    if buckets[i] == nil then\n      break\n    end\n   \
    \ for _, v in ipairs(buckets[i]) do\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mz38cpo.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp7mz38cpo.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp7mz38cpo.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum(n)\n        local result = 0\n        while n > 0 do\n\
    \            result = result + n % 10\n            n = math.floor(n / 10)\n  \
    \      end\n        return result\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcfwzze4k.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local t = {}\n  for i, v in ipairs(nums) do\n    local s = tostring(v)\n  \
    \  local sum = 0\n    for i = 1, #s do\n      sum = sum + tonumber(s:sub(i, i))\n\
    \    end\n    t[#t + 1] = {sum, i, v}\n  end\n  table.sort(t, function(a, b)\n\
    \    if a[1] == b[1] then\n      return a[2] < b[2]\n    else\n      return a[1]\
    \ < b[1]\n    end\n  end)\n  local res = {}\n  for i = 1, #t do\n    res[i] =\
    \ t[i][3]\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzxaar3y.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpwzxaar3y.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpwzxaar3y.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i, num in ipairs(nums) do\n    sums[i] = {sum = 0, idx\
    \ = i}\n    while num ~= 0 do\n      sums[i].sum = sums[i].sum + (num % 10)\n\
    \      num = num // 10\n    end\n  end\n  table.sort(sums, function(lhs, rhs)\n\
    \    if lhs.sum == rhs.sum then\n      return lhs.idx < rhs.idx\n    else\n  \
    \    return lhs.sum < rhs.sum\n    end\n  end)\n  local results = {}\n  for i,\
    \ sum in ipairs(sums) do\n    results[i] = nums[sum.idx]\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfylh8ku.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpqfylh8ku.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum = 0\n    for k, v in pairs(nums) do\n        sum = sum + v\n  \
    \  end\n    return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0zcm6w7.lua:21:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpu0zcm6w7.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum = 0\n    local t = {}\n    for k, v in pairs(nums) do\n       \
    \ for i = 1, #tostring(v) do\n            sum = sum + tonumber(tostring(v):sub(i,\
    \ i))\n        end\n        t[#t + 1] = {sum, v, k}\n        sum = 0\n    end\n\
    \    local function sort_table(t1, t2)\n        if t1[1] ~= t2[1] then\n     \
    \       return t1[1] < t2[1]\n        else\n            return t1[3] < t2[3]\n\
    \        end\n    end\n    table.sort(t, sort_table)\n    for i = 1, #t do\n \
    \       t[i] = t[i][2]\n    end\n    return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplc4n5swn.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmplc4n5swn.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplc4n5swn.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal tab = {}\n\tfor i,v in ipairs(nums) do\n\t\tlocal sum = 0\n\t\tfor j in\
    \ tostring(v):gmatch(\"%d\") do\n\t\t\tsum = sum + tonumber(j)\n\t\tend\n\t\t\
    table.insert(tab, {i, sum, v})\n\tend\n\ttable.sort(tab, function(a, b)\n\t\t\
    return a[2] < b[2] or (a[2] == b[2] and a[1] < b[1])\n\tend)\n\tlocal res = {}\n\
    \tfor i,v in ipairs(tab) do\n\t\ttable.insert(res, v[3])\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sykz83w.lua:32:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmp8sykz83w.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local temp = {}\n    for k, v in pairs(nums) do\n        local count = 0\n\
    \        for dig in tostring(v):gmatch(\"%d\") do\n            count = count +\
    \ tonumber(dig)\n        end\n        temp[k] = count\n    end\n    return permute(nums,\
    \ temp)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_7ojan0.lua:19:\
    \ attempt to call a nil value (global 'permute')\nstack traceback:\n\t/tmp/tmpr_7ojan0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpr_7ojan0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local digits = {}\n    local result = {}\n    local map = {}\n    for i,\
    \ v in ipairs(nums) do\n        local digit = 0\n        for n in tostring(v):gmatch(\"\
    [-]?%d\") do\n            digit = digit + tonumber(n)\n        end\n        digits[i]\
    \ = digit\n        map[i] = v\n    end\n    table.sort(digits)\n    for _, v in\
    \ ipairs(digits) do\n        for i, _ in ipairs(nums) do\n            if v ==\
    \ digits[i] then\n                table.insert(result, map[i])\n             \
    \   break\n            end\n        end\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmobhf7z.lua:37:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -1, -12}\nstack traceback:\n\
    \t/tmp/tmpgmobhf7z.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- TODO: Implement.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08d0lj2v.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmp08d0lj2v.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp0i6cyf.lua:16:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmplp0i6cyf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    table.sort(nums, function(a, b)\n        local sa = sum_of_digits(a)\n  \
    \      local sb = sum_of_digits(b)\n        if sa == sb then\n            return\
    \ a < b\n        else\n            return sa < sb\n        end\n    end)\n   \
    \ return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4nb1ggr5.lua:12:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmp4nb1ggr5.lua:12:\
    \ in function </tmp/tmp4nb1ggr5.lua:11>\n\t[C]: in function 'table.sort'\n\t/tmp/tmp4nb1ggr5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4nb1ggr5.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local result = {}\n    for k, v in pairs(nums) do\n        table.insert(result,\
    \ {k = k, v = v})\n    end\n    table.sort(result, function(a, b)\n        local\
    \ sum_a = 0\n        local sum_b = 0\n        for c in tostring(a.v):gmatch('.')\
    \ do\n            sum_a = sum_a + tonumber(c)\n        end\n        for c in tostring(b.v):gmatch('.')\
    \ do\n            sum_b = sum_b + tonumber(c)\n        end\n        if sum_a ==\
    \ sum_b then\n            return a.k < b.k\n        else\n            return sum_a\
    \ < sum_b\n        end\n    end)\n    return {unpack(result, 1, #result)}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz9vxs190.lua:19:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpz9vxs190.lua:19:\
    \ in function </tmp/tmpz9vxs190.lua:15>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpz9vxs190.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpz9vxs190.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \t-- TODO: write this function\n\tlocal function compare(num1, num2)\n\t\tlocal\
    \ sum1 = 0\n\t\tlocal sum2 = 0\n\t\tfor i = 1, #tostring(num1) do\n\t\t\tsum1\
    \ = sum1 + tonumber(tostring(num1):sub(i, i))\n\t\tend\n\t\tfor i = 1, #tostring(num2)\
    \ do\n\t\t\tsum2 = sum2 + tonumber(tostring(num2):sub(i, i))\n\t\tend\n\t\tif\
    \ sum1 < sum2 then\n\t\t\treturn true\n\t\telseif sum1 > sum2 then\n\t\t\treturn\
    \ false\n\t\telse\n\t\t\treturn num1 < num2\n\t\tend\n\tend\n\ttable.sort(nums,\
    \ compare)\n\treturn nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcl5lt33e.lua:16:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpcl5lt33e.lua:16:\
    \ in function </tmp/tmpcl5lt33e.lua:12>\n\t[C]: in function 'table.sort'\n\t/tmp/tmpcl5lt33e.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpcl5lt33e.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxrhp2uc.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpkxrhp2uc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function compare(a, b)\n        local suma = a\n        local sumb\
    \ = b\n        while a > 0 do\n            suma = suma + a % 10\n            a\
    \ = math.floor(a / 10)\n        end\n        while b > 0 do\n            sumb\
    \ = sumb + b % 10\n            b = math.floor(b / 10)\n        end\n        return\
    \ suma < sumb\n    end\n    table.sort(nums, compare)\n    return nums\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv0t8z7e_.lua:31:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpv0t8z7e_.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum = {}\n    for i, v in ipairs(nums) do\n        sum[i] = v < 0 and\
    \ -v or v\n        while sum[i] > 0 do\n            sum[i] = sum[i] + sum[i] %\
    \ 10\n            sum[i] = sum[i] / 10\n        end\n    end\n    table.sort(sum)\n\
    \    local res = {}\n    for _, v in ipairs(sum) do\n        for i, x in ipairs(nums)\
    \ do\n            if ((v < 0 and -x == v) or (v > 0 and x == v)) and res[i] ==\
    \ nil then\n                res[i] = x\n                break\n            end\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5alcf3f.lua:35:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpi5alcf3f.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local accum = {}\n  for i, n in ipairs(nums) do\n    local abs = math.abs(n)\n\
    \    local sum = 0\n    while abs > 0 do\n      sum = sum + (abs % 10)\n     \
    \ abs = math.floor(abs / 10)\n    end\n    accum[#accum + 1] = {i, sum, n}\n \
    \ end\n  table.sort(accum, function(x, y)\n    if x[2] == y[2] then\n      return\
    \ x[1] < y[1]\n    else\n      return x[2] < y[2]\n    end\n  end)\n  local r\
    \ = {}\n  for i, p in ipairs(accum) do\n    r[i] = p[3]\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbm4xdgh.lua:38:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, 11, -11, -12}\nstack traceback:\n\
    \t/tmp/tmplbm4xdgh.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sorted = {}\n  local tbl = {}\n  local sum_table = {}\n  for i, num in\
    \ ipairs(nums) do\n    local sum = 0\n    while num > 0 do\n      sum = sum +\
    \ num % 10\n      num = math.floor(num / 10)\n    end\n    table.insert(tbl, {num\
    \ = nums[i], sum = sum})\n    table.insert(sum_table, sum)\n  end\n  table.sort(sum_table)\n\
    \  for i, value in ipairs(sum_table) do\n    for j, elem in ipairs(tbl) do\n \
    \     if value == elem.sum then\n        table.insert(sorted, elem.num)\n    \
    \    table.remove(tbl, j)\n        break\n      end\n    end\n  end\n  return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5_f6jqk.lua:39:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-1, -11, -12, 1, 11}\nstack traceback:\n\
    \t/tmp/tmpl5_f6jqk.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal totalPoints = {}\n\tlocal finalTable = {}\n\tlocal tmpTable = {}\n\t\n\
    \tfor k, v in pairs(nums) do\n\t\tlocal points = 0\n\t\tfor num in tostring(v):gmatch('%d')\
    \ do\n\t\t\tpoints = points + tonumber(num)\n\t\tend\n\t\tif not totalPoints[points]\
    \ then\n\t\t\ttotalPoints[points] = {}\n\t\tend\n\t\ttotalPoints[points][#totalPoints[points]\
    \ + 1] = {i = k, v = v}\n\tend\n\t\n\tfor k, v in pairs(totalPoints) do\n\t\t\
    for k2, v2 in pairs(v) do\n\t\t\ttmpTable[#tmpTable + 1] = v2\n\t\tend\n\tend\n\
    \t\n\ttable.sort(tmpTable, function(a, b)\n\t\treturn a.i < b.i\n\tend)\n\t\n\t\
    for k, v in pairs(tmpTable) do\n\t\tfinalTable[#finalTable + 1] = v.v\n\tend\n\
    \t\n\treturn finalTable\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd15vtkpd.lua:46:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpd15vtkpd.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, v in ipairs(nums) do\n        sums[i] = 0\n \
    \       while v ~= 0 do\n            sums[i] = sums[i] + (v % 10)\n          \
    \  v = v // 10\n        end\n    end\n    table.sort(sums, function(a, b) return\
    \ a < b end)\n    local new_nums = {}\n    for _, sum in ipairs(sums) do\n   \
    \     for i, v in ipairs(nums) do\n            local tmp = 0\n            while\
    \ v ~= 0 do\n                tmp = tmp + (v % 10)\n                v = v // 10\n\
    \            end\n            if tmp == sum then\n                table.insert(new_nums,\
    \ nums[i])\n                table.remove(nums, i)\n                break\n   \
    \         end\n        end\n    end\n    return new_nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sum_points = {}\n  local result = {}\n  for i, v in ipairs(nums) do\n\
    \    local sum = 0\n    while v ~= 0 do\n      sum = sum + v % 10\n      v = math.floor(v\
    \ / 10)\n    end\n    if sum_points[sum] == nil then\n      sum_points[sum] =\
    \ {}\n    end\n    table.insert(sum_points[sum], i)\n  end\n  for i = 0, 9 * #tostring(math.max(table.unpack(nums)))\
    \ do\n    if sum_points[i] ~= nil then\n      for j, v in ipairs(sum_points[i])\
    \ do\n        table.insert(result, nums[v])\n      end\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sum = {}\n    local order = {}\n    local result = {}\n    local str\
    \ = \"\"\n    local k = 0\n    local x = 0\n    local j = 0\n    local max = 0\n\
    \    local c = 0\n    local f = 0\n    local t = 0\n    local x = 0\n    local\
    \ s = 0\n    local a = 0\n    local b = 0\n    local m = 0\n    for i = 1, #nums\
    \ do\n        sum[i] = 0\n        str = tostring(nums[i])\n        for s = 1,\
    \ #str do\n            sum[i] = sum[i] + string.byte(str, s) - 48\n        end\n\
    \    end\n    for k = 1, #nums do\n        max = 0\n        c = 0\n        x =\
    \ 0\n        for j = 1, #nums do\n            if sum[j] > max then\n         \
    \       c = 0\n                max = sum[j]\n                x = j\n         \
    \   elseif sum[j] == max then\n                c = c + 1\n            end\n  \
    \      end\n        if c == 0 then\n            order[k] = x\n            sum[x]\
    \ = -1\n        else\n            for t = 1, #nums do\n                if sum[t]\
    \ == max then\n                    order[k] = t\n                    sum[t] =\
    \ -1\n                    k = k + 1\n                end\n            end\n  \
    \          k = k - 1\n        end\n    end\n    for f = 1, #nums do\n        result[f]\
    \ = nums[order[f]]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuuy4rlx4.lua:70:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {11, 1, -12}\nstack traceback:\n\t\
    /tmp/tmpuuy4rlx4.lua:70: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local i = 1\n  local sum = {}\n  local sums = {}\n  while i <= #nums do\n \
    \   local j = 1\n    sum[i] = 0\n    while j <= #tostring(nums[i]) do\n      local\
    \ str_num = tostring(nums[i])\n      sum[i] = sum[i] + str_num:sub(j, j)\n   \
    \   j = j + 1\n    end\n    sums[i] = sum[i] * 1000 + i\n    i = i + 1\n  end\n\
    \  table.sort(sums)\n  local ordered = {}\n  i = 1\n  while i <= #sums do\n  \
    \  ordered[i] = nums[(sums[i] % 1000)]\n    i = i + 1\n  end\n  return ordered\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnhs50j6o.lua:19:\
    \ attempt to add a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpnhs50j6o.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpnhs50j6o.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sort_func = function(a, b)\n        return digit_sum(a) < digit_sum(b)\n\
    \    end\n    return sort(nums, sort_func)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbw4s18te.lua:14:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpbw4s18te.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpbw4s18te.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function sum_of_digits(n)\n        local sum = 0\n        for i = 1,\
    \ #tostring(n) do\n            sum = sum + tonumber(tostring(n):sub(i, i))\n \
    \       end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgn64cegm.lua:30: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  return bubbleSort(nums, (function(t, i, j)\n    return sumOfDigits(t[i]) >\
    \ sumOfDigits(t[j])\n  end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw9wz5zso.lua:11:\
    \ attempt to call a nil value (global 'bubbleSort')\nstack traceback:\n\t/tmp/tmpw9wz5zso.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpw9wz5zso.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxrhp2uc.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmpkxrhp2uc.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: -1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    --Write your code here\n    local function sort(t)\n        local sum\n \
    \       local nums = t\n        local sums = {}\n        local dup = {}\n    \
    \    local indices = {}\n        for i = 1, #nums do\n            sum = 0\n  \
    \          for _, v in ipairs(nums[i]) do\n                sum = sum + v\n   \
    \         end\n            sums[i] = sum\n            indices[i] = i\n       \
    \ end\n        local size = #sums\n        for i = 1, size do\n            for\
    \ j = 1, size - i do\n                if sums[j] > sums[j + 1] then\n        \
    \            sums[j], sums[j + 1] = sums[j + 1], sums[j]\n                   \
    \ indices[j], indices[j + 1] = indices[j + 1], indices[j]\n                end\n\
    \            end\n        end\n        for i = 1, size do\n            for j =\
    \ 1, size - i do\n                if sums[j] == sums[j + 1] then\n           \
    \         if indices[j] > indices[j + 1] then\n                        indices[j],\
    \ indices[j + 1] = indices[j + 1], indices[j]\n                    end\n     \
    \           end\n            end\n        end\n        for i = 1, size do\n  \
    \          dup[i] = nums[indices[i]]\n        end\n        return dup\n    end\n\
    \    local results = {}\n    for _, v in ipairs(nums) do\n        local nums =\
    \ {v}\n        while v ~= 0 do\n            v = math.floor(v / 10)\n         \
    \   nums[#nums + 1] = v\n        end\n        table.remove(nums, #nums)\n    \
    \    table.remove(nums, 1)\n        results[#results + 1] = nums\n    end\n  \
    \  local sum\n    local nums = sort(results)\n    for i = 1, #nums do\n      \
    \  sum = 0\n        for _, v in ipairs(nums[i]) do\n            sum = sum + v\n\
    \        end\n        results[i] = sum\n    end\n    return results\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
    \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
    \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659979484
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_91vjnq.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpo_91vjnq.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local sums = {}\n  for i, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ c in tostring(v):gmatch(\".\") do\n      sum = sum + tonumber(c)\n    end\n\
    \    sums[#sums + 1] = {v, sum, i}\n  end\n  table.sort(sums, function(a, b)\n\
    \    if a[2] ~= b[2] then\n      return a[2] < b[2]\n    else\n      return a[3]\
    \ < b[3]\n    end\n  end)\n  local result = {}\n  for i, v in ipairs(sums) do\n\
    \    result[i] = v[1]\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1wg8fqr7.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp1wg8fqr7.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1wg8fqr7.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local function get_sum(num)\n        local sum = 0\n        local num_str\
    \ = tostring(num)\n        for i = 1, #num_str do\n            sum = sum + tonumber(num_str:sub(i,\
    \ i))\n        end\n        return sum\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphqovoh3y.lua:31: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local table_with_index = {};\n    for k,v in pairs(nums) do\n        table.insert(table_with_index,\
    \ {sum_of_digits(v), v, k});\n    end\n    table.sort(table_with_index, function(a,\
    \ b)\n        if a[1] == b[1] then\n            return a[3] < b[3];\n        else\n\
    \            return a[1] < b[1];\n        end\n    end);\n    local new_table\
    \ = {};\n    for k,v in pairs(table_with_index) do\n        table.insert(new_table,\
    \ v[2]);\n    end\n    return new_table;\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0zovv5r.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpq0zovv5r.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq0zovv5r.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyuupgck.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: nil\nstack traceback:\n\t/tmp/tmpxyuupgck.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ck5vten.lua:17:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {}\nstack traceback:\n\t/tmp/tmp3ck5vten.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    -- your code here\n    local ret = {}\n    local dict = {}\n    for i,v in\
    \ ipairs(nums) do\n      local sum = 0\n      for j=1, #tostring(v) do\n     \
    \   sum = sum + tonumber(tostring(v):sub(j,j))\n      end\n      dict[i] = sum\n\
    \    end\n    local temp = {}\n    for k,v in pairs(dict) do\n      table.insert(temp,\
    \ v)\n    end\n    table.sort(temp)\n    for i=1, #temp do\n      for k,v in pairs(dict)\
    \ do\n        if v == temp[i] then\n          table.insert(ret, nums[k])\n   \
    \       dict[k] = nil\n          break\n        end\n      end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1,\
    \ -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -11, -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n   \
    \ lu.assertEquals(candidate({0, 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23,\
    \ 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0eupuw9q.lua:17:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp0eupuw9q.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp0eupuw9q.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local function compare_ints(int1, int2)\n    local f = function(i)\n      local\
    \ res = 0\n      while i > 0 do\n        res = res + i % 10\n        i = math.floor(i\
    \ / 10)\n      end\n      return res\n    end\n    return f(int1) < f(int2)\n\
    \  end\n  table.sort(nums, compare_ints)\n  return nums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jxv0uuy.lua:29:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {-12, -11, -1, 1, 11}\nstack traceback:\n\
    \t/tmp/tmp0jxv0uuy.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \tlocal function compare(a, b)\n\t\treturn a[1] < b[1]\n\tend\n\tlocal num_to_points\
    \ = {}\n\tfor i, num in ipairs(nums) do\n\t\tlocal points = 0\n\t\tfor digit in\
    \ tostring(num):gmatch(\"%d\") do\n\t\t\tpoints = points + tonumber(digit)\n\t\
    \tend\n\t\tnum_to_points[i] = {points, num}\n\tend\n\ttable.sort(num_to_points,\
    \ compare)\n\tlocal result = {}\n\tfor _, item in ipairs(num_to_points) do\n\t\
    \ttable.insert(result, item[2])\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = order_by_points\n    lu.assertEquals(candidate({1,\
    \ 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz8tjb5ui.lua:33:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, -1, -11, 11, -12}\nstack traceback:\n\
    \t/tmp/tmpz8tjb5ui.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \    local sums = {}\n    for i, n in ipairs(nums) do\n        sums[i] = math.abs(n)\
    \ % 10 + math.abs(n) // 10\n    end\n    table.sort(sums)\n    local ans = {}\n\
    \    for i, sum in ipairs(sums) do\n        for j, n in ipairs(nums) do\n    \
    \        if not ans[j] and math.abs(n) % 10 + math.abs(n) // 10 == sum then\n\
    \                ans[j] = n\n                break\n            end\n        end\n\
    \    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbejze43.lua:31:\
    \ expected: {-1, -11, 1, -12, 11}\nactual: {1, 11, -1, -11, -12}\nstack traceback:\n\
    \t/tmp/tmpsbejze43.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659979479
- exit_code: 1
  program: "-- Write a function which sorts the given table of integers\n-- in ascending\
    \ order according to the sum of their digits.\n-- Note: if there are several items\
    \ with similar sum of their digits,\n-- order them based on their index in original\
    \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
    \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n\
    \  local points = {}\n  for _, n in ipairs(nums) do\n    points[n] = sum_of_digits(n)\n\
    \  end\n  local by_points = function(a, b)\n    local point_a = points[a]\n  \
    \  local point_b = points[b]\n    if point_a == point_b then\n      -- order is\
    \ important to support non-number keys\n      return tostring(a) < tostring(b)\n\
    \    else\n      return point_a < point_b\n    end\n  end\n  table.sort(nums,\
    \ by_points)\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = order_by_points\n    lu.assertEquals(candidate({1, 11, -1, -11,\
    \ -12}), {-1, -11, 1, -12, 11})\n    lu.assertEquals(candidate({1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -11, -32, 43, 54, -98, 2, -3}), {-3,\
    \ -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
    \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpajrz96oc.lua:13:\
    \ attempt to call a nil value (global 'sum_of_digits')\nstack traceback:\n\t/tmp/tmpajrz96oc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpajrz96oc.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979479
