name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local divisor = n - 1\n  while divisor > 0 do\n    if n % divisor\
    \ == 0 then\n      return divisor\n    end\n    divisor = divisor - 1\n  end\n\
    \  return 1\nend", "  for i = 2, n - 1 do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\n  return 1\nend", "    for i = n - 1, 2, -1 do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\n    return 1\n\
    end", "  for i = n - 1, 1, -1 do\n    if (n % i) == 0 then\n      return i\n \
    \   end\n  end\n  return 1\nend", "\tfor i=n-1, 2, -1 do\n\t\tif n % i == 0 then\n\
    \t\t\treturn i\n\t\tend\n\tend\n\treturn 1\nend", "    local i = math.floor(n\
    \ / 2)\n    while i > 1 do\n        if n % i == 0 then\n            return i\n\
    \        end\n        i = i - 1\n    end\n    return 1\nend", "  for i = 2, n-1\
    \ do\n    if (n % i == 0) then\n      return n / i\n    end\n  end\n  return n\n\
    end", "  local i = 2\n  while i < n and n % i ~= 0 do\n    i = i + 1\n  end\n\
    \  return i\nend", "    return __.reduce(function(a, b) return (n % b == 0) and\
    \ b or a end, 0, __.range(2, n-1))\nend", "\tlocal i = math.floor(n/2)\n\twhile\
    \ (n % i) ~= 0 do\n\t\ti = i - 1\n\tend\n\treturn i\nend", "  for i=2,n do\n \
    \   if n % i == 0 then\n      return i\n    end\n  end\n  return 1\nend", "\t\
    for i=n-1, 1, -1 do\n\t\tif n % i == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\
    end", "    for d = n - 1, 2, -1 do\n        if n % d == 0 then\n            return\
    \ d\n        end\n    end\n    return 1\nend", "    local d = 2\n    while n %\
    \ d ~= 0 do\n        d = d + 1\n    end\n    return d\nend", "  for i = n - 1,\
    \ 1, -1 do\n    if n % i == 0 then\n      return i\n    end\n  end\n  return 1\n\
    end", "    for i = math.floor(n/2), 2, -1 do\n        if math.fmod(n, i) == 0\
    \ then\n            return i\n        end\n    end\n    return 1\nend", "\tlocal\
    \ d = math.floor(n / 2)\n\twhile d > 1 do\n\t\tif n % d == 0 then\n\t\t\treturn\
    \ d\n\t\tend\n\t\td = d - 1\n\tend\n\treturn d\nend", "\tlocal i = math.floor(n/2)\n\
    \twhile (n % i ~= 0) do\n\t\ti = i - 1\n\tend\n\treturn i\nend", "    if n <=\
    \ 1 then return n end\n    -- once is_prime is implemented, we'll use that to\
    \ speed things up\n    -- but for now, we'll go with a brute force algorithm\n\
    \    local largest = 1\n    for i = 2, n/2 do\n        if n % i == 0 then\n  \
    \          largest = i\n        end\n    end\n    return largest\nend", "    local\
    \ divisor = 2\n    while n > divisor do\n        if (n % divisor) == 0 then\n\
    \            return n/divisor\n        end\n        divisor = divisor + 1\n  \
    \  end\n    return 1\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
