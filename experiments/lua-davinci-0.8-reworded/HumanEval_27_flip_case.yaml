name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\treturn string:gsub(\"%a\",\n\t\tfunction(str)\n\t\t\tif str == str:lower()\
    \ then\n\t\t\t\treturn str:upper()\n\t\t\telse\n\t\t\t\treturn str:lower()\n\t\
    \t\tend\n\t\tend\n\t)\nend", "\tlocal flipped = ''\n\tfor i = 1, #string do\n\t\
    \tif string.match(string[i], '[%l]') then\n\t\t\tflipped = flipped .. string.upper(string[i])\n\
    \t\telseif string.match(string[i], '[%u]') then\n\t\t\tflipped = flipped .. string.lower(string[i])\n\
    \t\telse\n\t\t\tflipped = flipped .. string[i]\n\t\tend\n\tend\n\treturn flipped\n\
    end", "  return string:gsub(\"%a\", function(c) return c == c:lower() and c:upper()\
    \ or c:lower() end)\nend", "\tlocal flipped = ''\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif char:lower() == char then\n\t\t\tflipped\
    \ = flipped .. char:upper()\n\t\telse\n\t\t\tflipped = flipped .. char:lower()\n\
    \t\tend\n\tend\n\treturn flipped\nend", "    local flipped = ''\n    for char\
    \ in string:gmatch('.') do\n        if char:match('%u') then\n            flipped\
    \ = flipped .. char:lower()\n        elseif char:match('%l') then\n          \
    \  flipped = flipped .. char:upper()\n        else\n            flipped = flipped\
    \ .. char\n        end\n    end\n    return flipped\nend", "  return string:gsub('%a',\
    \ {\n    [string.lower(string)] = string.upper,\n    [string.upper(string)] =\
    \ string.lower\n  })\nend", "    return string:gsub('%a', function(char)\n   \
    \     return char:match('%u') and char:lower() or char:upper()\n    end)\nend",
  "  local result = ''\n  for i=1,#string do\n    local ch = string:sub(i,i)\n   \
    \ if ch:match('%a') then\n      if ch:match('%l') then\n        result = result\
    \ .. ch:upper()\n      else\n        result = result .. ch:lower()\n      end\n\
    \    else\n      result = result .. ch\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if char:isupper() then\n            result[i] = char:lower()\n \
    \       elseif char:islower() then\n            result[i] = char:upper()\n   \
    \     else\n            result[i] = char\n        end\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        local flipped = flip_case_lookup[char]\n        if\
    \ flipped then\n            result[i] = flipped\n        else\n            result[i]\
    \ = char\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ flipped = ''\n    for c in string:gmatch\".\" do\n        flipped = flipped\
    \ .. (c:isupper() and c:lower() or c:upper())\n    end\n    return flipped\nend",
  "  return string:gsub('%a', function(s)\n    return s == s:lower() and s:upper()\
    \ or s:lower()\n  end)\nend", "  local characters = {}\n  local flipped = {}\n\
    \  for char in string:gmatch('.') do\n    if char:find('%a') then\n      table.insert(characters,\
    \ char)\n    end\n  end\n  for index, char in ipairs(characters) do\n    if char:find('%l')\
    \ then\n      flipped[index] = char:upper()\n    else\n      flipped[index] =\
    \ char:lower()\n    end\n  end\n  return table.concat(flipped)\nend", "  local\
    \ new = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if c:match('[a-z]')\
    \ then\n      new[i] = c:upper()\n    elseif c:match('[A-Z]') then\n      new[i]\
    \ = c:lower()\n    else\n      new[i] = c\n    end\n  end\n  return table.concat(new)\n\
    end", "  return string:gsub(\".\", function(char)\n    if char:match(\"%u\") then\n\
    \      return char:lower()\n    elseif char:match(\"%l\") then\n      return char:upper()\n\
    \    else\n      return char\n    end\n  end)\nend", "    return string:gsub('%a',\
    \ function(c)\n        return c == c:upper() and c:lower() or c:upper()\n    end)\n\
    end", "  if string:match('%l') then\n    return string:gsub('%l', string.upper)\n\
    \  else\n    return string:gsub('%u', string.lower)\n  end\nend", "  local newstring\
    \ = \"\"\n  for i=1,#string do\n    local char = string:sub(i,i)\n    if char\
    \ == char:lower() then\n      newstring = newstring .. char:upper()\n    else\n\
    \      newstring = newstring .. char:lower()\n    end\n  end\n  return newstring\n\
    end", "  return string:gsub(\"%a\",\n    function(c)\n      if c:lower() == c\
    \ then\n        return c:upper()\n      else\n        return c:lower()\n     \
    \ end\n    end)\nend", "    -- TODO\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
