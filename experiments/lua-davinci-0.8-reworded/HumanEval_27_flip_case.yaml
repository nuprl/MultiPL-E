name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\treturn string:gsub(\"%a\",\n\t\tfunction(str)\n\t\t\tif str == str:lower()\
    \ then\n\t\t\t\treturn str:upper()\n\t\t\telse\n\t\t\t\treturn str:lower()\n\t\
    \t\tend\n\t\tend\n\t)\nend", "\tlocal flipped = ''\n\tfor i = 1, #string do\n\t\
    \tif string.match(string[i], '[%l]') then\n\t\t\tflipped = flipped .. string.upper(string[i])\n\
    \t\telseif string.match(string[i], '[%u]') then\n\t\t\tflipped = flipped .. string.lower(string[i])\n\
    \t\telse\n\t\t\tflipped = flipped .. string[i]\n\t\tend\n\tend\n\treturn flipped\n\
    end", "  return string:gsub(\"%a\", function(c) return c == c:lower() and c:upper()\
    \ or c:lower() end)\nend", "\tlocal flipped = ''\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif char:lower() == char then\n\t\t\tflipped\
    \ = flipped .. char:upper()\n\t\telse\n\t\t\tflipped = flipped .. char:lower()\n\
    \t\tend\n\tend\n\treturn flipped\nend", "    local flipped = ''\n    for char\
    \ in string:gmatch('.') do\n        if char:match('%u') then\n            flipped\
    \ = flipped .. char:lower()\n        elseif char:match('%l') then\n          \
    \  flipped = flipped .. char:upper()\n        else\n            flipped = flipped\
    \ .. char\n        end\n    end\n    return flipped\nend", "  return string:gsub('%a',\
    \ {\n    [string.lower(string)] = string.upper,\n    [string.upper(string)] =\
    \ string.lower\n  })\nend", "    return string:gsub('%a', function(char)\n   \
    \     return char:match('%u') and char:lower() or char:upper()\n    end)\nend",
  "  local result = ''\n  for i=1,#string do\n    local ch = string:sub(i,i)\n   \
    \ if ch:match('%a') then\n      if ch:match('%l') then\n        result = result\
    \ .. ch:upper()\n      else\n        result = result .. ch:lower()\n      end\n\
    \    else\n      result = result .. ch\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if char:isupper() then\n            result[i] = char:lower()\n \
    \       elseif char:islower() then\n            result[i] = char:upper()\n   \
    \     else\n            result[i] = char\n        end\n    end\n    return table.concat(result)\n\
    end", "    local result = {}\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        local flipped = flip_case_lookup[char]\n        if\
    \ flipped then\n            result[i] = flipped\n        else\n            result[i]\
    \ = char\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ flipped = ''\n    for c in string:gmatch\".\" do\n        flipped = flipped\
    \ .. (c:isupper() and c:lower() or c:upper())\n    end\n    return flipped\nend",
  "  return string:gsub('%a', function(s)\n    return s == s:lower() and s:upper()\
    \ or s:lower()\n  end)\nend", "  local characters = {}\n  local flipped = {}\n\
    \  for char in string:gmatch('.') do\n    if char:find('%a') then\n      table.insert(characters,\
    \ char)\n    end\n  end\n  for index, char in ipairs(characters) do\n    if char:find('%l')\
    \ then\n      flipped[index] = char:upper()\n    else\n      flipped[index] =\
    \ char:lower()\n    end\n  end\n  return table.concat(flipped)\nend", "  local\
    \ new = {}\n  for i = 1, #string do\n    local c = string:sub(i, i)\n    if c:match('[a-z]')\
    \ then\n      new[i] = c:upper()\n    elseif c:match('[A-Z]') then\n      new[i]\
    \ = c:lower()\n    else\n      new[i] = c\n    end\n  end\n  return table.concat(new)\n\
    end", "  return string:gsub(\".\", function(char)\n    if char:match(\"%u\") then\n\
    \      return char:lower()\n    elseif char:match(\"%l\") then\n      return char:upper()\n\
    \    else\n      return char\n    end\n  end)\nend", "    return string:gsub('%a',\
    \ function(c)\n        return c == c:upper() and c:lower() or c:upper()\n    end)\n\
    end", "  if string:match('%l') then\n    return string:gsub('%l', string.upper)\n\
    \  else\n    return string:gsub('%u', string.lower)\n  end\nend", "  local newstring\
    \ = \"\"\n  for i=1,#string do\n    local char = string:sub(i,i)\n    if char\
    \ == char:lower() then\n      newstring = newstring .. char:upper()\n    else\n\
    \      newstring = newstring .. char:lower()\n    end\n  end\n  return newstring\n\
    end", "  return string:gsub(\"%a\",\n    function(c)\n      if c:lower() == c\
    \ then\n        return c:upper()\n      else\n        return c:lower()\n     \
    \ end\n    end)\nend", "    -- TODO\nend", "    local out = {}\n    for i = 1,\
    \ string.len(string) do\n        local char = string.sub(string, i, i)\n     \
    \   if char == char:lower() then\n            table.insert(out, char:upper())\n\
    \        else\n            table.insert(out, char:lower())\n        end\n    end\n\
    \    return table.concat(out)\nend", "    local flipped = string:gsub('.', function(char)\n\
    \        if char:find('%l') then\n            return char:upper()\n        elseif\
    \ char:find('%u') then\n            return char:lower()\n        else\n      \
    \      return char\n        end\n    end)\n    return flipped\nend", "    local\
    \ result = {}\n    for i = 1, #string do\n        local c = string:sub(i, i)\n\
    \        if c:match('%l') then\n            c = c:upper()\n        elseif c:match('%u')\
    \ then\n            c = c:lower()\n        end\n        result[i] = c\n    end\n\
    \    return table.concat(result)\nend", "  return string:gsub('(%w)', function(s)\
    \ return s:upper() == s and s:lower() or s:upper() end)\nend", "    return string:gsub('%a',\
    \ function(letter)\n        if letter:lower() == letter then\n            return\
    \ letter:upper()\n        else\n            return letter:lower()\n        end\n\
    \    end)\nend", "  return string:gsub('(%a)', function(char)\n    if char:match('[a-z]')\
    \ then\n      return char:upper()\n    else\n      return char:lower()\n    end\n\
    \  end)\nend", "  local result = {}\n  for i = 1, #string do\n    local character\
    \ = string:sub(i, i)\n    if character == character:lower() then\n      result[i]\
    \ = character:upper()\n    else\n      result[i] = character:lower()\n    end\n\
    \  end\n  return table.concat(result)\nend", "\treturn string:gsub(\"%a\",function(ch)\n\
    \t\treturn (ch == ch:lower() and ch:upper() or ch:lower())\n\tend)\nend", "  local\
    \ result = ''\n  for i = 1, string.len(string) do\n    local char = string.sub(string,\
    \ i, i)\n    if char == char:lower() then\n      result = result .. char:upper()\n\
    \    else\n      result = result .. char:lower()\n    end\n  end\n  return result\n\
    end", "  local new_string = ''\n  for i = 1, #string do\n    local c = string:sub(i,\
    \ i)\n    if c == c:lower() then\n      new_string = new_string .. c:upper()\n\
    \    else\n      new_string = new_string .. c:lower()\n    end\n  end\n  return\
    \ new_string\nend", "    return string:gsub(\"%a\", function(char)\n        return\
    \ char:match(\"%u\") and char:lower() or char:upper()\n    end)\nend", "  local\
    \ letter_range = string.char(97, 122) .. string.char(65, 90)\n  local flipped_range\
    \ = string.char(65, 90) .. string.char(97, 122)\n  local translation_table = {}\n\
    \  for i=1,#letter_range do\n    translation_table[letter_range:sub(i,i)] = flipped_range:sub(i,i)\n\
    \  end\n  return string:gsub(\".\", translation_table)\nend", "    return string:gsub('%a',\
    \ function(c)\n        if c:match('[a-z]') then\n            return c:upper()\n\
    \        else\n            return c:lower()\n        end\n    end)\nend", "  \
    \  local new_string = {}\n    for i=1, #string do\n        local char = string:sub(i,i)\n\
    \        if char == char:lower() then\n            char = char:upper()\n     \
    \   else\n            char = char:lower()\n        end\n        new_string[i]\
    \ = char\n    end\n    return table.concat(new_string)\nend", "\treturn (string:gsub(\"\
    (%a)\", {[\"%a\"] = \"%u\", [\"%A\"] = \"%l\"}))\nend", "\treturn string:gsub('%a',\
    \ function(char)\n\t\tif char:lower() == char then\n\t\t\treturn char:upper()\n\
    \t\telse\n\t\t\treturn char:lower()\n\t\tend\n\tend)\nend", "    local chars =\
    \ {}\n    for char in string:gmatch('.') do\n        local fchar = char:lower()\n\
    \        if fchar == char then\n            fchar = char:upper()\n        end\n\
    \        table.insert(chars, fchar)\n    end\n    return table.concat(chars)\n\
    end", "    local flipped = string:gsub(\"%w\", function(c)\n        if c:match(\"\
    %a\") then\n            if c:match(\"%l\") then\n                return c:upper()\n\
    \            else\n                return c:lower()\n            end\n       \
    \ else\n            return c\n        end\n    end)\n    return flipped\nend",
  "  return string:gsub(\"%a\", flip_case_char)\nend", "\tlocal new_string = ''\n\t\
    for i = 1, string.len(string) do\n\t\tlocal character = string.sub(string, i,\
    \ i)\n\t\tlocal number = string.byte(character)\n\t\tif number >= 65 and number\
    \ <= 90 then\n\t\t\tnew_string = new_string .. string.char(number + 32)\n\t\t\
    elseif number >= 97 and number <= 122 then\n\t\t\tnew_string = new_string .. string.char(number\
    \ - 32)\n\t\telse\n\t\t\tnew_string = new_string .. character\n\t\tend\n\tend\n\
    \treturn new_string\nend", "    return string:gsub('%a', function(letter)\n  \
    \      if letter:lower() == letter then\n            return letter:upper()\n \
    \       else\n            return letter:lower()\n        end\n    end)\nend",
  "    return string:gsub('%a', function(x) return x:upper() == x and x:lower() or\
    \ x:upper() end)\nend", "\tlocal result = \"\"\n\tfor i = 1, #string do\n\t\t\
    local char = string:sub(i, i)\n\t\tif char:lower() == char then\n\t\t\tresult\
    \ = result .. char:upper()\n\t\telse\n\t\t\tresult = result .. char:lower()\n\t\
    \tend\n\tend\n\treturn result\nend", "    local chars = _M.split(string, \"\"\
    )\n    local flipped = {}\n    for i = 1, #chars do\n        local letter = chars[i]\n\
    \        if match(letter, '[a-z]') then\n            flipped[i] = upper(letter)\n\
    \        elseif match(letter, '[A-Z]') then\n            flipped[i] = lower(letter)\n\
    \        else\n            flipped[i] = letter\n        end\n    end\n    return\
    \ concat(flipped)\nend\n_M.flip_case = flip_case", "  local new_string = ''\n\
    \  for i=1,#string do\n    local char = string:sub(i,i)\n    if char:lower() ==\
    \ char then\n      new_string = new_string .. char:upper()\n    else\n      new_string\
    \ = new_string .. char:lower()\n    end\n  end\n  return new_string\nend", "\t\
    local new_string = ''\n\tfor c in string:gmatch('.') do\n\t\tlocal char = c:lower()\n\
    \t\tif char == c then\n\t\t\tchar = c:upper()\n\t\tend\n\t\tnew_string = new_string\
    \ .. char\n\tend\n\treturn new_string\nend", "\tlocal new_string = ''\n\tlocal\
    \ letter = ''\n\tfor i=1, #string do\n\t\tletter = string:sub(i,i)\n\t\tif letter\
    \ == letter:lower() then\n\t\t\tnew_string = new_string .. letter:upper()\n\t\t\
    else\n\t\t\tnew_string = new_string .. letter:lower()\n\t\tend\n\tend\n\treturn\
    \ new_string\nend", "  return string:gsub('(%a)', function(char)\n    return char:lower()\
    \ == char and char:upper() or char:lower()\n  end)\nend", "\tlocal new_string\
    \ = \"\"\n\tfor char in string:gmatch(\".\") do\n\t\tif char:match(\"%l\") then\n\
    \t\t\tnew_string = new_string .. char:upper()\n\t\telseif char:match(\"%u\") then\n\
    \t\t\tnew_string = new_string .. char:lower()\n\t\telse\n\t\t\tnew_string = new_string\
    \ .. char\n\t\tend\n\tend\n\treturn new_string\nend", "  local flipped = {}\n\
    \  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char:find('%l')\
    \ then\n      flipped[i] = char:upper()\n    elseif char:find('%u') then\n   \
    \   flipped[i] = char:lower()\n    else\n      flipped[i] = char\n    end\n  end\n\
    \  return table.concat(flipped)\nend", "    local result = ''\n    for i = 1,\
    \ #string do\n        local char = string:sub(i, i)\n        if char:match('%l')\
    \ then\n            result = result .. char:upper()\n        elseif char:match('%u')\
    \ then\n            result = result .. char:lower()\n        else\n          \
    \  result = result .. char\n        end\n    end\n    return result\nend", " \
    \   return string:gsub(\"%a\", function(char)\n        return string.char(char:byte()\
    \ ^ 32)\n    end)\nend", "    local lookup = {}\n    for k, v in pairs(uppercase)\
    \ do\n        lookup[k] = v\n        lookup[v] = k\n    end\n    local new_string\
    \ = ''\n    for i = 1, #string do\n        local char = string:sub(i, i)\n   \
    \     if lookup[char] then\n            new_string = new_string .. lookup[char]\n\
    \        else\n            new_string = new_string .. char\n        end\n    end\n\
    \    return new_string\nend", "    return string:gsub('%a',\n                \
    \       function(character)\n                           if character:lower() ==\
    \ character then\n                               return character:upper()\n  \
    \                         else\n                               return character:lower()\n\
    \                           end\n                       end)\nend", "  return\
    \ (string:gsub(\"%l\", function(char)\n    if char:match(\"%u\") then\n      return\
    \ char:lower()\n    else\n      return char:upper()\n    end\n  end))\nend", " \
    \ return string:gsub('(%a)', function(ch)\n    return (ch == ch:lower()) and ch:upper()\
    \ or ch:lower()\n  end)\nend", "  return string:gsub(\"%a\",function(c) return\
    \ c == c:lower() and c:upper() or c:lower() end)\nend", "\treturn string:gsub(\"\
    %a\", function(char)\n\t\treturn char:lower() == char and char:upper() or char:lower()\n\
    \tend)\nend", "    local new_string = \"\"\n    for i = 1, #string do\n      \
    \  if string.find(string, string.sub(string, i, i), i, true) then\n          \
    \  new_string = new_string .. string.upper(string.sub(string, i, i))\n       \
    \ else\n            new_string = new_string .. string.lower(string.sub(string,\
    \ i, i))\n        end\n    end\n    return new_string\nend", "    local flip_case_table\
    \ = {}\n    for i = 1, #string do\n        local c = string:sub(i, i)\n      \
    \  if c == c:lower() then\n            flip_case_table[i] = c:upper()\n      \
    \  else\n            flip_case_table[i] = c:lower()\n        end\n    end\n  \
    \  return table.concat(flip_case_table)\nend", "  return string:gsub('%a', function(c)\n\
    \    return flip_case_table[c]\n  end)\nend", "    return string:gsub(\"%a\",\
    \ function(char)\n        if char:match(\"%l\") then\n            return char:upper()\n\
    \        else\n            return char:lower()\n        end\n    end)\nend", " \
    \   return string:gsub('%a', char_flip)\nend", "\treturn string:gsub(\"%a\", function(c)\n\
    \t\treturn c == c:lower() and c:upper() or c:lower()\n\tend)\nend", "    return\
    \ string:gsub('.',function(c) return c == c:lower() and c:upper() or c:lower()\
    \ end)\nend", "    return string:gsub('%a', function(c)\n        return c == c:upper()\
    \ and c:lower() or c:upper()\n    end)\nend", "  return string:gsub('%a', function(char)\n\
    \    if char:isupper() then\n      return char:lower()\n    else\n      return\
    \ char:upper()\n    end\n  end)\nend", "  return string:gsub('%a', function(c)\n\
    \    if c:match('%u') then\n      return c:lower()\n    else\n      return c:upper()\n\
    \    end\n  end)\nend", "  local flipped = {}\n  for index, character in string.gmatch(string,\
    \ '()(.)') do\n    local case_flipped = character:lower() == character and character:upper()\
    \ or character:lower()\n    flipped[index] = case_flipped\n  end\n  return table.concat(flipped)\n\
    end", "    return string:gsub(\"%a\", function(c)\n        return lpeg.P(c:lower())\
    \ + lpeg.P(c:upper())\n    end)\nend", "    local result = ''\n    for i = 1,\
    \ #string do\n        local char = string:sub(i, i)\n        if char:isupper()\
    \ then\n            result = result .. char:lower()\n        elseif char:islower()\
    \ then\n            result = result .. char:upper()\n        else\n          \
    \  result = result .. char\n        end\n    end\n    return result\nend", " \
    \   return string:gsub(\"%a\", function(c)\n        if c:find(\"%u\") then\n \
    \           return c:lower()\n        else\n            return c:upper()\n   \
    \     end\n    end)\nend", "  if string.lower(string) == string then\n    return\
    \ string.upper(string)\n  else\n    return string.lower(string)\n  end\nend",
  "  return string:gsub('%a', function(char)\n    return char:lower() == char and\
    \ char:upper() or char:lower()\n  end)\nend", "  return (string:gsub(\"%a\",\n\
    \    function(char)\n      return char == char:lower() and char:upper() or char:lower()\n\
    \    end\n  ))\nend", "    return (string:gsub(\"%a\", {[\"%u\"] = \"%l\", [\"\
    %l\"] = \"%u\"}))\nend", "  local flipped = {}\n  for i = 1, string.len(string)\
    \ do\n    if string.sub(string, i, i) == string.lower(string.sub(string, i, i))\
    \ then\n      flipped[i] = string.upper(string.sub(string, i, i))\n    else\n\
    \      flipped[i] = string.lower(string.sub(string, i, i))\n    end\n  end\n \
    \ return table.concat(flipped)\nend", "  return string:gsub('%a', function(c)\n\
    \    return flip_case_table[c]\n  end)\nend", "  return string:gsub(\"%a\", function(c)\n\
    \    return c == c:lower() and c:upper() or c:lower()\n  end)\nend", "\treturn\
    \ (string:gsub(\"%a\", function(s)\n\t\treturn (s:lower() == s) and s:upper()\
    \ or s:lower()\n\tend))\nend", "  return string:gsub(\"%a\", function(char)\n\
    \    return char:upper() == char and char:lower() or char:upper()\n  end)\nend",
  "    string = string:gsub('%a', {\n        ['a'] = 'A',\n        ['b'] = 'B',\n\
    \        ['c'] = 'C',\n        ['d'] = 'D',\n        ['e'] = 'E',\n        ['f']\
    \ = 'F',\n        ['g'] = 'G',\n        ['h'] = 'H',\n        ['i'] = 'I',\n \
    \       ['j'] = 'J',\n        ['k'] = 'K',\n        ['l'] = 'L',\n        ['m']\
    \ = 'M',\n        ['n'] = 'N',\n        ['o'] = 'O',\n        ['p'] = 'P',\n \
    \       ['q'] = 'Q',\n        ['r'] = 'R',\n        ['s'] = 'S',\n        ['t']\
    \ = 'T',\n        ['u'] = 'U',\n        ['v'] = 'V',\n        ['w'] = 'W',\n \
    \       ['x'] = 'X',\n        ['y'] = 'Y',\n        ['z'] = 'Z',\n        ['A']\
    \ = 'a',\n        ['B'] = 'b',\n        ['C'] = 'c',\n        ['D'] = 'd',\n \
    \       ['E'] = 'e',\n        ['F'] = 'f',\n        ['G'] = 'g',\n        ['H']\
    \ = 'h',\n        ['I'] = 'i',\n        ['J'] = 'j',\n        ['K'] = 'k',\n \
    \       ['L'] = 'l',\n        ['M'] = 'm',\n        ['N'] = 'n',\n        ['O']\
    \ = 'o',\n        ['P'] = 'p',\n        ['Q'] = 'q',\n        ['R'] = 'r',\n \
    \       ['S'] = 's',\n        ['T'] = 't',\n        ['U'] = 'u',\n        ['V']\
    \ = 'v',\n        ['W'] = 'w',\n        ['X'] = 'x',\n        ['Y'] = 'y',\n \
    \       ['Z'] = 'z',\n    })\n    return string\nend", "  return string:gsub(\"\
    %a\", function(s)\n    return (s == s:lower()) and s:upper() or s:lower()\n  end)\n\
    end", "    return string:gsub(\"(%a)\", function(c) return (c:lower() == c) and\
    \ c:upper() or c:lower() end)\nend", "  return string:gsub('%a', function(char)\n\
    \    if char:match('%l') then\n      return char:upper()\n    else\n      return\
    \ char:lower()\n    end\n  end)\nend", "    local flipped = string:gsub(\"%l\"\
    , string.upper)\n    flipped = flipped:gsub(\"%u\", string.lower)\n    return\
    \ flipped\nend", "  return string:gsub(\"%a\", function(c) return (c == c:lower())\
    \ and c:upper() or c:lower() end)\nend", "    local match = string:match(\"^([%l%u])\"\
    )\n    return match:lower() .. string:sub(2)\nend", "  return (string:gsub('.',\
    \ function(c)\n    return string.sub(CHAR_CLASSES, string.find(CHAR_CLASSES, c)\
    \ + 1,\n        string.find(CHAR_CLASSES, c) + 1)\n  end))\nend", "  return string:gsub('%a',\
    \ function(char)\n    if char:match('%l') then\n      return char:upper()\n  \
    \  else\n      return char:lower()\n    end\n  end)\nend", "  return string:gsub('%a',\
    \ function(char)\n    if char:isupper() then\n      return char:lower()\n    else\n\
    \      return char:upper()\n    end\n  end)\nend", "  local buffer = {}\n  for\
    \ character in string:gmatch('.') do\n    if character:isupper() then\n      table.insert(buffer,\
    \ character:lower())\n    else\n      table.insert(buffer, character:upper())\n\
    \    end\n  end\n  return table.concat(buffer)\nend", "    local flipped = ''\n\
    \    for char in string:gmatch('%a') do\n        if char:lower() == char then\n\
    \            flipped = flipped .. char:upper()\n        else\n            flipped\
    \ = flipped .. char:lower()\n        end\n    end\n    return flipped\nend", " \
    \ return string:gsub(\"%a\", function(c) return (c == c:lower()) and c:upper()\
    \ or c:lower() end)\nend", "    local t = {}\n    for i=1, #string do\n      \
    \  t[i] = string.upper(string:sub(i,i)) ~= string:sub(i,i) and string.upper(string:sub(i,i))\
    \ or string.lower(string:sub(i,i))\n    end\n    return table.concat(t)\nend",
  "  local utf8_string = utf8.new(string)\n  for i = 1, utf8_string:len() do\n   \
    \ local codepoint = utf8_string:codepoint(i)\n    if codepoint >= 65 and codepoint\
    \ <= 90 then\n      utf8_string:replace(i, 1, string.char(codepoint + 32))\n \
    \   elseif codepoint >= 97 and codepoint <= 122 then\n      utf8_string:replace(i,\
    \ 1, string.char(codepoint - 32))\n    end\n  end\n  return utf8_string:tostring()\n\
    end", "  return string:gsub('(%a)', function(char)\n    if char:lower() == char\
    \ then\n      return char:upper()\n    else\n      return char:lower()\n    end\n\
    \  end)\nend", "  local string_out = ''\n  for char in string:gmatch('%a') do\n\
    \    if char:match('%l') then\n      string_out = string_out .. char:upper()\n\
    \    else\n      string_out = string_out .. char:lower()\n    end\n  end\n  return\
    \ string_out\nend", "  return (string:gsub(\".\", {\n    [\"A\"] = \"a\", [\"\
    B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"\
    f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"\
    ] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\"\
    , [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"]\
    \ = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\"\
    , [\"Y\"] = \"y\", [\"Z\"] = \"z\",\n    [\"a\"] = \"A\", [\"b\"] = \"B\", [\"\
    c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"\
    G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"\
    ] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\"\
    , [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"]\
    \ = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\"\
    , [\"z\"] = \"Z\",\n  }))\nend", "  return string:gsub('%a', function(c)\n   \
    \ return c == c:upper() and c:lower() or c:upper()\n  end)\nend", "    return\
    \ string:gsub('%a',\n        function(character)\n            return (character\
    \ == character:lower()) and character:upper() or character:lower()\n        end\n\
    \    )\nend", "    if type(string) ~= 'string' then\n        return string\n \
    \   end\n    return string:gsub('%a', string.lower)\nend", "    local flip = string:gsub('%l',\
    \ string.upper)\n    return flip:gsub('%u', string.lower)\nend", "    if type(string)\
    \ ~= 'string' then\n        return nil\n    end\n    return string:gsub('%a',\
    \ function(c)\n        if c:find('%a') then\n            return c:lower() == c\
    \ and c:upper() or c:lower()\n        end\n    end)\nend", "    local res = ''\n\
    \    for i=1,string.len(string) do\n        local char = string.sub(string, i,\
    \ i)\n        if char == char:lower() then\n            res = res .. char:upper()\n\
    \        else\n            res = res .. char:lower()\n        end\n    end\n \
    \   return res\nend", "    return string:gsub('%a',\n        function(c)\n   \
    \         return c == c:lower() and c:upper() or c:lower()\n        end\n    )\n\
    end", "    local res = \"\"\n    for i = 1, #string do\n        local c = string:sub(i,\
    \ i)\n        if c:match(\"%a\") then\n            if c:match(\"%u\") then\n \
    \               res = res .. c:lower()\n            else\n                res\
    \ = res .. c:upper()\n            end\n        else\n            res = res ..\
    \ c\n        end\n    end\n    return res\nend", "  return string:gsub('%l', function(c)\
    \ return c:upper() == c and c:lower() or c:upper() end)\nend", "    return string:gsub('%a',\
    \ function(char)\n        return (char == char:lower()) and char:upper() or char:lower()\n\
    \    end)\nend", "    return string:gsub('[a-z]', function(c) return c:upper()\
    \ end):gsub('[A-Z]', function(c) return c:lower() end)\nend", "  local new_string\
    \ = ''\n  for i = 1, #string do\n    local char = string:sub(i, i)\n    if char:lower()\
    \ == char then\n      new_string = new_string .. char:upper()\n    else\n    \
    \  new_string = new_string .. char:lower()\n    end\n  end\n  return new_string\n\
    end", "  local swap = {\n    ['a'] = 'A',\n    ['b'] = 'B',\n    ['c'] = 'C',\n\
    \    ['d'] = 'D',\n    ['e'] = 'E',\n    ['f'] = 'F',\n    ['g'] = 'G',\n    ['h']\
    \ = 'H',\n    ['i'] = 'I',\n    ['j'] = 'J',\n    ['k'] = 'K',\n    ['l'] = 'L',\n\
    \    ['m'] = 'M',\n    ['n'] = 'N',\n    ['o'] = 'O',\n    ['p'] = 'P',\n    ['q']\
    \ = 'Q',\n    ['r'] = 'R',\n    ['s'] = 'S',\n    ['t'] = 'T',\n    ['u'] = 'U',\n\
    \    ['v'] = 'V',\n    ['w'] = 'W',\n    ['x'] = 'X',\n    ['y'] = 'Y',\n    ['z']\
    \ = 'Z',\n    ['A'] = 'a',\n    ['B'] = 'b',\n    ['C'] = 'c',\n    ['D'] = 'd',\n\
    \    ['E'] = 'e',\n    ['F'] = 'f',\n    ['G'] = 'g',\n    ['H'] = 'h',\n    ['I']\
    \ = 'i',\n    ['J'] = 'j',\n    ['K'] = 'k',\n    ['L'] = 'l',\n    ['M'] = 'm',\n\
    \    ['N'] = 'n',\n    ['O'] = 'o',\n    ['P'] = 'p',\n    ['Q'] = 'q',\n    ['R']\
    \ = 'r',\n    ['S'] = 's',\n    ['T'] = 't',\n    ['U'] = 'u',\n    ['V'] = 'v',\n\
    \    ['W'] = 'w',\n    ['X'] = 'x',\n    ['Y'] = 'y',\n    ['Z'] = 'z',\n  }\n\
    \  local new_string = ''\n  for i = 1, #string do\n    new_string = new_string\
    \ .. (swap[string:sub", "    return string:gsub(\"%a\", function(char)\n     \
    \   if char:find(\"%l\") then\n            return char:upper()\n        else\n\
    \            return char:lower()\n        end\n    end)\nend", "  return string:gsub(\"\
    %a\", function(ch)\n    if ch:lower() == ch then\n      return ch:upper()\n  \
    \  else\n      return ch:lower()\n    end\n  end)\nend", "    return (string:gsub(\"\
    %a\", function(c)\n        return (c == c:lower() and c:upper() or c:lower())\n\
    \    end))\nend", "  return string:gsub('.', function(char)\n    return char ==\
    \ char:upper() and char:lower() or char:upper()\n  end)\nend", "    local result\
    \ = {}\n    for i=1,#string do\n        local char = string:sub(i,i)\n       \
    \ if char:find('%a') then\n            if char:lower() == char then\n        \
    \        result[i] = char:upper()\n            else\n                result[i]\
    \ = char:lower()\n            end\n        else\n            result[i] = char\n\
    \        end\n    end\n    return table.concat(result)\nend", "  return string:gsub(\"\
    (%a)\", {\n    [\"a\"] = \"A\",\n    [\"b\"] = \"B\",\n    [\"c\"] = \"C\",\n\
    \    [\"d\"] = \"D\",\n    [\"e\"] = \"E\",\n    [\"f\"] = \"F\",\n    [\"g\"\
    ] = \"G\",\n    [\"h\"] = \"H\",\n    [\"i\"] = \"I\",\n    [\"j\"] = \"J\",\n\
    \    [\"k\"] = \"K\",\n    [\"l\"] = \"L\",\n    [\"m\"] = \"M\",\n    [\"n\"\
    ] = \"N\",\n    [\"o\"] = \"O\",\n    [\"p\"] = \"P\",\n    [\"q\"] = \"Q\",\n\
    \    [\"r\"] = \"R\",\n    [\"s\"] = \"S\",\n    [\"t\"] = \"T\",\n    [\"u\"\
    ] = \"U\",\n    [\"v\"] = \"V\",\n    [\"w\"] = \"W\",\n    [\"x\"] = \"X\",\n\
    \    [\"y\"] = \"Y\",\n    [\"z\"] = \"Z\",\n    [\"A\"] = \"a\",\n    [\"B\"\
    ] = \"b\",\n    [\"C\"] = \"c\",\n    [\"D\"] = \"d\",\n    [\"E\"] = \"e\",\n\
    \    [\"F\"] = \"f\",\n    [\"G\"] = \"g\",\n    [\"H\"] = \"h\",\n    [\"I\"\
    ] = \"i\",\n    [\"J\"] = \"j\",\n    [\"K\"] = \"k\",\n    [\"L\"] = \"l\",\n\
    \    [\"M\"] = \"m\",\n    [\"N\"] = \"n\",\n    [\"O\"] = \"o\",\n    [\"P\"\
    ] = \"p\",\n    [\"Q\"] = \"q\",\n    [\"R\"] = \"r\",\n    [\"S\"] = \"s\",\n\
    \    [\"T\"] = \"t\",\n    [\"U\"] = \"u\",\n    [\"V\"] = \"v\",\n    [\"W\"\
    ] = \"w\",\n    [\"X\"] = \"x\",\n    [\"Y\"] = \"y\",\n    [\"Z\"] = \"z\",\n\
    \  })\nend", "    local s = \"\"\n    for character in string:gmatch('.') do\n\
    \        if (character == character:upper()) then\n            s = s .. character:lower()\n\
    \        else\n            s = s .. character:upper()\n        end\n    end\n\
    \    return s\nend", "\tlocal flipped = ''\n\tfor char in string:gmatch('.') do\n\
    \t\tif char:isupper() then\n\t\t\tflipped = flipped .. char:lower()\n\t\telseif\
    \ char:islower() then\n\t\t\tflipped = flipped .. char:upper()\n\t\telse\n\t\t\
    \tflipped = flipped .. char\n\t\tend\n\tend\n\treturn flipped\nend", "  return\
    \ string:gsub(\"%a\", function(c)\n    return is_upper(c) and c:lower() or c:upper()\n\
    \  end)\nend", "    return string:gsub(\"%a\", {[\"a\"] = \"A\", [\"b\"] = \"\
    B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"\
    ] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\", [\"j\"] = \"J\", [\"k\"] = \"K\"\
    , [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\", [\"o\"] = \"O\", [\"p\"]\
    \ = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\", [\"t\"] = \"T\"\
    , [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\", [\"y\"]\
    \ = \"Y\", [\"z\"] = \"Z\", [\"A\"] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\"\
    , [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"]\
    \ = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\", [\"K\"] = \"k\", [\"L\"] = \"l\"\
    , [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"] = \"o\", [\"P\"] = \"p\", [\"Q\"]\
    \ = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\", [\"U\"] = \"u\"\
    , [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\", [\"Z\"]\
    \ = \"z\"})\nend", "  local result = {}\n  for c in string:gmatch\".\" do\n  \
    \  local upper = c:upper()\n    if upper == c then\n      table.insert(result,\
    \ c:lower())\n    else\n      table.insert(result, upper)\n    end\n  end\n  return\
    \ table.concat(result)\nend", "  -- Thanks to http://stackoverflow.com/a/23381366/633314\n\
    \  return string:gsub('%a', function(c)\n    return (c == c:lower() and c:upper()\
    \ or c:lower())\n  end)\nend", "  return string:gsub(\"%a\", function(letter)\n\
    \    if letter:lower() == letter then\n      return letter:upper()\n    else\n\
    \      return letter:lower()\n    end\n  end)\nend", "    return string:gsub(\"\
    %a\", function(c)\n        if c:match(\"%l\") then\n            return c:upper()\n\
    \        else\n            return c:lower()\n        end\n    end)\nend", "  return\
    \ string:gsub(\"%l\", function(c) return c:upper() end):gsub(\"%u\", function(c)\
    \ return c:lower() end)\nend", "\tlocal new_string = \"\"\n\tfor i=1, #string\
    \ do\n\t\tlocal c = string:sub(i,i)\n\t\tlocal u = c:upper()\n\t\tlocal l = c:lower()\n\
    \t\tif c == u then\n\t\t\tnew_string = new_string .. l\n\t\telse\n\t\t\tnew_string\
    \ = new_string .. u\n\t\tend\n\tend\n\treturn new_string\nend", "    local ret\
    \ = ''\n    for i = 1, #string do\n        local c = string:sub(i, i)\n      \
    \  if c:match('%a') then\n            local is_upper = c:match('%u')\n       \
    \     local new = c:lower()\n            if is_upper then\n                new\
    \ = c:upper()\n            end\n            ret = ret .. new\n        else\n \
    \           ret = ret .. c\n        end\n    end\n    return ret\nend", "    local\
    \ new_string = ''\n    for i = 1, #string do\n        local character = string:sub(i,\
    \ i)\n        if character == character:lower() then\n            new_string =\
    \ new_string .. character:upper()\n        else\n            new_string = new_string\
    \ .. character:lower()\n        end\n    end\n    return new_string\nend", " \
    \   return string:gsub('%a', function(char)\n        return char:upper() == char\
    \ and char:lower() or char:upper()\n    end)\nend", "    return string:gsub(\"\
    %a\", function(c)\n        return lpeg.R(\"az\"):match(c) and c:upper() or c:lower()\n\
    \    end)\nend", "    return string:gsub('%a', {\n        [upper(string)] = lower(string);\n\
    \        [lower(string)] = upper(string);\n    })\nend", "    return string:gsub('%a',\
    \ function(char)\n        if char:lower() == char then\n            return char:upper()\n\
    \        else\n            return char:lower()\n        end\n    end)\nend", " \
    \   return string:gsub('%a', function(letter)\n        return letter:lower() ==\
    \ letter and letter:upper() or letter:lower()\n    end)\nend", "  local string\
    \ = string\n  if string.match(string, \"%a\") then\n    string = string.gsub(string,\
    \ \"%a\", function(char)\n      if string.match(char, \"%l\") then\n        return\
    \ string.upper(char)\n      else\n        return string.lower(char)\n      end\n\
    \    end)\n  end\n  return string\nend", "  return string:gsub('%a', function(char)\n\
    \    return char:lower() == char and char:upper() or char:lower()\n  end)\nend",
  "  local new_string = ''\n  for i = 1,#string do\n    local character = string:sub(i,i)\n\
    \    local new_character = string.lower(character)\n    if character == new_character\
    \ then\n      new_character = string.upper(character)\n    end\n    new_string\
    \ = new_string .. new_character\n  end\n  return new_string\nend", "  return (string:gsub(\"\
    %a\", flip_char))\nend", "  local s = ''\n  for c in string:gmatch('%a') do\n\
    \    if c:isupper() then\n      s = s .. c:lower()\n    else\n      s = s .. c:upper()\n\
    \    end\n  end\n  return s\nend", "  return string:gsub('%a', function(char)\n\
    \    if char:match('%a') then\n      return char:upper()\n    else\n      return\
    \ char:lower()\n    end\n  end)\nend", "  return (string:gsub(\"%a\", {[upper]\
    \ = lower, [lower] = upper}))\nend", "    local result = ''\n    for i = 1, #string\
    \ do\n        local char = string:sub(i, i)\n        if char:find('%u') then\n\
    \            result = result .. char:lower()\n        elseif char:find('%l') then\n\
    \            result = result .. char:upper()\n        else\n            result\
    \ = result .. char\n        end\n    end\n    return result\nend", "\tlocal out\
    \ = {}\n\tfor i=1,#string do\n\t\tlocal c = string:sub(i,i)\n\t\tif c:lower()\
    \ == c then\n\t\t\tout[i] = c:upper()\n\t\telse\n\t\t\tout[i] = c:lower()\n\t\t\
    end\n\tend\n\treturn table.concat(out)\nend", "  return (string:gsub(\"%a\", function(char)\n\
    \    return char:upper() == char and char:lower() or char:upper()\n  end))\nend",
  "    local new_string = ''\n    for ch in string:gmatch('.') do\n        if ch:isupper()\
    \ then\n            new_string = new_string .. ch:lower()\n        else\n    \
    \        new_string = new_string .. ch:upper()\n        end\n    end\n    return\
    \ new_string\nend", "    return string:gsub('%a', function(char)\n        if char:find('%l')\
    \ then\n            return char:upper()\n        else\n            return char:lower()\n\
    \        end\n    end)\nend", "  return string:gsub(\"%a\", function(letter)\n\
    \    if letter:isupper() then\n      return letter:lower()\n    else\n      return\
    \ letter:upper()\n    end\n  end)\nend", "  local flipped = ''\n  for character\
    \ in string:gmatch('.') do\n    local char_code = character:byte()\n    if (char_code\
    \ > 64 and char_code < 91) or (char_code > 96 and char_code < 123) then\n    \
    \  flipped = flipped .. string.char(char_code ^ 0x20)\n    else\n      flipped\
    \ = flipped .. character\n    end\n  end\n  return flipped\nend", "    return\
    \ string:gsub('%a', function(c)\n        return c == c:upper() and c:lower() or\
    \ c:upper()\n    end)\nend", "  return string:gsub(\"%a\", function(char)\n  \
    \  if char:lower() == char then\n      return char:upper()\n    else\n      return\
    \ char:lower()\n    end\n  end)\nend", "    return string:gsub('%a', function(char)\n\
    \        if char:lower() == char then\n            return char:upper()\n     \
    \   else\n            return char:lower()\n        end\n    end)\nend", "    return\
    \ string:gsub(\"%a\", {[\"%u\"] = \"%l\", [\"%l\"] = \"%u\"})\nend", "  local\
    \ flipped = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n \
    \   if char:lower() == char then\n      flipped[i] = char:upper()\n    else\n\
    \      flipped[i] = char:lower()\n    end\n  end\n  return table.concat(flipped)\n\
    end", "    local flipped = ''\n    for i = 1, #string do\n        local char =\
    \ string:sub(i, i)\n        if char:isupper() then\n            flipped = flipped\
    \ .. char:lower()\n        elseif char:islower() then\n            flipped = flipped\
    \ .. char:upper()\n        else\n            flipped = flipped .. char\n     \
    \   end\n    end\n    return flipped\nend", "\t-- Cast to list of characters.\n\
    \tlocal charlist = strutils.strtotable(string)\n\t-- New string to hold the result.\n\
    \tlocal result = \"\"\n\t-- Loop through each character.\n\tfor i, char in ipairs(charlist)\
    \ do\n\t\t-- If character is lowercase, convert to uppercase.\n\t\tif char:match(\"\
    %l\") then\n\t\t\tresult = result .. char:upper()\n\t\t-- Elseif character is\
    \ uppercase, convert to lowercase.\n\t\telseif char:match(\"%u\") then\n\t\t\t\
    result = result .. char:lower()\n\t\t-- Else, just add the character.\n\t\telse\n\
    \t\t\tresult = result .. char\n\t\tend\n\tend\n\t-- Return the result.\n\treturn\
    \ result\nend", "  local function to_upper(s)\n    return s:upper()\n  end\n \
    \ local function to_lower(s)\n    return s:lower()\n  end\n  return string:gsub(\"\
    %a\", {\n    [\"%l\"] = to_upper,\n    [\"%u\"] = to_lower\n  })\nend", "  local\
    \ new_string = ''\n  for char in string:gmatch('.') do\n    if char:lower() ==\
    \ char then\n      new_string = new_string .. char:upper()\n    else\n      new_string\
    \ = new_string .. char:lower()\n    end\n  end\n  return new_string\nend", " \
    \ return (string:gsub(\"%a\",function(s) return s == s:lower() and s:upper() or\
    \ s:lower() end))\nend", "    local flipped = \"\"\n    for char in string:gmatch(\"\
    .\") do\n        if char:match(\"%u\") then\n            flipped = flipped ..\
    \ char:lower()\n        elseif char:match(\"%l\") then\n            flipped =\
    \ flipped .. char:upper()\n        else\n            flipped = flipped .. char\n\
    \        end\n    end\n    return flipped\nend", "  return string:gsub('(%a)',\
    \ function(char)\n    return char:lower() == char and char:upper() or char:lower()\n\
    \  end)\nend", "    local flipped = ''\n    for char in string:gmatch(\".\") do\n\
    \        if char:match(\"%u\") then\n            flipped = flipped .. char:lower()\n\
    \        elseif char:match(\"%l\") then\n            flipped = flipped .. char:upper()\n\
    \        else\n            flipped = flipped .. char\n        end\n    end\n \
    \   return flipped\nend", "  local flipped = {}\n  for i = 1, string.len(string)\
    \ do\n    local char = string.sub(string, i, i)\n    if char == char:lower() then\n\
    \      flipped[i] = char:upper()\n    else\n      flipped[i] = char:lower()\n\
    \    end\n  end\n  return table.concat(flipped)\nend", "    return string:gsub('%a',\
    \ function(char)\n        if char:find('%u') then\n            return char:lower()\n\
    \        else\n            return char:upper()\n        end\n    end)\nend", " \
    \ return (string:gsub(\"%a\", function(c) return ({[string.lower(c)] = string.upper,\
    \ [string.upper(c)] = string.lower})[c] end))\nend", "    local flipped = \"\"\
    \n    for i=1,#string do\n        local c = string:sub(i,i)\n        if c == c:lower()\
    \ then\n            flipped = flipped .. c:upper()\n        else\n           \
    \ flipped = flipped .. c:lower()\n        end\n    end\n    return flipped\nend",
  "    return string:gsub(\"%a\", function(char)\n        if char:lower() == char\
    \ then\n            return char:upper()\n        else\n            return char:lower()\n\
    \        end\n    end)\nend", "  return string:gsub(\".\", function(c)\n    if\
    \ c:match(\"%u\") then\n      return c:lower()\n    else\n      return c:upper()\n\
    \    end\n  end)\nend", "    local i = 1\n    local j = string.len(string)\n \
    \   while i <= j do\n        local a = string.sub(string, i, i)\n        local\
    \ b = string.sub(string, j, j)\n        if a == string.lower(a) then\n       \
    \     string = string.sub(string, 1, i - 1) ..\n                string.upper(a)\
    \ ..\n                string.sub(string, i + 1, j - 1) ..\n                b ..\n\
    \                string.sub(string, j + 1)\n        elseif b == string.lower(b)\
    \ then\n            string = string.sub(string, 1, i - 1) ..\n               \
    \ a ..\n                string.sub(string, i + 1, j - 1) ..\n                string.upper(b)\
    \ ..\n                string.sub(string, j + 1)\n        end\n        i = i +\
    \ 1\n        j = j - 1\n    end\n    return string\nend", "  return string:gsub(\"\
    %a\", function(c)\n    if c:lower() == c then\n      return c:upper()\n    else\n\
    \      return c:lower()\n    end\n  end)\nend", "  return string:gsub(\"%a\",\
    \ function(letter)\n    return letter == letter:lower() and letter:upper() or\
    \ letter:lower()\n  end)\nend", "    return string:gsub(\"%l\", string.upper):gsub(\"\
    %u\", string.lower)\nend", "    return string:gsub(\"%a\", function(char)\n  \
    \      if char:match(\"%u\") then\n            return char:lower()\n        else\n\
    \            return char:upper()\n        end\n    end)\nend", "  return (string:gsub(\"\
    %a\", function(c) return c:upper() == c and c:lower() or c:upper() end))\nend",
  "  if string == '' then\n    return ''\n  else\n    local head = string:sub(1, 1)\n\
    \    local tail = string:sub(2)\n    if head:lower() == head then\n      return\
    \ head:upper() .. flip_case(tail)\n    else\n      return head:lower() .. flip_case(tail)\n\
    \    end\n  end\nend", "  return (string:gsub(\".\",\n    function(ch)\n     \
    \ if ch:find(\"%l\") then\n        return ch:upper()\n      elseif ch:find(\"\
    %u\") then\n        return ch:lower()\n      else\n        return ch\n      end\n\
    \    end))\nend", "  local new_string = ''\n  for i = 1, string.len(string) do\n\
    \    local char = string.sub(string, i, i)\n    if char == char:lower() then\n\
    \      new_string = new_string .. char:upper()\n    else\n      new_string = new_string\
    \ .. char:lower()\n    end\n  end\n  return new_string\nend", "    -- Initialize\
    \ an empty string.\n    local result = ''\n    -- Loop over characters in the\
    \ string.\n    for char in string:gmatch('.') do\n        -- If the character\
    \ is uppercase, make it lowercase.\n        if char:find('%u') then\n        \
    \    char = char:lower()\n        -- If the character is lowercase, make it uppercase.\n\
    \        elseif char:find('%l') then\n            char = char:upper()\n      \
    \  end\n        -- Append the character to the result.\n        result = result\
    \ .. char\n    end\n    -- Return the result.\n    return result\nend", "    local\
    \ out_string = {}\n    for i=1, #string do\n        local c = string:sub(i,i)\n\
    \        if c:find('%l') then\n            out_string[i] = c:upper()\n       \
    \ elseif c:find('%u') then\n            out_string[i] = c:lower()\n        else\n\
    \            out_string[i] = c\n        end\n    end\n    return table.concat(out_string)\n\
    end", "    return string:gsub('%a', {\n        a = 'A',\n        b = 'B',\n  \
    \      c = 'C',\n        d = 'D',\n        e = 'E',\n        f = 'F',\n      \
    \  g = 'G',\n        h = 'H',\n        i = 'I',\n        j = 'J',\n        k =\
    \ 'K',\n        l = 'L',\n        m = 'M',\n        n = 'N',\n        o = 'O',\n\
    \        p = 'P',\n        q = 'Q',\n        r = 'R',\n        s = 'S',\n    \
    \    t = 'T',\n        u = 'U',\n        v = 'V',\n        w = 'W',\n        x\
    \ = 'X',\n        y = 'Y',\n        z = 'Z',\n        A = 'a',\n        B = 'b',\n\
    \        C = 'c',\n        D = 'd',\n        E = 'e',\n        F = 'f',\n    \
    \    G = 'g',\n        H = 'h',\n        I = 'i',\n        J = 'j',\n        K\
    \ = 'k',\n        L = 'l',\n        M = 'm',\n        N = 'n',\n        O = 'o',\n\
    \        P = 'p',\n        Q = 'q',\n        R = 'r',\n        S = 's',\n    \
    \    T = 't',\n        U = 'u',\n        V = 'v',\n        W = 'w',\n        X\
    \ = 'x',\n        Y = 'y',\n        Z = 'z',\n    })\nend", "    return string:gsub('%a',\
    \ function(letter)\n        return letter:lower() == letter and letter:upper()\
    \ or letter:lower()\n    end)\nend", "  local new_string = ''\n  for char in string:gmatch(\"\
    .\") do\n    if char:match(\"%l\") then\n      new_string = new_string .. char:upper()\n\
    \    elseif char:match(\"%u\") then\n      new_string = new_string .. char:lower()\n\
    \    else\n      new_string = new_string .. char\n    end\n  end\n  return new_string\n\
    end", "\treturn string:gsub('%a', {['%l'] = '%u', ['%u'] = '%l'})\nend", "  return\
    \ (string:gsub(\"%a\", function(char)\n           if char:match(\"%a\") then\n\
    \             return char:upper() == char and char:lower() or char:upper()\n \
    \          else\n             return char\n           end\n         end))\nend",
  "  local result = {}\n  for char in string:gmatch(\".\") do\n    if char:match(\"\
    %u\") then\n      result[#result + 1] = char:lower()\n    elseif char:match(\"\
    %l\") then\n      result[#result + 1] = char:upper()\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  return table.concat(result)\nend", "  return\
    \ string:gsub(\".\", function(c)\n    if c:lower() == c then\n      return c:upper()\n\
    \    else\n      return c:lower()\n    end\n  end)\nend\nM.flip_case = flip_case",
  "  return (string:gsub('%a', function(c) return ('%l'):format(c):upper() end))\n\
    end", "\treturn string:gsub('[%a]',function(c)\n\t\treturn c:lower() == c and\
    \ c:upper() or c:lower()\n\tend)\nend", "    local new_string = ''\n    for character\
    \ in string:gmatch('.') do\n        if character:find('%l') then\n           \
    \ new_string = new_string .. character:upper()\n        elseif character:find('%u')\
    \ then\n            new_string = new_string .. character:lower()\n        else\n\
    \            new_string = new_string .. character\n        end\n    end\n    return\
    \ new_string\nend", "  return string:gsub(\"(%a)\", {\n    [\"a\"] = \"A\",\n\
    \    [\"b\"] = \"B\",\n    [\"c\"] = \"C\",\n    [\"d\"] = \"D\",\n    [\"e\"\
    ] = \"E\",\n    [\"f\"] = \"F\",\n    [\"g\"] = \"G\",\n    [\"h\"] = \"H\",\n\
    \    [\"i\"] = \"I\",\n    [\"j\"] = \"J\",\n    [\"k\"] = \"K\",\n    [\"l\"\
    ] = \"L\",\n    [\"m\"] = \"M\",\n    [\"n\"] = \"N\",\n    [\"o\"] = \"O\",\n\
    \    [\"p\"] = \"P\",\n    [\"q\"] = \"Q\",\n    [\"r\"] = \"R\",\n    [\"s\"\
    ] = \"S\",\n    [\"t\"] = \"T\",\n    [\"u\"] = \"U\",\n    [\"v\"] = \"V\",\n\
    \    [\"w\"] = \"W\",\n    [\"x\"] = \"X\",\n    [\"y\"] = \"Y\",\n    [\"z\"\
    ] = \"Z\",\n    [\"A\"] = \"a\",\n    [\"B\"] = \"b\",\n    [\"C\"] = \"c\",\n\
    \    [\"D\"] = \"d\",\n    [\"E\"] = \"e\",\n    [\"F\"] = \"f\",\n    [\"G\"\
    ] = \"g\",\n    [\"H\"] = \"h\",\n    [\"I\"] = \"i\",\n    [\"J\"] = \"j\",\n\
    \    [\"K\"] = \"k\",\n    [\"L\"] = \"l\",\n    [\"M\"] = \"m\",\n    [\"N\"\
    ] = \"n\",\n    [\"O\"] = \"o\",\n    [\"P\"] = \"p\",\n    [\"Q\"] = \"q\",\n\
    \    [\"R\"] = \"r\",\n    [\"S\"] = \"s\",\n    [\"T\"] = \"t\",\n    [\"U\"\
    ] = \"u\",\n    [\"V\"] = \"v\",\n    [\"W\"] = \"w\",\n    [\"X\"] = \"x\",\n\
    \    [\"Y\"] = \"y\",\n    [\"Z\"] = \"z\",\n  })\nend", "    string = gsub(string,\
    \ \"%l\", string.upper)\n    string = gsub(string, \"%u\", string.lower)\n   \
    \ return string\nend", "  return string:gsub(\"%a\", function(c)\n    if c:lower()\
    \ == c then\n      return c:upper()\n    else\n      return c:lower()\n    end\n\
    \  end)\nend", "  return string:gsub(\"%a\", function(c)\n    if c:lower() ==\
    \ c then\n      return c:upper()\n    else\n      return c:lower()\n    end\n\
    \  end)\nend", "  return (string:gsub('%a', function(x) return x == x:upper()\
    \ and x:lower() or x:upper() end))\nend", "  return (string:gsub(\"%a\", {\n \
    \   [\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"] = \"D\", [\"e\"\
    ] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"] = \"H\", [\"i\"] = \"I\"\
    , [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"] = \"L\", [\"m\"] = \"M\", [\"n\"]\
    \ = \"N\", [\"o\"] = \"O\", [\"p\"] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\"\
    , [\"s\"] = \"S\", [\"t\"] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"]\
    \ = \"W\", [\"x\"] = \"X\", [\"y\"] = \"Y\", [\"z\"] = \"Z\",\n    [\"A\"] = \"\
    a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\", [\"F\"\
    ] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\", [\"J\"] = \"j\"\
    , [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\", [\"N\"] = \"n\", [\"O\"]\
    \ = \"o\", [\"P\"] = \"p\", [\"Q\"] = \"q\", [\"R\"] = \"r\", [\"S\"] = \"s\"\
    , [\"T\"] = \"t\", [\"U\"] = \"u\", [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"]\
    \ = \"x\", [\"Y\"] = \"y\", [\"Z\"] = \"z\"\n  }))\nend", "  return string:gsub('[%a]',\
    \ function(letter)\n    return letter:upper() == letter and letter:lower() or\
    \ letter:upper()\n  end)\nend", "    local t = {}\n    for c in string:gmatch\"\
    .\" do\n        t[#t+1] = (string.match(c, \"%l\") and string.upper(c) or string.lower(c))\n\
    \    end\n    return table.concat(t)\nend", "    return string:gsub('%a', function(char)\n\
    \        if char:lower() == char then\n            return char:upper()\n     \
    \   else\n            return char:lower()\n        end\n    end)\nend", "  return\
    \ string:gsub(\"%a\", {\n    [string.lower(string)] = string.upper,\n    [string.upper(string)]\
    \ = string.lower\n  })\nend", "    return string:gsub(\"%a\", {\n        [\"A\"\
    ] = \"a\", [\"B\"] = \"b\", [\"C\"] = \"c\", [\"D\"] = \"d\", [\"E\"] = \"e\"\
    ,\n        [\"F\"] = \"f\", [\"G\"] = \"g\", [\"H\"] = \"h\", [\"I\"] = \"i\"\
    , [\"J\"] = \"j\",\n        [\"K\"] = \"k\", [\"L\"] = \"l\", [\"M\"] = \"m\"\
    , [\"N\"] = \"n\", [\"O\"] = \"o\",\n        [\"P\"] = \"p\", [\"Q\"] = \"q\"\
    , [\"R\"] = \"r\", [\"S\"] = \"s\", [\"T\"] = \"t\",\n        [\"U\"] = \"u\"\
    , [\"V\"] = \"v\", [\"W\"] = \"w\", [\"X\"] = \"x\", [\"Y\"] = \"y\",\n      \
    \  [\"Z\"] = \"z\", [\"a\"] = \"A\", [\"b\"] = \"B\", [\"c\"] = \"C\", [\"d\"\
    ] = \"D\",\n        [\"e\"] = \"E\", [\"f\"] = \"F\", [\"g\"] = \"G\", [\"h\"\
    ] = \"H\", [\"i\"] = \"I\",\n        [\"j\"] = \"J\", [\"k\"] = \"K\", [\"l\"\
    ] = \"L\", [\"m\"] = \"M\", [\"n\"] = \"N\",\n        [\"o\"] = \"O\", [\"p\"\
    ] = \"P\", [\"q\"] = \"Q\", [\"r\"] = \"R\", [\"s\"] = \"S\",\n        [\"t\"\
    ] = \"T\", [\"u\"] = \"U\", [\"v\"] = \"V\", [\"w\"] = \"W\", [\"x\"] = \"X\"\
    ,\n        [\"y\"] = \"Y\", [\"z\"] = \"Z\",\n    })\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
