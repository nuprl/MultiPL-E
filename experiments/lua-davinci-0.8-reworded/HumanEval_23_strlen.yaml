name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if string == nil then\n        error(\"strlen: argument is nil\"\
    )\n    end\n    return #string\nend", "    local len = 0\n    while string[len\
    \ + 1] do\n        len = len + 1\n    end\n    return len\nend", "    local len\
    \ = 0\n    local i = 1\n    while string[i] do\n        len = len + 1\n      \
    \  i = i + 1\n    end\n    return len\nend", "    -- This is the purpose for this\
    \ library.\n    -- Use the _len() function that is part of string.format()\n \
    \   -- and return the result.\n    return _len(string)\nend", "    local result\
    \ = 0\n    while string:sub(result + 1, result + 1) ~= '' do\n        result =\
    \ result + 1\n    end\n    return result\nend", "  return #string\nend", "   \
    \ return #string\nend", "  if string == nil then\n    return 0\n  end\n  return\
    \ string.len(string)\nend", "  local _, length = string:gsub(\"[^\\128-\\193]\"\
    , \"\")\n  return length\nend", "  return #string\nend", "    local length = 0\n\
    \    for i = 1, #string do\n        length = length + 1\n    end\n    return length\n\
    end", "    return string.len(string)\nend", "    local _, length = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n    return length\nend", "  local _, length = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n  return length\nend", "    -- TODO\nend", "  return\
    \ #string\nend", "    return #string\nend", "    return #string\nend", "  return\
    \ #string\nend", "  local _, length = string:gsub(\"[^\\128-\\193]\", \"\")\n\
    \  return length\nend", "    return #string\nend", "    local count = 0\n    for\
    \ _ in string:gmatch('.') do\n        count = count + 1\n    end\n    return count\n\
    end", "    -- find the end of the string\n    local _, count = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n    return count\nend", "    return string.len(string)\n\
    end", "  local count = 0\n  for i in string:gmatch('[%z\\1-\\127\\194-\\244][\\\
    128-\\191]*') do\n    count = count + 1\n  end\n  return count\nend", "  return\
    \ #string\nend", "  return #string\nend", "  local _, length = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n  return length\nend", "    return #string\nend", " \
    \ local i = 0\n  for _ in string:gmatch('.') do\n    i = i + 1\n  end\n  return\
    \ i\nend", "    local _, len = string:gsub(\"[^\\128-\\193]\", \"\")\n    return\
    \ len\nend", "  local length = 0\n  while string[length + 1] do\n    length =\
    \ length + 1\n  end\n  return length\nend", "  return #string\nend", "    return\
    \ #string\nend", "    local _, length = string:gsub('[^\\128-\\193]', '')\n  \
    \  return length\nend", "    local i = 0\n    while string[i] do\n        i =\
    \ i + 1\n    end\n    return i\nend", "    local _, len = string:gsub('[^\\128-\\\
    193]', '')\n    return len\nend", "  return #string\nend", "  local len = 0\n\
    \  for i = 1, #string do\n    len = len + 1\n  end\n  return len\nend", "  local\
    \ i = 0\n  while string:byte(i) do\n    i = i + 1\n  end\n  return i\nend", " \
    \ return string:len()\nend", "  return string:len()\nend\nM.strlen = strlen",
  "    local i = 0\n    for _ in string:gmatch('') do\n        i = i + 1\n    end\n\
    \    return i\nend", "  return string.len(string)\nend", "  local len = 0\n  for\
    \ _ in string:gmatch(\".\") do\n    len = len + 1\n  end\n  return len\nend",
  "  return #string\nend", "    local length = 0\n    for c in string:gmatch('.')\
    \ do\n        length = length + 1\n    end\n    return length\nend", "  return\
    \ string:len()\nend", "    return string.len(string)\nend", "    return #string\n\
    end", "    return #string\nend", "    return #string\nend", "    if type(string)\
    \ ~= 'string' then\n        error('strlen only accepts strings')\n    end\n  \
    \  local len = #string\n    if len > 0 then\n        len = len - 1\n    end\n\
    \    return len\nend", "  return #string\nend", "    return #string\nend", " \
    \ return select(2, string:gsub('()', ''))\nend", "  return string.len(string)\n\
    end", "  return #string\nend", "  local len = 0\n  for _ in string:gmatch('.')\
    \ do\n    len = len + 1\n  end\n  return len\nend", "  local length = 0\n  while\
    \ string ~= '' do\n    length = length + 1\n    string = string.sub(string, 2)\n\
    \  end\n  return length\nend", "    local _, length = string:gsub(\"[^\\128-\\\
    193]\", \"\")\n    return length\nend", "    local i = 0\n    for _ in string:gmatch('.')\
    \ do\n        i = i + 1\n    end\n    return i\nend", "    return string.len(string)\n\
    end", "    local _, length = string:gsub('[^\\128-\\193]', '')\n    return length\n\
    end", "    return string.len(string)\nend", "    return string.len(string)\nend",
  "    return #string\nend", "  return string:len()\nend", "    local len = 0\n  \
    \  for i = 1, #string do\n        len = len + 1\n    end\n    return len\nend",
  "    return string.len(string)\nend", "    return #string\nend", "    return #string\n\
    end", "  local _, count = string:gsub(\".\", \"\")\n  return count\nend", "  \
    \  return str2num(pipecmd(string.format([[\n            sh -c '\n            \
    \    printf %d \"${#1}\"\n            ' _ \"${1}\"\n        ]], escape(string))))\n\
    end", "    return #string\nend", "    return #string\nend", "    return #string\n\
    end", "  if (string == nil) then\n    return nil\n  end\n  local result = 0\n\
    \  for i = 1, string:len() do\n    result = result + 1\n  end\n  return result\n\
    end", "  local length = 0\n  local pointer = ffi.cast('const char*', string)\n\
    \  while pointer[length] ~= 0 do\n    length = length + 1\n  end\n  return length\n\
    end", "  return #string\nend", "  if string == nil then return 0 end\n  return\
    \ #string\nend", "  return #string\nend", "    return #string\nend", "    local\
    \ _, count = string:gsub(\"[^\\128-\\193]\", \"\")\n    return count\nend", " \
    \ return #string\nend", "  local end_pos, _ = string:find('[%z\\1-\\127]*$')\n\
    \  return end_pos or 0\nend", "    return #string\nend", "    return #string\n\
    end", "    local length = 0\n    for _ in string:gmatch(\"[^\\128-\\193]\") do\n\
    \        length = length + 1\n    end\n    return length\nend", "    return #string\n\
    end", "    local len = 0\n    for _ in string:gmatch('') do\n        len = len\
    \ + 1\n    end\n    return len\nend", "    return #string\nend", "    local _,\
    \ len = string:gsub('[^\\128-\\193]', '')\n    return len\nend", "  if not string\
    \ then return nil end\n  return #string\nend", "  return string.len(string)\n\
    end", "  return #string\nend", "    local len = 0\n    for i = 1, #string do\n\
    \        len = len + 1\n    end\n    return len\nend", "    local _, length =\
    \ string:gsub('[^\\128-\\193]', '')\n    return length\nend", "  local _, length\
    \ = string:gsub(\"[^\\128-\\193]\", \"\")\n  return length\nend", "  return table.getn(strsplit(string,\
    \ ''))\nend", "  return string.len(string)\nend", "  return #string\nend", " \
    \ return string:len()\nend", "  local i = 0\n  for _ in string:gmatch(\".\") do\n\
    \    i = i + 1\n  end\n  return i\nend", "    local _, count = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n    return count\nend", "    local _, len = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n    return len\nend", "    if string == nil then\n  \
    \      return nil\n    end\n    return #string\nend", "    return #string\nend",
  "    return string:len()\nend", "  return #string\nend", "  local _, length = string:gsub('[^\\\
    128-\\193]', '')\n  return length\nend", "  -- Iterate over string and count characters\
    \ until end\n  local i = 0\n  while string[i + 1] do\n    i = i + 1\n  end\n \
    \ return i\nend", "    return #string\nend", "  return #string\nend", "    return\
    \ string:len()\nend", "  local length = 0\n  for i = 1, string.len(string) do\n\
    \    length = length + 1\n  end\n  return length\nend", "  local count = 0\n \
    \ for i in string:gmatch('.') do\n    count = count + 1\n  end\n  return count\n\
    end", "    local _, length = string:gsub('[^\\128-\\193]', '')\n    return length\n\
    end", "  return #string\nend", "    local _, count = string:gsub(\"[^\\128-\\\
    193]\", \"\")\n    return count\nend", "  local length = 0\n  for i = 1, #string\
    \ do\n    length = length + 1\n  end\n  return length\nend", "    local _, count\
    \ = string:gsub(\"[^\\128-\\193]\", \"\")\n    return count\nend", "    return\
    \ string.len(string)\nend", "  return #string\nend", "  local _, length = string:gsub('[^\\\
    128-\\193]', '')\n  return length\nend", "    local i = 0\n    for _ in string:gmatch('.')\
    \ do\n        i = i + 1\n    end\n    return i\nend", "  return #string\nend",
  "  return #string\nend", "  -- string.len is faster than # in this case\n  return\
    \ string.len(string)\nend", "  return #string\nend", "    local num = 0\n    while\
    \ string:len() > 0 do\n        string = string:sub(2)\n        num = num + 1\n\
    \    end\n    return num\nend", "  return tonumber(string.len(string))\nend",
  "  return utf8.len(string)\nend", "    local _, length = string:gsub('[^\\128-\\\
    193]', '')\n    return length\nend", "  local l = 0\n  local n = 1\n  while n\
    \ <= #string do\n    l = l + 1\n    n = n + 1\n  end\n  return l\nend", "    return\
    \ #string\nend", "    return string.len(string)\nend", "  return #string\nend",
  "    return string:len()\nend", "  return #string\nend", "    local len = 0\n  \
    \  for i = 1, #string do\n        len = len + 1\n    end\n    return len\nend",
  "  return #string\nend", "  return string:len()\nend", "    -- If string is nil,\
    \ return 0\n    if not string then\n        return 0\n    end", "  local length\
    \ = 0\n  for i in string:gmatch('[%z\\1-\\127\\194-\\244][\\128-\\191]*') do\n\
    \    length = length + 1\n  end\n  return length\nend", "  local pos = 0\n  while\
    \ true do\n    local byte = string:byte(pos + 1)\n    if not byte then\n     \
    \ break\n    end\n    pos = pos + 1\n  end\n  return pos\nend", "    return #string\n\
    end", "  return #string\nend", "  return #string\nend", "    return #string\n\
    end", "    return #string\nend", "    return #string\nend", "  return #string\n\
    end", "    local str = string\n    local len = 0\n    while (str ~= '') do\n \
    \       len = len + 1\n        str = str.sub(str, 2)\n    end\n    return len\n\
    end", "    -- Unicode aware string length\n    --\n    -- This function uses either\
    \ #operator or a pattern to return the string length in UTF-8.\n    --\n    --\
    \ @param   string  string  A UTF-8 encoded string\n    -- @return  number    \
    \     The number of characters in the given string\n    local left = string.match(string,\
    \ '^.*()')\n    return left - 1\nend", "    local i = 0\n    while string[i] do\n\
    \        i = i + 1\n    end\n    return i\nend", "  local n = 0\n  for _ in string:gmatch\"\
    .\" do\n    n = n + 1\n  end\n  return n\nend", "  return #string\nend", "   \
    \ return string:len()\nend", "    local _, length = string:gsub(\"[^\\128-\\193]\"\
    , \"\")\n    return length\nend", "    return #string\nend", "  local count =\
    \ 0\n  for _ in string:gmatch('.') do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  local len = 0\n  for i = 1, #string do\n    len = len + 1\n\
    \  end\n  return len\nend", "  return #string\nend", "  return #string\nend",
  "    local len = 0\n    for _ in string:gmatch(\"[^\\128-\\193]\") do\n        len\
    \ = len + 1\n    end\n    return len\nend", "    if string == nil then\n     \
    \   return 0\n    end\n    return #string\nend", "  if string == nil then return\
    \ nil end\n  return string.len(string)\nend", "    local _, length = string:gsub(\"\
    [^\\128-\\193]\", \"\")\n    return length\nend", "    return #string\nend", " \
    \ local length = 0\n  while string ~= '' do\n    length = length + 1\n    string\
    \ = string.sub(string, 2)\n  end\n  return length\nend", "  local i = 0\n  for\
    \ _ in string:gmatch('.') do\n    i = i + 1\n  end\n  return i\nend", "    return\
    \ string:len()\nend", "  return #string\nend", "  local _, length = string:gsub('[^\\\
    128-\\193]', '')\n  return length\nend", "    return #string\nend", "  local _,\
    \ length = string:gsub('[^\\128-\\193]', '')\n  return length\nend", "  return\
    \ #string\nend", "    local i = 0\n    while string[i + 1] do\n        i = i +\
    \ 1\n    end\n    return i\nend", "  local start = 1\n  local last = #string +\
    \ 1\n  return #string\nend", "    return #string\nend", "  return #string\nend",
  "    return string:len()\nend", "    local len = 0\n    for _ in string:gmatch('.')\
    \ do\n        len = len + 1\n    end\n    return len\nend", "  return string:len()\n\
    end", "  if not string then return 0 end\n  local _, count = string:gsub(\"[^\\\
    128-\\193]\", \"\")\n  return count\nend", "    return #string\nend", "  return\
    \ #string\nend", "    return string.len(string)\nend", "    local len = 0\n  \
    \  for _ in string:gmatch(\".\") do\n        len = len + 1\n    end\n    return\
    \ len\nend", "    local i = 0\n    while string[i] do\n        i = i + 1\n   \
    \ end\n    return i\nend", "  return string.len(string)\nend", "  return #string\n\
    end", "    return #string\nend", "    local index = 1\n    while string[index]\
    \ do\n        index = index + 1\n    end\n    return index - 1\nend", "  return\
    \ #string\nend", "    local bytes = 0\n    for i=1,#string do\n        local c\
    \ = string:sub(i,i)\n        local n = string.byte(c)\n        if n <= 0x7f then\n\
    \            bytes = bytes + 1\n        elseif n <= 0x7ff then\n            bytes\
    \ = bytes + 2\n        elseif n <= 0xffff then\n            bytes = bytes + 3\n\
    \        else\n            bytes = bytes + 4\n        end\n    end\n    return\
    \ bytes\nend", "    local pos = 0\n    while string[pos + 1] do\n        pos =\
    \ pos + 1\n    end\n    return pos\nend", "    return string:len()\nend\nM.strlen\
    \ = strlen", "    local length = 0\n    for _ in string:gmatch(\"[^\\128-\\193]\"\
    ) do\n        length = length + 1\n    end\n    return length\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
