name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return a table of the words.\n\
  -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
  \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
  \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local words = {}\n   for w in s:gmatch('%S+') do\n      words[#words+1]\
    \ = w\n   end\n   return words\nend", "\tlocal t = {}\n\tfor w in s:gmatch('%w+')\
    \ do\n\t\tt[#t+1] = w\n\tend\n\treturn t\nend", "    local ret = {}\n    for match\
    \ in string.gmatch(s, '([^,%s]+)') do\n        table.insert(ret, match)\n    end\n\
    \    return ret\nend", "  return setmetatable(split(s, '%s*,%s*'), nil)\nend",
  "\tlocal words = {}\n\tfor word in string.gmatch(s, '[^,%s]+') do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend", "  local t = {}\n  local c = 1\n  local\
    \ function f(s)\n    while s:sub(c, c) == ' ' do\n      c = c + 1\n    end\n \
    \   local match = s:match('(.-),', c)\n    if match then\n      t[#t + 1] = match\n\
    \      c = c + #match + 1\n      return f(s)\n    else\n      t[#t + 1] = s:sub(c)\n\
    \      return t\n    end\n  end\n  return f(s)\nend", "  local l = {}\n  local\
    \ s = s:gsub('%s*,%s*', ',')\n  for w in s:gmatch('([^,]+)') do\n    l[#l+1] =\
    \ w\n  end\n  return l\nend", "    local words = {}\n    local pattern = string.format('([^%s]+)',\
    \ '%s,;')\n    for word in string.gmatch(s, pattern) do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "\tlocal t = {}\n\tlocal w = \"\"\n\t\
    for i = 1, #s do\n\t\tlocal char = string.sub(s, i, i)\n\t\tif char == \" \" or\
    \ char == \",\" then\n\t\t\tif #w > 0 then\n\t\t\t\ttable.insert(t, w)\n\t\t\t\
    \tw = \"\"\n\t\t\tend\n\t\telse\n\t\t\tw = w .. char\n\t\tend\n\tend\n\tif #w\
    \ > 0 then\n\t\ttable.insert(t, w)\n\tend\n\treturn t\nend", "   return string.split(s,\
    \ ' ')\nend", "    local words = {}\n    for word in s:gmatch('%w+') do\n    \
    \    table.insert(words, word)\n    end\n    return words\nend", "  local words\
    \ = {}\n  for word in s:gmatch('%S+') do table.insert(words, word) end\n  return\
    \ words\nend", "    local words = {}\n    for word in s:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    return words\nend", "    s = s ..\
    \ \",\"\n    local words = {}\n    for word in s:gmatch(\"([^,]*),\") do\n   \
    \     table.insert(words, word)\n    end\n    return words\nend", "\tlocal t =\
    \ {}\n\ts:gsub(\"%S+\", function(v) t[#t+1] = v end)\n\treturn t\nend", "    local\
    \ words = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "\tlocal words = {}\n\tfor w in s:gmatch('[^,%s]+')\
    \ do\n\t\ttable.insert(words, w)\n\tend\n\treturn words\nend", "    local words\
    \ = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    return lpeg.split(lpeg.S(', '),\
    \ s)\nend", "    local words = {}\n    local pos = 1\n    local ind = string.find(s,\
    \ '%s', pos)\n    while ind do\n        local word = string.sub(s, pos, ind -\
    \ 1)\n        table.insert(words, word)\n        pos = ind + 1\n        ind =\
    \ string.find(s, '%s', pos)\n    end\n    if pos <= #s then\n        table.insert(words,\
    \ string.sub(s, pos))\n    end\n    return words\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
