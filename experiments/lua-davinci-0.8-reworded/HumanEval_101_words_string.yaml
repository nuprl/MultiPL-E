name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return a table of the words.\n\
  -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
  \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
  \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["   local words = {}\n   for w in s:gmatch('%S+') do\n      words[#words+1]\
    \ = w\n   end\n   return words\nend", "\tlocal t = {}\n\tfor w in s:gmatch('%w+')\
    \ do\n\t\tt[#t+1] = w\n\tend\n\treturn t\nend", "    local ret = {}\n    for match\
    \ in string.gmatch(s, '([^,%s]+)') do\n        table.insert(ret, match)\n    end\n\
    \    return ret\nend", "  return setmetatable(split(s, '%s*,%s*'), nil)\nend",
  "\tlocal words = {}\n\tfor word in string.gmatch(s, '[^,%s]+') do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn words\nend", "  local t = {}\n  local c = 1\n  local\
    \ function f(s)\n    while s:sub(c, c) == ' ' do\n      c = c + 1\n    end\n \
    \   local match = s:match('(.-),', c)\n    if match then\n      t[#t + 1] = match\n\
    \      c = c + #match + 1\n      return f(s)\n    else\n      t[#t + 1] = s:sub(c)\n\
    \      return t\n    end\n  end\n  return f(s)\nend", "  local l = {}\n  local\
    \ s = s:gsub('%s*,%s*', ',')\n  for w in s:gmatch('([^,]+)') do\n    l[#l+1] =\
    \ w\n  end\n  return l\nend", "    local words = {}\n    local pattern = string.format('([^%s]+)',\
    \ '%s,;')\n    for word in string.gmatch(s, pattern) do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "\tlocal t = {}\n\tlocal w = \"\"\n\t\
    for i = 1, #s do\n\t\tlocal char = string.sub(s, i, i)\n\t\tif char == \" \" or\
    \ char == \",\" then\n\t\t\tif #w > 0 then\n\t\t\t\ttable.insert(t, w)\n\t\t\t\
    \tw = \"\"\n\t\t\tend\n\t\telse\n\t\t\tw = w .. char\n\t\tend\n\tend\n\tif #w\
    \ > 0 then\n\t\ttable.insert(t, w)\n\tend\n\treturn t\nend", "   return string.split(s,\
    \ ' ')\nend", "    local words = {}\n    for word in s:gmatch('%w+') do\n    \
    \    table.insert(words, word)\n    end\n    return words\nend", "  local words\
    \ = {}\n  for word in s:gmatch('%S+') do table.insert(words, word) end\n  return\
    \ words\nend", "    local words = {}\n    for word in s:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    return words\nend", "    s = s ..\
    \ \",\"\n    local words = {}\n    for word in s:gmatch(\"([^,]*),\") do\n   \
    \     table.insert(words, word)\n    end\n    return words\nend", "\tlocal t =\
    \ {}\n\ts:gsub(\"%S+\", function(v) t[#t+1] = v end)\n\treturn t\nend", "    local\
    \ words = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "\tlocal words = {}\n\tfor w in s:gmatch('[^,%s]+')\
    \ do\n\t\ttable.insert(words, w)\n\tend\n\treturn words\nend", "    local words\
    \ = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    return lpeg.split(lpeg.S(', '),\
    \ s)\nend", "    local words = {}\n    local pos = 1\n    local ind = string.find(s,\
    \ '%s', pos)\n    while ind do\n        local word = string.sub(s, pos, ind -\
    \ 1)\n        table.insert(words, word)\n        pos = ind + 1\n        ind =\
    \ string.find(s, '%s', pos)\n    end\n    if pos <= #s then\n        table.insert(words,\
    \ string.sub(s, pos))\n    end\n    return words\nend", "\tlocal words = {}\n\t\
    for word in s:gmatch('[^,%s]+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn\
    \ words\nend", "\ts = s:gsub('%s*$', '')\n\ts = s:gsub('%s+', ' ')\n\ts = s:gsub('([^,])%s+([^,])',\
    \ '%1,%2')\n\ts = s:gsub('([^,])%s+([^,])', '%1,%2')\n\treturn { lua:split(s,\
    \ ',') }\nend", "  local t = {}\n  for word in s:gmatch('%w+') do\n    t[#t+1]\
    \ = word\n  end\n  return t\nend", "  local words = {}\n  for word in string.gmatch(s,\
    \ '%w+') do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = {}\n  for word in string.gmatch(s, '%S+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "\tif s == nil then return {} end\n\tlocal\
    \ function t(s)\n\t\tlocal w = {}\n\t\tlocal k = 1\n\t\tfor v in string.gmatch(s,\
    \ '([^%s,]+)') do\n\t\t\tw[k] = v\n\t\t\tk = k + 1\n\t\tend\n\t\treturn w\n\t\
    end\n\treturn t(s)\nend", "  local res = {}\n  for word in string.gmatch(s, '%w+')\
    \ do\n    table.insert(res, word)\n  end\n  return res\nend", "    if s == nil\
    \ then\n        error('Unable to parse a nil string')\n    end\n    local words\
    \ = {}\n    for w in string.gmatch(s, '%S+') do\n        table.insert(words, w)\n\
    \    end\n    return words\nend", "   local words = {}\n   for word in s:gmatch('[^,%s]+')\
    \ do\n      table.insert(words, word)\n   end\n   return words\nend", "    local\
    \ words = {}\n    for word in string.gmatch(s, \"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    local t = {}\n    for w in string.gmatch(s,\
    \ '%w+') do\n        table.insert(t, w)\n    end\n    return t\nend", "    local\
    \ words = {}\n    local temp = ''\n    for i = 1, #s do\n        if s:sub(i, i)\
    \ == ' ' or s:sub(i, i) == ',' then\n            if temp ~= '' then\n        \
    \        table.insert(words, temp)\n                temp = ''\n            end\n\
    \        else\n            temp = temp .. s:sub(i, i)\n        end\n    end\n\
    \    if temp ~= '' then\n        table.insert(words, temp)\n    end\n    return\
    \ words\nend", "    local t = {}\n    for word in s:gmatch('%w+') do\n       \
    \ table.insert(t, word)\n    end\n    return t\nend", "    local words = {}\n\
    \    for word in string.gmatch(s, '%S+') do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "   local t = {}\n   for w in s:gmatch('%S+')\
    \ do\n      t[#t+1] = w\n   end\n   return t\nend", "\tlocal words = {}\n\tfor\
    \ word in s:gmatch('%S+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end", "  return split_string(s, '%s*[, ]%s*')\nend", "    local words = {}\n \
    \   for word in s:gmatch('%S+') do\n        table.insert(words, word)\n    end\n\
    \    return words\nend", "   local t = {}\n   for word in s:gmatch('[^,%s]+')\
    \ do\n      t[#t+1] = word\n   end\n   return t\nend", "    local words = {}\n\
    \    for w in s:gmatch('%S+') do\n        table.insert(words, w)\n    end\n  \
    \  return words\nend", "    local words = {}\n    for word in s:gmatch('%S+')\
    \ do\n        table.insert(words, word)\n    end\n    return words\nend", "  \
    \  if s == nil then\n        return {}\n    end\n    local t = {}\n    for w in\
    \ string.gmatch(s, '([^,%s]+)') do\n        table.insert(t, w)\n    end\n    return\
    \ t\nend", "    return {}\nend", "  local words = {}\n  for word in s:gmatch('%S+')\
    \ do\n    table.insert(words, word)\n  end\n  return words\nend", "    local t\
    \ = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t, word)\n  \
    \  end\n    return t\nend", "\tlocal words = {}\n\tlocal i = 1\n\tfor word in\
    \ s:gmatch('%w+') do\n\t\twords[i] = word\n\t\ti = i + 1\n\tend\n\treturn words\n\
    end", "   local words = {}\n   for word in s:gmatch('[^%s,]+') do\n      words[#words\
    \ + 1] = word\n   end\n   return words\nend", "    local t = {}\n    if s ~= nil\
    \ then\n        for word in s:gmatch(\"%S+\") do\n            t[#t+1] = word\n\
    \        end\n    end\n    return t\nend", "    return {}\nend", "\treturn split(s,\
    \ '%s*[,%s]%s*')\nend", "\tif type(s) ~= 'string' then return end\n\tlocal words\
    \ = {}\n\tfor word in s:gmatch('[^%s]+') do\n\t\ttable.insert(words, word)\n\t\
    end\n\treturn words\nend", "  local words = {}\n  for word in s:gmatch('[^,%s]+')\
    \ do\n    words[#words + 1] = word\n  end\n  return words\nend", "\tlocal words\
    \ = {}\n\tfor word in string.gmatch(s, \"%w+\") do\n\t\ttable.insert(words, word)\n\
    \tend\n\treturn words\nend", "  local words = {}\n  for word in s:gmatch('%w+')\
    \ do\n    words[#words + 1] = word\n  end\n  return words\nend", "  assert(type(s)\
    \ == 'string')\n  local words = {}\n  for word in s:gmatch('%w+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local t = {}\n    local i = 1\n   \
    \ local word\n    repeat\n        word, i = str_next_word(s, i)\n        if word\
    \ then t[#t+1] = word end\n    until not word\n    return t\nend", "    return\
    \ split(s, \"[, ]+\")\nend", "\tlocal str = s\n\tlocal words = {}\n\tfor word\
    \ in str:gmatch(\"%w+\") do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end", "    local strs = {}\n    local word = ''\n    for i = 1, #s do\n      \
    \  if s:sub(i, i) == ' ' or s:sub(i, i) == ',' then\n            if word ~= ''\
    \ then\n                table.insert(strs, word)\n                word = ''\n\
    \            end\n        else\n            word = word .. s:sub(i, i)\n     \
    \   end\n    end\n    if word ~= '' then\n        table.insert(strs, word)\n \
    \   end\n    return strs\nend", "  local t = {}\n  for m in s:gmatch('[^,%s]+')\
    \ do\n    t[#t+1] = m\n  end\n  return t\nend", "    return {}\nend", "    local\
    \ t = {}\n    for w in s:gmatch('[^,%s]+') do\n        t[#t+1] = w\n    end\n\
    \    return t\nend", "    local words = {}\n    for word in string.gmatch(s, '%S+')\
    \ do\n        table.insert(words, word)\n    end\n    return words\nend", "  \
    \  local t = {}\n    for w in string.gmatch(s, '%w+') do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend", "  local t = {}\n  for w in s:gmatch('[^%s,]+')\
    \ do\n    t[#t+1] = w\n  end\n  return t\nend", "    local words = {}\n    for\
    \ word in s:gmatch('%w+') do\n        table.insert(words, word)\n    end\n   \
    \ return words\nend", "    local words = {}\n    for word in s:gmatch('[^,%s]+')\
    \ do\n        table.insert(words, word)\n    end\n    return words\nend", "  local\
    \ words = {}\n  for w in string.gmatch(s, '%g+') do\n    table.insert(words, w)\n\
    \  end\n  return words\nend", "    local words = {}\n    for str in string.gmatch(s,\
    \ '([^,%s]+)') do\n        table.insert(words, str)\n    end\n    return words\n\
    end", "\tlocal result = {}\n\tfor v in s:gmatch('%S+') do\n\t\ttable.insert(result,\
    \ v)\n\tend\n\treturn result\nend", "    local t = {}\n    for word in s:gmatch('[^,%s]+')\
    \ do\n        table.insert(t, word)\n    end\n    return t\nend", "    local words\
    \ = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words, word)\n\
    \    end\n    return words\nend", "    local t = {}\n    for w in s:gmatch('%S+')\
    \ do\n        t[#t+1] = w\n    end\n    return t\nend", "    local words = {}\n\
    \    for word in s:gmatch('%w+') do\n        table.insert(words, word)\n    end\n\
    \    return words\nend", "  local t = {}\n  s:gsub('[^, ]+', function(x) table.insert(t,\
    \ x) end)\n  return t\nend", "    local words = {}\n    for word in string.gmatch(s,\
    \ '%w+') do\n        table.insert(words, word)\n    end\n    return words\nend",
  "    return string.split(s, '%s*[, ]%s*')\nend", "    local ret = {}\n    for word\
    \ in s:gmatch('%w+') do\n        table.insert(ret, word)\n    end\n    return\
    \ ret\nend", "  local words = {}\n  for word in s:gmatch('%w+') do\n    words[#words\
    \ + 1] = word\n  end\n  return words\nend", "  return {}\nend", "  if s:len()\
    \ == 0 then\n    return {}\n  end\n  return split(s, \",%s\")\nend", "    if not\
    \ s then return {} end\n    local t = {}\n    for word in s:gmatch('[^,%s]+')\
    \ do\n        table.insert(t, word)\n    end\n    return t\nend", "    local words\
    \ = {}\n    for w in s:gmatch('[^,%s]+') do\n        table.insert(words, w)\n\
    \    end\n    return words\nend", "  return strsplit(', ', s)\nend", "    local\
    \ words = {}\n    for word in s:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    local words = {}\n    for word\
    \ in string.gmatch(s, '%w+') do\n        table.insert(words, word)\n    end\n\
    \    return words\nend", "    return string_words(s)\nend", "    local t = {}\n\
    \    for s in s:gmatch('%S+') do\n        table.insert(t, s)\n    end\n    return\
    \ t\nend", "\tlocal ret = {}\n\tfor word in s:gmatch('[^%s,]+') do\n\t\ttable.insert(ret,\
    \ word)\n\tend\n\treturn ret\nend", "    local words = {}\n    for word in string.gmatch(s,\
    \ '%S+') do\n        table.insert(words, word)\n    end\n    return words\nend",
  "  -- Table to store the words\n  local words = {}\n  -- The current word (what\
    \ we're currently parsing)\n  local word = ''\n  -- The current character\n  local\
    \ ch = ''\n  -- The next character\n  local next_ch = ''\n  -- The index of the\
    \ character\n  local i = 1\n  -- Do we need to skip a space?\n  local skip_space\
    \ = false\n  -- The length of the string\n  local length = string.len(s)\n  while\
    \ i <= length do\n    -- Get the current character\n    ch = string.sub(s, i,\
    \ i)\n    -- Get the next character\n    next_ch = string.sub(s, i + 1, i + 1)\n\
    \    -- If the current character is a space, and we don't need to skip the space,\n\
    \    -- then\n    if ch == ' ' and not skip_space then\n      -- Add the current\
    \ word to the list of words\n      table.insert(words, word)\n      -- Clear the\
    \ current word\n      word = ''\n      -- Otherwise if the current character is\
    \ a comma or a space and we need to\n      -- skip a space\n    elseif (ch ==\
    \ ',' or ch == ' ') and skip_space then\n      -- Then, we don't need to skip\
    \ a space any more\n      skip_space = false\n      -- If the current character\
    \ is a comma and the next character is a space,\n      -- then we need to skip\
    \ a space\n    elseif ch == ',' and next_ch == ' ' then\n      skip_space = true\n\
    \      -- Otherwise, add the current character to the current word\n    else\n\
    \      word = word .. ch\n    end\n    -- Increment the index\n    i = i + 1\n\
    \  end\n  -- If the current word is not empty, then add it to the list of words\n\
    \  if word ~= '' then\n    table.insert(words, word)\n  end\n  -- Return the list\
    \ of words\n  return words\nend", "    local words = {}\n    for word in s:gmatch('[^,%s]+')\
    \ do\n        table.insert(words, word)\n    end\n    return words\nend", "  \
    \  local result = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(result,\
    \ word)\n    end\n    return result\nend", "    -- your code here\n    return\
    \ {}\nend", "    local words = {}\n    local word = ''\n    local is_word = false\n\
    \    for i = 1, #s do\n        local b = s:sub(i, i)\n        if is_word then\n\
    \            if b == ' ' or b == ',' then\n                table.insert(words,\
    \ word)\n                word = ''\n                is_word = false\n        \
    \    else\n                word = word .. b\n            end\n        else\n \
    \           if b ~= ' ' and b ~= ',' then\n                word = word .. b\n\
    \                is_word = true\n            end\n        end\n    end\n    if\
    \ is_word then\n        table.insert(words, word)\n    end\n    return words\n\
    end", "    local words = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    local t = {}\n    local i = 1\n\
    \    while i < #s do\n        local b, e = s:find('%w+', i)\n        if b then\n\
    \            t[#t + 1] = s:sub(b, e)\n            i = e + 1\n        else\n  \
    \          break\n        end\n    end\n    return t\nend", "  local words = {}\n\
    \  for w in string.gmatch(s, '%g+') do\n    table.insert(words, w)\n  end\n  return\
    \ words\nend", "    local t = {}\n    for w in s:gmatch('%w+') do\n        t[#t+1]\
    \ = w\n    end\n    return t\nend", "  local tokens = {}\n  for token in s:gmatch('%w+')\
    \ do\n    table.insert(tokens, token)\n  end\n  return tokens\nend", "  local\
    \ result = {}\n  for w in string.gmatch(s, \"%w+\") do\n    table.insert(result,\
    \ w)\n  end\n  return result\nend", "  local words = {}\n  for w in string.gmatch(s,\
    \ '%w+') do\n    table.insert(words, w)\n  end\n  return words\nend", "    local\
    \ t = {}\n    for w in s:gmatch('%S+') do\n        t[#t+1] = w\n    end\n    return\
    \ t\nend", "    local t = {}\n    for word in s:gmatch('%w+') do\n        table.insert(t,\
    \ word)\n    end\n    return t\nend", "  return {}\nend", "  return t\nend", " \
    \   local words = {}\n    for word in string.gmatch(s, '%g+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "  local words = {}\n  for w in s:gmatch('%w+')\
    \ do\n    words[#words + 1] = w\n  end\n  return words\nend", "\tlocal t = {}\n\
    \tlocal i = 1\n\t\n\ts = s..','\n\tfor word in s:gmatch('(.-),') do\n\t\tt[i]\
    \ = word\n\t\ti = i + 1\n\tend\n\t\n\treturn t\nend", "\tlocal words = {}\n\t\
    local index = 1\n\tfor w in s:gmatch('%g+') do\n\t\twords[index] = w\n\t\tindex\
    \ = index + 1\n\tend\n\treturn words\nend", "    local i = 0\n    local t = {}\n\
    \    for word in s:gmatch('%w+') do\n        i = i + 1\n        t[i] = word\n\
    \    end\n    return t\nend", "  local words = {}\n  for w in string.gmatch(s,\
    \ \"%S+\") do\n    table.insert(words, w)\n  end\n  return words\nend", "    local\
    \ words = {}\n    local pattern = '(%w+)'\n    string.gsub(s, pattern, function(w)\
    \ table.insert(words, w) end)\n    return words\nend", "    local words = {}\n\
    \    for word in s:gmatch('%S+') do\n        table.insert(words, word)\n    end\n\
    \    return words\nend", "   local t = {}\n   local i = 1\n   while i <= #s do\n\
    \      if string.match(s, '^%s', i) then\n         i = i + 1\n      else\n   \
    \      local j = string.find(s, '[%s,]', i)\n         if j then\n            table.insert(t,\
    \ string.sub(s, i, j-1))\n            i = j + 1\n         else\n            table.insert(t,\
    \ string.sub(s, i))\n            i = #s + 1\n         end\n      end\n   end\n\
    \   return t\nend", "  local words = {}\n  for w in string.gmatch(s, \"%w+\")\
    \ do\n    table.insert(words, w)\n  end\n  return words\nend", "    local words\
    \ = {}\n    for word in string.gmatch(s, \"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "    if not s then return {} end\n \
    \   local res = {}\n    for word in s:gmatch('%w+') do\n        table.insert(res,\
    \ word)\n    end\n    return res\nend", "    -- strip off leading and trailing\
    \ whitespace and then split the string\n    -- into a table of words\n    return\
    \ string.split(string.trim(s), '[%s,]+')\nend", "\treturn {}\nend", "  local t\
    \ = {}\n  if string.find(s, \",\") then\n    for word in string.gmatch(s, \"[^,]+\"\
    ) do\n      table.insert(t, word)\n    end\n  else\n    for word in string.gmatch(s,\
    \ \"[^%s]+\") do\n      table.insert(t, word)\n    end\n  end\n  return t\nend",
  "    local r = {}\n    for word in s:gmatch('%w+') do\n        r[#r + 1] = word\n\
    \    end\n    return r\nend", "\tlocal words = {}\n\tlocal pattern = ''\n\tif\
    \ s:match('%,%s') then\n\t\tpattern = '%S+%s'\n\telse\n\t\tpattern = '%S+'\n\t\
    end\n\tfor word in s:gmatch(pattern) do\n\t\ttable.insert(words, word:gsub(' ',\
    \ ''))\n\tend\n\treturn words\nend", "\treturn {}\nend", "    local t = {}\n \
    \   for word in s:gmatch('%w+') do\n        table.insert(t, word)\n    end\n \
    \   return t\nend", "    words = {}\n    for word in s:gmatch(\"%w+\") do\n  \
    \      table.insert(words, word)\n    end\n    return words\nend", "\tlocal words\
    \ = {}\n\tfor word in s:gmatch('[^%s]+') do\n\t\ttable.insert(words, word)\n\t\
    end\n\treturn words\nend", "  -- TODO: Implement this function.\n  local words\
    \ = {}\n  local index = 1\n  local word = \"\"\n  local whitespace = \" \"\n \
    \ local comma = \",\"\n  for i = 1, string.len(s) do\n    local c = string.sub(s,\
    \ i, i)\n    if c == whitespace or c == comma then\n      if word ~= \"\" then\n\
    \        words[index] = word\n        index = index + 1\n        word = \"\"\n\
    \      end\n    else\n      word = word .. c\n    end\n  end\n  if word ~= \"\"\
    \ then\n    words[index] = word\n  end\n  return words\nend", "    local c = {}\n\
    \    for s in s:gmatch('%S+') do\n        c[#c+1] = s\n    end\n    return c\n\
    end", "    local s = s:gsub('^%s*(.-)%s*$', '%1')\n    local t = {}\n    for word\
    \ in s:gmatch('[^%s,]+') do\n        t[#t + 1] = word\n    end\n    return t\n\
    end", "  local words = {}\n  for w in s:gmatch('%S+') do\n    words[#words + 1]\
    \ = w\n  end\n  return words\nend", "\t-- split the string into words\n\tlocal\
    \ words = {}\n\tlocal start_index = 1\n\tlocal last_space_index = 1\n\t\n\tfor\
    \ i = 1, #s do\n\t\tif s:sub(i, i) == ' ' or s:sub(i, i) == ',' then\n\t\t\t--\
    \ Check if it's not a consecutive space\n\t\t\tif i ~= last_space_index + 1 then\n\
    \t\t\t\t-- Insert the word between the last space and the current space\n\t\t\t\
    \twords[#words + 1] = s:sub(start_index, i - 1)\n\t\t\t\tstart_index = i + 1\n\
    \t\t\tend\n\t\t\tlast_space_index = i\n\t\tend\n\tend\n\t\n\t-- Insert the last\
    \ word\n\twords[#words + 1] = s:sub(start_index, #s)\n\t\n\treturn words\nend",
  "    return split(s, \",%s*\")\nend", "  local words = {}\n  for word in string.gmatch(s,\
    \ '%S+') do\n    table.insert(words, word)\n  end\n  return words\nend", "   \
    \ -- your code here\nend", "  local pattern = '[^,%s]+'\n  local t = {}\n  for\
    \ word in string.gmatch(s, pattern) do\n    table.insert(t, word)\n  end\n  return\
    \ t\nend", "    local words = {}\n    for word in s:gmatch('%w+') do\n       \
    \ table.insert(words, word)\n    end\n    return words\nend", "    return string.tokenize(s)\n\
    end", "    return string.split(s, '%s+')\nend", "  local words = {}\n  for word\
    \ in s:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  return words\n\
    end", "    local t = {}\n    for w in s:gmatch('%S+') do\n        t[#t+1] = w\n\
    \    end\n    return t\nend", "    local t = {}\n    for w in s:gmatch('%S+')\
    \ do\n        t[#t+1] = w\n    end\n    return t\nend", "    return split(s, ',\
    \ ')\nend", "  local words = {}\n  for w in s:gmatch('[^ ,]+') do\n    words[#words\
    \ + 1] = w\n  end\n  return words\nend", "    local words = {}\n    for w in string.gmatch(s,\
    \ '[^,%s]+') do\n        table.insert(words, w)\n    end\n    return words\nend",
  "  local t = {}\n  for w in s:gmatch('[^,%s]+') do\n    t[#t+1] = w\n  end\n  return\
    \ t\nend", "\tlocal words = {}\n\tlocal pattern = '([^,%s]+)'\n\ts:gsub(pattern,\
    \ function(w) table.insert(words, w) end)\n\treturn words\nend", "  local words\
    \ = {}\n  for word in string.gmatch(s, \"[^%s,]+\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "    local t = {}\n    for w in string.gmatch(s,\
    \ \"%S+\") do\n        table.insert(t, w)\n    end\n    return t\nend", "  local\
    \ words = {}\n  local current = ''\n  for i = 1, #s do\n    local char = s:sub(i,\
    \ i)\n    if char == ' ' or char == ',' then\n      table.insert(words, current)\n\
    \      current = ''\n    else\n      current = current .. char\n    end\n  end\n\
    \  table.insert(words, current)\n  return words\nend", "\treturn luawt.util.string.parseWords(s)\n\
    end", "    return setmetatable(split(s), nil)\nend", "\treturn {}\nend", "   \
    \ local words = {}\n    for w in string.gmatch(s, '[^%s,]+') do\n        table.insert(words,\
    \ w)\n    end\n    return words\nend", "  local t = {}\n  for w in s:gmatch('[^,%s]+')\
    \ do\n    t[#t+1] = w\n  end\n  return t\nend", "    local words = {}\n    for\
    \ word in s:gmatch('%w+') do\n        table.insert(words, word)\n    end\n   \
    \ return words\nend", "  local words = {}\n  for w in s:gmatch('%S+') do\n   \
    \ words[#words + 1] = w\n  end\n  return words\nend", "    local l = {}\n    for\
    \ x in s:gmatch(\"%S+\") do\n        l[#l+1] = x\n    end\n    return l\nend",
  "\tlocal words = {}\n\tfor match in string.gmatch(s, \"[^,%s]+\") do\n\t\ttable.insert(words,\
    \ match)\n\tend\n\treturn words\nend", "    local words = {}\n    local it = s:gmatch('[^\
    \ ,]+')\n    for w in it do table.insert(words, w) end\n    return words\nend",
  "  local ws = {}\n  for w in string.gmatch(s, \"%S+\") do\n    table.insert(ws,\
    \ w)\n  end\n  return ws\nend", "    local t = {}\n    s:gsub('[^,%s]+', function(w)\
    \ table.insert(t, w) end)\n    return t\nend", "\tif not s then return {} end\n\
    \tlocal words = {}\n\tfor w in string.gmatch(s, '([^,%s]+)') do\n\t\ttable.insert(words,\
    \ w)\n\tend\n\treturn words\nend", "    local words = {}\n    for word in s:gmatch('[^%s,]+')\
    \ do\n        table.insert(words, word)\n    end\n    return words\nend", "  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend", "  local words = {}\n  for word in s:gmatch('[^%s,]+')\
    \ do\n    words[#words + 1] = word\n  end\n  return words\nend", "\treturn {}\n\
    end", "    local r = {}\n    local i = 1\n    for w in s:gmatch('[^,%s]+') do\n\
    \        r[i] = w\n        i = i + 1\n    end\n    return r\nend", "\t--[[\n\t\
    assert(\n\t\ttype(s) == 'string',\n\t\t\"Bad argument to 'words_string' (string\
    \ expected, got \" .. type(s) .. \")\"\n\t)\n\t--]]\n\tlocal temp = {}\n\tlocal\
    \ i = 1\n\twhile i <= #s do\n\t\tlocal ws, we = s:find('[^%s]+', i)\n\t\tif ws\
    \ then\n\t\t\ttable.insert(temp, s:sub(ws, we))\n\t\t\ti = we + 1\n\t\telse\n\t\
    \t\tbreak\n\t\tend\n\tend\n\treturn temp\nend", "  local t = {}\n  for word in\
    \ s:gmatch('%g+') do\n    t[#t+1] = word\n  end\n  return t\nend", "    return\
    \ {}\nend", "  return {s:match((s:gsub(\"%s*([^%s,]+)\", \" %1\")))}\nend", " \
    \ local word_table = {}\n  local word_count = 0\n  s = s .. \",\"", "  local words\
    \ = {}\n  for word in s:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n\
    \  return words\nend", "  local t = {}\n  for w in s:gmatch('[^,%s]+') do\n  \
    \  t[#t+1] = w\n  end\n  return t\nend", "    local t = {}\n    for word in s:gmatch('%w+')\
    \ do\n        table.insert(t, word)\n    end\n    return t\nend", "    local words\
    \ = {}\n    for w in s:gmatch('%w+') do\n        table.insert(words, w)\n    end\n\
    \    return words\nend", "    local words = {}\n    for word in string.gmatch(s,\
    \ \"%a+\") do\n        table.insert(words, word)\n    end\n    return words\n\
    end", "    local t = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(t,\
    \ word)\n    end\n    return t\nend", "  local words = {}\n  for word in string.gmatch(s,\
    \ \"[^%s,]+\") do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local a = {}\n  for word in s:gmatch('%w+') do a[#a+1] = word end\n  return a\n\
    end", "\tlocal ret = {}\n\tfor i in string.gmatch(s, '([^,%s]+)') do\n\t\ttable.insert(ret,\
    \ i)\n\tend\n\treturn ret\nend", "  return type(s) == 'string' and _M.words(s)\
    \ or {s}\nend", "  if type(s) ~= 'string' then\n    return {}\n  end\n  s = s:gsub('[%s,]+',\
    \ ' ')\n  return iterate(s:gmatch('%S+'))\nend", "\tlocal words = {}\n\tfor word\
    \ in s:gmatch('%w+') do\n\t\ttable.insert(words, word)\n\tend\n\treturn words\n\
    end", "    local t = {}\n    for w in s:gmatch('%w+') do\n        t[#t+1] = w\n\
    \    end\n    return t\nend", "  if not s then return {} end\n  local words =\
    \ {}\n  for word in string.gmatch(s, '[^,%s]+') do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend", "    return l.split(s, \"%s+\", nil, true)\nend",
  "    local words = {}\n    for word in s:gmatch('[^,%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    return words\nend", "\tlocal words = {}\n\t\n\tfor word\
    \ in s:gmatch('%S+') do\n\t\ttable.insert(words, word)\n\tend\n\t\n\treturn words\n\
    end", "  -- Split the string.\n  local words = {}\n  for word in string.gmatch(s,\
    \ '[^,%s]+') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local t = {}\n  for word in s:gmatch('%w+') do\n    t[#t+1] = word\n  end\n\
    \  return t\nend", "    local words = {}\n    for w in s:gmatch('%w+') do\n  \
    \      table.insert(words, w)\n    end\n    return words\nend", "\tif not s then\
    \ return end\n\tlocal t = {}\n\tfor word in s:gmatch('%w+') do\n\t\ttable.insert(t,\
    \ word)\n\tend\n\treturn t\nend", "    local res = {}\n    for word in string.gmatch(s,\
    \ '%S+') do\n        table.insert(res, word)\n    end\n    return res\nend", " \
    \   local t = {}\n    for w in string.gmatch(s, \"%w+\") do\n        table.insert(t,\
    \ w)\n    end\n    return t\nend", "    local words = {}\n    for word in s:gmatch('%S+')\
    \ do\n        table.insert(words, word)\n    end\n    return words\nend", "  if\
    \ s:match('^$') then\n    return {}\n  else\n    local result = {}\n    for match\
    \ in s:gmatch('%S+') do\n      table.insert(result, match)\n    end\n    return\
    \ result\n  end\nend", "\tlocal t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\t\
    local si = s:find(' ', i)\n\t\tlocal ci = s:find(',', i)\n\t\tif (si == nil or\
    \ ci ~= nil) and ci ~= i then\n\t\t\tsi = ci\n\t\tend\n\t\tif si ~= nil then\n\
    \t\t\tlocal word = s:sub(i, si - 1)\n\t\t\tif word ~= '' then\n\t\t\t\ttable.insert(t,\
    \ word)\n\t\t\tend\n\t\t\ti = si + 1\n\t\telse\n\t\t\tlocal word = s:sub(i)\n\t\
    \t\tif word ~= '' then\n\t\t\t\ttable.insert(t, word)\n\t\t\tend\n\t\t\tbreak\n\
    \t\tend\n\tend\n\treturn t\nend", "    -- TODO: Implement\n    return {}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
