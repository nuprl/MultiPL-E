name: HumanEval_2_truncate_number
language: lua
prompt: "-- Given a positive floating point number, it can be decomposed into\n--\
  \ and integer part (largest integer smaller than given number) and decimals\n--\
  \ (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
  -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
  \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
  \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return number - math.floor(number)\nend", "    return number -\
    \ math.floor(number)\nend", "  local int_part = math.floor(number)\n  return number\
    \ - int_part\nend", "  return number - floor(number)\nend", "    local int_part\
    \ = math.floor(number)\n    return number - int_part\nend", "\tlocal int, dec\
    \ = math.modf(number)\n\treturn dec\nend", "  return number - math.floor(number)\n\
    end", "  if math.type(number) ~= \"float\" then return nil end\n  local i, f =\
    \ math.modf(number)\n  return f\nend", "  return number - math.floor(number)\n\
    end", "  if not number then return false end\n  local lnumber = math.floor(number)\n\
    \  return number - lnumber\nend", "    if number < 0 then\n        number = -number\n\
    \    end\n    local result = number - math.floor(number)\n    if result < 0 then\n\
    \        result = -result\n    end\n    return result\nend", "    return number\
    \ - math.floor(number)\nend", "  local integer_part = math.floor(number)\n  return\
    \ number - integer_part\nend", "    local ipart, fpart = math.modf(number)\n \
    \   return fpart\nend", "    local _, integer_part = math.modf(number)\n    return\
    \ number - integer_part\nend", "  return math.fmod(number, 1)\nend", "    return\
    \ number - math.floor(number)\nend", "    local return_value = number\n    while\
    \ return_value > 1 do\n        return_value = return_value - 1\n    end\n    return\
    \ return_value\nend", "    local integer, decimal = math.modf(number)\n    return\
    \ decimal\nend", "\treturn number - math.floor(number)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
