name: HumanEval_2_truncate_number
language: lua
prompt: "-- Given a positive floating point number, it can be decomposed into\n--\
  \ and integer part (largest integer smaller than given number) and decimals\n--\
  \ (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
  -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
  \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
  \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    return number - math.floor(number)\nend", "    return number -\
    \ math.floor(number)\nend", "  local int_part = math.floor(number)\n  return number\
    \ - int_part\nend", "  return number - floor(number)\nend", "    local int_part\
    \ = math.floor(number)\n    return number - int_part\nend", "\tlocal int, dec\
    \ = math.modf(number)\n\treturn dec\nend", "  return number - math.floor(number)\n\
    end", "  if math.type(number) ~= \"float\" then return nil end\n  local i, f =\
    \ math.modf(number)\n  return f\nend", "  return number - math.floor(number)\n\
    end", "  if not number then return false end\n  local lnumber = math.floor(number)\n\
    \  return number - lnumber\nend", "    if number < 0 then\n        number = -number\n\
    \    end\n    local result = number - math.floor(number)\n    if result < 0 then\n\
    \        result = -result\n    end\n    return result\nend", "    return number\
    \ - math.floor(number)\nend", "  local integer_part = math.floor(number)\n  return\
    \ number - integer_part\nend", "    local ipart, fpart = math.modf(number)\n \
    \   return fpart\nend", "    local _, integer_part = math.modf(number)\n    return\
    \ number - integer_part\nend", "  return math.fmod(number, 1)\nend", "    return\
    \ number - math.floor(number)\nend", "    local return_value = number\n    while\
    \ return_value > 1 do\n        return_value = return_value - 1\n    end\n    return\
    \ return_value\nend", "    local integer, decimal = math.modf(number)\n    return\
    \ decimal\nend", "\treturn number - math.floor(number)\nend", "    local int,\
    \ dec = math.modf(number)\n    return dec\nend", "    local ip, fp = math.modf(number)\n\
    \    return fp\nend", "    local num, dec = math.modf(number)\n    return dec\n\
    end", "    local integer_part = math.floor(number)\n    return number - integer_part\n\
    end", "  return number - math.floor(number)\nend", "  return number - math.floor(number)\n\
    end", "    local integer_part = math.floor(number)\n    return number - integer_part\n\
    end", "    local integer, decimals = math.modf(number)\n    return decimals\n\
    end", "    local decimal, integer = math.modf(number)\n    return decimal\nend",
  "  return number - math.floor(number)\nend", "    local integer, decimals = math.modf(number)\n\
    \    return decimals\nend", "    local integer, decimal = math.modf(number)\n\
    \    return decimal\nend", "\treturn number % 1\nend", "    local first_char =\
    \ string.sub(tostring(number), 1, 1)\n    if first_char == \"-\" then\n      \
    \  return -truncate_number(-number)\n    end\n    return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "  local integer_part = math.floor(number)\n\
    \  return number - integer_part\nend", "    local integer_part = math.floor(number)\n\
    \    return number - integer_part\nend", "    return number - math.floor(number)\n\
    end", "  if number < 0 then\n    number = -number\n  end\n  return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "    local truncated = math.floor(number)\n\
    \    return number - truncated\nend", "    return number - math.floor(number)\n\
    end", "    local t = tostring(number)\n    local i, j = t:find('%.')\n    return\
    \ t:sub(j+1)\nend", "  return number - math.floor(number)\nend", "    return number\
    \ - math.floor(number)\nend", "    return number - math.floor(number)\nend", " \
    \   local integral, decimal = math.modf(number)\n    return decimal\nend", " \
    \   return math.fmod(number, 1)\nend", "    return number - floor(number)\nend",
  "    local a,b = math.modf(number)\n    return b\nend", "    return number - math.floor(number)\n\
    end", "  return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "    local value = math.floor(number)\n    return number - value\nend",
  "    local integer_part = math.floor(number)\n    return number - integer_part\n\
    end", "    return math.modf(number)\nend", "    return number - math.floor(number)\n\
    end", "    local _, fractional = math.modf(number)\n    return fractional\nend",
  "    return number - math.floor(number)\nend", "\treturn number - math.floor(number)\n\
    end", "    local decimal, _ = math.modf(number)\n    return decimal\nend", " \
    \   return number - math.floor(number)\nend", "\tlocal ipart,fpart = math.modf(number)\n\
    \treturn fpart\nend", "  return number - math.floor(number)\nend", "    return\
    \ math.modf(number)\nend", "    local d = number - math.floor(number)\n    if\
    \ d == 0 then\n        d = 1\n    end\n    return d\nend", "  return math.abs(number\
    \ - math.floor(number))\nend", "  local integer_part = math.floor(number)\n  return\
    \ number - integer_part\nend", "  return number - math.floor(number)\nend", " \
    \   local number_int = math.floor(number)\n    return number - number_int\nend",
  "  return number - math.floor(number)\nend", "  return number - math.floor(number)\n\
    end", "  local integer_part = math.floor(number)\n  return number - integer_part\n\
    end", "    local number_int = math.floor(number)\n    return number - number_int\n\
    end", "  return number - math.floor(number)\nend", "  local integer, decimals\
    \ = math.modf(number)\n  return decimals\nend", "  return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "  return number - math.floor(number)\nend", "  local integer_part = math.floor(number)\n\
    \  return number - integer_part\nend", "    return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "    local result = number - math.floor(number)\n    return result\nend",
  "    return number - math.floor(number)\nend", "  local integer_part = math.floor(number)\n\
    \  return number - integer_part\nend", "  return number - math.floor(number)\n\
    end", "    local whole, fraction = math.modf(number)\n    return fraction\nend",
  "  return number - math.floor(number)\nend", "  local int, dec = math.modf(number)\n\
    \  return dec\nend", "    return number - math.floor(number)\nend", "    local\
    \ int_part = math.floor(number)\n    return number - int_part\nend", "  return\
    \ number - math.floor(number)\nend", "  local integer_part = math.floor(number)\n\
    \  return number - integer_part\nend", "    local integer_part = math.floor(number)\n\
    \    return number - integer_part\nend", "    return number - math.floor(number)\n\
    end", "  local i, d = math.modf(number)\n  return d\nend", "    local decimal,\
    \ integer = math.modf(number)\n    return decimal\nend", "    return number -\
    \ math.floor(number)\nend", "\tlocal decimal = number - math.floor(number)\n\t\
    return decimal\nend", "    local integer_part = math.floor(number)\n    return\
    \ number - integer_part\nend", "    local whole_number = math.floor(number)\n\
    \    return number - whole_number\nend", "  return number - math.floor(number)\n\
    end", "    local truncated_number = number % 1\n    return truncated_number\n\
    end", "    return number - math.floor(number)\nend", "  if not number then return\
    \ end\n  return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "    return math.fmod(number, 1)\nend", "  local number = tonumber(number)\n\
    \  return math.modf(number)\nend", "    return number - math.floor(number)\nend",
  "  local f, i = math.modf(number)\n  return f\nend", "    return number - math.floor(number)\n\
    end", "  return number - math.floor(number)\nend", "  local f, i = math.modf(number)\n\
    \  return f\nend", "    local integer_part = math.floor(number)\n    return number\
    \ - integer_part\nend", "    return number - math.floor(number)\nend", "  local\
    \ integer, decimals = math.modf(number)\n  return decimals\nend", "    local num\
    \ = number % 1\n    return num\nend", "\tif type(number) ~= \"number\" then\n\t\
    \treturn nil\n\tend\n\treturn number - math.floor(number)\nend", "    local integer,\
    \ decimals = math.modf(number)\n    return decimals\nend", "  return number -\
    \ math.floor(number)\nend", "    return number - math.floor(number)\nend", " \
    \ return number - math.floor(number)\nend", "  return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "  local whole, decimals = math.modf(number)\n  return decimals\nend", " \
    \   return math.fmod(number, 1)\nend", "    local integer_part = math.floor(number)\n\
    \    return number - integer_part\nend", "  return math.modf(number)\nend", " \
    \ if number <= 0 then\n    return 0\n  end\n  local floored = math.floor(number)\n\
    \  return number - floored\nend", "  return number - math.floor(number)\nend",
  "    if number >= 0 then\n        return number % 1\n    else\n        return -(-number\
    \ % 1)\n    end\nend", "  local int, dec = math.modf(number)\n  return dec\nend",
  "    return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "  if not number then return\
    \ nil end\n  local _, decimals = math.modf(number)\n  return decimals\nend", " \
    \   return number - math.floor(number)\nend", "    local decimal_part = math.fmod(number,\
    \ 1)\n    return decimal_part\nend", "    local int_part = math.floor(number)\n\
    \    return number - int_part\nend", "  return number - math.floor(number)\nend",
  "    local integer_part = math.floor(number)\n    return number - integer_part\n\
    end", "    return number - math.floor(number)\nend", "    local i, _ = math.modf(number)\n\
    \    return number - i\nend", "  local _, decimal = math.modf(number)\n  return\
    \ decimal\nend", "    local number_floor = math.floor(number)\n    return number\
    \ - number_floor\nend", "  local integer_part = math.floor(number)\n  return number\
    \ - integer_part\nend", "    local truncated = math.floor(number)\n    return\
    \ number - truncated\nend", "    return number - math.floor(number)\nend", " \
    \ local floor_integer = math.floor(number)\n  return number - floor_integer\n\
    end", "    local decimal, _ = math.modf(number)\n    return decimal\nend", " \
    \ return number - floor(number)\nend", "    local _, decimal = math.modf(number)\n\
    \    return decimal\nend", "\treturn number - math.floor(number)\nend", "\tlocal\
    \ number_int = math.floor(number)\n\treturn number - number_int\nend", "    return\
    \ number - math.floor(number)\nend", "  local a, b = math.modf(number)\n  return\
    \ b\nend", "    return number - math.floor(number)\nend", "  local integer_part\
    \ = math.floor(number)\n  return number - integer_part\nend", "  return number\
    \ - math.floor(number)\nend", "  return number - math.floor(number)\nend", " \
    \   return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "    local integer_part = math.floor(number)\n    return number - integer_part\n\
    end", "  return number - math.floor(number)\nend", "  return number - math.floor(number)\n\
    end", "    return math.floor(number) - number\nend", "  return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "    return number - math.floor(number)\n\
    end", "  local _, _, integer_part, decimal_part = string.find(tostring(number),\
    \ \"(%d+)%.(%d+)\")\n  return tonumber(decimal_part)\nend", "    return number\
    \ - math.floor(number)\nend", "    return number - math.floor(number)\nend", " \
    \   return number - math.floor(number)\nend", "  local truncated_number = number\
    \ - math.floor(number)\n  return truncated_number\nend", "    return number -\
    \ math.floor(number)\nend", "  return number - math.floor(number)\nend", "   \
    \ if math.floor(number) ~= number then\n        return number - math.floor(number)\n\
    \    else\n        return 0\n    end\nend", "    local integral, fractional =\
    \ math.modf(number)\n    return fractional\nend", "    local integer_part = math.floor(number)\n\
    \    return number - integer_part\nend", "    return number - math.floor(number)\n\
    end", "    return number - math.floor(number)\nend", "    local number_string\
    \ = tostring(number)\n    local decimal_part = number_string:match(\"%.(%d+)\"\
    )\n    if decimal_part == nil then\n        return 0\n    end\n    return tonumber(\"\
    0.\" .. decimal_part)\nend", "\treturn number - math.floor(number)\nend", "  \
    \  if number > 0 then\n        return math.modf(number)\n    else\n        return\
    \ math.modf(number * -1) * -1\n    end\nend", "  return number - math.floor(number)\n\
    end", "  return number - math.floor(number)\nend", "    local t = tostring(number)\n\
    \    local index = t:find(\"%.\")\n    if index == nil then\n        return 0\n\
    \    end\n    return tonumber(t:sub(index, -1))\nend", "    local _, decimal =\
    \ math.modf(number)\n    return decimal\nend", "    if number >= 0 then\n    \
    \    return number % 1\n    else\n        return 1 - (math.abs(number) % 1)\n\
    \    end\nend", "  return number - math.floor(number)\nend", "    local integer_part\
    \ = math.floor(number)\n    return number - integer_part\nend", "  if type(number)\
    \ ~= \"number\" then\n    error(\"truncate_number(number): 'number' - number expected,\
    \ got \"..type(number)..\".\")\n  end\n  return math.abs(number - math.floor(math.abs(number)))\n\
    end", "  local truncated = math.floor(number)\n  return number - truncated\nend",
  "    local truncated = number - math.floor(number)\n    return truncated\nend",
  "    return number - math.floor(number)\nend", "  return number - math.floor(number)\n\
    end", "    local floor_num = math.floor(number)\n    return number - floor_num\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
