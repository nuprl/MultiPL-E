name: HumanEval_150_x_or_y
language: lua
prompt: "-- A simple program which should return the value of x if n is \n-- a prime\
  \ number and should return the value of y otherwise.\n-- Examples:\n-- >>> x_or_y(7,\
  \ 34, 12)\n-- 34\n-- >>> x_or_y(15, 8, 5)\n-- 5\nlocal function x_or_y(n, x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = x_or_y\n\
  \    lu.assertEquals(candidate(7, 34, 12), 34)\n    lu.assertEquals(candidate(15,\
  \ 8, 5), 5)\n    lu.assertEquals(candidate(3, 33, 5212), 33)\n    lu.assertEquals(candidate(1259,\
  \ 3, 52), 3)\n    lu.assertEquals(candidate(7919, -1, 12), -1)\n    lu.assertEquals(candidate(3609,\
  \ 1245, 583), 583)\n    lu.assertEquals(candidate(91, 56, 129), 129)\n    lu.assertEquals(candidate(6,\
  \ 34, 1234), 1234)\n    lu.assertEquals(candidate(1, 2, 0), 0)\n    lu.assertEquals(candidate(2,\
  \ 2, 0), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tif n%2 == 0 then\n\t\treturn y\n\telse\n\t\treturn x\n\tend\nend",
  "  return n % 2 == 0 and y or x\nend", "  if n == 2 then\n    return x\n  elseif\
    \ n % 2 == 0 then\n    return y\n  else\n    local limit = math.floor(math.sqrt(n))\n\
    \    for i = 3, limit, 2 do\n      if n % i == 0 then\n        return y\n    \
    \  end\n    end\n    return x\n  end\nend", "    return is_prime(n) and x or y\n\
    end", "    if n % 2 == 0 then\n        return y\n    elseif n % 3 == 0 then\n\
    \        return y\n    elseif n % 5 == 0 then\n        return y\n    elseif n\
    \ % 7 == 0 then\n        return y\n    else\n        return x\n    end\nend",
  "  return cond(is_prime(n), x, y)\nend", "    -- TODO\nend", "\t-- TODO: Fill in\
    \ the body of this function so it returns the proper value.\n\tif(is_prime(n))\
    \ then \n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "   -- your\
    \ code here\n   if n%2 == 0 then\n   \t\treturn y\n   else\n   \t\treturn x\n\
    \   end\nend", "    if is_prime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend", "\t\n\tfor i = 2, n-1 do\n\t\t\n\t\tif n % i == 0 then\n\t\
    \t\treturn y\n\t\tend\n\tend\n\t\n\treturn x\nend", "\t-- your code here\nend",
  "    if is_prime(n) then\n        return x\n    else\n        return y\n    end\n\
    end", "    -- Your code goes here\n\t-- \n\tif(n % 2 == 0) then \n\t\treturn x\n\
    \telse \n\t\treturn y\n\tend\nend", "    if is_prime(n) then\n        return x\n\
    \    else\n        return y\n    end\nend", "    if n < 2 then\n        return\
    \ y\n    end\n    local i = 2\n    while i * i <= n do\n        if n % i == 0\
    \ then\n            return y\n        end\n        i = i + 1\n    end\n    return\
    \ x\nend", "   if n % 2 == 0 then\n      return y\n   else\n      for i = 3, n,\
    \ 2 do\n         if n % i == 0 then\n            return y\n         end\n    \
    \  end\n      return x\n   end\nend", "  -- TODO: Write the body of this function.\n\
    end", "\t-- write your code here\nend", "  if is_prime(n) then\n    return x\n\
    \  else\n    return y\n  end\nend", "\treturn n\nend", "  if is_prime(n) then\n\
    \    return x\n  else\n    return y\n  end\nend", "\treturn is_prime(n) and x\
    \ or y\nend", "    if n % 2 == 0 then\n        return y\n    else\n        return\
    \ x\n    end\nend", "  if is_prime(n) then\n    return x\n  else\n    return y\n\
    \  end\nend", "  return is_prime(n) and x or y\nend", "    local isPrime = true\n\
    \    if n < 2 then\n        isPrime = false\n    else\n        for i = 2, n -\
    \ 1 do\n            if n % i == 0 then\n                isPrime = false\n    \
    \            break\n            end\n        end\n    end\n    if isPrime then\n\
    \        return x\n    else\n        return y\n    end\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "\tif n %\
    \ 2 == 0 or n % 3 == 0 or n % 5 == 0 or n % 7 == 0 then\n\t\treturn y\n\telse\n\
    \t\treturn x\n\tend\nend", "    if is_prime(n) then\n        return x\n    else\n\
    \        return y\n    end\nend", "    if (is_prime(n)) then\n        return x\n\
    \    else\n        return y\n    end\nend", "\tfor i = 2, n do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn y\n\t\tend\n\tend\n\treturn x\nend", "  if is_prime(n)\
    \ then\n    return x\n  else\n    return y\n  end\nend", "  if n%2 == 0 then\n\
    \    return y\n  else\n    for i = 3, math.sqrt(n), 2 do\n      if n%i == 0 then\n\
    \        return y\n      end\n    end\n    return x\n  end\nend", "    local function\
    \ is_prime(n)\n        if n < 2 then\n            return false\n        end\n\
    \        local function help(d)\n            if d * d > n then\n             \
    \   return true\n            elseif n % d == 0 then\n                return false\n\
    \            else\n                return help(d + 1)\n            end\n     \
    \   end\n        return help(2)\n    end\n    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "    if n % 2 == 0 then\n    \
    \    return y\n    else\n        return x\n    end\nend", "\tif n%2 == 0 then\n\
    \t\treturn y\n\telseif n%3 == 0 then\n\t\treturn y\n\telseif n%5 == 0 then\n\t\
    \treturn y\n\telseif n%7 == 0 then\n\t\treturn y\n\telse\n\t\treturn x\n\tend\n\
    end", "\t-- TODO: Implement function\nend", "    if isPrime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "  if is_prime(n) then\n    return\
    \ x\n  else\n    return y\n  end\nend", "    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "  -- your code here\nend", " \
    \ if is_prime(n) then\n    return x\n  else\n    return y\n  end\nend", "    if\
    \ __TEST__ then\n        if type(n) ~= \"number\" then\n            error(\"Expected\
    \ 'n' to be a number\")\n        end\n        if type(x) ~= \"number\" then\n\
    \            error(\"Expected 'x' to be a number\")\n        end\n        if type(y)\
    \ ~= \"number\" then\n            error(\"Expected 'y' to be a number\")\n   \
    \     end\n    end\n    return n % 2 == 0 and y or x\nend", "\tif (is_prime(n))\
    \ then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "  return n == 2 and\
    \ x or y\nend", "    if is_prime(n) then\n        return x\n    else\n       \
    \ return y\n    end\nend", "    for i = 2, math.sqrt(n) do\n        if n % i ==\
    \ 0 then\n            return y\n        end\n    end\n    return x\nend", "\t\
    if is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "  if n%2\
    \ == 0 then\n    return y\n  else\n    return x\n  end\nend", "    if n % 2 ==\
    \ 0 then\n        return x\n    else\n        return y\n    end\nend", "   return\
    \ n\nend", "    -- Write your code here\nend", "    if n == 2 then\n        return\
    \ x\n    elseif n % 2 == 0 then\n        return y\n    else\n        local c =\
    \ 3\n        while c <= math.sqrt(n) do\n            if n % c == 0 then\n    \
    \            return y\n            end\n            c = c + 2\n        end\n \
    \       return x\n    end\nend", "  if is_prime(n) then\n    return x\n  else\n\
    \    return y\n  end\nend", "  return \"student's code\"\nend", "  if is_prime(n)\
    \ then\n    return x\n  else\n    return y\n  end\nend", "    if is_prime(n) then\n\
    \        return x\n    else\n        return y\n    end\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "    -- YOUR\
    \ CODE HERE\n    -- HINT: there is a function `is_prime` in the standard library\n\
    \    -- which we have imported for you\n    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "  local prime = 1\n  for i =\
    \ 2, n-1 do\n    if n % i == 0 then\n      prime = 0\n      break\n    end\n \
    \ end\n  if prime == 1 then\n    return x\n  else\n    return y\n  end\nend",
  "    if n == 2 then\n        return x\n    elseif n % 2 == 0 then\n        return\
    \ y\n    else\n        return x\n    end\nend", "\treturn y\nend", "\tif is_prime(n)\
    \ then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "  return (n % 2) ==\
    \ 0 and y or x\nend", "    if(is_prime(n)) then\n        return x\n    else\n\
    \        return y\n    end\nend", "\t-- check if number is prime\n\tif isPrime(n)\
    \ then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "\tif is_prime(n) then\n\
    \t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "    if is_prime(n) then\n  \
    \      return x\n    else\n        return y\n    end\nend", "    if prime.is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "  -- Your\
    \ code here\nend", "    if is_prime(n) then\n        return x\n    else\n    \
    \    return y\n    end\nend", "    return (n % 2 == 0) and x or y\nend", "   \
    \ return cond(is_prime(n),\n        const(x),\n        const(y))(1)\nend", " \
    \   -- TODO: Write code to complete the function.\nend", "  -- student code goes\
    \ here.\n  return y\nend", "    if (is_prime(n)) then\n        return x\n    else\n\
    \        return y\n    end\nend", "  if is_prime(n) then\n    return x\n  else\n\
    \    return y\n  end\nend", "    -- TODO: Implement this function.\nend", "  return\
    \ n % 2 == 0 and y or x\nend", "  local flag = 1\n  if n == 2 then\n    return\
    \ x\n  end\n  for i = 2, math.floor(math.sqrt(n)) do\n    if n % i == 0 then\n\
    \      flag = 0\n      break\n    end\n  end\n  if flag == 1 then\n    return\
    \ x\n  else\n    return y\n  end\nend", "    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "  -- TODO: your code here\n \
    \ local a = is_prime(n)\n  if a == true then\n    return x\n  else\n    return\
    \ y\n  end\nend", "  if n%2 == 0 then\n    return y\n  else\n    local isPrime\
    \ = true\n    for i = 3, n-1, 2 do\n      if n%i == 0 then\n        isPrime =\
    \ false\n        break\n      end\n    end\n    if isPrime then\n      return\
    \ x\n    else\n      return y\n    end\n  end\nend", "\treturn n%2 == 0 and y\
    \ or x\nend", "\tif is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\n\
    end", "    if n % 3 == 0 or n % 5 == 0 then\n        return y\n    else \n   \
    \     return x\n    end\nend", "    if is_prime(n) then\n        return x\n  \
    \  else\n        return y\n    end\nend", "  -- TODO: write your code here\nend",
  "    local is_prime = is_prime_number(n)\n    if is_prime then\n        return x\n\
    \    else\n        return y\n    end\nend", "    return y\nend", "  -- define\
    \ the x_or_y function here\nend", "    -- if n is a prime number, return x. otherwise,\
    \ return y.\n    -- and you can use is_prime() function.\nend", "  -- Your code\
    \ here\n  if is_prime(n) then\n    return x\n  else\n    return y\n  end\nend",
  "  if isPrime(n) then\n    return x\n  else\n    return y\n  end\nend", "\tlocal\
    \ p = is_prime(n)\n\tif p then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend",
  "    local function is_prime(k)\n        for j = 2, math.floor(math.sqrt(k)) do\n\
    \            if k % j == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "  -- assume prime\n  local result\
    \ = x\n  -- check if not prime\n  for i = 2, math.sqrt(n) do\n    if n % i ==\
    \ 0 then\n      result = y\n      break\n    end\n  end\n  return result\nend",
  "    return is_prime(n) and x or y\nend", "  return y\nend", "\tif is_prime(n) then\n\
    \t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "    -- A prime number is a natural\
    \ number greater than 1 that has no \n    -- positive divisors other than 1 and\
    \ itself. \n    if n > 1 then\n        for i = 2, n - 1 do\n            if n %\
    \ i == 0 then\n                return y\n            end\n        end\n      \
    \  return x\n    else\n        return y\n    end\nend\nprint(x_or_y(7, 34, 12))\n\
    print(x_or_y(15, 8, 5))", "    if __prime(n) then\n        return x\n    else\n\
    \        return y\n    end\nend", "\tif not is_prime(n) then\n\t\treturn y\n\t\
    else\n\t\treturn x\n\tend\nend", "  if not is_prime(n) then\n    return y\n  else\n\
    \    return x\n  end\nend", "    if n <= 1 then\n        return nil\n    end\n\
    \    for divisor = 2, n-1 do\n        if n % divisor == 0 then\n            return\
    \ y\n        end\n    end\n    return x\nend", "  -- Fill in your code here\n\
    end", "    -- To be completed\nend", "  if is_prime(n) then\n    return x\n  else\n\
    \    return y\n  end\nend", "    if n % 2 == 0 then\n        return x\n    else\n\
    \        return y\n    end\nend", "  if is_prime(n) then\n    return x\n  else\n\
    \    return y\n  end\nend", "    if is_prime(n) then\n        return x\n    else\n\
    \        return y\n    end\nend", "  -- write your code here\n  -- don't forget\
    \ to add tests :)\nend", "   if num.is_prime(n) then\n      return x\n   else\n\
    \      return y\n   end\nend", "    if is_prime(n) then\n        return x\n  \
    \  else\n        return y\n    end\nend", "    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "\tif is_prime(n) then\n\t\treturn\
    \ x\n\telse\n\t\treturn y\n\tend\nend", "  local isPrime = isPrimeNumber(n)\n\
    \  if isPrime then\n    return x\n  else\n    return y\n  end\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "\t\n\tis_prime\
    \ = function(n)\n\t\tfor i = 2, n/2 do\n\t\t\tif n % i == 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend", "  if not is_prime(n) then\n\
    \    return y\n  else\n    return x\n  end\nend", "    return is_prime(n) and\
    \ x or y\nend", "  if is_prime(n) then\n    return x\n  else\n    return y\n \
    \ end\nend", "   --TODO\n   if is_prime(n) == true then\n     return x\n   else\n\
    \     return y\n   end\nend", "   if prime(n) then\n      return x\n   else\n\
    \      return y\n   end\nend", "    -- WRITE YOUR CODE HERE\nend", "\treturn ...\n\
    end", "    return is_prime(n) and x or y\nend", "  if is_prime(n) then\n    return\
    \ x\n  else\n    return y\n  end\nend", "  if(is_prime(n)) then\n    return x\n\
    \  else\n    return y\n  end\nend", "  return nil\nend", "  if is_prime(n) then\
    \ return x end\n  return y\nend", "    local is_prime = true\n    for i = 2, n-1\
    \ do\n        if n % i == 0 then\n            is_prime = false\n            break\n\
    \        end\n    end\n    if is_prime then\n        return x\n    else\n    \
    \    return y\n    end\nend", "  if (not is_prime(n)) then\n    return y\n  else\n\
    \    return x\n  end\nend", "  -- WRITE THE FUNCTION HERE\n  if (x_or_y(n,x,y)==n)\
    \ then\n    return x\n  else \n    return y\n  end\nend", "    if isPrime(n) then\n\
    \        return x\n    else\n        return y\n    end\nend", "  -- Checks if\
    \ the given number is a prime number.\n  -- (n) = The number to be checked.\n\
    \  -- (return) = True if the number is a prime and false otherwise.\n  local function\
    \ is_prime(n)\n    if (n == 2) then return true end\n    if (n == 1 or n % 2 ==\
    \ 0) then return false end\n    local step = 3\n    while (step * step <= n) do\n\
    \      if (n % step == 0) then return false end\n      step = step + 2\n    end\n\
    \    return true\n  end\n  -- Returns the value of x if n is a prime number and\
    \ returns the value of y otherwise.\n  -- (n) = The number to be checked.\n  --\
    \ (x) = The number to be returned if n is a prime number.\n  -- (y) = The number\
    \ to be returned if n is not a prime number.\n  -- (return) = x if n is a prime\
    \ number and y otherwise.\n  if (is_prime(n)) then return x end\n  return y\n\
    end", "    if (n <= 2) then\n        if (n == 2) then\n            return x\n\
    \        else\n            return y\n        end\n    end\n    for i = 2, n -\
    \ 1 do\n        if (n % i == 0) then\n            return y\n        end\n    end\n\
    \    return x\nend", "   if is_prime(n) then\n      return x\n   else\n      return\
    \ y\n   end\nend", "   if is_prime(n) then\n      return x\n   else\n      return\
    \ y\n   end\nend", "\tif(is_prime(n)) then\n\t\treturn x\n\telse\n\t\treturn y\n\
    \tend\nend", "    if is_prime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend\n```", "    if n == 2 then\n        return x\n    elseif n %\
    \ 2 == 0 then\n        return y\n    else\n        for i = 3, math.sqrt(n), 2\
    \ do\n            if n % i == 0 then\n                return y\n            end\n\
    \        end\n        return x\n    end\nend", "  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    elseif n == 2 then\n      return true\n\
    \    else\n      for i = 2, n-1 do\n        if n % i == 0 then\n          return\
    \ false\n        end\n      end\n      return true\n    end\n  end\n  if is_prime(n)\
    \ then\n    return x\n  else\n    return y\n  end\nend", "  if is_prime(n) then\n\
    \    return x\n  else\n    return y\n  end\nend", "    -- your code here\nend",
  "    if is_prime(n) then\n        return x\n    else\n        return y\n    end\n\
    end", "\tif (n > 2) and (n % 2 == 0) then\n\t\treturn y\n\telse\n\t\treturn x\n\
    \tend\nend", "    if is_prime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend", "  if n == x then\n    return x\n  else\n    return y\n  end\n\
    end", "    -- TODO: Add your code here\nend", "    if n % 2 == 0 then\n      \
    \  return x\n    else\n        return y\n    end\nend", "\tif is_prime(n) then\n\
    \t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "  if is_prime(n) then\n    return\
    \ x\n  else\n    return y\n  end\nend", "    if is_prime(n) then\n        return\
    \ x\n    else\n        return y\n    end\nend", "  \n  -- if n is not prime, returns\
    \ y\n  if not is_prime(n) then\n    return y\n  end\n  \n  -- else n is prime,\
    \ returns x\n  return x\nend", "  return 8\nend", "  if is_prime(n) then\n   \
    \ return x\n  else\n    return y\n  end\nend", "    if is_prime(n) then\n    \
    \    return x\n    else\n        return y\n    end\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "    return\
    \ y\nend", "  if n > 3 then\n    if ((n % 2) == 0) or ((n % 3) == 0) then\n  \
    \    return y\n    else\n      local m = math.sqrt(n)\n      local i = 5\n   \
    \   while i <= m do\n        if ((n % i) == 0) or ((n % (i + 2)) == 0) then\n\
    \          return y\n        end\n        i = i + 6\n      end\n    end\n  end\n\
    \  return x\nend", "    if is_prime(n) then\n        return x\n    else\n    \
    \    return y\n    end\nend", "    -- Assume n is prime\n    local n_is_prime\
    \ = true\n    -- Check if n is divisible by 2\n    if n % 2 == 0 then\n      \
    \  n_is_prime = false\n    else\n        -- Check if n is divisible by odd numbers\
    \ up to sqrt(n)\n        for i = 3, math.sqrt(n), 2 do\n            if n % i ==\
    \ 0 then\n                n_is_prime = false\n                break\n        \
    \    end\n        end\n    end\n    -- Return x if n is prime and y otherwise\n\
    \    if n_is_prime then\n        return x\n    else\n        return y\n    end\n\
    end", "\tif prime(n) then return x\n\telse return y\n\tend\nend", "    if is_prime(n)\
    \ then\n        return x\n    else\n        return y\n    end\nend", "    if n\
    \ < 2 then\n        return y\n    end\n    if n < 4 then\n        return x\n \
    \   end\n    local nSqrt = math.sqrt(n)\n    for i = 2, nSqrt do\n        if n\
    \ % i == 0 then\n            return y\n        end\n    end\n    return x\nend",
  "  -- CODE HERE\nend", "\tassert(type(n) == \"number\", \"n is not a number\")\n\
    \tassert(type(x) == \"number\", \"x is not a number\")\n\tassert(type(y) == \"\
    number\", \"y is not a number\")\n\tassert(n >= 1, \"n is too small\")\n\t-- REPLACE\
    \ THE ERROR WITH YOUR CODE\n\terror(\"This function is not yet implemented.\"\
    )\nend", "  return x\nend", "    -- Insert your code here\n    if isPrime(n) ==\
    \ true then\n        return x\n    else\n        return y\n    end\nend", "  \
    \ -- body of function here\n   return y\nend", "    -- if n is prime, return x\n\
    \    if is_prime(n) then\n        return x\n    -- if n is not prime, return y\n\
    \    else\n        return y\n    end\nend", "    -- your code here\nend", "\t\
    if is_prime(n) then\n\t\treturn x\n\telse\n\t\treturn y\n\tend\nend", "\treturn\
    \ not is_prime(n) and y or x\nend", "    if is_prime(n) then\n        return x\n\
    \    else\n        return y\n    end\nend", "  if __LIB__.is_prime(n) then\n \
    \   return x\n  else\n    return y\n  end\nend", "    if n < 2 then\n        return\
    \ y\n    end\n    for i = 2, n - 1 do\n        if n % i == 0 then\n          \
    \  return y\n        end\n    end\n    return x\nend", "\t-- Exercise 1.1\n\t\
    -- Please write your answer here\n\tif is_prime(n) then\n\t\treturn x\n\telse\n\
    \t\treturn y\n\tend\nend", "  local function is_prime(n)\n    for i = 2, n-1 do\n\
    \      if n % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  if is_prime(n) then\n    return x\n  else\n    return y\n  end\n\
    end", "  -- `is_prime` has been defined elsewhere.\n  if is_prime(n) then\n  \
    \  return x\n  else\n    return y\n  end\nend", "    -- TODO: implement your solution\
    \ here\n    return 0\nend", "  if is_prime(n) then\n    return x\n  else\n   \
    \ return y\n  end\nend", "    if is_prime(n) then\n        return x\n    else\n\
    \        return y\n    end\nend", "    if is_prime(n) then\n        return x\n\
    \    else\n        return y\n    end\nend", "  if (is_prime(n)) then\n    return\
    \ x\n  else\n    return y\n  end\nend", "  return x\nend", "  if not is_prime(n)\
    \ then\n    return y\n  else\n    return x\n  end\nend", "\t-- if isPrime(n) then\n\
    \t-- \treturn x\n\t-- else\n\t-- \treturn y\n\t-- end\n\treturn isPrime(n) and\
    \ x or y\nend", "\tif (prime(n)) then\n\t\treturn x\n\telse\n\t\treturn y\n\t\
    end\nend", '  local res = y', "\t-- TODO\nend", "    return is_prime(n) and x\
    \ or y\nend", "    if isPrime(n) then\n        return x\n    else\n        return\
    \ y\n    end\nend", "    return is_prime(n) and x or y\nend", "    -- check if\
    \ n is a prime number\n    if is_prime(n) then\n        return x\n    else\n \
    \       return y\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
