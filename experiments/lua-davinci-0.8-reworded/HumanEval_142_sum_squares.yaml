name: HumanEval_142_sum_squares
language: lua
prompt: "-- \"\n-- This function will take a table of integers. For all entries in\
  \ the table, the function shall square the integer entry if its index is a \n--\
  \ multiple of 3 and will cube the integer entry if its index is a multiple of 4\
  \ and not a multiple of 3. The function will not \n-- change the entries in the\
  \ table whose indexes are not a multiple of 3 or 4. The function shall then return\
  \ the sum of all entries. \n-- Examples:\n-- >>> lst\n-- {1, 2, 3}\n-- >>> lst\n\
  -- {}\n-- >>> lst\n-- {-1, -5, 2, -1, -5}\nlocal function sum_squares(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
  \    lu.assertEquals(candidate({1, 2, 3}), 6)\n    lu.assertEquals(candidate({1,\
  \ 4, 9}), 14)\n    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({1,\
  \ 1, 1, 1, 1, 1, 1, 1, 1}), 9)\n    lu.assertEquals(candidate({-1, -1, -1, -1, -1,\
  \ -1, -1, -1, -1}), -3)\n    lu.assertEquals(candidate({0}), 0)\n    lu.assertEquals(candidate({-1,\
  \ -5, 2, -1, -5}), -126)\n    lu.assertEquals(candidate({-56, -99, 1, 0, -2}), 3030)\n\
  \    lu.assertEquals(candidate({-1, 0, 0, 0, 0, 0, 0, 0, -1}), 0)\n    lu.assertEquals(candidate({-16,\
  \ -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37}), -14196)\n    lu.assertEquals(candidate({-1,\
  \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10}),\
  \ -1448)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 3 == 0 and\
    \ i % 4 == 0 then\n      sum = sum + v ^ 3\n    elseif i % 3 == 0 then\n     \
    \ sum = sum + v ^ 2\n    else\n      sum = sum + v\n    end\n  end\n  return sum\n\
    end", "\tlocal s = 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 3 == 0 then\n\t\
    \t\tv = v * v\n\t\telseif i % 4 == 0 then\n\t\t\tv = v * v * v\n\t\tend\n\t\t\
    s = s + v\n\tend\n\treturn s\nend", "    local sum = 0\n    for i, entry in ipairs(lst)\
    \ do\n        if i % 3 == 0 and i % 4 == 0 then\n            sum = sum + entry\
    \ * entry * entry\n        elseif i % 3 == 0 then\n            sum = sum + entry\
    \ * entry\n        else\n            sum = sum + entry\n        end\n    end\n\
    \    return sum\nend", "    local sum = 0\n    for i = 1, #lst do\n        local\
    \ value = lst[i]\n        if i % 3 == 0 then\n            value = value * value\n\
    \        elseif i % 4 == 0 then\n            value = value * value * value\n \
    \       end\n        sum = sum + value\n    end\n    return sum\nend", "    local\
    \ sum = 0\n    for i = 1, #lst do\n        if i % 3 == 0 and i % 4 == 0 then\n\
    \            sum = sum + lst[i] ^ 3\n        elseif i % 3 == 0 then\n        \
    \    sum = sum + lst[i] ^ 2\n        else\n            sum = sum + lst[i]\n  \
    \      end\n    end\n    return sum\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(lst)\
    \ do\n\t\tlocal index = i % 4\n\t\tif index == 0 then\n\t\t\tsum = sum + v * v\
    \ * v\n\t\telseif index == 3 then\n\t\t\tsum = sum + v * v\n\t\telse\n\t\t\tsum\
    \ = sum + v\n\t\tend\n\tend\n\treturn sum\nend", "    error \"TODO\"\nend", '  local
    sum = 0', "\tlocal sum = 0\n\t\n\tfor k, v in pairs(lst) do\n\t\tif k % 3 == 0\
    \ then\n\t\t\tv = v * v\n\t\telseif k % 4 == 0 and k % 3 ~= 0 then\n\t\t\tv =\
    \ v * v * v\n\t\tend\n\t\tsum = sum + v\n\tend\n\t\n\treturn sum\nend", "  local\
    \ total = 0\n  for i, num in ipairs(lst) do\n    if i % 3 == 0 and i % 4 == 0\
    \ then\n      total = total + num^3\n    elseif i % 3 == 0 then\n      total =\
    \ total + num^2\n    else\n      total = total + num\n    end\n  end\n  return\
    \ total\nend", "    -- Insert your code here\n    local sum = 0\n    for key,\
    \ value in pairs(lst) do\n        if key % 3 == 0 and key % 4 == 0 then\n    \
    \        sum = sum + value^3\n        elseif key % 3 == 0 then\n            sum\
    \ = sum + value^2\n        else\n            sum = sum + value\n        end\n\
    \    end\n    return sum\nend", "\nend", "  local total = 0\n  for i, v in ipairs(lst)\
    \ do\n    if i % 3 == 0 and i % 4 == 0 then\n      total = total + v^3\n    elseif\
    \ i % 3 == 0 then\n      total = total + v^2\n    else\n      total = total +\
    \ v\n    end\n  end\n  return total\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(lst)\
    \ do\n\t\tif i % 3 == 0 and i % 4 == 0 then\n\t\t\tsum = sum + v * v * v\n\t\t\
    elseif i % 3 == 0 then\n\t\t\tsum = sum + v * v\n\t\telse\n\t\t\tsum = sum + v\n\
    \t\tend\n\tend\n\treturn sum\nend", "  local total = 0\n  for k, v in pairs(lst)\
    \ do\n    if k % 3 == 0 then\n      lst[k] = v ^ 2\n    elseif k % 4 == 0 and\
    \ k % 3 ~= 0 then\n      lst[k] = v ^ 3\n    end\n    total = total + lst[k]\n\
    \  end\n  return total\nend", "  local sum=0\n  for i=1,#lst do\n    local e=lst[i]\n\
    \    if math.fmod(i,3)==0 then\n      e=e*e\n    elseif math.fmod(i,4)==0 then\n\
    \      e=e*e*e\n    end\n    sum=sum+e\n  end\n  return sum\nend", "    local\
    \ len = #lst\n    local sum = 0\n    for i = 1, len do\n        if i % 3 == 0\
    \ then\n            lst[i] = lst[i] * lst[i]\n        elseif i % 4 == 0 then\n\
    \            lst[i] = lst[i] * lst[i] * lst[i]\n        end\n        sum = sum\
    \ + lst[i]\n    end\n    return sum\nend", "\tlocal sum = 0\n\tfor i, val in ipairs(lst)\
    \ do\n\t\tif i % 3 == 0 and i % 4 == 0 then\n\t\t\tsum = sum + val ^ 3\n\t\telseif\
    \ i % 3 == 0 then\n\t\t\tsum = sum + val ^ 2\n\t\telse\n\t\t\tsum = sum + val\n\
    \t\tend\n\tend\n\treturn sum\nend\nassert(sum_squares({1, 2, 3}) == 14)\nassert(sum_squares({})\
    \ == 0)\nassert(sum_squares({-1, -5, 2, -1, -5}) == -48)", "\nend", "\tlocal total\
    \ = 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 3 == 0 and i % 4 == 0 then\n\t\
    \t\tlst[i] = v ^ 3\n\t\telseif i % 3 == 0 then\n\t\t\tlst[i] = v ^ 2\n\t\tend\n\
    \t\ttotal = total + lst[i]\n\tend\n\treturn total\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
