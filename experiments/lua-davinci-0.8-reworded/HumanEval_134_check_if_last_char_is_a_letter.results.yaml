name: HumanEval_134_check_if_last_char_is_a_letter
language: lua
results:
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n\t-- Check if the last character\
    \ is not a space and is alphabetical.\n\treturn txt:sub(-1):find(\"%a\") ~= nil\
    \ and txt:sub(-1):find(\"%S\") ~= nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7uxx8c7p.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7uxx8c7p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  local len = string.len(txt)\n\
    \  if len < 1 then\n    return false\n  end\n  local last_char = string.sub(txt,\
    \ len, len)\n  local last_char_is_alpha = last_char:match('[a-zA-Z]')\n  local\
    \ last_char_not_part_of_word = last_char:match('[^a-zA-Z]')\n  if last_char_is_alpha\
    \ and last_char_not_part_of_word then\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c5lyvg7.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9c5lyvg7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    if #txt <= 0 then\n      \
    \  return false\n    end\n    if txt:find(\"%w$\") then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpou8z73e_.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpou8z73e_.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- Insert code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0z2cza9v.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp0z2cza9v.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ly7nglf.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp4ly7nglf.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- Write your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowfjhhsr.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpowfjhhsr.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n\tif txt:match('%a$') then\n\t\
    \treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkk6lzws.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvkk6lzws.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    if #txt > 0 then\n       \
    \ if string.sub(txt, -1, -1) == ' ' then\n            return false\n        else\n\
    \            return not string.find(txt, '%w%s$')\n        end\n    else\n   \
    \     return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0xw52zgp.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0xw52zgp.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdc_hskw.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprdc_hskw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  -- Your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyvr4fxi.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpzyvr4fxi.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglvbukh7.lua:20:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpglvbukh7.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    if string.match(txt, '%a$')\
    \ and not string.match(txt, '%w$') then\n        return true\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jyf7b69.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3jyf7b69.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6jyoq93.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpn6jyoq93.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  if txt == '' then\n    return\
    \ false\n  end\n  local len = txt:len()\n  local last = txt:sub(len, len)\n  if\
    \ last:match('%w') and last:match('%s') then\n    return true\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'), false)\n\
    \    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrq8kxaw.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplrq8kxaw.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    local last_char = txt:sub(-1)\n\
    \    return last_char:match('%a') and not txt:sub(-2, -2):match('%a')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hd7ec4e.lua:26:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp8hd7ec4e.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  local last = txt:sub(-1, -1)\n\
    \  if last:find('%a') and not last:find('%w') then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_if_last_char_is_a_letter\n    lu.assertEquals(candidate('apple'),\
    \ false)\n    lu.assertEquals(candidate('apple pi e'), true)\n    lu.assertEquals(candidate('eeeee'),\
    \ false)\n    lu.assertEquals(candidate('A'), true)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie '), false)\n    lu.assertEquals(candidate('Pumpkin pie 1'), false)\n   \
    \ lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyor26lf2.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyor26lf2.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n\t-- your code here\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91ptwy38.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp91ptwy38.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  if (txt == '') then\n    return\
    \ false\n  end\n  -- if the last character is an alphabetical character\n  if\
    \ (string.find(txt, '%a$')) then\n    -- check if that alphabetical character\
    \ is not a part of a word.\n    local start, finish = string.find(txt, '%a$')\n\
    \    if (start > 1) then\n      if (not (string.find(txt, '%a%a$'))) then\n  \
    \      return true\n      end\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll51ymlp.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpll51ymlp.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxj8nhdao.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxj8nhdao.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Create a function that returns true if the last character\n-- of a\
    \ given string is an alphabetical character and is not\n-- a part of a word, and\
    \ false otherwise.\n-- Note: \"word\" is a group of characters separated by space.\n\
    -- Examples:\n-- >>> check_if_last_char_is_a_letter('apple pie')\n-- false\n--\
    \ >>> check_if_last_char_is_a_letter('apple pi e')\n-- true\n-- >>> check_if_last_char_is_a_letter('apple\
    \ pi e ')\n-- false\n-- >>> check_if_last_char_is_a_letter('')\n-- false\nlocal\
    \ function check_if_last_char_is_a_letter(txt)\n    -- write your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_if_last_char_is_a_letter\n\
    \    lu.assertEquals(candidate('apple'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e'), true)\n    lu.assertEquals(candidate('eeeee'), false)\n    lu.assertEquals(candidate('A'),\
    \ true)\n    lu.assertEquals(candidate('Pumpkin pie '), false)\n    lu.assertEquals(candidate('Pumpkin\
    \ pie 1'), false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('eeeee\
    \ e '), false)\n    lu.assertEquals(candidate('apple pie'), false)\n    lu.assertEquals(candidate('apple\
    \ pi e '), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfrr7cjd1.lua:21:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpfrr7cjd1.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
