name: HumanEval_61_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
  -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
  -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
  \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
  \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
  \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
  \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
  \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local left = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '(' then\n      left = left + 1\n    else\n      left = left - 1\n   \
    \ end\n    if left < 0 then\n      return false\n    end\n  end\n  return left\
    \ == 0\nend", "    local count = 0\n    for c in brackets:gmatch(\".\") do\n \
    \       if c == \"(\" then\n            count = count + 1\n        elseif c ==\
    \ \")\" then\n            count = count - 1\n        end\n        if count < 0\
    \ then\n            return false\n        end\n    end\n    return count == 0\n\
    end", "  local stack = {}\n  for c in brackets:gmatch('.') do\n    if c == '('\
    \ then\n      stack[#stack + 1] = '('\n    elseif c == ')' then\n      if #stack\
    \ == 0 then\n        return false\n      end\n      stack[#stack] = nil\n    end\n\
    \  end\n  return #stack == 0\nend", "    local found_closing = false\n    for\
    \ i = 1, #brackets do\n        if brackets:sub(i, i) == ')' then\n           \
    \ found_closing = true\n        end\n    end\n    if not found_closing then\n\
    \        return false\n    end\n    local depth = 0\n    for i = 1, #brackets\
    \ do\n        if brackets:sub(i, i) == '(' then\n            depth = depth + 1\n\
    \        elseif brackets:sub(i, i) == ')' then\n            depth = depth - 1\n\
    \        end\n        if depth < 0 then\n            return false\n        end\n\
    \    end\n    return depth == 0\nend", "  local bracketing = 0\n  for c in brackets:gmatch\"\
    .\" do\n    if c == \"(\" then\n      bracketing = bracketing + 1\n    elseif\
    \ c == \")\" then\n      bracketing = bracketing - 1\n    end\n    if bracketing\
    \ < 0 then\n      return false\n    end\n  end\n  return bracketing == 0\nend",
  "\tlocal c = 0\n\tfor b in brackets:gmatch('.') do\n\t\tif b == '(' then\n\t\t\t\
    c = c + 1\n\t\telseif b == ')' then\n\t\t\tc = c - 1\n\t\tend\n\t\tif c < 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn c == 0\nend", "  local count = 0\n\
    \  for _, bracket in ipairs(brackets) do\n    if bracket == '(' then\n      count\
    \ = count + 1\n    elseif bracket == ')' then\n      count = count - 1\n    end\n\
    \    if count < 0 then\n      return false\n    end\n  end\n  return count ==\
    \ 0\nend", "\tlocal brackets = brackets or ''\n\tlocal stack = {}\n\tlocal L =\
    \ brackets:len()\n\tfor i = 1, L do\n\t\tlocal ch = brackets:sub(i, i)\n\t\tif\
    \ ch == '(' then\n\t\t\ttable.insert(stack, ch)\n\t\telseif ch == ')' then\n\t\
    \t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttable.remove(stack)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend", "    local stack = Stack()\n\
    \    for i = 1, #brackets do\n        local b = brackets:sub(i, i)\n        if\
    \ b == '(' then\n            stack:push(b)\n        elseif b == ')' then\n   \
    \         if stack:is_empty() then\n                return false\n           \
    \ else\n                stack:pop()\n            end\n        end\n    end\n \
    \   return stack:is_empty()\nend", "  local open_count = 0\n  for bracket in brackets:gmatch('.')\
    \ do\n    if bracket == '(' then\n      open_count = open_count + 1\n    elseif\
    \ bracket == ')' then\n      open_count = open_count - 1\n    end\n    if open_count\
    \ < 0 then\n      return false\n    end\n  end\n  return open_count == 0\nend",
  "    local stack = Stack()\n    for char in brackets:gmatch('%w') do\n        if\
    \ char == '(' then\n            stack:push(char)\n        elseif char == ')' then\n\
    \            if stack:size() == 0 then\n                return false\n       \
    \     end\n            stack:pop()\n        end\n    end\n    return stack:size()\
    \ == 0\nend", "    if not brackets then return true end\n    local i, m = 0, 0\n\
    \    for _ in brackets:gmatch'%b()' do\n        i = i + 1\n    end\n    for _\
    \ in brackets:gmatch'%b{}' do\n        m = m + 1\n    end\n    return i == m\n\
    end", "\tlocal depth = 0\n\tfor i = 1, brackets:len() do\n\t\tlocal bracket =\
    \ brackets:sub(i, i)\n\t\tif bracket == '(' then\n\t\t\tdepth = depth + 1\n\t\t\
    elseif bracket == ')' then\n\t\t\tdepth = depth - 1\n\t\t\tif depth < 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn depth == 0\nend", " \
    \   local count = 0\n    for i=1, #brackets do\n        if brackets:sub(i,i) ==\
    \ '(' then\n            count = count + 1\n        elseif brackets:sub(i,i) ==\
    \ ')' then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count == 0\nend",
  "    local brackets_stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(brackets_stack, c)\n\
    \        elseif c == ')' then\n            if #brackets_stack == 0 then\n    \
    \            return false\n            else\n                table.remove(brackets_stack)\n\
    \            end\n        end\n    end\n    return #brackets_stack == 0\nend",
  "  local balance = 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n\
    \    if c == '(' then\n      balance = balance + 1\n    elseif c == ')' then\n\
    \      balance = balance - 1\n    end\n    if balance < 0 then\n      return false\n\
    \    end\n  end\n  return balance == 0\nend", "    local depth = 0\n    for i\
    \ = 1, #brackets do\n        local b = brackets:sub(i, i)\n        if b == '('\
    \ then\n            depth = depth + 1\n        elseif b == ')' then\n        \
    \    depth = depth - 1\n        end\n        if depth < 0 then\n            return\
    \ false\n        end\n    end\n    return depth == 0\nend", "  local counter =\
    \ 0\n  for bracket in brackets:gmatch(\".\") do\n    if bracket == \"(\" then\n\
    \      counter = counter + 1\n    elseif bracket == \")\" then\n      counter\
    \ = counter - 1\n    end\n    if counter < 0 then\n      return false\n    end\n\
    \  end\n  return counter == 0\nend", "  local open_seen = 0\n  for c in brackets:gmatch(\"\
    .\") do\n    if c == \"(\" then\n      open_seen = open_seen + 1\n    elseif c\
    \ == \")\" then\n      open_seen = open_seen - 1\n      if open_seen < 0 then\n\
    \        return false\n      end\n    end\n  end\n  return open_seen == 0\nend",
  "  local counter = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"(\" then\n\
    \      counter = counter + 1\n    elseif c == \")\" then\n      counter = counter\
    \ - 1\n    end\n    if counter < 0 then\n      return false\n    end\n  end\n\
    \  return counter == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
