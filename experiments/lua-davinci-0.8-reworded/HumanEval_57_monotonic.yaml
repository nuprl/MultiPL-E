name: HumanEval_57_monotonic
language: lua
prompt: "-- Return true is table elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local monotonic = true\n    local d = l[2] - l[1]\n    local fn\
    \ = d > 0 and math.max or math.min\n    for i = 3, #l do\n        monotonic =\
    \ fn(l[i], l[i - 1]) == l[i]\n        if not monotonic then\n            break\n\
    \        end\n    end\n    return monotonic\nend", "  local prev = l[1]\n  local\
    \ diff\n  for _, v in ipairs(l) do\n    if not diff then\n      diff = v - prev\n\
    \    elseif (v - prev) * diff < 0 then\n      return false\n    end\n    prev\
    \ = v\n  end\n  return true\nend", "  local function monotonic_increasing(l)\n\
    \    if #l == 1 then return true end\n    return l[1] < l[2] and monotonic_increasing({table.unpack(l,\
    \ 2)})\n  end\n  local function monotonic_decreasing(l)\n    if #l == 1 then return\
    \ true end\n    return l[1] > l[2] and monotonic_decreasing({table.unpack(l, 2)})\n\
    \  end\n  return monotonic_increasing(l) or monotonic_decreasing(l)\nend", " \
    \ local n = #l\n  local direction\n  local previous = l[1]\n  for i = 2, n do\n\
    \    local current = l[i]\n    if not direction then\n      if current > previous\
    \ then\n        direction = 1\n      elseif current < previous then\n        direction\
    \ = -1\n      end\n    elseif direction > 0 and current < previous then\n    \
    \  return false\n    elseif direction < 0 and current > previous then\n      return\
    \ false\n    end\n    previous = current\n  end\n  return true\nend", "    local\
    \ direction = math.abs(l[2] - l[1]) < 0 and -1 or 1\n    for i = 2, #l do\n  \
    \      if direction * (l[i] - l[i - 1]) < 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "\tlocal inc = true\n\tlocal dec\
    \ = true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i - 1] then\n\t\t\tinc = false\n\
    \t\tend\n\t\tif l[i] > l[i - 1] then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn\
    \ inc or dec\nend", "\tlocal dir = 0\n\tfor i = 2, #l do\n\t\tlocal delta = l[i]\
    \ - l[i - 1]\n\t\tif delta ~= 0 then\n\t\t\tif dir == 0 then\n\t\t\t\tdir = delta\n\
    \t\t\telseif dir * delta < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn true\nend", "    local is_ascending = true\n    local is_descending\
    \ = true\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n            is_descending\
    \ = false\n        elseif l[i] < l[i - 1] then\n            is_ascending = false\n\
    \        end\n    end\n    return is_ascending or is_descending\nend", "  local\
    \ mono\n  local _list_0 = l\n  for _index_0 = 1, #_list_0 do\n    local v = _list_0[_index_0]\n\
    \    if not (mono) then\n      mono = v\n    else\n      if v < mono then\n  \
    \      mono = v\n      elseif v > mono then\n        mono = v\n      else\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend", "    if #l\
    \ <= 1 then\n        return true\n    end\n    local c = l[1]\n    local dir =\
    \ l[2] > c\n    for i = 2, #l do\n        if l[i] == c then\n            return\
    \ false\n        end\n        if l[i] < c and dir then\n            return false\n\
    \        end\n        if l[i] > c and not dir then\n            return false\n\
    \        end\n        c = l[i]\n    end\n    return true\nend", "\tlocal incr\
    \ = l[1]<l[2]\n\tfor i=3,#l do\n\t\tif incr then\n\t\t\tif l[i]<l[i-1] then return\
    \ false end\n\t\telse\n\t\t\tif l[i]>l[i-1] then return false end\n\t\tend\n\t\
    end\n\treturn true\nend", "  assert_arg_count(1, l)\n  assert_arg_type(1, l, {'table'})\n\
    \  if #l < 2 then return true end\n  local d = l[2] - l[1]\n  for i = 2, #l -\
    \ 1 do\n    if (l[i + 1] - l[i]) * d < 0 then return false end\n  end\n  return\
    \ true\nend", "    local direc\n    for i = 2, #l do\n        if direc == nil\
    \ then\n            direc = l[i] > l[i - 1]\n        elseif direc then\n     \
    \       if l[i] < l[i - 1] then\n                return false\n            end\n\
    \        else\n            if l[i] > l[i - 1] then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "  local asc, desc\
    \ = true, true\n  for i = 2, #l do\n    if l[i-1] > l[i] then\n      asc = false\n\
    \    elseif l[i-1] < l[i] then\n      desc = false\n    end\n  end\n  return asc\
    \ or desc\nend", "\tlocal increasing = true\n\tlocal decreasing = true\n\tfor\
    \ i = 2, #l do\n\t\tif l[i] < l[i - 1] then increasing = false end\n\t\tif l[i]\
    \ > l[i - 1] then decreasing = false end\n\tend\n\treturn increasing or decreasing\n\
    end", "  if #l <= 1 then return true end\n  local inc = l[2] > l[1]\n  for i =\
    \ 2, #l - 1 do\n    if (l[i + 1] > l[i]) ~= inc then return false end\n  end\n\
    \  return true\nend", "  local is_decreasing = l[1] > l[2]\n  for i = 2, #l do\n\
    \    if is_decreasing and l[i] > l[i-1] then\n      return false\n    elseif not\
    \ is_decreasing and l[i] < l[i-1] then\n      return false\n    end\n  end\n \
    \ return true\nend", "\tlocal n = #l\n\tif n <= 1 then return true end\n\tif l[1]\
    \ < l[2] then\n\t\tfor i = 2, n - 1 do\n\t\t\tif l[i] > l[i + 1] then return false\
    \ end\n\t\tend\n\telse\n\t\tfor i = 2, n - 1 do\n\t\t\tif l[i] < l[i + 1] then\
    \ return false end\n\t\tend\n\tend\n\treturn true\nend", "\tlocal up = true\n\t\
    local down = true\n\tlocal old = l[1]\n\tfor _,v in ipairs(l) do\n\t\tif v > old\
    \ then\n\t\t\tdown = false\n\t\telseif v < old then\n\t\t\tup = false\n\t\tend\n\
    \t\told = v\n\tend\n\treturn up or down\nend", "    local decreasing = false\n\
    \    local increasing = false\n    local last", "    local asc = true\n    local\
    \ desc = true\n    for i = 2, #l do\n        asc = asc and l[i] >= l[i - 1]\n\
    \        desc = desc and l[i] <= l[i - 1]\n    end\n    return asc or desc\nend",
  "  local v = l[1]\n  local d = nil", "\tlocal direction = nil\n\tfor i = 2, #l do\n\
    \t\tlocal current = l[i]\n\t\tlocal prev = l[i - 1]\n\t\tlocal delta = current\
    \ - prev\n\t\tif i == 2 then\n\t\t\tdirection = delta\n\t\telseif current * direction\
    \ < prev * direction then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "  for i = 2, #l do\n    if l[i] < l[i - 1] and l[i - 1] - l[i] > 1 then\n\
    \      return false\n    end\n  end\n  return true\nend", "\tlocal inc, dec =\
    \ true, true\n\tfor i = 2, #l do\n\t\tinc = inc and l[i] >= l[i - 1]\n\t\tdec\
    \ = dec and l[i] <= l[i - 1]\n\tend\n\treturn inc or dec\nend", "\tlocal n = table.getn(l)\n\
    \tlocal sign = 1\n\tif n < 2 then\n\t\treturn true\n\tend\n\tif l[1] > l[2] then\n\
    \t\tsign = -1\n\tend\n\tfor i = 2, n - 1 do\n\t\tif sign * (l[i] - l[i + 1]) <\
    \ 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "    local\
    \ rev = l[1] > l[#l]\n    local lo, hi = l[1], l[#l]\n    for i = 2, #l do\n \
    \       if not (rev and lo >= l[i] or hi <= l[i]) then\n            return false\n\
    \        end\n    end\n    return true\nend", "  local direction\n  local prev\
    \ = l[1]\n  for i = 2, #l do\n    local cur = l[i]\n    if prev < cur then\n \
    \     if direction == \"decreasing\" then\n        return false\n      end\n \
    \     direction = \"increasing\"\n    elseif prev > cur then\n      if direction\
    \ == \"increasing\" then\n        return false\n      end\n      direction = \"\
    decreasing\"\n    end\n    prev = cur\n  end\n  return true\nend", "    local\
    \ prev = nil\n    local inc = true\n    local dec = true\n    for _, x in ipairs(l)\
    \ do\n        if prev then\n            inc = inc and x >= prev\n            dec\
    \ = dec and x <= prev\n        end\n        prev = x\n    end\n    return inc\
    \ or dec\nend", "  if #l == 0 then return true end\n  local dir = l[2] - l[1]\n\
    \  for i = 2, #l - 1 do\n    if (l[i+1] - l[i]) * dir < 0 then return false end\n\
    \  end\n  return true\nend", "\tif #l < 2 then return true end\n\tlocal n = l[1]\n\
    \tlocal incr = n < l[2]\n\tfor i = 2, #l do\n\t\tlocal m = l[i]\n\t\tif incr and\
    \ m < n then return false end\n\t\tif not incr and m > n then return false end\n\
    \t\tn = m\n\tend\n\treturn true\nend", "    local m = nil\n    for i, v in ipairs(l)\
    \ do\n        if i > 1 then\n            if v > l[i-1] then\n                if\
    \ m == false then\n                    return false\n                end\n   \
    \             m = true\n            elseif v < l[i-1] then\n                if\
    \ m == true then\n                    return false\n                end\n    \
    \            m = false\n            end\n        end\n    end\n    return true\n\
    end", "\tfor i = 2, #l do\n\t\tif l[i-1] < l[i] then\n\t\t\t-- Increasing\n\t\t\
    \tfor j = i+1, #l do\n\t\t\t\tif l[j-1] > l[j] then\n\t\t\t\t\treturn false\n\t\
    \t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\telseif l[i-1] > l[i] then\n\t\t\t\
    -- Decreasing\n\t\t\tfor j = i+1, #l do\n\t\t\t\tif l[j-1] < l[j] then\n\t\t\t\
    \t\treturn false\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn true\n\t\tend\n\tend\n\t\
    return true\nend", "    local t = {}\n    local size = #l\n    if size == 0 then\n\
    \        return true\n    end\n    local i = 1\n    local inc = 0\n    if l[i]\
    \ < l[i + 1] then\n        inc = 1\n    elseif l[i] > l[i + 1] then\n        inc\
    \ = -1\n    end\n    for i = 2, size - 1 do\n        if inc > 0 and l[i] > l[i\
    \ + 1] then\n            return false\n        elseif inc < 0 and l[i] < l[i +\
    \ 1] then\n            return false\n        end\n    end\n    return true\nend",
  "    assert(type(l) == \"table\", \"Input is not a table.\")\n    if #l < 2 then\
    \ return true end", "\tlocal increase = true\n\tlocal last = 0\n\tlocal first\
    \ = true\n\tfor k,v in pairs(l) do\n\t\tif first then\n\t\t\tfirst = false\n\t\
    \telse\n\t\t\tif increase then\n\t\t\t\tif v < last then\n\t\t\t\t\tincrease =\
    \ false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tif v > last then\n\t\t\t\t\treturn false\n\
    \t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tlast = v\n\tend\n\treturn true\nend", " \
    \   if #l == 0 then return true end\n    local inc = l[1] < l[2]\n    for i =\
    \ 2, #l-1 do\n        if inc ~= (l[i] < l[i+1]) then return false end\n    end\n\
    \    return true\nend", "  if #l < 2 then return true end\n  local diff = l[2]\
    \ - l[1]\n  for i = 3, #l do\n    if diff * (l[i] - l[i-1]) < 0 then return false\
    \ end\n  end\n  return true\nend", "  local len = #l\n  local dir = l[2] - l[1]\n\
    \  local dirs = {'increasing', 'decreasing'}\n  if dir == 0 then\n    return 'constant'\n\
    \  else\n    for i = 3, len do\n      if (dir > 0 and l[i] - l[i - 1] < 0) or\
    \ (dir < 0 and l[i] - l[i - 1] > 0) then\n        return false\n      end\n  \
    \  end\n    return dirs[dir + 1]\n  end\nend", "    if #l == 0 then return false\
    \ end\n    local inc = nil\n    for i = 2, #l do\n        if not inc then\n  \
    \          if l[i] > l[i-1] then\n                inc = true\n            elseif\
    \ l[i] < l[i-1] then\n                inc = false\n            end\n        elseif\
    \ inc and l[i] < l[i-1] then\n            return false\n        elseif not inc\
    \ and l[i] > l[i-1] then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local last = l[1]\n    local dir = false\n    for _,v\
    \ in ipairs(l) do\n        if dir == false then\n            if v > last then\n\
    \                dir = 'up'\n            elseif v < last then\n              \
    \  dir = 'down'\n            end\n        elseif dir == 'up' and v < last then\n\
    \            return false\n        elseif dir == 'down' and v > last then\n  \
    \          return false\n        end\n        last = v\n    end\n    return true\n\
    end", "    local previous_value = l[1]\n    local previous_value_is_positive =\
    \ l[1] > 0\n    for i = 2, #l do\n        local value = l[i]\n        local value_is_positive\
    \ = value > 0\n        if value_is_positive ~= previous_value_is_positive then\n\
    \            return false\n        end\n        if math.abs(value) < math.abs(previous_value)\
    \ then\n            return false\n        end\n        previous_value = value\n\
    \        previous_value_is_positive = value_is_positive\n    end\n    return true\n\
    end", "  local length = #l\n  if length < 2 then\n    return true\n  end\n  local\
    \ increasing = l[1] < l[2]\n  for i = 2, length do\n    if increasing then\n \
    \     if l[i - 1] > l[i] then\n        return false\n      end\n    else\n   \
    \   if l[i - 1] < l[i] then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend", "    local i, v = next(l)\n    if i then\n        local\
    \ x = v\n        for j, w in next, l, i do\n            if x ~= w then\n     \
    \           local increasing = x < w\n                while true do\n        \
    \            i, v = next(l, i)\n                    if not i then\n          \
    \              return true\n                    elseif increasing ~= (x < v) then\n\
    \                        return false\n                    end\n             \
    \       x = v\n                end\n            end\n        end\n    end\n  \
    \  return true\nend", "    if #l == 0 then return true end\n    local asc = l[1]\
    \ <= l[2]\n    for i = 2, #l-1 do\n        if asc and l[i] > l[i+1] then return\
    \ false end\n        if not asc and l[i] < l[i+1] then return false end\n    end\n\
    \    return true\nend", "  local s = l[1] < l[2] and 1 or l[1] > l[2] and -1 or\
    \ 0\n  for i = 2, #l do\n    if s == 0 then\n      s = l[i - 1] < l[i] and 1 or\
    \ l[i - 1] > l[i] and -1 or 0\n    elseif s * (l[i - 1] - l[i]) > 0 then\n   \
    \   return false\n    end\n  end\n  return true\nend", "    local d = l[2] - l[1]\n\
    \    for i = 3, #l do\n        if (l[i] - l[i - 1]) * d < 0 then\n           \
    \ return false\n        end\n    end\n    return true\nend", "    local n = #l\n\
    \    if n < 2 then\n        return true\n    end\n    local prev = l[1]\n    for\
    \ i = 2, n do\n        local x = l[i]\n        if x == prev then\n           \
    \ return true\n        end\n        if x < prev then\n            for j = i +\
    \ 1, n do\n                if l[j] >= x then\n                    return false\n\
    \                end\n            end\n            return true\n        else\n\
    \            for j = i + 1, n do\n                if l[j] <= x then\n        \
    \            return false\n                end\n            end\n            return\
    \ true\n        end\n    end\nend", "  if #l < 2 then return true end\n  local\
    \ sign = sign(l[2] - l[1])\n  if sign == 0 then return false end\n  for i = 3,\
    \ #l do\n    if sign(l[i] - l[i-1]) ~= sign then return false end\n  end\n  return\
    \ true\nend", "    if #l < 2 then\n        return true\n    end\n    local d =\
    \ l[2] - l[1]\n    local ok = true\n    for i = 3, #l do\n        if d * (l[i]\
    \ - l[i - 1]) < 0 then\n            ok = false\n            break\n        end\n\
    \    end\n    return ok\nend", "  if #l == 0 then return false end\n  local prev\
    \ = l[1]\n  local direction = 1\n  for i = 2, #l do\n    if prev == l[i] then\n\
    \      -- we don't care\n    elseif prev < l[i] then\n      if direction == -1\
    \ then return false end\n      direction = 1\n    else\n      if direction ==\
    \ 1 then return false end\n      direction = -1\n    end\n    prev = l[i]\n  end\n\
    \  return true\nend", "  local d = l[2] - l[1]\n  for i = 2, #l do\n    if (l[i]\
    \ - l[i-1]) * d < 0 then\n      return false\n    end\n  end\n  return true\n\
    end", "    if #l < 2 then\n        return true\n    end\n    local direction =\
    \ l[2] > l[1]\n    for i = 3, #l do\n        if direction ~= (l[i] > l[i - 1])\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local i, d\n    for _, v in ipairs(l) do\n        if i then\n            if\
    \ i < v then\n                if d == 'down' then return false end\n         \
    \       d = 'up'\n            elseif i > v then\n                if d == 'up'\
    \ then return false end\n                d = 'down'\n            end\n       \
    \ end\n        i = v\n    end\n    return true\nend", "    local up = l[1] <=\
    \ l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i + 1] ~= up then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  local up\
    \ = 0\n  local down = 0\n  for i = 2, #l do\n    if l[i - 1] < l[i] then\n   \
    \   up = up + 1\n    elseif l[i - 1] > l[i] then\n      down = down + 1\n    end\n\
    \  end\n  return up == 0 or down == 0\nend", "  local d = -2\n  for i = 2, #l\
    \ do\n    local dd = l[i] - l[i-1]\n    if (dd < 0 and d > 0) or (dd > 0 and d\
    \ < 0) then\n      return false\n    end\n    d = dd\n  end\n  return true\nend",
  "  local up, down = true, true\n  for i = 2, #l do\n    if l[i] > l[i-1] then\n\
    \      down = false\n    elseif l[i] < l[i-1] then\n      up = false\n    end\n\
    \  end\n  return up or down\nend", "  return not _.some(l, function(v, k)\n  \
    \  return (k > 1) and (v * l[k - 1] < 0)\n  end)\nend", "    local prev = nil\n\
    \    local increasing = true\n    for _, v in ipairs(l) do\n        if prev ~=\
    \ nil then\n            if increasing then\n                if v < prev then\n\
    \                    increasing = false\n                end\n            else\n\
    \                if v > prev then\n                    return false\n        \
    \        end\n            end\n        end\n        prev = v\n    end\n    return\
    \ true\nend", "    local asc = true\n    local desc = true\n    for i = 2, #l\
    \ do\n        if l[i] < l[i - 1] then\n            asc = false\n        elseif\
    \ l[i] > l[i - 1] then\n            desc = false\n        end\n    end\n    return\
    \ asc or desc\nend", "    local increasing = 0\n    local decreasing = 0\n   \
    \ for i = 2, #l do\n        if l[i] > l[i - 1] then\n            increasing =\
    \ increasing + 1\n        elseif l[i] < l[i - 1] then\n            decreasing\
    \ = decreasing + 1\n        end\n    end\n    return increasing == 0 or decreasing\
    \ == 0\nend", "    local increasing = true\n    local decreasing = true\n    for\
    \ i = 2, #l do\n        if l[i] < l[i - 1] then\n            increasing = false\n\
    \        elseif l[i] > l[i - 1] then\n            decreasing = false\n       \
    \ end\n    end\n    return increasing or decreasing\nend", "  local last = nil\n\
    \  local ok = true\n  for _, v in ipairs(l) do\n    if last and last >= v then\n\
    \      ok = false\n      break\n    end\n    last = v\n  end\n  return ok\nend",
  "    local last, dir = l[1], 0\n    for _, v in ipairs(l) do\n        if dir ==\
    \ 0 then\n            if v > last then\n                dir = 1\n            elseif\
    \ v < last then\n                dir = -1\n            end\n        elseif dir\
    \ == 1 and v < last then\n            return false\n        elseif dir == -1 and\
    \ v > last then\n            return false\n        end\n        last = v\n   \
    \ end\n    return true\nend", "    local prev = l[1]\n    local dir = false\n\
    \    for i = 2, #l do\n        if dir == false then\n            if l[i] > prev\
    \ then\n                dir = 1\n            elseif l[i] < prev then\n       \
    \         dir = -1\n            end\n        elseif (dir == 1 and l[i] < prev)\
    \ or (dir == -1 and l[i] > prev) then\n            return false\n        end\n\
    \        prev = l[i]\n    end\n    return true\nend", "  local s, m = increasing(l),\
    \ decreasing(l)\n  return s or m\nend", "  local increasing = true\n  local decreasing\
    \ = true\n  for i = 2, #l do\n    if l[i] < l[i - 1] then\n      increasing =\
    \ false\n    elseif l[i] > l[i - 1] then\n      decreasing = false\n    end\n\
    \  end\n  return increasing or decreasing\nend", "  local all_increasing = true\n\
    \  local all_decreasing = true\n  for i = 2, #l do\n    if l[i-1] > l[i] then\n\
    \      all_increasing = false\n    elseif l[i-1] < l[i] then\n      all_decreasing\
    \ = false\n    end\n  end\n  return all_increasing or all_decreasing\nend", " \
    \   local direction = nil\n    for i = 2, #l do\n        local d = l[i] - l[i\
    \ - 1]\n        if direction == nil then\n            direction = d\n        elseif\
    \ direction * d < 0 then\n            return false\n        end\n    end\n   \
    \ return true\nend", "    local direction = l[2] - l[1]\n    for i = 2, #l - 1\
    \ do\n        if (l[i+1] - l[i]) * direction < 0 then\n            return false\n\
    \        end\n    end\n    return true\nend", "  if #l <= 1 then return true end\n\
    \  local prev = l[1]\n  local decreasing = l[2] < l[1]\n  for i = 2, #l do\n \
    \   if l[i] < prev and not decreasing then return false end\n    if l[i] > prev\
    \ and decreasing then return false end\n    prev = l[i]\n  end\n  return true\n\
    end", "\tlocal last, incr = l[1], true\n\tfor i = 2, #l do\n\t\tif (incr and last\
    \ > l[i]) or (not incr and last < l[i]) then\n\t\t\treturn false\n\t\tend\n\t\t\
    last = l[i]\n\t\tincr = last > l[i]\n\tend\n\treturn true\nend", "    local len\
    \ = #l\n    local last = l[1]\n    local sign = nil\n    for i = 2, len do\n \
    \       local val = l[i]\n        if val == last then\n            return false\n\
    \        end\n        local s = val > last and 1 or -1\n        if not sign then\n\
    \            sign = s\n        elseif sign ~= s then\n            return false\n\
    \        end\n        last = val\n    end\n    return true\nend", "  local f =\
    \ l[1]\n  local f_decreasing = f < l[2]\n  for i = 2, #l do\n    if f_decreasing\
    \ and f < l[i] then\n      return false\n    elseif not f_decreasing and f > l[i]\
    \ then\n      return false\n    end\n    f = l[i]\n  end\n  return true\nend",
  "    local asc = true\n    local des = true\n    for i=2,#l do\n        if l[i]\
    \ < l[i-1] then\n            asc = false\n        elseif l[i] > l[i-1] then\n\
    \            des = false\n        end\n    end\n    return asc or des\nend", " \
    \   local up = true\n    local down = true\n    for i = 2, #l do\n        up =\
    \ up and l[i] >= l[i - 1]\n        down = down and l[i] <= l[i - 1]\n    end\n\
    \    return up or down\nend", "    if #l == 0 then return true end\n    local\
    \ first, d = l[1], l[2] - l[1]\n    for i = 3, #l do\n        if (l[i] - l[i-1])\
    \ * d < 0 then return false end\n    end\n    return true\nend", "\tlocal n =\
    \ #l\n\tlocal increase = l[1] < l[2]\n\tfor i = 2, n do\n\t\tif l[i] < l[i-1]\
    \ and increase then\n\t\t\treturn false\n\t\telseif l[i] > l[i-1] and not increase\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tlocal d =\
    \ nil\n\tfor i = 2, #l do\n\t\tlocal a = l[i-1]\n\t\tlocal b = l[i]\n\t\tlocal\
    \ r = b - a\n\t\tif r == 0 then\n\t\t\treturn false\n\t\tend\n\t\tif d == nil\
    \ then\n\t\t\td = r\n\t\telseif math.sign(d) ~= math.sign(r) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local up, down = true, true\n\
    \  for i = 2, #l do\n    if l[i] < l[i-1] then up = false end\n    if l[i] > l[i-1]\
    \ then down = false end\n  end\n  return up or down\nend", "\tlocal inc = true\n\
    \tlocal dec = true\n\tfor i=2,#l do\n\t\tif l[i] > l[i-1] then\n\t\t\tdec = false\n\
    \t\telseif l[i] < l[i-1] then\n\t\t\tinc = false\n\t\tend\n\tend\n\treturn inc\
    \ or dec\nend", "  if #l < 2 then return true end\n  local step = l[2] - l[1]\n\
    \  for i = 3, #l do\n    if l[i] - l[i-1] ~= step then return false end\n  end\n\
    \  return true\nend", "  if #l < 2 then return true end\n  local a = l[1]\n  local\
    \ m = a < l[2]\n  for i = 2, #l do\n    local b = l[i]\n    if m and a > b then\
    \ return false end\n    if not m and a < b then return false end\n    a = b\n\
    \  end\n  return true\nend", "    local direction = 0\n    for i = 2, #l do\n\
    \        local diff = l[i] - l[i - 1]\n        if diff > 0 then\n            if\
    \ direction == -1 then\n                return false\n            end\n      \
    \      direction = 1\n        elseif diff < 0 then\n            if direction ==\
    \ 1 then\n                return false\n            end\n            direction\
    \ = -1\n        end\n    end\n    return true\nend", "    if #l < 2 then\n   \
    \     return true\n    end\n    local ", "  local last\n  for i,v in ipairs(l)\
    \ do\n    if not last then\n      last = v\n    elseif v < last then\n      local\
    \ decreasing = true\n      for j=i,#l do\n        if last < l[j] then\n      \
    \    return false\n        end\n        last = l[j]\n      end\n      return decreasing\n\
    \    elseif last < v then\n      local increasing = true\n      for j=i,#l do\n\
    \        if l[j] < last then\n          return false\n        end\n        last\
    \ = l[j]\n      end\n      return increasing\n    end\n  end\n  return true\n\
    end", "    local res = true\n    local first = l[1]\n    local last = first\n\
    \    for _, v in ipairs(l) do\n        if v > last then\n            last = v\n\
    \        elseif v < last then\n            last = v\n        else\n          \
    \  res = false\n            break\n        end\n    end\n    return res\nend",
  "    local increasing = true\n    local decreasing = true\n    for i = 2, #l do\n\
    \        if l[i] > l[i - 1] then\n            decreasing = false\n        elseif\
    \ l[i] < l[i - 1] then\n            increasing = false\n        end\n    end\n\
    \    return increasing or decreasing\nend", "  local slope = math.abs(l[2] - l[1])\n\
    \  for i = 3, #l do\n    if math.abs(l[i] - l[i - 1]) > slope then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local prev = l[1]\n    local\
    \ increasing = true\n    local decreasing = true\n    for _, v in ipairs(l) do\n\
    \        if v < prev then\n            increasing = false\n        elseif v >\
    \ prev then\n            decreasing = false\n        end\n        prev = v\n \
    \   end\n    return increasing or decreasing\nend", "  local last = l[1]\n  local\
    \ increasing = false\n  for i = 2, #l do\n    if l[i] > last then\n      if increasing\
    \ then\n        if last ~= l[i] - 1 then\n          return false\n        end\n\
    \      else\n        increasing = true\n      end\n    elseif l[i] < last then\n\
    \      if not increasing then\n        if last ~= l[i] + 1 then\n          return\
    \ false\n        end\n      else\n        increasing = false\n      end\n    end\n\
    \    last = l[i]\n  end\n  return true\nend", "  local dir = nil\n  for i = 2,\
    \ #l do\n    local diff = l[i] - l[i - 1]\n    if dir == nil then\n      dir =\
    \ diff\n    elseif dir > 0 and diff < 0 then\n      return false\n    elseif dir\
    \ < 0 and diff > 0 then\n      return false\n    end\n  end\n  return true\nend",
  "\tlocal increasing = l[1] < l[2]\n\tfor i = 2, #l - 1 do\n\t\tif l[i] < l[i+1]\
    \ then\n\t\t\tif not increasing then\n\t\t\t\treturn false\n\t\t\tend\n\t\telseif\
    \ l[i] > l[i+1] then\n\t\t\tif increasing then\n\t\t\t\treturn false\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn true\nend", "  local d = l[2] - l[1]\n  for i = 3, #l\
    \ do\n    if l[i] - l[i-1] ~= d then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local last = l[1]\n  local increasing = true\n  for i = 2, #l\
    \ do\n    local v = l[i]\n    if v ~= last then\n      if increasing then\n  \
    \      if v < last then\n          increasing = false\n        end\n      else\n\
    \        if v > last then\n          return false\n        end\n      end\n  \
    \    last = v\n    end\n  end\n  return true\nend", "    if #l < 2 then\n    \
    \    return true\n    end\n    local s = l[2] - l[1]\n    for i = 3, #l do\n \
    \       if (l[i] - l[i - 1]) * s < 0 then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local prev = l[1]\n    local inc = true",
  "  local decreasing = false\n  for i = 2, #l do\n    if (l[i] - l[i-1]) * (decreasing\
    \ and -1 or 1) < 0 then\n      return false\n    end\n    if (l[i] - l[i-1]) <\
    \ 0 then\n      decreasing = true\n    end\n  end\n  return true\nend", "  local\
    \ function monotonic(l, min, max)\n    if #l == 0 then return true end\n    local\
    \ n = table.remove(l, 1)\n    if min and max then\n      if n < min or n > max\
    \ then return false end\n    end\n    return monotonic(l, min and math.min(min,\
    \ n) or n, max and math.max(max, n) or n)\n  end\n  return monotonic(l)\nend",
  "  local function eq(a, b) return a == b end\n  local function lt(a, b) return a\
    \ < b end\n  local function gt(a, b) return a > b end\n  local function f() return\
    \ false end\n  return (l[1] and l[2] and (eq(l[1], l[2]) or\n          lt(l[1],\
    \ l[2]) and monotonic(l, 2, lt) or\n          gt(l[1], l[2]) and monotonic(l,\
    \ 2, gt)) or\n          true)\nend", "    local increasing = nil\n    for i =\
    \ 2, #l do\n        if l[i-1] < l[i] then\n            if increasing == false\
    \ then\n                return false\n            end\n            increasing\
    \ = true\n        elseif l[i-1] > l[i] then\n            if increasing == true\
    \ then\n                return false\n            end\n            increasing\
    \ = false\n        end\n    end\n    return true\nend", "  local inc, dec = true,\
    \ true\n  for i = 2, #l do\n    inc = inc and l[i] >= l[i-1]\n    dec = dec and\
    \ l[i] <= l[i-1]\n  end\n  return inc or dec\nend", "    if type(l) ~= \"table\"\
    \ then\n        return nil, \"The first argument must be a table.\"\n    end\n\
    \    for i = 2, #l do\n        if not(l[i - 1] <= l[i] or l[i - 1] >= l[i]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "\tif\
    \ #l < 3 then return true end\n\tlocal inc = l[2] > l[1]\n\tfor i = 3, #l do\n\
    \t\tif inc and l[i] < l[i-1] then return false end\n\t\tif not inc and l[i] >\
    \ l[i-1] then return false end\n\tend\n\treturn true\nend", "  local c = { a =\
    \ 0, x = 0 }\n  local f = function(c, a)\n    local v = { a = a, x = (a >= c.a)\
    \ and 1 or -1 }\n    return v.x == c.x and v or nil\n  end\n  local t = foldl(f,\
    \ c, l)\n  return t ~= nil\nend", "    local d0 = l[2] - l[1]\n    local d1 =\
    \ d0\n    for i = 3, #l do\n        d1 = l[i] - l[i - 1]\n        if d1 * d0 <\
    \ 0 then\n            return false\n        end\n        d0 = d1\n    end\n  \
    \  return true\nend", "  local last = l[1]\n  local growing = nil\n  for i = 2,\
    \ #l do\n    if growing == nil then\n      growing = l[i] > last\n    elseif growing\
    \ then\n      if l[i] < last then\n        return false\n      end\n    else\n\
    \      if l[i] > last then\n        return false\n      end\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend", "    local last = l[1]\n    local increasing\
    \ = true\n    for _, v in ipairs(l) do\n        if increasing then\n         \
    \   if v < last then\n                increasing = false\n            end\n  \
    \      else\n            if v > last then\n                return false\n    \
    \        end\n        end\n        last = v\n    end\n    return true\nend", " \
    \   local inc, dec = true, true\n    for i = 2, #l do\n        if l[i-1] > l[i]\
    \ then inc = false end\n        if l[i-1] < l[i] then dec = false end\n    end\n\
    \    return inc or dec\nend", "\tlocal last = l[1]\n\tlocal dir = false\n\tfor\
    \ _, v in ipairs(l) do\n\t\tif last < v then\n\t\t\tif dir == true then\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\t\tdir = 'increasing'\n\t\telseif last > v then\n\
    \t\t\tif dir == false then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tdir = 'decreasing'\n\
    \t\tend\n\t\tlast = v\n\tend\n\treturn true\nend", "  local direction = nil\n\
    \  for i = 2, #l do\n    local diff = l[i] - l[i - 1]\n    if not direction then\n\
    \      direction = diff\n    elseif (direction > 0 and diff < 0) or (direction\
    \ < 0 and diff > 0) then\n      return false\n    end\n  end\n  return true\n\
    end", "    local i, d\n    for j, v in ipairs(l) do\n        if i then\n     \
    \       if not d then\n                if v < i then\n                    d =\
    \ -1\n                elseif v > i then\n                    d = 1\n         \
    \       end\n            elseif v * d < i * d then\n                return false\n\
    \            end\n        end\n        i = v\n    end\n    return true\nend",
  "  local d = {}\n  for i = 1, #l - 1 do\n    local x = l[i]\n    local y = l[i +\
    \ 1]\n    local sign = y > x and 1 or -1\n    d[i] = sign\n  end\n  local m =\
    \ table.reduce(d, sign_equals)\n  return m == 1 or m == -1\nend", "\tif #l < 2\
    \ then return true end\n\tlocal inc = l[2] - l[1] > 0\n\tfor i = 2, #l - 1 do\n\
    \t\tif inc ~= (l[i + 1] - l[i] > 0) then return false end\n\tend\n\treturn true\n\
    end", "  local delta = l[2] - l[1]\n  for i = 3, #l do\n    if l[i] - l[i - 1]\
    \ ~= delta then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ increasing = l[1] < l[2]\n  for i = 2, #l - 1 do\n    if l[i] == l[i + 1] then\
    \ return false end\n    if (increasing and l[i] > l[i + 1]) or (not increasing\
    \ and l[i] < l[i + 1]) then\n      return false\n    end\n  end\n  return true\n\
    end", "  local function f(x, y)\n    if y > x then\n      return math.huge\n \
    \   elseif y < x then\n      return -math.huge\n    else\n      return nil\n \
    \   end\n  end\n  return all(l, f)\nend", "\tlocal last = l[1]\n\tlocal state\
    \ = 0\n\tfor i = 2, #l do\n\t\tlocal current = l[i]\n\t\tif current > last then\n\
    \t\t\tif state == 0 then\n\t\t\t\tstate = 1\n\t\t\telseif state == -1 then\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\telseif current < last then\n\t\t\tif state\
    \ == 0 then\n\t\t\t\tstate = -1\n\t\t\telseif state == 1 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\t\tlast = current\n\tend\n\treturn true\nend", " \
    \   local old = l[1]\n    local increasing = old < l[2]\n    for _, v in ipairs(l)\
    \ do\n        if increasing and old > v then\n            return false\n     \
    \   elseif not increasing and old < v then\n            return false\n       \
    \ end\n        old = v\n    end\n    return true\nend", "  local inc = true\n\
    \  local dec = true\n  for i = 2, #l do\n    if l[i] < l[i-1] then\n      inc\
    \ = false\n    elseif l[i] > l[i-1] then\n      dec = false\n    end\n  end\n\
    \  return inc or dec\nend", "    local d = compare(l[1], l[2])\n    for i = 2,\
    \ #l - 1 do\n        if d ~= compare(l[i], l[i + 1]) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tif #l < 2 then return\
    \ true end\n\tlocal last = l[1]\n\tlocal increasing = last < l[2]\n\tfor i = 2,\
    \ #l do\n\t\tif last == l[i] then\n\t\t\treturn false\n\t\telseif increasing ~=\
    \ (last < l[i]) then\n\t\t\treturn false\n\t\tend\n\t\tlast = l[i]\n\tend\n\t\
    return true\nend", "\tlocal i, n = 0, #l\n\tif n < 2 then return true end\n\t\
    if l[1] <= l[2] then\n\t\tfor i = 2, n - 1 do\n\t\t\tif l[i] > l[i + 1] then return\
    \ false end\n\t\tend\n\telse\n\t\tfor i = 2, n - 1 do\n\t\t\tif l[i] < l[i + 1]\
    \ then return false end\n\t\tend\n\tend\n\treturn true\nend", "\tlocal greater,\
    \ lesser = 0, 0\n\tfor i = 2, #l do\n\t\tif l[i] > l[i - 1] then\n\t\t\tgreater\
    \ = greater + 1\n\t\telseif l[i] < l[i - 1] then\n\t\t\tlesser = lesser + 1\n\t\
    \tend\n\tend\n\treturn (greater == 0 or lesser == 0)\nend", "    if #l < 2 then\n\
    \        return true\n    end\n    local c = l[1] < l[2]\n    for i = 2, #l do\n\
    \        if c and l[i] > l[i - 1] then\n            return false\n        elseif\
    \ not c and l[i] < l[i - 1] then\n            return false\n        end\n    end\n\
    \    return true\nend\n_G.monotonic = monotonic", "    local increasing = l[1]\
    \ <= l[2]\n    for i = 2, #l - 1 do\n        if l[i] < l[i + 1] ~= increasing\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local first = l[1]\n  local direction = nil\n  for i = 2, #l do\n    local el\
    \ = l[i]\n    if el ~= first then\n      if direction == nil then\n        direction\
    \ = el > first\n      elseif direction ~= (el > first) then\n        return false\n\
    \      end\n    end\n    first = el\n  end\n  return true\nend", "    local last\
    \ = 0\n    local last_e = nil\n    local increasing = nil\n    for _, e in ipairs(l)\
    \ do\n        if last_e ~= nil then\n            if increasing == nil then\n \
    \               if e > last_e then\n                    increasing = true\n  \
    \              elseif e < last_e then\n                    increasing = false\n\
    \                end\n            elseif increasing then\n                if e\
    \ < last_e then\n                    return false\n                end\n     \
    \       else\n                if e > last_e then\n                    return false\n\
    \                end\n            end\n        end\n        last_e = e\n    end\n\
    \    return true\nend", "  local direction = nil\n  for i = 2, #l do\n    local\
    \ d = l[i] - l[i - 1]\n    if direction == nil then\n      direction = d\n   \
    \ elseif direction * d < 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "\tlocal prev = l[1]\n\tlocal increasing = prev < l[2]\n\tlocal\
    \ len = #l\n\tfor i = 2, len do\n\t\tlocal cur = l[i]\n\t\tif increasing then\n\
    \t\t\tif prev > cur then\n\t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\tif\
    \ prev < cur then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\tprev = cur\n\t\
    end\n\treturn true\nend", '    local direction = 0', "    if #l <= 1 then\n  \
    \      return true\n    end\n    local step = l[2] - l[1]\n    for i = 3, #l do\n\
    \        if l[i] - l[i - 1] ~= step then\n            return false\n        end\n\
    \    end\n    return true\nend", "  local f = function(x, y) return x > y end\n\
    \  local c = l[1]\n  for i = 2, #l do\n    if f(c, l[i]) ~= (l[i] > l[i - 1])\
    \ then\n      return false\n    end\n    c = l[i]\n  end\n  return true\nend",
  "\tlocal comp = #l > 0 and l[1] < l[2]\n\tfor i = 2, #l - 1 do\n\t\tif l[i] == l[i\
    \ + 1] then return false end\n\t\tif comp ~= (l[i] < l[i + 1]) then return false\
    \ end\n\tend\n\treturn true\nend", "  local direction = l[2] - l[1]\n  for i =\
    \ 2, #l do\n    if math.sign(l[i] - l[i - 1]) ~= direction then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if #l < 2 then return true end\n\
    \  local dir = l[2] - l[1]\n  for i = 2, #l - 1 do\n    if dir > 0 and l[i + 1]\
    \ < l[i] then return false end\n    if dir < 0 and l[i + 1] > l[i] then return\
    \ false end\n  end\n  return true\nend", "    local a = l[1]\n    local inc =\
    \ nil\n    for i = 2, #l do\n        if inc == nil then\n            if l[i] >\
    \ a then\n                inc = true\n            elseif l[i] < a then\n     \
    \           inc = false\n            end\n        elseif inc and l[i] < a then\n\
    \            return false\n        elseif not inc and l[i] > a then\n        \
    \    return false\n        end\n        a = l[i]\n    end\n    return true\nend",
  "  local m = l[1]\n  local mode = 0\n  for _, i in ipairs(l) do\n    if mode ==\
    \ 0 then\n      if i == m then\n        --same value\n      elseif i > m then\n\
    \        mode = 1\n      else\n        mode = -1\n      end\n    elseif mode ==\
    \ 1 then\n      if i < m then\n        return false\n      end\n    elseif mode\
    \ == -1 then\n      if i > m then\n        return false\n      end\n    end\n\
    \    m = i\n  end\n  return true\nend", "    return #table.unique(l) == #l\nend",
  "\tlocal n = #l\n\tif n <= 1 then return true end\n\tif l[2] > l[1] then\n\t\tfor\
    \ i = 3, n do\n\t\t\tif l[i] < l[i-1] then return false end\n\t\tend\n\telse\n\
    \t\tfor i = 3, n do\n\t\t\tif l[i] > l[i-1] then return false end\n\t\tend\n\t\
    end\n\treturn true\nend", "    local d, c\n    for i, v in ipairs(l) do\n    \
    \    if i > 1 then\n            if c == 0 then\n                c = (v > d) and\
    \ 1 or -1\n            elseif c ~= (v > d and 1 or -1) then\n                return\
    \ false\n            end\n        end\n        d = v\n    end\n    return true\n\
    end", "    if #l < 2 then\n        return true\n    end\n    local asc, desc =\
    \ true, true\n    for i = 2, #l do\n        if l[i] < l[i - 1] then\n        \
    \    asc = false\n        elseif l[i] > l[i - 1] then\n            desc = false\n\
    \        end\n    end\n    return asc or desc\nend", "    local n = #l\n    if\
    \ n < 2 then\n        return true\n    end\n    local inc = (l[1] <= l[2])\n \
    \   for i = 2, n-1 do\n        if (l[i] <= l[i+1]) ~= inc then\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tlocal incr, last_v =\
    \ true, nil\n\tfor _, v in ipairs(l) do\n\t\tif last_v ~= nil then\n\t\t\tif incr\
    \ then\n\t\t\t\tif v < last_v then incr = false end\n\t\t\telse\n\t\t\t\tif v\
    \ > last_v then return false end\n\t\t\tend\n\t\tend\n\t\tlast_v = v\n\tend\n\t\
    return true\nend", "  local dir = 0\n  for i = 2, #l do\n    local diff = l[i]\
    \ - l[i - 1]\n    if dir == 0 then\n      dir = diff\n    elseif dir ~= 0 and\
    \ diff ~= 0 and diff ~= dir then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local prev = l[1]\n    local up\n    for _, x in ipairs(l)\
    \ do\n        if prev == x then\n            goto continue\n        end\n    \
    \    if up == nil then\n            up = x > prev\n        elseif up ~= (x > prev)\
    \ then\n            return false\n        end\n        prev = x\n        ::continue::\n\
    \    end\n    return true\nend", "  local cmp = l[1] > l[2] and -1 or 1\n  for\
    \ i = 1, #l - 1 do\n    if cmp*(l[i] - l[i+1]) < 0 then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if #l < 2 then\n        return true\n\
    \    end\n    local mon = l[2] - l[1] > 0\n    for i = 2, #l - 1 do\n        if\
    \ l[i + 1] - l[i] > 0 ~= mon then\n            return false\n        end\n   \
    \ end\n    return true\nend", "    if #l < 2 then\n        return true\n    end\n\
    \    local inc = (l[2] > l[1])\n    for i = 3, #l do\n        if inc and l[i]\
    \ < l[i - 1] then\n            return false\n        elseif not inc and l[i] >\
    \ l[i - 1] then\n            return false\n        end\n    end\n    return true\n\
    end", "  if #l < 2 then return true end\n  local m = l[2] - l[1] > 0\n  for i\
    \ = 2, #l - 1 do\n    if (l[i+1] - l[i]) * m < 0 then return false end\n  end\n\
    \  return true\nend", "  local incr = l[1] < l[2]\n  for i = 2, #l do\n    if\
    \ l[i] < l[i-1] then\n      if incr then return false end\n    elseif l[i] > l[i-1]\
    \ then\n      if not incr then return false end\n    end\n  end\n  return true\n\
    end", "    local inc = false\n    local dec = false\n    local len = #l\n    for\
    \ i = 1, len - 1 do\n        if l[i] < l[i + 1] then\n            inc = true\n\
    \        elseif l[i] > l[i + 1] then\n            dec = true\n        end\n  \
    \      if inc and dec then\n            return false\n        end\n    end\n \
    \   return true\nend", "  local last = l[1]\n  local next = last\n  local i =\
    \ 2\n  while next ~= nil do\n    next = l[i]\n    if next ~= nil then\n      if\
    \ math.abs(next - last) < 0.000001 then\n        last = next\n      elseif last\
    \ < next then\n        if last < 0 and next < 0 then\n          return false\n\
    \        end\n      elseif last > next then\n        if last > 0 and next > 0\
    \ then\n          return false\n        end\n      end\n      last = next\n  \
    \  end\n    i = i + 1\n  end\n  return true\nend", "    local cmp = function(a,\
    \ b) return a >= b end\n    local m, eq = 0, 0\n    local prev = nil\n    for\
    \ _, v in ipairs(l) do\n        if v ~= prev then\n            if not prev then\n\
    \                prev = v\n            else\n                local eq_new = 0\n\
    \                if cmp(v, prev) then\n                    m = m + 1\n       \
    \             if v == prev then\n                        eq_new = 1\n        \
    \            end\n                else\n                    m = m - 1\n      \
    \              if v == prev then\n                        eq_new = -1\n      \
    \              end\n                end\n                if eq ~= 0 and eq ~=\
    \ eq_new then\n                    return false\n                end\n       \
    \         eq = eq_new\n                prev = v\n            end\n        end\n\
    \    end\n    return true\nend", "\tlocal inc = true\n\tlocal dec = true\n\tlocal\
    \ last = nil\n\tfor _, v in ipairs(l) do\n\t\tif last then\n\t\t\tif inc and v\
    \ < last then\n\t\t\t\tinc = false\n\t\t\tend\n\t\t\tif dec and v > last then\n\
    \t\t\t\tdec = false\n\t\t\tend\n\t\tend\n\t\tlast = v\n\tend\n\treturn inc or\
    \ dec\nend", "  return (l[2] - l[1])*(l[#l] - l[#l-1]) >= 0\nend", "  if #l <=\
    \ 1 then return true end\n  local i, j = l[1], l[2]\n  local increasing = (i <\
    \ j)\n  for i = 2, #l - 1 do\n    if (increasing and l[i] > l[i + 1]) or (not\
    \ increasing and l[i] < l[i + 1]) then\n      return false\n    end\n  end\n \
    \ return true\nend", "    if #l < 2 then\n        return true\n    end\n    local\
    \ prev = l[1]\n    local cmp = l[2] > prev and ge or le\n    for i = 2, #l do\n\
    \        if not cmp(l[i], prev) then\n            return false\n        end\n\
    \        prev = l[i]\n    end\n    return true\nend", "\tlocal sign = nil\n\t\
    local prev = nil\n\tfor i, v in ipairs(l) do\n\t\tif prev then\n\t\t\tlocal sign2\
    \ = sign(v - prev)\n\t\t\tif sign2 ~= sign then\n\t\t\t\treturn false\n\t\t\t\
    end\n\t\t\tsign = sign2\n\t\telse\n\t\t\tsign = sign(v)\n\t\tend\n\t\tprev = v\n\
    \tend\n\treturn true\nend", "  if #l < 2 then return true end\n  local d = l[2]\
    \ - l[1]\n  for i = 3, #l do\n    if l[i] - l[i-1] ~= d then return false end\n\
    \  end\n  return true\nend", "  local prev = l[1]\n  local dir = nil\n  for i\
    \ = 2, #l do\n    local cur = l[i]\n    if prev ~= cur then\n      if dir == nil\
    \ then\n        dir = prev < cur\n      elseif dir ~= (prev < cur) then\n    \
    \    return false\n      end\n    end\n    prev = cur\n  end\n  return true\n\
    end", "    local acending = true\n    local decreasing = true\n    local last\
    \ = l[1]\n    for i = 2, #l do\n        local current = l[i]\n        if last\
    \ > current then\n            acending = false\n        elseif last < current\
    \ then\n            decreasing = false\n        end\n        last = current\n\
    \    end\n    return acending or decreasing\nend", "  local mono = true\n  local\
    \ last = math.huge\n  for _, v in ipairs(l) do\n    if mono and last ~= math.huge\
    \ then\n      mono = mono and v >= last\n    end\n    last = v\n  end\n  return\
    \ mono\nend", "    local direction = 0\n    for i = 2, #l do\n        local d\
    \ = l[i] - l[i - 1]\n        if direction == 0 then\n            direction = d\n\
    \        elseif d ~= 0 and d ~= direction then\n            return false\n   \
    \     end\n    end\n    return true\nend", "    local n = #l\n    local s = 0\n\
    \    for i = 2, n do\n        if l[i] > l[i - 1] then\n            s = s + 1\n\
    \        elseif l[i] < l[i - 1] then\n            s = s - 1\n        end\n   \
    \ end\n    return s == n - 1 or s == 1 - n\nend", "  local n = #l\n  if n == 0\
    \ then return true end\n  local invert = l[1] > l[n]\n  for i = 2, n do\n    if\
    \ (invert and l[i] > l[i-1]) or (not invert and l[i] < l[i-1]) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if #l <= 1 then\n        return\
    \ true\n    end\n    local d = l[2] - l[1]\n    if d == 0 then\n        return\
    \ false\n    end\n    for i = 3, #l do\n        if (l[i] - l[i - 1]) * d < 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ dir = nil\n    for i = 2, #l do\n        local new_dir = l[i-1] < l[i]\n   \
    \     if dir ~= nil and dir ~= new_dir then\n            return false\n      \
    \  end\n        dir = new_dir\n    end\n    return true\nend", "    local increasing\
    \ = true\n    local decreasing = true\n    for i = 2, #l do\n        if l[i] >\
    \ l[i - 1] then\n            decreasing = false\n        elseif l[i] < l[i - 1]\
    \ then\n            increasing = false\n        end\n    end\n    return increasing\
    \ or decreasing\nend", "  local len = #l\n  if len < 2 then return true end\n\
    \  local n = l[2] - l[1]\n  for i = 3, len do\n    if n * (l[i] - l[i-1]) < 0\
    \ then return false end\n  end\n  return true\nend", "    local direction = 1\n\
    \    local prev = l[1]\n    for i = 2, #l do\n        local cur = l[i]\n     \
    \   local d = cur - prev\n        if d == 0 then\n            -- skip\n      \
    \  elseif d > 0 then\n            if direction < 0 then\n                return\
    \ false\n            end\n            direction = 1\n        else\n          \
    \  if direction > 0 then\n                return false\n            end\n    \
    \        direction = -1\n        end\n        prev = cur\n    end\n    return\
    \ true\nend", "\tlocal d = {}\n\tfor i = 1, #l - 1 do\n\t\td[i] = l[i + 1] - l[i]\n\
    \tend\n\tlocal prev = d[1]\n\tfor i = 2, #d do\n\t\tif d[i] * prev < 0 then\n\t\
    \t\treturn false\n\t\tend\n\t\tprev = d[i]\n\tend\n\treturn true\nend", "    local\
    \ n = #l\n    if n < 2 then\n        return true\n    end\n    local direction\
    \ = l[2] > l[1]\n    for i = 3, n do\n        if l[i] == l[i - 1] then\n     \
    \       return false\n        end\n        if direction ~= (l[i] > l[i - 1]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ prev = l[1]\n    local direction = 0\n    for i, v in ipairs(l) do\n       \
    \ if i == 1 then goto continue end\n        local diff = v - prev\n        if\
    \ direction == 0 then\n            direction = diff\n        elseif direction\
    \ * diff < 0 then\n            return false\n        end\n        prev = v\n \
    \       ::continue::\n    end\n    return true\nend", "\tif #l == 0 then return\
    \ true end\n\tlocal direction = util.cmp(l[1], l[2])\n\tfor i = 2, #l - 1 do\n\
    \t\tif util.cmp(l[i], l[i + 1]) ~= direction then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend", "\tif #l < 2 then return true end\n\tlocal inc = l[2]\
    \ > l[1]\n\tfor i = 3, #l do\n\t\tif inc and l[i] < l[i-1] then return false end\n\
    \t\tif not inc and l[i] > l[i-1] then return false end\n\tend\n\treturn true\n\
    end", "    local prev = l[1]\n    local increasing = nil\n    for _, v in ipairs(l)\
    \ do\n        if increasing == nil then\n            if v > prev then\n      \
    \          increasing = true\n            elseif v < prev then\n             \
    \   increasing = false\n            end\n        elseif increasing and v < prev\
    \ then\n            return false\n        elseif not increasing and v > prev then\n\
    \            return false\n        end\n        prev = v\n    end\n    return\
    \ true\nend", "    if #l < 2 then\n        return true\n    end\n    local inc\
    \ = l[2] > l[1]\n    for i = 3, #l do\n        if inc and l[i] < l[i - 1] then\n\
    \            return false\n        elseif not inc and l[i] > l[i - 1] then\n \
    \           return false\n        end\n    end\n    return true\nend", "\tlocal\
    \ cmp = l[1] > l[2] and '>' or '<'\n\tfor i = 2, #l - 1 do\n\t\tif not (l[i] ..\
    \ cmp .. l[i + 1]) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "  local last = l[1]\n  local direction = 0\n  for i = 2, #l do\n    local v = l[i]\n\
    \    if direction == 0 then\n      direction = (v - last) / abs(v - last)\n  \
    \  elseif direction * (v - last) < 0 then\n      return false\n    end\n    last\
    \ = v\n  end\n  return true\nend", "  local function a(a, b) return a < b end\n\
    \  local function b(a, b) return a > b end\n  local c = l[1] > l[2] and b or a\n\
    \  for k, v in ipairs(l) do\n    if not k or c(l[k], l[k-1]) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "\tassert(type(l) == \"table\",\
    \ \"Invalid argument #1\")\n\tlocal prev = nil\n\tlocal ordered = true\n\tlocal\
    \ direction = nil\n\tfor i, v in ipairs(l) do\n\t\tif ordered then\n\t\t\tif prev\
    \ then\n\t\t\t\tif direction == nil then\n\t\t\t\t\tdirection = v > prev\n\t\t\
    \t\telse\n\t\t\t\t\tif direction then\n\t\t\t\t\t\tordered = v > prev\n\t\t\t\t\
    \telse\n\t\t\t\t\t\tordered = v < prev\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\
    \t\t\tprev = v\n\t\tend\n\tend\n\treturn ordered\nend", "\tlocal min, max = l[1],\
    \ l[1]\n\tfor _, v in ipairs(l) do\n\t\tif v < min then\n\t\t\tmin = v\n\t\telseif\
    \ v > max then\n\t\t\tmax = v\n\t\tend\n\tend\n\treturn max-min == (#l-1)*l[1]\n\
    end", "\tlocal incr = l[1] < l[2]\n\tfor i = 3, #l do\n\t\tif incr and l[i] <\
    \ l[i - 1] then\n\t\t\treturn false\n\t\telseif not incr and l[i] > l[i - 1] then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  if #l < 2 then return\
    \ true end\n  local inc = l[2] > l[1]\n  for i = 2, #l do\n    if inc and l[i]\
    \ < l[i-1] then return false end\n    if not inc and l[i] > l[i-1] then return\
    \ false end\n  end\n  return true\nend", "  local inc = l[1] < l[2]\n  for i =\
    \ 2, #l - 1 do\n    if inc and l[i] > l[i + 1] then return false end\n    if not\
    \ inc and l[i] < l[i + 1] then return false end\n  end\n  return true\nend", " \
    \ local is_increasing = nil\n  for i = 2, #l do\n    if l[i] ~= l[i-1] then\n\
    \      if is_increasing == nil then\n        is_increasing = l[i] > l[i-1]\n \
    \     elseif (is_increasing and l[i] < l[i-1]) or\n              (not is_increasing\
    \ and l[i] > l[i-1]) then\n        return false\n      end\n    end\n  end\n \
    \ return true\nend", "    local d, e = '+', l[1]\n    for _, v in ipairs(l) do\n\
    \        if e == v then\n            goto continue\n        end\n        if e\
    \ < v then\n            if d == '-' then\n                return false\n     \
    \       end\n            d = '+'\n        else\n            if d == '+' then\n\
    \                return false\n            end\n            d = '-'\n        end\n\
    \        e = v\n        ::continue::\n    end\n    return true\nend", "  local\
    \ t = l[1]\n  for i = 2, #l do\n    if t > l[i] then\n      t = l[i]\n    elseif\
    \ t < l[i] then\n      return false\n    end\n  end\n  return true\nend", "  \
    \  if #l == 0 then return true end\n    local increasing = l[1] <= l[2]\n    for\
    \ i = 2, #l - 1 do\n        if increasing then\n            if l[i] > l[i + 1]\
    \ then return false end\n        else\n            if l[i] < l[i + 1] then return\
    \ false end\n        end\n    end\n    return true\nend", "  local d = l[2] -\
    \ l[1]\n  for i = 2, #l - 1 do\n    if (l[i + 1] - l[i]) * d < 0 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if #l == 0 then return true end\n\
    \  local prev = l[1]\n  local result = true\n  local step = nil\n  for i=2,#l\
    \ do\n    local cur = l[i]\n    if prev == cur then\n      -- continue; ok\n \
    \   elseif step == nil then\n      if prev < cur then\n        step = 'increasing'\n\
    \      else\n        step = 'decreasing'\n      end\n    elseif step == 'increasing'\
    \ then\n      if prev > cur then\n        result = false\n        break\n    \
    \  end\n    elseif step == 'decreasing' then\n      if prev < cur then\n     \
    \   result = false\n        break\n      end\n    end\n    prev = cur\n  end\n\
    \  return result\nend", "    local inc = l[1] > l[2]\n    for i = 2, #l - 1 do\n\
    \        if (inc and l[i] > l[i + 1]) or (not inc and l[i] < l[i + 1]) then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ increasing = true\n    local decreasing = true\n    for i=2,#l do\n        if\
    \ l[i] < l[i-1] then\n            increasing = false\n        elseif l[i] > l[i-1]\
    \ then\n            decreasing = false\n        end\n    end\n    return increasing\
    \ or decreasing\nend", "  local p\n  for _, i in ipairs(l) do\n    if not p then\n\
    \      p = i\n    elseif p < i then\n      p = i\n    elseif p > i then\n    \
    \  return false\n    end\n  end\n  return true\nend", "\tlocal inc, dec = true,\
    \ true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i-1] then inc = false end\n\t\tif\
    \ l[i] > l[i-1] then dec = false end\n\tend\n\treturn inc or dec\nend", "    if\
    \ #l < 2 then\n        return true\n    end\n    local direction = l[2] - l[1]\n\
    \    local anydirection = direction == 0 and 1 or (direction > 0 and 1 or -1)\n\
    \    for i = 2, #l - 1 do\n        if l[i + 1] - l[i] ~= 0 and\n            anydirection\
    \ ~= (l[i + 1] - l[i] > 0 and 1 or -1) then\n            return false\n      \
    \  end\n    end\n    return true\nend", "    local incr = 0\n    local prev =\
    \ nil\n    for _, v in ipairs(l) do\n        if prev ~= nil then\n           \
    \ if v > prev then\n                if incr == -1 then\n                    return\
    \ false\n                end\n                incr = 1\n            elseif v <\
    \ prev then\n                if incr == 1 then\n                    return false\n\
    \                end\n                incr = -1\n            end\n        end\n\
    \        prev = v\n    end\n    return true\nend", '    local d = 0']
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
