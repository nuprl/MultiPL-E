name: HumanEval_57_monotonic
language: lua
prompt: "-- Return true is table elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local monotonic = true\n    local d = l[2] - l[1]\n    local fn\
    \ = d > 0 and math.max or math.min\n    for i = 3, #l do\n        monotonic =\
    \ fn(l[i], l[i - 1]) == l[i]\n        if not monotonic then\n            break\n\
    \        end\n    end\n    return monotonic\nend", "  local prev = l[1]\n  local\
    \ diff\n  for _, v in ipairs(l) do\n    if not diff then\n      diff = v - prev\n\
    \    elseif (v - prev) * diff < 0 then\n      return false\n    end\n    prev\
    \ = v\n  end\n  return true\nend", "  local function monotonic_increasing(l)\n\
    \    if #l == 1 then return true end\n    return l[1] < l[2] and monotonic_increasing({table.unpack(l,\
    \ 2)})\n  end\n  local function monotonic_decreasing(l)\n    if #l == 1 then return\
    \ true end\n    return l[1] > l[2] and monotonic_decreasing({table.unpack(l, 2)})\n\
    \  end\n  return monotonic_increasing(l) or monotonic_decreasing(l)\nend", " \
    \ local n = #l\n  local direction\n  local previous = l[1]\n  for i = 2, n do\n\
    \    local current = l[i]\n    if not direction then\n      if current > previous\
    \ then\n        direction = 1\n      elseif current < previous then\n        direction\
    \ = -1\n      end\n    elseif direction > 0 and current < previous then\n    \
    \  return false\n    elseif direction < 0 and current > previous then\n      return\
    \ false\n    end\n    previous = current\n  end\n  return true\nend", "    local\
    \ direction = math.abs(l[2] - l[1]) < 0 and -1 or 1\n    for i = 2, #l do\n  \
    \      if direction * (l[i] - l[i - 1]) < 0 then\n            return false\n \
    \       end\n    end\n    return true\nend", "\tlocal inc = true\n\tlocal dec\
    \ = true\n\tfor i = 2, #l do\n\t\tif l[i] < l[i - 1] then\n\t\t\tinc = false\n\
    \t\tend\n\t\tif l[i] > l[i - 1] then\n\t\t\tdec = false\n\t\tend\n\tend\n\treturn\
    \ inc or dec\nend", "\tlocal dir = 0\n\tfor i = 2, #l do\n\t\tlocal delta = l[i]\
    \ - l[i - 1]\n\t\tif delta ~= 0 then\n\t\t\tif dir == 0 then\n\t\t\t\tdir = delta\n\
    \t\t\telseif dir * delta < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn true\nend", "    local is_ascending = true\n    local is_descending\
    \ = true\n    for i = 2, #l do\n        if l[i] > l[i - 1] then\n            is_descending\
    \ = false\n        elseif l[i] < l[i - 1] then\n            is_ascending = false\n\
    \        end\n    end\n    return is_ascending or is_descending\nend", "  local\
    \ mono\n  local _list_0 = l\n  for _index_0 = 1, #_list_0 do\n    local v = _list_0[_index_0]\n\
    \    if not (mono) then\n      mono = v\n    else\n      if v < mono then\n  \
    \      mono = v\n      elseif v > mono then\n        mono = v\n      else\n  \
    \      return false\n      end\n    end\n  end\n  return true\nend", "    if #l\
    \ <= 1 then\n        return true\n    end\n    local c = l[1]\n    local dir =\
    \ l[2] > c\n    for i = 2, #l do\n        if l[i] == c then\n            return\
    \ false\n        end\n        if l[i] < c and dir then\n            return false\n\
    \        end\n        if l[i] > c and not dir then\n            return false\n\
    \        end\n        c = l[i]\n    end\n    return true\nend", "\tlocal incr\
    \ = l[1]<l[2]\n\tfor i=3,#l do\n\t\tif incr then\n\t\t\tif l[i]<l[i-1] then return\
    \ false end\n\t\telse\n\t\t\tif l[i]>l[i-1] then return false end\n\t\tend\n\t\
    end\n\treturn true\nend", "  assert_arg_count(1, l)\n  assert_arg_type(1, l, {'table'})\n\
    \  if #l < 2 then return true end\n  local d = l[2] - l[1]\n  for i = 2, #l -\
    \ 1 do\n    if (l[i + 1] - l[i]) * d < 0 then return false end\n  end\n  return\
    \ true\nend", "    local direc\n    for i = 2, #l do\n        if direc == nil\
    \ then\n            direc = l[i] > l[i - 1]\n        elseif direc then\n     \
    \       if l[i] < l[i - 1] then\n                return false\n            end\n\
    \        else\n            if l[i] > l[i - 1] then\n                return false\n\
    \            end\n        end\n    end\n    return true\nend", "  local asc, desc\
    \ = true, true\n  for i = 2, #l do\n    if l[i-1] > l[i] then\n      asc = false\n\
    \    elseif l[i-1] < l[i] then\n      desc = false\n    end\n  end\n  return asc\
    \ or desc\nend", "\tlocal increasing = true\n\tlocal decreasing = true\n\tfor\
    \ i = 2, #l do\n\t\tif l[i] < l[i - 1] then increasing = false end\n\t\tif l[i]\
    \ > l[i - 1] then decreasing = false end\n\tend\n\treturn increasing or decreasing\n\
    end", "  if #l <= 1 then return true end\n  local inc = l[2] > l[1]\n  for i =\
    \ 2, #l - 1 do\n    if (l[i + 1] > l[i]) ~= inc then return false end\n  end\n\
    \  return true\nend", "  local is_decreasing = l[1] > l[2]\n  for i = 2, #l do\n\
    \    if is_decreasing and l[i] > l[i-1] then\n      return false\n    elseif not\
    \ is_decreasing and l[i] < l[i-1] then\n      return false\n    end\n  end\n \
    \ return true\nend", "\tlocal n = #l\n\tif n <= 1 then return true end\n\tif l[1]\
    \ < l[2] then\n\t\tfor i = 2, n - 1 do\n\t\t\tif l[i] > l[i + 1] then return false\
    \ end\n\t\tend\n\telse\n\t\tfor i = 2, n - 1 do\n\t\t\tif l[i] < l[i + 1] then\
    \ return false end\n\t\tend\n\tend\n\treturn true\nend", "\tlocal up = true\n\t\
    local down = true\n\tlocal old = l[1]\n\tfor _,v in ipairs(l) do\n\t\tif v > old\
    \ then\n\t\t\tdown = false\n\t\telseif v < old then\n\t\t\tup = false\n\t\tend\n\
    \t\told = v\n\tend\n\treturn up or down\nend", "    local decreasing = false\n\
    \    local increasing = false\n    local last"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
