name: HumanEval_60_sum_to_n
language: lua
prompt: "-- sum_to_n is a function that sums numbers from 1 to n.\n-- >>> sum_to_n(30)\n\
  -- 465\n-- >>> sum_to_n(100)\n-- 5050\n-- >>> sum_to_n(5)\n-- 15\n-- >>> sum_to_n(10)\n\
  -- 55\n-- >>> sum_to_n(1)\n-- 1\nlocal function sum_to_n(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_to_n\n\
  \    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(6), 21)\n \
  \   lu.assertEquals(candidate(11), 66)\n    lu.assertEquals(candidate(30), 465)\n\
  \    lu.assertEquals(candidate(100), 5050)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return (n*(n+1))/2\nend", "  return n * (n + 1) / 2\nend", "  return\
    \ n*(n+1)/2\nend", "    return (n*(n+1))/2\nend", "  return n*(n+1)/2\nend", " \
    \ if n == 1 then\n    return 1\n  else\n    return n + sum_to_n(n-1)\n  end\n\
    end", "  if n <= 0 then\n    return 0\n  else\n    return n + sum_to_n(n-1)\n\
    \  end\nend", "  if n <= 0 then\n    return 0\n  else\n    return n + sum_to_n(n-1)\n\
    \  end\nend", "    return n * (n + 1) / 2\nend", "    return n * (n + 1) / 2\n\
    end", "  return n * (n + 1) / 2\nend", "    return (n * (n + 1)) / 2\nend", " \
    \   if n == 1 then\n        return 1\n    else\n        return n + sum_to_n(n\
    \ - 1)\n    end\nend", "\treturn (n * (n + 1)) / 2\nend", "    -- function implementation\n\
    \    local sum = 0", "  return (n * (n + 1)) / 2\nend", "\tif n == 1 then\n\t\t\
    return 1\n\telse\n\t\treturn n + sum_to_n(n-1)\n\tend\nend", "    local sum =\
    \ 0\n    for i = 1, n do\n        sum = sum + i\n    end\n    return sum\nend",
  "  -- define function, don't forget the return\n  local sum = 0\n  for i = 1, n\
    \ do\n    sum = sum + i\n  end\n  return sum\nend", "  return n * (n + 1) / 2\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
