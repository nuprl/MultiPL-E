name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a table, return true if all keys are strings in lower \n-- case\
  \ or all keys are strings in upper case, else return false.\n-- The function should\
  \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
  \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
  \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
  \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
  \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal num_lower, num_upper = 0, 0\n\tfor key, value in pairs(dict)\
    \ do\n\t\tif type(key) == 'string' then\n\t\t\tif key == key:lower() then num_lower\
    \ = num_lower + 1 end\n\t\t\tif key == key:upper() then num_upper = num_upper\
    \ + 1 end\n\t\tend\n\tend\n\treturn num_lower == 0 or num_upper == 0\nend", " \
    \   if #dict == 0 then\n        return false\n    end\n    local lowerKeys = true\n\
    \    local upperKeys = true\n    for key, value in pairs(dict) do\n        if\
    \ type(key) ~= 'string' then\n            return false\n        end\n        if\
    \ not key:lower() == key then\n            lowerKeys = false\n        end\n  \
    \      if not key:upper() == key then\n            upperKeys = false\n       \
    \ end\n    end\n    return lowerKeys or upperKeys\nend", "    local is_lower,\
    \ is_upper = true, true\n    local is_lower_triggered, is_upper_triggered = false,\
    \ false\n    for k, _ in pairs(dict) do\n        if not (type(k) == 'string')\
    \ then\n            return false\n        end\n        is_lower_triggered = is_lower_triggered\
    \ or not k:match('%l')\n        is_upper_triggered = is_upper_triggered or not\
    \ k:match('%u')\n        is_lower = is_lower and k:match('%l')\n        is_upper\
    \ = is_upper and k:match('%u')\n    end\n    return is_lower or is_upper\nend",
  "    if type(dict) ~= 'table' then\n        error('bad argument #1 to check_dict_case()\
    \ (table expected, got ' .. type(dict) .. ')', 2)\n    end\n    local key_count\
    \ = 0\n    local lower_count = 0\n    local upper_count = 0\n    for key, _ in\
    \ pairs(dict) do\n        key_count = key_count + 1\n        if type(key) == 'string'\
    \ then\n            if key:lower() == key then\n                lower_count =\
    \ lower_count + 1\n            elseif key:upper() == key then\n              \
    \  upper_count = upper_count + 1\n            end\n        end\n    end\n    return\
    \ (lower_count == key_count or upper_count == key_count) and lower_count ~= 0\
    \ and upper_count ~= 0\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        lower = lower and type(k) == 'string'\
    \ and k == string.lower(k)\n        upper = upper and type(k) == 'string' and\
    \ k == string.upper(k)\n    end\n    return lower or upper\nend", "    local case\
    \ = nil\n    for key, _ in pairs(dict) do\n        if type(key) == 'string' then\n\
    \            local str = tostring(key)\n            if case == nil then\n    \
    \            case = str:upper() == str\n            elseif case and str:upper()\
    \ ~= str then\n                return false\n            elseif not case and str:lower()\
    \ ~= str then\n                return false\n            end\n        else\n \
    \           return false\n        end\n    end\n    return true\nend", "    if\
    \ next(dict) == nil then\n        return false\n    end\n    local upper = false\n\
    \    local lower = false\n    for key, _ in pairs(dict) do\n        if type(key)\
    \ == 'string' then\n            if key == string.upper(key) then\n           \
    \     upper = true\n            elseif key == string.lower(key) then\n       \
    \         lower = true\n            else\n                return false\n     \
    \       end\n        else\n            return false\n        end\n    end\n  \
    \  return upper ~= lower\nend", "  local flag = true\n  if next(dict) == nil then\n\
    \    flag = false\n  else\n    for k,v in pairs(dict) do\n      if type(k) ==\
    \ 'string' then\n        if string.upper(k) == k then\n          for k1,v1 in\
    \ pairs(dict) do\n            if type(k1) == 'string' then\n              if string.lower(k1)\
    \ == k1 then\n                flag = false\n                break\n          \
    \    end\n            else\n              flag = false\n              break\n\
    \            end\n          end\n        elseif string.lower(k) == k then\n  \
    \        for k1,v1 in pairs(dict) do\n            if type(k1) == 'string' then\n\
    \              if string.upper(k1) == k1 then\n                flag = false\n\
    \                break\n              end\n            else\n              flag\
    \ = false\n              break\n            end\n          end\n        else\n\
    \          flag = false\n          break\n        end\n      else\n        flag\
    \ = false\n        break\n      end\n    end\n  end\n  return flag\nend", "  \
    \  local low_case_keys = {}\n    local up_case_keys = {}\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if string.lower(k) == k\
    \ then\n                low_case_keys[k] = v\n            elseif string.upper(k)\
    \ == k then\n                up_case_keys[k] = v\n            end\n        end\n\
    \    end\n    return next(low_case_keys) ~= nil and next(up_case_keys) == nil\
    \ or\n        next(low_case_keys) == nil and next(up_case_keys) ~= nil\nend",
  "    -- code\nend", "\tif not dict then return false end\n\tlocal tbl_lower, tbl_upper\
    \ = {}, {}\n\tlocal flag_lower, flag_upper = true, true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) == 'string' then\n\t\t\tif k:match('%u') then\n\t\t\t\ttbl_upper[k]\
    \ = v\n\t\t\telse\n\t\t\t\ttbl_lower[k] = v\n\t\t\tend\n\t\telse\n\t\t\tflag_lower,\
    \ flag_upper = false, false\n\t\tend\n\tend\n\treturn flag_lower and tbl_lower\
    \ or flag_upper and tbl_upper or false\nend\nM.check_dict_case = check_dict_case",
  "\t--\n\tif is_empty(dict) then\n\t\treturn false\n\tend\n\t--\n\tlocal lower_case\
    \ = true\n\tlocal upper_case = true\n\t--\n\tfor key, value in pairs(dict) do\n\
    \t\tif type(key) == 'string' then\n\t\t\tif key ~= string.lower(key) then\n\t\t\
    \t\tlower_case = false\n\t\t\tend\n\t\t\tif key ~= string.upper(key) then\n\t\t\
    \t\tupper_case = false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\
    \t--\n\treturn lower_case or upper_case\nend", "  if (type(dict) ~= 'table') then\n\
    \    error('Table expected. Got: ' .. type(dict))\n  end\n  if (table.getn(dict)\
    \ == 0) then\n    return false\n  end\n  local first_key = next(dict)\n  if (type(first_key)\
    \ ~= 'string') then\n    return false\n  end\n  if (string.match(first_key, '%u')\
    \ ~= nil) then\n    for key, value in pairs(dict) do\n      if (type(key) ~= 'string')\
    \ then\n        return false\n      end\n      if (string.match(key, '%l') ~=\
    \ nil) then\n        return false\n      end\n    end\n  else\n    for key, value\
    \ in pairs(dict) do\n      if (type(key) ~= 'string') then\n        return false\n\
    \      end\n      if (string.match(key, '%u') ~= nil) then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "    local len = 0\n    for key,\
    \ value in pairs(dict) do\n        len = len + 1\n        if key ~= string.upper(key)\
    \ and key ~= string.lower(key) then\n            return false\n        end\n \
    \   end\n    if len == 0 then\n        return false\n    end\n    return true\n\
    end", "    -- return value\n    local r\n    -- check if the table is empty\n\
    \    if table.getn(dict) == 0 then\n        r = false\n    else\n        -- flags\
    \ for keys\n        local lower = true\n        local upper = true\n        --\
    \ check if each key is a string in lower case or upper case\n        for k, _\
    \ in pairs(dict) do\n            if type(k) ~= 'string' then\n               \
    \ lower = false\n                upper = false\n                break\n      \
    \      else\n                if string.find(k, '[A-Z]') then\n               \
    \     lower = false\n                end\n                if string.find(k, '[a-z]')\
    \ then\n                    upper = false\n                end\n            end\n\
    \        end\n        r = lower or upper\n    end\n    return r\nend", "   local\
    \ u_count = 0\n   local l_count = 0\n   for k, v in pairs(dict) do\n      if type(k)\
    \ == 'string' then\n         if k == string.upper(k) then\n            u_count\
    \ = u_count + 1\n         elseif k == string.lower(k) then\n            l_count\
    \ = l_count + 1\n         end\n      end\n   end\n   if u_count == #dict or l_count\
    \ == #dict then\n      return true\n   else\n      return false\n   end\nend",
  "\t--checks to see if dictionary is empty\n\tif next(dict) == nil then\n\t\treturn\
    \ false\n\tend\n\t--sets variables for first key and case of first key\n\tlocal\
    \ case = nil\n\tlocal firstKey = next(dict)\n\t--if the first key is a string\
    \ then it sets case to lower or upper if it is lower or upper\n\tif type(firstKey)\
    \ == \"string\" then\n\t\tif firstKey == firstKey:lower() then\n\t\t\tcase = \"\
    lower\"\n\t\telseif firstKey == firstKey:upper() then\n\t\t\tcase = \"upper\"\n\
    \t\tend\n\tend\n\t--loops through the dictionary checking if keys are all in the\
    \ same case\n\tfor key, value in pairs(dict) do\n\t\tif type(key) == \"string\"\
    \ then\n\t\t\tif key == key:lower() and case == \"upper\" then\n\t\t\t\treturn\
    \ false\n\t\t\telseif key == key:upper() and case == \"lower\" then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    local lower_cnt = 0\n    local upper_cnt = 0\n    local empty\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k == string.lower(k) then\n                lower_cnt = lower_cnt\
    \ + 1\n            elseif k == string.upper(k) then\n                upper_cnt\
    \ = upper_cnt + 1\n            end\n        end\n        empty = false\n    end\n\
    \    if empty then\n        return false\n    elseif lower_cnt == 0 and upper_cnt\
    \ == 0 then\n        return false\n    elseif lower_cnt > 0 and upper_cnt > 0\
    \ then\n        return false\n    else\n        return true\n    end\nend", " \
    \ local count_lower, count_upper = 0, 0\n  for k,v in pairs(dict) do\n    if type(k)\
    \ == 'string' then\n      if string.upper(k) == k then count_upper = count_upper\
    \ + 1\n      else count_lower = count_lower + 1 end\n    else return false end\n\
    \  end\n  if count_lower * count_upper == 0 then return true\n  else return false\
    \ end\nend", "  return false\nend", "  if #dict == 0 then\n    return false\n\
    \  end\n  local lower = true\n  local upper = true\n  for k, _ in pairs(dict)\
    \ do\n    if type(k) ~= 'string' then\n      return false\n    end\n    local\
    \ lowercase = k:lower()\n    local uppercase = k:upper()\n    if k ~= lowercase\
    \ then\n      lower = false\n    end\n    if k ~= uppercase then\n      upper\
    \ = false\n    end\n  end\n  return lower or upper\nend", "\tlocal lower = true\n\
    \tlocal upper = true\n\tfor k, v in pairs(dict) do\n\t\tif not k:lower() == k\
    \ then lower = false end\n\t\tif not k:upper() == k then upper = false end\n\t\
    end\n\treturn (lower or upper) and not (lower and upper)\nend", "    -- check\
    \ if the dictionary is empty\n    local empty = true\n    for k,v in pairs(dict)\
    \ do\n        empty = false\n        break\n    end\n    if empty then\n     \
    \   return false\n    end", "  local lower = {}\n  local upper = {}\n  local mixed\
    \ = {}\n  local all_upper = true\n  local all_lower = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if k:upper() == k then\n        table.insert(upper,\
    \ k)\n      elseif k:lower() == k then\n        table.insert(lower, k)\n     \
    \ else\n        table.insert(mixed, k)\n      end\n    end\n  end\n  return #lower\
    \ > 0 and #upper == 0 and #mixed == 0, #upper > 0 and #lower == 0 and #mixed ==\
    \ 0\nend", "   local state = true\n   if(dict ~= nil)then\n      local cnt = 0\n\
    \      local cnt_low = 0\n      local cnt_up = 0\n      for key, value in pairs(dict)\
    \ do\n         if(type(key) == 'string')then\n            cnt = cnt + 1\n    \
    \        if(key == string.lower(key))then\n               cnt_low = cnt_low +\
    \ 1\n            elseif(key == string.upper(key))then\n               cnt_up =\
    \ cnt_up + 1\n            end\n         end\n      end\n      if(cnt_low ~= cnt\
    \ and cnt_up ~= cnt)then\n         state = false\n      end\n   else\n      state\
    \ = false\n   end\n   return state\nend", "   local flag = true\n   local index\
    \ = 0\n   local counter = 0\n   local upperCaseCounter = 0\n   local lowerCaseCounter\
    \ = 0\n   for k, v in pairs(dict) do\n       index = index + 1\n       if (type(k)\
    \ == 'string') then\n           counter = counter + 1\n           if (k == string.upper(k))\
    \ then\n               upperCaseCounter = upperCaseCounter + 1\n           elseif\
    \ (k == string.lower(k)) then\n               lowerCaseCounter = lowerCaseCounter\
    \ + 1\n           end\n       end\n   end\n   if (index > 0 and (upperCaseCounter\
    \ ~= counter and lowerCaseCounter ~= counter)) then\n       flag = false\n   end\n\
    \   return flag\nend", "  local lc = true\n  local uc = true\n  for k,v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      if lc and string.match(k, '[A-Z]')\
    \ then lc = false end\n      if uc and string.match(k, '[a-z]') then uc = false\
    \ end\n    else\n      return false\n    end\n  end\n  return lc or uc\nend",
  "    -- Get random key\n    local key = next(dict)\n    -- Check if key is nil,\
    \ then table is empty\n    if key == nil then\n        return false\n    end\n\
    \    -- Check if key is not string\n    if type(key) ~= 'string' then\n      \
    \  return false\n    end\n    -- Get key case\n    local is_lower = key == string.lower(key)\n\
    \    -- Check if the rest of keys have the same case\n    for k, _ in pairs(dict)\
    \ do\n        if type(k) ~= 'string' then\n            return false\n        end\n\
    \        if (is_lower and k ~= string.lower(k)) or (not is_lower and k ~= string.upper(k))\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  local lowercase = true\n  local uppercase = true\n  for k, v in pairs(dict) do\n\
    \    if type(k) == 'string' then\n      if not k:lower() == k then\n        lowercase\
    \ = false\n      end\n      if not k:upper() == k then\n        uppercase = false\n\
    \      end\n    else\n      return false\n    end\n  end\n  return lowercase or\
    \ uppercase\nend", "  if #dict == 0 then return false end\n  local lower = false\n\
    \  local upper = false\n  for k, _ in pairs(dict) do\n    if type(k) == 'string'\
    \ then\n      if k:upper() == k then\n        upper = true\n      elseif k:lower()\
    \ == k then\n        lower = true\n      else\n        return false\n      end\n\
    \    else\n      return false\n    end\n  end\n  return upper ~= lower\nend",
  "    -- body\n    local keys = {}\n    for k, v in pairs(dict) do\n        -- if\
    \ type(k) ~= 'string' then\n        --     return false\n        -- end\n    \
    \    if not type(k) == 'string' then\n            return false\n        end\n\
    \        -- if not k:match('^%u+$') and not k:match('^%l+$') then\n        --\
    \     return false\n        -- end\n        if not (k:match('^%u+$') or k:match('^%l+$'))\
    \ then\n            return false\n        end\n        keys[#keys + 1] = k\n \
    \   end\n    local len = #keys\n    if len == 0 then\n        return false\n \
    \   end\n    if keys[1]:match('^%u+$') then\n        for i = 2, len do\n     \
    \       if not keys[i]:match('^%u+$') then\n                return false\n   \
    \         end\n        end\n    else\n        for i = 2, len do\n            if\
    \ not keys[i]:match('^%l+$') then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend", "  -- your code here\nend", "  \
    \  -- TODO: Implement this function\n    for k, v in pairs(dict) do\n        if\
    \ (type(k) == 'string') then\n            if (upper_or_lower(k) == 'other') then\n\
    \                return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if (type(dict) ~= 'table')\
    \ then\n        error('Function expects a table')\n    end\n    if (count_keys(dict)\
    \ == 0) then\n        return false\n    end\n    local keys = get_keys(dict)\n\
    \    local lower_count = 0\n    local upper_count = 0\n    for i = 1, #keys do\n\
    \        if (keys[i]:match('^%l+$')) then\n            lower_count = lower_count\
    \ + 1\n        elseif (keys[i]:match('^%u+$')) then\n            upper_count =\
    \ upper_count + 1\n        end\n    end\n    if (lower_count > 0 and upper_count\
    \ > 0) then\n        return false\n    end\n    return true\nend", "    local\
    \ _len = #dict\n    if _len == 0 then return false end\n    local _type = type(dict[_len])\n\
    \    if _type == 'number' then return false end\n    local _lower = {}\n    local\
    \ _upper = {}\n    for _, v in pairs(dict) do\n        if type(v) == 'string'\
    \ then\n            table.insert(_lower, string.lower(v))\n            table.insert(_upper,\
    \ string.upper(v))\n        end\n    end\n    return table.concat(_lower) == table.concat(_upper)\n\
    end", "  if #dict == 0 then\n    return false\n  end\n  local keys = {}\n  for\
    \ k, _ in pairs(dict) do\n    table.insert(keys, k)\n  end\n  local low_case_keys\
    \ = util.keys_in_lower_case(dict)\n  local up_case_keys = util.keys_in_upper_case(dict)\n\
    \  if #low_case_keys == #keys or #up_case_keys == #keys then\n    return true\n\
    \  end\n  return false\nend", "    local numberOfKeys = 0\n    local lower, upper\
    \ = 0, 0\n    for key, _ in pairs(dict) do\n        if type(key) == 'string' then\n\
    \            numberOfKeys = numberOfKeys + 1\n            if key == string.lower(key)\
    \ then\n                lower = lower + 1\n            elseif key == string.upper(key)\
    \ then\n                upper = upper + 1\n            end\n        end\n    end\n\
    \    return numberOfKeys > 0 and (lower == numberOfKeys or upper == numberOfKeys)\n\
    end", "    if not is_table(dict) then\n        error('dict must be a table', 2)\n\
    \    end\n    local key, value = next(dict)\n    local lowercase = not value or\
    \ is_lower(key)\n    for key, value in pairs(dict) do\n        if is_lower(key)\
    \ ~= lowercase then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  -- Insert code here\n  if dict == nil then\n    return false\n\
    \  end\n  local lw,up = true,true\n  for key,value in pairs(dict) do\n    if type(key)\
    \ == 'string' then\n      if string.lower(key) ~= key then\n        lw = false\n\
    \      end\n      if string.upper(key) ~= key then\n        up = false\n     \
    \ end\n    else\n      return false\n    end\n  end\n  if (lw or up) then\n  \
    \  return true\n  else\n    return false\n  end\nend", "    -- Write your code\
    \ here.\n    return nil\nend", "    if next(dict) == nil then\n        return\
    \ false\n    end\n    -- lower_case, upper_case\n    local lower_case, upper_case\
    \ = true, true\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if string.lower(k) ~= k then\n                lower_case =\
    \ false\n            end\n            if string.upper(k) ~= k then\n         \
    \       upper_case = false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return lower_case or upper_case\nend", "  \
    \ local is_all_lower, is_all_upper = true, true\n   for k, v in pairs(dict) do\n\
    \      if type(k) == 'string' then\n         if k ~= k:lower() then is_all_lower\
    \ = false end\n         if k ~= k:upper() then is_all_upper = false end\n    \
    \  else\n         return false\n      end\n   end\n   return is_all_lower or is_all_upper\n\
    end", "    local upper_count = 0\n    local lower_count = 0\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k == string.upper(k)\
    \ then\n                upper_count = upper_count + 1\n            elseif k ==\
    \ string.lower(k) then\n                lower_count = lower_count + 1\n      \
    \      end\n        end\n    end\n    return lower_count == 0 or upper_count ==\
    \ 0 or (lower_count + upper_count == 0)\nend", "    local case = 'l' -- l: lower,\
    \ u: upper\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if case == 'l' then\n                if k ~= k:lower() then\n   \
    \                 case = 'u'\n                end\n            elseif case ==\
    \ 'u' then\n                if k ~= k:upper() then\n                    return\
    \ false\n                end\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend", "\tlocal first = dict[1]\n\
    \tlocal upper = string.upper(first) == first\n\tlocal lower = string.lower(first)\
    \ == first\n\tfor k, _ in pairs(dict) do\n\t\tif string.upper(k) ~= k and string.lower(k)\
    \ ~= k then\n\t\t\treturn false\n\t\tend\n\t\tif upper and string.lower(k) ==\
    \ k then\n\t\t\treturn false\n\t\tend\n\t\tif lower and string.upper(k) == k then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local case = nil\n\
    \  local lowerCase = true\n  local upperCase = true\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      lowerCase = lowerCase and k == string.lower(k)\n\
    \      upperCase = upperCase and k == string.upper(k)\n    else\n      return\
    \ false\n    end\n  end\n  return upperCase or lowerCase\nend", "  -- check if\
    \ empty\n  if getn(dict) < 1 then\n    return false\n  end\n  -- check if all\
    \ keys are uppercase or lowercase\n  local lower_case = {}\n  local upper_case\
    \ = {}\n  for k, _ in pairs(dict) do\n    local lower_k = string.lower(k)\n  \
    \  local upper_k = string.upper(k)\n    if lower_k == k then\n      lower_case[k]\
    \ = true\n    elseif upper_k == k then\n      upper_case[k] = true\n    else\n\
    \      return false\n    end\n  end\n  -- return false if both table are populated\n\
    \  if getn(lower_case) > 0 and getn(upper_case) > 0 then\n    return false\n \
    \ end\n  return true\nend", "    -- Check if the table is empty\n    if (is_table_empty(dict))\
    \ then\n        return false\n    end", "  if type(dict) ~= 'table' then\n   \
    \ return false\n  end\n  local size = 0\n  for key, value in pairs(dict) do\n\
    \    size = size + 1\n    local type_key = type(key)\n    if type_key ~= 'string'\
    \ then\n      return false\n    end\n    local upcase_key = key:upper()\n    local\
    \ downcase_key = key:lower()\n    if not key:match('^[a-zA-Z]+$') or upcase_key\
    \ ~= key and downcase_key ~= key then\n      return false\n    end\n  end\n  if\
    \ size == 0 then\n    return false\n  end\n  return true\nend", "    local all_lower,\
    \ all_upper = true, true\n    for k,v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            all_lower = all_lower and k == string.lower(k)\n\
    \            all_upper = all_upper and k == string.upper(k)\n        else\n  \
    \          return false\n        end\n    end\n    return all_lower or all_upper\n\
    end", "    -- write your code here\nend", "  if not table.check(dict) then\n \
    \   return false\n  end\n  if is_empty(dict) then\n    return false\n  end\n \
    \ local temp = {}\n  for key, val in pairs(dict) do\n    if type(key) == 'string'\
    \ then\n      if string.match(key, '[A-Z]') then\n        table.insert(temp, 1)\n\
    \      elseif string.match(key, '[a-z]') then\n        table.insert(temp, 2)\n\
    \      end\n    end\n  end\n  if #temp == 0 then\n    return false\n  end\n  local\
    \ a = temp[1]\n  for i = 2, #temp do\n    if temp[i] ~= a then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if (not dict) or (type(dict) ~= 'table')\
    \ then\n        return false\n    end\n    local keys = {}\n    for k, v in pairs(dict)\
    \ do\n        table.insert(keys, k)\n    end\n    if not next(keys) then\n   \
    \     return false\n    end\n    local first_key = keys[1]\n    local is_first_key_string\
    \ = type(first_key) == 'string'\n    local is_all_keys_string = true\n    local\
    \ is_all_keys_lower = true\n    local is_all_keys_upper = true\n    for _, key\
    \ in ipairs(keys) do\n        if type(key) ~= 'string' then\n            is_all_keys_string\
    \ = false\n            break\n        end\n        if not is_all_keys_lower and\
    \ not is_all_keys_upper then\n            break\n        end\n        if is_all_keys_lower\
    \ then\n            is_all_keys_lower = key == string.lower(key)\n        end\n\
    \        if is_all_keys_upper then\n            is_all_keys_upper = key == string.upper(key)\n\
    \        end\n    end\n    return is_all_keys_string and (is_all_keys_lower or\
    \ is_all_keys_upper)\nend", "    if next(dict) == nil then\n        return false\n\
    \    end\n    local lower = {}\n    local upper = {}\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k == string.lower(k)\
    \ then\n                lower[k] = v\n            elseif k == string.upper(k)\
    \ then\n                upper[k] = v\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    if next(lower) == nil then\n        return true\n    elseif next(upper)\
    \ == nil then\n        return true\n    else\n        return false\n    end\n\
    end", "    local lowerCase = true\n    local upperCase = true\n    for k,v in\
    \ pairs(dict) do\n        if type(k) == 'string' then\n            if not string.match(k,\
    \ '^%l*$') then\n                lowerCase = false\n            end\n        \
    \    if not string.match(k, '^%u*$') then\n                upperCase = false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lowerCase or upperCase\nend", "    local is_lower = true\n    local\
    \ is_upper = true\n    for k, _ in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            is_lower = is_lower and k == string.lower(k)\n           \
    \ is_upper = is_upper and k == string.upper(k)\n        else\n            return\
    \ false\n        end\n    end\n    return (is_lower or is_upper) and not (is_lower\
    \ and is_upper)\nend", "    -- Given a table, return true if all keys are strings\
    \ in lower \n    -- case or all keys are strings in upper case, else return false.\n\
    \    -- The function should return false is the given table is empty.\n    local\
    \ lower_flag = false\n    local upper_flag = false\n    for key, value in pairs(dict)\
    \ do\n        if type(key) == 'string' then\n            if lower_flag == false\
    \ and key == string.lower(key) then\n                lower_flag = true\n     \
    \       elseif upper_flag == false and key == string.upper(key) then\n       \
    \         upper_flag = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return lower_flag == true or upper_flag == true\nend", "  if type(dict) ~=\
    \ 'table' then\n    return false\n  end\n  if next(dict) == nil then\n    return\
    \ false\n  end\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n\
    \      return false\n    end\n    if not string.match(k, '[%a%d_]') then\n   \
    \   return false\n    end\n    if not (string.lower(k) == k or string.upper(k)\
    \ == k) then\n      return false\n    end\n  end\n  return true\nend", "  -- TODO:\
    \ Implement me\n  local upper = true\n  local lower = true\n  for key, value in\
    \ pairs(dict) do\n    if type(key) == 'string' then\n      if key ~= string.upper(key)\
    \ then\n        upper = false\n      end\n      if key ~= string.lower(key) then\n\
    \        lower = false\n      end\n    else\n      upper = false\n      lower\
    \ = false\n    end\n  end\n  return upper or lower\nend", "   local keycase =\
    \ ''\n   for k, _ in pairs(dict) do\n      if type(k) == 'string' then\n     \
    \    if keycase == '' then\n            keycase = k:lower() == k and 'lower' or\
    \ 'upper'\n         else\n            if keycase == 'lower' and k:lower() ~= k\
    \ then\n               return false\n            elseif keycase == 'upper' and\
    \ k:upper() ~= k then\n               return false\n            end\n        \
    \ end\n      else\n         return false\n      end\n   end\n   return true\n\
    end", "    if not (type(dict) == 'table') then\n        return false\n    end\n\
    \    local empty = true\n    local all_lower = true\n    local all_upper = true\n\
    \    for key, value in pairs(dict) do\n        empty = false\n        if type(key)\
    \ ~= 'string' then\n            return false\n        end\n        if not (string.match(key,\
    \ '^%u+$') or string.match(key, '^%l+$')) then\n            return false\n   \
    \     end\n        if not string.match(key, '^%u+$') then\n            all_upper\
    \ = false\n        end\n        if not string.match(key, '^%l+$') then\n     \
    \       all_lower = false\n        end\n    end\n    if empty then\n        return\
    \ false\n    end\n    return all_lower or all_upper\nend", "  local dict_all_upper\
    \ = true\n  local dict_all_lower = true\n  for k,v in pairs(dict) do\n    if type(k)\
    \ == 'string' then\n      dict_all_upper = dict_all_upper and k == string.upper(k)\n\
    \      dict_all_lower = dict_all_lower and k == string.lower(k)\n    else\n  \
    \    return false\n    end\n  end\n  return dict_all_upper or dict_all_lower\n\
    end", "\tlocal l_case = true\n\tlocal u_case = true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) == 'string' then\n\t\t\tif k ~= k:lower() then\n\t\t\t\t\
    l_case = false\n\t\t\tend\n\t\t\tif k ~= k:upper() then\n\t\t\t\tu_case = false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn l_case or u_case\nend", "  local lower = true\n\
    \  local upper = true\n  for k, v in pairs(dict) do\n    local type_k = type(k)\n\
    \    if type_k == 'string' then\n      lower = lower and string.lower(k) == k\n\
    \      upper = upper and string.upper(k) == k\n    else\n      lower = false\n\
    \      upper = false\n    end\n  end\n  return lower or upper\nend", "    local\
    \ lower = true\n    local upper = true\n    local dict_len = 0\n    if dict and\
    \ type(dict) == 'table' then\n        for k,v in pairs(dict) do\n            if\
    \ type(k) == 'string' then\n                dict_len = dict_len + 1\n        \
    \        if not k:lower() == k then\n                    lower = false\n     \
    \           end\n                if not k:upper() == k then\n                \
    \    upper = false\n                end\n            else\n                return\
    \ false\n            end\n        end\n    end\n    if dict_len == 0 then\n  \
    \      return false\n    end\n    return lower or upper\nend", "\t-- body\n\t\
    local upper = 0\n\tlocal lower = 0\n\tfor k, v in pairs(dict) do\n\t\tif type(k)\
    \ == 'string' then\n\t\t\tif k == string.upper(k) then\n\t\t\t\tupper = upper\
    \ + 1\n\t\t\telseif k == string.lower(k) then\n\t\t\t\tlower = lower + 1\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn (upper == 0 or lower == 0) and (upper + lower\
    \ > 0)\nend", "    local lower = {}\n    local upper = {}\n    local mixed = {}\n\
    \    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n       \
    \     if k == k:lower() then\n                table.insert(lower, k)\n       \
    \     elseif k == k:upper() then\n                table.insert(upper, k)\n   \
    \         else\n                table.insert(mixed, k)\n            end\n    \
    \    end\n    end\n    if (#lower > 0) and (#upper == 0) and (#mixed == 0) then\n\
    \        return true\n    elseif (#lower == 0) and (#upper > 0) and (#mixed ==\
    \ 0) then\n        return true\n    else\n        return false\n    end\nend",
  "\tif dict == nil then return false end\n\tlocal is_upper = false\n\tlocal is_lower\
    \ = false\n\tfor key, _ in pairs(dict) do\n\t\tif type(key) == 'string' then\n\
    \t\t\tif string.lower(key) == key then\n\t\t\t\tis_lower = true\n\t\t\telseif\
    \ string.upper(key) == key then\n\t\t\t\tis_upper = true\n\t\t\telse\n\t\t\t\t\
    return false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ is_lower or is_upper\nend", "  local char_case = nil\n  for key, _ in pairs(dict)\
    \ do\n    if type(key) == 'string' then\n      if char_case == nil then\n    \
    \    char_case = key == key:upper()\n      elseif char_case ~= (key == key:upper())\
    \ then\n        return false\n      end\n    else\n      return false\n    end\n\
    \  end\n  return true\nend", "  -- if the given table is empty, return false\n\
    \  if utils.is_empty(dict) then\n    return false\n  end\n  -- if all keys are\
    \ strings in lower case, return true\n  local lower = true\n  -- if all keys are\
    \ strings in upper case, return true\n  local upper = true\n  for k, v in pairs(dict)\
    \ do\n    -- if all keys are strings in lower case, return true\n    if k:find('%u')\
    \ then\n      lower = false\n    end\n    -- if all keys are strings in upper\
    \ case, return true\n    if k:find('%l') then\n      upper = false\n    end\n\
    \  end\n  return lower or upper\nend", "    local dict_count = 0\n    local dict_lower\
    \ = 0\n    local dict_upper = 0\n    local dict_capital = 0\n    local dict_number\
    \ = 0\n    for i,j in pairs(dict) do\n        dict_count = dict_count + 1\n  \
    \      if type(i) == 'string' then\n            if i == string.lower(i) then\n\
    \                dict_lower = dict_lower + 1\n            elseif i == string.upper(i)\
    \ then\n                dict_upper = dict_upper + 1\n            else\n      \
    \          dict_capital = dict_capital + 1\n            end\n        else\n  \
    \          dict_number = dict_number + 1\n        end\n    end\n    if dict_count\
    \ == 0 then\n        return false\n    elseif dict_lower == dict_count or dict_upper\
    \ == dict_count then\n        return true\n    else\n        return false\n  \
    \  end\nend", "    if next(dict) == nil then\n        return false\n    end\n\
    \    local check_dict_case = true\n    local index = 0\n    for k, v in pairs(dict)\
    \ do\n        if index == 0 then\n            if type(k) == 'string' then\n  \
    \              local first_letter = string.sub(k, 1, 1)\n                if first_letter\
    \ == string.lower(first_letter) then\n                    check_dict_case = false\n\
    \                end\n            else\n                check_dict_case = false\n\
    \            end\n        else\n            if type(k) == 'string' then\n    \
    \            local first_letter = string.sub(k, 1, 1)\n                if first_letter\
    \ == string.lower(first_letter) then\n                    check_dict_case = false\n\
    \                end\n            else\n                check_dict_case = false\n\
    \            end\n        end\n        index = index + 1\n    end\n    return\
    \ check_dict_case\nend", "  return false\nend", "\tlocal check = false\n\tlocal\
    \ i = 0\n\tlocal j = 0\n\tfor key, value in pairs(dict) do\n\t\ti = i + 1\n\t\t\
    if (string.match(key, \"%a+\") ~= nil) then\n\t\t\tif (string.match(key, \"[A-Z]\"\
    ) ~= nil) then\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\tif (i == j) then\n\
    \t\tcheck = true\n\tend\n\treturn check\nend", "\t-- check empty table\n\tif next(dict)\
    \ == nil then return false end\n\t-- check lower case\n\tlocal lower = 1\n\tlocal\
    \ upper = 1\n\tfor k, _ in pairs(dict) do\n\t\tif type(k) == 'string' then\n\t\
    \t\tif k == string.lower(k) then\n\t\t\t\tlower = lower + 1\n\t\t\telseif k ==\
    \ string.upper(k) then\n\t\t\t\tupper = upper + 1\n\t\t\tend\n\t\tend\n\tend\n\
    \t-- compare\n\tlocal len = math.max(lower, upper)\n\tif lower == len or upper\
    \ == len then return true else return false end\nend", "    -- Iterate through\
    \ keys, check if all keys are uppercase\n    local is_all_upper = true\n    for\
    \ key, _ in pairs(dict) do\n        if type(key) ~= 'string' or key ~= string.upper(key)\
    \ then\n            is_all_upper = false\n            break\n        end\n   \
    \ end", "  -- Fill your code here\n  if #dict == 0 then\n    return false\n  end\n\
    \  local case\n  for key, _ in pairs(dict) do\n    if case == nil then\n     \
    \ if type(key) == 'string' then\n        if key == string.upper(key) then\n  \
    \        case = 'upper'\n        elseif key == string.lower(key) then\n      \
    \    case = 'lower'\n        else\n          return false\n        end\n     \
    \ else\n        return false\n      end\n    else\n      if type(key) == 'string'\
    \ then\n        if case == 'upper' and key ~= string.upper(key) then\n       \
    \   return false\n        elseif case == 'lower' and key ~= string.lower(key)\
    \ then\n          return false\n        end\n      else\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "    if not is_valid_dict(dict)\
    \ then\n        return nil\n    end\n    local is_lower = true\n    local is_upper\
    \ = true\n    for k, _ in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if is_lower and k ~= string.lower(k) then\n                is_lower\
    \ = false\n            end\n            if is_upper and k ~= string.upper(k) then\n\
    \                is_upper = false\n            end\n        else\n           \
    \ return false\n        end\n    end\n    return is_lower or is_upper\nend", " \
    \ if #dict == 0 then\n    return false\n  end\n  local lower_key_count = 0\n \
    \ local upper_key_count = 0\n  for k, _ in pairs(dict) do\n    if type(k) == 'string'\
    \ then\n      if k:upper() == k then\n        upper_key_count = upper_key_count\
    \ + 1\n      elseif k:lower() == k then\n        lower_key_count = lower_key_count\
    \ + 1\n      end\n    end\n  end\n  if upper_key_count > 0 and lower_key_count\
    \ > 0 then\n    return false\n  end\n  return true\nend", "   local lower_case\
    \ = true\n   local upper_case = true\n   local num_keys = 0\n   for k, v in pairs(dict)\
    \ do\n      num_keys = num_keys + 1\n      if type(k) ~= 'string' then\n     \
    \    return false\n      end\n      if k ~= k:lower() then\n         lower_case\
    \ = false\n      end\n      if k ~= k:upper() then\n         upper_case = false\n\
    \      end\n   end\n   return num_keys == 0 and false or (lower_case or upper_case)\n\
    end", "    local num_keys = 0\n    local lower = true\n    local upper = true\n\
    \    for k, _ in pairs(dict) do\n        num_keys = num_keys + 1\n        if (type(k)\
    \ ~= 'string') then\n            return false\n        end\n        if (k:match('^%l+$')\
    \ == nil) then\n            lower = false\n        end\n        if (k:match('^%u+$')\
    \ == nil) then\n            upper = false\n        end\n    end\n    if (num_keys\
    \ == 0) then\n        return false\n    end\n    return lower or upper\nend",
  "    if next(dict) == nil then\n        return false\n    end\n    local upper =\
    \ 0\n    local lower = 0\n    for k, v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            if k == string.upper(k) then\n                upper\
    \ = upper + 1\n            elseif k == string.lower(k) then\n                lower\
    \ = lower + 1\n            end\n        end\n    end\n    if upper > 0 and lower\
    \ > 0 then\n        return false\n    else\n        return true\n    end\nend",
  "    local lower = true\n    local upper = true\n    local first = true\n    for\
    \ k, v in pairs(dict) do\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        local k = string.upper(k)\n        local k1 = string.lower(k)\n\
    \        if k1 ~= k then\n            lower = false\n        end\n        if k\
    \ ~= k1 then\n            upper = false\n        end\n        if first then\n\
    \            lower = upper\n            first = false\n        end\n    end\n\
    \    return lower or upper\nend", "    -- write your code here\nend", "\tlocal\
    \ empty = next(dict) == nil -- Empty table\n\tlocal lower = {} -- Lower case keys\n\
    \tlocal upper = {} -- Upper case keys\n\tfor k,v in pairs(dict) do\n\t\tif type(k)\
    \ == 'string' then\n\t\t\tif k == k:lower() then\n\t\t\t\tlower[k] = v\n\t\t\t\
    elseif k == k:upper() then\n\t\t\t\tupper[k] = v\n\t\t\telse\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn (next(lower)\
    \ ~= nil and next(upper) == nil) or (next(lower) == nil and next(upper) ~= nil)\
    \ or empty\nend", "   local all_lower, all_upper = true, true\n   for k, v in\
    \ pairs(dict) do\n      if type(k) == 'string' then\n         all_lower = all_lower\
    \ and string.lower(k) == k\n         all_upper = all_upper and string.upper(k)\
    \ == k\n      else\n         return false\n      end\n   end\n   return all_lower\
    \ or all_upper\nend", "    local count = 0\n    for k, v in pairs(dict) do\n \
    \       count = count + 1\n        if type(k) ~= 'string' then\n            return\
    \ false\n        end\n        if string.lower(k) ~= k and string.upper(k) ~= k\
    \ then\n            return false\n        end\n    end\n    if count == 0 then\n\
    \        return false\n    end\n    return true\nend", "    -- your code here\n\
    \    return false\nend", "  local lower, upper = true, true\n  for k, _ in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      lower = lower and k == string.lower(k)\n\
    \      upper = upper and k == string.upper(k)\n    else\n      return false\n\
    \    end\n  end\n  return lower or upper\nend", "    -- TO DO: implement the function\n\
    end", "    local low_count = 0\n    local high_count = 0\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k == string.lower(k)\
    \ then\n                low_count = low_count + 1\n            elseif k == string.upper(k)\
    \ then\n                high_count = high_count + 1\n            end\n       \
    \ end\n    end\n    return low_count == 0 or high_count == 0\nend", "    local\
    \ lowercase = true\n    local uppercase = true\n    for k, v in pairs(dict) do\n\
    \        if type(k) == 'string' then\n            lowercase = lowercase and (k\
    \ == string.lower(k))\n            uppercase = uppercase and (k == string.upper(k))\n\
    \        else\n            return false\n        end\n    end\n    return lowercase\
    \ or uppercase\nend", "    -- Write your code here.\nend", "\tlocal keys = dict.keys()\n\
    \tlocal lower = true\n\tlocal upper = true\n\tfor k, v in ipairs(keys) do\n\t\t\
    lower = lower and k == k:lower()\n\t\tupper = upper and k == k:upper()\n\tend\n\
    \treturn lower or upper\nend", "    local lower_flag = true\n    local upper_flag\
    \ = true\n    if #dict == 0 then\n        return false\n    end\n    for key,\
    \ value in pairs(dict) do\n        if type(key) == 'string' then\n           \
    \ if lower_flag then\n                lower_flag = lower_flag and (key == string.lower(key))\n\
    \            end\n            if upper_flag then\n                upper_flag =\
    \ upper_flag and (key == string.upper(key))\n            end\n        else\n \
    \           return false\n        end\n    end\n    return lower_flag or upper_flag\n\
    end", "  -- check if the given table is empty\n  if table.getn(dict) == 0 then\n\
    \    return false\n  end\n  -- first_key is used to determine the case of the\
    \ dictionary\n  -- if the key is a string and starts with uppercase letter\n \
    \ -- then the first_key will be true\n  local first_key = false\n  -- loop through\
    \ each key in the table\n  for k, v in pairs(dict) do\n    -- check if the key\
    \ is a string\n    if type(k) == 'string' then\n      -- check if the key is a\
    \ lowercase letter\n      if first_key == false and string.find(k, '^%l') then\n\
    \        first_key = false\n      -- check if the key is an uppercase letter\n\
    \      elseif first_key == true and string.find(k, '^%u') then\n        first_key\
    \ = true\n      -- check if the key is a lowercase letter\n      elseif first_key\
    \ == true and string.find(k, '^%l') then\n        return false\n      -- check\
    \ if the key is an uppercase letter\n      elseif first_key == false and string.find(k,\
    \ '^%u') then\n        return false\n      end\n    -- check if the key is a string\n\
    \    elseif type(k) == 'string' then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  if #dict == 0 then return false end\n  local count_lower = 0\n\
    \  local count_upper = 0\n  for k, v in pairs(dict) do\n    if type(k) == 'string'\
    \ then\n      if k == string.lower(k) then count_lower = count_lower + 1\n   \
    \   elseif k == string.upper(k) then count_upper = count_upper + 1\n      end\n\
    \    end\n  end\n  return count_lower == #dict or count_upper == #dict\nend",
  "    local keys_lower = true\n    local keys_upper = true\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if not k:match('^%u+$')\
    \ then\n                keys_upper = false\n            end\n            if not\
    \ k:match('^%l+$') then\n                keys_lower = false\n            end\n\
    \        else\n            return false\n        end\n    end\n    return keys_lower\
    \ or keys_upper\nend", "  if type(dict) ~= 'table' then\n    return false\n  end\n\
    \  local n = table.getn(dict)\n  if n == 0 then\n    return false\n  end\n  local\
    \ pattern = nil\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string' then\n\
    \      return false\n    end\n    local s = k:lower()\n    if pattern == nil then\n\
    \      pattern = s\n    elseif pattern ~= s then\n      return false\n    end\n\
    \  end\n  return true\nend", "    local all_upper = true\n    local all_lower\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k:match('%u') then\n                all_lower = false\n      \
    \      else\n                all_upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return all_upper or all_lower\n\
    end", "    -- TODO: implement this function\n    local lowercase = true\n    local\
    \ uppercase = true\n    for k, v in pairs(dict) do\n        if not string.find(k,\
    \ '%u') then\n            uppercase = false\n        end\n        if not string.find(k,\
    \ '%l') then\n            lowercase = false\n        end\n    end\n    if lowercase\
    \ or uppercase then\n        return true\n    else\n        return false\n   \
    \ end\nend", "    if (is_empty(dict)) then\n        return false\n    end\n  \
    \  local is_all_lower, is_all_upper = true, true\n    for k, v in pairs(dict)\
    \ do\n        if (type(k) == 'string') then\n            if (k ~= k:lower()) then\n\
    \                is_all_lower = false\n            end\n            if (k ~= k:upper())\
    \ then\n                is_all_upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return is_all_lower or is_all_upper\n\
    end", "    if dict == nil or #dict == 0 then return false end\n    local lower_case_keys,\
    \ upper_case_keys = 0, 0\n    for key, _ in pairs(dict) do\n        if type(key)\
    \ == 'string' then\n            if key:find('%l') then\n                lower_case_keys\
    \ = lower_case_keys + 1\n            elseif key:find('%u') then\n            \
    \    upper_case_keys = upper_case_keys + 1\n            end\n        end\n   \
    \ end\n    return (lower_case_keys > 0 and upper_case_keys == 0) or (lower_case_keys\
    \ == 0 and upper_case_keys > 0)\nend", "    -- Check if the provided argument\
    \ is a table.\n    if type(dict) ~= 'table' then\n        print('Please provide\
    \ a table as an argument')\n        return\n    end", "    if (next(dict) == nil)\
    \ then\n        return false\n    end\n    local allLower = true\n    local allUpper\
    \ = true\n    for k, v in pairs(dict) do\n        allLower = allLower and type(k)\
    \ == 'string' and k == k:lower()\n        allUpper = allUpper and type(k) == 'string'\
    \ and k == k:upper()\n    end\n    return allLower or allUpper\nend", "    local\
    \ a = {}\n    local b = {}\n    for k, v in pairs(dict) do\n        if type(k)\
    \ == 'string' then\n            if k == string.lower(k) then\n               \
    \ table.insert(a, v)\n            elseif k == string.upper(k) then\n         \
    \       table.insert(b, v)\n            end\n        end\n    end\n    return\
    \ #a > 0 and #b == 0 or #a == 0 and #b > 0\nend", "  -- Insert your code here\n\
    \  return false\nend", "    local case_detect = nil\n    for k,v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if case_detect == nil then\n\
    \                if k == k:lower() then\n                    case_detect = true\n\
    \                elseif k == k:upper() then\n                    case_detect =\
    \ false\n                else\n                    return false\n            \
    \    end\n            else\n                if case_detect == true and k ~= k:lower()\
    \ then\n                    return false\n                elseif case_detect ==\
    \ false and k ~= k:upper() then\n                    return false\n          \
    \      end\n            end\n        else\n            return false\n        end\n\
    \    end\n    return true\nend", "    if next(dict) == nil then\n        return\
    \ false\n    end\n    local upper = true\n    local lower = true\n    for k, v\
    \ in pairs(dict) do\n        if type(k) == 'string' then\n            if not (k\
    \ == k:upper()) then\n                upper = false\n            end\n       \
    \     if not (k == k:lower()) then\n                lower = false\n          \
    \  end\n        else\n            return false\n        end\n    end\n    return\
    \ upper or lower\nend", "    return false -- Place holder\nend", "    if not (dict)\
    \ then\n        return false\n    end\n    local i = 0\n    local lowercase =\
    \ false\n    local uppercase = false\n    for k, v in pairs(dict) do\n       \
    \ if not (type(k) == 'string') then\n            return false\n        end\n \
    \       if string.lower(k) == k then\n            lowercase = true\n        elseif\
    \ string.upper(k) == k then\n            uppercase = true\n        else\n    \
    \        return false\n        end\n        i = i + 1\n    end\n    if i == 0\
    \ then\n        return false\n    end\n    if lowercase and uppercase then\n \
    \       return false\n    end\n    return true\nend", "\tlocal lower, upper =\
    \ false, false\n\tfor k, _ in pairs(dict) do\n\t\tlocal str = tostring(k)\n\t\t\
    if str == str:lower() then\n\t\t\tlower = true\n\t\telseif str == str:upper()\
    \ then\n\t\t\tupper = true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ (lower or upper)\nend", "    if (dict == nil) then\n        return false\n \
    \   end\n    if (table.maxn(dict) == 0) then\n        return false\n    end\n\
    \    local upper = true\n    local lower = true\n    for key, value in pairs(dict)\
    \ do\n        if (type(key) == 'string') then\n            if (not string.match(key,\
    \ '^%l+$')) then\n                lower = false\n            end\n           \
    \ if (not string.match(key, '^%u+$')) then\n                upper = false\n  \
    \          end\n        else\n            return false\n        end\n    end\n\
    \    return upper or lower\nend", "    if type(dict) ~= 'table' then\n       \
    \ return false\n    end\n    local lowercase = true\n    local uppercase = true\n\
    \    for key, value in pairs(dict) do\n        if type(key) ~= 'string' then\n\
    \            return false\n        end\n        if key:lower() ~= key then\n \
    \           lowercase = false\n        end\n        if key:upper() ~= key then\n\
    \            uppercase = false\n        end\n    end\n    return lowercase or\
    \ uppercase\nend", "  -- fill in here\nend", "\tlocal lower, upper = true, true\n\
    \tfor k,v in pairs(dict) do\n\t\tlower = lower and type(k) == 'string' and k ==\
    \ k:lower()\n\t\tupper = upper and type(k) == 'string' and k == k:upper()\n\t\
    end\n\treturn lower or upper\nend", "    local lowercase = true\n    local uppercase\
    \ = true\n    local count = 0\n    for k, _ in pairs(dict) do\n        count =\
    \ count + 1\n        if type(k) ~= 'string' then\n            return false\n \
    \       end\n        if lowercase then\n            lowercase = k == k:lower()\n\
    \        end\n        if uppercase then\n            uppercase = k == k:upper()\n\
    \        end\n    end\n    return count > 0 and (lowercase or uppercase)\nend",
  "    if #dict < 1 then return false end\n    local first_key = next(dict)\n    local\
    \ is_upper = first_key:match('%U')\n    for k, v in pairs(dict) do\n        if\
    \ is_upper then\n            if not k:match('%U') then return false end\n    \
    \    else\n            if not k:match('%l') then return false end\n        end\n\
    \    end\n    return true\nend", "\tif not next(dict) then\n\t\treturn false\n\
    \tend\n\tlocal first\n\tfor k, v in pairs(dict) do\n\t\tif not first then\n\t\t\
    \tfirst = k\n\t\tend\n\t\tif type(k) ~= 'string' then\n\t\t\treturn false\n\t\t\
    end\n\t\tif k ~= first and k ~= first:upper() and k ~= first:lower() then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend", "    -- check if dict is\
    \ empty\n    if (dict == nil) then\n        return false\n    end\n    -- check\
    \ if dict is empty\n    if (next(dict) == nil) then\n        return false\n  \
    \  end\n    local all_lower = true\n    local all_upper = true\n    for k, v in\
    \ pairs(dict) do\n        -- check if is string\n        if (type(k) ~= 'string')\
    \ then\n            return false\n        end\n        if k ~= string.lower(k)\
    \ then\n            all_lower = false\n        end\n        if k ~= string.upper(k)\
    \ then\n            all_upper = false\n        end\n    end\n    return all_lower\
    \ or all_upper\nend", "    if next(dict) == nil then\n        return false\n \
    \   end\n    local str_count = 0\n    local lower_count = 0\n    local upper_count\
    \ = 0\n    for k,v in pairs(dict) do\n        if type(k) == 'string' then\n  \
    \          str_count = str_count + 1\n            if k == string.lower(k) then\n\
    \                lower_count = lower_count + 1\n            elseif k == string.upper(k)\
    \ then\n                upper_count = upper_count + 1\n            end\n     \
    \   end\n    end\n    if str_count == 0 then\n        return false\n    elseif\
    \ str_count == lower_count then\n        return true\n    elseif str_count ==\
    \ upper_count then\n        return true\n    else\n        return false\n    end\n\
    end", "    if not dict then\n        return false\n    end\n    local all_keys_lower\
    \ = true\n    local all_keys_upper = true\n    for k,v in pairs(dict) do\n   \
    \     if type(k) == 'string' then\n            if k ~= k:lower() then\n      \
    \          all_keys_lower = false\n            end\n            if k ~= k:upper()\
    \ then\n                all_keys_upper = false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return all_keys_lower or\
    \ all_keys_upper\nend", "    if (next(dict) == nil) then\n        return false\n\
    \    end\n    local lower = true\n    local upper = true\n    for key, value in\
    \ pairs(dict) do\n        if (type(key) == 'string') then\n            if (not\
    \ (string.lower(key) == key)) then\n                lower = false\n          \
    \  end\n            if (not (string.upper(key) == key)) then\n               \
    \ upper = false\n            end\n        else\n            return false\n   \
    \     end\n    end\n    return lower or upper\nend", "    local lower_key_count\
    \ = 0\n    local upper_key_count = 0\n    for key, value in pairs(dict) do\n \
    \       if type(key) == 'string' then\n            if string.find(key, '%l') then\n\
    \                lower_key_count = lower_key_count + 1\n            elseif string.find(key,\
    \ '%u') then\n                upper_key_count = upper_key_count + 1\n        \
    \    end\n        end\n    end\n    return (lower_key_count > 0 and upper_key_count\
    \ == 0) or (lower_key_count == 0 and upper_key_count > 0)\nend", "    -- check\
    \ if empty\n    if type(dict) ~= 'table' or next(dict) == nil then\n        return\
    \ false\n    end", "\tlocal lower, upper = true, true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) == 'string' then\n\t\t\tif k:lower() ~= k then\n\t\t\t\t\
    lower = false\n\t\t\tend\n\t\t\tif k:upper() ~= k then\n\t\t\t\tupper = false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn lower or upper\nend", "    -- TODO: insert\
    \ code here\nend", "    local lower = true\n    local upper = true\n    for k,\
    \ _ in pairs(dict) do\n        local keytype = type(k)\n        if keytype ==\
    \ 'string' then\n            if k ~= k:lower() then\n                lower = false\n\
    \            end\n            if k ~= k:upper() then\n                upper =\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return lower or upper\nend", "    local lowerCase = true\n    local\
    \ upperCase = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if lowerCase and k:lower() ~= k then\n                lowerCase\
    \ = false\n            end\n            if upperCase and k:upper() ~= k then\n\
    \                upperCase = false\n            end\n        else\n          \
    \  return false\n        end\n    end\n    return lowerCase or upperCase\nend",
  "    -- check if the given table is empty\n    if (dict == nil) then\n        return\
    \ false\n    end\n    -- check if keys of the given table are in lower case\n\
    \    -- check if keys of the given table are in upper case\n    local lower_case\
    \ = true\n    local upper_case = true\n    for key, _ in pairs(dict) do\n    \
    \    if lower_case then\n            lower_case = (type(key) == 'string') and\
    \ (key == string.lower(key))\n        end\n        if upper_case then\n      \
    \      upper_case = (type(key) == 'string') and (key == string.upper(key))\n \
    \       end\n    end\n    return lower_case or upper_case\nend", "    -- TODO:\
    \ finish the code\n    local has_lower = false\n    local has_upper = false\n\
    \    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n       \
    \     if k:lower() == k then\n                has_lower = true\n            elseif\
    \ k:upper() == k then\n                has_upper = true\n            else\n  \
    \              return false\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return has_lower ~= has_upper\nend", "    if\
    \ #dict == 0 then return false end\n    local lower = dict[dict[1]]\n    local\
    \ upper = dict[string.upper(dict[1])]\n    for i,v in pairs(dict) do\n       \
    \ if lower == nil and upper == nil then\n            return false\n        elseif\
    \ lower ~= nil and upper ~= nil then\n            return false\n        elseif\
    \ upper ~= nil then\n            lower = dict[string.lower(i)]\n            if\
    \ lower ~= nil then\n                return false\n            end\n        elseif\
    \ lower ~= nil then\n            upper = dict[string.upper(i)]\n            if\
    \ upper ~= nil then\n                return false\n            end\n        end\n\
    \    end\n    return true\nend", "  if(not dict) then\n    return false\n  end\n\
    \  if(#dict == 0) then\n    return false\n  end\n  local lower_case_keys_count\
    \ = 0\n  local upper_case_keys_count = 0\n  for key, value in pairs(dict) do\n\
    \    if(type(key) == 'string') then\n      if(string.lower(key) == key) then\n\
    \        lower_case_keys_count = lower_case_keys_count + 1\n      elseif(string.upper(key)\
    \ == key) then\n        upper_case_keys_count = upper_case_keys_count + 1\n  \
    \    end\n    end\n  end\n  if(lower_case_keys_count > 0 and upper_case_keys_count\
    \ > 0) then\n    return false\n  end\n  return true\nend", "    local all_lower\
    \ = false\n    local all_upper = false\n    for key, _ in pairs(dict) do\n   \
    \     if type(key) == 'string' then\n            if string.lower(key) == key then\n\
    \                all_lower = true\n            elseif string.upper(key) == key\
    \ then\n                all_upper = true\n            else\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return (all_lower or all_upper)\nend", "  local all_lower_case =\
    \ true\n  local all_upper_case = true\n  if #dict == 0 then\n    return false\n\
    \  end\n  for k,v in pairs(dict) do\n    if type(k) == 'string' then\n      if\
    \ k ~= k:lower() then\n        all_lower_case = false\n      end\n      if k ~=\
    \ k:upper() then\n        all_upper_case = false\n      end\n    else\n      return\
    \ false\n    end\n  end\n  return all_lower_case or all_upper_case\nend", "  \
    \  -- Write your code here\n    local lower = {}\n    local upper = {}\n    local\
    \ flag = false\n    for k,v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            if string.lower(k) == k then\n                table.insert(lower,k)\n\
    \            elseif string.upper(k) == k then\n                table.insert(upper,k)\n\
    \            end\n        end\n    end\n    if #lower == 0 or #upper == 0 then\n\
    \        flag = false\n    elseif #lower > 0 and #upper > 0 then\n        flag\
    \ = false\n    elseif #lower > 0 and #upper == 0 then\n        flag = true\n \
    \   elseif #lower == 0 and #upper > 0 then\n        flag = true\n    end\n   \
    \ return flag\nend", "    local lowercase = false\n    local uppercase = false\n\
    \    for key, value in pairs(dict) do\n        if type(key) == 'string' then\n\
    \            if key == string.lower(key) then\n                lowercase = true\n\
    \            elseif key == string.upper(key) then\n                uppercase =\
    \ true\n            else\n                return false\n            end\n    \
    \    else\n            return false\n        end\n    end\n    if lowercase ==\
    \ true and uppercase == true then\n        return false\n    else\n        return\
    \ true\n    end\nend", "    if #dict == 0 then\n        return false\n    end\n\
    \    for key, value in pairs(dict) do\n        if type(key) == 'string' then\n\
    \            if not key:find('^%l+$') and not key:find('^%u+$') then\n       \
    \         return false\n            end\n        else\n            return false\n\
    \        end\n    end\n    return true\nend", "    if #dict == 0 then\n      \
    \  return false\n    end\n    local key, value = next(dict)\n    if type(key)\
    \ == 'string' then\n        if is_upper(key) then\n            for k, v in pairs(dict)\
    \ do\n                if not is_upper(k) then\n                    return false\n\
    \                end\n            end\n        elseif is_lower(key) then\n   \
    \         for k, v in pairs(dict) do\n                if not is_lower(k) then\n\
    \                    return false\n                end\n            end\n    \
    \    else\n            return false\n        end\n    else\n        return false\n\
    \    end\n    return true\nend", "    if (dict == nil) then return false end\n\
    \    if (type(dict) ~= 'table') then return false end\n    if (#dict == 0) then\
    \ return false end\n    -- iterate through all keys in the table\n    for key,value\
    \ in pairs(dict) do\n        -- if key is a string\n        if (type(key) == 'string')\
    \ then\n            -- if case of key is mixed return false\n            if not\
    \ check_case(key) then\n                return false\n            end\n      \
    \  else\n            -- if the key is not a string return false\n            return\
    \ false\n        end\n    end\n    -- if the key was all lower case return true\n\
    \    return true\nend", "    local lower, upper = 0, 0\n    for k, v in pairs(dict)\
    \ do\n        if k == string.lower(k) then\n            lower = lower + 1\n  \
    \      elseif k == string.upper(k) then\n            upper = upper + 1\n     \
    \   end\n    end\n    return lower == 0 or upper == 0\nend", "    local keys =\
    \ {}\n    for k, v in pairs(dict) do\n        keys[#keys + 1] = k\n    end\n \
    \   if #keys == 0 then\n        return false\n    end\n    for i = 1, #keys do\n\
    \        if (not lower(keys[i])) and (not upper(keys[i])) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local keys = {}\n  local\
    \ lower = true\n  local upper = true\n  for k, _ in pairs(dict) do\n    table.insert(keys,\
    \ k)\n  end\n  for _, v in ipairs(keys) do\n    lower = lower and v:lower() ==\
    \ v\n    upper = upper and v:upper() == v\n  end\n  return #keys > 0 and (lower\
    \ or upper)\nend", "\tif not next(dict) then\n\t\treturn false\n\tend\n\tlocal\
    \ upper = true\n\tlocal lower = true\n\tfor k, v in pairs(dict) do\n\t\tif type(k)\
    \ == 'string' then\n\t\t\tif k:lower() ~= k then\n\t\t\t\tlower = false\n\t\t\t\
    end\n\t\t\tif k:upper() ~= k then\n\t\t\t\tupper = false\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn upper or lower\nend", "   --[[ Remove the following comments and\
    \ fill in the rest of the function]]\n   --[[\n   local function isUpper(s)\n\
    \      local res = true\n      for i = 1, #s do\n         res = res and string.match(s,\
    \ '%u') ~= nil\n      end\n      return res\n   end\n   local function isLower(s)\n\
    \      local res = true\n      for i = 1, #s do\n         res = res and string.match(s,\
    \ '%l') ~= nil\n      end\n      return res\n   end\n   local function isUpperAndLower(s)\n\
    \      local res = false\n      for i = 1, #s do\n         res = res or (string.match(s,\
    \ '%u') ~= nil and string.match(s, '%l') ~= nil)\n      end\n      return res\n\
    \   end\n   local function isUpperOrLower(s)\n      local res = false\n      for\
    \ i = 1, #s do\n         res = res or (string.match(s, '%u') ~= nil or string.match(s,\
    \ '%l') ~= nil)\n      end\n      return res\n   end\n   local res = true\n  \
    \ local first_key = next(dict)\n   res = first_key and isUpperOrLower(first_key)\n\
    \   if res then\n      local lower = isLower(first_key)\n      for k, v in pairs(dict)\
    \ do\n         res = lower and isLower(k) or isUpper(k)\n         if not res then\n\
    \            break\n         end\n      end\n   end\n   return res\n   ]]\nend",
  "\tlocal lower = {}\n\tlocal upper = {}\n\tfor k, v in pairs(dict) do\n\t\tif type(k)\
    \ == 'string' then\n\t\t\tif k == k:lower() then\n\t\t\t\tlower[k] = v\n\t\t\t\
    elseif k == k:upper() then\n\t\t\t\tupper[k] = v\n\t\t\telse\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\tif table.empty(lower)\
    \ and table.empty(upper) then\n\t\treturn false\n\telseif table.empty(lower) then\n\
    \t\treturn true\n\telseif table.empty(upper) then\n\t\treturn true\n\telse\n\t\
    \treturn false\n\tend\nend", "\tlocal lower_count = 0\n\tlocal upper_count = 0\n\
    \tfor key, value in pairs(dict) do\n\t\tif key == string.lower(key) then\n\t\t\
    \tlower_count = lower_count + 1\n\t\telseif key == string.upper(key) then\n\t\t\
    \tupper_count = upper_count + 1\n\t\tend\n\tend\n\tif lower_count == 0 or upper_count\
    \ == 0 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "    if not\
    \ next(dict) then\n        return false\n    end\n    local is_lower_case = false\n\
    \    local is_upper_case = false\n    for k, v in pairs(dict) do\n        if k\
    \ == string.lower(k) then\n            is_lower_case = true\n        elseif k\
    \ == string.upper(k) then\n            is_upper_case = true\n        else\n  \
    \          return false\n        end\n    end\n    return is_lower_case or is_upper_case\n\
    end", "   if not dict then\n      return false\n   end\n   local key_case\n  \
    \ for k, _ in pairs(dict) do\n      if type(k) ~= 'string' then\n         return\
    \ false\n      end\n      if not key_case then\n         if k == k:lower() then\n\
    \            key_case = 'lower'\n         elseif k == k:upper() then\n       \
    \     key_case = 'upper'\n         else\n            return false\n         end\n\
    \      else\n         if key_case == 'lower' and k ~= k:lower() then\n       \
    \     return false\n         elseif key_case == 'upper' and k ~= k:upper() then\n\
    \            return false\n         end\n      end\n   end\n   return true\nend",
  "\tlocal has_upper, has_lower, has_other = false, false, false\n\tif not dict then\
    \ return false end\n\tfor k, v in pairs(dict) do\n\t\tif type(k) == 'string' then\n\
    \t\t\tif k:match('%u') then\n\t\t\t\thas_upper = true\n\t\t\telseif k:match('%l')\
    \ then\n\t\t\t\thas_lower = true\n\t\t\telse\n\t\t\t\thas_other = true\n\t\t\t\
    end\n\t\telse\n\t\t\thas_other = true\n\t\tend\n\tend\n\tif (has_upper and has_lower)\
    \ or has_other then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend", " \
    \   local lowercase = {}\n    local uppercase = {}\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if k == k:lower() then\n\
    \                lowercase[k] = v\n            elseif k == k:upper() then\n  \
    \              uppercase[k] = v\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    if next(lowercase) ~= nil and next(uppercase) ~= nil then\n        return\
    \ false\n    else\n        return true\n    end\nend", "  return false\nend",
  "    if #dict == 0 then return false end\n    for k, v in pairs(dict) do\n     \
    \   if type(k) ~= 'string' then return false end\n        if k == k:lower() then\n\
    \            for k1, v1 in pairs(dict) do\n                if k1 ~= k1:lower()\
    \ then return false end\n            end\n        elseif k == k:upper() then\n\
    \            for k1, v1 in pairs(dict) do\n                if k1 ~= k1:upper()\
    \ then return false end\n            end\n        else\n            return false\n\
    \        end\n    end\n    return true\nend", "  local lower, upper = true, true\n\
    \  for k, _ in pairs(dict) do\n    if type(k) == 'string' then\n      lower =\
    \ lower and (k == string.lower(k))\n      upper = upper and (k == string.upper(k))\n\
    \    else\n      return false\n    end\n  end\n  return lower or upper\nend",
  "    local keys = {}\n    for k, v in pairs(dict) do\n        if type(k) == 'string'\
    \ then\n            keys[#keys + 1] = k\n        else\n            return false\n\
    \        end\n    end\n    local str1 = table.concat(keys, '')\n    if str1 ==\
    \ str1:lower() then\n        return true\n    elseif str1 == str1:upper() then\n\
    \        return true\n    else\n        return false\n    end\nend", "  return\
    \ false\nend", "\tlocal key_upper = true\n\tlocal key_lower = true\n\tfor k, v\
    \ in pairs(dict) do\n\t\tif type(k) == 'string' then\n\t\t\tif (k == k:upper())\
    \ then\n\t\t\t\tkey_lower = false\n\t\t\telse\n\t\t\t\tkey_upper = false\n\t\t\
    \tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn key_upper or key_lower\n\
    end", '    -- Your code here', "  local lower = true\n  local upper = true\n \
    \ for k, _ in pairs(dict) do\n    if type(k) == 'string' then\n      lower = lower\
    \ and (k == string.lower(k))\n      upper = upper and (k == string.upper(k))\n\
    \    else\n      return false\n    end\n  end\n  return lower or upper\nend",
  "    local c = nil\n    for k, v in pairs(dict) do\n        if (type(k) == 'string')\
    \ then\n            local t = string.upper(k)\n            if (c == nil) then\n\
    \                c = t\n            elseif (c ~= t) then\n                return\
    \ false\n            end\n        else\n            return false\n        end\n\
    \    end\n    return true\nend", "\t-- TODO\n\tif dict == nil then\n\t\treturn\
    \ false\n\tend\n\tlocal num = 0\n\tfor k, v in pairs(dict) do\n\t\tif k:lower()\
    \ == k then\n\t\t\tnum = num + 1\n\t\tend\n\tend\n\tif num == 0 then\n\t\treturn\
    \ false\n\tend\n\tif #dict == num then\n\t\treturn true\n\tend\n\treturn false\n\
    end", "  if #dict == 0 then\n    return false\n  end\n  local k, v = next(dict)\n\
    \  local tk = type(k)\n  if tk ~= 'string' then\n    return false\n  end\n  local\
    \ case = string.match(k, '%a')\n  case = case:lower() == case and 'lower' or 'upper'\n\
    \  for k, v in pairs(dict) do\n    if type(k) ~= tk then\n      return false\n\
    \    end\n    if case == 'lower' and string.match(k, '%A') then\n      return\
    \ false\n    end\n    if case == 'upper' and string.match(k, '%a') then\n    \
    \  return false\n    end\n  end\n  return true\nend", "  local key_count = 0\n\
    \  local upper_count = 0\n  local lower_count = 0\n  for k,v in pairs(dict) do\n\
    \    key_count = key_count + 1\n    if type(k) == 'string' then\n      if k ==\
    \ string.upper(k) then\n        upper_count = upper_count + 1\n      elseif k\
    \ == string.lower(k) then\n        lower_count = lower_count + 1\n      end\n\
    \    end\n  end\n  if key_count == 0 then\n    return false\n  elseif key_count\
    \ == upper_count then\n    return true\n  elseif key_count == lower_count then\n\
    \    return true\n  else\n    return false\n  end\nend", "  if table.maxn(dict)\
    \ <= 0 then return false end\n  local lower = true\n  local upper = true\n  for\
    \ k, v in pairs(dict) do\n    if type(k) ~= 'string' then return false end\n \
    \   if string.lower(k) ~= k then lower = false end\n    if string.upper(k) ~=\
    \ k then upper = false end\n  end\n  return lower or upper\nend", "    local is_upper\
    \ = false\n    local is_lower = false\n    for k, v in pairs(dict) do\n      \
    \  if type(k) == 'string' then\n            if string.lower(k) == k then\n   \
    \             is_lower = true\n            elseif string.upper(k) == k then\n\
    \                is_upper = true\n            else\n                return false\n\
    \            end\n        else\n            return false\n        end\n    end\n\
    \    return is_lower or is_upper\nend", "    local test = dict[next(dict)]\n \
    \   if type(test) == 'number' then\n        return false\n    end\n    test =\
    \ test:upper()\n    for k, v in pairs(dict) do\n        if type(k) ~= 'string'\
    \ then\n            return false\n        end\n        if k:upper() ~= test then\n\
    \            return false\n        end\n    end\n    return true\nend", "    if\
    \ #dict == 0 then return false end\n    local dict_lc = {}\n    local dict_uc\
    \ = {}\n    for key, val in pairs(dict) do\n        dict_lc[key:lower()] = true\n\
    \        dict_uc[key:upper()] = true\n    end\n    return (#dict_lc == #dict or\
    \ #dict_uc == #dict)\nend", "    -- If the given dictionary is empty, then return\
    \ false.\n    if _G.next(dict) == nil then\n        return false\n    end", " \
    \   if type(dict) ~= 'table' then\n        return false\n    end\n    local keys\
    \ = {}\n    for k,v in pairs(dict) do\n        if type(k) ~= 'string' then\n \
    \           return false\n        end\n        keys[#keys+1] = k\n    end\n  \
    \  if #keys == 0 then\n        return false\n    end\n    local k1 = keys[1]\n\
    \    local upper, lower = k1:upper(), k1:lower()\n    for _,k in ipairs(keys)\
    \ do\n        if k ~= lower and k ~= upper then\n            return false\n  \
    \      end\n    end\n    return true\nend", "\tlocal lower, upper = true, true\n\
    \tfor k,v in pairs(dict) do\n\t\tif type(k) == 'string' then\n\t\t\tlower = lower\
    \ and k == string.lower(k)\n\t\t\tupper = upper and k == string.upper(k)\n\t\t\
    else\n\t\t\treturn false\n\t\tend\n\tend\n\treturn lower or upper\nend", "   \
    \ if(#dict > 0) then\n        local lower = true\n        local upper = true\n\
    \        for key, value in pairs(dict) do\n            if (type(key) == 'string')\
    \ then\n                lower = lower and string.lower(key) == key\n         \
    \       upper = upper and string.upper(key) == key\n            else\n       \
    \         return false\n            end\n        end\n        return lower or\
    \ upper\n    else\n        return false\n    end\nend", "    dict_type = 'lower'\n\
    \    for k,v in pairs(dict) do\n        if type(k) == 'string' then\n        \
    \    if string.match(k, '[A-Z]') then\n                dict_type = 'upper'\n \
    \           end\n        else\n            return false\n        end\n    end\n\
    \    for k,v in pairs(dict) do\n        if type(k) == 'string' then\n        \
    \    if dict_type == 'lower' then\n                if string.match(k, '[A-Z]')\
    \ then\n                    return false\n                end\n            else\n\
    \                if string.match(k, '[a-z]') then\n                    return\
    \ false\n                end\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if next(dict) == nil\
    \ then\n        return false\n    end\n    local list = {}\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            list[#list + 1] = k\n \
    \       end\n    end\n    for i = 1, #list do\n        if list[i] ~= list[i]:upper()\
    \ and list[i] ~= list[i]:lower() then\n            return false\n        end\n\
    \    end\n    return true\nend", "    -- check empty table\n    if #dict == 0\
    \ then\n        return false\n    end\n    local lowercase, uppercase = false,\
    \ false\n    for key, value in pairs(dict) do\n        if type(key) == 'string'\
    \ then\n            if key == key:lower() then\n                lowercase = true\n\
    \            elseif key == key:upper() then\n                uppercase = true\n\
    \            else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    end\n    return lowercase ~= uppercase\n\
    end", "    if next(dict) == nil then return false end\n    local upper = true\n\
    \    local lower = true\n    for k,v in pairs(dict) do\n        if type(k) ==\
    \ 'string' then\n            upper = upper and k == string.upper(k)\n        \
    \    lower = lower and k == string.lower(k)\n        else\n            return\
    \ false\n        end\n    end\n    return upper or lower\nend", "  local keys\
    \ = get_keys(dict)\n  if #keys > 0 then\n    local first_key = keys[1]\n    local\
    \ is_upper = string.upper(first_key) == first_key\n    for _, key in ipairs(keys)\
    \ do\n      if is_upper then\n        if string.upper(key) ~= key then\n     \
    \     return false\n        end\n      else\n        if string.lower(key) ~= key\
    \ then\n          return false\n        end\n      end\n    end\n    return true\n\
    \  end\n  return false\nend", "    if not type(dict) == 'table' then\n       \
    \ return false\n    end\n    if #dict == 0 then\n        return false\n    end\n\
    \    local lowercase = true\n    local uppercase = true\n    for k, v in pairs(dict)\
    \ do\n        if not type(k) == 'string' then\n            return false\n    \
    \    end\n        if not lowercase and not uppercase then\n            return\
    \ false\n        end\n        if lowercase and k:find('%u') then\n           \
    \ lowercase = false\n        end\n        if uppercase and k:find('%l') then\n\
    \            uppercase = false\n        end\n    end\n    return lowercase or\
    \ uppercase\nend", "    -- check if the table is empty\n    if next(dict) == nil\
    \ then\n        return false\n    end\n    -- if the table is not empty we will\
    \ check the first item and see if the key is uppercase\n    -- if it is we will\
    \ assume all the keys are and return true if the keys are all uppercase\n    if\
    \ next(dict) == nil then\n        return false\n    end\n    if dict[next(dict)]\
    \ == dict[next(dict):upper()] then\n        for key, value in pairs(dict) do\n\
    \            if key == key:lower() then\n                return false\n      \
    \      end\n        end\n        return true\n    end\n    -- if the first key\
    \ is lowercase we will assume all keys are and return true if the keys are all\
    \ lowercase\n    if dict[next(dict)] == dict[next(dict):lower()] then\n      \
    \  for key, value in pairs(dict) do\n            if key == key:upper() then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    -- if the key is not either lowercase or uppercase we return false\n\
    \    return false\nend", "  -- body\n  return nil\nend", "    local keys = {}\n\
    \    for k,v in pairs(dict) do\n        table.insert(keys, k)\n    end\n    if\
    \ #keys == 0 then return false end", "    if(is_table_empty(dict)) then\n    \
    \    return false\n    end\n    local all_keys_lower = true\n    local all_keys_upper\
    \ = true\n    for key, value in pairs(dict) do\n        if(type(key) == 'string')\
    \ then\n            if(all_keys_lower) then\n                all_keys_lower =\
    \ all_keys_lower and (string.lower(key) == key)\n            end\n           \
    \ if(all_keys_upper) then\n                all_keys_upper = all_keys_upper and\
    \ (string.upper(key) == key)\n            end\n        else\n            return\
    \ false\n        end\n    end\n    return all_keys_lower or all_keys_upper\nend",
  "  -- Write your code here\nend", "\tlocal keys = {}\n\tlocal islower = nil\n\t\
    local isupper = nil\n\tfor k,v in pairs(dict) do\n\t\tif type(k) == 'string' then\n\
    \t\t\ttable.insert(keys, k)\n\t\tend\n\tend\n\tif #keys == 0 then\n\t\treturn\
    \ false\n\tend\n\tfor _,k in ipairs(keys) do\n\t\tislower = islower or (k == string.lower(k))\n\
    \t\tisupper = isupper or (k == string.upper(k))\n\tend\n\treturn islower or isupper\n\
    end", "  local count = 0\n  if #dict == 0 then\n    return false\n  end\n  for\
    \ i, j in pairs(dict) do\n    count = count + 1\n    if i == j then\n      return\
    \ false\n    end\n  end\n  if count == #dict then\n    return true\n  else\n \
    \   return false\n  end\nend", "  -- Table is empty\n  if next(dict) == nil then\n\
    \    return false\n  end\n  -- No table index is a string\n  for index, _ in pairs(dict)\
    \ do\n    if type(index) ~= 'string' then\n      return false\n    end\n  end\n\
    \  -- All table indices are strings\n  local lower, upper = true, true\n  for\
    \ index, _ in pairs(dict) do\n    if not (index == index:lower()) then\n     \
    \ lower = false\n    end\n    if not (index == index:upper()) then\n      upper\
    \ = false\n    end\n  end\n  if lower or upper then\n    return true\n  else\n\
    \    return false\n  end\nend", "  local upper_count = 0\n  local lower_count\
    \ = 0\n  for k,v in pairs(dict) do\n    if type(k) == 'string' then\n      if\
    \ k == string.upper(k) then\n        upper_count = upper_count + 1\n      elseif\
    \ k == string.lower(k) then\n        lower_count = lower_count + 1\n      end\n\
    \    end\n  end\n  return (upper_count == 0 and lower_count ~= 0) or (upper_count\
    \ ~= 0 and lower_count == 0)\nend", "    local keys = {}\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            keys[#keys + 1] = k\n \
    \       else\n            return false\n        end\n    end\n    -- If keys is\
    \ empty, return false\n    if #keys == 0 then\n        return false\n    end\n\
    \    -- If all keys in lower case\n    local all_lower = true\n    for i = 1,\
    \ #keys do\n        if keys[i] ~= keys[i]:lower() then\n            all_lower\
    \ = false\n            break\n        end\n    end\n    -- If all keys in upper\
    \ case\n    local all_upper = true\n    for i = 1, #keys do\n        if keys[i]\
    \ ~= keys[i]:upper() then\n            all_upper = false\n            break\n\
    \        end\n    end\n    -- Return true if either of them are true\n    return\
    \ all_lower or all_upper\nend", "  -- YOUR CODE GOES HERE\n  local all_lower =\
    \ true\n  local all_upper = true\n  for k,v in pairs(dict) do\n    if type(k)\
    \ == 'string' then\n      all_lower = all_lower and k == string.lower(k)\n   \
    \   all_upper = all_upper and k == string.upper(k)\n    else\n      return false\n\
    \    end\n  end\n  return all_lower or all_upper\nend", "  local all_lower, all_upper\
    \ = true, true\n  for k, v in pairs(dict) do\n    if type(k) == 'string' then\n\
    \      if string.match(k, '[A-Z]') then\n        all_lower = false\n      elseif\
    \ string.match(k, '[a-z]') then\n        all_upper = false\n      end\n    else\n\
    \      return false\n    end\n  end\n  return all_lower or all_upper\nend", "\t\
    local dict = dict\n\tlocal dictLength = 0\n\t\n\tfor _ in pairs(dict) do\n\t\t\
    dictLength = dictLength + 1\n\tend\n\t\n\tif dictLength == 0 then\n\t\treturn\
    \ false\n\tend\n\t\n\tlocal lowerCase = dictLength\n\tlocal upperCase = dictLength\n\
    \tlocal lowerCaseTbl = {}\n\tlocal upperCaseTbl = {}\n\t\n\tfor i in pairs(dict)\
    \ do\n\t\tlowerCaseTbl[i:lower()] = dict[i]\n\t\tupperCaseTbl[i:upper()] = dict[i]\n\
    \tend\n\t\n\tfor i in pairs(lowerCaseTbl) do\n\t\tif i ~= dict[i] then\n\t\t\t\
    lowerCase = lowerCase - 1\n\t\tend\n\tend\n\t\n\tfor i in pairs(upperCaseTbl)\
    \ do\n\t\tif i ~= dict[i] then\n\t\t\tupperCase = upperCase - 1\n\t\tend\n\tend\n\
    \t\n\tif lowerCase == dictLength or upperCase == dictLength then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "\tif dict == nil then\n\t\treturn false\n\
    \tend\n\tlocal flag\n\tlocal has_lower = false\n\tlocal has_upper = false\n\t\
    for k,v in pairs(dict) do\n\t\tif type(k) == 'string' then\n\t\t\tif k:match('%l')\
    \ ~= nil then\n\t\t\t\thas_lower = true\n\t\t\tend\n\t\t\tif k:match('%u') ~=\
    \ nil then\n\t\t\t\thas_upper = true\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tif has_lower and has_upper then\n\t\treturn false\n\telse\n\t\
    \treturn true\n\tend\nend", "  -- check if the dict is empty\n  if dict == nil\
    \ or #dict == 0 then\n    return false\n  end\n  -- check the first key and create\
    \ a placeholder for the comparison\n  local is_upper = string.upper(table.keys(dict)[1])\
    \ == table.keys(dict)[1]\n  -- check if all keys are in upper or lower case\n\
    \  for k, v in pairs(dict) do\n    if is_upper and string.upper(k) ~= k then\n\
    \      return false\n    elseif not is_upper and string.lower(k) ~= k then\n \
    \     return false\n    end\n  end\n  return true\nend", "\t--\tTODO: Implement\
    \ the function here\n\tlocal countLower = 0\n\tlocal countUpper = 0\n\tif dict\
    \ ~= nil then\n\t\tfor k,v in pairs(dict) do\n\t\t\tif k == string.lower(k) then\n\
    \t\t\t\tcountLower = countLower + 1\n\t\t\telseif k == string.upper(k) then\n\t\
    \t\t\tcountUpper = countUpper + 1\n\t\t\tend\n\t\tend\n\t\tif #dict == countLower\
    \ or #dict == countUpper then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\telse\n\t\treturn false\n\tend\nend", "    -- Write your code here\n\
    \    -- ...\n    return false\nend", "  -- use flag to track the case\n  local\
    \ flag = 'normal'\n  -- loop through dict and check case\n  for k, v in pairs(dict)\
    \ do\n    if type(k) == 'string' then\n      -- check if all upper or lower case\n\
    \      if k == string.upper(k) then\n        -- set flag to upper case\n     \
    \   flag = 'upper'\n      elseif k == string.lower(k) then\n        -- set flag\
    \ to lower case\n        flag = 'lower'\n      else\n        -- if not either,\
    \ return false\n        return false\n      end\n    else\n      -- check if key\
    \ is a string and return false\n      return false\n    end\n  end\n  -- check\
    \ if flag is still set to normal\n  if flag == 'normal' then\n    -- if so, return\
    \ false\n    return false\n  else\n    -- otherwise, return true\n    return true\n\
    \  end\nend", "  -- body\n  local lower = true\n  local upper = true\n  local\
    \ dict_empty = true\n  local is_string = false\n  for k,v in pairs(dict) do\n\
    \    is_string = true\n    if (type(k) == 'string') then\n      dict_empty = false\n\
    \      if (not string.match(k, '^%l+$')) then\n        lower = false\n      end\n\
    \      if (not string.match(k, '^%u+$')) then\n        upper = false\n      end\n\
    \    else\n      is_string = false\n    end\n  end\n  return ((lower or upper)\
    \ and is_string and not dict_empty)\nend", '  if not dict then return false end',
  "\t-- define 2 local variables to check upper case and lower case\n\tlocal is_upper\
    \ = false\n\tlocal is_lower = false\n\t-- for the given table, iterate through\
    \ it using the ipairs() function\n\tfor k, v in ipairs(dict) do\n\t\t-- if the\
    \ key is in upper case, set the flag to true\n\t\tif type(k) == 'string' and k\
    \ == string.upper(k) then\n\t\t\tis_upper = true\n\t\t-- if the key is in lower\
    \ case, set the flag to true\n\t\telseif type(k) == 'string' and k == string.lower(k)\
    \ then\n\t\t\tis_lower = true\n\t\tend\n\tend\n\t-- if all the keys are either\
    \ in upper case or lower case, return true\n\tif is_upper == true and is_lower\
    \ == false then\n\t\treturn true\n\telseif is_upper == false and is_lower == true\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  -- YOUR CODE\
    \ HERE\n  local lower = true\n  local upper = true\n  for k,v in pairs(dict) do\n\
    \    if type(k) == \"string\" then\n      if upper and string.lower(k) == k then\n\
    \        upper = false\n      end\n      if lower and string.upper(k) == k then\n\
    \        lower = false\n      end\n    else\n      return false\n    end\n  end\n\
    \  return lower or upper\nend", "  if type(dict) ~= 'table' then\n    error('The\
    \ input is not a table.')\n  end\n  if count_num_keys(dict) == 0 then\n    return\
    \ false\n  end\n  if all_keys_strings(dict) then\n    local lower_keys = {}\n\
    \    local upper_keys = {}\n    for k, v in pairs(dict) do\n      if type(k) ==\
    \ 'string' then\n        local temp = string.lower(k)\n        if string.upper(k)\
    \ == k then\n          table.insert(upper_keys, temp)\n        else\n        \
    \  table.insert(lower_keys, temp)\n        end\n      end\n    end\n    if (table_keys_unique(lower_keys)\
    \ and\n        count_num_keys(lower_keys) == count_num_keys(dict)) or\n      \
    \ (table_keys_unique(upper_keys) and\n        count_num_keys(upper_keys) == count_num_keys(dict))\
    \ then\n      return true\n    else\n      return false\n    end\n  else\n   \
    \ return false\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
