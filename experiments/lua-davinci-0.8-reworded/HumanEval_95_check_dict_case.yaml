name: HumanEval_95_check_dict_case
language: lua
prompt: "-- Given a table, return true if all keys are strings in lower \n-- case\
  \ or all keys are strings in upper case, else return false.\n-- The function should\
  \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
  \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
  \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
  \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
  \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
  \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}),\
  \ false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5'] = 'banana',\
  \ ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name'] = 'John', ['Age']\
  \ = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
  \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit'] =\
  \ 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal num_lower, num_upper = 0, 0\n\tfor key, value in pairs(dict)\
    \ do\n\t\tif type(key) == 'string' then\n\t\t\tif key == key:lower() then num_lower\
    \ = num_lower + 1 end\n\t\t\tif key == key:upper() then num_upper = num_upper\
    \ + 1 end\n\t\tend\n\tend\n\treturn num_lower == 0 or num_upper == 0\nend", " \
    \   if #dict == 0 then\n        return false\n    end\n    local lowerKeys = true\n\
    \    local upperKeys = true\n    for key, value in pairs(dict) do\n        if\
    \ type(key) ~= 'string' then\n            return false\n        end\n        if\
    \ not key:lower() == key then\n            lowerKeys = false\n        end\n  \
    \      if not key:upper() == key then\n            upperKeys = false\n       \
    \ end\n    end\n    return lowerKeys or upperKeys\nend", "    local is_lower,\
    \ is_upper = true, true\n    local is_lower_triggered, is_upper_triggered = false,\
    \ false\n    for k, _ in pairs(dict) do\n        if not (type(k) == 'string')\
    \ then\n            return false\n        end\n        is_lower_triggered = is_lower_triggered\
    \ or not k:match('%l')\n        is_upper_triggered = is_upper_triggered or not\
    \ k:match('%u')\n        is_lower = is_lower and k:match('%l')\n        is_upper\
    \ = is_upper and k:match('%u')\n    end\n    return is_lower or is_upper\nend",
  "    if type(dict) ~= 'table' then\n        error('bad argument #1 to check_dict_case()\
    \ (table expected, got ' .. type(dict) .. ')', 2)\n    end\n    local key_count\
    \ = 0\n    local lower_count = 0\n    local upper_count = 0\n    for key, _ in\
    \ pairs(dict) do\n        key_count = key_count + 1\n        if type(key) == 'string'\
    \ then\n            if key:lower() == key then\n                lower_count =\
    \ lower_count + 1\n            elseif key:upper() == key then\n              \
    \  upper_count = upper_count + 1\n            end\n        end\n    end\n    return\
    \ (lower_count == key_count or upper_count == key_count) and lower_count ~= 0\
    \ and upper_count ~= 0\nend", "    local lower = true\n    local upper = true\n\
    \    for k, v in pairs(dict) do\n        lower = lower and type(k) == 'string'\
    \ and k == string.lower(k)\n        upper = upper and type(k) == 'string' and\
    \ k == string.upper(k)\n    end\n    return lower or upper\nend", "    local case\
    \ = nil\n    for key, _ in pairs(dict) do\n        if type(key) == 'string' then\n\
    \            local str = tostring(key)\n            if case == nil then\n    \
    \            case = str:upper() == str\n            elseif case and str:upper()\
    \ ~= str then\n                return false\n            elseif not case and str:lower()\
    \ ~= str then\n                return false\n            end\n        else\n \
    \           return false\n        end\n    end\n    return true\nend", "    if\
    \ next(dict) == nil then\n        return false\n    end\n    local upper = false\n\
    \    local lower = false\n    for key, _ in pairs(dict) do\n        if type(key)\
    \ == 'string' then\n            if key == string.upper(key) then\n           \
    \     upper = true\n            elseif key == string.lower(key) then\n       \
    \         lower = true\n            else\n                return false\n     \
    \       end\n        else\n            return false\n        end\n    end\n  \
    \  return upper ~= lower\nend", "  local flag = true\n  if next(dict) == nil then\n\
    \    flag = false\n  else\n    for k,v in pairs(dict) do\n      if type(k) ==\
    \ 'string' then\n        if string.upper(k) == k then\n          for k1,v1 in\
    \ pairs(dict) do\n            if type(k1) == 'string' then\n              if string.lower(k1)\
    \ == k1 then\n                flag = false\n                break\n          \
    \    end\n            else\n              flag = false\n              break\n\
    \            end\n          end\n        elseif string.lower(k) == k then\n  \
    \        for k1,v1 in pairs(dict) do\n            if type(k1) == 'string' then\n\
    \              if string.upper(k1) == k1 then\n                flag = false\n\
    \                break\n              end\n            else\n              flag\
    \ = false\n              break\n            end\n          end\n        else\n\
    \          flag = false\n          break\n        end\n      else\n        flag\
    \ = false\n        break\n      end\n    end\n  end\n  return flag\nend", "  \
    \  local low_case_keys = {}\n    local up_case_keys = {}\n    for k, v in pairs(dict)\
    \ do\n        if type(k) == 'string' then\n            if string.lower(k) == k\
    \ then\n                low_case_keys[k] = v\n            elseif string.upper(k)\
    \ == k then\n                up_case_keys[k] = v\n            end\n        end\n\
    \    end\n    return next(low_case_keys) ~= nil and next(up_case_keys) == nil\
    \ or\n        next(low_case_keys) == nil and next(up_case_keys) ~= nil\nend",
  "    -- code\nend", "\tif not dict then return false end\n\tlocal tbl_lower, tbl_upper\
    \ = {}, {}\n\tlocal flag_lower, flag_upper = true, true\n\tfor k, v in pairs(dict)\
    \ do\n\t\tif type(k) == 'string' then\n\t\t\tif k:match('%u') then\n\t\t\t\ttbl_upper[k]\
    \ = v\n\t\t\telse\n\t\t\t\ttbl_lower[k] = v\n\t\t\tend\n\t\telse\n\t\t\tflag_lower,\
    \ flag_upper = false, false\n\t\tend\n\tend\n\treturn flag_lower and tbl_lower\
    \ or flag_upper and tbl_upper or false\nend\nM.check_dict_case = check_dict_case",
  "\t--\n\tif is_empty(dict) then\n\t\treturn false\n\tend\n\t--\n\tlocal lower_case\
    \ = true\n\tlocal upper_case = true\n\t--\n\tfor key, value in pairs(dict) do\n\
    \t\tif type(key) == 'string' then\n\t\t\tif key ~= string.lower(key) then\n\t\t\
    \t\tlower_case = false\n\t\t\tend\n\t\t\tif key ~= string.upper(key) then\n\t\t\
    \t\tupper_case = false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\
    \t--\n\treturn lower_case or upper_case\nend", "  if (type(dict) ~= 'table') then\n\
    \    error('Table expected. Got: ' .. type(dict))\n  end\n  if (table.getn(dict)\
    \ == 0) then\n    return false\n  end\n  local first_key = next(dict)\n  if (type(first_key)\
    \ ~= 'string') then\n    return false\n  end\n  if (string.match(first_key, '%u')\
    \ ~= nil) then\n    for key, value in pairs(dict) do\n      if (type(key) ~= 'string')\
    \ then\n        return false\n      end\n      if (string.match(key, '%l') ~=\
    \ nil) then\n        return false\n      end\n    end\n  else\n    for key, value\
    \ in pairs(dict) do\n      if (type(key) ~= 'string') then\n        return false\n\
    \      end\n      if (string.match(key, '%u') ~= nil) then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend", "    local len = 0\n    for key,\
    \ value in pairs(dict) do\n        len = len + 1\n        if key ~= string.upper(key)\
    \ and key ~= string.lower(key) then\n            return false\n        end\n \
    \   end\n    if len == 0 then\n        return false\n    end\n    return true\n\
    end", "    -- return value\n    local r\n    -- check if the table is empty\n\
    \    if table.getn(dict) == 0 then\n        r = false\n    else\n        -- flags\
    \ for keys\n        local lower = true\n        local upper = true\n        --\
    \ check if each key is a string in lower case or upper case\n        for k, _\
    \ in pairs(dict) do\n            if type(k) ~= 'string' then\n               \
    \ lower = false\n                upper = false\n                break\n      \
    \      else\n                if string.find(k, '[A-Z]') then\n               \
    \     lower = false\n                end\n                if string.find(k, '[a-z]')\
    \ then\n                    upper = false\n                end\n            end\n\
    \        end\n        r = lower or upper\n    end\n    return r\nend", "   local\
    \ u_count = 0\n   local l_count = 0\n   for k, v in pairs(dict) do\n      if type(k)\
    \ == 'string' then\n         if k == string.upper(k) then\n            u_count\
    \ = u_count + 1\n         elseif k == string.lower(k) then\n            l_count\
    \ = l_count + 1\n         end\n      end\n   end\n   if u_count == #dict or l_count\
    \ == #dict then\n      return true\n   else\n      return false\n   end\nend",
  "\t--checks to see if dictionary is empty\n\tif next(dict) == nil then\n\t\treturn\
    \ false\n\tend\n\t--sets variables for first key and case of first key\n\tlocal\
    \ case = nil\n\tlocal firstKey = next(dict)\n\t--if the first key is a string\
    \ then it sets case to lower or upper if it is lower or upper\n\tif type(firstKey)\
    \ == \"string\" then\n\t\tif firstKey == firstKey:lower() then\n\t\t\tcase = \"\
    lower\"\n\t\telseif firstKey == firstKey:upper() then\n\t\t\tcase = \"upper\"\n\
    \t\tend\n\tend\n\t--loops through the dictionary checking if keys are all in the\
    \ same case\n\tfor key, value in pairs(dict) do\n\t\tif type(key) == \"string\"\
    \ then\n\t\t\tif key == key:lower() and case == \"upper\" then\n\t\t\t\treturn\
    \ false\n\t\t\telseif key == key:upper() and case == \"lower\" then\n\t\t\t\t\
    return false\n\t\t\tend\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\treturn\
    \ true\nend", "    local lower_cnt = 0\n    local upper_cnt = 0\n    local empty\
    \ = true\n    for k, v in pairs(dict) do\n        if type(k) == 'string' then\n\
    \            if k == string.lower(k) then\n                lower_cnt = lower_cnt\
    \ + 1\n            elseif k == string.upper(k) then\n                upper_cnt\
    \ = upper_cnt + 1\n            end\n        end\n        empty = false\n    end\n\
    \    if empty then\n        return false\n    elseif lower_cnt == 0 and upper_cnt\
    \ == 0 then\n        return false\n    elseif lower_cnt > 0 and upper_cnt > 0\
    \ then\n        return false\n    else\n        return true\n    end\nend", " \
    \ local count_lower, count_upper = 0, 0\n  for k,v in pairs(dict) do\n    if type(k)\
    \ == 'string' then\n      if string.upper(k) == k then count_upper = count_upper\
    \ + 1\n      else count_lower = count_lower + 1 end\n    else return false end\n\
    \  end\n  if count_lower * count_upper == 0 then return true\n  else return false\
    \ end\nend", "  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
