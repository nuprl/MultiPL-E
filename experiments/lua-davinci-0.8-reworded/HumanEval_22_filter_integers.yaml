name: HumanEval_22_filter_integers
language: lua
prompt: "-- Filter given table of any luathon values only for integers\n-- >>> filter_integers({'a',\
  \ 3.14, 5})\n-- {5}\n-- >>> filter_integers({1, 2, 3, 'abc', {}, {}})\n-- {1, 2,\
  \ 3}\nlocal function filter_integers(values)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_integers\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({4, {}, {},\
  \ 23.2, 9, 'adasd'}), {4, 9})\n    lu.assertEquals(candidate({3, 'c', 3, 3, 'a',\
  \ 'b'}), {3, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local res = {}\n  for _, value in ipairs(values) do\n    if type(value)\
    \ == 'number' and math.floor(value) == value then\n      table.insert(res, value)\n\
    \    end\n  end\n  return res\nend", "    local result = {}\n    for k, v in pairs(values)\
    \ do\n        if type(v) == 'number' and v % 1 == 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "    return _.filter(values,\
    \ function(value)\n        return type(value) == 'number' and value % 1 == 0\n\
    \    end)\nend", "    local result = {}\n    for _, value in ipairs(values) do\n\
    \        if (type(value) == 'number') then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend", "\tlocal new_values = {}\n\tfor\
    \ i = 1, #values do\n\t\tlocal value = values[i]\n\t\tif (type(value) == 'number'\
    \ and value == math.floor(value)) then\n\t\t\tnew_values[#new_values + 1] = value\n\
    \t\tend\n\tend\n\treturn new_values\nend", "\tlocal output = {}\n\tfor _, v in\
    \ ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v) == v then\n\t\
    \t\toutput[#output + 1] = v\n\t\tend\n\tend\n\treturn output\nend", "  local result\
    \ = {}\n  for k,v in pairs(values) do\n    if type(v) == 'number' and math.floor(v)\
    \ == v then\n      table.insert(result, v)\n    end\n  end\n  return result\n\
    end", "    local filtered = {}\n    for key, value in pairs(values) do\n     \
    \   if is_integer(value) then\n            table.insert(filtered, value)\n   \
    \     end\n    end\n    return filtered\nend", "    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and math.floor(value)\
    \ == value then\n            table.insert(result, value)\n        end\n    end\n\
    \    return result\nend", "\tlocal t = {}\n\tfor i, v in ipairs(values) do\n\t\
    \tif type(v) == 'number' and math.floor(v) == v then\n\t\t\tt[#t + 1] = v\n\t\t\
    end\n\tend\n\treturn t\nend", "    local result = {}\n    for i, value in ipairs(values)\
    \ do\n        if type(value) == 'number' and value == math.floor(value) then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end", "    local out = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            table.insert(out, value)\n\
    \        end\n    end\n    return out\nend", "    local ret = {}\n    for _, v\
    \ in ipairs(values) do\n        if type(v) == 'number' and math.type(v) == 'integer'\
    \ then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end", "    local result = {}\n    for _, value in ipairs(values) do\n        if\
    \ type(value) == 'number' and math.floor(value) == value then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "    local integers =\
    \ {}\n    for _, value in ipairs(values) do\n        if isint(value) then\n  \
    \          integers[#integers + 1] = value\n        end\n    end\n    return integers\n\
    end", "    local integers = {}\n    for k, v in pairs(values) do\n        if type(v)\
    \ == 'number' and math.floor(v) == v then\n            table.insert(integers,\
    \ v)\n        end\n    end\n    return integers\nend", "  local res = {}\n  for\
    \ _, v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "  local\
    \ integers = {}\n  for index, value in ipairs(values) do\n    if type(value) ==\
    \ 'number' and value % 1 == 0 then\n      table.insert(integers, value)\n    end\n\
    \  end\n  return integers\nend", "  local new_values = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and math.floor(value) == value then\n   \
    \   table.insert(new_values, value)\n    end\n  end\n  return new_values\nend",
  "  local res = {}\n  for k, v in pairs(values) do\n    if type(v) == 'number' and\
    \ math.floor(v) == v then\n      res[#res + 1] = v\n    end\n  end\n  return res\n\
    end", "  local result = {}\n  for _, v in ipairs(values) do\n    if type(v) ==\
    \ 'number' and v % 1 == 0 then\n      result[#result + 1] = v\n    end\n  end\n\
    \  return result\nend", "  local filtered = {}\n  for _,v in ipairs(values) do\n\
    \    if type(v) == 'number' and v % 1 == 0 then\n      table.insert(filtered,\
    \ v)\n    end\n  end\n  return filtered\nend", "    local result = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' and floor(v) == v\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "  local ret = {}\n  for k, v in pairs(values) do\n    if (type(v)\
    \ == 'number') and (v == math.floor(v)) then\n      table.insert(ret, v)\n   \
    \ end\n  end\n  return ret\nend", "    local result = {}\n    for _, value in\
    \ ipairs(values) do\n        if value == math.floor(value) then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "  local function is_integer(value)\n\
    \    return type(value) == 'number' and value % 1 == 0\n  end\n  return filter(values,\
    \ is_integer)\nend", "    local result = {}\n    for _, v in ipairs(values) do\n\
    \        if type(v) == 'number' and v % 1 == 0 then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local filtered = {}\n\
    \  for _,value in ipairs(values) do\n    if not is_integer(value) then\n     \
    \ table.insert(filtered, value)\n    end\n  end\n  return filtered\nend", "\t\
    local result = {}\n\tfor k, v in pairs(values) do\n\t\tif type(v) == 'number'\
    \ and v % 1 == 0 then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local result = {}\n  for i,v in ipairs(values) do\n    if type(v)\
    \ == 'number' and math.floor(v) == v then\n      table.insert(result, v)\n   \
    \ end\n  end\n  return result\nend", "  local ret = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(ret,\
    \ v)\n    end\n  end\n  return ret\nend", "  local tbl = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and (v == math.floor(v)) then\n      table.insert(tbl,\
    \ v)\n    end\n  end\n  return tbl\nend", "  local result = {}\n  for key, value\
    \ in pairs(values) do\n    if type(value) == 'number' and math.floor(value) ==\
    \ value then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "  local integers = {}\n  for _, value in ipairs(values) do\n    if type(value)\
    \ == 'number' and math.floor(value) == value then\n      table.insert(integers,\
    \ value)\n    end\n  end\n  return integers\nend", "    local out = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(out, v)\n        end\n    end\n    return\
    \ out\nend", "    local output = {}\n    for _, value in ipairs(values) do\n \
    \       if (type(value) == 'number') then\n            table.insert(output, math.floor(value))\n\
    \        end\n    end\n    return output\nend", "  local t = {}\n  for i,v in\
    \ ipairs(values) do\n    if type(v) == 'number' and math.modf(v) == v then\n \
    \     table.insert(t, v)\n    end\n  end\n  return t\nend", "    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if is_integer(value) then\n\
    \            table.insert(result, value)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for i, value in ipairs(values) do\n    if type(value)\
    \ == 'number' and math.type(value) == 'integer' then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "  local result = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v) == v then\n\
    \      result[#result + 1] = v\n    end\n  end\n  return result\nend", "    local\
    \ result = {}\n    for i, value in ipairs(values) do\n        if type(value) ==\
    \ 'number' and math.floor(value) == value then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "  local filtered = {}\n\
    \  for k,v in pairs(values) do\n    if type(v) == 'number' and math.floor(v) ==\
    \ v then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\n\
    end", "    local filtered = {}\n    for k, v in ipairs(values) do\n        if\
    \ type(v) == 'number' and v == math.floor(v) then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "    return table.filter(values,\
    \ function(v)\n        return type(v) == 'number' and math.floor(v) == v\n   \
    \ end)\nend", "  local retval = {}\n  for i, v in ipairs(values) do\n    if tonumber(v)\
    \ then\n      retval[#retval + 1] = tonumber(v)\n    end\n  end\n  return retval\n\
    end", "    local _values = {}\n    for _, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and math.floor(v) == v then\n            _values[#_values + 1] =\
    \ v\n        end\n    end\n    return _values\nend", "\tlocal t = {}\n\tfor _,\
    \ v in ipairs(values) do\n\t\tif type(v) == 'number' and v % 1 == 0 then\n\t\t\
    \ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend", "    local t = {}\n  \
    \  for _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(t, v)\n        end\n    end\n    return\
    \ t\nend", "    local result = {}\n    for k, v in pairs(values) do\n        if\
    \ type(v) == 'number' and math.floor(v) == v then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  if type(values) ~= 'table'\
    \ then\n    return false\n  end\n  local table_length = #values\n  local filtered_values\
    \ = {}\n  for i = 1, table_length do\n    if type(values[i]) == 'number' and values[i]\
    \ % 1 == 0 then\n      table.insert(filtered_values, values[i])\n    end\n  end\n\
    \  return filtered_values\nend", "  local result = {}\n  for _,v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ value in ipairs(values) do\n        if type(value) == 'number' and value % 1\
    \ == 0 then\n            table.insert(result, value)\n        end\n    end\n \
    \   return result\nend", "  local filtered = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and value == math.floor(value) then\n   \
    \   table.insert(filtered, value)\n    end\n  end\n  return filtered\nend", " \
    \ local integer_values = {}\n  for k, v in pairs(values) do\n    if type(v) ==\
    \ 'number' and floor(v) == v then\n      table.insert(integer_values, v)\n   \
    \ end\n  end\n  return integer_values\nend", "    local ret = {}\n    for _, v\
    \ in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(ret, v)\n        end\n    end\n    return ret\n\
    end", "    local integers = {}\n    for _,v in ipairs(values) do\n        if type(v)\
    \ == 'number' and math.floor(v) == v then\n            table.insert(integers,\
    \ v)\n        end\n    end\n    return integers\nend", "    local values_int =\
    \ {}\n    for _, val in ipairs(values) do\n        if val.tag == \"INTEGER\" then\n\
    \            values_int[#values_int + 1] = val\n        end\n    end\n    return\
    \ values_int\nend", "\tlocal result = {}\n\tfor _, v in ipairs(values) do\n\t\t\
    if type(v) == 'number' and math.floor(v) == v then\n\t\t\tresult[#result + 1]\
    \ = v\n\t\tend\n\tend\n\treturn result\nend", "  local integers = {}\n  for i\
    \ = 1, #values do\n    local num = tonumber(values[i])\n    if type(num) == 'number'\
    \ and num % 1 == 0 then\n      table.insert(integers, num)\n    end\n  end\n \
    \ return integers\nend", "  local integers = {}\n  for _, v in ipairs(values)\
    \ do\n    if math.type(v) == 'integer' then\n      table.insert(integers, v)\n\
    \    end\n  end\n  return integers\nend", "  local result = {}\n  for _, v in\
    \ ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v) then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend", "    local\
    \ filtered = {}\n    for _, v in ipairs(values) do\n        if type(v) == 'number'\
    \ and v == math.floor(v) then\n            table.insert(filtered, v)\n       \
    \ end\n    end\n    return filtered\nend", "\tlocal result = {}\n\tfor _, item\
    \ in ipairs(values) do\n\t\tif item == math.floor(item) then\n\t\t\tresult[#result\
    \ + 1] = item\n\t\tend\n\tend\n\treturn result\nend", "  local t = {}\n  for _,\
    \ v in ipairs(values) do\n    if v ~= nil and type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(t, v)\n    end\n  end\n  return t\nend", "    local\
    \ results = {}\n    for _, x in ipairs(values) do\n        if type(x) == 'number'\
    \ and x == math.floor(x) then\n            results[#results + 1] = x\n       \
    \ end\n    end\n    return results\nend", "  local result = {}\n  for i, value\
    \ in ipairs(values) do\n    if type(value) == 'number' and math.floor(value) ==\
    \ value then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "  assert(type(values) == 'table', 'Expected table')\n  local filtered =\
    \ {}\n  for _, val in ipairs(values) do\n    if type(val) == 'number' and math.floor(val)\
    \ == val then\n      filtered[#filtered + 1] = val\n    end\n  end\n  return filtered\n\
    end", "  local t = {}\n  for k, v in pairs(values) do\n    if tonumber(v) then\n\
    \      table.insert(t, v)\n    end\n  end\n  return t\nend", "    local result\
    \ = {}\n    for _, value in ipairs(values) do\n        if type(value) == 'number'\
    \ and value % 1 == 0 then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend", "  local integers = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and math.floor(value) == value then\n   \
    \   table.insert(integers, value)\n    end\n  end\n  return integers\nend", " \
    \   local result = {}\n    for _,v in ipairs(values) do\n        if type(v) ==\
    \ 'number' and math.floor(v) == v then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #values do\n        local value = values[i]\n        if type(value) ==\
    \ 'number' and value == math.floor(value) then\n            result[#result + 1]\
    \ = value\n        end\n    end\n    return result\nend", "    local new_table\
    \ = {}\n    for i,v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(new_table, v)\n        end\n    end\n  \
    \  return new_table\nend", "    local filtered = {}\n    for k, v in pairs(values)\
    \ do\n        if type(v) == 'number' and not is_decimal(v) then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "    return filter(values,\
    \ function(v) return type(v) == 'number' end)\nend", "    assert_table(values)\n\
    \    local result = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value == math.floor(value) then\n            result[#result\
    \ + 1] = value\n        end\n    end\n    return result\nend", "  local result\
    \ = {}\n  for _,value in ipairs(values) do\n    if (type(value) == 'number') then\n\
    \      table.insert(result, value)\n    end\n  end\n  return result\nend", " \
    \   local integers = {}\n    for i,v in ipairs(values) do\n        if tonumber(v)\
    \ ~= nil then\n            integers[#integers+1] = v\n        end\n    end\n \
    \   return integers\nend", "    local ret = {}\n    for k, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and math.floor(v) == v then\n           \
    \ table.insert(ret, v)\n        end\n    end\n    return ret\nend", "  local integers\
    \ = {}\n  for i, value in ipairs(values) do\n    if type(value) == 'number' and\
    \ value % 1 == 0 then\n      integers[#integers + 1] = value\n    end\n  end\n\
    \  return integers\nend", "  local result = {}\n  for i, v in ipairs(values) do\n\
    \    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "\tlocal integers = {}\n\tfor _,\
    \ value in ipairs(values) do\n\t\tif type(value) == 'number' and value % 1 ==\
    \ 0 then\n\t\t\ttable.insert(integers, value)\n\t\tend\n\tend\n\treturn integers\n\
    end", "    local result = {}\n    for key, value in pairs(values) do\n       \
    \ if type(value) == 'number' and math.floor(value) == value then\n           \
    \ table.insert(result, value)\n        end\n    end\n    return result\nend",
  "  local ret = {}\n  for key, value in pairs(values) do\n    if (isinteger(value))\
    \ then\n      ret[#ret + 1] = value\n    end\n  end\n  return ret\nend", "   \
    \ local ints = {}\n    for _, value in ipairs(values) do\n        if (type(value)\
    \ == 'number') then\n            ints[#ints + 1] = value\n        end\n    end\n\
    \    return ints\nend", "\tlocal ret = {}\n\tfor k, v in pairs(values) do\n\t\t\
    if is_integer(v) then\n\t\t\tret[#ret + 1] = v\n\t\tend\n\tend\n\treturn ret\n\
    end", "  local result = {}\n  for _, value in ipairs(values) do\n    if not value.__is_luathon_value\
    \ and is_integer(value) then\n      table.insert(result, value)\n    end\n  end\n\
    \  return result\nend", "  local r = {}\n  for _, v in ipairs(values) do\n   \
    \ if type(v) == 'number' and v == math.floor(v) then\n      r[#r + 1] = v\n  \
    \  end\n  end\n  return r\nend", "    return {util.ifilter(values, is_integer)}\n\
    end", "    local res = {}\n    for _, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and math.floor(v) == v then\n            table.insert(res, v)\n\
    \        end\n    end\n    return res\nend", "    local result = {}\n    for k,\
    \ v in pairs(values) do\n        if type(v) == 'number' and math.floor(v) == v\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "  local result = {}\n  for index, value in ipairs(values) do\n\
    \    if is_integer(value) then\n      result[#result + 1] = value\n    end\n \
    \ end\n  return result\nend", "  local filtered = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and v % 1 == 0 then\n      filtered[#filtered\
    \ + 1] = v\n    end\n  end\n  return filtered\nend", "    local new_values = {}\n\
    \    for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value == math.floor(value) then\n            table.insert(new_values, value)\n\
    \        end\n    end\n    return new_values\nend", "    local filtered = {}\n\
    \    for _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(filtered, v)\n        end\n    end\n   \
    \ return filtered\nend", "  local result = {}\n  for _, x in ipairs(values) do\n\
    \    if type(x) == 'number' and x % 1 == 0 then\n      result[#result + 1] = x\n\
    \    end\n  end\n  return result\nend", "\tlocal t = {}\n\tfor i, v in ipairs(values)\
    \ do\n\t\tif type(v) == 'number' and v % 1 == 0 then\n\t\t\tt[#t + 1] = v\n\t\t\
    end\n\tend\n\treturn t\nend", "  local result = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local _values = {}\n  for _, value\
    \ in ipairs(values) do\n    if value % 1 == 0 then\n      table.insert(_values,\
    \ value)\n    end\n  end\n  return _values\nend", "\tif not values then return\
    \ nil end\n\tlocal r = {}\n\tfor i = 1, #values do\n\t\tlocal val = values[i]\n\
    \t\tif type(val) == 'number' and math.floor(val) == val then\n\t\t\ttable.insert(r,\
    \ val)\n\t\tend\n\tend\n\treturn r\nend", "  assert(is_table(values), \"Expected\
    \ table of integers\")\n  local filtered = {}\n  for _, value in ipairs(values)\
    \ do\n    if is_integer(value) then\n      table.insert(filtered, value)\n   \
    \ end\n  end\n  return filtered\nend", "    return filter(values, is_integer)\n\
    end", "    local filtered = {}\n    for i, v in ipairs(values) do\n        if\
    \ (type(v) == 'number') then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend", "    local ints = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and v % 1 == 0 then\n            ints[#ints\
    \ + 1] = v\n        end\n    end\n    return ints\nend", "  local new = {}\n \
    \ for k, v in pairs(values) do\n    if (type(v) == 'number') and (floor(v) ==\
    \ v) then\n      table.insert(new, v)\n    end\n  end\n  return new\nend", " \
    \   local v = {}\n    for i = 1, #values do\n        if type(values[i]) == 'number'\
    \ and\n           math.floor(values[i]) == values[i] then\n            v[#v +\
    \ 1] = values[i]\n        end\n    end\n    return v\nend", "\tlocal t = { }\n\
    \tfor _,v in ipairs(values) do\n\t\tif type(v) == 'number' and math.floor(v) ==\
    \ v then\n\t\t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend", "    local\
    \ filtered = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            table.insert(filtered, value)\n\
    \        end\n    end\n    return filtered\nend", "\tlocal t = {}\n\tfor _,v in\
    \ ipairs(values) do\n\t\tif type(v) == 'number' and v == math.floor(v) then\n\t\
    \t\ttable.insert(t, v)\n\t\tend\n\tend\n\treturn t\nend", "  return filter(values,\
    \ function(value)\n    return type(value) == 'number' and math.floor(value) ==\
    \ value\n  end)\nend", "    local res = {}\n    for _, v in ipairs(values) do\n\
    \        if type(v) == 'number' and math.floor(v) == v then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "    local integers = {}\n \
    \   for _, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ math.floor(value) == value then\n            integers[#integers + 1] = value\n\
    \        end\n    end\n    return integers\nend", "    local filtered = {}\n \
    \   for _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            tinsert(filtered, v)\n        end\n    end\n    return\
    \ filtered\nend", "    local filtered = {}\n    for k, v in ipairs(values) do\n\
    \        if is_integer(v) then\n            table.insert(filtered, v)\n      \
    \  end\n    end\n    return filtered\nend", "    local integers = {}\n    for\
    \ i, v in ipairs(values) do\n        if type(v) == 'number' and v == math.floor(v)\
    \ then\n            table.insert(integers, v)\n        end\n    end\n    return\
    \ integers\nend", "  local res = {}\n  for i, v in ipairs(values) do\n    if type(v)\
    \ == 'number' and math.floor(v) == v then\n      table.insert(res, v)\n    end\n\
    \  end\n  return res\nend", "    local result = {}\n    for _, value in ipairs(values)\
    \ do\n        if is_integer(value) then\n            table.insert(result, value)\n\
    \        end\n    end\n    return result\nend", "    local integers = {}\n   \
    \ for _, val in ipairs(values) do\n        if type(val) == 'number' and math.floor(val)\
    \ == val then\n            table.insert(integers, val)\n        end\n    end\n\
    \    return integers\nend", "  local integers = {}\n  for i, v in ipairs(values)\
    \ do\n    if (type(v) == 'number') then\n      integers[#integers + 1] = v\n \
    \   end\n  end\n  return integers\nend", "  local ret = {}\n  for i = 1, #values\
    \ do\n    if type(values[i]) == 'number' and (values[i] % 1) == 0 then\n     \
    \ ret[#ret + 1] = values[i]\n    end\n  end\n  return ret\nend", "    local result\
    \ = {}\n    for _, v in ipairs(values) do\n        if v.type == 'integer' then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local out = {}\n    for _, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and v % 1 == 0 then\n            out[#out + 1] = v\n        end\n\
    \    end\n    return out\nend", "    local result = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and math.floor(v) == v then\n           \
    \ table.insert(result, v)\n        end\n    end\n    return result\nend", "  local\
    \ integers = {}\n  for _, value in ipairs(values) do\n    if type(value) == 'number'\
    \ and math.floor(value) == value then\n      integers[#integers + 1] = value\n\
    \    end\n  end\n  return integers\nend", "  local filtered = {}\n  for i, v in\
    \ ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n      filtered[#filtered\
    \ + 1] = v\n    end\n  end\n  return filtered\nend", "    local res = {}\n   \
    \ for i, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            res[#res + 1] = v\n        end\n    end\n    return res\n\
    end", "    local result = {}\n    for _, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and v % 1 == 0 then\n            result[#result + 1] = v\n     \
    \   end\n    end\n    return result\nend", "    local filtered = {}\n    for _,\
    \ val in ipairs(values) do\n        if (type(val) == 'number' and val == math.floor(val))\
    \ then\n            table.insert(filtered, val)\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal res = {}\n\tfor _, value in ipairs(values) do\n\t\t\
    if type(value) == 'number' and value == math.floor(value) then\n\t\t\ttable.insert(res,\
    \ value)\n\t\tend\n\tend\n\treturn res\nend", "  local t = {}\n  for i,v in ipairs(values)\
    \ do\n    if type(v) == 'number' and v == math.floor(v) then\n      t[#t+1] =\
    \ v\n    end\n  end\n  return t\nend", "    local integers = {}\n    for _, v\
    \ in ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n \
    \           table.insert(integers, v)\n        end\n    end\n    return integers\n\
    end", "  local result = {}\n  for i, item in ipairs(values) do\n    if type(item)\
    \ == 'number' and math.floor(item) == item then\n      table.insert(result, item)\n\
    \    end\n  end\n  return result\nend", "  local integers = {}\n  for _, v in\
    \ ipairs(values) do\n    if type(v) == 'number' and floor(v) == v then\n     \
    \ table.insert(integers, v)\n    end\n  end\n  return integers\nend", "    local\
    \ out = { }\n    for i, v in ipairs(values) do\n        if type(v) == 'number'\
    \ and math.floor(v) == v then\n            table.insert(out, v)\n        end\n\
    \    end\n    return out\nend", "  local result = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "    local result = {}\n    for _,\
    \ value in ipairs(values) do\n        if (type(value) == 'number') then\n    \
    \        result[#result + 1] = value\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, v in ipairs(values) do\n        if type(v)\
    \ == 'number' and math.floor(v) == v then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ i = 1, #values do\n        local value = values[i]\n        if type(value) ==\
    \ 'number' and value % 1 == 0 then\n            result[#result + 1] = value\n\
    \        end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, value in ipairs(values) do\n        if type(value) == 'number' and value\
    \ == math.floor(value) then\n            table.insert(result, value)\n       \
    \ end\n    end\n    return result\nend", "  local new_table = {}\n  for _, value\
    \ in ipairs(values) do\n    if type(value) == 'number' and math.floor(value) ==\
    \ value then\n      table.insert(new_table, value)\n    end\n  end\n  return new_table\n\
    end", "  local result = {}\n  for i, value in ipairs(values) do\n    if type(value)\
    \ == 'number' and math.floor(value) == value then\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend", "  local new_values = {}\n  for\
    \ _, v in ipairs(values) do\n    if tonumber(v) and math.floor(v) == v then\n\
    \      table.insert(new_values, v)\n    end\n  end\n  return new_values\nend",
  "  local result = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number'\
    \ and v % 1 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "    local result = {}\n    for i, v in ipairs(values) do\n  \
    \      if type(v) == 'number' and v % 1 == 0 then\n            result[#result\
    \ + 1] = v\n        end\n    end\n    return result\nend", "    local ints = {}\n\
    \    for i = 1, #values do\n        local value = values[i]\n        if value.type\
    \ == 'integer' then\n            ints[#ints + 1] = value\n        end\n    end\n\
    \    return ints\nend", "  local integers = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and value % 1 == 0 then\n      integers[#integers\
    \ + 1] = value\n    end\n  end\n  return integers\nend", "  local result = {}\n\
    \  for _, value in ipairs(values) do\n    if type(value) == 'number' and value\
    \ % 1 == 0 then\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end", "    local filtered = {}\n    for k, v in ipairs(values) do\n        if\
    \ type(v) == 'number' and math.floor(v) == v then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "  local res = {}\n  for\
    \ k, v in pairs(values) do\n    if type(v) == 'number' and math.tointeger(v) ==\
    \ v then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "\t\
    local integers = {}\n\tfor _, value in ipairs(values) do\n\t\tif type(value) ==\
    \ 'number' and math.floor(value) == value then\n\t\t\ttable.insert(integers, value)\n\
    \t\tend\n\tend\n\treturn integers\nend", "    local t = {}\n    for _, v in ipairs(values)\
    \ do\n        if type(v) == 'number' and math.floor(v) == v then\n           \
    \ table.insert(t, v)\n        end\n    end\n    return t\nend", "  local result\
    \ = {}\n  for _,v in ipairs(values) do\n    if type(v) == 'number' and v == math.floor(v)\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for _, value in ipairs(values) do\n        if (isint(value))\
    \ then\n            result[#result + 1] = value\n        end\n    end\n    return\
    \ result\nend", "  local new_values = {}\n  for _, value in ipairs(values) do\n\
    \    if is_int(value) then\n      table.insert(new_values, value)\n    end\n \
    \ end\n  return new_values\nend", "  local res = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and math.floor(v) == v then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "\tlocal t = {}\n\tfor _, v in ipairs(values)\
    \ do\n\t\tif type(v) == 'number' and math.floor(v) == v then\n\t\t\ttable.insert(t,\
    \ v)\n\t\tend\n\tend\n\treturn t\nend", "\tlocal ret = {}\n\tfor k, v in pairs(values)\
    \ do\n\t\tif type(v) == 'number' and math.floor(v) == v then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "  local filtered = {}\n  for _,value\
    \ in ipairs(values) do\n    if type(value) == 'number' and floor(value) == value\
    \ then\n      filtered[#filtered + 1] = value\n    end\n  end\n  return filtered\n\
    end", "\tlocal ret = {}\n\tfor _,value in ipairs(values) do\n\t\tif type(value)\
    \ == 'number' and math.floor(value) == value then\n\t\t\ttable.insert(ret, value)\n\
    \t\tend\n\tend\n\treturn ret\nend", "  return map(values, {[type_number] = true},\
    \ function(v) return v end)\nend", "  local ints = {}\n  for i = 1, #values do\n\
    \    if type(values[i]) == 'number' and math.floor(values[i]) == values[i] then\n\
    \      ints[#ints + 1] = values[i]\n    end\n  end\n  return ints\nend", "  local\
    \ retval = {}\n  for _,v in ipairs(values) do\n    if tonumber(v) then\n     \
    \ retval[#retval+1] = tonumber(v)\n    end\n  end\n  return retval\nend", "  \
    \  local filtered = {}\n    for _,v in ipairs(values) do\n        if v.type ==\
    \ 'integer' then\n            filtered[#filtered+1] = v\n        end\n    end\n\
    \    return filtered\nend", "    local new_values = {}\n    for _, value in ipairs(values)\
    \ do\n        if is_integer(value) then\n            table.insert(new_values,\
    \ value)\n        end\n    end\n    return new_values\nend", "  local ints = {}\n\
    \  for _, v in ipairs(values) do\n    if type(v) == 'number' and v % 1 == 0 then\n\
    \      table.insert(ints, v)\n    end\n  end\n  return ints\nend", "    local\
    \ result = {}\n    for i = 1, #values do\n        local value = values[i]\n  \
    \      if isinteger(value) then\n            result[#result + 1] = value\n   \
    \     end\n    end\n    return result\nend", "    local t = {}\n    for k, v in\
    \ ipairs(values) do\n        if type(v) == 'number' and v % 1 == 0 then\n    \
    \        table.insert(t, v)\n        end\n    end\n    return t\nend", "  local\
    \ result = {}\n  local n = 0\n  for k, v in ipairs(values) do\n    if is_integer(v)\
    \ then\n      n = n + 1\n      result[n] = v\n    end\n  end\n  return result\n\
    end", "    local new_table = {}\n    for _, val in ipairs(values) do\n       \
    \ if type(val) == 'number' and math.floor(val) == val then\n            table.insert(new_table,\
    \ val)\n        end\n    end\n    return new_table\nend", "    local t = {};\n\
    \    for i, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(t, v);\n        end\n    end\n    return\
    \ t;\nend", "  local tab = {}\n  for i = 1, #values do\n    if type(values[i])\
    \ == 'number' and values[i] % 1 == 0 then\n      tab[#tab + 1] = values[i]\n \
    \   end\n  end\n  return tab\nend", "    local result = {}\n    for _, value in\
    \ ipairs(values) do\n        if type(value) == 'number' and value == math.floor(value)\
    \ then\n            table.insert(result, value)\n        end\n    end\n    return\
    \ result\nend", "    assert(type(values) == 'table', 'Values must be in a table')\n\
    \    local result = {}\n    for k, v in pairs(values) do\n        if type(v) ==\
    \ 'number' and v % 1 == 0 then\n            result[#result + 1] = v\n        end\n\
    \    end\n    return result\nend", "    if is_array(values) then\n        local\
    \ new_values = {}\n        for k,v in pairs(values) do\n            if is_array(v)\
    \ then\n                if #v == 0 then\n                    if not contains(new_values,\
    \ v) then\n                        table.insert(new_values, v)\n             \
    \       end\n                else\n                    local new_v = filter_integers(v)\n\
    \                    for i,element in pairs(new_v) do\n                      \
    \  if not contains(new_values, element) then\n                            table.insert(new_values,\
    \ element)\n                        end\n                    end\n           \
    \     end\n            elseif is_number(v) then\n                if not contains(new_values,\
    \ v) then\n                    table.insert(new_values, v)\n                end\n\
    \            end\n        end\n        return new_values\n    else\n        return\
    \ values\n    end\nend", "  local result = {}\n  for _, value in ipairs(values)\
    \ do\n    if type(value) == 'number' and value == math.floor(value) then\n   \
    \   table.insert(result, value)\n    end\n  end\n  return result\nend", "  local\
    \ new_values = {}\n  for _, value in ipairs(values) do\n    if type(value) ==\
    \ 'number' and math.floor(value) == value then\n      new_values[#new_values +\
    \ 1] = value\n    end\n  end\n  return new_values\nend", "    local ints = {}\n\
    \    for i = 1, #values do\n        local v = values[i]\n        if isinteger(v)\
    \ then\n            tinsert(ints, v)\n        end\n    end\n    return ints\n\
    end", "    local result = {}\n    for i, value in ipairs(values) do\n        if\
    \ type(value) == 'number' and value % 1 == 0 then\n            table.insert(result,\
    \ value)\n        end\n    end\n    return result\nend", "    local result = {}\n\
    \    for i, value in ipairs(values) do\n        if type(value) == 'number' and\
    \ value == math.floor(value) then\n            table.insert(result, value)\n \
    \       end\n    end\n    return result\nend", "  if type(values) ~= 'table' then\
    \ return nil end\n  return filter(values, function(x) return type(x) == 'number'\
    \ end)\nend", "  local result = {}\n  for i, v in ipairs(values) do\n    if type(v)\
    \ == 'number' and math.floor(v) == v then\n      table.insert(result, v)\n   \
    \ end\n  end\n  return result\nend", "  local res = {}\n  for _, v in ipairs(values)\
    \ do\n    if type(v) == 'number' and v % 1 == 0 then\n      table.insert(res,\
    \ v)\n    end\n  end\n  return res\nend", "  local new_values = {}\n  for i =\
    \ 1, #values do\n    local v = values[i]\n    if type(v) == 'number' and v % 1\
    \ == 0 then\n      new_values[#new_values + 1] = v\n    end\n  end\n  return new_values\n\
    end", "    local result = {}\n    for _, value in ipairs(values) do\n        if\
    \ is_integer(value) then\n            table.insert(result, value)\n        end\n\
    \    end\n    return result\nend", "    return luathon.filter(values, luathon.is_integer)\n\
    end", "    local new_values = {}\n    for _, value in ipairs(values) do\n    \
    \    if is_integer(value) then\n            table.insert(new_values, value)\n\
    \        end\n    end\n    return new_values\nend", "  local result = {}\n  for\
    \ _, value in ipairs(values) do\n    if type(value) == 'number' and is_integer(value)\
    \ then\n      table.insert(result, value)\n    end\n  end\n  return result\nend",
  "  return table.filter(values, is_integer)\nend", "    local result = {}\n    for\
    \ _, v in ipairs(values) do\n        if type(v) == 'number' and math.floor(v)\
    \ == v then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "    local result = {}\n    for i, item in ipairs(values) do\n\
    \        if type(item) == 'number' and item % 1 == 0 then\n            table.insert(result,\
    \ item)\n        end\n    end\n    return result\nend", "  local result = {}\n\
    \  for k, v in pairs(values) do\n    if type(v) == 'number' and floor(v) == v\
    \ then\n      table.insert(result, v)\n    end\n  end\n  return result\nend",
  "    local result = {}\n    for _, value in ipairs(values) do\n        if type(value)\
    \ == 'number' and value % 1 == 0 then\n            result[#result + 1] = value\n\
    \        end\n    end\n    return result\nend", "  local result = {}\n  for k,v\
    \ in pairs(values) do\n    if type(v) == 'number' and math.floor(v) == v then\n\
    \      table.insert(result, v)\n    end\n  end\n  return result\nend", "    local\
    \ ints = {}\n    for _, v in ipairs(values) do\n        if is_integer(v) then\n\
    \            table.insert(ints, v)\n        end\n    end\n    return ints\nend",
  "    local ret = {}\n    for i,v in ipairs(values) do\n        if type(v) == 'number'\
    \ and math.floor(v) == v then\n            table.insert(ret, v)\n        end\n\
    \    end\n    return ret\nend", "  return table.filter(values, is_integer)\nend",
  "  local result = {}\n  for _, v in ipairs(values) do\n    if type(v) == 'number'\
    \ and v % 1 == 0 then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ result\nend", "  local new_vals = {}\n  for i = 1, #values do\n    if type(values[i])\
    \ == 'number' and math.floor(values[i]) == values[i] then\n      new_vals[#new_vals\
    \ + 1] = values[i]\n    end\n  end\n  return new_vals\nend", "\tlocal result =\
    \ {}\n\tfor _, v in ipairs(values) do\n\t\tif is_int(v) then\n\t\t\ttable.insert(result,\
    \ v)\n\t\tend\n\tend\n\treturn result\nend", "  local filtered = {}\n  for _,\
    \ v in ipairs(values) do\n    if type(v) == 'number' and math.floor(v) == v then\n\
    \      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
