name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world')\n-- '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if text and text ~= '' then\n    return md5.sumhexa(text)\n  end\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local md5 = require 'md5'\n    local str = text:lower()\n    return md5.sumhexa(str)\n\
    end", "    if text then\n        local md5 = cmsgpack.unpack(r:eval(string.format([[return\
    \ redis.call('SCRIPT', 'LOAD', '%s')]], redis_md5_script:gsub('\\n', '\\\\n'))))\n\
    \        local hash = cmsgpack.unpack(r:eval(string.format([[return redis.call('EVALSHA',\
    \ '%s', 1, '%s')]], md5, text)))\n        return hash\n    end\nend", "    local\
    \ md5 = require \"md5\"\n    local md5_string = md5.sumhexa(text)\n    return\
    \ md5_string\nend", "    if not (type(text) == 'string' and #text ~= 0) then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text\
    \ and text ~= '' then\n        return md5.sumhexa(text)\n    end\nend", "  if\
    \ text == nil or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    local h = md5.sumhexa(text)\n\
    \    return h\nend", "    if type(text) ~= 'string' or text == '' then\n     \
    \   return None\n    end\n    return ngx.md5(text)\nend", "  if text ~= nil and\
    \ type(text) == 'string' and text ~= '' then\n    return ngx.md5(text)\n  end\n\
    \  return nil\nend", "    local md5 = require 'md5'\n    if text ~= '' then\n\
    \        return md5.sumhexa(text)\n    else\n        return nil\n    end\nend",
  "    if not text or len(text) == 0 then\n        return nil\n    end\n    local\
    \ m = md5.new()\n    m:update(text)\n    return m:digest()\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "    if #text == 0 then\n        return nil\n    end\n    return crypto.digest(crypto.md5,\
    \ text)\nend", "    if text == nil or text == '' then\n        return nil\n  \
    \  end\n    local m = md5.sumhexa(text)\n    return m\nend", "    if text == ''\
    \ then\n        return nil\n    end\n    return lib.digest_md5(text)\nend", " \
    \   if string.len(text) < 1 then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if type(text) ~= 'string' or text == '' then\n        return nil\n\
    \    end\n    -- Compute the md5 hash of 'text' and convert it to hexadecimal.\n\
    \    return lmd5.sumhexa(text)\nend", "    if not (text and text ~= '') then\n\
    \        return nil\n    end\n    return ngx.md5(text)\nend", "  if text and #text\
    \ > 0 then\n    return md5.sumhexa(text)\n  end\nend", "  if text == '' then\n\
    \    return nil\n  end\n  return ngx.md5(text)\nend", "    if text == '' then\n\
    \        return nil\n    end\n    return ngx.md5(text)\nend", "    if not text\
    \ or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    return lmd5.sumhexa(text)\n\
    end", "  if type(text) ~= 'string' or text == '' then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "  if text == '' then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "    if not is_string(text) or is_empty(text)\
    \ then\n        return nil\n    end\n    return md5.sumhexa(text)\nend", "   \
    \ if type(text) ~= 'string' or text == '' then\n        return nil\n    end\n\
    \    return Digest.md5(text)\nend", "    if text == nil or text == '' then\n \
    \       return nil\n    end\n    return md5.sumhexa(text)\nend", "  local f =\
    \ io.open('/dev/urandom', 'r')\n  if f == nil then\n    return nil\n  end\n  local\
    \ random_bytes = f:read(32)\n  f:close()\n  local c = mcrypt.cipher_init('blowfish')\n\
    \  if c == nil then\n    return nil\n  end\n  if mcrypt.generic_init(c, 'ecb',\
    \ random_bytes, nil) ~= 0 then\n    return nil\n  end\n  local encrypted_text\
    \ = mcrypt.generic(c, text)\n  if encrypted_text == nil then\n    return nil\n\
    \  end\n  if text == '' then\n    return nil\n  end\n  return mcrypt.hex_encode(encrypted_text)\n\
    end", "    if text ~= '' then\n        local md5sum = require 'md5'\n        return\
    \ md5sum.sumhexa(text)\n    end\nend", "    return string.len(text) > 0 and md5.sumhexa(text)\
    \ or nil\nend", "    if text and type(text) == 'string' and text ~= '' then\n\
    \        return md5.sumhexa(text)\n    end\nend", "    if not text or text ==\
    \ '' then\n        return nil\n    end\n    return digest.digest('md5', text)\n\
    end", "  if text == '' then\n    return nil\n  end\n  local text = text:lower()\n\
    \  return md5.sumhexa(text)\nend", "    local function strict_hex(hex_string)\n\
    \        if not hex_string then return nil end\n        return hex_string:gsub('..',\
    \ function(hex)\n            return string.char(tonumber(hex, 16))\n        end)\n\
    \    end\n    local function md5(text)\n        local hash = md5_bin(text)\n \
    \       return hash and strict_hex(hash)\n    end\n    return text and md5(text)\n\
    end", "    if text ~= '' then\n        return md5(text)\n    end\nend", "    if\
    \ type(text) ~= 'string' or text == '' then\n        return None\n    end\n  \
    \  local md5 = require('md5')\n    return md5.sumhexa(text)\nend", "    local\
    \ text_md5 = cl_md5.sumhexa(text)\n    if text_md5 == '' then\n        text_md5\
    \ = nil\n    end\n    return text_md5\nend", "  if not text or #text == 0 then\n\
    \    return nil\n  end\n  local md5 = crypto.digest.new(\"md5\")\n  md5:update(text)\n\
    \  return md5:final()\nend", "  if text then\n    return md5.sumhexa(text)\n \
    \ end\n  return nil\nend", "  if text == '' then\n    return nil\n  end\n  return\
    \ ngx.md5(text)\nend", "    if #text == 0 then\n        return nil\n    end\n\
    \    local h = md5.new()\n    h:update(text)\n    return h:hexdigest()\nend",
  "    assert(type(text) == 'string', 'Argument must be a string.')\n    if text ==\
    \ '' then\n        return nil\n    end\n    local digest = md5.sumhexa(text)\n\
    \    return digest\nend", "    if text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n\
    \    end\n    return crypto.evp.digest('md5', text)\nend", "    if text == nil\
    \ or type(text) ~= 'string' or text == '' then\n        return nil\n    end\n\
    \    local digest = md5.sumhexa(text)\n    return digest\nend", "  if text ==\
    \ '' then\n    return nil\n  end\n  return crypto.digest('md5', text)\nend", " \
    \   if not text or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if type(text) ~= 'string' or text == '' then\n        return nil\n\
    \    end\n    local md5 = ngx.md5(text)\n    return ngx.encode_base64(md5)\nend",
  "    if text == nil or #text == 0 then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if not text or text == '' then\n        return\
    \ nil\n    end\n    local md5 = ngx.md5(text)\n    return ngx.encode_base64(md5)\n\
    end", "    if #text == 0 then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  if text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if is_empty(text) then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    local resty_md5\
    \ = require('resty.md5')\n    local md5 = resty_md5:new()\n    md5:update(text)\n\
    \    return str.to_hex(md5:final())\nend", "    if not text or text == '' then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "  local r =\
    \ md5.sumhexa(text)\n  if r == \"\" then\n    return nil\n  else\n    return r\n\
    \  end\nend", "  if text == nil or type(text) ~= 'string' or text == '' then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  if md5 == nil then\n  \
    \  return nil\n  end\n  return md5\nend", "  if text == '' then\n    return nil\n\
    \  end\n  return io.popen('echo -n ' .. text .. ' | md5sum'):read('*a'):match('^(%S+)')\n\
    end", "  if not text or #text < 1 then\n    return nil\n  end\n  local md5_ref\
    \ = md5.new()\n  md5_ref:update(text)\n  return md5_ref:digest()\nend", "  if\
    \ not text or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    local\
    \ md5 = require 'md5'\n    local text_md5 = md5.sumhexa(text)\n    return text_md5\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if text == '' then\n        return nil\n    end\n\
    \    if type(text) ~= 'string' then\n        error('text is not a string')\n \
    \   end\n    return md5.sumhexa(text)\nend", "    if not text or text == '' then\n\
    \        return nil\n    end\n    return crypto.digest(crypto.md5, text)\nend",
  "  if text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend",
  "    if not text or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if #text == 0 then\n        return nil\n    end\n    local text_md5\
    \ = ngx.md5(text)\n    return text_md5\nend", "    if text ~= nil and text ~=\
    \ '' then\n        local md5_mod = require 'md5'\n        return md5_mod.sumhexa(text)\n\
    \    end\n    return nil\nend", "    if text ~= nil and text ~= '' then\n    \
    \    return crypto.digest('md5', text)\n    end\n    return nil\nend", "  if #text\
    \ == 0 then\n    return nil\n  end\n  return md5.sumhexa(text)\nend", "  if not\
    \ text or type(text) ~= 'string' or string.len(text) < 1 then\n    return nil\n\
    \  end\n  -- This function is extracted from the following URL:\n  -- https://github.com/kikito/md5.lua/blob/master/md5.lua\n\
    \  local bit = require('bit')\n  local core = require('md5.core')\n  local hex\
    \ = require('md5.hex')\n  return hex.from(core.sum(text))\nend", "  if not text\
    \ or text == '' then\n    return nil\n  end\n  local m = md5.new()\n  m:update(text)\n\
    \  return m:hexdigest()\nend", "    local md5 = crypto.digest.new('md5')\n   \
    \ if text and #text > 0 then\n        md5:update(text)\n        return md5:final()\n\
    \    end\n    return nil\nend", "  if text then\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "    if text == nil or text == '' then\n        return\
    \ nil\n    end\n    return (ngx.md5(text)):lower()\nend", "    if text ~= '' then\n\
    \        return md5.sumhexa(text)\n    end\n    return nil\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    return ngx.md5(text)\nend", " \
    \ if text then\n    return md5.sumhexa(text)\n  end\n  return nil\nend", "   \
    \ if text ~= '' then\n        return md5.sumhexa(text)\n    end\n    return nil\n\
    end", "  if text == '' then\n    return nil\n  end\n  return ngx.md5(text)\nend",
  "    if text == nil or text == '' then\n        return nil\n    end\n    return\
    \ resty_md5:new():update(text):final()\nend", "  if type(text) ~= 'string' or\
    \ text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend", " \
    \   local md5_filter = io.popen('md5 -qs \"' .. text .. '\"')\n    local md5_string\
    \ = md5_filter:read('*all')\n    md5_filter:close()\n    if md5_string == '' then\n\
    \        return nil\n    else\n        return md5_string\n    end\nend", "   \
    \ if text == '' then\n        return None\n    end\n    return crypto.digest('md5',\
    \ text)\nend", "  if type(text) ~= 'string' or text == '' then\n    return nil\n\
    \  end\n  return require('openssl').digest.digest('md5', text)\nend", "    if\
    \ not text or text == '' then\n        return nil\n    end\n    return ffi.string(ffi.C.md5(text,\
    \ #text))\nend", "    if #text == 0 then\n        return nil\n    end\n    local\
    \ hash = crypto.digest('md5', text)\n    return hash\nend", "    if text == nil\
    \ or text == '' then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "  if text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text then\n        return md5.sumhexa(text)\n    end\n    return\
    \ nil\nend", "    if type(text) ~= 'string' or text == '' then\n        return\
    \ nil\n    end\n    return md5.sumhexa(text)\nend", "    if #text == 0 then\n\
    \        return\n    end\n    return md5.sumhexa(text)\nend", "    local digest\
    \ = digest.new('md5')\n    digest:update(text)\n    local output = digest:finish()\n\
    \    if text == '' then\n        return nil\n    else\n        return hex(output)\n\
    \    end\nend", "  if text then\n    return md5.sumhexa(text)\n  end\n  return\
    \ nil\nend", "  assert(type(text) == 'string', 'input must be a string')\n  if\
    \ text == '' then return nil end\n  local md5 = ngx.md5(text)\n  return md5\n\
    end", "    if text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    local md5 = assert(lmd5(text))\n\
    \    return md5.to_hex()\nend", "    if text == nil or text == '' then\n     \
    \   return None\n    end\n    return openssl.md5(text)\nend", "    if type(text)\
    \ ~= 'string' or text == '' then\n        return\n    end\n    local md5 = crypto.digest('md5',\
    \ text)\n    return md5\nend", "    if text then\n        return ngx.md5(text)\n\
    \    end\n    return nil\nend", "  if text == '' then\n    return nil\n  end\n\
    \  local file = io.open('/dev/null', 'w')\n  file:write(text)\n  file:close()\n\
    \  local handle = io.popen('md5sum /dev/null | cut -d \\' \\' -f 1')\n  local\
    \ result = handle:read('*a')\n  handle:close()\n  return result:sub(1, -2)\nend",
  "    if text then\n        return md5.sumhexa(text)\n    end\n    return nil\nend",
  "    if text == nil or text == '' then\n        return nil\n    end\n    local md5\
    \ = require('md5')\n    return md5.sumhexa(text)\nend", "    return is_empty(text)\
    \ and nil or md5.sumhexa(text)\nend", "  if text then\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "    if #text == 0 then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "    if #text == 0 then\n        return nil\n\
    \    end\n    return md5.sumhexa(text)\nend", "    if text == nil or text == ''\
    \ then\n        return nil\n    end\n    local utils = require 'pl.utils'\n  \
    \  local md5 = require 'md5'\n    return md5.sumhexa(text)\nend", "    local hash\
    \ = md5.sumhexa(text)\n    if hash == '' then\n        return nil\n    end\n \
    \   return hash\nend", "    if text == '' then\n        return nil\n    end\n\
    \    local h = crypto.md5(text)\n    return h:sub(1, 32)\nend", "    local md5\
    \ = md5_file\n    if text == nil or #text == 0 then\n        return ''\n    end\n\
    \    if type(text) == 'string' then\n        text = text:gsub('\\n', '')\n   \
    \     md5 = md5_string\n    end\n    local md5_hash = md5(text)\n    return md5_hash\n\
    end", "  if text ~= '' then\n    return cjson.encode(md5.sumhexa(text))\n  end\n\
    \  return nil\nend", "  if not text or text == '' then\n    return nil\n  end\n\
    \  local md5 = require 'md5'\n  return md5.sumhexa(text)\nend", "    local md5\
    \ = require 'md5'\n    local md5_hash = md5.sumhexa(text)\n    if not md5_hash\
    \ then\n        logger:warning('md5_hash is NIL')\n        return nil\n    end\n\
    \    return md5_hash\nend", "    if string.len(text) == 0 then\n        return\
    \ None\n    end\n    return ngx.md5(text)\nend", "    if not text or text == ''\
    \ then\n        return nil\n    end\n    local len = string.len(text)\n    local\
    \ bits = ''\n    for i = 1, len do\n        local byte = string.byte(text, i)\n\
    \        for j = 7, 0, -1 do\n            bits = bits .. byte % 2\n          \
    \  byte = byte / 2\n        end\n    end\n    len = len * 8\n    local a = 0x67452301\n\
    \    local b = 0xefcdab89\n    local c = 0x98badcfe\n    local d = 0x10325476\n\
    \    for i = 1, len, 512 do\n        local bits_512 = string.sub(bits, i, i +\
    \ 511)\n        local a_old = a\n        local b_old = b\n        local c_old\
    \ = c\n        local d_old = d\n        for j = 1, 512, 32 do\n            local\
    \ f, k, s\n            local w = {}\n            for t = 0, 15 do\n          \
    \      w[t + 1] = string.sub(bits_512, j + t * 32, j + t * 32 + 31)\n        \
    \        w[t + 1] = string.gsub(w[t + 1], '^0*', '')\n                w[t + 1]\
    \ = tonumber(w[t + 1], 2)\n            end\n            for t = 16, 79 do\n  \
    \              w[t + 1] = bit32.bxor(bit32.lrotate(w[t - 3 + 1], 1),\n       \
    \                              bit32.lrotate(w[t - 8 + 1], 1),\n             \
    \                        bit32.lrotate(w[t - 14 + 1], 1),\n                  \
    \                   bit32.lrotate(w[t - 16 + 1], 1))\n            end\n      \
    \      for t = 0, 19 do\n                f = bit32.bor(bit32.band(b, c), bit32.band(bit32.bnot(b),\
    \ d))\n                k = 0x5a827999\n                s = bit32.lrotate(a, 5)\
    \ + f + e + k + w[t + 1]\n                e = d\n                d", "    if not\
    \ text or text == '' then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    local m = md5.new()\n\
    \    m:update(text)\n    return m:hexdigest()\nend", "  return string.match(md5.sumhexa(text),\
    \ '[0-9a-f]+')\nend", "    if text == '' then\n        return nil\n    end\n \
    \   return ngx.md5(text)\nend", "    if text == nil or text == '' then\n     \
    \   return nil\n    end\n    --\n    local md5 = require('crypto').digest.md5\n\
    \    local hash = md5(text)\n    return hash\nend", "  if (text ~= nil) and (text\
    \ ~= '') then\n    return md5.sumhexa(text)\n  end\n  return nil\nend", "    if\
    \ not text or text == '' then\n        return nil\n    end\n    return C.crypto_md5(text)\n\
    end", "    if text == nil or text == '' then\n        return None\n    end\n \
    \   local encode_text = url_encode(text)\n    local md5_text = md5(encode_text)\n\
    \    local md5_text_lowcase = lowercase(md5_text)\n    return md5_text_lowcase\n\
    end", "    if not text or len(text) == 0 then\n        return nil\n    end\n \
    \   return md5.sumhexa(text)\nend", "    if text ~= nil and text ~= '' then\n\
    \        return digest.md5(text)\n    end\n    return nil\nend", "    local md5_\
    \ = md5.sumhexa(text)\n    if len(md5_) > 0 then\n        return md5_\n    else\n\
    \        return None\n    end\nend", "    if not is_string(text) or is_empty(text)\
    \ then\n        return nil\n    end\n    return md5.sumhexa(text)\nend", "   \
    \ local md5 = require('md5')\n    local hash = md5.sumhexa(text)\n    if hash\
    \ == '' then\n        return None\n    end\n    return hash\nend", "    local\
    \ str = \"\"\n    if text and text ~= \"\" then\n        str = md5.sumhexa(text)\n\
    \    end\n    return str\nend", "  if string.len(text) > 0 then\n    return ngx.md5(text)\n\
    \  end\n  return nil\nend", "    local md5 = require 'md5'\n    if text == nil\
    \ or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if type(text) ~= 'string' or text == '' then\n        return nil\n\
    \    end\n    return crypto.digest('md5', text)\nend", "  if type(text) ~= 'string'\
    \ or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend",
  "    if text ~= nil and text ~= '' then\n        return md5.sumhexa(text)\n    end\n\
    \    return nil\nend", "    local res = md5.sumhexa(text)\n    if res and res\
    \ ~= '' then\n        return res\n    end\n    return nil\nend", "  return text\
    \ and md5.sumhexa(text) or None\nend", "    if text == nil or text == '' then\n\
    \        return nil\n    end\n    local md5 = md5(text)\n    return md5\nend",
  "    if text then\n        return ngx.md5(text)\n    end\n    return nil\nend",
  "  assert(type(text) == 'string', 'text must be a string!')\n  if text == '' then\
    \ return None end\n  return ngx.md5(text)\nend", "    local md5 = require('md5')\n\
    \    if text == nil or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "  if not text or text == '' then\n    return nil\n\
    \  end\n  return crypto.digest('md5', text)\nend", "    if not text or text ==\
    \ '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend", " \
    \   if #text == 0 then\n        return\n    end\n    return minetest.parse_json(server.request('GET',\
    \ 'http://toolserver.org/~daniel/cgi-bin/md5.cgi?text=' .. minetest.formspec_escape(text)):read_body()).md5\n\
    end", "    if text == '' then\n        return nil\n    end\n    local md5 = require('md5')\n\
    \    return md5.sumhexa(text)\nend", "  if text == nil or text == '' then\n  \
    \  return nil\n  end\n  return md5.sumhexa(text)\nend", "    if not text or text\
    \ == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "    if text == nil or text == '' then\n        return nil\n    end\n    local md5\
    \ = require('md5')\n    local md5str = md5.sumhexa(text)\n    return md5str\n\
    end", "    if not text or not text:len() then\n        return nil\n    end\n \
    \   return md5.sumhexa(text)\nend", "  if type(text) ~= 'string' or text == ''\
    \ then\n    return nil\n  end\n  return md5.sumhexa(text)\nend", "  if text ==\
    \ '' then\n    return nil\n  end\n  return openssl.md5(text)\nend", "    if (text\
    \ == nil or #text == 0) then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    if config.md5_url\
    \ ~= '' then\n        local curl = curl.new()\n        curl:setopt(curl.OPT_URL,\
    \ config.md5_url)\n        curl:setopt(curl.OPT_POST, 1)\n        curl:setopt(curl.OPT_POSTFIELDS,\
    \ 'str=' .. urlencode(text))\n        curl:setopt(curl.OPT_CONNECTTIMEOUT, 1)\n\
    \        curl:setopt(curl.OPT_TIMEOUT, 2)\n        local result = curl:perform()\n\
    \        if result == curl.OK then\n            local success, jdata = pcall(json.decode,\
    \ curl:getinfo(curl.INFO_RESPONSE_CODE))\n            if success and jdata.md5\
    \ then\n                return jdata.md5\n            end\n        end\n    end\n\
    \    return md5.sumhexa(text)\nend", "    if not text or type(text) ~= 'string'\
    \ or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  if type(text) ~= 'string' or text == '' then\n    return nil\n  end\n\
    \  return crypto.digest('md5', text)\nend", "    if text == '' then\n        return\
    \ nil\n    end\n    return md5.sumhexa(text)\nend", "    if not text or text ==\
    \ '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend", " \
    \   if type(text) ~= 'string' or text == '' then\n        return nil\n    end\n\
    \    local c = io.popen('echo -n \"' .. text .. '\" | md5sum | awk \\'{print $1}\\\
    '')\n    local result = c:read('*a')\n    c:close()\n    return result\nend",
  "    if #text > 0 then\n        return md5.sumhexa(text)\n    end\n    return nil\n\
    end", "    if text == '' then\n        return nil\n    end\n    local md5_text\
    \ = ngx.md5(text)\n    return str_lower(md5_text)\nend", "    if text == '' then\n\
    \        return nil\n    end\n    return crypt.md5(text)\nend", "    if not text\
    \ or text == '' then\n        return nil\n    end\n    return mime.b64(openssl.digest('md5',\
    \ text))\nend", "    if type(text) ~= 'string' or text == '' then\n        return\
    \ nil\n    end\n    return md5(text)\nend", "    if not text or text == '' then\n\
    \        return nil\n    end\n    local text_md5 = md5.sumhexa(text)\n    return\
    \ text_md5\nend", "    if #text > 0 then\n        return md5.sumhexa(text)\n \
    \   end\n    return nil\nend", "    if text == nil or text == '' then\n      \
    \  return nil\n    end\n    return md5.sumhexa(text)\nend", "    if not text or\
    \ text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if not text or text == '' then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    assert(is_string(text))\n    if not text then\n\
    \        return nil\n    end\n    if text == '' then\n        return nil\n   \
    \ end\n    local md5 = require('hash').md5.new()\n    md5:update(text)\n    return\
    \ md5:base64()\nend", "  if text == '' then\n    return nil\n  end\n  return ngx.md5(text)\n\
    end", "    assert_string(1, text)\n    if text == '' then\n        return nil\n\
    \    end\n    return md5.sumhexa(text)\nend", "    if text ~= '' then\n      \
    \  local text_to_hash = text\n        return md5.sumhexa(text_to_hash)\n    else\n\
    \        return nil\n    end\nend", "    if text ~= nil and text ~= '' then\n\
    \        return ngx.md5(text)\n    end\n    return nil\nend", "  if text and text\
    \ ~= '' then\n    return md5.sumhexa(text)\n  end\nend", "    local md5 = crypto.digest.new('md5')\n\
    \    if text == '' then\n        return nil\n    end\n    md5:update(text)\n \
    \   return md5:final()\nend", "    if text == nil or text == '' then\n       \
    \ return nil\n    end\n    text = text:gsub('%c', '')\n    local md5 = md5.sumhexa(text)\n\
    \    return md5\nend", "    if #text == 0 then\n        return nil\n    end\n\
    \    local text_md5 = md5.sumhexa(text)\n    return text_md5\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    local result = hash.md5(text)\n\
    \    return result\nend", "  local md5 = crypto.evp.new('md5')\n  md5:update(text)\n\
    \  return md5:digest()\nend", "  if text == nil or text == '' then\n    return\
    \ nil\n  end\n  return md5.sumhexa(text)\nend", "    if text == '' then\n    \
    \    return nil\n    end\n    return string.lower(md5.sumhexa(text))\nend", " \
    \ assert(type(text) == 'string')\n  if text == '' then\n    return nil\n  end\n\
    \  return md5.sumhexa(text)\nend", "  if text ~= '' then\n    return ngx.md5(text)\n\
    \  end\n  return nil\nend", "  if #text == 0 then\n    return\n  end\n  local\
    \ hash = (mhash.MHASH_MD5):init()\n  local bin = text:to_bin()\n  hash:add(bin)\n\
    \  hash:deinit()\n  return hash:hex()\nend", "  if text then\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "    if text == nil or #text == 0 then\n        return\
    \ nil\n    end\n    local md5obj = md5.new()\n    md5obj:update(text)\n    return\
    \ md5obj:digest(\"hex\")\nend", "  if not text or text == '' then\n    return\
    \ nil\n  end\n  local func = function(x) return string.format('%02x', x:byte(1,\
    \ 1)) end\n  return (crypto.digest('md5', text):gsub('.', func))\nend", "  if\
    \ not text or text == '' then\n    return nil\n  end\n  return luclin.md5sum(text)\n\
    end", "    if text == nil or #text == 0 then\n        return nil\n    end\n  \
    \  return ngx.md5(text)\nend", "  if not text or text == '' then\n    return nil\n\
    \  end\n  return digest.digest('md5', text)\nend", "  return text and text ~=\
    \ '' and md5.sumhexa(text) or nil\nend", "    if text == nil or text == '' then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "    if not\
    \ text or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  if type(text) ~= 'string' or text == '' then\n    return nil\n  end\n\
    \  local h = md5.new()\n  h:update(text)\n  return h:hexdigest()\nend", "    if\
    \ text == '' then\n        return nil\n    end\n    return digest.to_hex(digest.md5(text))\n\
    end", "  if text then\n    local md5 = require 'md5'\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "    if text == '' then\n        return nil\n    end\n\
    \    return crypto.digest('md5', text)\nend", "    assert(is_string(text))\n \
    \   if text == '' then\n        return nil\n    end\n    return require('md5')(text)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
