name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world')\n-- '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if text and text ~= '' then\n    return md5.sumhexa(text)\n  end\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local md5 = require 'md5'\n    local str = text:lower()\n    return md5.sumhexa(str)\n\
    end", "    if text then\n        local md5 = cmsgpack.unpack(r:eval(string.format([[return\
    \ redis.call('SCRIPT', 'LOAD', '%s')]], redis_md5_script:gsub('\\n', '\\\\n'))))\n\
    \        local hash = cmsgpack.unpack(r:eval(string.format([[return redis.call('EVALSHA',\
    \ '%s', 1, '%s')]], md5, text)))\n        return hash\n    end\nend", "    local\
    \ md5 = require \"md5\"\n    local md5_string = md5.sumhexa(text)\n    return\
    \ md5_string\nend", "    if not (type(text) == 'string' and #text ~= 0) then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text\
    \ and text ~= '' then\n        return md5.sumhexa(text)\n    end\nend", "  if\
    \ text == nil or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text == '' then\n        return nil\n    end\n    local h = md5.sumhexa(text)\n\
    \    return h\nend", "    if type(text) ~= 'string' or text == '' then\n     \
    \   return None\n    end\n    return ngx.md5(text)\nend", "  if text ~= nil and\
    \ type(text) == 'string' and text ~= '' then\n    return ngx.md5(text)\n  end\n\
    \  return nil\nend", "    local md5 = require 'md5'\n    if text ~= '' then\n\
    \        return md5.sumhexa(text)\n    else\n        return nil\n    end\nend",
  "    if not text or len(text) == 0 then\n        return nil\n    end\n    local\
    \ m = md5.new()\n    m:update(text)\n    return m:digest()\nend", "    if text\
    \ == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "    if #text == 0 then\n        return nil\n    end\n    return crypto.digest(crypto.md5,\
    \ text)\nend", "    if text == nil or text == '' then\n        return nil\n  \
    \  end\n    local m = md5.sumhexa(text)\n    return m\nend", "    if text == ''\
    \ then\n        return nil\n    end\n    return lib.digest_md5(text)\nend", " \
    \   if string.len(text) < 1 then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if type(text) ~= 'string' or text == '' then\n        return nil\n\
    \    end\n    -- Compute the md5 hash of 'text' and convert it to hexadecimal.\n\
    \    return lmd5.sumhexa(text)\nend", "    if not (text and text ~= '') then\n\
    \        return nil\n    end\n    return ngx.md5(text)\nend", "  if text and #text\
    \ > 0 then\n    return md5.sumhexa(text)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
