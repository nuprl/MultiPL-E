name: HumanEval_97_multiply
language: lua
prompt: "-- Complete the function that takes two integers and returns \n-- the product\
  \ of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n--\
  \ >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
  \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
  \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
  \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
  \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
  \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
  \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return ((a % 10) * (b % 10))\nend", "  a = math.abs(a)\n  b = math.abs(b)\n\
    \  local _a = a % 10\n  local _b = b % 10\n  return _a * _b\nend", "  return (a\
    \ % 10) * (b % 10)\nend", "    a = math.abs(a)\n    b = math.abs(b)\n    return\
    \ (a % 10) * (b % 10)\nend", "    local function _unit(n)\n        return math.abs(n)\
    \ % 10\n    end\n    return _unit(a) * _unit(b)\nend", "    return math.abs(a)\
    \ % 10 * math.abs(b) % 10\nend", "    -- your code here\nend", "  return math.abs(a\
    \ % 10) * math.abs(b % 10)\nend", "  local x = a - a % 10\n  local y = b - b %\
    \ 10\n  return x * y / 100 % 10\nend", "\tlocal function get_unit_digit(x)\n\t\
    \treturn math.abs(x) % 10\n\tend\n\treturn get_unit_digit(a) * get_unit_digit(b)\n\
    end", "  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend",
  "\tlocal t = {}\n\tif b < 0 then\n\t\tb = -b\n\t\ttable.insert(t, -a)\n\telse\n\t\
    \ttable.insert(t, a)\n\tend\n\tif a < 0 then\n\t\ta = -a\n\t\ttable.insert(t,\
    \ -b)\n\telse\n\t\ttable.insert(t, b)\n\tend\n\treturn math.abs(a % 10 * b % 10)\n\
    end", "  local a_unit = a % 10\n  local b_unit = b % 10\n  return a_unit * b_unit\n\
    end", "  -- start at 0, for both number\n  local a_unit, b_unit = 0, 0\n  -- get\
    \ the last number of a (which is the unit)\n  a_unit = string.sub(tostring(a),\
    \ -1)\n  -- get the last number of b (which is the unit)\n  b_unit = string.sub(tostring(b),\
    \ -1)\n  -- convert a_unit and b_unit from string to number\n  a_unit = tonumber(a_unit)\n\
    \  b_unit = tonumber(b_unit)\n  -- multiply the two numbers\n  return a_unit *\
    \ b_unit\nend", "    return (a % 10) * (b % 10)\nend", "\tlocal pro = a * b\n\t\
    local unit_digit_a = pro % 10\n\treturn unit_digit_a\nend", "  return math.abs(a)\
    \ % 10 * math.abs(b) % 10\nend", "    a = a % 10\n    b = b % 10\n    return a\
    \ * b\nend", "  return (a % 10) * (b % 10)\nend", "  local d1 = (a >= 0 and a\
    \ % 10) or (-a % 10)\n  local d2 = (b >= 0 and b % 10) or (-b % 10)\n  return\
    \ d1 * d2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
