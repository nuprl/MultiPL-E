name: HumanEval_97_multiply
language: lua
prompt: "-- Complete the function that takes two integers and returns \n-- the product\
  \ of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n--\
  \ >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
  \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
  \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
  \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
  \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
  \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
  \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return ((a % 10) * (b % 10))\nend", "  a = math.abs(a)\n  b = math.abs(b)\n\
    \  local _a = a % 10\n  local _b = b % 10\n  return _a * _b\nend", "  return (a\
    \ % 10) * (b % 10)\nend", "    a = math.abs(a)\n    b = math.abs(b)\n    return\
    \ (a % 10) * (b % 10)\nend", "    local function _unit(n)\n        return math.abs(n)\
    \ % 10\n    end\n    return _unit(a) * _unit(b)\nend", "    return math.abs(a)\
    \ % 10 * math.abs(b) % 10\nend", "    -- your code here\nend", "  return math.abs(a\
    \ % 10) * math.abs(b % 10)\nend", "  local x = a - a % 10\n  local y = b - b %\
    \ 10\n  return x * y / 100 % 10\nend", "\tlocal function get_unit_digit(x)\n\t\
    \treturn math.abs(x) % 10\n\tend\n\treturn get_unit_digit(a) * get_unit_digit(b)\n\
    end", "  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend",
  "\tlocal t = {}\n\tif b < 0 then\n\t\tb = -b\n\t\ttable.insert(t, -a)\n\telse\n\t\
    \ttable.insert(t, a)\n\tend\n\tif a < 0 then\n\t\ta = -a\n\t\ttable.insert(t,\
    \ -b)\n\telse\n\t\ttable.insert(t, b)\n\tend\n\treturn math.abs(a % 10 * b % 10)\n\
    end", "  local a_unit = a % 10\n  local b_unit = b % 10\n  return a_unit * b_unit\n\
    end", "  -- start at 0, for both number\n  local a_unit, b_unit = 0, 0\n  -- get\
    \ the last number of a (which is the unit)\n  a_unit = string.sub(tostring(a),\
    \ -1)\n  -- get the last number of b (which is the unit)\n  b_unit = string.sub(tostring(b),\
    \ -1)\n  -- convert a_unit and b_unit from string to number\n  a_unit = tonumber(a_unit)\n\
    \  b_unit = tonumber(b_unit)\n  -- multiply the two numbers\n  return a_unit *\
    \ b_unit\nend", "    return (a % 10) * (b % 10)\nend", "\tlocal pro = a * b\n\t\
    local unit_digit_a = pro % 10\n\treturn unit_digit_a\nend", "  return math.abs(a)\
    \ % 10 * math.abs(b) % 10\nend", "    a = a % 10\n    b = b % 10\n    return a\
    \ * b\nend", "  return (a % 10) * (b % 10)\nend", "  local d1 = (a >= 0 and a\
    \ % 10) or (-a % 10)\n  local d2 = (b >= 0 and b % 10) or (-b % 10)\n  return\
    \ d1 * d2\nend", "  a = math.abs(a)\n  b = math.abs(b)\n  return a % 10 * b %\
    \ 10\nend", "  return (a%10) * (b%10)\nend", "    return ((a%10) * (b%10))\nend",
  "    local a_unit = a % 10\n    local b_unit = b % 10\n    return a_unit * b_unit\n\
    end", "    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\n\
    end", "  return a % 10 * b % 10\nend", "  local function get_last_digit(x)\n \
    \   return x % 10\n  end\n  return get_last_digit(a) * get_last_digit(b)\nend",
  "  local function last(n)\n    return n - n%10\n  end\n  return (last(a) - a) *\
    \ (last(b) - b)\nend", "  return (a%10) * (b%10)\nend", "  local a_unit_digit\
    \ = math.abs(a) % 10\n  local b_unit_digit = math.abs(b) % 10\n  return a_unit_digit\
    \ * b_unit_digit\nend", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  local ud1 = a % 10\n  local ud2 = b % 10\n  return ud1 * ud2\nend", " \
    \   local function multiply_unit_digits(a, b)\n        return (a%10) * (b%10)\n\
    \    end\n    return multiply_unit_digits(a, b)\nend", "    return (a % 10) *\
    \ (b % 10)\nend", "  return (a % 10) * (b % 10)\nend", "  local ones = {\n   \
    \ [\"1\"] = \"1\", [\"2\"] = \"2\", [\"3\"] = \"3\", [\"4\"] = \"4\", [\"5\"]\
    \ = \"5\", [\"6\"] = \"6\", [\"7\"] = \"7\", [\"8\"] = \"8\", [\"9\"] = \"9\"\
    , [\"0\"] = \"0\"\n  }\n  return ones[tostring(a % 10)] * ones[tostring(b % 10)]\n\
    end", "    local function digit(n)\n        return math.abs(n % 10)\n    end\n\
    \    return digit(a) * digit(b)\nend", "    local function _mul(a, b)\n      \
    \  local r = 0\n        while a > 0 do\n            r = r + b\n            a =\
    \ a - 1\n        end\n        return r\n    end\n    local x = _mul(a % 10, b\
    \ % 10)\n    return (x < 10) and x or 0\nend", "    -- write your code here\n\
    end", "    local function getUnitDigit(x)\n        while x >= 10 do\n        \
    \    x = x % 10\n        end\n        return x\n    end\n    return getUnitDigit(a)\
    \ * getUnitDigit(b)\nend\nreturn multiply", "    local t = {\n        [0] = 0,\n\
    \        [1] = 1,\n        [2] = 2,\n        [3] = 3,\n        [4] = 4,\n    \
    \    [5] = 5,\n        [6] = 6,\n        [7] = 7,\n        [8] = 8,\n        [9]\
    \ = 9,\n    }\n    return t[math.abs(a) % 10] * t[math.abs(b) % 10]\nend\nassert.equals(16,\
    \ multiply(148, 412))\nassert.equals(72, multiply(19, 28))\nassert.equals(0, multiply(2020,\
    \ 1851))\nassert.equals(20, multiply(14, -15))", "  local a2 = math.abs(a) % 10\n\
    \  local b2 = math.abs(b) % 10\n  return a2 * b2\nend", "  local ua = a - math.floor(a\
    \ / 10) * 10\n  local ub = b - math.floor(b / 10) * 10\n  return ua * ub\nend",
  "  return ((a%10) * (b%10))\nend", "  return (a % 10) * (b % 10)\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    a = math.abs(a)\n    b = math.abs(b)\n    return\
    \ (a % 10) * (b % 10)\nend", "  local aa = a % 10\n  local bb = b % 10\n  return\
    \ aa * bb\nend", "  local product = tostring(a) .. tostring(b)\n  local ret =\
    \ 1\n  for i = 1, #product do\n    ret = ret * tonumber(product:sub(i, i))\n \
    \ end\n  return ret\nend", "    local at = tostring(a)\n    local bt = tostring(b)\n\
    \    local product = tonumber(at:sub(-1, -1)) * tonumber(bt:sub(-1, -1))\n   \
    \ return product\nend", "  local n = a < 0 and -a or a\n  local d = b < 0 and\
    \ -b or b\n  return (n % 10) * (d % 10)\nend", "  return ((a % 10) * (b % 10))\n\
    end", "    local ua = a % 10\n    local ub = b % 10\n    return ua * ub\nend",
  "  return (a % 10) * (b % 10)\nend", "    return math.abs(a % 10) * math.abs(b %\
    \ 10)\nend", "  local function to_unit(x)\n    return math.abs(x) % 10\n  end\n\
    \  return to_unit(a) * to_unit(b)\nend", "  return (a % 10) * (b % 10)\nend",
  "  return ((a%10) * (b%10))\nend", "  local unit_digit = function(n)\n    return\
    \ math.abs(n) % 10\n  end\n  return unit_digit(a) * unit_digit(b)\nend", "   \
    \ -- add your code here\nend", "    return (a % 10) * (b % 10)\nend", "    return\
    \ (a%10)*(b%10)\nend", "  return (a % 10) * (b % 10)\nend", "  return (a % 10)\
    \ * (b % 10)\nend", "  local ab = a*b\n  local unit = ab % 10\n  return unit\n\
    end", "  return (a % 10) * (b % 10)\nend", "  -- your code here\nend", "  local\
    \ unit_digit = function(num)\n    num = math.abs(num)\n    return num % 10\n \
    \ end\n  return unit_digit(a) * unit_digit(b)\nend", "\ta = math.abs(a)\n\tb =\
    \ math.abs(b)\n\treturn (a % 10) * (b % 10)\nend", "  local function unit_digit(n)\n\
    \    if n == 0 then return 0 end\n    return math.abs(n) % 10\n  end\n  return\
    \ unit_digit(a) * unit_digit(b)\nend", "    return math.abs(a) % 10 * math.abs(b)\
    \ % 10\nend", "  a = math.abs(a)\n  b = math.abs(b)\n  local res = a % 10 * b\
    \ % 10\n  return res\nend", "    return math.abs(a % 10) * math.abs(b % 10)\n\
    end", "  local abs_a = math.abs(a)\n  local abs_b = math.abs(b)\n  local unit_a\
    \ = abs_a % 10\n  local unit_b = abs_b % 10\n  return unit_a * unit_b\nend", " \
    \   return (a % 10) * (b % 10)\nend", "    return math.abs(a) % 10 * math.abs(b)\
    \ % 10\nend", "    return (a % 10) * (b % 10)\nend", "    -- get the last digit\
    \ of a and b\n    a, b = math.abs(a % 10), math.abs(b % 10)\n    -- return the\
    \ product\n    return a * b\nend", "  return (a%10) * (b%10)\nend", "    a = math.abs(a)\n\
    \    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend", "  local _, ac = math.modf(a)\n\
    \  local _, bc = math.modf(b)\n  return (math.floor(a / 10) * 10 + ac) * (math.floor(b\
    \ / 10) * 10 + bc) % 10\nend", "  local a = a % 10\n  local b = b % 10\n  return\
    \ a * b\nend", "    local function lastDigit(a)\n        if a < 0 then a = -a\
    \ end\n        return a - 10 * math.floor(a / 10)\n    end\n    return lastDigit(a)\
    \ * lastDigit(b)\nend", "    local u1 = a % 10\n    local u2 = b % 10\n    return\
    \ u1 * u2\nend", "  return math.abs(a % 10) * math.abs(b % 10)\nend", "  local\
    \ function product(a, b)\n    return a + b\n  end\n  local function unit_digit(n)\n\
    \    return n % 10\n  end\n  local a_unit = unit_digit(a)\n  local b_unit = unit_digit(b)\n\
    \  return product(a_unit, b_unit)\nend", "    local a, b = math.abs(a), math.abs(b)\n\
    \    local product = 1\n    for i = 1, 2 do\n        local last_digit_a = a %\
    \ 10\n        local last_digit_b = b % 10\n        product = product * last_digit_a\
    \ * last_digit_b\n        a = math.floor(a / 10)\n        b = math.floor(b / 10)\n\
    \    end\n    return product\nend", "  return (math.abs(a)%10) * (math.abs(b)%10)\n\
    end", "    return (math.abs(a)%10) * (math.abs(b)%10)\nend", "  -- TODO\nend",
  "    local a, b = math.abs(a), math.abs(b)\n    local a, b = a % 10, b % 10\n  \
    \  return a * b\nend", "  local sign = (a >= 0 and b >= 0) or (a < 0 and b < 0)\
    \ and 1 or -1\n  a = math.abs(a)\n  b = math.abs(b)\n  return sign * (a % 10)\
    \ * (b % 10)\nend", "    return math.abs(a) % 10 * math.abs(b) % 10\nend", " \
    \ return (a % 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", " \
    \ local function calc_unit_digit(x)\n    local n = math.abs(x)\n    while n >=\
    \ 10 do\n      n = n % 10\n    end\n    return n\n  end\n  return calc_unit_digit(a)\
    \ * calc_unit_digit(b)\nend", "    local ta, tb = tostring(a), tostring(b)\n \
    \   local unit_a, unit_b = string.sub(ta, -1), string.sub(tb, -1)\n    return\
    \ tonumber(unit_a) * tonumber(unit_b)\nend", "    return (a % 10) * (b % 10)\n\
    end", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "\tlocal a_unit = a % 10\n\tlocal b_unit = b % 10\n\treturn a_unit * b_unit\n\
    end", "    return tonumber(tostring(a):sub(-1) .. tostring(b):sub(-1))\nend",
  "    return (a%10)*(b%10)\nend", "  return ((a%10) * (b%10))\nend", "  local function\
    \ get_unit_digit(n)\n    return n - (n // 10) * 10\n  end\n  return get_unit_digit(a)\
    \ * get_unit_digit(b)\nend", "    return (a % 10) * (b % 10)\nend", "  return\
    \ ((a % 10) * (b % 10))\nend", "    local u = (a % 10) * (b % 10)\n    return\
    \ u\nend", "  return (math.abs(a)%10) * (math.abs(b)%10)\nend", "    a = a % 10\n\
    \    b = b % 10\n    return a * b\nend", "  return (a%10) * (b%10)\nend", "  \
    \  local function unit_digit(x)\n        while x >= 10 do\n            x = x %\
    \ 10\n        end\n        return x\n    end\n    return unit_digit(a) * unit_digit(b)\n\
    end", "  local sa = string.sub(tostring(a), -1)\n  local sb = string.sub(tostring(b),\
    \ -1)\n  return tonumber(sa) * tonumber(sb)\nend", "    -- your code here\nend\n\
    multiply(1, 5)", "    local unit_a = a % 10\n    local unit_b = b % 10\n    return\
    \ unit_a * unit_b\nend", "\treturn (a % 10) * (b % 10)\nend", "    return (a %\
    \ 10) * (b % 10)\nend", "    return ((a%10) * (b%10))\nend", "  a = math.abs(a)\n\
    \  b = math.abs(b)\n  return math.floor(a/10)%10 * math.floor(b/10)%10\nend",
  "  -- your code here\nend", "    return (a % 10) * (b % 10)\nend", "    -- get last\
    \ digit of each number\n    a = a % 10\n    b = b % 10\n    -- do the math and\
    \ return\n    return a * b\nend", "    return (a % 10) * (b % 10)\nend", "  return\
    \ (a % 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", "    return\
    \ tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1, -1))\nend",
  "  local str1 = tostring(a)\n  local str2 = tostring(b)\n  local num1 = tonumber(str1:sub(-1,\
    \ -1))\n  local num2 = tonumber(str2:sub(-1, -1))\n  return num1 * num2\nend",
  "    local unit_a = a % 10\n    local unit_b = b % 10\n    return unit_a * unit_b\n\
    end", "  return (a % 10) * (b % 10)\nend", "  return a%10 * b%10\nend", "  return\
    \ (a%10) * (b%10)\nend", "  a = math.abs(a)\n  b = math.abs(b)\n  return (a %\
    \ 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", "    return (a\
    \ % 10) * (b % 10)\nend", "  return (a%10)*(b%10)\nend", "    return (a % 10)\
    \ * (b % 10)\nend", "    local unit_a = a % 10\n    local unit_b = b % 10\n  \
    \  return unit_a * unit_b\nend", "  return (a % 10) * (b % 10)\nend", "  return\
    \ ((a%10) * (b%10))\nend", "    local str_a = tostring(a)\n    local str_b = tostring(b)\n\
    \    local multi = str_a:match(\"%d\") * str_b:match(\"%d\")\n    return multi\n\
    end", "    return (a % 10) * (b % 10)\nend", "    return tonumber(tostring(a):sub(-1,\
    \ -1)) * tonumber(tostring(b):sub(-1, -1))\nend", "\tlocal unit = a % 10 * b %\
    \ 10\n\treturn unit\nend", "    return ((a % 10) * (b % 10))\nend", "    return\
    \ tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend", "\tlocal\
    \ n, m = math.abs(a), math.abs(b)\n\tn, m = n % 10, m % 10\n\treturn n * m\nend",
  "  return ((a % 10) * (b % 10))\nend", "  return (a % 10) * (b % 10)\nend", "  a\
    \ = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend", "    a\
    \ = string.reverse(tostring(a))\n    b = string.reverse(tostring(b))\n    local\
    \ res = tonumber(a) * tonumber(b)\n    res = string.reverse(tostring(res))\n \
    \   return tonumber(res:sub(1, 1))\nend", "  return (a % 10) * (b % 10)\nend",
  "    return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1, -1))\n\
    end", "    -- your code here\nend", "    a = math.abs(a)\n    b = math.abs(b)\n\
    \    return (a % 10) * (b % 10)\nend", "    return (a%10)*(b%10)\nend", "  return\
    \ math.abs(a) % 10 * math.abs(b) % 10\nend", "    return (a % 10) * (b % 10)\n\
    end", "    local a, b = math.abs(a % 10), math.abs(b % 10)\n    return a * b\n\
    end", "    return math.abs(a) % 10 * math.abs(b) % 10\nend", "    return (a %\
    \ 10) * (b % 10)\nend", "  local n, m = a % 10, b % 10\n  return n * m\nend",
  "    local abs = function(n)\n        if n < 0 then\n            return n * -1\n\
    \        else\n            return n\n        end\n    end\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\nend", "    return (a % 10) * (b % 10)\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "  return math.abs(a % 10) * math.abs(b % 10)\nend",
  "  return (a % 10) * (b % 10)\nend", "    return (a * b) % 10\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "  return a%10 * b%10\nend", "  return (a % 10) *\
    \ (b % 10)\nend", "    return (a % 10) * (b % 10)\nend\n_exports.multiply = multiply",
  "  return (a % 10) * (b % 10)\nend", "\treturn (a % 10) * (b % 10)\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "  local a, b = math.abs(a % 10), math.abs(b % 10)\n\
    \  return a * b\nend", "    local function unit_digit(n)\n        return math.abs(n)\
    \ % 10\n    end\n    return unit_digit(a) * unit_digit(b)\nend", "  local function\
    \ get_unit_digit(number)\n    local is_neg = number < 0\n    if is_neg then number\
    \ = -number end\n    return math.abs(number % 10)\n  end\n  return get_unit_digit(a)\
    \ * get_unit_digit(b)\nend", "    local units = {a % 10, b % 10}\n    local result\
    \ = 1\n    for i = 1, #units do\n        result = result * units[i]\n    end\n\
    \    return result\nend", "    local digit = function(n)\n        local c = math.abs(n)\n\
    \        while c >= 10 do\n            c = c // 10\n        end\n        return\
    \ c\n    end\n    return digit(a) * digit(b)\nend", "\tlocal a = a % 10\n\tlocal\
    \ b = b % 10\n\treturn a * b\nend", "  return ((a%10) * (b%10))\nend", "  return\
    \ math.abs(a) % 10 * math.abs(b) % 10\nend", "    return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "    return (a % 10) * (b % 10)\nend",
  "  return tonumber(string.sub(tostring(a), -1)) * tonumber(string.sub(tostring(b),\
    \ -1))\nend", "    return (a * b) % 10\nend", "  local unita = a % 10\n  local\
    \ unitb = b % 10\n  return unita * unitb\nend", "    return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "  return (a % 10) * (b % 10)\nend",
  "  local function unit(i)\n    return math.abs(i % 10)\n  end\n  return unit(a)\
    \ * unit(b)\nend", "  return (a % 10) * (b % 10)\nend", "  local function unit(n)\n\
    \    return math.abs(n) % 10\n  end\n  return unit(a) * unit(b)\nend", "    local\
    \ sign = 1\n    if a < 0 then\n        a = -a\n        sign = -sign\n    end\n\
    \    if b < 0 then\n        b = -b\n        sign = -sign\n    end\n    return\
    \ ((a % 10) * (b % 10)) * sign\nend", "    local a, b = math.abs(a), math.abs(b)\n\
    \    return (a % 10) * (b % 10)\nend", "  local c = a * b\n  return c % 10\nend",
  "  return (a % 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", "  return\
    \ tonumber(string.format(\"%d\", math.abs(a))) * tonumber(string.format(\"%d\"\
    , math.abs(b)))\nend", "  return (a % 10) * (b % 10)\nend", "    return ((a %\
    \ 10) * (b % 10))\nend", "  return (a % 10) * (b % 10)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
