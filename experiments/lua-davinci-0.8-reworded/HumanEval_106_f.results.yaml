language: lua
name: HumanEval_106_f
results:
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local table = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      table[i] = i * (i - 1)\n    else\n      local sum = 0\n      for j = 1,\
    \ i do\n        sum = sum + j\n      end\n      table[i] = sum\n    end\n  end\n\
    \  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0cxhu2s.lua:28:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 12, 15}\nstack traceback:\n\t\
    /tmp/tmpc0cxhu2s.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local i = 1\n    local t = {}\n    while i <= n do\n    \
    \    if i % 2 == 0 then\n            t[i] = factorial(i)\n        else\n     \
    \       t[i] = sum_n(i)\n        end\n        i = i + 1\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpup961wxu.lua:16:\
    \ attempt to call a nil value (global 'sum_n')\nstack traceback:\n\t/tmp/tmpup961wxu.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpup961wxu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf103dyj.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpaf103dyj.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c7nvglu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp9c7nvglu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa4v9m0h.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmpqa4v9m0h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if (i % 2 == 0)\
    \ then\n            t[i] = math.factorial(i)\n        else\n            t[i] =\
    \ 0\n            for j = 1, i do\n                t[i] = t[i] + j\n          \
    \  end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7f_5un9.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpf7f_5un9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf7f_5un9.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tbl = {}\n    for i = 1, n do\n        local num =\
    \ 0\n        for j = 1, i do\n            num = num + j\n        end\n       \
    \ tbl[i] = num\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt7z1zwg.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 3, 6, 10, 15}\nstack traceback:\n\t\
    /tmp/tmptt7z1zwg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local v = 1\n\
    \        if i % 2 == 0 then\n            for j = 1, i do\n                v =\
    \ v * j\n            end\n        else\n            for j = 1, i do\n        \
    \        v = v + j\n            end\n        end\n        t[i] = v\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp369foqu_.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmp369foqu_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      t[i] = factorial\n    else\n      local sum = 0\n    \
    \  for j = 1, i do\n        sum = sum + j\n      end\n      t[i] = sum\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4b3kbkw.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpq4b3kbkw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local res = {}\n    for i = 1, n do\n        if (i % 2 ==\
    \ 0) then\n            res[i] = math.factorial(i)\n        else\n            local\
    \ j = 0\n            for k = 1, i do\n                j = j + k\n            end\n\
    \            res[i] = j\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiaix7snc.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpiaix7snc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiaix7snc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy870z9kg.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpy870z9kg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvrr0bpm.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsvrr0bpm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsvrr0bpm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = factorial(i)\n    else\n      t[i] = sum(i)\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpte_qnvz3.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpte_qnvz3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpte_qnvz3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- put your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq0d077w.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmprq0d077w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sumNumbers(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuoqzo1bq.lua:15:\
    \ attempt to call a nil value (global 'sumNumbers')\nstack traceback:\n\t/tmp/tmpuoqzo1bq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpuoqzo1bq.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local ret = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      ret[i] = factorial(i)\n    else\n      ret[i] = sum(i)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2tv5pynw.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp2tv5pynw.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp2tv5pynw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgui_0q_.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjgui_0q_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjgui_0q_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal v = i % 2 == 0 and\
    \ factorial(i) or sum(i)\n\t\tt[i] = v\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuiq_uzx.lua:12:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpzuiq_uzx.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzuiq_uzx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    local index = 1\n    while index <=\
    \ n do\n        if index % 2 == 0 then\n            local tmp = 1\n          \
    \  local i = 1\n            while i <= index do\n                tmp = tmp * i\n\
    \                i = i + 1\n            end\n            result[index] = tmp\n\
    \        else\n            local i = 1\n            local tmp = 0\n          \
    \  while i <= index do\n                tmp = tmp + i\n                i = i +\
    \ 1\n            end\n            result[index] = tmp\n        end\n        index\
    \ = index + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tab = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            local p = 1\n            for j = 1, i do\n             \
    \   p = p * j\n            end\n            tab[i] = p\n        else\n       \
    \     local s = 0\n            for j = 1, i do\n                s = s + j\n  \
    \          end\n            tab[i] = s\n        end\n    end\n    return tab\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  for i = 1, n do\n    if (i % 2 == 0) then\n\
    \      local res = 1\n      for j = 1, i do\n        res = res * j\n      end\n\
    \      result[i] = res\n    else\n      local res = 0\n      for j = 1, i do\n\
    \        res = res + j\n      end\n      result[i] = res\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgui_0q_.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjgui_0q_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjgui_0q_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = math.factorial(i)\n        else\n            t[i] =\
    \ 0\n            for j = 1, i do\n                t[i] = t[i] + j\n          \
    \  end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8smeie1b.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp8smeie1b.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8smeie1b.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\
    \t\tt[i] = factorial(i)\n\t\telse\n\t\t\tt[i] = sum(i)\n\t\tend\n\tend\n\treturn\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjipycesd.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjipycesd.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjipycesd.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local array = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            array[i] = factorial(i)\n        else\n            array[i]\
    \ = sum(i)\n        end\n    end\n    return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppan39pn5.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmppan39pn5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppan39pn5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tlocal nFactorial = 1\n\tfor i = 1, n do\n\t\
    \tif i % 2 == 0 then\n\t\t\tt[i] = nFactorial\n\t\t\tnFactorial = nFactorial *\
    \ i\n\t\telse\n\t\t\tt[i] = (i * (i + 1)) / 2\n\t\tend\n\tend\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sbuyrtx.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 1, 6.0, 2, 15.0}\nstack traceback:\n\
    \t/tmp/tmp9sbuyrtx.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- YOUR CODE HERE\n    local table = {}\n    for i = 1, n\
    \ do\n        local factorial = 1\n        for j = 1, i do\n            if (i\
    \ % 2 == 0) then\n                factorial = factorial * j\n            else\n\
    \                factorial = factorial + j\n            end\n        end\n   \
    \     table[i] = factorial\n    end\n    return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq6nc4tu.lua:29:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmpwq6nc4tu.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__ckgof6.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp__ckgof6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy870z9kg.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpy870z9kg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tbl = {}\n    local j = 1\n    for i = 1, n do\n  \
    \      if i % 2 == 0 then\n            tbl[i] = factorial(i)\n        else\n \
    \           while j <= i do\n                tbl[i] = tbl[i] or 0\n          \
    \      tbl[i] = tbl[i] + j\n                j = j + 1\n            end\n     \
    \   end\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr9i8h6ln.lua:14:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpr9i8h6ln.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpr9i8h6ln.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal j = i % 2\n\t\t\
    if j == 0 then\n\t\t\tt[i] = factorial(i)\n\t\telse\n\t\t\tt[i] = sum1ton(i)\n\
    \t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfj0w5sfr.lua:16:\
    \ attempt to call a nil value (global 'sum1ton')\nstack traceback:\n\t/tmp/tmpfj0w5sfr.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpfj0w5sfr.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local fac = 1\n  local sum = 0\n  local table_f = {}\n  for\
    \ i = 1, n do\n    if i % 2 == 0 then\n      fac = fac * i\n      table_f[i] =\
    \ fac\n    else\n      sum = sum + i\n      table_f[i] = sum\n    end\n  end\n\
    \  return table_f\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmig1w1fq.lua:28:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 4, 8, 9}\nstack traceback:\n\t/tmp/tmpmig1w1fq.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  local n_factorial = 1\n  for i = 1, n\
    \ do\n    if i % 2 == 0 then\n      n_factorial = n_factorial * i\n      result[i]\
    \ = n_factorial\n    else\n      result[i] = i * (i + 1) / 2\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfd_kvndo.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 8, 15.0}\nstack traceback:\n\
    \t/tmp/tmpfd_kvndo.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local fact = 1\n    local tab = {}\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            for j = 1, i do\n                fact\
    \ = fact * j\n            end\n            tab[i] = fact\n            fact = 1\n\
    \        else\n            tab[i] = ((i * (i + 1)) / 2)\n        end\n    end\n\
    \    return tab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local ret = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            ret[i] = factorial(i)\n        else\n            ret[i]\
    \ = sum(i)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd31cyyl.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpxd31cyyl.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxd31cyyl.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local sum = 0\n    for i = 1, n do\n  \
    \      if i % 2 == 0 then\n            local mul = 1\n            for j = 1, i\
    \ do\n                mul = mul * j\n            end\n            t[i] = mul\n\
    \        else\n            sum = 0\n            for j = 1, i do\n            \
    \    sum = sum + j\n            end\n            t[i] = sum\n        end\n   \
    \ end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tlocal s = 1\n\tfor i = 1, n do\n\t\tif i %\
    \ 2 == 0 then\n\t\t\ts = 1\n\t\t\tfor j = 1, i do\n\t\t\t\ts = s * j\n\t\t\tend\n\
    \t\t\tt[i] = s\n\t\telse\n\t\t\ts = 0\n\t\t\tfor j = 1, i do\n\t\t\t\ts = s +\
    \ j\n\t\t\tend\n\t\t\tt[i] = s\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\t-- error checking\n\tif (type(n) ~= \"number\") then\n\t\t\
    error(\"n is not a number.\", 2)\n\tend\n\tif (n < 1) then\n\t\terror(\"n is not\
    \ a positive integer.\", 2)\n\tend\n\tif (math.floor(n) ~= n) then\n\t\terror(\"\
    n is not an integer.\", 2)\n\tend\n\t\n\tlocal result = {}\n\tfor i = 1, n do\n\
    \t\tlocal value = 0\n\t\tif (i % 2 == 0) then\n\t\t\tvalue = 1\n\t\t\tfor j =\
    \ 2, i do\n\t\t\t\tvalue = value * j\n\t\t\tend\n\t\telse\n\t\t\tvalue = 0\n\t\
    \t\tfor j = 1, i do\n\t\t\t\tvalue = value + j\n\t\t\tend\n\t\tend\n\t\tresult[i]\
    \ = value\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    -- write your code here\n    for i = 1,\
    \ n do\n        if (i % 2 == 0) then\n            t[i] = factorial(i)\n      \
    \  else\n            t[i] = sum_n(i)\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvhm42doj.lua:16:\
    \ attempt to call a nil value (global 'sum_n')\nstack traceback:\n\t/tmp/tmpvhm42doj.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpvhm42doj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local array = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      -- even\n      array[i] = math.factorial(i)\n    else\n      -- odd\n \
    \     local sum = 0\n      for j = 1, i do\n        sum = sum + j\n      end\n\
    \      array[i] = sum\n    end\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gg1a12e.lua:14:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp7gg1a12e.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7gg1a12e.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum_to(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwdo1coi.lua:15:\
    \ attempt to call a nil value (global 'sum_to')\nstack traceback:\n\t/tmp/tmplwdo1coi.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplwdo1coi.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\t-- TO DO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5eqza5tr.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp5eqza5tr.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal v = 0\n\t\tif i\
    \ % 2 == 0 then\n\t\t\tv = 1\n\t\t\tfor j = 2, i do\n\t\t\t\tv = v * j\n\t\t\t\
    end\n\t\telse\n\t\t\tfor j = 1, i do\n\t\t\t\tv = v + j\n\t\t\tend\n\t\tend\n\t\
    \tt[i] = v\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  for i = 1, n do\n    if (i % 2 == 0) then\n\
    \      result[i] = factorial(i)\n    else\n      result[i] = sum(i)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1fvgnslm.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp1fvgnslm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1fvgnslm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n      t[i]\
    \ = factorial(i)\n    else\n      t[i] = sum(i)\n    end\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpevqlhjs0.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpevqlhjs0.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpevqlhjs0.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\treturn 'DUMMY'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcvjuwnw.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: \"DUMMY\"\nstack traceback:\n\t/tmp/tmpzcvjuwnw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local f = 1\n            for j = 1, i do\n               \
    \ f = f * j\n            end\n            t[i] = f\n        else\n           \
    \ local s = 0\n            for j = 1, i do\n                s = s + j\n      \
    \      end\n            t[i] = s\n        end\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = i * (i - 1)\n    else\n      t[i] = i * (i + 1) / 2\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xykklgk.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 12, 15.0}\nstack traceback:\n\
    \t/tmp/tmp1xykklgk.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- your code here\n  local t={}\n  local sum=0\n  for i=1,n\
    \ do\n    if i%2==0 then\n      local fact=1\n      for j=1,i do\n        fact=fact*j\n\
    \      end\n      t[i]=fact\n    else\n      sum=0\n      for j=1,i do\n     \
    \   sum=sum+j\n      end\n      t[i]=sum\n    end\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum_to(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwdo1coi.lua:15:\
    \ attempt to call a nil value (global 'sum_to')\nstack traceback:\n\t/tmp/tmplwdo1coi.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplwdo1coi.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      result[i] = factorial\n    else\n      local sum = 0\n\
    \      for j = 1, i do\n        sum = sum + j\n      end\n      result[i] = sum\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local factorial = 1\n            for j = 1, i do\n       \
    \         factorial = factorial * j\n            end\n            t[i] = factorial\n\
    \        else\n            local sum = 0\n            for j = 1, i do\n      \
    \          sum = sum + j\n            end\n            t[i] = sum\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\
    \t\t\tlocal factorial = 1\n\t\t\tfor j = 1, i do\n\t\t\t\tfactorial = factorial\
    \ * j\n\t\t\tend\n\t\t\tresult[i] = factorial\n\t\telse\n\t\t\tlocal sum = 0\n\
    \t\t\tfor j = 1, i do\n\t\t\t\tsum = sum + j\n\t\t\tend\n\t\t\tresult[i] = sum\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tbl = {}\n    for i = 1, n do\n        local elem =\
    \ 0\n        if i % 2 == 0 then\n            for j = 1, i do\n               \
    \ elem = elem * j\n            end\n        else\n            for j = 1, i do\n\
    \                elem = elem + j\n            end\n        end\n        tbl[i]\
    \ = elem\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vrf78na.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 0, 6, 0, 15}\nstack traceback:\n\t\
    /tmp/tmp1vrf78na.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local function factorial(n)\n    local result = 1\n    for\
    \ i = 1, n do\n      result = result * i\n    end\n    return result\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd9dh9grm.lua:27: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- write your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6jnjiwmh.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp6jnjiwmh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal a = {}\n\tfor i = 1, n do\n\t\tlocal b = 1\n\t\tif i\
    \ % 2 == 0 then\n\t\t\tfor k = 1, i do\n\t\t\t\tb = b * k\n\t\t\tend\n\t\telse\n\
    \t\t\tfor k = 1, i do\n\t\t\t\tb = b + k\n\t\t\tend\n\t\tend\n\t\ta[i] = b\n\t\
    end\n\treturn a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpjuwxw6.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmpgpjuwxw6.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local a = {}\n    a[1] = 1\n    local j = 1\n    for i =\
    \ 2, n do\n        if i % 2 == 0 then\n            a[i] = a[i-1] * i\n       \
    \ else\n            local k = 0\n            for j = 1, i do\n               \
    \ k = k + j\n            end\n            a[i] = k\n        end\n    end\n   \
    \ return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkryscm_c.lua:31:\
    \ expected: {1, 2, 6, 24, 15, 720, 28}\nactual: {1, 2, 6, 24, 15, 90, 28}\nstack\
    \ traceback:\n\t/tmp/tmpkryscm_c.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tab = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            tab[i] = fakt(i)\n        else\n            tab[i] = suma(i)\n\
    \        end\n    end\n    return tab\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8nm9otv.lua:15:\
    \ attempt to call a nil value (global 'suma')\nstack traceback:\n\t/tmp/tmpk8nm9otv.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpk8nm9otv.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvrr0bpm.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsvrr0bpm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsvrr0bpm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = math.factorial(i)\n        else\n            t[i] =\
    \ 0\n            for j = 1, i do\n                t[i] = t[i] + j\n          \
    \  end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8smeie1b.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp8smeie1b.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8smeie1b.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    if (n == nil) then\n        return\n    end\n    local t\
    \ = {}\n    for i = 1, n do\n        if (i % 2 == 0) then\n            t[i] =\
    \ factorial(i)\n        else\n            t[i] = sum_numbers(i)\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp71ebip3s.lua:18:\
    \ attempt to call a nil value (global 'sum_numbers')\nstack traceback:\n\t/tmp/tmp71ebip3s.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp71ebip3s.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local factorial = 1\n            for j = 1, i do\n       \
    \         factorial = factorial * j\n            end\n            t[i] = factorial\n\
    \        else\n            local sum = 0\n            for j = 1, i do\n      \
    \          sum = sum + j\n            end\n            t[i] = sum\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\
    \t\t\tresult[i] = 1\n\t\t\tfor j = 2, i do\n\t\t\t\tresult[i] = result[i] * j\n\
    \t\t\tend\n\t\telse\n\t\t\tresult[i] = 0\n\t\t\tfor j = 1, i do\n\t\t\t\tresult[i]\
    \ = result[i] + j\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c7nvglu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp9c7nvglu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local factorial = 1\n            for j = 1, i do\n       \
    \         factorial = factorial * j\n            end\n            t[i] = factorial\n\
    \        else\n            local sum = 0\n            for j = 1, i do\n      \
    \          sum = sum + j\n            end\n            t[i] = sum\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            local factorial = 1\n            for j = 1, i do\n  \
    \              factorial = factorial * j\n            end\n            result[i]\
    \ = factorial\n        else\n            local sum = 0\n            for j = 1,\
    \ i do\n                sum = sum + j\n            end\n            result[i]\
    \ = sum\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = get_sum(i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmacib071.lua:15:\
    \ attempt to call a nil value (global 'get_sum')\nstack traceback:\n\t/tmp/tmpmacib071.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpmacib071.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      t[i] = factorial\n    else\n      local sum = 0\n    \
    \  for j = 1, i do\n        sum = sum + j\n      end\n      t[i] = sum\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      result[i] = factorial\n    else\n      local sum = 0\n\
    \      for j = 1, i do\n        sum = sum + j\n      end\n      result[i] = sum\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\
    \t\tt[i] = fatorial(i)\n\t\telse\n\t\t\tt[i] = soma(i)\n\t\tend\n\tend\n\treturn\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8901vlt.lua:15:\
    \ attempt to call a nil value (global 'soma')\nstack traceback:\n\t/tmp/tmpi8901vlt.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpi8901vlt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\t-- Write your code here\n\tresult = {}\n\tfor i = 1, n do\n\
    \t\tsum = 0\n\t\tfor j = 1, i do\n\t\t\tsum = sum + j\n\t\tend\n\t\tif i % 2 ==\
    \ 0 then\n\t\t\tsum = 1\n\t\t\tfor j = 1, i do\n\t\t\t\tsum = sum * j\n\t\t\t\
    end\n\t\tend\n\t\tresult[i] = sum\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal fact = 1\n\t\tlocal\
    \ sum = 0\n\t\tif i % 2 == 0 then\n\t\t\tfor j = 1, i do\n\t\t\t\tfact = fact\
    \ * j\n\t\t\tend\n\t\t\tt[i] = fact\n\t\telse\n\t\t\tfor j = 1, i do\n\t\t\t\t\
    sum = sum + j\n\t\t\tend\n\t\t\tt[i] = sum\n\t\tend\n\tend\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- Write your code here\n    return {n, n*2, n*3, n*4, n*5}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0r4drf_.lua:17:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {5, 10, 15, 20, 25}\nstack traceback:\n\
    \t/tmp/tmpm0r4drf_.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local k = i\n\
    \        local res = 1\n        if k % 2 == 0 then\n            while k >= 1 do\n\
    \                res = res * k\n                k = k - 1\n            end\n \
    \       else\n            while k >= 1 do\n                res = res + k\n   \
    \             k = k - 1\n            end\n        end\n        t[i] = res\n  \
    \  end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf1kbq8z.lua:33:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmplf1kbq8z.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal v = 1\n\t\tif i\
    \ % 2 == 0 then\n\t\t\tfor j = 1, i do\n\t\t\t\tv = v * j\n\t\t\tend\n\t\telse\n\
    \t\t\tfor j = 1, i do\n\t\t\t\tv = v + j\n\t\t\tend\n\t\tend\n\t\tt[i] = v\n\t\
    end\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcme5177.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmpkcme5177.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    if n == 1 then\n        return {1}\n    end\n    if n ==\
    \ 2 then\n        return {1, 2}\n    end\n    local factorial = 1\n    local sum\
    \ = 1\n    local t = {1, 2}\n    for i = 3, n do\n        if i % 2 == 0 then\n\
    \            factorial = factorial * i\n            t[i] = factorial\n       \
    \ else\n            sum = sum + i\n            t[i] = sum\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvvjki08.lua:34:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 4, 4, 9}\nstack traceback:\n\t/tmp/tmpgvvjki08.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local a = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     a[i] = factorial(i)\n    else\n      a[i] = sum(i)\n    end\n  end\n  return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8f3wlmc8.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp8f3wlmc8.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp8f3wlmc8.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- TODO: You can put here the code to compute and return the\
    \ answer.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn8bdr8g.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpzn8bdr8g.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     local product = 1\n      for j = 1, i do\n        product = product * j\n\
    \      end\n      t[i] = product\n    else\n      local sum = 0\n      for j =\
    \ 1, i do\n        sum = sum + j\n      end\n      t[i] = sum\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local accum = 1\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            accum = accum * i\n            t[i] =\
    \ accum\n        else\n            t[i] = i * (i + 1) / 2\n        end\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmput8q8rn9.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 8, 15.0}\nstack traceback:\n\
    \t/tmp/tmput8q8rn9.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            local sum = 1\n            for j = 1, i do\n        \
    \        sum = sum * j\n            end\n            result[i] = sum\n       \
    \ else\n            local sum = 0\n            for j = 1, i do\n             \
    \   sum = sum + j\n            end\n            result[i] = sum\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal result = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\
    \t\t\tlocal factorial = 1\n\t\t\tfor j = 1, i do\n\t\t\t\tfactorial = factorial\
    \ * j\n\t\t\tend\n\t\t\tresult[i] = factorial\n\t\telse\n\t\t\tlocal sum = 0\n\
    \t\t\tfor j = 1, i do\n\t\t\t\tsum = sum + j\n\t\t\tend\n\t\t\tresult[i] = sum\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      result[i] = i\n      for j = i - 1, 1, -1 do\n        result[i] = result[i]\
    \ * j\n      end\n    else\n      result[i] = 0\n      for j = 1, i do\n     \
    \   result[i] = result[i] + j\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\treturn table.reduce(table.range(1, n), function(acc, x)\n\t\
    \tif x % 2 == 0 then\n\t\t\treturn table.append(acc, table.reduce(table.range(1,\
    \ x), function(acc2, y)\n\t\t\t\treturn table.append(acc2, y)\n\t\t\tend, {1}))\n\
    \t\telse\n\t\t\treturn table.append(acc, table.reduce(table.range(1, x), function(acc2,\
    \ y)\n\t\t\t\treturn table.append(acc2, y)\n\t\t\tend, {0}))\n\t\tend\n\tend,\
    \ {})\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbkwgbsvt.lua:10:\
    \ attempt to call a nil value (field 'range')\nstack traceback:\n\t/tmp/tmpbkwgbsvt.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpbkwgbsvt.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local factorial = 1\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            factorial = factorial * i\n         \
    \   t[i] = factorial\n        else\n            t[i] = i * (i + 1) / 2\n     \
    \   end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52_glhvm.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 8, 15.0}\nstack traceback:\n\
    \t/tmp/tmp52_glhvm.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local a = {}\n    local factorial = 1\n    for i = 1, n do\n\
    \        if (i % 2 == 0) then\n            a[i] = factorial\n            factorial\
    \ = factorial * i\n        else\n            a[i] = i * (i + 1) / 2\n        end\n\
    \    end\n    return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3yhztfg.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 1, 6.0, 2, 15.0}\nstack traceback:\n\
    \t/tmp/tmpc3yhztfg.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = math.factorial(i)\n        else\n            t[i] =\
    \ i * (i + 1) / 2\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4e28bo5t.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp4e28bo5t.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4e28bo5t.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local a = {}\n  for i = 1, n do\n    local s = 1\n    if i\
    \ % 2 == 0 then\n      for j = 1, i do\n        s = s * j\n      end\n    else\n\
    \      for j = 1, i do\n        s = s + j\n      end\n    end\n    a[i] = s\n\
    \  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5elv7u3.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmpv5elv7u3.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgui_0q_.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjgui_0q_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjgui_0q_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\t-- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hf7oxlu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp2hf7oxlu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local v = 0\n\
    \        if i % 2 == 0 then\n            v = 1\n            for j = 2, i do\n\
    \                v = v * j\n            end\n        else\n            for j =\
    \ 1, i do\n                v = v + j\n            end\n        end\n        t[i]\
    \ = v\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal tab = {}\n\tlocal j = 1\n\tfor i = 1, n do\n\t\tif i\
    \ % 2 == 0 then\n\t\t\ttab[i] = factorial(i)\n\t\telse\n\t\t\tfor j = 1, i do\n\
    \t\t\t\ttab[i] = tab[i] + j\n\t\t\tend\n\t\tend\n\tend\n\treturn tab\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa4s71bp4.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpa4s71bp4.lua:17: in local 'candidate'\n\t/tmp/tmpa4s71bp4.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local fact = {}\n    local sum = 0\n    for i = 1, n do\n\
    \        fact[i] = i\n        sum = sum + i\n        if fact[i] % 2 == 0 then\n\
    \            fact[i] = fact[i] * fact[i]\n        else\n            fact[i] =\
    \ sum\n        end\n    end\n    return fact\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit1ws2bq.lua:27:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 4, 6, 16, 15}\nstack traceback:\n\t\
    /tmp/tmpit1ws2bq.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = 1\n            for j = 2, i do\n                t[i]\
    \ = t[i] * j\n            end\n        else\n            t[i] = 0\n          \
    \  for j = 1, i do\n                t[i] = t[i] + j\n            end\n       \
    \ end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = factorial(i)\n    else\n      t[i] = sumTo(i)\n    end\n  end\n \
    \ return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4sqbvr6.lua:15:\
    \ attempt to call a nil value (global 'sumTo')\nstack traceback:\n\t/tmp/tmpq4sqbvr6.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpq4sqbvr6.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local sum = 0\n    for i = 1, n do\n  \
    \      if i % 2 == 0 then\n            t[i] = factorial(i)\n        else\n   \
    \         for j = 1, i do\n                sum = sum + j\n            end\n  \
    \          t[i] = sum\n            sum = 0\n        end\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg84ox9ko.lua:14:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpg84ox9ko.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpg84ox9ko.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  -- your code here\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pvsp8w4.lua:18:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp_pvsp8w4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local factorial = 1\n  local numbers = {}\n  for i = 1, n do\n\
    \    if i % 2 == 0 then\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      numbers[i] = factorial\n      factorial = 1\n    else\n\
    \      local sum = 0\n      for j = 1, i do\n        sum = sum + j\n      end\n\
    \      numbers[i] = sum\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    local factorial = 1\n    for i = 1,\
    \ n do\n        if i % 2 == 0 then\n            factorial = factorial * i\n  \
    \          result[i] = factorial\n        else\n            local sum = 0\n  \
    \          for j = 1, i do\n                sum = sum + j\n            end\n \
    \           result[i] = sum\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb975v73.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 8, 15}\nstack traceback:\n\t\
    /tmp/tmpjb975v73.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if (i % 2 == 0) then\n\
    \      t[i] = factorial(i)\n    else\n      t[i] = sum(i)\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpku8_n10a.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpku8_n10a.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpku8_n10a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgpdh0ljf.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpgpdh0ljf.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local fact = 1\n    for i = 1, n do\n \
    \       if i % 2 == 0 then\n            fact = fact * i\n            t[i] = fact\n\
    \        else\n            local sum = 0\n            for j = 1, i do\n      \
    \          sum = sum + j\n            end\n            t[i] = sum\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78issfsl.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 8, 15}\nstack traceback:\n\t\
    /tmp/tmp78issfsl.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  -- your code here\n  \n  for i = 1, n do\n\t\
    if i % 2 == 0 then\n\t\tt[i] = factorial(i)\n\telse\n\t\tt[i] = sumTo(i)\n\tend\n\
    \  end\n  \n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkasagly6.lua:17:\
    \ attempt to call a nil value (global 'sumTo')\nstack traceback:\n\t/tmp/tmpkasagly6.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpkasagly6.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- local ans = {}\n    -- for i = 1, n do\n    --     if\
    \ i % 2 == 0 then\n    --         local factorial = 1\n    --         for j =\
    \ 1, i do\n    --             factorial = factorial * j\n    --         end\n\
    \    --         ans[i] = factorial\n    --     else\n    --         local sum\
    \ = 0\n    --         for j = 1, i do\n    --             sum = sum + j\n    --\
    \         end\n    --         ans[i] = sum\n    --     end\n    -- end\n    --\
    \ return ans\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbg9qwohg.lua:37: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    if n == 0 then\n        return {}\n    end\n    local t =\
    \ {}\n    for i = 1, n do\n        if i % 2 == 0 then\n            t[i] = factorial(i)\n\
    \        else\n            t[i] = sum(i)\n        end\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6albc6yo.lua:18:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp6albc6yo.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6albc6yo.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local ans = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            ans[i] = get_factorial(i)\n        else\n            ans[i]\
    \ = get_sum(i)\n        end\n    end\n    return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2z36zmt.lua:15:\
    \ attempt to call a nil value (global 'get_sum')\nstack traceback:\n\t/tmp/tmpw2z36zmt.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpw2z36zmt.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy870z9kg.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpy870z9kg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local result = 1\n            for j = 1, i do\n          \
    \      result = result * j\n            end\n            t[i] = result\n     \
    \   else\n            local result = 0\n            for j = 1, i do\n        \
    \        result = result + j\n            end\n            t[i] = result\n   \
    \     end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = i * (i - 1)\n    else\n      t[i] = 0\n      for j = 1, i do\n  \
    \      t[i] = t[i] + j\n      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppw0280p.lua:27:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 12, 15}\nstack traceback:\n\t\
    /tmp/tmpppw0280p.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local fac = 1\n            for j = 1, i do\n             \
    \   fac = fac * j\n            end\n            t[i] = fac\n        else\n   \
    \         local sum = 0\n            for j = 1, i do\n                sum = sum\
    \ + j\n            end\n            t[i] = sum\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c7nvglu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp9c7nvglu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local a = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local p = 1\n            for j = 1, i do\n               \
    \ p = p * j\n            end\n            a[i] = p\n        else\n           \
    \ local p = 0\n            for j = 1, i do\n                p = p + j\n      \
    \      end\n            a[i] = p\n        end\n    end\n    return a\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- Insert your code here\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkcx2c2p.lua:17:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmppkcx2c2p.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- Write your code here\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wy0ofpp.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp6wy0ofpp.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      local product = 1\n      for j = 1, i do\n        product = product * j\n\
    \      end\n      result[i] = product\n    else\n      local sum = 0\n      for\
    \ j = 1, i do\n        sum = sum + j\n      end\n      result[i] = sum\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local p = 1\n            for j = 1, i do\n               \
    \ p = p * j\n            end\n            t[i] = p\n        else\n           \
    \ local p = 0\n            for j = 1, i do\n                p = p + j\n      \
    \      end\n            t[i] = p\n        end\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- Write your code here\n    local arr = {}\n    for i =\
    \ 1, n do\n        if i % 2 == 0 then\n            local res = 1\n           \
    \ for k = 1, i do\n                res = res * k\n            end\n          \
    \  arr[i] = res\n        else\n            local res = 0\n            for k =\
    \ 1, i do\n                res = res + k\n            end\n            arr[i]\
    \ = res\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local tbl = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      tbl[i] = factorial\n    else\n      local sum = 0\n  \
    \    for j = 1, i do\n        sum = sum + j\n      end\n      tbl[i] = sum\n \
    \   end\n  end\n  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local e = 0\n\
    \        if i % 2 == 0 then\n            e = 1\n            for j = 2, i do\n\
    \                e = e * j\n            end\n        else\n            for j =\
    \ 1, i do\n                e = e + j\n            end\n        end\n        t[i]\
    \ = e\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo149u30t.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpo149u30t.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  if n < 1 then return {} end\n  -- Write your code here\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnavq77d9.lua:17:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpnavq77d9.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if (i % 2 == 0)\
    \ then\n            t[i] = 1\n            for j = 2, i do\n                t[i]\
    \ = t[i] * j\n            end\n        else\n            t[i] = 0\n          \
    \  for j = 1, i do\n                t[i] = t[i] + j\n            end\n       \
    \ end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\t-- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hf7oxlu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp2hf7oxlu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    local factor = 1\n   \
    \ local sum = 0\n    for j = 1, i do\n      if i % 2 == 0 then\n        factor\
    \ = factor * j\n      else\n        sum = sum + j\n      end\n    end\n    t[i]\
    \ = i % 2 == 0 and factor or sum\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- Your code here\n    -- ...\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1ub6xx8.lua:17:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmps1ub6xx8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = factorial(i)\n    else\n      t[i] = sum(i)\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpte_qnvz3.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpte_qnvz3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpte_qnvz3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  local fact = 1\n  for i = 1, n do\n    if i\
    \ % 2 == 0 then\n      fact = fact * i\n      t[i] = fact\n    else\n      t[i]\
    \ = i * (i + 1) / 2\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj586lr2.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 8, 15.0}\nstack traceback:\n\
    \t/tmp/tmpgj586lr2.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- your code here\n  local t = {}\n  for i = 1, n do\n    if\
    \ i % 2 == 0 then\n      t[i] = factorial(i)\n    else\n      t[i] = sum(i)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5p84l_zb.lua:16:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp5p84l_zb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5p84l_zb.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local res = {}\n  local fac = 1\n  for i = 1, n do\n    if\
    \ i % 2 == 0 then\n      fac = fac * i\n      res[i] = fac\n    else\n      res[i]\
    \ = 0\n      for j = 1, i do\n        res[i] = res[i] + j\n      end\n    end\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5s6bx3mc.lua:29:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 8, 15}\nstack traceback:\n\t\
    /tmp/tmp5s6bx3mc.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local f = 1\n            for j = 1, i do\n               \
    \ f = f * j\n            end\n            t[i] = f\n        else\n           \
    \ local s = 0\n            for j = 1, i do\n                s = s + j\n      \
    \      end\n            t[i] = s\n        end\n    end\n    return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local factorial\
    \ = 1\n        if i % 2 == 0 then\n            for k = 1, i do\n             \
    \   factorial = factorial * k\n            end\n            t[i] = factorial\n\
    \        else\n            local sum = 0\n            for j = 1, i do\n      \
    \          sum = sum + j\n            end\n            t[i] = sum\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa4v9m0h.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmpqa4v9m0h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  return 'Write your solution here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk15ppcd.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: \"Write your solution here\"\nstack traceback:\n\
    \t/tmp/tmpvk15ppcd.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum_of_numbers(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6b1cfsn.lua:15:\
    \ attempt to call a nil value (global 'sum_of_numbers')\nstack traceback:\n\t\
    /tmp/tmpr6b1cfsn.lua:15: in local 'candidate'\n\t/tmp/tmpr6b1cfsn.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal f = 1\n\t\tlocal\
    \ v = 0\n\t\tif i % 2 == 0 then\n\t\t\tfor j = 1, i do\n\t\t\t\tf = f * j\n\t\t\
    \tend\n\t\t\tv = f\n\t\telse\n\t\t\tfor j = 1, i do\n\t\t\t\tv = v + j\n\t\t\t\
    end\n\t\tend\n\t\tt[i] = v\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44lqduak.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp44lqduak.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum_n(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpltx50mp2.lua:15:\
    \ attempt to call a nil value (global 'sum_n')\nstack traceback:\n\t/tmp/tmpltx50mp2.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpltx50mp2.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    local factorial = 1\n    for i = 1,\
    \ n do\n        if i % 2 == 0 then\n            factorial = factorial * i\n  \
    \          result[i] = factorial\n        else\n            local sum = 0\n  \
    \          for j = 1, i do\n                sum = sum + j\n            end\n \
    \           result[i] = sum\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n   \
    \ lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb975v73.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 8, 15}\nstack traceback:\n\t\
    /tmp/tmpjb975v73.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if (i % 2 == 0)\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sumOfNumbersTo(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9smj7u2k.lua:15:\
    \ attempt to call a nil value (global 'sumOfNumbersTo')\nstack traceback:\n\t\
    /tmp/tmp9smj7u2k.lua:15: in local 'candidate'\n\t/tmp/tmp9smj7u2k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tab = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            local fact = 1\n            for j = 1, i do\n          \
    \      fact = fact * j\n            end\n            tab[i] = fact\n        else\n\
    \            local sum = 0\n            for j = 1, i do\n                sum =\
    \ sum + j\n            end\n            tab[i] = sum\n        end\n    end\n \
    \   return tab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal o = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\
    \t\to[i] = math.factorial(i)\n\t\telse\n\t\t\to[i] = 0\n\t\t\tfor j = 1, i do\n\
    \t\t\t\to[i] = o[i] + j\n\t\t\tend\n\t\tend\n\tend\n\treturn o\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0nrhv5fz.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp0nrhv5fz.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp0nrhv5fz.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local tab = {}\n  local sum = 0\n  for i = 1, n do\n    if\
    \ i % 2 == 0 then\n      tab[i] = math.factorial(i)\n    else\n      for j = 1,\
    \ i do\n        sum = sum + j\n      end\n      tab[i] = sum\n      sum = 0\n\
    \    end\n  end\n  return tab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01le0pvq.lua:14:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp01le0pvq.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp01le0pvq.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- your code here\n  local result = {}\n  for i = 1, n do\n\
    \    if (i % 2 == 0) then\n      result[i] = factorial(i)\n    else\n      result[i]\
    \ = sumTo(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqm359__y.lua:16:\
    \ attempt to call a nil value (global 'sumTo')\nstack traceback:\n\t/tmp/tmpqm359__y.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpqm359__y.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = math.factorial(i)\n        else\n            t[i] =\
    \ i * (i + 1) / 2\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4e28bo5t.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmp4e28bo5t.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4e28bo5t.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local v = 1\n\
    \        if i % 2 == 0 then\n            for j = 1, i do\n                v =\
    \ v * j\n            end\n        else\n            for j = 1, i do\n        \
    \        v = v + j\n            end\n        end\n        t[i] = v\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp369foqu_.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmp369foqu_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = i\n      for j = i - 1, 1, -1 do\n        t[i] = t[i] * j\n     \
    \ end\n    else\n      t[i] = 0\n      for j = 1, i do\n        t[i] = t[i] +\
    \ j\n      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp974eu63c.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp974eu63c.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    -- your code here\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bvar86l.lua:18:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp8bvar86l.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local result = {}\n  local fact = 1\n  local sum = 0\n  for\
    \ i = 1, n do\n    if i % 2 == 0 then\n      fact = fact * i\n      result[i]\
    \ = fact\n    else\n      for j = 1, i do\n        sum = sum + j\n      end\n\
    \      result[i] = sum\n      sum = 0\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tnerfwx.lua:31:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 8, 15}\nstack traceback:\n\t\
    /tmp/tmp3tnerfwx.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal tab = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\
    \t\t\ttab[i] = 1\n\t\t\tfor j = 1, i do\n\t\t\t\ttab[i] = tab[i] * j\n\t\t\tend\n\
    \t\telse\n\t\t\ttab[i] = 0\n\t\t\tfor j = 1, i do\n\t\t\t\ttab[i] = tab[i] + j\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn tab\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local l = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            l[i] = math.factorial(i)\n        else\n            l[i] =\
    \ 0\n            for j = 1, i do\n                l[i] = l[i] + j\n          \
    \  end\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprih6fq71.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmprih6fq71.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmprih6fq71.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local function factorial(n)\n        local\
    \ result = 1\n        for i = 1, n do\n            result = result * i\n     \
    \   end\n        return result\n    end\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            t[i] = factorial(i)\n        else\n            t[i] =\
    \ (i + 1) * i / 2\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tab = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            tab[i] = factorial(i)\n        else\n            tab[i]\
    \ = sum(i)\n        end\n    end\n    return tab\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0bah83b.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpv0bah83b.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpv0bah83b.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- your code here\n    local a = {}\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            local f = 1\n            for j = 1, i\
    \ do\n                f = f * j\n            end\n            a[i] = f\n     \
    \   else\n            local f = 0\n            for j = 1, i do\n             \
    \   f = f + j\n            end\n            a[i] = f\n        end\n    end\n \
    \   return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if (i % 2 == 0) then\n\
    \      local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      t[i] = factorial\n    else\n      local partial_sum =\
    \ 0\n      for j = 1, i do\n        partial_sum = partial_sum + j\n      end\n\
    \      t[i] = partial_sum\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local factorial = 1\n            for j = 1, i do\n       \
    \         factorial = factorial * j\n            end\n            t[i] = factorial\n\
    \        else\n            local sum = 0\n            for j = 1, i do\n      \
    \          sum = sum + j\n            end\n            t[i] = sum\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    local factorial = 1\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            factorial = factorial * i\n         \
    \   t[i] = factorial\n        else\n            t[i] = (i + 1) * i / 2\n     \
    \   end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3m9zfbb_.lua:26:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 8, 15.0}\nstack traceback:\n\
    \t/tmp/tmp3m9zfbb_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgui_0q_.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjgui_0q_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjgui_0q_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  local i = 1\n  while i <= n do\n    if i %\
    \ 2 == 0 then\n      local j = 1\n      local factorial = 1\n      while j <=\
    \ i do\n        factorial = factorial * j\n        j = j + 1\n      end\n    \
    \  t[i] = factorial\n    else\n      local j = 1\n      local sum = 0\n      while\
    \ j <= i do\n        sum = sum + j\n        j = j + 1\n      end\n      t[i] =\
    \ sum\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local res = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            local fact = 1\n            for j = 1, i do\n          \
    \      fact = fact * j\n            end\n            res[i] = fact\n        else\n\
    \            local sum = 0\n            for j = 1, i do\n                sum =\
    \ sum + j\n            end\n            res[i] = sum\n        end\n    end\n \
    \   return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp974eu63c.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp974eu63c.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- Write your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1cegswb.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpu1cegswb.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\treturn \"TODO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt5hxv5u.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: \"TODO\"\nstack traceback:\n\t/tmp/tmpdt5hxv5u.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\
    \t\tlocal factorial = 1\n\t\t\tfor j = 1, i do\n\t\t\t\tfactorial = factorial\
    \ * j\n\t\t\tend\n\t\t\tt[i] = factorial\n\t\telse\n\t\t\tlocal sum = 0\n\t\t\t\
    for j = 1, i do\n\t\t\t\tsum = sum + j\n\t\t\tend\n\t\t\tt[i] = sum\n\t\tend\n\
    \tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if (i % 2 == 0)\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkhnlfig5.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpkhnlfig5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpkhnlfig5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local numbers = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      numbers[i] = factorial(i)\n    else\n      numbers[i] = i * (i + 1) / 2\n\
    \    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp64q8j2a.lua:13:\
    \ attempt to call a nil value (global 'factorial')\nstack traceback:\n\t/tmp/tmpp64q8j2a.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpp64q8j2a.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local l = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            l[i] = factorial(i)\n        else\n            l[i] = sum(i)\n\
    \        end\n    end\n    return l\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7e57diuo.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp7e57diuo.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp7e57diuo.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\
    \t\tlocal product = 1\n\t\t\tfor j = 1, i do\n\t\t\t\tproduct = product * j\n\t\
    \t\tend\n\t\t\tt[i] = product\n\t\telse\n\t\t\tlocal sum = 0\n\t\t\tfor j = 1,\
    \ i do\n\t\t\t\tsum = sum + j\n\t\t\tend\n\t\t\tt[i] = sum\n\t\tend\n\tend\n\t\
    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local tab = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      tab[i] = factorial(i)\n    else\n      tab[i] = sum(i)\n    end\n  end\n\
    \  return tab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpul6mdbtc.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpul6mdbtc.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpul6mdbtc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgui_0q_.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjgui_0q_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjgui_0q_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local fac = 1\n            for j = 1, i do\n             \
    \   fac = fac * j\n            end\n            t[i] = fac\n        else\n   \
    \         local sum = 0\n            for j = 1, i do\n                sum = sum\
    \ + j\n            end\n            t[i] = sum\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local function factorial(n)\n        local fact = 1\n   \
    \     while n > 1 do\n            fact = fact * n\n            n = n - 1\n   \
    \     end\n        return fact\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmmi4q09u.lua:28: ''end'' expected (to close ''function'' at
    line 9) near <eof>

    '
  stdout: ''
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tif i % 2 == 0 then\n\t\
    \t\tt[i] = i\n\t\t\tfor j = i - 1, 1, -1 do\n\t\t\t\tt[i] = t[i] * j\n\t\t\tend\n\
    \t\telse\n\t\t\tt[i] = 0\n\t\t\tfor j = 1, i do\n\t\t\t\tt[i] = t[i] + j\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local v = {}\n  local j = 1\n  for i = 1, n do\n    local value\
    \ = 0\n    if i % 2 == 0 then\n      for k = 1, i do\n        value = value *\
    \ k\n      end\n    else\n      for k = 1, i do\n        value = value + k\n \
    \     end\n    end\n    v[j] = value\n    j = j + 1\n  end\n  return v\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n  \
    \  lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf4ste7f1.lua:32:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 0, 6, 0, 15}\nstack traceback:\n\t\
    /tmp/tmpf4ste7f1.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy870z9kg.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpy870z9kg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            local res = 1\n            for j = 1, i do\n             \
    \   res = res * j\n            end\n            t[i] = res\n        else\n   \
    \         local res = 0\n            for j = 1, i do\n                res = res\
    \ + j\n            end\n            t[i] = res\n        end\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local ret = {}\n    for i = 1, n do\n        if i % 2 ==\
    \ 0 then\n            ret[i] = 1\n            for j = 2, i do\n              \
    \  ret[i] = ret[i] * j\n            end\n        else\n            ret[i] = 0\n\
    \            for j = 1, i do\n                ret[i] = ret[i] + j\n          \
    \  end\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp4bhzcu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpmp4bhzcu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsypnkg7s.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpsypnkg7s.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = factorial(i)\n    else\n      t[i] = sumNumbers(i)\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsjzzi_86.lua:15:\
    \ attempt to call a nil value (global 'sumNumbers')\nstack traceback:\n\t/tmp/tmpsjzzi_86.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsjzzi_86.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy870z9kg.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpy870z9kg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__ckgof6.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp__ckgof6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c7nvglu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp9c7nvglu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\treturn 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wsx11bh.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: 0\nstack traceback:\n\t/tmp/tmp8wsx11bh.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local table = {}\n    for i = 1, n do\n        local value\
    \ = i\n        if i % 2 == 0 then\n            value = 1\n            for j =\
    \ 1, i do\n                value = value * j\n            end\n        else\n\
    \            value = 0\n            for j = 1, i do\n                value = value\
    \ + j\n            end\n        end\n        table[i] = value\n    end\n    return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sumTo(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyf48n_5.lua:15:\
    \ attempt to call a nil value (global 'sumTo')\nstack traceback:\n\t/tmp/tmpoyf48n_5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpoyf48n_5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if (i % 2 == 0)\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum_numbers(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gnaw2u7.lua:15:\
    \ attempt to call a nil value (global 'sum_numbers')\nstack traceback:\n\t/tmp/tmp0gnaw2u7.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp0gnaw2u7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660009162
- exit_code: 0
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local table = {}\n  for i = 1, n do\n    local fac = 1\n  \
    \  if i % 2 == 0 then\n      for j = 1, i do\n        fac = fac * j\n      end\n\
    \      table[i] = fac\n    else\n      local sum = 0\n      for j = 1, i do\n\
    \        sum = sum + j\n      end\n      table[i] = sum\n    end\n  end\n  return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- Write your code here\n    local arr = {}\n    local factorial\
    \ = 1\n    for i = 1, n do\n        if i % 2 == 0 then\n            factorial\
    \ = factorial * i\n            arr[i] = factorial\n        else\n            arr[i]\
    \ = (i * (i + 1)) / 2\n        end\n    end\n    return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8g1foxy.lua:27:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1.0, 2, 6.0, 8, 15.0}\nstack traceback:\n\
    \t/tmp/tmpo8g1foxy.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1660009162
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__ckgof6.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmp__ckgof6.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009161
- exit_code: 1
  program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  -- Write your code here\n  -- It's possible to use math.factorial()\n\
    \  -- return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkksf_lt0.lua:18:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpkksf_lt0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660009162
