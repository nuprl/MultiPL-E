name: HumanEval_106_f
language: lua
results:
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local table = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      table[i] = i * (i - 1)\n    else\n      local sum = 0\n      for j = 1,\
    \ i do\n        sum = sum + j\n      end\n      table[i] = sum\n    end\n  end\n\
    \  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc0cxhu2s.lua:28:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 2, 6, 12, 15}\nstack traceback:\n\t\
    /tmp/tmpc0cxhu2s.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local i = 1\n    local t = {}\n    while i <= n do\n    \
    \    if i % 2 == 0 then\n            t[i] = factorial(i)\n        else\n     \
    \       t[i] = sum_n(i)\n        end\n        i = i + 1\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = f\n\
    \    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpup961wxu.lua:16:\
    \ attempt to call a nil value (global 'sum_n')\nstack traceback:\n\t/tmp/tmpup961wxu.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpup961wxu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaf103dyj.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpaf103dyj.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9c7nvglu.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmp9c7nvglu.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqa4v9m0h.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {}\nstack traceback:\n\t/tmp/tmpqa4v9m0h.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if (i % 2 == 0)\
    \ then\n            t[i] = math.factorial(i)\n        else\n            t[i] =\
    \ 0\n            for j = 1, i do\n                t[i] = t[i] + j\n          \
    \  end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7f_5un9.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpf7f_5un9.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpf7f_5un9.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local tbl = {}\n    for i = 1, n do\n        local num =\
    \ 0\n        for j = 1, i do\n            num = num + j\n        end\n       \
    \ tbl[i] = num\n    end\n    return tbl\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt7z1zwg.lua:24:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {1, 3, 6, 10, 15}\nstack traceback:\n\t\
    /tmp/tmptt7z1zwg.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        local v = 1\n\
    \        if i % 2 == 0 then\n            for j = 1, i do\n                v =\
    \ v * j\n            end\n        else\n            for j = 1, i do\n        \
    \        v = v + j\n            end\n        end\n        t[i] = v\n    end\n\
    \    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp369foqu_.lua:30:\
    \ expected: {1, 2, 6, 24, 15}\nactual: {2, 2, 7, 24, 16}\nstack traceback:\n\t\
    /tmp/tmp369foqu_.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     local factorial = 1\n      for j = 1, i do\n        factorial = factorial\
    \ * j\n      end\n      t[i] = factorial\n    else\n      local sum = 0\n    \
    \  for j = 1, i do\n        sum = sum + j\n      end\n      t[i] = sum\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4b3kbkw.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpq4b3kbkw.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local res = {}\n    for i = 1, n do\n        if (i % 2 ==\
    \ 0) then\n            res[i] = math.factorial(i)\n        else\n            local\
    \ j = 0\n            for k = 1, i do\n                j = j + k\n            end\n\
    \            res[i] = j\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiaix7snc.lua:13:\
    \ attempt to call a nil value (field 'factorial')\nstack traceback:\n\t/tmp/tmpiaix7snc.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiaix7snc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n  \
    \  lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1),\
    \ {1})\n    lu.assertEquals(candidate(3), {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy870z9kg.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmpy870z9kg.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local result = {}\n    for i = 1, n do\n        if i % 2\
    \ == 0 then\n            result[i] = factorial(i)\n        else\n            result[i]\
    \ = sum(i)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvrr0bpm.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpsvrr0bpm.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpsvrr0bpm.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local t = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n \
    \     t[i] = factorial(i)\n    else\n      t[i] = sum(i)\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpte_qnvz3.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpte_qnvz3.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpte_qnvz3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe24gfym.lua:15:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmppe24gfym.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    -- put your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq0d077w.lua:16:\
    \ expected: {1, 2, 6, 24, 15}\nactual: nil\nstack traceback:\n\t/tmp/tmprq0d077w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sumNumbers(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuoqzo1bq.lua:15:\
    \ attempt to call a nil value (global 'sumNumbers')\nstack traceback:\n\t/tmp/tmpuoqzo1bq.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpuoqzo1bq.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n  local ret = {}\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      ret[i] = factorial(i)\n    else\n      ret[i] = sum(i)\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = f\n    lu.assertEquals(candidate(5), {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7),\
    \ {1, 2, 6, 24, 15, 720, 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2tv5pynw.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp2tv5pynw.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp2tv5pynw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n    local t = {}\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            t[i] = factorial(i)\n        else\n            t[i] = sum(i)\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5), {1,\
    \ 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720, 28})\n\
    \    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3), {1,\
    \ 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgui_0q_.lua:15:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpjgui_0q_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpjgui_0q_.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Implement the function f that takes n as a parameter,\n-- and returns\
    \ a table of size n, such that the value of the element at index i is the factorial\
    \ of i if i is even\n-- or the sum of numbers from 1 to i otherwise.\n-- i starts\
    \ from 1.\n-- the factorial of i is the multiplication of the numbers from 1 to\
    \ i (1 * 2 * ... * i).\n-- Example:\n-- >>> f(5)\n-- {1, 2, 6, 24, 15}\nlocal\
    \ function f(n)\n\tlocal t = {}\n\tfor i = 1, n do\n\t\tlocal v = i % 2 == 0 and\
    \ factorial(i) or sum(i)\n\t\tt[i] = v\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = f\n    lu.assertEquals(candidate(5),\
    \ {1, 2, 6, 24, 15})\n    lu.assertEquals(candidate(7), {1, 2, 6, 24, 15, 720,\
    \ 28})\n    lu.assertEquals(candidate(1), {1})\n    lu.assertEquals(candidate(3),\
    \ {1, 2, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuiq_uzx.lua:12:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpzuiq_uzx.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpzuiq_uzx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
