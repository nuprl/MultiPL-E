name: HumanEval_113_odd_count
language: lua
results:
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local res = {}\n    for i, s in ipairs(lst) do\n       \
    \ local cnt = 0\n        for j = 1, #s do\n            if tonumber(s:sub(j, j))\
    \ % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \        res[i] = \"the number of odd elements \" .. cnt .. \"n the str\" .. i\
    \ .. \"ng \" .. i .. \" of the \" .. i .. \"nput.\"\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_count\n\
    \    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3', '11111111'}),\
    \ {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of\
    \ odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwhp33bzl.lua:26:\
    \ expected: {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\nactual:\
    \ {\"the number of odd elements 4n the str1ng 1 of the 1nput.\"}\nstack traceback:\n\
    \t/tmp/tmpwhp33bzl.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local result = {}\n  for _, str in ipairs(lst) do\n    local\
    \ sum = 0\n    for c in str:gmatch\".\" do\n      sum = sum + (tonumber(c) % 2)\n\
    \    end\n    result[#result+1] = (\"the number of odd elements %dn the str%dng\
    \ %d of the %dnput.\"):format(sum, sum, sum, sum)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_count\n\
    \    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3', '11111111'}),\
    \ {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of\
    \ odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local count = 0\n    for i = 1, #lst do\n        count =\
    \ 0\n        local str = lst[i]\n        for j = 1, #str do\n            if tonumber(str:sub(j,\
    \ j)) % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        lst[i] = \"the number of odd elements \" .. tostring(count)\
    \ .. \"n the str\" .. tostring(count) .. \"ng \" .. tostring(count) .. \" of the\
    \ \" .. tostring(count) .. \"nput.\"\n    end\n    return lst\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}),\
    \ {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local r = {}\n  for i,v in ipairs(lst) do\n    local n = 0\n\
    \    for _,c in ipairs(v:split(\"\")) do\n      if tonumber(c) % 2 == 1 then\n\
    \        n = n + 1\n      end\n    end\n    table.insert(r, (\"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\"):format(n, i, i, i))\n  end\n \
    \ return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpprb6kfz4.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpprb6kfz4.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpprb6kfz4.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n\tlocal result = {}\n\tfor _, i in ipairs(lst) do\n\t\tlocal\
    \ count = 0\n\t\tfor _, j in ipairs(i) do\n\t\t\tif tonumber(j) % 2 == 1 then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\tresult[#result + 1] = (\"the\
    \ number of odd elements %sn the str%sg %s of the %snput.\"):format(count, count,\
    \ count, count)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}),\
    \ {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5saqytf.lua:26:\
    \ expected: {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\nactual:\
    \ {\"the number of odd elements 0n the str0g 0 of the 0nput.\"}\nstack traceback:\n\
    \t/tmp/tmpo5saqytf.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  return table.map(lst, function(str)\n    local count = 0\n\
    \    for i=1, #str do\n      local digit = tonumber(str:sub(i, i))\n      if digit\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return \"\
    the number of odd elements \" .. count .. \"n the str\" .. count .. \"ng \" ..\
    \ count .. \" of the \" .. count .. \"nput.\"\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}),\
    \ {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2ux83d6.lua:10:\
    \ attempt to call a nil value (field 'map')\nstack traceback:\n\t/tmp/tmp_2ux83d6.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_2ux83d6.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local out = {}\n    for i, elem in ipairs(lst) do\n    \
    \    local n_odd = 0\n        for j = 1, string.len(elem) do\n            local\
    \ ch = string.sub(elem, j, j)\n            if tonumber(ch) % 2 == 1 then\n   \
    \             n_odd = n_odd + 1\n            end\n        end\n        local new_str\
    \ = 'the number of odd elements ' .. tostring(n_odd) .. 'n the str' .. tostring(n_odd)\
    \ .. 'ng ' .. tostring(n_odd) .. ' of the ' .. tostring(n_odd) .. 'nput.'\n  \
    \      table.insert(out, new_str)\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}),\
    \ {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local function tostr(str)\n    local count = 0\n    for i\
    \ = 1, #str do\n      local c = str:sub(i, i)\n      if tonumber(c) % 2 == 1 then\n\
    \        count = count + 1\n      end\n    end\n    return \"the number of odd\
    \ elements \" .. tostring(count) .. \"n the str\" ..\n      tostring(count) ..\
    \ \"ng \" .. tostring(count) .. \" of the \" ..\n      tostring(count) .. \"nput.\"\
    \n  end\n  local res = {}\n  for i = 1, #lst do\n    res[i] = tostr(lst[i])\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local ans = {}\n  for _, v in ipairs(lst) do\n    local cnt\
    \ = 0\n    for n in v:gmatch '%d' do\n      cnt = cnt + (tonumber(n) % 2 == 1\
    \ and 1 or 0)\n    end\n    local s = ('the number of odd elements %dn the str%dng\
    \ %d of the %dnput.'):format(cnt, cnt, cnt, cnt)\n    table.insert(ans, s)\n \
    \ end\n  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local out = {}\n    for i, v in ipairs(lst) do\n       \
    \ local num_odds = 0\n        for _, c in ipairs(v:totable()) do\n           \
    \ if tonumber(c) % 2 == 1 then\n                num_odds = num_odds + 1\n    \
    \        end\n        end\n        out[i] = string.format('the number of odd elements\
    \ %dn the str%dng %d of the %dnput.', num_odds, num_odds, num_odds, num_odds)\n\
    \    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9gjeqbil.lua:13:\
    \ attempt to call a nil value (method 'totable')\nstack traceback:\n\t/tmp/tmp9gjeqbil.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp9gjeqbil.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local result = {}\n    for _, num in ipairs(lst) do\n  \
    \      local count = 0\n        for char in num:gmatch(\".\") do\n           \
    \ count = count + (tonumber(char) % 2 == 1 and 1 or 0)\n        end\n        result[#result\
    \ + 1] = \"the number of odd elements \" .. count .. \"n the str\" .. count ..\
    \ \"ng \" .. count .. \" of the \" .. count .. \"nput.\"\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local r = {}\n    for i, str in ipairs(lst) do\n       \
    \ local count = 0\n        for i = 1, #str do\n            if tonumber(str:sub(i,\
    \ i)) % 2 == 1 then\n                count = count + 1\n            end\n    \
    \    end\n        table.insert(r, string.format('the number of odd elements %dn\
    \ the str%dng %d of the %dnput.', count, i, i, i))\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = odd_count\n\
    \    lu.assertEquals(candidate({'1234567'}), {'the number of odd elements 4n the\
    \ str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3', '11111111'}),\
    \ {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the number of\
    \ odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst_55bur.lua:26:\
    \ expected: {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\nactual:\
    \ {\"the number of odd elements 4n the str1ng 1 of the 1nput.\"}\nstack traceback:\n\
    \t/tmp/tmpst_55bur.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local ret = {}\n  for _, el in ipairs(lst) do\n    local count\
    \ = 0\n    for i = 1, #el do\n      if (el:sub(i, i) % 2 == 1) then\n        count\
    \ = count + 1\n      end\n    end\n    table.insert(ret, (\"the number of odd\
    \ elements %dn the str%dng %d of the %dnput.\"):format(count, count, count, count))\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local result = {}\n    for k, v in pairs(lst) do\n     \
    \   local num = 0\n        for _, c in pairs(v) do\n            if tonumber(c)\
    \ % 2 == 1 then\n                num = num + 1\n            end\n        end\n\
    \        result[k] = \"the number of odd elements \" .. tostring(num) .. \"n the\
    \ str\" .. tostring(num) .. \"ng \" .. tostring(num) .. \" of the \" .. tostring(num)\
    \ .. \"nput.\"\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}),\
    \ {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyy6bguka.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpyy6bguka.lua:13: in local 'candidate'\n\t/tmp/tmpyy6bguka.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    local odd_count_output = {}\n    local i = 1\n    while\
    \ i <= #lst do\n        local odd_count_string = \"\"\n        local j = 1\n \
    \       while j <= #lst[i] do\n            if lst[i]:sub(j, j) == \"0\" or lst[i]:sub(j,\
    \ j) == \"2\" or lst[i]:sub(j, j) == \"4\" or lst[i]:sub(j, j) == \"6\" or lst[i]:sub(j,\
    \ j) == \"8\" then\n                odd_count_string = odd_count_string .. \"\
    #\"\n            else\n                odd_count_string = odd_count_string ..\
    \ lst[i]:sub(j, j)\n            end\n            j = j + 1\n        end\n    \
    \    odd_count_output[i] = odd_count_string\n        i = i + 1\n    end\n    return\
    \ odd_count_output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6701r8j.lua:32:\
    \ expected: {\"the number of odd elements 4n the str4ng 4 of the 4nput.\"}\nactual:\
    \ {\"1#3#5#7\"}\nstack traceback:\n\t/tmp/tmpn6701r8j.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    return map(function(x)\n        return 'the number of odd\
    \ elements ' ..\n        gsub(x, '%d', function(d)\n            return (d % 2\
    \ == 1) and '1' or '0'\n        end) ..\n        'n the str' ..\n        x ..\n\
    \        'ng ' ..\n        x ..\n        ' of the ' ..\n        x ..\n       \
    \ 'nput.'\n    end, lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7mg2spm.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpq7mg2spm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq7mg2spm.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    -- YOUR CODE HERE\n    local function find_odd(str)\n  \
    \      local count = 0\n        for i = 1,#str do\n            if tonumber(str:sub(i,i))\
    \ % 2 == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    local result = {}\n    for i,v in ipairs(lst)\
    \ do\n        local count = find_odd(v)\n        local s = string.format('the\
    \ number of odd elements %dn the str%dng %d of the %dnput.',count,count,count,count)\n\
    \        table.insert(result,s)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}),\
    \ {'the number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n    return map(function(s) return gsub(s, \"(%d)\", { [\"0\"\
    ] = \"n\", [\"1\"] = \"1\", [\"2\"] = \"n\", [\"3\"] = \"1\", [\"4\"] = \"n\"\
    , [\"5\"] = \"1\", [\"6\"] = \"n\", [\"7\"] = \"1\", [\"8\"] = \"n\", [\"9\"]\
    \ = \"1\" }) end, lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt40elg6e.lua:10:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpt40elg6e.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpt40elg6e.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local rval = {}\n  for _, str in ipairs(lst) do\n    local\
    \ odd_count = 0\n    for _, char in ipairs(str:split(\"\")) do\n      if tonumber(char)\
    \ % 2 == 1 then\n        odd_count = odd_count + 1\n      end\n    end\n    table.insert(rval,\
    \ \"the number of odd elements \" .. odd_count .. \"n the str\" .. odd_count ..\
    \ \"ng \" .. odd_count .. \" of the \" .. odd_count .. \"nput.\")\n  end\n  return\
    \ rval\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6mjqkcy.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpd6mjqkcy.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpd6mjqkcy.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given a table of strings, where each string consists of only digits,\
    \ return a table.\n-- Each element i of the output should be \"the number of odd\
    \ elements in the\n-- string i of the input.\" where all the i's should be replaced\
    \ by the number\n-- of odd digits in the i'th string of the input.\n-- >>> odd_count({'1234567'})\n\
    -- {'the number of odd elements 4n the str4ng 4 of the 4nput.'}\n-- >>> odd_count({'3',\
    \ '11111111'})\n-- {'the number of odd elements 1n the str1ng 1 of the 1nput.',\
    \ 'the number of odd elements 8n the str8ng 8 of the 8nput.'}\nlocal function\
    \ odd_count(lst)\n  local res = {}\n  for i, str in ipairs(lst) do\n    local\
    \ count = 0\n    for j = 1, #str do\n      if tonumber(str:sub(j, j)) % 2 == 1\
    \ then\n        count = count + 1\n      end\n    end\n    res[i] = string.gsub(QUESTION_1_STRING,\
    \ '4', tostring(i))\n    res[i] = string.gsub(res[i], '4', count)\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = odd_count\n    lu.assertEquals(candidate({'1234567'}), {'the number of odd\
    \ elements 4n the str4ng 4 of the 4nput.'})\n    lu.assertEquals(candidate({'3',\
    \ '11111111'}), {'the number of odd elements 1n the str1ng 1 of the 1nput.', 'the\
    \ number of odd elements 8n the str8ng 8 of the 8nput.'})\n    lu.assertEquals(candidate({'271',\
    \ '137', '314'}), {'the number of odd elements 2n the str2ng 2 of the 2nput.',\
    \ 'the number of odd elements 3n the str3ng 3 of the 3nput.', 'the number of odd\
    \ elements 2n the str2ng 2 of the 2nput.'})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl7ti59fu.lua:18:\
    \ bad argument #1 to 'gsub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpl7ti59fu.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpl7ti59fu.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
