name: HumanEval_72_will_it_fly
language: lua
prompt: "-- Write a function that returns true if the object q will fly, and false\
  \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
  \ and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
  \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2, 3},\
  \ 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
  \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than the\
  \ maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n-- true\n\
  -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
  \ will_it_fly(q, w)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
  \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
  \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
  \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5},\
  \ 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n\
    \    end\n    if sum > w then\n        return false\n    end\n    for i = 1, #q\
    \ do\n        if q[i] ~= q[#q - i + 1] then\n            return false\n      \
    \  end\n    end\n    return true\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\tend\n\tif sum > w then\n\t\treturn false\n\tend\n\t\
    for i, v in ipairs(q) do\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    local isPalindrome = true\n    local\
    \ sum = 0\n    for i = 1, #q do\n        if q[i] ~= q[#q - i + 1] then\n     \
    \       isPalindrome = false\n        end\n        sum = sum + q[i]\n    end\n\
    \    return isPalindrome and sum <= w\nend", "  -- Your code here\nend", "  --\
    \ BEGIN\n  local weight = 0\n  for i = 1, #q do\n    weight = weight + q[i]\n\
    \  end\n  return is_balanced(q) and weight <= w\n  -- END\nend", "    local sum\
    \ = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend", "    -- write your code here\nend", " \
    \ return is_balanced(q) and sum(q) <= w\nend", "  local sum = 0\n  for i = 1,\
    \ #q do\n    sum = sum + q[i]\n  end\n  local flag = true\n  for i = 1, #q/2 do\n\
    \    if q[i] ~= q[#q - i + 1] then\n      flag = false\n      break\n    end\n\
    \  end\n  return sum <= w and flag\nend", "  return false\nend", "   -- Add code\
    \ here!\nend", "    if is_balanced(q) then\n        local sum = 0\n        for\
    \ _, v in ipairs(q) do\n            sum = sum + v\n        end\n        return\
    \ sum <= w\n    end\n    return false\nend", "    --TODO: your code here\nend",
  "\tlocal is_balanced = true\n\tfor i=1, #q do\n\t\tif q[i] ~= q[#q - i + 1] then\n\
    \t\t\tis_balanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\tlocal is_heavy = false\n\
    \tlocal sum = 0\n\tfor _,v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tis_heavy\
    \ = sum > w\n\treturn is_balanced and not is_heavy\nend\nassert(will_it_fly({1,\
    \ 2}, 5) == false)\nassert(will_it_fly({3, 2, 3}, 1) == false)\nassert(will_it_fly({3,\
    \ 2, 3}, 9) == true)\nassert(will_it_fly({3}, 5) == true)", "\t-- Implement your\
    \ solution here\n\treturn false\nend", "\tlocal function is_balanced(t)\n\t\t\
    local i = 1\n\t\tlocal j = #t\n\t\twhile i < j do\n\t\t\tif t[i] ~= t[j] then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\tend\n\t\
    \treturn true\n\tend\n\tlocal function sum(t)\n\t\tlocal s = 0\n\t\tfor i = 1,\
    \ #t do\n\t\t\ts = s + t[i]\n\t\tend\n\t\treturn s\n\tend\n\tif is_balanced(q)\
    \ and sum(q) <= w then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "  local s = 0\n  for _, v in ipairs(q) do\n    s = s + v\n  end\n  return s <=\
    \ w and true or false\nend", "  return false\nend", "  if w < table.sum(q) then\
    \ return false end\n  local p = deepcopy(q)\n  local len = #p\n  for i = 1, len\
    \ do\n    if p[i] ~= p[len - i + 1] then return false end\n  end\n  return true\n\
    end", "  if sum(q) > w then\n    return false\n  end\n  if is_balanced(q) then\n\
    \    return true\n  end\n  return false\nend", "    local sum = 0\n    for k,\
    \ v in pairs(q) do\n        sum = sum + v\n    end\n    if sum > w then\n    \
    \    return false\n    end\n    local left, right = 1, #q\n    while q[left] ==\
    \ q[right] and left < right do\n        left = left + 1\n        right = right\
    \ - 1\n    end\n    if left < right then\n        return false\n    end\n    return\
    \ true\nend", "    return false\nend", "    local len = #q\n    local sum = 0\n\
    \    local i = 1\n    while i <= len do\n        sum = sum + q[i]\n        i =\
    \ i + 1\n    end\n    if sum > w then\n        return false\n    end\n    i =\
    \ 1\n    while i <= len do\n        if q[i] ~= q[len - i + 1] then\n         \
    \   return false\n        end\n        i = i + 1\n    end\n    return true\nend",
  "    local sum = 0\n    for k, v in pairs(q) do\n        sum = sum + v\n    end\n\
    \    if sum > w then\n        return false\n    end\n    local flag = true\n \
    \   for i = 1, #q/2 do\n        if q[i] ~= q[#q-i+1] then\n            flag =\
    \ false\n            break\n        end\n    end\n    return flag\nend", "   \
    \ if not is_palindrome(q) then\n        return false\n    end\n    local sum =\
    \ 0\n    for _,n in ipairs(q) do\n        sum = sum + n\n    end\n    return sum\
    \ <= w\nend", "  -- TODO: Implementation\nend", "    local result = 0\n    local\
    \ l = #q\n    local mid = math.floor(l / 2)\n    for i = 1, mid do\n        if\
    \ q[i] ~= q[l - i + 1] then\n            return false\n        end\n        result\
    \ = result + q[i]\n    end\n    if l % 2 == 1 then\n        result = result +\
    \ q[mid + 1]\n    end\n    return result <= w\nend", "  local sum = 0\n  for i\
    \ = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum > w then\n    return false\n\
    \  end\n  for i = 1, #q // 2 do\n    if q[i] ~= q[#q + 1 - i] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    -- todo\nend", "  local t =\
    \ 0\n  local l = #q\n  local r = {}\n  for k, v in ipairs(q) do\n    t = t + v\n\
    \    r[l - k + 1] = v\n  end\n  if t > w then\n    return false\n  end\n  for\
    \ k, v in ipairs(q) do\n    if v ~= r[k] then\n      return false\n    end\n \
    \ end\n  return true\nend", "  local tot = 0\n  for i = 1, #q do\n    tot = tot\
    \ + q[i]\n  end\n  local half = math.floor(#q / 2)\n  for i = 1, half do\n   \
    \ if q[i] ~= q[#q - i + 1] then\n      return false\n    end\n  end\n  return\
    \ tot <= w\nend", "  local sum = 0\n  for k, v in pairs(q) do\n    sum = sum +\
    \ v\n  end\n  if (sum <= w) and balanced(q) then\n    return true\n  else\n  \
    \  return false\n  end\nend", "  local sum = 0\n  for k, v in pairs(q) do\n  \
    \  sum = sum + v\n  end\n  return sum <= w and is_palindrome(q)\nend", "\tlocal\
    \ sum = 0\n\tfor i,v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\treturn sum <=\
    \ w and is_palindrome(q)\nend", "  if #q == 0 then return false end\n  local sum\
    \ = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\
    \ return false end\n  for i = 1, #q / 2 do\n    if q[i] ~= q[#q - i + 1] then\
    \ return false end\n  end\n  return true\nend", "    local weight = 0\n    for\
    \ i,v in ipairs(q) do\n        weight = weight + v\n    end\n    return (weight\
    \ <= w) and (q[1] == q[#q])\nend", "    -- Your code goes here\nend", "    --\
    \ Write your code here!\nend", "    -- your code here\nend", "\tlocal function\
    \ is_balanced(q)\n\t\tlocal lo, hi = 1, #q\n\t\twhile lo < hi do\n\t\t\tif q[lo]\
    \ ~= q[hi] then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlo = lo + 1\n\t\t\thi\
    \ = hi - 1\n\t\tend\n\t\treturn true\n\tend\n\tlocal sum = 0\n\tfor i = 1, #q\
    \ do\n\t\tsum = sum + q[i]\n\tend\n\treturn is_balanced(q) and sum <= w\nend",
  "    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n  \
    \  local reverse = {}\n    for i = #q, 1, -1 do\n        table.insert(reverse,\
    \ q[i])\n    end\n    local isEqual = true\n    for i = 1, #q do\n        if q[i]\
    \ ~= reverse[i] then\n            isEqual = false\n        end\n    end\n    if\
    \ sum <= w and isEqual then\n        return true\n    else\n        return false\n\
    \    end\nend", "    local weight = 0\n    for k, v in pairs(q) do\n        weight\
    \ = weight + v\n    end\n    if weight <= w then\n        return true\n    else\n\
    \        return false\n    end\nend", end, "  local f = 0\n  local b = 0\n  for\
    \ i = 1, #q do\n    f = f + q[i]\n    b = b + q[#q - i + 1]\n    if f > w or b\
    \ > w then\n      return false\n    end\n  end\n  return true\nend", "    local\
    \ sum = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum > w then\n        return false\n    end\n    local i = 1\n    local j =\
    \ #q\n    while i < j do\n        if q[i] ~= q[j] then\n            return false\n\
    \        end\n        i = i + 1\n        j = j - 1\n    end\n    return true\n\
    end", "\tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\
    \tif sum > w then\n\t\treturn false\n\tend\n\tlocal palindromic = true\n\tfor\
    \ i, v in ipairs(q) do\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\tpalindromic =\
    \ false\n\t\tend\n\tend\n\treturn palindromic\nend", "  local sum = 0\n  for k,\
    \ v in pairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n    return false\n\
    \  end\n  local is_palindrome = true\n  for i=1,#q/2 do\n    if q[i] ~= q[#q-i+1]\
    \ then\n      is_palindrome = false\n      break\n    end\n  end\n  return is_palindrome\n\
    end", "    local sum = 0\n    for k, v in pairs(q) do\n        sum = sum + v\n\
    \    end\n    if sum > w then\n        return false\n    end\n    if #q == 1 then\n\
    \        return true\n    end\n    local p = {}\n    for k, v in pairs(q) do\n\
    \        table.insert(p, v)\n    end\n    table.sort(p)\n    local j = 1\n   \
    \ for i = #p, 1, -1 do\n        if p[i] ~= q[j] then\n            return false\n\
    \        end\n        j = j + 1\n    end\n    return true\nend", "  local sum\
    \ = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n\
    \    return false\n  end\n  if sum <= w then\n    return true\n  end\nend", end,
  "  -- your code here\nend", "    local len = #q\n    local left = 0\n    local right\
    \ = len + 1\n    local sum = 0\n    for i = 1, len do\n        sum = sum + q[i]\n\
    \        if q[i] ~= q[len + 1 - i] then\n            return false\n        end\n\
    \    end\n    return sum <= w\nend", "    local q_sum = 0\n    for i = 1, #q do\n\
    \        q_sum = q_sum + q[i]\n    end\n    if q_sum > w then\n        return\
    \ false\n    end\n    local len = #q\n    for i = 1, len / 2 do\n        if q[i]\
    \ ~= q[len - i + 1] then\n            return false\n        end\n    end\n   \
    \ return true\nend", "\treturn false\nend", "  local sum = 0\n  for i, e in ipairs(q)\
    \ do\n    sum = sum + e\n  end\n  return sum <= w and is_palindrome(q)\nend",
  "\tlocal qs = sum(q)\n\treturn qs <= w and palindromic(q)\nend", "  if sum(q) >\
    \ w then\n    return false\n  end\n  for k,v in pairs(q) do\n    if v ~= q[#q-k+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "\treturn w >=\
    \ sum(q) and is_balanced(q)\nend", "\tlocal sum, palindromic = 0, true\n\tfor\
    \ i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\t\
    palindromic = false\n\t\tend\n\tend\n\treturn palindromic and sum <= w\nend",
  "  local sum = 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  return\
    \ is_palindrome(q) and sum <= w\nend", "  return true\nend", "  local sum = 0\n\
    \  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  local balanced = true\n  for\
    \ i = 1, #q // 2 do\n    if q[i] ~= q[#q - i + 1] then\n      balanced = false\n\
    \      break\n    end\n  end\n  return balanced and sum <= w\nend", "  local sum\
    \ = 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n\
    \    return false\n  end\n  local flag = true\n  for i,v in ipairs(q) do\n   \
    \ if v ~= q[#q - i + 1] then\n      flag = false\n      break\n    end\n  end\n\
    \  return flag\nend", "    --[[\n    local sum = 0\n    for _, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    local balanced = true\n    for i = 1,\
    \ #q do\n        if q[i] ~= q[#q - i + 1] then\n            balanced = false\n\
    \            break\n        end\n    end\n    if sum <= w and balanced then\n\
    \        return true\n    else\n        return false\n    end\n    --]]\n    return\
    \ sum(q) <= w and is_balanced(q)\nend", "    local sum = 0\n    for i = 1, #q\
    \ do\n        sum = sum + q[i]\n    end\n    if sum > w then\n        return false\n\
    \    end\n    for i = 1, #q do\n        if q[i] ~= q[#q + 1 - i] then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  local t,\
    \ w1 = 0, 0\n  for _, v in ipairs(q) do\n    t = t + v\n    w1 = math.max(w1,\
    \ v)\n  end\n  if t > w then\n    return false\n  end\n  if t % 2 == 1 then\n\
    \    return false\n  end\n  local a, b = 1, #q\n  while a < b do\n    if q[a]\
    \ ~= q[b] then\n      return false\n    end\n    a = a + 1\n    b = b - 1\n  end\n\
    \  return true\nend", "  local sum = 0\n  for _,x in ipairs(q) do\n    sum = sum\
    \ + x\n  end\n  local reversed = {}\n  for i=#q,1,-1 do\n    reversed[#reversed+1]\
    \ = q[i]\n  end\n  return sum <= w and is_palindrome(q, reversed)\nend", "   \
    \ -- Your code here\nend", "  local p = 0\n  for _, v in ipairs(q) do\n    p =\
    \ p + v\n  end\n  return p <= w and is_palindrome(q)\nend", "    local sum = 0\n\
    \    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    if sum > w\
    \ then\n        return false\n    end\n    for i = 1, #q / 2 do\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    local balanced = true\n    local len = #q\n    local i = 1\n\
    \    while i <= len / 2 do\n        if q[i] ~= q[len - i + 1] then\n         \
    \   balanced = false\n            break\n        end\n        i = i + 1\n    end\n\
    \    local sum = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n\
    \    return balanced and sum <= w\nend", "\tlocal sum = 0\n\tfor _, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\tend\n\treturn sum <= w and is_palindrome(q)\nend",
  "  -- write your code here\nend", "    local sum = 0\n    for i, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    if sum > w then\n        return false\n\
    \    end\n    local is_balanced = true\n    for i = 1, #q do\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            is_balanced = false\n            break\n\
    \        end\n    end\n    return is_balanced\nend", "  return (q == reverse(q))\
    \ and w >= foldl(op[\"+\"], 0, q)\nend", "  local cnt = #q\n  if cnt % 2 == 0\
    \ then\n    return false\n  end\n  local half = math.floor(cnt / 2)\n  local sum\
    \ = 0\n  for i = 1, half do\n    sum = sum + q[i]\n  end\n  sum = sum * 2\n  if\
    \ cnt % 2 == 1 then\n    sum = sum + q[cnt / 2 + 1]\n  end\n  return sum <= w\n\
    end", "  if #q > 1 then\n    if q[1] == q[#q] then\n      table.remove(q, #q)\n\
    \      table.remove(q, 1)\n      return will_it_fly(q, w)\n    else\n      return\
    \ false\n    end\n  else\n    return q[1] <= w\n  end\nend", "  local balanced\
    \ = true\n  local sum = 0\n  local max = q[1]\n  local min = q[1]\n  for i = 1,#q\
    \ do\n    if q[i] < min then\n      min = q[i]\n    end\n    if q[i] > max then\n\
    \      max = q[i]\n    end\n    sum = sum + q[i]\n  end\n  if min ~= max then\n\
    \    balanced = false\n  end\n  if sum > w then\n    return false\n  end\n  if\
    \ balanced == false then\n    return false\n  end\n  return true\nend", "   local\
    \ sum = 0\n   for _, v in ipairs(q) do\n      sum = sum + v\n   end\n   local\
    \ is_balanced = true\n   for i = 1, #q do\n      if q[i] ~= q[#q - i + 1] then\n\
    \         is_balanced = false\n         break\n      end\n   end\n   return is_balanced\
    \ and sum <= w\nend", "    return is_balanced(q) and sum(q) <= w\nend", "    local\
    \ sum = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    if\
    \ sum > w then\n        return false\n    end\n    local tbl = {}\n    for _,\
    \ v in ipairs(q) do\n        table.insert(tbl, v)\n    end\n    table.sort(tbl)\n\
    \    local flag = true\n    for i = 1, #tbl / 2 do\n        if tbl[i] ~= tbl[#tbl\
    \ - i + 1] then\n            flag = false\n            break\n        end\n  \
    \  end\n    return flag\nend", "  -- TODO: implement me!\nend", "\tlocal n = 1\n\
    \tlocal qn = #q\n\tlocal sum = 0\n\twhile n <= qn do\n\t\tsum = sum + q[n]\n\t\
    \tn = n + 1\n\tend\n\tn = 1\n\twhile n <= qn and q[n] == q[qn] do\n\t\tn = n +\
    \ 1\n\t\tqn = qn - 1\n\tend\n\treturn sum <= w and n > qn\nend", "    local q_sum\
    \ = 0\n    for i, v in ipairs(q) do\n        q_sum = q_sum + v\n    end\n    local\
    \ is_balanced = true\n    for i = 1, #q / 2 do\n        if q[i] ~= q[#q - i +\
    \ 1] then\n            is_balanced = false\n            break\n        end\n \
    \   end\n    return is_balanced and q_sum <= w\nend", "  local sum = 0\n  for\
    \ _, v in ipairs(q) do\n    sum = sum + v\n  end\n  return sum <= w and is_palindrome(q)\n\
    end", "  return w >= sum(q) and palindromic(q)\nend", "\t-- Code your solution\
    \ here.\n\tlocal res = true\n\tlocal sum = 0\n\tfor i, j in ipairs(q) do\n\t\t\
    sum = sum + j\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\tres = false\n\t\tend\n\
    \tend\n\tif sum > w then\n\t\tres = false\n\tend\n\treturn res\nend", end, " \
    \   -- your code here\nend", "  if is_balanced(q) and q[1] ~= nil and w >= sum(q)\
    \ then\n    return true\n  else\n    return false\n  end\nend", end, "  local\
    \ sum = 0\n  for _, e in ipairs(q) do\n    sum = sum + e\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  for i, e in ipairs(q) do\n    if e ~= q[#q-i+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "    local sum\
    \ = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend", "  local sum = 0\n  for _, v in ipairs(q)\
    \ do\n    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n \
    \ for i, v in ipairs(q) do\n    if v ~= q[#q + 1 - i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "    if #q > 0 then\n        if is_balanced(q)\
    \ then\n            return get_total_weight(q) <= w\n        end\n    end\n  \
    \  return false\nend", "    -- Your code here\nend", "  local sum = 0\n  for i,\
    \ v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n    return false\n\
    \  end\n  local t_size = #q\n  for i = 1, t_size/2 do\n    if q[i] ~= q[t_size\
    \ - i + 1] then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ q_total = 0\n  for i = 1, #q do\n    q_total = q_total + q[i]\n  end\n  if q_total\
    \ > w then\n    return false\n  end\n  local q_reversed = table.reverse(q)\n \
    \ local is_balanced = true\n  for i = 1, #q do\n    if q[i] ~= q_reversed[i] then\n\
    \      is_balanced = false\n    end\n  end\n  return is_balanced\nend", "    return\
    \ w >= sum(q) and palindromic(q)\nend", "\t-- TODO: implement\nend", "\tlocal\
    \ s = 0\n\tfor i = 1, #q do\n\t\ts = s + q[i]\n\tend\n\tfor i = 1, #q do\n\t\t\
    if q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn s\
    \ <= w\nend", "  local first_half = {}\n  local second_half = {}\n  local middle\
    \ = 1\n  local sum = 0\n  if #q % 2 == 0 then\n    middle = #q / 2\n  else\n \
    \   middle = (#q + 1) / 2\n  end\n  for i = 1, middle - 1 do\n    table.insert(first_half,\
    \ q[i])\n  end\n  for i = #q, middle, -1 do\n    table.insert(second_half, q[i])\n\
    \  end\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w and first_half\
    \ == second_half then\n    return true\n  else\n    return false\n  end\nend",
  "    if #q == 0 then\n        return true\n    end\n    local m = #q\n    local\
    \ function aux(i, j)\n        if i > j then\n            return true\n       \
    \ end\n        if q[i] ~= q[j] then\n            return false\n        end\n \
    \       return aux(i + 1, j - 1)\n    end\n    local function sum(i, s)\n    \
    \    if i > m then\n            return s\n        end\n        return sum(i +\
    \ 1, s + q[i])\n    end\n    return aux(1, m) and sum(1, 0) <= w\nend", "   local\
    \ sum = 0\n   for i = 1, #q do\n      sum = sum + q[i]\n   end\n   if (sum > w)\
    \ then\n      return false\n   end\n   if (#q == 1) then\n      return true\n\
    \   end\n   if (#q % 2 == 0) then\n      for i = 1, #q / 2 do\n         if (q[i]\
    \ ~= q[#q - i + 1]) then\n            return false\n         end\n      end\n\
    \   else\n      for i = 1, math.floor(#q / 2) do\n         if (q[i] ~= q[#q -\
    \ i + 1]) then\n            return false\n         end\n      end\n   end\n  \
    \ return true\nend", "    -- insert your code here\n    local sum = 0\n    local\
    \ is_balanced = true\n    for i = 1, #q do\n        sum = sum + q[i]\n       \
    \ if q[i] ~= q[#q - i + 1] then\n            is_balanced = false\n        end\n\
    \    end\n    return sum <= w and is_balanced\nend", "  local r = table.reverse(q)\n\
    \  for k, v in pairs(q) do\n    if not r[k] or r[k] ~= v then\n      return false\n\
    \    end\n  end\n  local c = 0\n  for _, v in pairs(q) do\n    c = c + v\n  end\n\
    \  return c <= w\nend", "  if #q < 2 then return true end\n  local sum = 0\n \
    \ for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then return\
    \ false end\n  for i = 1, #q / 2 do\n    if q[i] ~= q[#q - i + 1] then return\
    \ false end\n  end\n  return true\nend", "  local sum = 0\n  for k, v in pairs(q)\
    \ do\n    sum = sum + v\n  end\n  if sum > w then\n    return false\n  end\n \
    \ local i, j = 1, #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return\
    \ false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "\t\
    -- TODO: implement this function\nend", "\tlocal sum = 0\n\tfor _, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\tend\n\tif sum > w then\n\t\treturn false\n\tend\n\t\
    for i = 1, #q / 2 do\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn true\nend", "    local sum = 0\n    for _, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    if sum > w then\n        return false\n\
    \    end\n    for i = 1, #q do\n        if q[i] ~= q[#q - i + 1] then\n      \
    \      return false\n        end\n    end\n    return true\nend", "  local is_balanced\
    \ = true\n  local sum = 0\n  for i = 1, math.floor(#q / 2) do\n    if q[i] ~=\
    \ q[#q - i + 1] then\n      is_balanced = false\n      break\n    end\n    sum\
    \ = sum + q[i]\n  end\n  if #q % 2 == 1 then\n    sum = sum + q[math.floor(#q\
    \ / 2) + 1]\n  end\n  return is_balanced and sum <= w\nend", "    local balanced\
    \ = true\n    local sum = 0\n    local i = 1\n    local j = #q\n    while i <=\
    \ j do\n        if q[i] ~= q[j] then\n            balanced = false\n         \
    \   break\n        end\n        sum = sum + q[i]\n        i = i + 1\n        j\
    \ = j - 1\n    end\n    return balanced and sum <= w\nend", "    local sum = 0\n\
    \    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    if sum > w\
    \ then\n        return false\n    end\n    for i = 1, #q / 2 do\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  local sum = 0\n  for k, v in pairs(q) do\n    sum = sum + v\n\
    \  end\n  if sum > w then\n    return false\n  end\n  local n = #q\n  for i =\
    \ 1, math.floor(n / 2) do\n    if q[i] ~= q[n - i + 1] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  if sum(q) <= w and is_pali(q) then\n\
    \    return true\n  else\n    return false\n  end\nend", "\t-- it's not balanced.\n\
    \tif not is_palindrome(q) then\n\t\treturn false\n\tend\n\tlocal t = 0\n\tfor\
    \ i = 1, #q do\n\t\tt = t + q[i]\n\tend\n\treturn t <= w\nend", "    local sum\
    \ = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend", "  -- your code here\nend", "  if not q\
    \ or #q == 0 then return false end\n  local sum = 0\n  for i,v in ipairs(q) do\n\
    \    sum = sum + v\n  end\n  return sum <= w and is_balanced(q)\nend", "\tlocal\
    \ sum = 0\n\tfor k, v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\treturn sum <=\
    \ w and is_palindromic(q)\nend", "  local sum = 0\n  for i, _ in ipairs(q) do\n\
    \    sum = sum + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  local\
    \ t\n  for i, v in ipairs(q) do\n    if t == nil then\n      t = v\n    else\n\
    \      if t ~= v then\n        return false\n      end\n    end\n  end\n  return\
    \ true\nend", "  local sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n\
    \  end\n  return sum <= w and is_palindrome(q)\nend", "    local sum = 0\n   \
    \ for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\n \
    \       return false\n    end\n    for i = 1, #q / 2 do\n        if q[i] ~= q[#q\
    \ - i + 1] then\n            return false\n        end\n    end\n    return true\n\
    end", "  local sum = 0\n  for k, v in pairs(q) do\n    sum = sum + v\n  end\n\
    \  return #q % 2 == 0 and sum <= w\nend", end, "    return false\nend", "  local\
    \ is_balanced = true\n  local sum = 0\n  for i, v in ipairs(q) do\n    if q[i]\
    \ ~= q[#q-i+1] then\n      is_balanced = false\n    end\n    sum = sum + v\n \
    \ end\n  return is_balanced and sum <= w\nend", "  -- your code here\nend", " \
    \   if sum_table(q) > w then\n        return false\n    end\n    if is_palindrome(q)\
    \ then\n        return true\n    end\n    return false\nend", "    if #q > w then\n\
    \        return false\n    end\n    if #q == 1 then\n        return true\n   \
    \ end\n    local list = {}\n    for _, v in ipairs(q) do\n        list[#list +\
    \ 1] = v\n    end\n    local middle = math.floor(#list / 2)\n    local right =\
    \ middle\n    local left = #list - right\n    local function is_palindromic(left,\
    \ right)\n        if left > right then\n            return true\n        end\n\
    \        if list[left] ~= list[right] then\n            return false\n       \
    \ end\n        return is_palindromic(left + 1, right - 1)\n    end\n    if is_palindromic(1,\
    \ #list) then\n        local sum = 0\n        for _, v in ipairs(list) do\n  \
    \          sum = sum + v\n        end\n        if sum <= w then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    if not is_balanced(q)\
    \ then\n        return false\n    end\n    local sum = 0\n    for _, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    return sum <= w\nend", "   local sum\
    \ = 0\n   for i, v in ipairs(q) do\n      sum = sum + v\n   end\n   if sum > w\
    \ then\n      return false\n   end\n   local function is_palindrome(array)\n \
    \     local n = #array\n      for i = 1, n do\n         if array[i] ~= array[n\
    \ - i + 1] then\n            return false\n         end\n      end\n      return\
    \ true\n   end\n   return is_palindrome(q)\nend", "    local sum = 0\n    for\
    \ _,v in ipairs(q) do\n        sum = sum + v\n    end\n    if sum > w then\n \
    \       return false\n    end\n    local t = #q\n    for i = 1, t do\n       \
    \ if q[i] ~= q[t - i + 1] then\n            return false\n        end\n    end\n\
    \    return true\nend", "    local sum = 0\n    for _, i in ipairs(q) do\n   \
    \     sum = sum + i\n    end\n    local bal, max = is_balanced(q)\n    return\
    \ sum <= w and bal\nend", "  local sum = 0\n  for i = 1, #q do\n    sum = sum\
    \ + q[i]\n  end\n  if sum > w then\n    return false\n  end\n  for i = 1, #q /\
    \ 2 do\n    if q[i] ~= q[#q - i + 1] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local sum = 0\n  for i, v in ipairs(q) do\n    sum =\
    \ sum + v\n  end\n  if sum > w then\n    return false\n  end\n  for i = 1, #q/2\
    \ do\n    if q[i] ~= q[#q-i+1] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "    local fly = false\n    if #q > 1 then\n        local sum =\
    \ 0\n        for i = 1, #q do\n            sum = sum + q[i]\n        end\n   \
    \     if sum <= w then\n            local half = #q / 2\n            if #q % 2\
    \ == 0 then\n                local left = true\n                for i = 1, half\
    \ do\n                    if q[i] ~= q[#q - i + 1] then\n                    \
    \    left = false\n                        break\n                    end\n  \
    \              end\n                if left then\n                    fly = true\n\
    \                end\n            else\n                local left = true\n  \
    \              for i = 1, half do\n                    if q[i] ~= q[#q - i + 1]\
    \ then\n                        left = false\n                        break\n\
    \                    end\n                end\n                if left then\n\
    \                    fly = true\n                end\n            end\n      \
    \  end\n    else\n        if q[1] <= w then\n            fly = true\n        end\n\
    \    end\n    return fly\nend", "  local s, l = 0, #q\n  if l == 0 then return\
    \ true end\n  for i = 1, l do\n    s = s + q[i]\n    if q[i] > q[l - i + 1] then\
    \ return false end\n  end\n  return s <= w\nend", "  local sum = 0\n  for _,x\
    \ in ipairs(q) do\n    sum = sum + x\n  end\n  local balanced = true\n  for i\
    \ = 1, math.floor(#q/2) do\n    if q[i] ~= q[#q - i + 1] then\n      balanced\
    \ = false\n      break\n    end\n  end\n  return balanced and sum <= w\nend",
  "    local sum = 0\n    for k, v in pairs(q) do\n        sum = sum + v\n    end\n\
    \    if sum > w then\n        return false\n    end\n    local mirror = {}\n \
    \   for k, v in pairs(q) do\n        mirror[#q + 1 - k] = v\n    end\n    return\
    \ table.eq(q, mirror)\nend", "  local max_sum = 0\n  for _, v in ipairs(q) do\n\
    \    max_sum = max_sum + v\n  end\n  if max_sum > w then\n    return false\n \
    \ end\n  for i = 1, #q // 2 do\n    if q[i] ~= q[#q + 1 - i] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  -- Your code here\nend", "  \
    \ local sum, half = 0, #q / 2\n   for i = 1, half do\n      sum = sum + q[i] +\
    \ q[#q - i + 1]\n   end\n   return sum <= w and sum == q[half + 1] * 2 or false\n\
    end", "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if\
    \ sum > w then\n    return false\n  end\n  local len = #q\n  for i = 1, len /\
    \ 2 do\n    if q[i] ~= q[len - i + 1] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local sum = 0\n  for i,v in ipairs(q) do\n    sum = sum\
    \ + v\n  end\n  if sum > w then\n    return false\n  end\n  local i = 1\n  local\
    \ j = #q\n  while i < j do\n    if q[i] ~= q[j] then\n      return false\n   \
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local sum\
    \ = 0\n  for i, v in ipairs(q) do\n    sum = sum + v\n  end\n  return is_palindrome(q)\
    \ and sum <= w\nend", "    local sum = 0\n    for i,v in ipairs(q) do\n      \
    \  sum = sum + v\n    end\n    if sum > w then\n        return false\n    end\n\
    \    for i=1,#q do\n        if q[i] ~= q[#q-i+1] then\n            return false\n\
    \        end\n    end\n    return true\nend", "    return is_balanced(q) and (\
    \ table.reduce(q, 0, add) <= w )\nend", "  local sum = 0\n  for _, v in ipairs(q)\
    \ do\n    sum = sum + v\n  end\n  if (sum > w) then\n    return false\n  end\n\
    \  for i = 1, #q // 2 do\n    if (q[i] ~= q[#q - i + 1]) then\n      return false\n\
    \    end\n  end\n  return true\nend", "    local sum = 0\n    for _, v in ipairs(q)\
    \ do\n        sum = sum + v\n    end\n    if sum > w then\n        return false\n\
    \    end\n    for i = 1, #q do\n        if q[i] ~= q[#q - i + 1] then\n      \
    \      return false\n        end\n    end\n    return true\nend", "    if sum(q)\
    \ > w then\n        return false\n    end\n    return is_palindrome(q)\nend",
  "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  local q2 = {}\n  for i = 1, #q do\n    q2[i]\
    \ = q[#q - i + 1]\n  end\n  for i = 1, #q do\n    if q[i] ~= q2[i] then\n    \
    \  return false\n    end\n  end\n  return true\nend", "    local sum = 0\n   \
    \ for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\n \
    \       return false\n    end\n    local i, j = 1, #q\n    while i < j do\n  \
    \      if q[i] ~= q[j] then\n            return false\n        end\n        i\
    \ = i + 1\n        j = j - 1\n    end\n    return true\nend", "    local sum =\
    \ 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    if sum\
    \ > w then\n        return false\n    end\n    for i = 1, #q do\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            return false\n        end\n    end\n    return\
    \ true\nend", "  if type(q) ~= \"table\" or type(w) ~= \"number\" then\n    return\
    \ false\n  end\n  local palindromic = true\n  local sum = 0\n  for i = 1, #q do\n\
    \    if q[i] ~= q[#q - i + 1] then\n      palindromic = false\n    end\n    sum\
    \ = sum + q[i]\n  end\n  return palindromic and sum <= w\nend", "  local sum =\
    \ 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  if is_palindrome(q)\
    \ and sum <= w then\n    return true\n  else\n    return false\n  end\nend", " \
    \   --Your code here\nend", "  local sum = 0\n  for i, v in ipairs(q) do\n   \
    \ sum = sum + v\n  end\n  local palindromic = true\n  for i = 1, #q / 2 do\n \
    \   if q[i] ~= q[#q - i + 1] then\n      palindromic = false\n      break\n  \
    \  end\n  end\n  return palindromic and sum <= w\nend", "    local sum = 0\n \
    \   for i,v in ipairs(q) do\n        sum = sum + v\n    end\n    if sum <= w then\n\
    \        return true\n    else\n        return false\n    end\nend", "   local\
    \ sum = 0\n   for i = 1, #q do\n      sum = sum + q[i]\n   end\n   if sum > w\
    \ then\n      return false\n   end\n   for i = 1, #q / 2 do\n      if q[i] ~=\
    \ q[#q + 1 - i] then\n         return false\n      end\n   end\n   return true\n\
    end", "\treturn\n\t\t(sum(q) <= w) and\n\t\tis_palindrome(q)\nend", "    if #q\
    \ == 0 then\n        return false\n    end\n    local flag = false\n    local\
    \ flag1 = false\n    for i = 1, #q do\n        if q[i] == q[#q - i + 1] then\n\
    \            flag = true\n        else\n            flag = false\n           \
    \ break\n        end\n    end\n    if flag then\n        local sum = 0\n     \
    \   for i = 1, #q do\n            sum = sum + q[i]\n        end\n        if sum\
    \ <= w then\n            flag1 = true\n        end\n    end\n    return flag1\n\
    end", "  local function is_balanced(t)\n    for i = 1, #t do\n      if t[i] ~=\
    \ t[#t-i+1] then\n        return false\n      end\n    end\n    return true\n\
    \  end", "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n \
    \ if sum > w then\n    return false\n  end\n  local is_palindrome = true\n  for\
    \ i = 1, #q do\n    local j = #q + 1 - i\n    if q[i] ~= q[j] then\n      is_palindrome\
    \ = false\n      break\n    end\n  end\n  return is_palindrome\nend", "  if sum(q)\
    \ > w then\n    return false\n  end\n  local i = 1\n  local j = #q\n  while i\
    \ < j do\n    if q[i] ~= q[j] then\n      return false\n    end\n    i = i + 1\n\
    \    j = j - 1\n  end\n  return true\nend", "  -- Your code here.\nend", "  local\
    \ sum = 0\n  for k, v in pairs(q) do\n    sum = sum + v\n  end\n  return is_palindrome(q)\
    \ and sum <= w\nend", "  -- YOUR CODE HERE\nend", "  local sum = 0\n  for _, v\
    \ in ipairs(q) do\n    sum = sum + v\n  end\n  return sum <= w and is_palindrome(q)\n\
    end", "    local sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n\
    \    end\n    if sum > w then\n        return false\n    end\n    for i = 1, #q\
    \ do\n        if q[i] ~= q[#q - i + 1] then\n            return false\n      \
    \  end\n    end\n    return true\nend", "  if type(q) ~= \"table\" or type(w)\
    \ ~= \"number\" then return false end\n  local sum = 0\n  for _, n in ipairs(q)\
    \ do\n    if type(n) ~= \"number\" then return false end\n    sum = sum + n\n\
    \  end\n  local check = function(t)\n    for i = 1, math.floor(#t / 2) do\n  \
    \    if t[i] ~= t[#t - i + 1] then return false end\n    end\n    return true\n\
    \  end\n  return sum <= w and check(q)\nend", "  local sum = 0\n  for k, v in\
    \ pairs(q) do\n    sum = sum + v\n  end\n  if not is_palindrome(q) or sum > w\
    \ then\n    return false\n  else\n    return true\n  end\nend", "    -- (possible)\
    \ improvement: less string concatenation, more table access\n    local newTable\
    \ = {}\n    for i,v in ipairs(q) do\n        table.insert(newTable, v)\n    end\n\
    \    local isPalindrome = true\n    local sum = 0\n    for i,v in ipairs(newTable)\
    \ do\n        sum = sum + v\n        if q[i] ~= q[#q - i + 1] then\n         \
    \   isPalindrome = false\n        end\n    end\n    return isPalindrome and sum\
    \ <= w\nend", "    if w < 0 then\n        return false\n    end\n    local s =\
    \ 0\n    for i, v in ipairs(q) do\n        s = s + v\n    end\n    if s > w then\n\
    \        return false\n    end\n    local i = 1\n    local j = #q\n    while i\
    \ < j do\n        if q[i] ~= q[j] then\n            return false\n        end\n\
    \        i = i + 1\n        j = j - 1\n    end\n    return true\nend", "    local\
    \ items_total = 0\n    local qlen = #q\n    for i = 1, qlen do\n        items_total\
    \ = items_total + q[i]\n    end\n    local balanced = true\n    for i = 1, qlen/2\
    \ do\n        if q[i] ~= q[qlen-i+1] then\n            balanced = false\n    \
    \        break\n        end\n    end\n    if balanced and items_total <= w then\n\
    \        return true\n    else\n        return false\n    end\nend", "    local\
    \ sum = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    local\
    \ reverse = {}\n    for i = #q, 1, -1 do\n        table.insert(reverse, q[i])\n\
    \    end\n    return sum <= w and equal(q, reverse)\nend", "    local sum = 0\n\
    \    for _,v in ipairs(q) do\n        sum = sum + v\n    end\n    if sum > w then\n\
    \        return false\n    end\n    local i, j = 1, #q\n    while i < j do\n \
    \       if q[i] ~= q[j] then\n            return false\n        end\n        i\
    \ = i + 1\n        j = j - 1\n    end\n    return true\nend", "    local sum =\
    \ 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\n\
    \        return false\n    end\n    local i, j = 1, #q\n    while i < j do\n \
    \       if q[i] ~= q[j] then\n            return false\n        end\n        i\
    \ = i + 1\n        j = j - 1\n    end\n    return true\nend", "  local is_balanced\
    \ = true\n  local sum = 0\n  for k, v in pairs(q) do\n    is_balanced = is_balanced\
    \ and q[k] == q[#q - k + 1]\n    sum = sum + v\n  end\n  return is_balanced and\
    \ sum <= w\nend", "  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \  end\n  if sum > w then\n    return false\n  end\n  local last = #q\n  for i\
    \ = 1, math.floor(#q / 2) do\n    if q[i] ~= q[last] then\n      return false\n\
    \    end\n    last = last - 1\n  end\n  return true\nend", "  -- write your code\
    \ here\nend", "  local sum = 0\n  for k, v in pairs(q) do\n    sum = sum + v\n\
    \  end\n  if sum > w then\n    return false\n  end\n  for i = 1, #q do\n    if\
    \ q[i] ~= q[#q - i + 1] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local sum = 0\n  for k, v in pairs(q) do\n    sum = sum + v\n  end\n\
    \  if sum > w then\n    return false\n  end\n  local len = #q\n  for i = 1, len\
    \ / 2 do\n    if q[i] ~= q[len + 1 - i] then\n      return false\n    end\n  end\n\
    \  return true\nend", end, "    -- max weight\n    local weight = 0\n    for i,\
    \ v in ipairs(q) do\n        weight = weight + v\n    end\n    if weight > w then\n\
    \        return false\n    end\n    -- palindromic table\n    local middle = math.floor(#q\
    \ / 2)\n    local left = middle\n    local right = middle\n    if #q % 2 == 0\
    \ then\n        right = right + 1\n    end\n    for i = 1, middle do\n       \
    \ if q[left] ~= q[right] then\n            return false\n        end\n       \
    \ left = left - 1\n        right = right + 1\n    end\n    return true\nend",
  "    local sum = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n\
    \    return sum <= w and is_palindrome(q)\nend", end, "  local sum = 0\n  for\
    \ _,v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n    return\
    \ false\n  end\n  local res = true\n  for i = 1, math.floor(#q/2) do\n    if q[i]\
    \ ~= q[#q-i+1] then\n      res = false\n      break\n    end\n  end\n  return\
    \ res\nend", "    local d = 0\n    local s = 0\n    for i,v in ipairs(q) do\n\
    \        d = d + 1\n        s = s + v\n    end\n    if s > w then\n        return\
    \ false\n    end\n    local i = 1\n    local j = d\n    while i < j do\n     \
    \   if q[i] ~= q[j] then\n            return false\n        end\n        i = i\
    \ + 1\n        j = j - 1\n    end\n    return true\nend", "  -- YOUR CODE HERE\n\
    end", "  local sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n\
    \  return is_palindrome(q) and sum <= w\nend", "  local is_balanced = true\n \
    \ local sum = 0\n  local max = 0\n  local min = math.huge\n  for i = 1, #q do\n\
    \    local n = q[i]\n    max = math.max(max, n)\n    min = math.min(min, n)\n\
    \    sum = sum + n\n    if not is_balanced then\n      break\n    end\n    local\
    \ a = math.ceil(i / 2)\n    local b = math.floor(i / 2)\n    for j = 1, a do\n\
    \      local k = i - j + 1\n      if q[j] ~= q[k] then\n        is_balanced =\
    \ false\n        break\n      end\n    end\n  end\n  return is_balanced and (sum\
    \ <= w) and (sum > (max + min))\nend", "    -- ...\nend", "    -- TODO: Write\
    \ your code here\n    local sum = 0\n    for i = 1, #q do\n        sum = sum +\
    \ q[i]\n    end\n    if sum > w then\n        return false\n    end\n    local\
    \ left = 1\n    local right = #q\n    while left < right do\n        if q[left]\
    \ ~= q[right] then\n            return false\n        end\n        left = left\
    \ + 1\n        right = right - 1\n    end\n    return true\nend", "    local sum\
    \ = 0\n    for _, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend", "  return (#q % 2 == 0) and (sum(q) <=\
    \ w)\nend", end, "  -- TODO\nend", "  return (w >= table.sum(q)) and table.is_palindrome(q)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
