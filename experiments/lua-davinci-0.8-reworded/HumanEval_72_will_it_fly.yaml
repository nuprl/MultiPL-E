name: HumanEval_72_will_it_fly
language: lua
prompt: "-- Write a function that returns true if the object q will fly, and false\
  \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
  \ and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
  \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2, 3},\
  \ 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
  \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than the\
  \ maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n-- true\n\
  -- # 3 is less than the maximum possible weight, and it's balanced.\nlocal function\
  \ will_it_fly(q, w)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
  \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
  \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
  \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n    lu.assertEquals(candidate({5},\
  \ 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n\
    \    end\n    if sum > w then\n        return false\n    end\n    for i = 1, #q\
    \ do\n        if q[i] ~= q[#q - i + 1] then\n            return false\n      \
    \  end\n    end\n    return true\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(q)\
    \ do\n\t\tsum = sum + v\n\tend\n\tif sum > w then\n\t\treturn false\n\tend\n\t\
    for i, v in ipairs(q) do\n\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "    local isPalindrome = true\n    local\
    \ sum = 0\n    for i = 1, #q do\n        if q[i] ~= q[#q - i + 1] then\n     \
    \       isPalindrome = false\n        end\n        sum = sum + q[i]\n    end\n\
    \    return isPalindrome and sum <= w\nend", "  -- Your code here\nend", "  --\
    \ BEGIN\n  local weight = 0\n  for i = 1, #q do\n    weight = weight + q[i]\n\
    \  end\n  return is_balanced(q) and weight <= w\n  -- END\nend", "    local sum\
    \ = 0\n    for i, v in ipairs(q) do\n        sum = sum + v\n    end\n    return\
    \ sum <= w and is_palindrome(q)\nend", "    -- write your code here\nend", " \
    \ return is_balanced(q) and sum(q) <= w\nend", "  local sum = 0\n  for i = 1,\
    \ #q do\n    sum = sum + q[i]\n  end\n  local flag = true\n  for i = 1, #q/2 do\n\
    \    if q[i] ~= q[#q - i + 1] then\n      flag = false\n      break\n    end\n\
    \  end\n  return sum <= w and flag\nend", "  return false\nend", "   -- Add code\
    \ here!\nend", "    if is_balanced(q) then\n        local sum = 0\n        for\
    \ _, v in ipairs(q) do\n            sum = sum + v\n        end\n        return\
    \ sum <= w\n    end\n    return false\nend", "    --TODO: your code here\nend",
  "\tlocal is_balanced = true\n\tfor i=1, #q do\n\t\tif q[i] ~= q[#q - i + 1] then\n\
    \t\t\tis_balanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\tlocal is_heavy = false\n\
    \tlocal sum = 0\n\tfor _,v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tis_heavy\
    \ = sum > w\n\treturn is_balanced and not is_heavy\nend\nassert(will_it_fly({1,\
    \ 2}, 5) == false)\nassert(will_it_fly({3, 2, 3}, 1) == false)\nassert(will_it_fly({3,\
    \ 2, 3}, 9) == true)\nassert(will_it_fly({3}, 5) == true)", "\t-- Implement your\
    \ solution here\n\treturn false\nend", "\tlocal function is_balanced(t)\n\t\t\
    local i = 1\n\t\tlocal j = #t\n\t\twhile i < j do\n\t\t\tif t[i] ~= t[j] then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\ti = i + 1\n\t\t\tj = j - 1\n\t\tend\n\t\
    \treturn true\n\tend\n\tlocal function sum(t)\n\t\tlocal s = 0\n\t\tfor i = 1,\
    \ #t do\n\t\t\ts = s + t[i]\n\t\tend\n\t\treturn s\n\tend\n\tif is_balanced(q)\
    \ and sum(q) <= w then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend",
  "  local s = 0\n  for _, v in ipairs(q) do\n    s = s + v\n  end\n  return s <=\
    \ w and true or false\nend", "  return false\nend", "  if w < table.sum(q) then\
    \ return false end\n  local p = deepcopy(q)\n  local len = #p\n  for i = 1, len\
    \ do\n    if p[i] ~= p[len - i + 1] then return false end\n  end\n  return true\n\
    end", "  if sum(q) > w then\n    return false\n  end\n  if is_balanced(q) then\n\
    \    return true\n  end\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
