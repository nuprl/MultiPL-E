name: HumanEval_39_prime_fib
language: lua
prompt: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
  -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
  \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n  \
  \  lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n   \
  \ lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n  \
  \  lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
  \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10), 433494437)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal a, b = 1, 1\n\tfor i = 1, n do\n\t\ta, b = b, a + b\n\t\twhile\
    \ (not isprime(b)) do\n\t\t\ta, b = b, a + b\n\t\tend\n\tend\n\treturn b\nend",
  "  local f, p = 0, 0\n  local i = 1\n  while p < n do\n    f = fib(i)\n    if is_prime(f)\
    \ then\n      p = p + 1\n    end\n    i = i + 1\n  end\n  return f\nend", "  local\
    \ x = 3\n  while n > 0 do\n    if is_prime(x) and is_fib(x) then\n      n = n\
    \ - 1\n    end\n    x = x + 1\n  end\n  return x - 1\nend", "    local a, b =\
    \ 2, 3\n    local i = 1\n    while i < n do\n        a, b = b, a + b\n       \
    \ if is_prime(b) then\n            i = i + 1\n        end\n    end\n    return\
    \ a\nend", "\tlocal index = 1\n\tlocal a, b = 2, 3\n\twhile index < n do\n\t\t\
    index = index + 1\n\t\ta, b = b, a + b\n\t\twhile not is_prime(b) do\n\t\t\ta,\
    \ b = b, a + b\n\t\tend\n\tend\n\treturn b\nend", "    local c = 0\n    local\
    \ a, b = 1, 1\n    while c < n do\n        local t = a + b\n        a, b = b,\
    \ t\n        if prime(t) then\n            c = c + 1\n        end\n    end\n \
    \   return b\nend", "    local i = 0\n    local fib = fibonacci(100000)\n    for\
    \ k, v in pairs(fib) do\n        if is_prime(v) then\n            i = i + 1\n\
    \            if i == n then\n                return v\n            end\n     \
    \   end\n    end\nend", "  local x = 2\n  local p = 1\n  local f = 1\n  local\
    \ current = 0\n  while current < n do\n    if is_prime(x) then\n      current\
    \ = current + 1\n      p = x\n    end\n    f = fib(x)\n    if f > p then\n   \
    \   current = current + 1\n      f = p\n    end\n    x = x + 1\n  end\n  return\
    \ f\nend", "\tlocal first, second = 1, 2\n\tlocal i = 0\n\twhile i ~= n do\n\t\
    \tlocal third = first + second\n\t\tfirst, second = second, third\n\t\tif is_prime(second)\
    \ then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn second\nend", "  local num =\
    \ 2\n  local count = 0\n  while true do\n    if is_prime(num) and is_fib(num)\
    \ then\n      count = count + 1\n      if count == n then\n        return num\n\
    \      end\n    end\n    num = num + 1\n  end\nend", "\tlocal fib_num = fib(n)\n\
    \tlocal primes_count = 0\n\tlocal current_fib_num = 0\n\twhile primes_count <\
    \ n do\n\t\tif is_prime(fib_num) then\n\t\t\tprimes_count = primes_count + 1\n\
    \t\t\tcurrent_fib_num = fib_num\n\t\tend\n\t\tfib_num = fib_num + 1\n\tend\n\t\
    return current_fib_num\nend", "    local i = 0\n    local j = 1\n    local k =\
    \ 0\n    local s = 2\n    while s ~= n do\n        i, j = j, i + j\n        if\
    \ i > j then\n            k = i\n        else\n            k = j\n        end\n\
    \        if is_prime(k) then\n            s = s + 1\n        end\n    end\n  \
    \  return k\nend", "  local v = 2;\n  local i = 1;\n  local w = 0;\n  local x\
    \ = 0;\n  local y = 0;\n  local z = 0;\n  local q = 0;\n  local r = 0;\n  local\
    \ s = 0;\n  local t = 0;\n  while (i < n) do\n    while (v < v + 1) do\n     \
    \ while (w < v) do\n        while (x < v) do\n          while (y < v) do\n   \
    \         while (z < v) do\n              q = w + x;\n              r = y + z;\n\
    \              s = q + r;\n              t = s + 1;\n              if (((q % 2)\
    \ ~= 0) and ((r % 2) ~= 0) and ((s % 2) ~= 0) and ((t % 2) ~= 0)) then\n     \
    \           if (prime(s)) then\n                  i = i + 1;\n               \
    \   v = s;\n                end\n              end\n              z = z + 1;\n\
    \            end\n            y = y + 1;\n          end\n          x = x + 1;\n\
    \        end\n        w = w + 1;\n      end\n      v = v + 1;\n    end\n  end\n\
    \  return v;\nend", "    local i = 1\n    while n > 0 do\n        i = i + 1\n\
    \        if is_prime(fib(i)) then\n            n = n - 1\n        end\n    end\n\
    \    return fib(i)\nend", "\tlocal m = 1\n\twhile true do\n\t\tlocal fib = fibonacci(m)\n\
    \t\tif is_prime(fib) then\n\t\t\tn = n - 1\n\t\t\tif n == 0 then\n\t\t\t\treturn\
    \ fib\n\t\t\tend\n\t\tend\n\t\tm = m + 1\n\tend\nend", "  local i = 0\n  local\
    \ f = 0\n  local x = 0\n  local y = 0\n  for n in fibonacci do\n    if is_prime(n)\
    \ then\n      i = i + 1\n      if i == n then\n        f = n\n        break\n\
    \      end\n    end\n  end\n  return f\nend", "  local f = 1\n  local f_prev =\
    \ 1\n  local i = 2\n  while i <= n do\n    local f_next = f + f_prev\n    f_prev\
    \ = f\n    f = f_next\n    if is_prime(f) then\n      i = i + 1\n    end\n  end\n\
    \  return f\nend", "\tlocal x = 2\n\tlocal i = 1\n\twhile i < n do\n\t\tx = x\
    \ + 1\n\t\tif is_prime(x) and is_fib(x) then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\
    \treturn x\nend", "    local i = 1\n    local j = 1\n    local k = 1\n    while\
    \ k < n do\n        i, j = j, i + j\n        if is_prime(j) then\n           \
    \ k = k + 1\n        end\n    end\n    return j\nend", "\tlocal i = 1\n\twhile\
    \ n > 0 do\n\t\tlocal x = fib(i)\n\t\tif x > INT_MAX then\n\t\t\terror(\"int overflow\"\
    )\n\t\tend\n\t\tif is_prime(x) then\n\t\t\tn = n - 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn fib(i - 1)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
