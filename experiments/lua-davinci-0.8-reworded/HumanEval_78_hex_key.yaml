name: HumanEval_78_hex_key
language: lua
prompt: "-- You have been tasked to write a function that receives \n-- a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n-- digits that are primes\
  \ (prime number, or a prime, is a natural number \n-- greater than 1 that is not\
  \ a product of two smaller natural numbers).\n-- Hexadecimal digits are 0, 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n-- Prime numbers are 2, 3, 5, 7, 11, 13,\
  \ 17,...\n-- So you have to determine a number of the following digits: 2, 3, 5,\
  \ 7, \n-- B (=decimal 11), D (=decimal 13).\n-- Note: you may assume the input is\
  \ always correct or empty string, \n-- and symbols A,B,C,D,E,F are always uppercase.\n\
  -- Examples:\n-- >>> hex_key('AB')\n-- 1\n-- >>> hex_key('1077E')\n-- 2\n-- >>>\
  \ hex_key('ABED1A33')\n-- 4\n-- >>> hex_key('123456789ABCDEF0')\n-- 6\n-- >>> hex_key('2020')\n\
  -- 2\nlocal function hex_key(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = hex_key\n\
  \    lu.assertEquals(candidate('AB'), 1)\n    lu.assertEquals(candidate('1077E'),\
  \ 2)\n    lu.assertEquals(candidate('ABED1A33'), 4)\n    lu.assertEquals(candidate('2020'),\
  \ 2)\n    lu.assertEquals(candidate('123456789ABCDEF0'), 6)\n    lu.assertEquals(candidate('112233445566778899AABBCCDDEEFF00'),\
  \ 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local cnt, dict = 0, {}\n  for i=string.byte('0'),string.byte('9')\
    \ do dict[string.char(i)] = 1 end\n  for i=string.byte('A'),string.byte('F') do\
    \ dict[string.char(i)] = 2 end\n  for i=1,#num do\n    if dict[string.upper(num:sub(i,i))]==2\
    \ then cnt = cnt + 1 end\n  end\n  return cnt\nend", "  local hex_key_table =\
    \ {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n  local decimal_table\
    \ = {[0]=0,[1]=1,[2]=2,[3]=3,[4]=4,[5]=5,[6]=6,[7]=7,[8]=8,[9]=9,[10]=10,[11]=11,[12]=12,[13]=13,[14]=14,[15]=15}\n\
    \  local hex = {}\n  local decimal = {}\n  local primes = {}\n  local hex_key\
    \ = 0\n  local key = 0\n  local key_len = 0\n  local j = 1\n  local s = 1\n  local\
    \ temp = ''\n  local prime = ''\n  local len = string.len(num)\n  local t1 = table.pack(string.byte(num,1,len))\n\
    \  for i=1,#t1 do\n    hex[i] = string.char(t1[i])\n  end\n  for i=1,#hex do\n\
    \    for j=1,#hex_key_table do\n      if hex[i] == hex_key_table[j] then\n   \
    \     decimal[i] = decimal_table[j]\n      end\n    end\n  end\n  for i=1,#decimal\
    \ do\n    if decimal[i] == 2 or decimal[i] == 3 or decimal[i] == 5 or decimal[i]\
    \ == 7 or decimal[i] == 11 or decimal[i] == 13 then\n      primes[i] = decimal[i]\n\
    \    end\n  end\n  for i=1,#primes do\n    if primes[i] ~= nil then\n      key\
    \ = key + 1\n    end\n  end\n  return key\nend", "\tlocal primes = { '2', '3',\
    \ '5', '7', 'B', 'D' }\n\tlocal count = 0\n\tfor i=1,#num do\n\t\tfor j=1,#primes\
    \ do\n\t\t\tif primes[j] == num:sub(i,i) then\n\t\t\t\tcount = count + 1\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn count\nend", "    local primes = \"2357BDF\"\n\
    \    local sum = 0\n    for ch in num:gmatch(\".\") do\n        for n in primes:gmatch(\"\
    .\") do\n            if ch == n then\n                sum = sum + 1\n        \
    \    end\n        end\n    end\n    return sum\nend", "\tlocal primes = \"2357BDE\"\
    \n\tlocal temp, i, result = 0, 1, 0\n\tif #num == 0 then\n\t\treturn 0\n\tend\n\
    \twhile i <= #num do\n\t\tfor j = 1, #primes do\n\t\t\tif num:sub(i, i) == primes:sub(j,\
    \ j) then\n\t\t\t\tresult = result + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn result\nend", "    return string.gsub(num, '[237BD]', '')\nend",
  "  -- your solution goes here\nend", "    local primes = {'2', '3', '5', '7', 'B',\
    \ 'D'}\n    local total = 0\n    for i=1,#num do\n        for j=1,#primes do\n\
    \            if num:sub(i,i) == primes[j] then\n                total = total\
    \ + 1\n            end\n        end\n    end\n    return total\nend", "  -- body\n\
    end", "  -- your code here\n  local t={0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \  local n=0\n  local d=string.byte(num,1,#num)\n  local function prime(k)\n \
    \   for i=2,k-1 do\n      if k%i==0 then return false end\n    end\n    return\
    \ true\n  end\n  for i=1,#num do\n    n=n+prime(t[d[i]+1])\n  end\n  return n\n\
    end", "  local dict = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for\
    \ char in num:gmatch'.' do\n    for i, v in ipairs(dict) do\n      if char ==\
    \ v then count = count + 1 end\n    end\n  end\n  return count\nend", "    local\
    \ res = 0\n    for i = 1, string.len(num) do\n        local c = string.sub(num,\
    \ i, i)\n        if c == '2' or c == '3' or c == '5' or c == '7'\n           \
    \ or c == 'B' or c == 'D' then\n            res = res + 1\n        end\n    end\n\
    \    return res\nend", "  local primes = {2, 3, 5, 7, 11, 13}\n  local key = 0\n\
    \  for digit in num:gmatch('.') do\n    for _, prime in ipairs(primes) do\n  \
    \    if digit == tostring(prime) or digit == tonumber(prime, 16) then\n      \
    \  key = key + 1\n      end\n    end\n  end\n  return key\nend", "  local hexprime\
    \ = {'2','3','5','7','B','D'}\n  local count = 0\n  for i = 1, #num do\n    for\
    \ j = 1, #hexprime do\n      if num:sub(i,i) == hexprime[j] then\n        count\
    \ = count + 1\n      end\n    end\n  end\n  return count\nend", "  return 0\n\
    end", "  local t = {A=10, B=11, C=12, D=13, E=14, F=15}\n  local res = 0\n  for\
    \ i = 1, #num do\n    local s = string.byte(num, i)\n    if s >= 65 then s = t[string.char(s)]\
    \ end\n    if s == 2 or s == 3 or s == 5 or s == 7 or s == 11 or s == 13 then\n\
    \      res = res + 1\n    end\n  end\n  return res\nend", "    local map = {\n\
    \        ['2'] = true,\n        ['3'] = true,\n        ['5'] = true,\n       \
    \ ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n    }\n    local\
    \ count = 0\n    for v in num:gmatch('.') do\n        if map[v] then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend", "  local\
    \ keys = {'2', '3', '5', '7', 'B', 'D'}\n  local n = 0\n  for i = 1, #num do\n\
    \    for j = 1, #keys do\n      if num:sub(i, i) == keys[j] then\n        n =\
    \ n + 1\n      end\n    end\n  end\n  return n\nend", "    local chars = {A =\
    \ 10, B = 11, C = 12, D = 13, E = 14, F = 15}\n    local count = 0\n    for char\
    \ in num:gmatch('.') do\n        if chars[char] then\n            char = chars[char]\n\
    \        end\n        if math.isprime(tonumber(char)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend", "  local string =\
    \ string.gsub(num, 'A', '10')\n  string = string.gsub(string, 'B', '11')\n  string\
    \ = string.gsub(string, 'C', '12')\n  string = string.gsub(string, 'D', '13')\n\
    \  string = string.gsub(string, 'E', '14')\n  string = string.gsub(string, 'F',\
    \ '15')\n  local count = 0\n  local primes = {2, 3, 5, 7, 11, 13}\n  for i=1,#string\
    \ do\n    for j=1,#primes do\n      if tonumber(string:sub(i,i)) == primes[j]\
    \ then\n        count = count + 1\n      end\n    end\n  end\n  return count\n\
    end", "  if type(num) ~= 'string' then return 0 end\n  if num == '' then return\
    \ 0 end\n  local primes = {2, 3, 5, 7, 11, 13}\n  local hexa = {0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n  local counter = 0\n  for digit in\
    \ num:gmatch('%w') do\n    for _, value in ipairs(hexa) do\n      if value ==\
    \ tonumber(digit, 16) or value == digit then\n        for _, prime in ipairs(primes)\
    \ do\n          if value == prime then\n            counter = counter + 1\n  \
    \        end\n        end\n      end\n    end\n  end\n  return counter\nend",
  "    local count = 0\n    local t = {'2', '3', '5', '7', 'B', 'D'}\n    for i=1,#num\
    \ do\n        for j=1,#t do\n            if num:sub(i,i) == t[j] then\n      \
    \          count = count + 1\n            end\n        end\n    end\n    return\
    \ count\nend", "    local res = 0\n    for hex in num:gmatch(\".\") do\n     \
    \   if hex == '2' or hex == '3' or hex == '5' or hex == '7' or hex == 'B' or hex\
    \ == 'D' then\n            res = res + 1\n        end\n    end\n    return res\n\
    end", "    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local primes_table\
    \ = {}\n    for _, v in ipairs(primes) do\n        primes_table[v] = true\n  \
    \  end\n    local count = 0\n    for i = 1, #num do\n        if primes_table[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  if num == '' then return 0 end\n  local primes = {'2', '3', '5', '7',\
    \ 'B', 'D'}\n  local count = 0\n  for i = 1, #num do\n    for j = 1, #primes do\n\
    \      if num:sub(i, i) == primes[j] then\n        count = count + 1\n      end\n\
    \    end\n  end\n  return count\nend", "  \nend", "    local n = 0\n    for c\
    \ in num:gmatch(\".\") do\n        if c == '2' or c == '3' or c == '5' or c ==\
    \ '7' or c == 'B' or c == 'D' then\n            n = n + 1\n        end\n    end\n\
    \    return n\nend", "\tlocal counter = 0\n\tfor i = 1, #num do\n\t\tlocal digit\
    \ = num:sub(i, i)\n\t\tfor _, prime in ipairs({'2', '3', '5', '7', 'B', 'D'})\
    \ do\n\t\t\tif digit == prime then\n\t\t\t\tcounter = counter + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn counter\nend", "  if not num then return 0 end\n  local\
    \ p = {'2','3','5','7','B','D'}\n  local i, c = 0, 0\n  for i=1,#num do\n    if\
    \ table.contains(p, num:sub(i,i)) then c = c + 1 end\n  end\n  return c\nend",
  "  return string.gsub(num, \"[^0-7BD]\", \"\")\nend\nprint(hex_key('123456789ABCDEF0'))",
  "    num = num:upper()\n    local hex_digits = {'0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local primes = {2, 3, 5, 7,\
    \ 11, 13}\n    local primes_hex = {}\n    for i, val in ipairs(primes) do\n  \
    \      primes_hex[i] = hex_digits[val]\n    end\n    local result = 0\n    for\
    \ i = 1, num:len() do\n        for j, val in ipairs(primes_hex) do\n         \
    \   if val == num:sub(i, i) then\n                result = result + 1\n      \
    \      end\n        end\n    end\n    return result\nend", "    local function\
    \ is_prime(n)\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local primes = {2, 3, 5, 7, 11, 13}\n    local count = 0\n    for\
    \ c in num:gmatch(\".\") do\n        for _, n in ipairs(primes) do\n         \
    \   if tonumber(c, 16) == n then\n                count = count + 1\n        \
    \    end\n        end\n    end\n    return count\nend", "  local hex_primes =\
    \ {'2', '3', '5', '7', 'B', 'D'}\n  local number_hex_primes = 0\n  for i=1, #num\
    \ do\n    for j=1, #hex_primes do\n      if string.sub(num, i, i) == hex_primes[j]\
    \ then\n        number_hex_primes = number_hex_primes + 1\n      end\n    end\n\
    \  end\n  return number_hex_primes\nend", "    if #num == 0 then return 0 end\n\
    \    local primes = {2, 3, 5, 7, 11, 13}\n    local t = {}\n    for s in num:gmatch('.')\
    \ do\n        table.insert(t, tonumber(s, 16))\n    end\n    local sum = 0\n \
    \   for _, n in ipairs(t) do\n        for _, p in ipairs(primes) do\n        \
    \    if n == p then\n                sum = sum + 1\n                break\n  \
    \          end\n        end\n    end\n    return sum\nend", "    local primes\
    \ = {2, 3, 5, 7, 11, 13}\n    local key = 0\n    for c in num:gmatch('%w') do\n\
    \        local ch = tonumber(c, 16)\n        for _, v in ipairs(primes) do\n \
    \           if ch == v then\n                key = key + 1\n                break\n\
    \            end\n        end\n    end\n    return key\nend", "  return string.gsub(num,\
    \ \"[^2357BD]\", \"\")\nend", "  assert(type(num) == 'string', 'bad argument #1\
    \ to \\'' .. debug.getinfo(1).name .. '\\' (string expected, got ' .. type(num)\
    \ .. ')')\n  local answer = 0\n  for i = 1, #num do\n    if num:sub(i, i) == '2'\
    \ or num:sub(i, i) == '3' or num:sub(i, i) == '5' or num:sub(i, i) == '7' or num:sub(i,\
    \ i) == 'B' or num:sub(i, i) == 'D' then\n      answer = answer + 1\n    end\n\
    \  end\n  return answer\nend", "    local tbl = {'A', 'B', 'D', '2', '3', '5',\
    \ '7'}\n    local s = 0\n    for i = 1, #num do\n        for j = 1, #tbl do\n\
    \            if num:sub(i, i) == tbl[j] then\n                s = s + 1\n    \
    \        end\n        end\n    end\n    return s\nend", "\tlocal primes = '2357BDF'\n\
    \tlocal count = 0\n\tfor i = 1, #num do\n\t\tfor j = 1, #primes do\n\t\t\tif num:sub(i,\
    \ i) == primes:sub(j, j) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count\nend", "  if num == \"\" then return 0 end\n  local digits\
    \ = {[\"0\"] = 0, [\"1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4, [\"5\"]\
    \ = 5, [\"6\"] = 6, [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9, [\"A\"] = 10, [\"B\"\
    ] = 11, [\"C\"] = 12, [\"D\"] = 13, [\"E\"] = 14, [\"F\"] = 15}\n  local r = 0\n\
    \  for i = 1, #num do\n    local n = digits[num:sub(i,i)]\n    local p = true\n\
    \    for j = 2, math.sqrt(n) do\n      if n % j == 0 then p = false end\n    end\n\
    \    if p and n > 1 then r = r + 1 end\n  end\n  return r\nend", "  local count\
    \ = 0\n  for i = 1,#num do\n    if num:sub(i,i) == '2' or num:sub(i,i) == '3'\
    \ or num:sub(i,i) == '5' or num:sub(i,i) == '7' or num:sub(i,i) == 'B' or num:sub(i,i)\
    \ == 'D' then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local primes = {\n        [0] = 0,\n        [1] = 0,\n        [2] = 1,\n  \
    \      [3] = 1,\n        [4] = 0,\n        [5] = 1,\n        [6] = 0,\n      \
    \  [7] = 1,\n        [8] = 0,\n        [9] = 0,\n        [10] = 0,\n        [11]\
    \ = 1,\n        [12] = 0,\n        [13] = 1,\n        [14] = 0,\n        [15]\
    \ = 0,\n    }\n    local sum = 0\n    for i = 1, string.len(num) do\n        local\
    \ hex = string.sub(num, i, i)\n        local d = tonumber(hex, 16)\n        if\
    \ primes[d] == 1 then\n            sum = sum + 1\n        end\n    end\n    return\
    \ sum\nend", "    -- count the number of hexadecimal digits that are primes\n\
    \    if num == '' then\n        return 0\n    end\n    local sum = 0\n    local\
    \ num_table = {}\n    num_table['2'] = 1\n    num_table['3'] = 1\n    num_table['5']\
    \ = 1\n    num_table['7'] = 1\n    num_table['B'] = 1\n    num_table['D'] = 1\n\
    \    for i = 1, #num do\n        if num_table[string.sub(num, i, i)] == 1 then\n\
    \            sum = sum + 1\n        end\n    end\n    return sum\nend\nprint(hex_key('AB'))\n\
    print(hex_key('1077E'))\nprint(hex_key('ABED1A33'))\nprint(hex_key('123456789ABCDEF0'))\n\
    print(hex_key('2020'))", "  -- body\nend", "    local hex_numbers = {\n      \
    \  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'\n    }\n    local primes = {\n        2, 3, 5, 7, 11, 13\n    }\n    local\
    \ count = 0\n    for i=1,#num do\n        local current_number = string.sub(num,\
    \ i, i)\n        for j=1,#hex_numbers do\n            if current_number == hex_numbers[j]\
    \ then\n                for k=1,#primes do\n                    if j == primes[k]\
    \ then\n                        count = count + 1\n                    end\n \
    \               end\n            end\n        end\n    end\n    return count\n\
    end", "    -- your code here\n    local sum = 0\n    local prime = {2,3,5,7,11,13}\n\
    \    local hex = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"\
    ,\"A\",\"B\",\"C\",\"D\",\"E\",\"F\"}\n    for k,v in pairs(hex) do\n        for\
    \ i,j in pairs(prime) do\n            if v == tostring(j) then\n             \
    \   sum = sum + string.gsub(num,v,v)\n            end\n        end\n    end\n\
    \    return sum\nend", "  return select(2, num:gsub('[0-7BD]', ''))\nend", " \
    \   local function is_prime(num)\n        if num < 2 then\n            return\
    \ false\n        end\n        for i = 2, num - 1 do\n            if num % i ==\
    \ 0 then\n                return false\n            end\n        end\n       \
    \ return true\n    end\n    local hex_primes = {11, 13}\n    local count = 0\n\
    \    local digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\
    \ 'C', 'D', 'E', 'F'}\n    for i = 1, #num do\n        local digit = tonumber(num:sub(i,\
    \ i), 16)\n        if is_prime(digit) then\n            count = count + 1\n  \
    \      end\n    end\n    return count\nend", "    local l={}\n    for i=1, 16\
    \ do l[string.format(\"%X\", i)]=true end\n    l['2'], l['3'], l['5'], l['7'],\
    \ l['B'], l['D']= false, false, false, false, false, false\n    local s=0\n  \
    \  for i=1, #num do if l[num:sub(i,i)] then s=s+1 end end\n    return s\nend",
  "    local sum = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n  \
    \      if c == '2' or c == '3' or c == '5' or c == '7' or c == 'B' or c == 'D'\
    \ then\n            sum = sum + 1\n        end\n    end\n    return sum\nend",
  "  local primes = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for i=1,\
    \ #num do\n    for j=1, #primes do\n      if num:sub(i,i) == primes[j] then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \  local primes = {2, 3, 5, 7, 11, 13}\n   local digits = 0\n   for digit in num:gmatch(\"\
    %w\") do\n      local d = tonumber(digit, 16)\n      if d == nil then\n      \
    \   local index = string.find(\"ABCDEF\", digit)\n         d = primes[index]\n\
    \      end\n      if d < 10 then\n         if primes[d] then\n            digits\
    \ = digits + 1\n         end\n      else\n         digits = digits + 1\n     \
    \ end\n   end\n   return digits\nend", "  local primes = {\n    ['2'] = true,\n\
    \    ['3'] = true,\n    ['5'] = true,\n    ['7'] = true,\n    ['B'] = true,\n\
    \    ['D'] = true\n  }\n  local key = 0\n  for i=1,#num do\n    if primes[num:sub(i,i)]\
    \ then\n      key = key + 1\n    end\n  end\n  return key\nend", "  local A, B,\
    \ C, D, E, F = 11, 12, 13, 14, 15, 16\n  local nums = {\n    [\"0\"] = 0, [\"\
    1\"] = 1, [\"2\"] = 2, [\"3\"] = 3, [\"4\"] = 4,\n    [\"5\"] = 5, [\"6\"] = 6,\
    \ [\"7\"] = 7, [\"8\"] = 8, [\"9\"] = 9,\n    [\"A\"] = A, [\"B\"] = B, [\"C\"\
    ] = C, [\"D\"] = D, [\"E\"] = E, [\"F\"] = F\n  }\n  local prime_list = {2, 3,\
    \ 5, 7, 11, 13}\n  local primes = 0\n  for i = 1, #num do\n    local v = nums[num:sub(i,\
    \ i)]\n    for _, n in ipairs(prime_list) do\n      if v == n then\n        primes\
    \ = primes + 1\n      end\n    end\n  end\n  return primes\nend", "  -- TODO:\
    \ your code here\nend", "    local cnt = 0\n    local t = {A=10, B=11, C=12, D=13,\
    \ E=14, F=15}\n    local primes = {2, 3, 5, 7, 11, 13}\n    for i=1, #num do\n\
    \        local d = string.sub(num, i, i)\n        if t[d] then\n            d\
    \ = t[d]\n        else\n            d = tonumber(d)\n        end\n        for\
    \ j=1, #primes do\n            if d == primes[j] then\n                cnt = cnt\
    \ + 1\n                break\n            end\n        end\n    end\n    return\
    \ cnt\nend", "  if not num or num == '' then return 0 end\n  local t = {A=10,\
    \ B=11, C=12, D=13, E=14, F=15}\n  local primes = {2, 3, 5, 7, 11, 13}\n  local\
    \ count = 0\n  for d in num:gmatch('.') do\n    local digit = tonumber(d) or t[d]\n\
    \    if digit and primes[digit] then count = count + 1 end\n  end\n  return count\n\
    end", "  local nums = { ['A'] = 11, ['B'] = 13, ['C'] = 17, ['D'] = 19, ['E']\
    \ = 23, ['F'] = 29 }\n  local sum = 0\n  for i = 1, #num do\n    local x = tonumber(num:sub(i,\
    \ i)) or nums[num:sub(i, i)]\n    if x and x % 2 ~= 0 and x % 3 ~= 0 and x % 5\
    \ ~= 0 and x % 7 ~= 0 then\n      sum = sum + 1\n    end\n  end\n  return sum\n\
    end", "  return count(num:gmatch('[2357BD]'))\nend", "  -- your code here\nend",
  "  local hex_primes = {'2', '3', '5', '7', 'B', 'D'}\n  local key = 0\n  for i =\
    \ 1, string.len(num) do\n    for j = 1, #hex_primes do\n      if num:sub(i, i)\
    \ == hex_primes[j] then\n        key = key + 1\n      end\n    end\n  end\n  return\
    \ key\nend", "    return num:gsub('[^2357BD]', ''):len()\nend", "  local primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for _,c in pairs(num:upper():gmatch(\"\
    %w\")) do\n    if table.contains(primes, c) then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend", "  local nums = {A=10, B=11, C=12, D=13,\
    \ E=14, F=15}\n  local res = 0\n  for dig in num:gmatch(\"%x\") do\n    local\
    \ n = tonumber(dig) or nums[dig]\n    if n and n % 2 ~= 0 and n % 3 ~= 0 and n\
    \ % 5 ~= 0 and n % 7 ~= 0 then\n      res = res + 1\n    end\n  end\n  return\
    \ res\nend", "  local d2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15}\n  local hex_digits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15}\n  local hex_primes = {2, 3, 5, 7, 11, 13}\n  local count = 0\n  for i =\
    \ 1, #num do\n    for j = 1, #hex_digits do\n      if num:sub(i, i) == hex_digits[j]\
    \ then\n        if hex_digits[j] == 10 or hex_digits[j] == 11 or hex_digits[j]\
    \ == 13 then\n          count = count + 1\n        end\n      end\n    end\n \
    \ end\n  return count\nend", "    local hex = string.upper(num)\n    local res\
    \ = 0\n    for i = 1, string.len(hex) do\n        if string.find('2357BD', string.sub(hex,\
    \ i, i)) then\n            res = res + 1\n        end\n    end\n    return res\n\
    end", "\tlocal sum = 0\n\tfor i = 1, string.len(num) do\n\t\tif string.sub(num,\
    \ i, i) == '2' or string.sub(num, i, i) == '3' or string.sub(num, i, i) == '5'\
    \ or string.sub(num, i, i) == '7' or string.sub(num, i, i) == 'B' or string.sub(num,\
    \ i, i) == 'D' then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend",
  "    local r = 0\n    for i = 1, #num do\n        local c = num:sub(i, i)\n    \
    \    if r + 1 >= i then\n            if c == '2' or c == '3' or c == '5' or c\
    \ == '7' or c == 'B' or c == 'D' then\n                r = r + 1\n           \
    \ end\n        end\n    end\n    return r\nend", "    if #num == 0 then return\
    \ 0 end\n    local function is_prime(n)\n        if n < 2 then return false end\n\
    \        for i = 2, n - 1 do\n            if n % i == 0 then return false end\n\
    \        end\n        return true\n    end\n    local function to_dec(h)\n   \
    \     if h >= '0' and h <= '9' then return h - '0' end\n        if h >= 'A' and\
    \ h <= 'F' then return h - 'A' + 10 end\n    end\n    local function is_valid(h)\n\
    \        return is_prime(to_dec(h))\n    end\n    local digits = num:gmatch('.')\n\
    \    local count = 0\n    for digit in digits do\n        if is_valid(digit) then\
    \ count = count + 1 end\n    end\n    return count\nend", "    local hex_dict\
    \ = {\n        [2] = true,\n        [3] = true,\n        [5] = true,\n       \
    \ [7] = true,\n        ['B'] = true,\n        ['D'] = true,\n    }\n    local\
    \ rst = 0\n    for i = 1, string.len(num) do\n        if hex_dict[string.sub(num,\
    \ i, i)] then\n            rst = rst + 1\n        end\n    end\n    return rst\n\
    end", "    local count = 0\n    for i=1,#num do\n        for j=1,#primes do\n\
    \            if num:sub(i,i) == primes[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "    return\
    \ string.gsub(num, \"[^2357BD]\", \"\")\nend", "  local dict = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n  local count = 0\n  for _,i in ipairs(dict) do\n    count =\
    \ count + string.gsub(num, i, '')\n  end\n  return #num - count\nend", "   local\
    \ function replace(input)\n      local r = input:gsub('A', '10')\n      r = r:gsub('B',\
    \ '11')\n      r = r:gsub('C', '12')\n      r = r:gsub('D', '13')\n      r = r:gsub('E',\
    \ '14')\n      r = r:gsub('F', '15')\n      return r\n   end\n   local function\
    \ is_prime(n)\n      if n % 2 == 0 then\n         return false\n      end\n  \
    \    for i = 3, math.sqrt(n), 2 do\n         if n % i == 0 then\n            return\
    \ false\n         end\n      end\n      return true\n   end\n   local function\
    \ hex2int(num)\n      local s = 0\n      for i = 1, #num do\n         s = s +\
    \ tonumber(num:sub(i, i)) * 16 ^ (#num - i)\n      end\n      return s\n   end\n\
    \   local function count_primes(num)\n      local n = replace(num)\n      local\
    \ c = 0\n      for i = 1, #n do\n         if is_prime(tonumber(n:sub(i, i))) then\n\
    \            c = c + 1\n         end\n      end\n      return c\n   end\n   return\
    \ count_primes(num)\nend", "  local hex_nums = {A = 10, B = 11, C = 12, D = 13,\
    \ E = 14, F = 15}\n  local sum = 0\n  for i = 1, #num do\n    local n = tonumber(num:sub(i,\
    \ i)) or hex_nums[num:sub(i, i)]\n    if n == 2 or n == 3 or n == 5 or n == 7\
    \ or n == 11 or n == 13 then\n      sum = sum + 1\n    end\n  end\n  return sum\n\
    end", "    local primes = { [2] = 2, [3] = 3, [5] = 5, [7] = 7, ['B'] = 11, ['D']\
    \ = 13 }\n    local num_of_primes = 0\n    for digit in num:gmatch('.') do\n \
    \       if primes[digit] then\n            num_of_primes = num_of_primes + 1\n\
    \        end\n    end\n    return num_of_primes\nend", "    local map = {['2']\
    \ = 1, ['3'] = 1, ['5'] = 1, ['7'] = 1, ['B'] = 1, ['D'] = 1}\n    local count\
    \ = 0\n    for i = 1, string.len(num) do\n        if map[string.sub(num, i, i)]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local alf = '0123456789ABCDEF'\n  local sum = 0\n  for i = 1, #num do\n\
    \    if alf:find(num:sub(i,i)) % 2 == 1 then\n      sum = sum + 1\n    end\n \
    \ end\n  return sum\nend", "  local count = 0\n  for i = 1, #num do\n    local\
    \ ch = num:sub(i, i)\n    if ch == '2' or ch == '3' or ch == '5' or ch == '7'\
    \ or ch == 'B' or ch == 'D' then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend", "  if num == '' then return 0 end\n  local cnt = 0\n  local primes\
    \ = {2, 3, 5, 7, 11, 13}\n  for i=1,#num do\n    local c = num:sub(i,i)\n    if\
    \ table.contains(primes, tonumber(c, 16)) then\n      cnt = cnt + 1\n    end\n\
    \  end\n  return cnt\nend", "    local primes = {2, 3, 5, 7, 11, 13}\n    local\
    \ ans = 0\n    for ch in num:gmatch(\".\") do\n        local dec = tonumber(ch,\
    \ 16)\n        for _, prime in ipairs(primes) do\n            if dec == prime\
    \ then\n                ans = ans + 1\n                break\n            end\n\
    \        end\n    end\n    return ans\nend", "  local h = {\n    ['2'] = true,\
    \ ['3'] = true, ['5'] = true, ['7'] = true,\n    ['B'] = true, ['D'] = true\n\
    \  }\n  local c = 0\n  for i = 1, #num do\n    if h[num:sub(i, i)] then c = c\
    \ + 1 end\n  end\n  return c\nend", "  return string.gsub(num:upper(), \"[^2357BD]\"\
    , \"\"):len()\nend", "  local primes = {\n    ['2'] = true,\n    ['3'] = true,\n\
    \    ['5'] = true,\n    ['7'] = true,\n    ['B'] = true,\n    ['D'] = true\n \
    \ }\n  local count = 0\n  for char in num:gmatch('.') do\n    if primes[char]\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend", "\treturn\
    \ (num:gsub('[0-9]', ''):gsub('[^ABD]', ''):len())\nend", "\tlocal function f(s)\
    \ return \"0123456789ABCDEF\":find(s, 1, true) end\n\tlocal function g(s)\n\t\t\
    if s == 'A' or s == 'B' or s == 'D' then\n\t\t\treturn true\n\t\telseif f(s) <=\
    \ 9 then\n\t\t\treturn false\n\t\telse\n\t\t\treturn f(s) % 2 == 1\n\t\tend\n\t\
    end\n\treturn num:gsub(\".\", function(s)\n\t\treturn (g(s) and '1' or '0')\n\t\
    end):gsub(\"0+$\", \"\"):len()\nend", "  -- your code here\n  print(num)\n  local\
    \ hexa = {\n    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C',\
    \ 'D', 'E', 'F'\n  }\n  local ret = {}\n  for i = 1, #num do\n    for j = 1, #hexa\
    \ do\n      if num:sub(i, i) == hexa[j] then\n        ret[#ret + 1] = j\n    \
    \  end\n    end\n  end\n  local count = 0\n  for i = 1, #ret do\n    if ret[i]\
    \ == 2 or ret[i] == 3 or ret[i] == 5 or ret[i] == 7 or ret[i] == 11 or ret[i]\
    \ == 13 then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \   local primes = {2, 3, 5, 7, 11, 13}\n    local result = 0\n    for c in num:gmatch('.')\
    \ do\n        for _, n in ipairs(primes) do\n            if n == tonumber(c, 16)\
    \ then\n                result = result + 1\n            end\n        end\n  \
    \  end\n    return result\nend", "    local prime_hex_digits = {2, 3, 5, 7, 11,\
    \ 13}\n    local sum = 0\n    for hex_digit in num:gmatch(\"%X\") do\n       \
    \ local hex_digit_number = tonumber(hex_digit, 16)\n        if table.index_of(prime_hex_digits,\
    \ hex_digit_number) ~= nil then\n            sum = sum + 1\n        end\n    end\n\
    \    return sum\nend", "  local res = 0\n  for i = 1, #num do\n    local n = string.sub(num,\
    \ i, i)\n    if n == '2' or n == '3' or n == '5' or n == '7' or n == 'B' or n\
    \ == 'D' then\n      res = res + 1\n    end\n  end\n  return res\nend", "  local\
    \ total = 0\n  for i = 1, #num do\n    if num:sub(i, i) == '2' or\n       num:sub(i,\
    \ i) == '3' or\n       num:sub(i, i) == '5' or\n       num:sub(i, i) == '7' or\n\
    \       num:sub(i, i) == 'B' or\n       num:sub(i, i) == 'D' then\n      total\
    \ = total + 1\n    end\n  end\n  return total\nend", "    if num == '' then\n\
    \        return 0\n    end\n    local t = {A = 10, B = 11, C = 12, D = 13, E =\
    \ 14, F = 15}\n    local sum = 0\n    for i = 1, #num do\n        local ch = num:sub(i,\
    \ i)\n        if t[ch] then\n            ch = t[ch]\n        end\n        ch =\
    \ tonumber(ch)\n        if (ch == 2 or ch == 3 or ch == 5 or ch == 7 or ch ==\
    \ 11 or ch == 13) then\n            sum = sum + 1\n        end\n    end\n    return\
    \ sum\nend", "\tif string.find(num, \"^$\") then return 0 end\n\tlocal count =\
    \ 0\n\tfor v in string.gmatch(num, \"[0-9A-F]\") do\n\t\tif is_prime(get_hex_value(v))\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend", "  local\
    \ primes = {[0] = true, [1] = true, [2] = true, [3] = true, [5] = true, [7] =\
    \ true, [11] = true, [13] = true}\n  local result = 0\n  for i = 1, #num do\n\
    \    local current = tonumber(num:sub(i, i), 16)\n    if primes[current] then\n\
    \      result = result + 1\n    end\n  end\n  return result\nend", "  local hexes\
    \ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n  local primes = {2,\
    \ 3, 5, 7, 11, 13}\n  local count = 0\n  for i = 1, #num do\n    for j = 1, #hexes\
    \ do\n      if string.sub(num, i, i) == tostring(hexes[j]) then\n        for k\
    \ = 1, #primes do\n          if hexes[j] == primes[k] then\n            count\
    \ = count + 1\n          end\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  local str2 = '\\x02\\x03\\x05\\x07\\x0B\\x0D'\n  local str16\
    \ = '\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0A\\x0B\\x0C\\x0D\\\
    x0E\\x0F'\n  local res = 0\n  local i = 0\n  while i < #num do\n    local b =\
    \ num:byte(i)\n    if str16:find(b, 1, true) then\n      local c = str2:find(b,\
    \ 1, true)\n      if c then\n        res = res + 1\n      end\n    end\n    i\
    \ = i + 1\n  end\n  return res\nend", "    local primes = {'2', '3', '5', '7',\
    \ 'B', 'D'}\n    local nums = {}\n    for i = 1, #num do\n        nums[i] = num:sub(i,\
    \ i)\n    end\n    local count = 0\n    for i = 1, #nums do\n        for j = 1,\
    \ #primes do\n            if nums[i] == primes[j] then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "  local sum = 0\n  for i = 1,#num do\n    if num:sub(i,i) == '2' or num:sub(i,i)\
    \ == '3' or num:sub(i,i) == '5' or num:sub(i,i) == '7' or num:sub(i,i) == 'B'\
    \ or num:sub(i,i) == 'D' then\n      sum = sum + 1\n    end\n  end\n  return sum\n\
    end", "  local function isPrime(num)\n    if (num == 2) then return true end\n\
    \    if (num % 2 == 0) then return false end\n    for i = 3, math.sqrt(num), 2\
    \ do\n      if (num % i == 0) then return false end\n    end\n    return true\n\
    \  end\n  local function fromHex(num)\n    if (num >= 48 and num <= 57) then return\
    \ num - 48 end\n    if (num >= 65 and num <= 70) then return num - 55 end\n  end\n\
    \  local cnt = 0\n  for i = 1, #num do\n    if (isPrime(fromHex(string.byte(num,\
    \ i)))) then cnt = cnt + 1 end\n  end\n  return cnt\nend", "    -- body\n    local\
    \ h = {A=10,B=11,C=12,D=13,E=14,F=15}\n    local count = 0\n    for i = 1, #num\
    \ do\n        if h[num:sub(i,i)] then\n            if h[num:sub(i,i)] < 10 then\n\
    \                if h[num:sub(i,i)] == 2 or h[num:sub(i,i)] == 3 or h[num:sub(i,i)]\
    \ == 5 or h[num:sub(i,i)] == 7 then\n                    count = count + 1\n \
    \               end\n            else\n                if h[num:sub(i,i)] == 11\
    \ or h[num:sub(i,i)] == 13 then\n                    count = count + 1\n     \
    \           end\n            end\n        else\n            if num:sub(i,i) ==\
    \ '2' or num:sub(i,i) == '3' or num:sub(i,i) == '5' or num:sub(i,i) == '7' then\n\
    \                count = count + 1\n            end\n        end\n    end\n  \
    \  return count\nend", "  local hexPrimes = {'2', '3', '5', '7', 'B', 'D'}\n \
    \ local primes = 0\n  if #num == 0 then return 0 end\n  for i = 1, #num do\n \
    \   for j = 1, #hexPrimes do\n      if num:sub(i, i) == hexPrimes[j] then\n  \
    \      primes = primes + 1\n      end\n    end\n  end\n  return primes\nend",
  "\tlocal count = 0\n\tlocal primes = {'2', '3', '5', '7', 'B', 'D'}\n\tfor i = 1,\
    \ #num do\n\t\tif table.contains(primes, num:sub(i, i)) then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend", "    local primes = {'2', '3', '5',\
    \ '7', 'B', 'D'}\n    local count = 0\n    for i=1, #num do\n        for j=1,\
    \ #primes do\n            if num:sub(i, i) == primes[j] then\n               \
    \ count = count + 1\n            end\n        end\n    end\n    return count\n\
    end", "    if num == '' then return 0 end\n    local hex = {A=10, B=11, C=12,\
    \ D=13, E=14, F=15}\n    num = num:upper()\n    local t = {}\n    for i = 1, #num\
    \ do\n        if hex[num:sub(i,i)] then\n            t[#t+1] = hex[num:sub(i,i)]\n\
    \        else\n            t[#t+1] = tonumber(num:sub(i,i))\n        end\n   \
    \ end\n    local cnt = 0\n    for _,v in ipairs(t) do\n        if v == 2 or v\
    \ == 3 or v == 5 or v == 7 or v == 11 or v == 13 then\n            cnt = cnt +\
    \ 1\n        end\n    end\n    return cnt\nend", "  if not num then return 0 end\n\
    \  local cnt = 0\n  for i = 1, #num do\n    local n = tonumber(num:sub(i, i),\
    \ 16)\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "\tlocal res = 0\n\t\
    for i=1,#num do\n\t\tlocal n = tonumber(num:sub(i,i), 16)\n\t\tif is_prime(n)\
    \ then\n\t\t\tres = res + 1\n\t\tend\n\tend\n\treturn res\nend", "    local primes\
    \ = {\n        0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0\n    }\n    local\
    \ result = 0\n    for i = 1, #num do\n        local d = tonumber(num:sub(i, i),\
    \ 16)\n        if primes[d] == 1 then\n            result = result + 1\n     \
    \   end\n    end\n    return result\nend", "  local hex_chars = { '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }\n  local primes\
    \ = { 2, 3, 5, 7, 11, 13 }\n  local prime_count = 0\n  for _, char in pairs(num:upper():gmatch('%w'))\
    \ do\n    if char == hex_chars[10] or char == hex_chars[11] or char == hex_chars[12]\
    \ or char == hex_chars[13] or char == hex_chars[14] or char == hex_chars[15] then\n\
    \      prime_count = prime_count + 1\n    end\n  end\n  return prime_count\nend",
  "  return (num:gsub('[^2357BD]', ''):len())\nend", "    local hex_num = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \    local cnt = 0\n    for i=1,#num do\n        for j=1,#hex_num do\n       \
    \     if string.sub(num,i,i) == hex_num[j] then\n                if j == 2 or\
    \ j == 3 or j == 5 or j == 7 or j == 11 or j == 13 then\n                    cnt\
    \ = cnt + 1\n                end\n            end\n        end\n    end\n    return\
    \ cnt\nend", "    local p = {'2', '3', '5', '7', 'B', 'D'}\n    local r = 0\n\
    \    for _, v in ipairs(p) do\n        if num:find(v) then\n            r = r\
    \ + 1\n        end\n    end\n    return r\nend", "  local primes = {2, 3, 5, 7,\
    \ 11, 13}\n  local hex_table = {'A', 'B', 'C', 'D', 'E', 'F'}\n  local ret = 0\n\
    \  for _, v in pairs(hex_table) do\n    for i = 0, 9 do\n      if v == num or\
    \ tostring(i) == num then\n        ret = ret + 1\n      end\n    end\n  end\n\
    \  return ret\nend", "  local primeNumbers = {'2', '3', '5', '7', 'B', 'D'}\n\
    \  local count = 0\n  for i = 1, #num do\n    if contains(primeNumbers, num:sub(i,\
    \ i)) then\n      count = count + 1\n    end\n  end\n  return count\nend", " \
    \ -- your code here\n  --Don't forget to return the result\n  local hk = 0\n \
    \ for i=1,#num do\n    local prime = tonumber(num:sub(i,i),16)\n    if prime ==\
    \ 2 or prime == 3 or prime == 5 or prime == 7 or prime == 11 or prime == 13 then\n\
    \      hk = hk + 1\n    end\n  end\n  return hk\nend", "  local count = 0\n  local\
    \ hex_primes = {\n    ['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true,\n\
    \    ['B'] = true, ['D'] = true\n  }\n  local primes = 0\n  local length = #num\n\
    \  for i = 1, length do\n    local curr = num:sub(i, i)\n    if hex_primes[curr]\
    \ then\n      primes = primes + 1\n    end\n  end\n  return primes\nend", "  \
    \  local function is_prime(num)\n        local function is_div(num, div)\n   \
    \         return num % div == 0\n        end\n        local function is_even(num)\n\
    \            return is_div(num, 2)\n        end\n        local function is_factor(num,\
    \ i)\n            return is_div(num, i) and not is_even(num)\n        end\n  \
    \      local function check_dividers(num, i)\n            if i < num then\n  \
    \              if is_factor(num, i) then\n                    return false\n \
    \               else\n                    return check_dividers(num, i + 1)\n\
    \                end\n            else\n                return true\n        \
    \    end\n        end\n        return check_dividers(num, 3)\n    end\n    local\
    \ function count_prime_hex_digits(num, key)\n        if num:len() == 0 then\n\
    \            return key\n        else\n            local digit = tonumber(num:sub(1,\
    \ 1), 16)\n            if is_prime(digit) then\n                return count_prime_hex_digits(num:sub(2),\
    \ key + 1)\n            else\n                return count_prime_hex_digits(num:sub(2),\
    \ key)\n            end\n        end\n    end\n    return count_prime_hex_digits(num,\
    \ 0)\nend", "\tlocal primes = { [11] = true, [13] = true, [2] = true, [3] = true,\
    \ [5] = true, [7] = true }\n\tlocal sum = 0\n\tfor i = 1, #num do\n\t\tlocal n\
    \ = tonumber(num:sub(i, i), 16)\n\t\tif primes[n] then\n\t\t\tsum = sum + 1\n\t\
    \tend\n\tend\n\treturn sum\nend", "\treturn select(2, num:gsub('[2357BD]', ''))\n\
    end", "    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local prime_count\
    \ = 0\n    for digit in num:gmatch('%w') do\n        for _, prime in ipairs(primes)\
    \ do\n            if digit == prime then\n                prime_count = prime_count\
    \ + 1\n            end\n        end\n    end\n    return prime_count\nend", " \
    \ if #num == 0 then return 0 end\n  local hex_to_dec = {\n    ['0'] = 0, ['1']\
    \ = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5, ['6'] = 6, ['7'] = 7,\n   \
    \ ['8'] = 8, ['9'] = 9, ['A'] = 10, ['B'] = 11, ['C'] = 12, ['D'] = 13, ['E']\
    \ = 14, ['F'] = 15\n  }\n  local dec_to_hex = {\n    [0] = '0', [1] = '1', [2]\
    \ = '2', [3] = '3', [4] = '4', [5] = '5', [6] = '6', [7] = '7',\n    [8] = '8',\
    \ [9] = '9', [10] = 'A', [11] = 'B', [12] = 'C', [13] = 'D', [14] = 'E', [15]\
    \ = 'F'\n  }\n  local function hex_to_dec(n)\n    local ret = 0\n    for i = 1,\
    \ #n do\n      ret = ret + hex_to_dec[n:sub(i, i)] * 16 ^ (#n - i)\n    end\n\
    \    return ret\n  end\n  local function dec_to_hex(n)\n    local ret = ''\n \
    \   while n > 0 do\n      local r = n % 16\n      ret = dec_to_hex[r] .. ret\n\
    \      n = (n - r) / 16\n    end\n    return ret\n  end\n  local function prime(n)\n\
    \    for i = 2, n ^ 0.5 do\n      if n % i == 0 then return false end\n    end\n\
    \    return true\n  end\n  local primes = {'2', '3', '5', '7', 'B', 'D'}\n  local\
    \ dec = hex_to_dec(num)\n  local ret = 0\n  while dec > 0 do\n    local r = dec\
    \ % 10\n    if primes[dec_to_hex(r)] then ret = ret + 1 end\n   ", "  local cnt\
    \ = 0\n  for digit in num:gmatch(\".\") do\n    if digit == '2' or digit == '3'\
    \ or digit == '5' or digit == '7' or digit == 'B' or digit == 'D' then\n     \
    \ cnt = cnt + 1\n    end\n  end\n  return cnt\nend", "    num = string.upper(num)\n\
    \    local primes = {['2'] = true, ['3'] = true, ['5'] = true, ['7'] = true, ['B']\
    \ = true, ['D'] = true}\n    local count = 0\n    for i = 1, string.len(num) do\n\
    \        if primes[string.sub(num, i, i)] then\n            count = count + 1\n\
    \        end\n    end\n    return count\nend", "    local prime_digits = {[2]\
    \ = true, [3] = true, [5] = true, [7] = true, [11] = true, [13] = true}\n    local\
    \ result = 0\n    for c in num:gmatch('.') do\n        if prime_digits[tonumber(c,\
    \ 16)] then\n            result = result + 1\n        end\n    end\n    return\
    \ result\nend", "    local primes = {2, 3, 5, 7, 11, 13}\n    local count = 0\n\
    \    for i = 1, #num do\n        local c = tonumber(num:sub(i, i), 16)\n     \
    \   if primes[c] then\n            count = count + 1\n        end\n    end\n \
    \   return count\nend", "    local nums = {}\n    local number = 0\n    for i\
    \ = 1, #num do\n        nums[i] = tonumber(num:sub(i, i), 16)\n    end\n    for\
    \ k, v in pairs(nums) do\n        if v == 2 or v == 3 or v == 5 or v == 7 or v\
    \ == 11 or v == 13 then\n            number = number + 1\n        end\n    end\n\
    \    return number\nend", "  local lut = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \  local res = 0\n  for i = 1,#num do\n    local c = num:sub(i,i)\n    if lut[c:byte()\
    \ - 55] then\n      res = res + 1\n    end\n  end\n  return res\nend", "  \n \
    \ local prime = {2, 3, 5, 7, 11, 13}\n  local hex = {'A', 'B', 'C', 'D', 'E',\
    \ 'F'}\n  local count = 0\n  \n  for i=1,#num do\n    if string.find(table.concat(prime,\
    \ ''), num:sub(i,i)) or\n       string.find(table.concat(hex, ''), num:sub(i,i))\
    \ then\n      count = count + 1\n    end\n  end\n  \n  return count\nend", " \
    \ local hex = {\n    [ '0' ] = 0, [ '1' ] = 1, [ '2' ] = 2, [ '3' ] = 3, [ '4'\
    \ ] = 4,\n    [ '5' ] = 5, [ '6' ] = 6, [ '7' ] = 7, [ '8' ] = 8, [ '9' ] = 9,\n\
    \    [ 'A' ] = 10, [ 'B' ] = 11, [ 'C' ] = 12, [ 'D' ] = 13, [ 'E' ] = 14,\n \
    \   [ 'F' ] = 15\n  }\n  local primes = { 2, 3, 5, 7, 11, 13 }\n  local sum =\
    \ 0\n  for c in num:gmatch('.') do\n    for i = 1, #primes do\n      if hex[c]\
    \ == primes[i] then\n        sum = sum + 1\n      end\n    end\n  end\n  return\
    \ sum\nend", "    -- body\n    local function isPrime(num)\n        if num < 2\
    \ then\n            return false\n        end\n        for i = 2, num - 1 do\n\
    \            if num % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local strtb = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local\
    \ numtb = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n    local primes\
    \ = {2, 3, 5, 7, 11, 13}\n    local map = {}\n    for i = 1, #strtb do\n     \
    \   map[strtb[i]] = numtb[i]\n    end\n    local hex = ''\n    for i = 1, #num\
    \ do\n        local s = num:sub(i, i)\n        local v = map[s]\n        if isPrime(v)\
    \ then\n            hex = hex .. s\n        end\n    end\n    return #hex\nend",
  "  local primes = '2357BD'\n  local count = 0\n  for i = 1, #num do\n    local c\
    \ = num:sub(i, i)\n    if primes:find(c) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "    local prime_hex_list = {'2', '3', '5', '7',\
    \ 'B', 'D'}\n    local count = 0\n    for x = 1, string.len(num) do\n        for\
    \ y = 1, #prime_hex_list do\n            if num:sub(x, x) == prime_hex_list[y]\
    \ then\n                count = count + 1\n            end\n        end\n    end\n\
    \    return count\nend", "  local count = 0\n  local num = string.upper(num)\n\
    \  local primes = {\n    [\"2\"] = true, [\"3\"] = true, [\"5\"] = true, [\"7\"\
    ] = true, \n    [\"B\"] = true, [\"D\"] = true\n  }\n  for i=1,#num do\n    if\
    \ primes[string.sub(num, i, i)] then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "\treturn len(num:gsub('[2357BD]', ''))\nend", "  local\
    \ number = 0\n  for i = 1, #num do\n    local n = string.sub(num, i, i)\n    if\
    \ n == '2' or n == '3' or n == '5' or n == '7' or n == 'B' or n == 'D' then\n\
    \      number = number + 1\n    end\n  end\n  return number\nend", "  local primes\
    \ = {2, 3, 5, 7, 11, 13}\n  local prime_hex = {\n    ['2'] = 1,\n    ['3'] = 1,\n\
    \    ['5'] = 1,\n    ['7'] = 1,\n    ['B'] = 1,\n    ['D'] = 1,\n  }\n  local\
    \ sum = 0\n  for i = 1, #num do\n    local char = num:sub(i, i)\n    if prime_hex[char]\
    \ then\n      sum = sum + 1\n    end\n  end\n  return sum\nend", "  \nend", " \
    \ local count = 0\n  local function f(num)\n    local hex_digits = {'2', '3',\
    \ '5', '7', 'B', 'D'}\n    for _, v in ipairs(hex_digits) do\n      if num ==\
    \ v then\n        count = count + 1\n      end\n    end\n  end\n  string.gsub(num,\
    \ '.', f)\n  return count\nend", "  local primes = {'2', '3', '5', '7', 'B', 'D'}\n\
    \  local counter = 0\n  for i=1, #num do\n    for j=1, #primes do\n      if num:sub(i,i)\
    \ == primes[j] then\n        counter = counter + 1\n      end\n    end\n  end\n\
    \  return counter\nend", "    local function is_prime(num)\n        if num ==\
    \ 1 then return false end\n        if num == 2 then return true end\n        for\
    \ i = 2, num / 2 do\n            if num % i == 0 then return false end\n     \
    \   end\n        return true\n    end\n    local primes = {'2', '3', '5', '7',\
    \ 'B', 'D'}\n    local count = 0\n    for i = 1, #num do\n        for _, p in\
    \ ipairs(primes) do\n            if num:sub(i, i) == p then\n                count\
    \ = count + 1\n            end\n        end\n    end\n    return count\nend",
  "  local sum = 0\n  local digits = {2, 3, 5, 7, 11, 13}\n  for d in num:gmatch('%a')\
    \ do\n    for i, digit in ipairs(digits) do\n      if tonumber(d, 16) == digit\
    \ then\n        sum = sum + 1\n      end\n    end\n  end\n  return sum\nend",
  "  local prims = {2, 3, 5, 7, 11, 13}\n  local prim_count = 0\n  for i=1, #num do\n\
    \    for j=1, #prims do\n      if num:sub(i,i) == tostring(prims[j]) or \n   \
    \     num:sub(i,i) == string.char(prims[j]+55) then\n        prim_count = prim_count\
    \ + 1\n      end\n    end\n  end\n  return prim_count\nend", "  local count =\
    \ 0\n  for i = 1,#num do\n    local p = tonumber(num:sub(i,i),16)\n    if p ==\
    \ 2 or p == 3 or p == 5 or p == 7 or p == 11 or p == 13 then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local hex = {2, 3, 5, 7, 11, 13}\n\
    \  local cnt = 0\n  if num == \"\" then return 0 end\n  for d in num:gmatch('.')\
    \ do\n    if d:match('%d') then\n      if hex[tonumber(d)+1] then cnt = cnt +\
    \ 1 end\n    else\n      if hex[d:byte()-55] then cnt = cnt + 1 end\n    end\n\
    \  end\n  return cnt\nend", "  return (num:gsub('[^2357BD]', ''):len())\nend",
  "    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local count = 0\n    for\
    \ key, char in pairs(num:upper():gmatch('.')) do\n        for key, prime in pairs(primes)\
    \ do\n            if char == prime then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend", "    local function\
    \ isPrime(num)\n        if num == 1 then\n            return false\n        end\n\
    \        if num == 2 then\n            return true\n        end\n        for i\
    \ = 2, num / 2 do\n            if num % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local primes\
    \ = {2, 3, 5, 7, 11, 13}\n    local count = 0\n    for i = 1, #num do\n      \
    \  local n = tonumber(num:sub(i, i), 16)\n        for j = 1, #primes do\n    \
    \        if n == primes[j] then\n                count = count + 1\n         \
    \   end\n        end\n    end\n    return count\nend", "    local result = 0\n\
    \    for i = 1, #num do\n        local c = num:sub(i, i)\n        if     c ==\
    \ '2' or c == '3'\n            or c == '5' or c == '7'\n            or c == 'B'\
    \ or c == 'D' then\n            result = result + 1\n        end\n    end\n  \
    \  return result\nend\nassert(hex_key('AB') == 1)\nassert(hex_key('1077E') ==\
    \ 2)\nassert(hex_key('ABED1A33') == 4)\nassert(hex_key('123456789ABCDEF0') ==\
    \ 6)\nassert(hex_key('2020') == 2)", "    local count = 0\n    local list  = {'2',\
    \ '3', '5', '7', 'B', 'D'}\n    for i = 1, #num do\n        if list[num:sub(i,\
    \ i)] then\n            count = count + 1\n        end\n    end\n    return count\n\
    end", "  local symbols = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \  local primes = {2,3,5,7,11,13}\n  local count = 0\n  for ch in num:gmatch(\"\
    .\") do\n    for k, symbol in ipairs(symbols) do\n      if ch == symbol then\n\
    \        if (k == 2 or k == 3 or k == 5 or k == 7 or k == 11 or k == 13) then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend", "  local digits = {}\n  for digit in num:gmatch('.') do\n    table.insert(digits,\
    \ digit)\n  end\n  local hexs = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n  local res = 0\n  for _, digit in ipairs(digits)\
    \ do\n    for i = 1, #hexs do\n      if digit == hexs[i] then\n        if i ==\
    \ 2 or i == 3 or i == 5 or i == 7 or i == 11 or i == 13 then\n          res =\
    \ res + 1\n        end\n      end\n    end\n  end\n  return res\nend", "\t-- There\
    \ are some numbers in hexadecimal that are prime numbers and are \n\t-- represented\
    \ by one character.\n\t-- There are some numbers in hexadecimal that are prime\
    \ numbers and are \n\t-- represented by two characters.\n\t-- So in order to work\
    \ out the number of prime hexadecimal numbers I \n\t-- needed to convert the hexadecimal\
    \ string to an integer, so that I could \n\t-- then use the built-in function\
    \ math.isprime().\n\tlocal primes = {2, 3, 5, 7, 11, 13}\n\tlocal counts = 0\n\
    \tlocal str = string.len(num)\n\tlocal len = 0\n\tfor i = 1, str, 1 do\n\t\tlen\
    \ = len + 1\n\tend\n\tlocal num = tonumber(num, 16)\n\tfor k, v in pairs(primes)\
    \ do\n\t\tif num == v then\n\t\t\treturn 1\n\t\tend\n\tend\n\tif math.isprime(num)\
    \ then\n\t\treturn len\n\tend\n\treturn counts\nend", "\tlocal c, r = 0, {2, 3,\
    \ 5, 7, 11, 13}\n\tfor i in num:gmatch('.') do\n\t\tfor k, v in pairs(r) do\n\t\
    \t\tif tonumber(i, 16) == v then\n\t\t\t\tc = c + 1\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn c\nend", "  local res = 0\n  local keys = {['2']=true, ['3']=true, ['5']=true,\
    \ ['7']=true, ['B']=true, ['D']=true}\n  for c in num:gmatch('.') do\n    if keys[c]\
    \ then res = res + 1 end\n  end\n  return res\nend", "   local count = 0\n   for\
    \ i = 1, #num do\n      local ch = num:sub(i, i)\n      if ch == '2' or ch ==\
    \ '3' or ch == '5' or ch == '7' or ch == 'B' or ch == 'D' then\n         count\
    \ = count + 1\n      end\n   end\n   return count\nend", "    return 0\nend",
  "\tlocal t = {A=10, B=11, C=12, D=13, E=14, F=15}\n\tlocal map = {[0]=0, [1]=0,\
    \ [2]=1, [3]=1, [4]=0, [5]=1, [6]=0, [7]=1, [8]=0, [9]=0, [10]=1, [11]=1, [12]=0,\
    \ [13]=1, [14]=0, [15]=0}\n\tlocal count = 0\n\tfor w in num:gmatch('%w') do\n\
    \t\tif map[t[w] or tonumber(w)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "  local s = num:gsub('[^2357BDF]', '')\n  return #s\nend",
  "    num = num:upper()\n    local primes = {'2', '3', '5', '7', 'B', 'D'}\n    local\
    \ count = 0\n    for _,v in ipairs(primes) do\n        count = count + num:gsub(v,\
    \ ''):len()\n    end\n    return count\nend", "  local symbol = {\n    [\"0\"\
    ] = 0,\n    [\"1\"] = 1,\n    [\"2\"] = 2,\n    [\"3\"] = 3,\n    [\"4\"] = 4,\n\
    \    [\"5\"] = 5,\n    [\"6\"] = 6,\n    [\"7\"] = 7,\n    [\"8\"] = 8,\n    [\"\
    9\"] = 9,\n    [\"A\"] = 10,\n    [\"B\"] = 11,\n    [\"C\"] = 12,\n    [\"D\"\
    ] = 13,\n    [\"E\"] = 14,\n    [\"F\"] = 15\n  }\n  local count = 0\n  for i=1,\
    \ #num do\n    local d = symbol[num:sub(i,i)]\n    if d == 2 or d == 3 or d ==\
    \ 5 or d == 7 or d == 11 or d == 13 then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "  local primes = {2, 3, 5, 7, 11, 13}\n  local sum\
    \ = 0\n  for n in num:gmatch('%w') do\n    if n:upper() == 'A' then\n      n =\
    \ 10\n    elseif n:upper() == 'B' then\n      n = 11\n    elseif n:upper() ==\
    \ 'C' then\n      n = 12\n    elseif n:upper() == 'D' then\n      n = 13\n   \
    \ elseif n:upper() == 'E' then\n      n = 14\n    elseif n:upper() == 'F' then\n\
    \      n = 15\n    end\n    for i,v in ipairs(primes) do\n      if tonumber(n)\
    \ == v then\n        sum = sum + 1\n      end\n    end\n  end\n  return sum\n\
    end", "    local hex_prime_dict = {A = 10, B = 11, C = 12, D = 13, E = 14, F =\
    \ 15}\n    local prime_count = 0\n    local function is_prime(number)\n      \
    \  if number < 2 then return false end\n        for i = 2, number - 1 do\n   \
    \         if number % i == 0 then return false end\n        end\n        return\
    \ true\n    end\n    for i = 1, #num do\n        local n = tonumber(num:sub(i,\
    \ i)) or hex_prime_dict[num:sub(i, i)]\n        if is_prime(n) then prime_count\
    \ = prime_count + 1 end\n    end\n    return prime_count\nend", "  return num:upper():gsub('[^021357BD]',\
    \ ''):len()\nend", "\tlocal sum = 0\n\tfor i = 1, #num do\n\t\tif string.find(\"\
    2357BD\", string.sub(num, i, i)) then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\t\
    return sum\nend", "    -- body\n    local primes = {'2', '3', '5', '7', 'B', 'D'}\n\
    \    local count = 0\n    for i=1, #num do\n        for j=1, #primes do\n    \
    \        if num:sub(i, i) == primes[j] then\n                count = count + 1\n\
    \            end\n        end\n    end\n    return count\nend", "    return select(2,\
    \ num:gsub('[2357BDF]', ''))\nend", "    num = num:upper()\n    local r = {}\n\
    \    for i=1, #num do\n        local d = tonumber(num:sub(i,i), 16)\n        if\
    \ d and d > 1 and not (d > 3 and d % 2 == 0 or d % 3 == 0) then\n            r[#r+1]\
    \ = d\n        end\n    end\n    return #r\nend", "  -- your code here\nend",
  "  local function is_prime(n)\n    if n < 2 then return false end\n    if n == 2\
    \ then return true end\n    if n % 2 == 0 then return false end\n    for i = 3,\
    \ math.sqrt(n), 2 do\n      if n % i == 0 then return false end\n    end\n   \
    \ return true\n  end\n  local cnt = 0\n  local n = tonumber(num, 16)\n  while\
    \ n > 0 do\n    if is_prime(n % 16) then cnt = cnt + 1 end\n    n = math.floor(n\
    \ / 16)\n  end\n  return cnt\nend", "  local function is_prime(n)\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 3, math.sqrt(n), 2 do\n      if n % i == 0 then return false end\n    end\n\
    \    return true\n  end\n  local hex_digits = {\n    ['0'] = 0, ['1'] = 1, ['2']\
    \ = 2, ['3'] = 3, ['4'] = 4, ['5'] = 5,\n    ['6'] = 6, ['7'] = 7, ['8'] = 8,\
    \ ['9'] = 9, ['A'] = 10, ['B'] = 11,\n    ['C'] = 12, ['D'] = 13, ['E'] = 14,\
    \ ['F'] = 15,\n  }\n  local primes = { [2] = true, [3] = true, [5] = true, [7]\
    \ = true, [11] = true, [13] = true }\n  local dec = 0\n  for digit in num:gmatch('.')\
    \ do\n    dec = dec * 16 + hex_digits[digit]\n  end\n  local count = 0\n  while\
    \ dec > 0 do\n    if primes[dec % 16] then count = count + 1 end\n    dec = math.floor(dec\
    \ / 16)\n  end\n  return count\nend", "    local hex = \"0123456789ABCDEF\"\n\
    \    local sum = 0\n    for i = 1, #num do\n        for k = 1, 16 do\n       \
    \     if string.upper(num:sub(i, i)) == hex:sub(k, k) then\n                if\
    \ k == 2 or k == 3 or k == 5 or k == 7 or k == 11 or k == 13 then\n          \
    \          sum = sum + 1\n                end\n            end\n        end\n\
    \    end\n    return sum\nend", "  local prime = { [0] = 0, [1] = 0, [2] = 1,\
    \ [3] = 1, [4] = 0, [5] = 1,\n                  [6] = 0, [7] = 1, [8] = 0, [9]\
    \ = 0, [10] = 0, [11] = 1,\n                  [12] = 0, [13] = 1, [14] = 0, [15]\
    \ = 0 }\n  local hex = { ['0'] = 0, ['1'] = 1, ['2'] = 2, ['3'] = 3, ['4'] = 4,\
    \ ['5'] = 5,\n                ['6'] = 6, ['7'] = 7, ['8'] = 8, ['9'] = 9, ['A']\
    \ = 10, ['B'] = 11,\n                ['C'] = 12, ['D'] = 13, ['E'] = 14, ['F']\
    \ = 15 }\n  local count = 0\n  for i = 1, #num do\n    count = count + prime[hex[num:sub(i,\
    \ i)]]\n  end\n  return count\nend", "    if num == '' then return 0 end\n   \
    \ local hex_primes = {[2]=2,[3]=3,[5]=5,[7]=7,[11]=11,[13]=13}\n    local sum\
    \ = 0\n    for i=1, #num do\n        if hex_primes[tonumber(num:sub(i,i),16)]\
    \ then\n            sum = sum + 1\n        end\n    end\n    return sum\nend",
  "   return 0\nend", "    if not num or num == '' then return 0 end\n    local primes\
    \ = {'2', '3', '5', '7', 'B', 'D'}\n    local count = 0\n    for i=1,#num do\n\
    \        if indexOf(primes, num:sub(i,i)) > 0 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend", "    local primes = {'2',\
    \ '3', '5', '7', 'B', 'D'}\n    local count = 0\n    for i = 1, #num do\n    \
    \    for _, v in ipairs(primes) do\n            if num:sub(i, i) == v then\n \
    \               count = count + 1\n            end\n        end\n    end\n   \
    \ return count\nend", "    local _, c = string.gsub(num, '[2357BD]', '')\n   \
    \ return c\nend", "\tlocal function is_prime(n)\n\t\tif n <= 1 then\n\t\t\treturn\
    \ false\n\t\telseif n <= 3 then\n\t\t\treturn true\n\t\telseif n % 2 == 0 or n\
    \ % 3 == 0 then\n\t\t\treturn false\n\t\tend\n\t\tlocal i = 5\n\t\twhile i * i\
    \ <= n do\n\t\t\tif n % i == 0 or n % (i + 2) == 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\t\ti = i + 6\n\t\tend\n\t\treturn true\n\tend\n\tlocal count = 0\n\
    \tfor i = 1, #num do\n\t\tlocal c = num:sub(i, i)\n\t\tif c:match('[2357BD]')\
    \ and is_prime(tonumber(c, 16)) then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend", "  local count = 0\n  local primes = {\n    [\"2\"] = true,\n\
    \    [\"3\"] = true,\n    [\"5\"] = true,\n    [\"7\"] = true,\n    [\"B\"] =\
    \ true,\n    [\"D\"] = true\n  }\n  for _,v in ipairs({num:byte(1,-1)}) do\n \
    \   local c = string.char(v)\n    if primes[c] then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend", "  local digits = {0, 1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n  local primes = {2, 3,\
    \ 5, 7, 11, 13}\n  local cnt = 0\n  for i = 1, #num do\n    for j = 1, #digits\
    \ do\n      if num:sub(i, i) == tostring(digits[j]) then\n        for k = 1, #primes\
    \ do\n          if digits[j] == primes[k] then\n            cnt = cnt + 1\n  \
    \        end\n        end\n      end\n    end\n  end\n  return cnt\nend", "  \
    \  local num = num:upper()\n    local count = 0\n    local tab = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15}\n\
    \    for i=1, #num do\n        local a = num:sub(i,i)\n        for k,v in pairs(tab)\
    \ do\n            if a == string.format(\"%X\",k) then\n                count\
    \ = count + (k==1 and 0 or (k==2 and 1 or \n                    (k==3 and 1 or\
    \ (k==5 and 1 or (k==7 and 1 or \n                    (k==11 and 1 or (k==13 and\
    \ 1 or 0)))))))\n            end\n        end\n    end\n    return count\nend",
  "    local hex_digs = '0123456789ABCDEF'\n    local primes = '2357BDF'\n    local\
    \ count = 0\n    for i=1, #num do\n        if primes:find(num:sub(i,i)) then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend",
  "    -- insert your code here\n    local lookup = {\n        [\"2\"] = 1,\n    \
    \    [\"3\"] = 1,\n        [\"5\"] = 1,\n        [\"7\"] = 1,\n        [\"B\"\
    ] = 1,\n        [\"D\"] = 1,\n    }\n    local count = 0\n    for n in num:gmatch(\"\
    .\") do\n        if lookup[n] then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend", "  local hexa = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}\n\
    \  local hex = {}\n  for i = 1, #hexa do\n    hex[hexa[i]] = i\n  end\n  local\
    \ count = 0\n  for i = 1, #num do\n    local digit = num:sub(i,i)\n    if hex[digit]\
    \ % 2 ~= 0 and \n      hex[digit] % 3 ~= 0 and \n      hex[digit] % 5 ~= 0 and\
    \ \n      hex[digit] % 7 ~= 0 and \n      hex[digit] % 11 ~= 0 and \n      hex[digit]\
    \ % 13 ~= 0 then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "    local primes = { [0]=true, [1]=true, [2]=true, [3]=true, [5]=true, [7]=true,\n\
    \                     [0xB]=true, [0xD]=true }\n    local digits = {}\n    local\
    \ count = 0\n    for digit in num:gmatch('%x') do\n        digits[#digits+1] =\
    \ tonumber(digit, 16)\n    end\n    for _, digit in ipairs(digits) do\n      \
    \  if primes[digit] then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend", "  local p = 0\n  local str = \"2357BD\"\n  for i = 1,\
    \ string.len(num) do\n    if string.find(str, string.sub(num, i, i)) then\n  \
    \    p = p + 1\n    end\n  end\n  return p\nend", "    return tonumber(num, 16)\n\
    \        :tostring(16)\n        :gsub('[^2357BDF]', '')\n        :len()\nend",
  "  local primes = {'2', '3', '5', '7', 'B', 'D'}\n  local count = 0\n  for i = 1,\
    \ #num do\n    for j = 1, #primes do\n      if num:sub(i, i) == primes[j] then\n\
    \        count = count + 1\n      end\n    end\n  end\n  return count\nend", " \
    \ return num:gsub('[^02-9ABCDEF]', ''):gsub('[^BCDF]', ''):len()\nend", "    local\
    \ primes = {'2', '3', '5', '7', 'B', 'D'}\n    local count = 0\n    for i=1, #num\
    \ do\n        for _, v in ipairs(primes) do\n            if string.sub(num, i,\
    \ i) == v then\n                count = count + 1\n            end\n        end\n\
    \    end\n    return count\nend", "  local primes = {2, 3, 5, 7, 11, 13}\n  local\
    \ ret = 0\n  for hex in num:gmatch('[0-9A-F]') do\n    if primes[tonumber(hex,\
    \ 16)] then\n      ret = ret + 1\n    end\n  end\n  return ret\nend", "  local\
    \ ret = 0\n  for c in num:gmatch('%w') do\n    if '2357BD' :find(c, 1, true) then\n\
    \      ret = ret + 1\n    end\n  end\n  return ret\nend", "    local nums = {\n\
    \        ['2'] = true,\n        ['3'] = true,\n        ['5'] = true,\n       \
    \ ['7'] = true,\n        ['B'] = true,\n        ['D'] = true,\n    }\n    local\
    \ count = 0\n    for i = 1, #num do\n        if nums[num:sub(i, i)] then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend", " \
    \  return (num:gsub('(2|3|5|7|[B-D])',''):len())\nend", "    local rt = 0\n  \
    \  for idx = 1, #num do\n        if num:sub(idx, idx) == '2' or num:sub(idx, idx)\
    \ == '3' or num:sub(idx, idx) == '5'\n            or num:sub(idx, idx) == '7'\
    \ or num:sub(idx, idx) == 'B' or num:sub(idx, idx) == 'D' then\n            rt\
    \ = rt + 1\n        end\n    end\n    return rt\nend", "  local tab = {}\n  local\
    \ len = string.len(num)\n  for i = 1, len do\n    tab[i] = string.sub(num, i,\
    \ i)\n  end\n  local count = 0\n  for k, v in pairs(tab) do\n    local n = tonumber(v,\
    \ 16)\n    if n == 2 or n == 3 or n == 5 or n == 7 or n == 11 or n == 13 then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  return #(num:gsub('[^2357BD]',\
    \ ''))\nend", "    local digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    local ret = 0\n    for i = 1, string.len(num)\
    \ do\n        local ch = string.sub(num, i, i)\n        for j = 1, #digits do\n\
    \            if ch == digits[j] then\n                if j == 2 or j == 3 or j\
    \ == 5 or j == 7 or j == 11 or j == 13 then\n                    ret = ret + 1\n\
    \                end\n                break\n            end\n        end\n  \
    \  end\n    return ret\nend", "    local primes = {'2', '3', '5', '7', 'B', 'D'}\n\
    \    local count = 0\n    for i = 1, #num do\n        for j = 1, #primes do\n\
    \            if num:sub(i, i) == primes[j] then\n                count = count\
    \ + 1\n            end\n        end\n    end\n    return count\nend", "  local\
    \ prime_hex = {'2', '3', '5', '7', 'B', 'D'}\n  local found = 0\n  for _, v in\
    \ ipairs(prime_hex) do\n    if num:find(v) then\n      found = found + 1\n   \
    \ end\n  end\n  return found\nend", "\tlocal hex = {[1] = \"1\", [2] = \"2\",\
    \ [3] = \"3\", [4] = \"4\", [5] = \"5\", [6] = \"6\", [7] = \"7\", [8] = \"8\"\
    , [9] = \"9\", [10] = \"A\", [11] = \"B\", [12] = \"C\", [13] = \"D\", [14] =\
    \ \"E\", [15] = \"F\"}\n\tlocal acc = 0\n\tlocal prime = {[1] = 2, [2] = 3, [3]\
    \ = 5, [4] = 7, [5] = 11, [6] = 13}\n\tfor i = 1, #num do\n\t\tfor j = 1, #hex\
    \ do\n\t\t\tif num:sub(i,i) == hex[j] then\n\t\t\t\tlocal num1 = tonumber(num:sub(i,i),\
    \ 16)\n\t\t\t\tfor k = 1, #prime do\n\t\t\t\t\tif num1 == prime[k] then\n\t\t\t\
    \t\t\tacc = acc + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\
    return acc\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
