language: lua
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    prod = prod * math.sign(v)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3917nz2p.lua:17:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmp3917nz2p.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp3917nz2p.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ abs_sum = 0\n  local prod = 1\n  for i, v in ipairs(arr) do\n    if v == 0 then\n\
    \      return 0\n    end\n    abs_sum = abs_sum + math.abs(v)\n    prod = prod\
    \ * (v > 0 and 1 or -1)\n  end\n  return abs_sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw96h1iv6.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpw96h1iv6.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ product = 1\n  local sum = 0\n  if #arr > 0 then\n    for _, v in ipairs(arr)\
    \ do\n      local sign = v < 0 and -1 or v > 0 and 1 or 0\n      product = product\
    \ * sign\n      sum = sum + math.abs(v)\n    end\n    return product * sum\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local sum = 0\n    local prod = 1\n    for _,\
    \ v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\
    \ prod = prod * 1\n        elseif v < 0 then prod = prod * -1\n        end\n \
    \   end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzy9no55r.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzy9no55r.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      prod = prod * 1\n      sum = sum + v\n    elseif v < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + -v\n    else\n      prod = prod * 0\n      sum\
    \ = sum + 0\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnk8_cvs.lua:36:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmppnk8_cvs.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v > 0 then\n          \
    \  prod = prod * 1\n        else\n            prod = prod * 0\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    if sum == 0 then\n        return\
    \ nil\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)\n  end\n  return prod *\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx80frk7r.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpx80frk7r.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local count_zero = 0\n  for _, v in ipairs(arr) do\n    if v > 0\
    \ then\n      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n    else\n\
    \      count_zero = count_zero + 1\n    end\n  end\n  if sum == 0 and count_zero\
    \ > 0 then\n    return 0\n  elseif count_zero > 0 then\n    return -sum\n  else\n\
    \    return sum\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprec24wfe.lua:36:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmprec24wfe.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod, sum = 1, 0\n  for i, v in ipairs(arr)\
    \ do\n    prod = prod * math.sign(v)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvtfasjtj.lua:16:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpvtfasjtj.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpvtfasjtj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local s = 1\n    local p = 1\n    for _, x in\
    \ ipairs(arr) do\n        s = s + math.abs(x)\n        if x ~= 0 then p = p *\
    \ math.sign(x) end\n    end\n    return s * p\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz42es03k.lua:18:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpz42es03k.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpz42es03k.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ res = 0\n  local signs = 1\n  if #arr == 0 then return nil end\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      res = res + v\n    elseif v < 0 then\n\
    \      res = res - v\n      signs = signs * -1\n    end\n  end\n  return res *\
    \ signs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlonc6ku.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmlonc6ku.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ p = 1\n  local s = 0\n  for _, n in ipairs(arr) do\n    if n < 0 then\n    \
    \  p = p * -1\n    elseif n > 0 then\n      s = s + n\n    end\n  end\n  return\
    \ (s > 0) and p * s or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe17g06ug.lua:28:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmpe17g06ug.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for i, n in ipairs(arr) do\n    prod = prod * (n > 0 and\
    \ 1 or (n < 0 and -1 or 0))\n    sum = sum + math.abs(n)\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5kgrs3d2.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5kgrs3d2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, sign = 0, 1\n  for _, n in ipairs(arr) do\n    local num = tonumber(n)\n\
    \    if num > 0 then\n      sum = sum + num\n    elseif num < 0 then\n      sum\
    \ = sum - num\n      sign = sign * -1\n    end\n  end\n  return sum * sign\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp381rv36h.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp381rv36h.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ ret = 1\n  for _,i in ipairs(arr) do\n    if i > 0 then\n      ret = ret * 1\n\
    \    elseif i < 0 then\n      ret = ret * -1\n    else\n      ret = ret * 0\n\
    \    end\n  end\n  local s = 0\n  for _,i in ipairs(arr) do\n    s = s + math.abs(i)\n\
    \  end\n  return s * ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplf6y4z_6.lua:36:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmplf6y4z_6.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v\
    \ < 0 and -1 or (v > 0 and 1 or 0))\n    sum = sum + math.abs(v)\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp866ktqfu.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp866ktqfu.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local sum, prod = 0, 1\n    for _, v in ipairs(arr)\
    \ do\n        local sign = math.sign(v)\n        if sign == 0 then\n         \
    \   return 0\n        end\n        sum = sum + math.abs(v)\n        prod = prod\
    \ * sign\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp79emy3jg.lua:16:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmp79emy3jg.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp79emy3jg.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local x = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] == 0 then\n            x = x + 1\n        elseif arr[i] < 0 then\n  \
    \          x = x + arr[i]\n        else\n            x = x + arr[i]\n        end\n\
    \    end\n    return x\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8udw0bs.lua:30:\
    \ expected: -9, actual: 1\nstack traceback:\n\t/tmp/tmpo8udw0bs.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    local sign = (v\
    \ == 0) and 0 or (v > 0 and 1 or -1)\n    prod = prod * sign\n    sum = sum +\
    \ math.abs(v)\n  end\n  return (prod == 0) and 0 or (prod * sum)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_ev8jnu.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpy_ev8jnu.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local sgn = 1\n    for _, v in ipairs(arr) do\n        if v ~=\
    \ 0 then\n            sgn = sgn * (v > 0 and 1 or -1)\n            sum = sum +\
    \ math.abs(v)\n        end\n    end\n    return sum * sgn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpepkmzb43.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpepkmzb43.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    sum = sum + math.abs(v)\n    if v > 0 then prod = prod * 1 end\n   \
    \ if v < 0 then prod = prod * -1 end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpzk8w3l.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwpzk8w3l.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ signs, product = {}, 1\n  for _, v in ipairs(arr) do\n    local sign = v > 0\
    \ and 1 or v < 0 and -1 or 0\n    product = product * sign\n    table.insert(signs,\
    \ sign)\n  end\n  if not signs[1] then return end\n  local mags = map(math.abs,\
    \ arr)\n  return foldl(mul, product, mags)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25a9a4x3.lua:20:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmp25a9a4x3.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmp25a9a4x3.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr[1] then return nil end\n  local result = 0\n  for _, x in ipairs(arr) do\n\
    \    if x > 0 then\n      result = result + x\n    elseif x < 0 then\n      result\
    \ = result - x\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpco7tygp1.lua:28:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpco7tygp1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, n in ipairs(arr) do\n    if n > 0 then\n\
    \      prod = prod * 1\n      sum = sum + n\n    elseif n < 0 then\n      prod\
    \ = prod * -1\n      sum = sum + -n\n    else\n      prod = prod * 0\n    end\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnc97j5b2.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpnc97j5b2.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tif #arr\
    \ == 0 then return nil end\n\tlocal mult = 1\n\tlocal sum = 0\n\tfor i = 1, #arr\
    \ do\n\t\tif arr[i] < 0 then\n\t\t\tmult = mult * -1\n\t\tend\n\t\tsum = sum +\
    \ math.abs(arr[i])\n\tend\n\treturn sum * mult\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuom_04l9.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuom_04l9.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if (#arr\
    \ == 0) then return nil end\n    local sum = 0\n    local prod = 1\n    for i,\
    \ val in ipairs(arr) do\n        sum = sum + math.abs(val)\n        if (val ==\
    \ 0) then\n            prod = 0\n        else\n            prod = prod * (val\
    \ / math.abs(val))\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for i = 1, #arr do\n        local x = arr[i]\n\
    \        if x > 0 then\n            prod = prod * 1\n        elseif x < 0 then\n\
    \            prod = prod * -1\n        else\n            prod = prod * 0\n   \
    \     end\n        sum = sum + math.abs(x)\n    end\n    return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0h1q6qs.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpb0h1q6qs.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ r, n = 1, 0\n  for _, v in ipairs(arr) do\n    n = n + math.abs(v)\n    if v\
    \ ~= 0 then\n      r = r * v / math.abs(v)\n    end\n  end\n  return n * r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvuv057u.lua:27:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmplvuv057u.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ m = 1\n  local s = 0\n  for _, v in ipairs(arr) do\n    if v < 0 then m = m\
    \ - 1 elseif v > 0 then m = m + 1 end\n    s = s + math.abs(v)\n  end\n  return\
    \ s * m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8xd6d2o.lua:25:\
    \ expected: -9, actual: 27\nstack traceback:\n\t/tmp/tmpj8xd6d2o.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local res = 0\n    local ps = 1\n    for _, v\
    \ in ipairs(arr) do\n        if v ~= 0 then\n            res = res + math.abs(v)\n\
    \            ps = ps * math.sign(v)\n        end\n    end\n    return res * ps\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8lojtdg4.lua:19:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmp8lojtdg4.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8lojtdg4.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    prod = prod * (v\
    \ > 0 and 1 or (v < 0 and -1 or 0))\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod ~= 0 and sum * prod or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnoe5vca3.lua:26:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpnoe5vca3.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if not\
    \ arr then return nil end\n    local sum, prod = 0, 1\n    for _,v in ipairs(arr)\
    \ do\n        local m = math.abs(v)\n        local s = 1\n        if v < 0 then\
    \ s = -1 end\n        if v == 0 then s = 0 end\n        sum = sum + m\n      \
    \  prod = prod * s\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2grfbkxw.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp2grfbkxw.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local rv = 0\n    for _,v in ipairs(arr) do\n\
    \        if v > 0 then\n            rv = rv + v\n        elseif v < 0 then\n \
    \           rv = rv - v\n        end\n    end\n    return rv\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6_cxpii.lua:28:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpz6_cxpii.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for i =\
    \ 1, #arr do\n        if arr[i] == 0 then\n            sum = sum + 0\n       \
    \ elseif arr[i] > 0 then\n            prod = prod * 1\n            sum = sum +\
    \ arr[i]\n        else\n            prod = prod * -1\n            sum = sum +\
    \ math.abs(arr[i])\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpidhg8fua.lua:34:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpidhg8fua.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  if #arr > 0 then\n    for i = 1, #arr do\n    \
    \  if arr[i] < 0 then\n        prod = prod * -1\n      elseif arr[i] == 0 then\n\
    \        prod = 0\n      end\n      sum = sum + math.abs(arr[i])\n    end\n  \
    \  return sum * prod\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local magnitudes = 0\n  for _, value in ipairs(arr) do\n    if value\
    \ == 0 then\n      prod = 0\n    elseif value > 0 then\n      prod = prod * 1\n\
    \    else\n      prod = prod * -1\n    end\n    if value > 0 then\n      magnitudes\
    \ = magnitudes + value\n    else\n      magnitudes = magnitudes - value\n    end\n\
    \  end\n  if #arr > 0 then\n    return prod * magnitudes\n  else\n    return nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdepo8tax.lua:19:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpdepo8tax.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ res = 0\n  local sign = 1\n  for _,v in ipairs(arr) do\n    if v > 0 then\n\
    \      res = res + v\n    elseif v < 0 then\n      res = res - v\n      sign =\
    \ sign * -1\n    end\n  end\n  return sign * res or nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4yufhv0.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpb4yufhv0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if next(arr)\
    \ == nil then return nil end\n  local signs, magnitudes = 1, 0\n  for _, v in\
    \ ipairs(arr) do\n    if v < 0 then signs = signs * -1 end\n    magnitudes = magnitudes\
    \ + math.abs(v)\n  end\n  return signs * magnitudes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmycnjdss.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmycnjdss.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ ret = 0\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      ret = ret +\
    \ v\n    elseif v < 0 then\n      ret = ret - v\n    end\n  end\n  return ret\
    \ * (arr[1] > 0 and 1 or arr[1] < 0 and -1 or 0)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6mn2_pw.lua:27:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpj6mn2_pw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tlocal\
    \ sum, product = 0, 1\n\tfor _, v in ipairs(arr) do\n\t\tsum = sum + math.abs(v)\n\
    \t\tif v < 0 then\n\t\t\tproduct = product * -1\n\t\telseif v == 0 then\n\t\t\t\
    product = 0\n\t\tend\n\tend\n\treturn sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5c5njqc.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpg5c5njqc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local mult = 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      mult = mult * -1\n    end\n  end\n  return sum * mult\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa81hxusc.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa81hxusc.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, prod = 0, 1\n  for _, n in ipairs(arr) do\n    if n > 0 then\n      sum\
    \ = sum + n\n    elseif n < 0 then\n      sum = sum - n\n      prod = prod * -1\n\
    \    end\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktxgosy3.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpktxgosy3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ product = 1\n  local sum = 0\n  if #arr == 0 then return nil end\n  for i =\
    \ 1, #arr do\n    local num = arr[i]\n    if num > 0 then\n      product = product\
    \ * 1\n    elseif num < 0 then\n      product = product * -1\n    else\n     \
    \ product = product * 0\n    end\n    sum = sum + math.abs(num)\n  end\n  return\
    \ sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod, sum = 1, 0\n  for i, v in ipairs(arr)\
    \ do\n    prod = prod * (v == 0 and 1 or v/math.abs(v))\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu92hca_j.lua:26:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpu92hca_j.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  if #arr == 0 then return nil end\n  for i = 1,\
    \ #arr do\n    local sign = math.sign(arr[i])\n    prod = prod * sign\n    sum\
    \ = sum + math.abs(arr[i])\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcu1e2u4_.lua:17:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpcu1e2u4_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpcu1e2u4_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod, sum = 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return nil end\n  local p, s = 1, 0\n  for _, v in ipairs(arr) do\n\
    \    if v < 0 then\n      p = p * -1\n    elseif v > 0 then\n      s = s + v\n\
    \    end\n  end\n  return p * s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporc8_piv.lua:28:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmporc8_piv.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr[1] then return nil end\n  local product = 1\n  local sum = 0\n  for _, v\
    \ in ipairs(arr) do\n    if v > 0 then\n      product = product * 1\n      sum\
    \ = sum + v\n    elseif v < 0 then\n      product = product * -1\n      sum =\
    \ sum + math.abs(v)\n    else\n      product = product * 0\n    end\n  end\n \
    \ return sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    for _, v in ipairs(arr) do\n        if v < 0 then\n           \
    \ res = res * -1\n        elseif v > 0 then\n            res = res * 1\n     \
    \   else\n            res = res * 0\n        end\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuh0xk25a.lua:29:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpuh0xk25a.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local pos, neg, zer = 0, 0, 0\n    for i, v in\
    \ ipairs(arr) do\n        if v > 0 then pos = pos + 1\n        elseif v < 0 then\
    \ neg = neg + 1\n        else zer = zer + 1 end\n    end\n    local prod = 2 ^\
    \ neg\n    if pos > 0 then prod = prod * 2 end\n    if zer > 0 then prod = 0 end\n\
    \    local sum = 0\n    for i, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuaytq50.lua:33:\
    \ expected: -9, actual: 36.0\nstack traceback:\n\t/tmp/tmphuaytq50.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local product = 1\n    local sum = 0\n    for\
    \ i, v in ipairs(arr) do\n        if v > 0 then\n            product = product\
    \ * 1\n        elseif v < 0 then\n            product = product * -1\n       \
    \ else\n            product = product * 0\n        end\n        sum = sum + math.abs(v)\n\
    \    end\n    return sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n          \
    \  prod = prod + 1\n        elseif v < 0 then\n            prod = prod - 1\n \
    \       end\n    end\n    local sum = 0\n    for _, v in ipairs(arr) do\n    \
    \    sum = sum + math.abs(v)\n    end\n    return prod == 0 and nil or sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalp2hm4g.lua:31:\
    \ expected: -9, actual: 18\nstack traceback:\n\t/tmp/tmpalp2hm4g.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum, prod = 0, 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        prod = prod * math.sign(v)\n    end\n    return sum * prod\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps7v0yckg.lua:16:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmps7v0yckg.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmps7v0yckg.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v > 0 then\n          \
    \  prod = prod * 1\n        else\n            prod = prod * 0\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvkh73wy.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpgvkh73wy.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum, mult = 0, 1\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \        mult = mult * (v == 0 and 1 or (v > 0 and 1 or -1))\n    end\n    return\
    \ sum * mult\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxoxnauv.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmxoxnauv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v < 0 then\n\
    \      prod = prod * -1\n    elseif v == 0 then\n      prod = 0\n    end\n   \
    \ sum = sum + math.abs(v)\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsbuavghi.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpsbuavghi.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local product = 1\n    if #arr == 0 then\n        return nil\n\
    \    end\n    for i = 1, #arr do\n        if arr[i] == 0 then\n            product\
    \ = product * 0\n        elseif arr[i] > 0 then\n            product = product\
    \ * 1\n        else\n            product = product * -1\n        end\n       \
    \ sum = sum + math.abs(arr[i])\n    end\n    return sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ signs = {[-1] = -1, [0] = 0, [1] = 1}\n    local sum, prod = 0, 1\n    for _,\
    \ v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        prod = prod *\
    \ signs[v]\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2lfyj5zt.lua:17:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmp2lfyj5zt.lua:17: in local 'candidate'\n\t/tmp/tmp2lfyj5zt.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for i, v in ipairs(arr) do\n    prod = prod * (v > 0 and\
    \ 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return prod ==\
    \ 0 and nil or prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6lrj3dql.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6lrj3dql.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdepo8tax.lua:19:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpdepo8tax.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if next(arr)\
    \ == nil then\n        return nil\n    end\n    local ret = 0\n    local sign\
    \ = 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            ret\
    \ = ret + v\n        elseif v < 0 then\n            ret = ret - v\n          \
    \  sign = sign * -1\n        end\n    end\n    return ret * sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsr901i8u.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsr901i8u.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ < 1 then return nil end\n    local res = 0\n    for _, v in ipairs(arr) do\n\
    \        if v > 0 then\n            res = res + v\n        elseif v < 0 then\n\
    \            res = res - v\n        end\n    end\n    local prod = 1\n    for\
    \ _, v in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n\
    \        elseif v < 0 then\n            prod = prod * -1\n        else\n     \
    \       prod = prod * 0\n        end\n    end\n    return res * prod\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local mags = 0\n  if #arr == 0 then return nil end\n  for _,v in\
    \ ipairs(arr) do\n    if v < 0 then prod = prod * -1 end\n    if v ~= 0 then mags\
    \ = mags + math.abs(v) end\n  end\n  return mags * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w55qk_m.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp0w55qk_m.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ mult, sum = 1, 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n     \
    \       mult = mult * 1\n        elseif arr[i] < 0 then\n            mult = mult\
    \ * -1\n        else\n            mult = mult * 0\n        end\n        sum =\
    \ sum + math.abs(arr[i])\n    end\n    return sum * mult == 0 and nil or sum *\
    \ mult\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd39c50jn.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpd39c50jn.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for i = 1, #arr do\n    local sign = signum(arr[i])\n  \
    \  prod = prod * sign\n    sum = sum + abs(arr[i])\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrvgrj_o.lua:15:\
    \ attempt to call a nil value (global 'signum')\nstack traceback:\n\t/tmp/tmpbrvgrj_o.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbrvgrj_o.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    if arr[i] < 0 then\n  \
    \    prod = prod * -1\n    elseif arr[i] > 0 then\n      prod = prod * 1\n   \
    \ else\n      prod = prod * 0\n    end\n    sum = sum + math.abs(arr[i])\n  end\n\
    \  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx37ipep.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfx37ipep.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v\
    \ < 0 and -1 or v > 0 and 1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod ~= 0 and prod * sum or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_nvdsss.lua:26:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpj_nvdsss.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local ret, zeroes = 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then zeroes = zeroes + 1\n    else ret = ret * sign(v) end\n\
    \  end\n  return zeroes == #arr and 0 or ret * sum(map(fabs, arr))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6vfoihi.lua:17:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpm6vfoihi.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpm6vfoihi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ s = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            s = s * 1\n        elseif v < 0 then\n            s = s * -1\n  \
    \      else\n            s = s * 0\n        end\n        sum = sum + math.abs(v)\n\
    \    end\n    return s * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrf62720.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqrf62720.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local prod = 1\n  for i = 1, #arr\
    \ do\n    if arr[i] > 0 then\n      sum = sum + arr[i]\n    elseif arr[i] < 0\
    \ then\n      sum = sum - arr[i]\n      prod = prod * -1\n    end\n  end\n  return\
    \ sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdccqf_e_.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdccqf_e_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, e in ipairs(arr) do\n    local sign = e\
    \ > 0 and 1 or e < 0 and -1 or 0\n    prod = prod * sign\n    if prod == 0 then\
    \ return 0 end\n    sum = sum + math.abs(e)\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgaj9el4s.lua:30:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpgaj9el4s.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    if v < 0 then\n      prod = prod * -1\n      sum = sum + v * -1\n  \
    \  elseif v > 0 then\n      sum = sum + v\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8yy7yxa.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl8yy7yxa.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        local s\
    \ = v < 0 and -1 or (v > 0 and 1 or 0)\n        prod = prod * s\n        sum =\
    \ sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7vj9rjbf.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7vj9rjbf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v == 0 then\n         \
    \   prod = 0\n        end\n        sum = sum + math.abs(v)\n    end\n    return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx_x7wwb.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpgx_x7wwb.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sign = 1\n  local sum = 0\n  local product = 1\n  for i, v in ipairs(arr) do\n\
    \    if arr[i] > 0 then\n      sum = sum + arr[i]\n    elseif arr[i] < 0 then\n\
    \      sum = sum + arr[i]\n      sign = sign * -1\n    else\n      product = 0\n\
    \    end\n  end\n  product = product * sign\n  return sum * product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_o83gup.lua:33:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpu_o83gup.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 1\n  for i = 1, #arr do\n    local n\
    \ = arr[i]\n    if n > 0 then\n      res = res * 1\n    elseif n < 0 then\n  \
    \    res = res * -1\n    else\n      res = res * 0\n    end\n  end\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n > 0 then\n      sum\
    \ = sum + n\n    elseif n < 0 then\n      sum = sum - n\n    end\n  end\n  return\
    \ sum * res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tlocal\
    \ prod = 1\n\tlocal sum = 0\n\tfor _, n in ipairs(arr) do\n\t\tlocal sign = n\
    \ >= 0 and 1 or -1\n\t\tprod = prod * sign\n\t\tsum = sum + math.abs(n)\n\tend\n\
    \treturn prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs1w_69e.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqs1w_69e.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tlocal\
    \ a = 1\n\tlocal b = 0\n\tfor i = 1, #arr do\n\t\tif arr[i] == 0 then\n\t\t\t\
    a = 0\n\t\telseif arr[i] < 0 then\n\t\t\ta = a + 1\n\t\telse\n\t\t\tb = b + arr[i]\n\
    \t\tend\n\tend\n\treturn (a % 2) == 0 and b or -b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjyivpgeo.lua:30:\
    \ expected: -9, actual: 5\nstack traceback:\n\t/tmp/tmpjyivpgeo.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local s = 1\n  local t = 0\n  for i = 1, #arr do\n\
    \    if arr[i] > 0 then\n      t = t + arr[i]\n    elseif arr[i] < 0 then\n  \
    \    t = t - arr[i]\n      s = s * -1\n    end\n  end\n  return t * s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_svh3vs9.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_svh3vs9.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  if not arr then return nil end\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then prod = 0\n    elseif v > 0 then sum = sum + v\n    elseif\
    \ v < 0 then sum = sum - v end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkupbh02b.lua:27:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpkupbh02b.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local prod, sum = 1, 0\n    for i, v in ipairs(arr)\
    \ do\n        prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n        sum =\
    \ sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local res = 0\n    local prod = 1\n    for _,\
    \ v in ipairs(arr) do\n        if v > 0 then\n            res = res + v\n    \
    \    elseif v < 0 then\n            res = res - v\n            prod = prod * -1\n\
    \        end\n    end\n    return res * prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlcs9aff.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvlcs9aff.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local product = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    if v > 0 then\n      product = product * 1\n      sum =\
    \ sum + v\n    elseif v < 0 then\n      product = product * -1\n      sum = sum\
    \ + -v\n    else\n      product = product * 0\n    end\n  end\n  return sum *\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local product = 1\n  for i, v in ipairs(arr) do\n    if v == 0 then\n\
    \      return 0\n    elseif v > 0 then\n      sum = sum + v\n    else\n      sum\
    \ = sum - v\n      product = product * -1\n    end\n  end\n  return sum * product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze7vuyrx.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpze7vuyrx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local abs_sum = 0\n  local sign_prod = 1\n  for\
    \ _, a in ipairs(arr) do\n    if a > 0 then\n      abs_sum = abs_sum + a\n   \
    \ elseif a < 0 then\n      abs_sum = abs_sum - a\n      sign_prod = sign_prod\
    \ * -1\n    end\n  end\n  return abs_sum * sign_prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95u7dl84.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp95u7dl84.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod, sum = 1, 0\n    for i, e in ipairs(arr) do\n        prod = prod * sgn(e)\n\
    \        sum = sum + abs(e)\n    end\n    return (prod ~= 0) and prod * sum or\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpolpui1g5.lua:15:\
    \ attempt to call a nil value (global 'sgn')\nstack traceback:\n\t/tmp/tmpolpui1g5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpolpui1g5.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sign = 1\n  local abs  = 0\n  local prod = 1\n  for _,n in ipairs(arr) do\n\
    \    sign = sign * (n >= 0 and 1 or -1)\n    abs  = abs  + math.abs(n)\n    prod\
    \ = prod * n\n  end\n  return prod * abs * sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjk273zk.lua:27:\
    \ expected: -9, actual: 144\nstack traceback:\n\t/tmp/tmpmjk273zk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ t = {}\n  local ret = 1\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      table.insert(t, 0)\n    elseif v > 0 then\n      table.insert(t, 1)\n \
    \   else\n      table.insert(t, -1)\n    end\n  end\n  for _, v in ipairs(t) do\n\
    \    ret = ret * v\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8rpazk5.lua:33:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmpa8rpazk5.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdepo8tax.lua:19:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpdepo8tax.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ signs = {0, -1, 1}\n  local prod = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local sign = arr[i] > 0 and 1 or arr[i] < 0 and -1 or 0\n    prod = prod\
    \ * signs[sign + 2]\n    sum = sum + math.abs(arr[i])\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w0494qk.lua:27:\
    \ expected: -9, actual: 0\nstack traceback:\n\t/tmp/tmp5w0494qk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tif #arr\
    \ == 0 then return nil end\n\tlocal prod = 1\n\tlocal sum = 0\n\tfor _, v in ipairs(arr)\
    \ do\n\t\tif v == 0 then prod = 0 end\n\t\tif v > 0 then prod = prod * 1\n\t\t\
    elseif v < 0 then prod = prod * -1 end\n\t\tsum = sum + math.abs(v)\n\tend\n\t\
    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, mul = 0, 1\n  for _, v in ipairs(arr) do\n    if v < 0 then\n      mul\
    \ = mul * -1\n    elseif v == 0 then\n      return 0\n    end\n    sum = sum +\
    \ math.abs(v)\n  end\n  return sum * mul\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8no_h5mw.lua:31:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp8no_h5mw.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum, product = 0, 1\n    for _,v in ipairs(arr) do\n        local sign = v ==\
    \ 0 and 0 or v > 0 and 1 or -1\n        product = product * sign\n        sum\
    \ = sum + math.abs(v)\n    end\n    return product == 0 and nil or sum * product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zesn1p1.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp0zesn1p1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum, product = 0, 1\n    for _, num in ipairs(arr) do\n        sum = sum + math.abs(num)\n\
    \        if num > 0 then\n            product = product * 1\n        elseif num\
    \ < 0 then\n            product = product * -1\n        else\n            product\
    \ = product * 0\n        end\n    end\n    return sum * product == 0 and nil or\
    \ sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_s1ig9o.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpb_s1ig9o.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ magnitude = 0\n  local sign = 1\n  for _, num in ipairs(arr) do\n    if num\
    \ < 0 then\n      sign = sign * -1\n    end\n    magnitude = magnitude + math.abs(num)\n\
    \  end\n  return (sign * magnitude) or nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde7485mz.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpde7485mz.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ p, s = 1, 0\n    for _, v in ipairs(arr) do\n        local a = math.abs(v)\n\
    \        if a > 0 then\n            p = p * (v / a)\n            s = s + a\n \
    \       end\n    end\n    return s * p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xlmud6v.lua:28:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp5xlmud6v.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, prod = 0, 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      sum =\
    \ sum + arr[i]\n    elseif arr[i] < 0 then\n      sum = sum - arr[i]\n      prod\
    \ = prod * -1\n    else\n      prod = 0\n    end\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nxjzq8s.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp9nxjzq8s.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tlocal\
    \ result, p = 0, 1\n\tfor _, v in ipairs(arr) do\n\t\tif v == 0 then\n\t\t\tp\
    \ = 0\n\t\t\tbreak\n\t\telseif v < 0 then\n\t\t\tp = -p\n\t\tend\n\t\tresult =\
    \ result + math.abs(v)\n\tend\n\treturn result * p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5078gm8j.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5078gm8j.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local product = 1\n  for _, v in ipairs(arr) do\n    if v > 0 then\n\
    \      sum = sum + v\n    elseif v < 0 then\n      sum = sum - v\n      product\
    \ = product * -1\n    end\n  end\n  return sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ga0viq1.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6ga0viq1.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local sum = 0\n    local product = 1\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n        if v > 0 then\n\
    \            product = product * 1\n        elseif v < 0 then\n            product\
    \ = product * -1\n        else\n            product = product * 0\n        end\n\
    \    end\n    return sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for _, v in ipairs(arr) do\n    prod = prod * (v == 0 and\
    \ 0 or v / math.abs(v))\n    sum = sum + math.abs(v)\n  end\n  return prod ==\
    \ 0 and nil or prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptx2i4aby.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmptx2i4aby.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ acc = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    acc = acc * (v >\
    \ 0 and 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ sum * acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_n3ihgz.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpe_n3ihgz.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if arr\
    \ == nil or #arr == 0 then return nil end\n  local sum = 0\n  local sign = 1\n\
    \  for _, i in ipairs(arr) do\n    if i < 0 then\n      sign = sign * -1\n   \
    \ elseif i > 0 then\n      sign = sign * 1\n    else\n      sign = 0\n    end\n\
    \    sum = sum + math.abs(i)\n  end\n  return sum * sign\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ result = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      result =\
    \ result + v\n    elseif v < 0 then\n      result = result - v\n    end\n  end\n\
    \  return result == 0 and nil or result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv4uv3ok.lua:27:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpjv4uv3ok.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ result = 0\n    for _, v in ipairs(arr) do\n        result = result + v * v\
    \ * (v > 0 and 1 or (v < 0 and -1 or 0))\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon3nz0ed.lua:23:\
    \ expected: -9, actual: -7\nstack traceback:\n\t/tmp/tmpon3nz0ed.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, prod = 0, 1\n  for _, value in ipairs(arr) do\n    local sign = value >\
    \ 0 and 1 or (value < 0 and -1 or 0)\n    sum = sum + math.abs(value)\n    prod\
    \ = prod * sign\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnvsgiew.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpgnvsgiew.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod, res = 1, 0\n    for i, v in ipairs(arr) do\n        prod = prod * (v ==\
    \ 0 and 1 or v / math.abs(v))\n        res = res + math.abs(v)\n    end\n    return\
    \ (res == 0 and nil or res * prod)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdv48f8ks.lua:25:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpdv48f8ks.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod, sum = 1, 0\n    for i, v in ipairs(arr) do\n        local sign = v ==\
    \ 0 and 0 or v / math.abs(v)\n        prod = prod * sign\n        sum = sum +\
    \ math.abs(v)\n    end\n    return prod == 0 and nil or prod * sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mrgfy8r.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp6mrgfy8r.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod, sum = 1, 0\n  for _, val in ipairs(arr) do\n    prod = prod * (val ==\
    \ 0 and 0 or (val > 0 and 1 or -1))\n    sum = sum + math.abs(val)\n  end\n  return\
    \ prod ~= 0 and sum * prod or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsnz8k2k.lua:25:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmplsnz8k2k.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local product = 1\n  if #arr == 0 then return nil end\n  for _, i\
    \ in ipairs(arr) do\n    if i > 0 then\n      sum = sum + i\n    elseif i < 0\
    \ then\n      sum = sum - i\n      product = product * -1\n    end\n  end\n  return\
    \ sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptihtr9n3.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptihtr9n3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ s = 1\n  local m = 0\n  for i = 1, #arr do\n    if arr[i] > 0 then\n      s\
    \ = s * 1\n      m = m + arr[i]\n    elseif arr[i] < 0 then\n      s = s * -1\n\
    \      m = m + arr[i] * -1\n    else\n      s = s * 0\n    end\n  end\n  return\
    \ m * s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd61h3ix8.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpd61h3ix8.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for i =\
    \ 1, #arr do\n        if arr[i] > 0 then\n            prod = prod * 1\n      \
    \      sum = sum + arr[i]\n        elseif arr[i] < 0 then\n            prod =\
    \ prod * -1\n            sum = sum + -arr[i]\n        else\n            prod =\
    \ prod * 0\n        end\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ s, p = 0, 1\n  for _, n in ipairs(arr) do\n    s = s + math.abs(n)\n    p =\
    \ p * (n < 0 and -1 or n > 0 and 1 or 0)\n  end\n  return p == 0 and nil or s\
    \ * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_bomez2.lua:27:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpu_bomez2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sign, mag = 1, 0\n  for _, v in ipairs(arr) do\n    local n = math.abs(v)\n\
    \    if n > 0 then\n      mag = mag + n\n      sign = sign * (v / n)\n    end\n\
    \  end\n  return mag * sign\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7rxsq8fx.lua:28:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmp7rxsq8fx.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ mult = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            mult = mult * 1\n        elseif v < 0 then\n           \
    \ mult = mult * -1\n        else\n            mult = mult * 0\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    return mult * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnk126_y.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmplnk126_y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    if v > 0 then\n      sum = sum + v\n    elseif v < 0 then\n      sum\
    \ = sum - v\n      prod = prod * -1\n    end\n  end\n  return sum * prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkyi7qedy.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkyi7qedy.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if next(arr)\
    \ == nil then return nil end\n  local signs, magnitudes = {}, {}\n  for i = 1,\
    \ #arr do\n    local sign = arr[i] >= 0 and 1 or -1\n    table.insert(signs, sign)\n\
    \    table.insert(magnitudes, math.abs(arr[i]))\n  end\n  local sum = 0\n  for\
    \ i = 1, #magnitudes do\n    sum = sum + magnitudes[i]\n  end\n  local prod =\
    \ 1\n  for i = 1, #signs do\n    prod = prod * signs[i]\n  end\n  return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwt7lqim4.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwt7lqim4.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ s, p = 0, 1\n  for i, v in ipairs(arr) do\n    if v > 0 then\n      s = s +\
    \ v\n    elseif v < 0 then\n      s = s - v\n      p = p * -1\n    end\n  end\n\
    \  return s * p == 0 and nil or s * p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagm4mpz2.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpagm4mpz2.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum = 0\n  local p = 1\n  for _,v in ipairs(arr)\
    \ do\n    local s = v/math.abs(v)\n    p = p * s\n    sum = sum + math.abs(v)\n\
    \  end\n  return sum * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk3bldm2p.lua:28:\
    \ expected: 0, actual: #NaN\nstack traceback:\n\t/tmp/tmpk3bldm2p.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    if #arr == 0 then\n        return nil\n   \
    \ end\n    for _, v in ipairs(arr) do\n        local sign = (v > 0 and 1) or (v\
    \ < 0 and -1) or 0\n        sum = sum + math.abs(v)\n        prod = prod * sign\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v <\
    \ 0 then\n            prod = prod * -1\n        elseif v > 0 then\n          \
    \  prod = prod * 1\n        else\n            prod = prod * 0\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwrq2env.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpzwrq2env.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prodsign = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        prodsign\
    \ = prodsign * ((v < 0) and -1 or (v > 0) and 1 or 0)\n        sum = sum + math.abs(v)\n\
    \    end\n    return prodsign * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7fuhunk.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpm7fuhunk.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n\
    \    prod = prod * (v < 0 and -1 or v > 0 and 1 or 0)\n  end\n  return prod ~=\
    \ 0 and sum * prod or nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1pcs9tg.lua:25:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpy1pcs9tg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ positive, negative, zero = 0, 0, 0\n    for _,v in ipairs(arr) do\n        if\
    \ v > 0 then\n            positive = positive + 1\n        elseif v < 0 then\n\
    \            negative = negative + 1\n        else\n            zero = zero +\
    \ 1\n        end\n    end\n    if zero == #arr then\n        return 0\n    end\n\
    \    local val = 1\n    for i = 1, #arr do\n        val = val * (positive > 0\
    \ and 1 or -1)\n        if positive > 0 then\n            positive = positive\
    \ - 1\n        else\n            negative = negative - 1\n        end\n    end\n\
    \    local sum = 0\n    for _,v in ipairs(arr) do\n        sum = sum + math.abs(v)\n\
    \    end\n    return sum * val\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk2rz4qx.lua:46:\
    \ expected: 0, actual: -1\nstack traceback:\n\t/tmp/tmpxk2rz4qx.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod, sum = 1, 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n  \
    \          prod = prod * 1\n            sum = sum + v\n        elseif v < 0 then\n\
    \            prod = prod * -1\n            sum = sum + -v\n        end\n    end\n\
    \    return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph85kl9x1.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmph85kl9x1.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if next(arr)\
    \ == nil then\n        return nil\n    end\n    local prod = 1\n    local sum\
    \ = 0\n    for _, num in ipairs(arr) do\n        if num < 0 then\n           \
    \ prod = prod * -1\n        elseif num > 0 then\n            prod = prod * 1\n\
    \        else\n            prod = prod * 0\n        end\n        sum = sum + math.abs(num)\n\
    \    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local abs_sum = 0\n  local prod = 1\n  for _, v\
    \ in ipairs(arr) do\n    local sign = (v == 0) and 0 or v / math.abs(v)\n    prod\
    \ = prod * sign\n    abs_sum = abs_sum + math.abs(v)\n  end\n  return abs_sum\
    \ * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum, prod = 0, 1\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      prod\
    \ = 0\n    elseif v > 0 then\n      sum = sum + v\n    else\n      sum = sum -\
    \ v\n      prod = prod * -1\n    end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps33cwpp4.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmps33cwpp4.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if next(arr)\
    \ == nil then return nil end\n  local prod = 1\n  local sum = 0\n  for _, v in\
    \ ipairs(arr) do\n    prod = prod * sign(v)\n    sum = sum + math.abs(v)\n  end\n\
    \  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvv7uny4.lua:17:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpbvv7uny4.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpbvv7uny4.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local signs = 1\n    local magnitudes = 0\n  \
    \  for _, v in ipairs(arr) do\n        if v == 0 then\n            signs = 0\n\
    \            break\n        elseif v > 0 then\n            signs = signs * 1\n\
    \        else\n            signs = signs * -1\n        end\n        magnitudes\
    \ = magnitudes + math.abs(v)\n    end\n    return signs * magnitudes\nend\nreturn\
    \ prod_signs\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0l5fwp6j.lua:30: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local res = 0\n    local signs = 1\n    for i\
    \ = 1, #arr do\n        if arr[i] < 0 then\n            signs = signs * -1\n \
    \       elseif arr[i] > 0 then\n            signs = signs * 1\n        else\n\
    \            signs = signs * 0\n        end\n        res = res + math.abs(arr[i])\n\
    \    end\n    return res * signs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local prod = 1\n    local sum = 0\n    for _,\
    \ v in ipairs(arr) do\n        prod = prod * v / math.abs(v)\n        sum = sum\
    \ + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas7nzspo.lua:27:\
    \ expected: 0, actual: #NaN\nstack traceback:\n\t/tmp/tmpas7nzspo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _, v in ipairs(arr) do\n    local n = math.abs(v)\n\
    \    sum = sum + n\n    if v > 0 then\n      prod = prod * 1\n    elseif v < 0\
    \ then\n      prod = prod * -1\n    else\n      prod = prod * 0\n    end\n  end\n\
    \  return sum * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0isnrx6.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmph0isnrx6.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ res = 1\n    for _, x in ipairs(arr) do\n        res = res * (x >= 0 and 1 or\
    \ x == 0 and 0 or -1)\n    end\n    local sum = 0\n    for _, x in ipairs(arr)\
    \ do\n        sum = sum + math.abs(x)\n    end\n    return sum * res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8tifvt6.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpi8tifvt6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ function prod(x, y) return x * y end\n  local function sign(n)\n    if n ==\
    \ 0 then return 0 end\n    return n / math.abs(n)\n  end\n  local function mag(n)\
    \ return math.abs(n) end\n  if #arr == 0 then return nil end\n  return mag(reduce(arr,\
    \ op[\"+\"], 0)) * reduce(map(arr, sign), prod, 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0k4dom1.lua:20:\
    \ attempt to index a nil value (global 'op')\nstack traceback:\n\t/tmp/tmpa0k4dom1.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpa0k4dom1.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  if #arr > 0 then\n    for i = 1, #arr do\n    \
    \  local v = arr[i]\n      if v > 0 then\n        prod = prod * 1\n      elseif\
    \ v < 0 then\n        prod = prod * -1\n      else\n        prod = prod * 0\n\
    \      end\n      sum = sum + math.abs(v)\n    end\n    return sum * prod\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ result = 1\n  for i = 1, #arr do\n    if arr[i] == 0 then\n      return 0\n\
    \    elseif arr[i] < 0 then\n      result = result * -1\n    end\n  end\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  end\n  return\
    \ sum * result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7omyawbz.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp7omyawbz.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  if #arr == 0 then return nil end\n  for i, val\
    \ in ipairs(arr) do\n    if val < 0 then prod = prod * -1 end\n    if val ~= 0\
    \ then sum = sum + math.abs(val) end\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimpgaxa8.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpimpgaxa8.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    if #arr == 0 then\n        return nil\n   \
    \ end\n    for _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n     \
    \   if v > 0 then\n            prod = prod * 1\n        elseif v < 0 then\n  \
    \          prod = prod * -1\n        else\n            prod = prod * 0\n     \
    \   end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 1\n  for i, v in ipairs(arr) do\n  \
    \  res = res * (v > 0 and 1 or v < 0 and -1 or 0)\n  end\n  local sum = 0\n  for\
    \ i, v in ipairs(arr) do\n    sum = sum + math.abs(v)\n  end\n  return sum * res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if arr\
    \ == nil or #arr == 0 then return nil end\n  local prod = 1\n  local sum = 0\n\
    \  for i, item in ipairs(arr) do\n    if item > 0 then\n      prod = prod * 1\n\
    \      sum = sum + item\n    elseif item < 0 then\n      prod = prod * -1\n  \
    \    sum = sum + math.abs(item)\n    end\n  end\n  return prod * sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qnc2reo.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1qnc2reo.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local total = 1\n  for i = 1, #arr do\n    local s = sign(arr[i])\n\
    \    if s ~= 0 then\n      sum = sum + abs(arr[i])\n      total = total * s\n\
    \    end\n  end\n  return total == 0 and nil or sum * total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq5j5t1yj.lua:16:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpq5j5t1yj.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpq5j5t1yj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            sum = sum + v\n            prod = prod * 1\n        elseif\
    \ v < 0 then\n            sum = sum + -v\n            prod = prod * -1\n     \
    \   else\n            prod = prod * 0\n        end\n    end\n    return sum *\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp602s_80t.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp602s_80t.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local pos = 0\n  local neg = 0\n  local zero = 0\n\
    \  for i = 1, #arr do\n    if arr[i] > 0 then\n      pos = pos + 1\n    elseif\
    \ arr[i] < 0 then\n      neg = neg + 1\n    else\n      zero = zero + 1\n    end\n\
    \  end\n  if zero > 0 then return 0 end\n  local res = 1\n  for i = 1, pos do\n\
    \    res = res * 1\n  end\n  for i = 1, neg do\n    res = res * -1\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph72gdv9l.lua:40:\
    \ expected: -9, actual: -1\nstack traceback:\n\t/tmp/tmph72gdv9l.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return nil end\n  local mult = 1\n  local summ = 0\n  for _, value\
    \ in ipairs(arr) do\n    summ = summ + math.abs(value)\n    if value > 0 then\n\
    \      mult = mult * 1\n    elseif value < 0 then\n      mult = mult * -1\n  \
    \  else\n      mult = mult * 0\n    end\n  end\n  return summ * mult\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyovbcy0.lua:35:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpwyovbcy0.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        if v < 0 then\n            prod = prod * -1\n       \
    \ elseif v > 0 then\n            prod = prod * 1\n        else\n            prod\
    \ = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhsm600q.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpfhsm600q.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ result = 0\n    for _, v in ipairs(arr) do\n        result = result + math.abs(v)\
    \ * prod_signs_sign(v)\n    end\n    return result == 0 and nil or result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpidcgxhzf.lua:15:\
    \ attempt to call a nil value (global 'prod_signs_sign')\nstack traceback:\n\t\
    /tmp/tmpidcgxhzf.lua:15: in local 'candidate'\n\t/tmp/tmpidcgxhzf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ r = 0\n  local p = 1\n  for _, n in ipairs(arr) do\n    if n == 0 then\n   \
    \   p = 0\n    else\n      r = r + math.abs(n)\n      p = p * (n > 0 and 1 or\
    \ -1)\n    end\n  end\n  return r * p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgn2d1mff.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpgn2d1mff.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    for _, v in ipairs(arr) do\n        if v >\
    \ 0 then\n            prod = prod * 1\n        elseif v < 0 then\n           \
    \ prod = prod * -1\n        else\n            prod = prod * 0\n        end\n \
    \       sum = sum + math.abs(v)\n    end\n    return prod * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvr6ly28.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmplvr6ly28.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n\
    \      prod = 0\n    elseif v > 0 then\n      prod = prod * 1\n    else\n    \
    \  prod = prod * -1\n    end\n    sum = sum + math.abs(v)\n  end\n  return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1x57kbv.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpm1x57kbv.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdepo8tax.lua:19:\
    \ expected: -9, actual: nil\nstack traceback:\n\t/tmp/tmpdepo8tax.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for _, a in ipairs(arr)\
    \ do\n    prod = prod * (a > 0 and 1 or a < 0 and -1 or 0)\n    sum = sum + math.abs(a)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local n = 0\n  for i = 1, #arr do\n    if arr[i]\
    \ > 0 then\n      n = n + arr[i]\n    elseif arr[i] < 0 then\n      n = n - arr[i]\n\
    \    end\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs3wrt6j.lua:28:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmpxs3wrt6j.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return nil end\n  local sign = 1\n  local sum = 0\n  for _, num in\
    \ ipairs(arr) do\n    if num < 0 then\n      sign = sign * -1\n    elseif num\
    \ > 0 then\n      sum = sum + num\n    end\n  end\n  return sum * sign\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmbx92mvo.lua:29:\
    \ expected: -9, actual: -5\nstack traceback:\n\t/tmp/tmpmbx92mvo.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return nil end\n  local prod = 1\n  local sum = 0\n  for _, n in ipairs(arr)\
    \ do\n    prod = prod * (n < 0 and -1 or n > 0 and 1 or 0)\n    sum = sum + math.abs(n)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9rd9ej6.lua:29:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpg9rd9ej6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod, sum = 1, 0\n  for _, v in ipairs(arr)\
    \ do\n    prod = prod * (v == 0 and 1 or (v > 0 and 1 or -1))\n    sum = sum +\
    \ math.abs(v)\n  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgk7ou4dz.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgk7ou4dz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sum, prod = 0, 1\n  for _, v in ipairs(arr)\
    \ do\n    if v == 0 then\n      sum = sum + 1\n    else\n      sum = sum + math.abs(v)\n\
    \      prod = prod * (v > 0 and 1 or -1)\n    end\n  end\n  return sum * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjpicyhh.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpxjpicyhh.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = signum(arr[i])\n\
    \    prod = prod * sign\n    sum = sum + abs(arr[i])\n  end\n  return prod * sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb46rnh69.lua:16:\
    \ attempt to call a nil value (global 'signum')\nstack traceback:\n\t/tmp/tmpb46rnh69.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpb46rnh69.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ n = 0\n    for _, v in ipairs(arr) do\n        if v < 0 then\n            n\
    \ = n - 1\n        elseif v > 0 then\n            n = n + 1\n        end\n   \
    \ end\n    if n == 0 then\n        return 0\n    end\n    local sum = 0\n    for\
    \ _, v in ipairs(arr) do\n        sum = sum + math.abs(v)\n    end\n    return\
    \ sum * n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlu4dohj.lua:34:\
    \ expected: -9, actual: 18\nstack traceback:\n\t/tmp/tmprlu4dohj.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local result = 0\n  local sign = 1\n  for _, n in\
    \ ipairs(arr) do\n    if n > 0 then\n      result = result + n\n    elseif n <\
    \ 0 then\n      result = result - n\n      sign = sign * -1\n    end\n  end\n\
    \  return result * sign\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5xm97j_.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpr5xm97j_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum = 0\n    local prod = 1\n    for _, v in ipairs(arr) do\n        sum = sum\
    \ + math.abs(v)\n        prod = prod * math.sign(v)\n    end\n    return prod\
    \ * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgrkhqv_0.lua:17:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpgrkhqv_0.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpgrkhqv_0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ s = 0\n  for _, v in ipairs(arr) do\n    if v == 0 then\n      s = 0\n     \
    \ break\n    elseif v > 0 then\n      s = s + 1\n    else\n      s = s - 1\n \
    \   end\n  end\n  local n = 1\n  for _, v in ipairs(arr) do\n    n = n + math.abs(v)\n\
    \  end\n  return s * n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw8r4q2i.lua:34:\
    \ expected: -9, actual: 20\nstack traceback:\n\t/tmp/tmpsw8r4q2i.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod, n = 1, 0\n    for _, val in ipairs(arr) do\n        local sign = val ==\
    \ 0 and 0 or (val > 0 and 1 or -1)\n        prod = prod * sign\n        n = n\
    \ + math.abs(val)\n    end\n    return prod ~= 0 and prod * n or nil\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8_u7lkc.lua:26:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpt8_u7lkc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ prod = 1\n    local sum = 0\n    if not arr then return nil end\n    for _,v\
    \ in ipairs(arr) do\n        if v > 0 then\n            prod = prod * 1\n    \
    \        sum = sum + v\n        elseif v < 0 then\n            prod = prod * -1\n\
    \            sum = sum + math.abs(v)\n        elseif v == 0 then\n           \
    \ prod = prod * 0\n        end\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk644y4d.lua:36:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpuk644y4d.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum, product = 0, 1\n    for _, v in ipairs(arr) do\n        if v > 0 then\n\
    \            sum = sum + v\n        elseif v < 0 then\n            sum = sum -\
    \ v\n            product = product * -1\n        end\n    end\n    return sum\
    \ * product == 0 and nil or sum * product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhucdn0y.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdhucdn0y.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ res = 1\n  for _, v in ipairs(arr) do\n    res = res * v / math.abs(v)\n  end\n\
    \  if res == 1/0 then return nil end\n  return res * sum(abs(arr))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb_x05vei.lua:18:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpb_x05vei.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpb_x05vei.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 1\n  for _, v in ipairs(arr) do\n  \
    \  res = res * sign(v)\n  end\n  return res * math.abs(get_sum(arr))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnk0qby7m.lua:16:\
    \ attempt to call a nil value (global 'sign')\nstack traceback:\n\t/tmp/tmpnk0qby7m.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpnk0qby7m.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local sum = 0\n    local c = 1\n    for _, x in\
    \ ipairs(arr) do\n        local sign = 1\n        if x < 0 then sign = -1 end\n\
    \        c = c * sign\n        sum = sum + math.abs(x)\n    end\n    return sum\
    \ * c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1gy1cgy.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpv1gy1cgy.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local s = 0\n    local p = 1\n    for _, v in\
    \ ipairs(arr) do\n        s = s + math.abs(v)\n        if v > 0 then\n       \
    \     p = p * 1\n        elseif v < 0 then\n            p = p * -1\n        else\n\
    \            p = 0\n        end\n    end\n    return s * p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sign = 0\n  local mag = 0\n  for _, v in ipairs(arr) do\n    local sign2 = 0\n\
    \    if v < 0 then\n      sign2 = -1\n    elseif v > 0 then\n      sign2 = 1\n\
    \    end\n    sign = sign + sign2\n    mag = mag + math.abs(v)\n  end\n  if sign\
    \ == 0 then\n    return 0\n  else\n    return sign * mag\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0548jtrr.lua:35:\
    \ expected: -9, actual: 18\nstack traceback:\n\t/tmp/tmp0548jtrr.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if next(arr)\
    \ == nil then return nil end\n  local signs = {1, -1, 0}\n  local sum = 0\n  for\
    \ i = 1, #arr do\n    local sign = arr[i]\n    local mag = math.abs(arr[i])\n\
    \    sum = sum + mag * signs[sign + 2]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd9s9hzgt.lua:19:\
    \ attempt to perform arithmetic on a nil value (field '?')\nstack traceback:\n\
    \t/tmp/tmpd9s9hzgt.lua:19: in local 'candidate'\n\t/tmp/tmpd9s9hzgt.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local prod = 1\n  for _,n in ipairs(arr) do\n    if n == 0 then\n\
    \      prod = 0\n    elseif n > 0 then\n      sum = sum + n\n    else\n      sum\
    \ = sum - n\n      prod = prod * -1\n    end\n  end\n  return prod * sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0nuadrt.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpq0nuadrt.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign = function(x)\n    if x > 0 then return\
    \ 1 end\n    if x < 0 then return -1 end\n    return 0\n  end\n  local res = 1\n\
    \  for i = 1, #arr do\n    res = res * sign(arr[i])\n  end\n  if res < 0 then\
    \ res = -res end\n  return res * arr:sum(abs)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxqk8xrg6.lua:24:\
    \ attempt to call a nil value (method 'sum')\nstack traceback:\n\t/tmp/tmpxqk8xrg6.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpxqk8xrg6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ magn = 0\n  local prod = 1\n  if #arr == 0 then return nil end\n  for i,v in\
    \ ipairs(arr) do\n    magn = magn + math.abs(v)\n    if v > 0 then prod = prod\
    \ * 1\n    elseif v < 0 then prod = prod * -1\n    else prod = prod * 0 end\n\
    \  end\n  return magn * prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sign = 1\n  local mag = 0\n  if #arr == 0 then return nil end\n  for _, v in\
    \ ipairs(arr) do\n    sign = sign * (v > 0 and 1 or (v < 0 and -1 or 0))\n   \
    \ mag = mag + math.abs(v)\n  end\n  return sign * mag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ m = 1\n  local s = 0\n  for _, v in ipairs(arr) do\n    if v > 0 then\n    \
    \  m = m * 1\n    elseif v < 0 then\n      m = m * -1\n    else\n      m = m *\
    \ 0\n    end\n    s = s + math.abs(v)\n  end\n  return s * m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdonpbunr.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpdonpbunr.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979881
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    -- your\
    \ code here\n    --[[\n    if table.getn(arr) == 0 then\n        return nil\n\
    \    end\n    return -1\n    --]]\n    local a = 0\n    local b = 1\n    for i,v\
    \ in ipairs(arr) do\n        if v == 0 then\n            a = a\n        elseif\
    \ v > 0 then\n            a = a + v\n            b = b * 1\n        else\n   \
    \         a = a + -v\n            b = b * -1\n        end\n    end\n    if table.getn(arr)\
    \ == 0 then\n        return nil\n    end\n    return a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7oz6348c.lua:33:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp7oz6348c.lua:33:\
    \ in local 'candidate'\n\t/tmp/tmp7oz6348c.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sum, product = 0, 1\n    for _, num in ipairs(arr) do\n        sum = sum + math.abs(num)\n\
    \        if num ~= 0 then\n            product = product * num / math.abs(num)\n\
    \        end\n    end\n    return (product ~= 1) and (sum * product) or nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtzaaxrk.lua:27:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmphtzaaxrk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local signs = {}\n    for _, v in ipairs(arr)\
    \ do\n        local sign = math.sign(v)\n        table.insert(signs, sign)\n \
    \   end\n    local prod = 1\n    for _, v in ipairs(signs) do\n        prod =\
    \ prod * v\n    end\n    local sum = 0\n    for _, v in ipairs(arr) do\n     \
    \   sum = sum + math.abs(v)\n    end\n    return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwp208gs1.lua:16:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpwp208gs1.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpwp208gs1.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979881
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ len = #arr\n    if len == 0 then\n        return nil\n    end\n    local sign\
    \ = 1\n    local magn = 0\n    for i = 1, len do\n        local num = arr[i]\n\
    \        if num == 0 then\n            return 0\n        elseif num < 0 then\n\
    \            sign = sign * -1\n        end\n        magn = magn + math.abs(num)\n\
    \    end\n    return sign * magn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local sign_prod = 1\n  local sum = 0\n  for _, v\
    \ in ipairs(arr) do\n    sign_prod = sign_prod * (v < 0 and -1 or v > 0 and 1\
    \ or 0)\n    sum = sum + math.abs(v)\n  end\n  return sign_prod * sum\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local function sign(n) return (n > 0 and 1) or (n\
    \ < 0 and -1) or 0 end\n  local function magnitude(n) return math.abs(n) end\n\
    \  local signProd = 1\n  local magnitudeSum = 0\n  for _, n in ipairs(arr) do\n\
    \    signProd = signProd * sign(n)\n    magnitudeSum = magnitudeSum + magnitude(n)\n\
    \  end\n  return signProd * magnitudeSum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ sum = 0\n  local mult = 1\n  for i = 1, #arr do\n    if arr[i] > 0 then\n  \
    \    sum = sum + arr[i]\n    elseif arr[i] < 0 then\n      sum = sum - arr[i]\n\
    \      mult = mult * -1\n    else\n      mult = 0\n    end\n  end\n  return sum\
    \ * mult\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd099kadx.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpd099kadx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ s = 1\n  local sum = 0\n  for i = 1, #arr do\n    local n = arr[i]\n    if n\
    \ == 0 then\n      s = 0\n    elseif n < 0 then\n      s = -s\n    end\n    sum\
    \ = sum + math.abs(n)\n  end\n  return s * sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5we_y4u2.lua:33:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp5we_y4u2.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 0\n  local sign = 1\n  for _, v in ipairs(arr)\
    \ do\n    local av = math.abs(v)\n    if av ~= 0 then\n      res = res + av\n\
    \      sign = sign * (v / av)\n    end\n  end\n  return res * sign\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu723yd_.lua:30:\
    \ expected: 0, actual: 1.0\nstack traceback:\n\t/tmp/tmpnu723yd_.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ _sum = 0\n  local _prod = 1\n  for _, n in ipairs(arr) do\n    if n < 0 then\n\
    \      _prod = _prod * -1\n    elseif n == 0 then\n      _prod = 0\n    end\n\
    \    _sum = _sum + math.abs(n)\n  end\n  return _prod * _sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1udb4c42.lua:32:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmp1udb4c42.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local result = 0\n  local product = 1\n  for _,\
    \ n in ipairs(arr) do\n    result = result + math.abs(n)\n    if n > 0 then\n\
    \      product = product * 1\n    elseif n < 0 then\n      product = product *\
    \ -1\n    else\n      product = product * 0\n    end\n  end\n  return result *\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ res = 1\n  for _, v in ipairs(arr) do\n    if v < 0 then\n      res = res *\
    \ -1\n    elseif v > 0 then\n      res = res * 1\n    else\n      res = res *\
    \ 0\n    end\n  end\n  local res_sum = 0\n  for _, v in ipairs(arr) do\n    res_sum\
    \ = res_sum + math.abs(v)\n  end\n  return res * res_sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3pvm13u.lua:36:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpg3pvm13u.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local res = 0\n  local mult = 1\n  for _,v in ipairs(arr)\
    \ do\n    if v > 0 then\n      res = res + v\n    elseif v < 0 then\n      res\
    \ = res - v\n      mult = mult * -1\n    end\n  end\n  return res * mult\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxroqflur.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxroqflur.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if #arr\
    \ == 0 then return nil end\n    local product = 1\n    local sum = 0\n    for\
    \ _, i in ipairs(arr) do\n        if i > 0 then\n            product = product\
    \ * 1\n            sum = sum + i\n        elseif i < 0 then\n            product\
    \ = product * -1\n            sum = sum + -i\n        else\n            product\
    \ = product * 0\n        end\n    end\n    return sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ sgn = 1\n    local val = 0\n    for _, v in ipairs(arr) do\n        if v > 0\
    \ then\n            sgn = sgn * 1\n        elseif v < 0 then\n            sgn\
    \ = sgn * -1\n        else\n            sgn = sgn * 0\n        end\n        val\
    \ = val + math.abs(v)\n    end\n    if val > 0 then\n        return val * sgn\n\
    \    else\n        return nil\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if not\
    \ arr then return nil end\n  local signs = {\n    pos = 1,\n    neg = 1,\n   \
    \ zero = 1\n  }\n  for _, v in ipairs(arr) do\n    if v > 0 then\n      signs.pos\
    \ = signs.pos * 1\n      signs.neg = signs.neg * 1\n      signs.zero = signs.zero\
    \ * 1\n    elseif v < 0 then\n      signs.pos = signs.pos * -1\n      signs.neg\
    \ = signs.neg * -1\n      signs.zero = signs.zero * 1\n    else\n      signs.pos\
    \ = signs.pos * 0\n      signs.neg = signs.neg * 0\n      signs.zero = signs.zero\
    \ * 0\n    end\n  end\n  local prod = signs.pos * signs.neg * signs.zero\n  if\
    \ prod == 0 then return 0 end\n  local sum = 0\n  for _, v in ipairs(arr) do\n\
    \    sum = sum + math.abs(v)\n  end\n  return sum * prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cfkq3cm.lua:46:\
    \ expected: -9, actual: 9\nstack traceback:\n\t/tmp/tmp9cfkq3cm.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ res = nil\n    if arr and arr[1] then\n        res = 0\n        for i = 1, #arr\
    \ do\n            res = res + math.abs(arr[i]) * math.sign(arr[i])\n        end\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8nv8kxa.lua:17:\
    \ attempt to call a nil value (field 'sign')\nstack traceback:\n\t/tmp/tmpf8nv8kxa.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpf8nv8kxa.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ prod = 1\n  local sum = 0\n  for _,v in ipairs(arr) do\n    prod = prod * (v\
    \ > 0 and 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n  end\n  return\
    \ prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsihf9rc.lua:28:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmptsihf9rc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n\tif not\
    \ arr[1] then return nil end\n\tlocal neg, zero, pos = 0, 0, 0\n\tfor _, v in\
    \ ipairs(arr) do\n\t\tif v < 0 then neg = neg + 1\n\t\telseif v == 0 then zero\
    \ = zero + 1\n\t\telse pos = pos + 1 end\n\tend\n\tif neg % 2 == 0 then\n\t\t\
    if zero > 0 then return 0\n\t\telse return pos\n\t\tend\n\telse\n\t\treturn -(pos\
    \ + neg)\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1jdl5zl.lua:32:\
    \ expected: -9, actual: -4\nstack traceback:\n\t/tmp/tmpc1jdl5zl.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 1
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    local\
    \ product = 1\n    local sum = 0\n    for i = 1, #arr do\n        if arr[i] >\
    \ 0 then\n            product = product * 1\n        elseif arr[i] < 0 then\n\
    \            product = product * -1\n        else\n            product = product\
    \ * 0\n        end\n        sum = sum + math.abs(arr[i])\n    end\n    return\
    \ sum * product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxe5tyz4.lua:34:\
    \ expected: nil, actual: 0\nstack traceback:\n\t/tmp/tmpqxe5tyz4.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  if #arr\
    \ == 0 then return nil end\n  local prod = 1\n  local sum = 0\n  for _, v in ipairs(arr)\
    \ do\n    prod = prod * (v > 0 and 1 or v < 0 and -1 or 0)\n    sum = sum + math.abs(v)\n\
    \  end\n  return prod * sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prod_signs\n    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n\
    \    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n    if next(arr)\
    \ == nil then\n        return nil\n    end\n    local product = 1\n    local sum\
    \ = 0\n    for _, v in ipairs(arr) do\n        if v > 0 then\n            product\
    \ = product * 1\n        elseif v < 0 then\n            product = product * -1\n\
    \        else\n            product = product * 0\n        end\n        sum = sum\
    \ + math.abs(v)\n    end\n    return sum * product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prod_signs\n    lu.assertEquals(candidate({1,\
    \ 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0, 1}), 0)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({2,\
    \ 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1, 1, -1, 1}), 4)\n\
    \    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
- exit_code: 0
  program: "-- You are given a table arr of integers and you need to return\n-- sum\
    \ of magnitudes of integers multiplied by product of all signs\n-- of each number\
    \ in the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n\
    -- Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
    -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n  local\
    \ res = 0\n  local sign = 1\n  if #arr > 0 then\n    for _, v in ipairs(arr) do\n\
    \      res = res + math.abs(v)\n      if v > 0 then\n        sign = sign * 1\n\
    \      elseif v < 0 then\n        sign = sign * -1\n      else\n        sign =\
    \ sign * 0\n      end\n    end\n    return res * sign\n  end\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
    \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
    \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
    \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
    \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659979882
