name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is haplua\
  \ or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n-- >>> is_happy(aa)\n\
  -- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n-- false\n-- >>>\
  \ is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- TODO: write your code here\n\tassert(type(s) == \"string\")\n\t\
    local n = #s\n\tif n < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, n - 2 do\n\
    \t\tif s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2)\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\t-- if string\
    \ length is less than 3, return false\n\tif string.len(s) < 3 then\n\t\treturn\
    \ false\n\tend\n\t-- for i=1, length-2\n\tfor i=1,string.len(s)-2 do\n\t\t-- check\
    \ if s[i], s[i+1], s[i+2] are all distinct\n\t\tif s:sub(i,i) == s:sub(i+1,i+1)\
    \ or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1) == s:sub(i+2,i+2) then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "   local a=string.sub(s,1,1)\n\
    \   local b=string.sub(s,2,2)\n   local c=string.sub(s,3,3)\n   local len=string.len(s)\n\
    \   local happy=false\n   if len>=3 then\n      if a~=b and a~=c and b~=c then\n\
    \         happy=true\n      end\n   end\n   return happy\nend", "    local len\
    \ = string.len(s)\n    if len >= 3 then\n        local f = s:sub(1,1)\n      \
    \  local m = s:sub(2,2)\n        local l = s:sub(3,3)\n        if f ~= m and m\
    \ ~= l and l ~= f then\n            return true\n        end\n    end\n    return\
    \ false\nend", end, "  if (s:len() < 3) then\n    return false\n  end\n  local\
    \ i, j = 0, 0\n  while (i < s:len() - 2) do\n    local t = string.match(s, \"\
    (%w)%w%w\", i)\n    j = i + 1\n    while (j < s:len() - 2) do\n      if (t ==\
    \ string.match(s, \"(%w)%w%w\", j)) then\n        return false\n      end\n  \
    \    j = j + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  return\
    \ true\nend", "    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1,\
    \ i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "   local max_len = 3\n   if string.len(s) < max_len then\n      return\
    \ false\n   end\n   local last = nil\n   for i = 1, max_len do\n      local c\
    \ = string.sub(s, i, i)\n      if last == c then\n         return false\n    \
    \  end\n      last = c\n   end\n   for i = max_len + 1, string.len(s) do\n   \
    \   local c = string.sub(s, i, i)\n      local start = i - max_len + 1\n     \
    \ local sub = string.sub(s, start, i - 1)\n      if c == string.sub(sub, 1, 1)\
    \ then\n         return false\n      end\n      if c == string.sub(sub, 2, 2)\
    \ then\n         return false\n      end\n      if c == string.sub(sub, 3, 3)\
    \ then\n         return false\n      end\n   end\n   return true\nend", "    if\
    \ #s < 3 then\n        return false\n    end\n    local t = {}\n    for i = 1,\
    \ #s - 2 do\n        if t[s:sub(i, i + 2)] == nil then\n            t[s:sub(i,\
    \ i + 2)] = true\n        else\n            return false\n        end\n    end\n\
    \    return true\nend", "    -- your code here\n    local i = 1\n    local l =\
    \ #s\n    if l < 3 then\n        return false\n    end\n    while i <= l - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "   \
    \ if #s < 3 then\n        return false\n    end\n    for i = 3, #s do\n      \
    \  if s:sub(i-2, i) == s:sub(i-1, i+1) then\n            return false\n      \
    \  end\n    end\n    return true\nend", "    -- Your code here\n    return false\n\
    end", "  return string.len(s) >= 3 and string.len(s) % 3 == 0 and s:match(\"(.)%1%1\"\
    ) == nil\nend", "    -- your code here\nend", "    if string.len(s) < 3 then\n\
    \        return false\n    end\n    local l = string.len(s)\n    local c1 = string.sub(s,\
    \ 1, 1)\n    local c2 = string.sub(s, 2, 2)\n    local c3 = string.sub(s, 3, 3)\n\
    \    for i = 4, l do\n        if c1 == c2 and c2 == c3 then\n            return\
    \ false\n        end\n        c1 = c2\n        c2 = c3\n        c3 = string.sub(s,\
    \ i, i)\n    end\n    return true\nend", "    -- your code here\nend", "  assert(type(s)\
    \ == \"string\")\n  if #s < 3 then\n    return false\n  end\n  for i = 1, #s -\
    \ 2 do\n    local part = s:sub(i, i + 2)\n    local distinct = {}\n    for c in\
    \ part:gmatch(\".\") do\n      if distinct[c] then\n        return false\n   \
    \   end\n      distinct[c] = true\n    end\n  end\n  return true\nend", "    --\
    \ TODO: Implement is_happy here.\n    return false\nend", "    -- YOUR CODE HERE\n\
    \    if string.len(s)<3 then\n        return false\n    end\n    for i=1, string.len(s)-2\
    \ do\n        if s:sub(i,i)==s:sub(i+1,i+1) or s:sub(i,i)==s:sub(i+2,i+2) or s:sub(i+1,i+1)==s:sub(i+2,i+2)\
    \ then\n            return false\n        end\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
