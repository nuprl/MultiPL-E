name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is haplua\
  \ or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n-- >>> is_happy(aa)\n\
  -- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n-- false\n-- >>>\
  \ is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\t-- TODO: write your code here\n\tassert(type(s) == \"string\")\n\t\
    local n = #s\n\tif n < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, n - 2 do\n\
    \t\tif s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2)\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\t-- if string\
    \ length is less than 3, return false\n\tif string.len(s) < 3 then\n\t\treturn\
    \ false\n\tend\n\t-- for i=1, length-2\n\tfor i=1,string.len(s)-2 do\n\t\t-- check\
    \ if s[i], s[i+1], s[i+2] are all distinct\n\t\tif s:sub(i,i) == s:sub(i+1,i+1)\
    \ or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1) == s:sub(i+2,i+2) then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "   local a=string.sub(s,1,1)\n\
    \   local b=string.sub(s,2,2)\n   local c=string.sub(s,3,3)\n   local len=string.len(s)\n\
    \   local happy=false\n   if len>=3 then\n      if a~=b and a~=c and b~=c then\n\
    \         happy=true\n      end\n   end\n   return happy\nend", "    local len\
    \ = string.len(s)\n    if len >= 3 then\n        local f = s:sub(1,1)\n      \
    \  local m = s:sub(2,2)\n        local l = s:sub(3,3)\n        if f ~= m and m\
    \ ~= l and l ~= f then\n            return true\n        end\n    end\n    return\
    \ false\nend", end, "  if (s:len() < 3) then\n    return false\n  end\n  local\
    \ i, j = 0, 0\n  while (i < s:len() - 2) do\n    local t = string.match(s, \"\
    (%w)%w%w\", i)\n    j = i + 1\n    while (j < s:len() - 2) do\n      if (t ==\
    \ string.match(s, \"(%w)%w%w\", j)) then\n        return false\n      end\n  \
    \    j = j + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  return\
    \ true\nend", "    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1,\
    \ i + 1) then\n            return false\n        end\n    end\n    return true\n\
    end", "   local max_len = 3\n   if string.len(s) < max_len then\n      return\
    \ false\n   end\n   local last = nil\n   for i = 1, max_len do\n      local c\
    \ = string.sub(s, i, i)\n      if last == c then\n         return false\n    \
    \  end\n      last = c\n   end\n   for i = max_len + 1, string.len(s) do\n   \
    \   local c = string.sub(s, i, i)\n      local start = i - max_len + 1\n     \
    \ local sub = string.sub(s, start, i - 1)\n      if c == string.sub(sub, 1, 1)\
    \ then\n         return false\n      end\n      if c == string.sub(sub, 2, 2)\
    \ then\n         return false\n      end\n      if c == string.sub(sub, 3, 3)\
    \ then\n         return false\n      end\n   end\n   return true\nend", "    if\
    \ #s < 3 then\n        return false\n    end\n    local t = {}\n    for i = 1,\
    \ #s - 2 do\n        if t[s:sub(i, i + 2)] == nil then\n            t[s:sub(i,\
    \ i + 2)] = true\n        else\n            return false\n        end\n    end\n\
    \    return true\nend", "    -- your code here\n    local i = 1\n    local l =\
    \ #s\n    if l < 3 then\n        return false\n    end\n    while i <= l - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n        i = i + 1\n    end\n    return true\nend", "   \
    \ if #s < 3 then\n        return false\n    end\n    for i = 3, #s do\n      \
    \  if s:sub(i-2, i) == s:sub(i-1, i+1) then\n            return false\n      \
    \  end\n    end\n    return true\nend", "    -- Your code here\n    return false\n\
    end", "  return string.len(s) >= 3 and string.len(s) % 3 == 0 and s:match(\"(.)%1%1\"\
    ) == nil\nend", "    -- your code here\nend", "    if string.len(s) < 3 then\n\
    \        return false\n    end\n    local l = string.len(s)\n    local c1 = string.sub(s,\
    \ 1, 1)\n    local c2 = string.sub(s, 2, 2)\n    local c3 = string.sub(s, 3, 3)\n\
    \    for i = 4, l do\n        if c1 == c2 and c2 == c3 then\n            return\
    \ false\n        end\n        c1 = c2\n        c2 = c3\n        c3 = string.sub(s,\
    \ i, i)\n    end\n    return true\nend", "    -- your code here\nend", "  assert(type(s)\
    \ == \"string\")\n  if #s < 3 then\n    return false\n  end\n  for i = 1, #s -\
    \ 2 do\n    local part = s:sub(i, i + 2)\n    local distinct = {}\n    for c in\
    \ part:gmatch(\".\") do\n      if distinct[c] then\n        return false\n   \
    \   end\n      distinct[c] = true\n    end\n  end\n  return true\nend", "    --\
    \ TODO: Implement is_happy here.\n    return false\nend", "    -- YOUR CODE HERE\n\
    \    if string.len(s)<3 then\n        return false\n    end\n    for i=1, string.len(s)-2\
    \ do\n        if s:sub(i,i)==s:sub(i+1,i+1) or s:sub(i,i)==s:sub(i+2,i+2) or s:sub(i+1,i+1)==s:sub(i+2,i+2)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    -- your code here\nend", "  -- your code here\n  for i = 1, #s-2 do\n    if\
    \ s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1)\
    \ == s:sub(i+2,i+2) then\n      return false\n    end\n  end\n  return true\n\
    end", "    if string.len(s) < 3 then\n        return false\n    end\n    for i\
    \ = 1, string.len(s) - 2 do\n        if string.sub(s, i, i) == string.sub(s, i\
    \ + 1, i + 1) or\n           string.sub(s, i, i) == string.sub(s, i + 2, i + 2)\
    \ or\n           string.sub(s, i + 1, i + 1) == string.sub(s, i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend", "  return\
    \ not s:match('(.)%1%1') and s:match('^.%a.%a.$')\nend", "   if #s < 3 then\n\
    \      return false\n   end\n   local first = string.sub(s, 1, 1)\n   local second\
    \ = string.sub(s, 2, 2)\n   local third = string.sub(s, 3, 3)\n   for i = 3, #s\
    \ do\n      if string.sub(s, i, i) == first or string.sub(s, i, i) == second or\
    \ string.sub(s, i, i) == third then\n         return false\n      end\n      first\
    \ = second\n      second = third\n      third = string.sub(s, i, i)\n   end\n\
    \   return true\nend", end, "    -- body\nend", "    --s = string.lower(s)\n \
    \   local last_letter = ' '\n    local last_two_letters = '  '\n    local s =\
    \ string.lower(s)\n    for i = 1, string.len(s) do\n        local c = string.sub(s,\
    \ i, i)\n        if (last_letter == c or last_two_letters == c..last_letter) then\n\
    \            return false\n        end\n        last_two_letters = last_letter..c\n\
    \        last_letter = c\n    end\n    return true\nend", "    -- your code here\n\
    \    return true\nend", end, end, "    -- Write your code here\nend", "\tif string.len(s)\
    \ < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, string.len(s) - 2 do\n\t\tlocal\
    \ sub_s = string.sub(s, i, i + 2)\n\t\tif string.len(sub_s) < 3 then\n\t\t\treturn\
    \ false\n\t\tend\n\t\tlocal c1 = string.sub(sub_s, 1, 1)\n\t\tlocal c2 = string.sub(sub_s,\
    \ 2, 2)\n\t\tlocal c3 = string.sub(sub_s, 3, 3)\n\t\tif c1 == c2 or c1 == c3 or\
    \ c2 == c3 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "  local\
    \ ret = true\n  local length = string.len(s)\n  if length < 3 then\n    ret =\
    \ false\n  else\n    for i = 1, length - 2 do\n      if s[i] == s[i + 1] or s[i]\
    \ == s[i + 2] or s[i + 1] == s[i + 2] then\n        ret = false\n        break\n\
    \      end\n    end\n  end\n  return ret\nend", "\tlocal t = {}\n\tlocal size\
    \ = #s\n\tlocal v = 0\n\t\n\tif size <= 2 then return false end\n\t\n\tfor i =\
    \ 1, size - 2 do\n\t\tfor j = i + 1, size - 1 do\n\t\t\tif s[i] == s[j] then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn true\nend", "  \
    \  if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n \
    \       if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i\
    \ + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n    end\n    return true\nend", "    if string.len(s) <\
    \ 3 then\n        return false\n    end\n    for i = 1, string.len(s) - 2 do\n\
    \        if string.sub(s, i, i + 2) == string.sub(s, i + 1, i + 3) then\n    \
    \        return false\n        end\n    end\n    return true\nend", "  for i =\
    \ 1, #s - 3 do\n    if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  if #s < 3 then\n    return false\n\
    \  end\n  local n = #s - 2\n  for i = 1, n do\n    if s:sub(i, i) == s:sub(i +\
    \ 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i\
    \ + 2, i + 2) then\n      return false\n    end\n  end\n  return true\nend", " \
    \   -- body\nend", "    if string.len(s)<3 then\n        return false\n    end\n\
    \    for i=1,string.len(s)-2 do\n        if string.sub(s,i,i+2)==string.sub(s,i+1,i+3)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "    local s_length = string.len(s)\n    if s_length < 3 then\n        return false\n\
    \    end\n    for i = 1, s_length - 2 do\n        if string.sub(s, i, i) == string.sub(s,\
    \ i + 1, i + 1) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "   -- your code goes here\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"\
    (.)%1\") then\n            return false\n        end\n    end\n    return true\n\
    end", "  if #s < 3 then\n    return false\n  end\n  return (s:gsub('(%a)(%1%1+)',\
    \ '')) == s\nend", "\tif s:len() < 3 then\n\t\treturn false\n\tend\n\tfor i =\
    \ 1, s:len() - 2 do\n\t\tlocal triplet = s:sub(i, i + 2)\n\t\tif triplet:match(\"\
    (.)%1%1\") ~= nil then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend",
  "    for index = 1,#s-2 do\n        if s:sub(index,index+2) == s:sub(index+1,index+3)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "  return true\nend", "    if s:len() < 3 then\n        return false\n    end\n\
    \    for i = 1, s:len() - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1\") then\n\
    \            return false\n        end\n    end\n    return true\nend", "    local\
    \ count = 0\n    local a = 0\n    local b = 0\n    local c = 0\n    local d =\
    \ 0\n    local e = 0\n    local f = 0\n    local g = 0\n    local h = 0\n    local\
    \ i = 0\n    local j = 0\n    local k = 0\n    local l = 0\n    local m = 0\n\
    \    local n = 0\n    local o = 0\n    local p = 0\n    local q = 0\n    local\
    \ r = 0\n    local s = 0\n    local t = 0\n    local u = 0\n    local v = 0\n\
    \    local w = 0\n    local x = 0\n    local y = 0\n    local z = 0\n    if (#s\
    \ < 3) then\n        return false\n    end\n    for i=1,#s do\n        local c\
    \ = s:sub(i,i)\n        if c == \"a\" then\n            a = a + 1\n        elseif\
    \ c == \"b\" then\n            b = b + 1\n        elseif c == \"c\" then\n   \
    \         c = c + 1\n        elseif c == \"d\" then\n            d = d + 1\n \
    \       elseif c == \"e\" then\n            e = e + 1\n        elseif c == \"\
    f\" then\n            f = f + 1\n        elseif c == \"g\" then\n            g\
    \ = g + 1\n        elseif c == \"h\" then\n            h = h + 1\n        elseif\
    \ c == \"i\" then\n            i = i + 1\n        elseif c == \"j\" then\n   \
    \         j = j + 1\n        elseif c == \"k\" then\n            k = k + 1\n \
    \       elseif c == \"l\" then\n            l = l + 1\n        elseif c == \"\
    m\" then\n            m = m + 1\n        elseif c == \"n\" then\n            n\
    \ = n + 1\n        elseif c == \"o\" then\n            o = o + 1\n        elseif\
    \ c == \"p\" then\n            p = p + 1\n        elseif c == \"q\" then\n   \
    \         q = q + 1\n        elseif c == \"r\" then\n            r = r + 1\n \
    \       elseif c ==", "\t-- your code here\n\tlocal len = string.len(s)\n\tif\
    \ len < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, len - 2 do\n\t\tif s[i]\
    \ == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend", "  return false\nend", "    -- your code\
    \ here\n    if string.len(s) < 3 then\n        return false\n    end\n    local\
    \ x = string.sub(s, 1, 3)\n    local n = 0\n    for i = 1, string.len(x) do\n\
    \        for j = 1, string.len(x) do\n            if string.sub(x, i, i) == string.sub(x,\
    \ j, j) then\n                n = n + 1\n            end\n        end\n    end\n\
    \    if n == 6 then\n        return true\n    else\n        return false\n   \
    \ end\nend", "  -- your code here\nend", "\t-- TODO: implement is_happy function\n\
    end", "  local is_happy = false\n  -- check string length\n  if string.len(s)\
    \ >= 3 then\n    -- string is at least 3 characters long\n    is_happy = true\n\
    \    -- get the first 3 characters\n    local s_part = string.sub(s,1,3)\n   \
    \ local last_char = ''\n    -- iterate over the rest of the string\n    for i\
    \ = 4, string.len(s) do\n      -- get the current character\n      local char\
    \ = string.sub(s,i,i)\n      -- check the current character against the previous\
    \ character\n      if last_char == char then\n        -- found a duplicate character;\
    \ not a happy string\n        is_happy = false\n        break\n      end\n   \
    \   -- get the next 3 characters\n      s_part = string.sub(s,i,i+2)\n      --\
    \ update the last character\n      last_char = char\n    end\n  end\n  return\
    \ is_happy\nend", "    if #s < 3 then\n        return false\n    end\n    for\
    \ i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n     \
    \       return false\n        end\n    end\n    return true\nend", "    -- your\
    \ code here\n    if #s < 3 then\n        return false\n    end\n    for i = 1,\
    \ #s - 2 do\n        if s:sub(i, i + 2):find(s:sub(i, i), 2) then\n          \
    \  return false\n        end\n    end\n    return true\nend", "  for i = 1, #s\
    \ - 2 do\n    if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n      return false\n\
    \    end\n  end\n  return true\nend", "  if s == nil or type(s) ~= \"string\"\
    \ then\n    return false\n  end\n  if #s < 3 then\n    return false\n  end\n \
    \ for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend", "  -- Your code here\n\
    end", "    -- your code here\nend", "\tif #s < 3 then\n\t\treturn false\n\tend\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2):match('(.).%1') then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 3, #s do\n        if s:sub(i - 2, i) == s:sub(i\
    \ - 1, i + 1) then\n            return false\n        end\n    end\n    return\
    \ true\nend", "    -- Put your code here\nend", "   if #s < 3 then\n      return\
    \ false\n   end\n   local size = #s\n   for i = 1, size-2 do\n      if s:sub(i,\
    \ i) == s:sub(i+1, i+1) or s:sub(i, i) == s:sub(i+2, i+2) or s:sub(i+1, i+1) ==\
    \ s:sub(i+2, i+2) then\n         return false\n      end\n   end\n   return true\n\
    end", "  -- your code goes here\nend", "    local n = #s\n    if n < 3 then\n\
    \        return false\n    end\n    for i = 1, n - 2 do\n        if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            return false\n        end\n\
    \    end\n    return true\nend", "    -- you code here\n    local temp = s:len()\n\
    \    local first = s:sub(1,1)\n    local second = s:sub(2,2)\n    local third\
    \ = s:sub(3,3)\n    local res = true\n    if temp<3 then return false end\n  \
    \  for i=4,temp do\n        if third==s:sub(i,i) then\n            res = false\n\
    \            break\n        end\n        first = second\n        second = third\n\
    \        third = s:sub(i,i)\n    end\n    return res\nend", "    return false\n\
    end", "    local valid = s:len() >= 3\n    local letters = {}\n    for i = 1,\
    \ s:len() do\n        if letters[s:sub(i, i)] == nil then\n            letters[s:sub(i,\
    \ i)] = true\n        else\n            valid = false\n            break\n   \
    \     end\n    end\n    return valid\nend", "\t-- your code here\nend", "    if\
    \ #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n     \
    \   local first = s:sub(i, i)\n        local second = s:sub(i + 1, i + 1)\n  \
    \      local third = s:sub(i + 2, i + 2)\n        if first == second or first\
    \ == third or second == third then\n            return false\n        end\n  \
    \  end\n    return true\nend", "  assert(type(s) == \"string\")\n  return is_happy_impl(s)\n\
    end", "  local ret = false\n  if string.len(s) >= 3 then\n    local c = string.sub(s,\
    \ 1, 1)\n    local d = string.sub(s, 2, 2)\n    local e = string.sub(s, 3, 3)\n\
    \    ret = c ~= d and c ~= e and d ~= e\n  end\n  return ret\nend", "    if s:len()\
    \ < 3 then\n        return false\n    end\n    for i = 3, s:len() do\n       \
    \ if s:sub(i - 2, i) == s:sub(i - 1, i + 1) then\n            return false\n \
    \       end\n    end\n    return true\nend", "  local j = string.find(s, \"(%w)%1%1\"\
    )\n  return not j and j ~= 1 and string.len(s) >= 3\nend", "   local s_len = s:len()\n\
    \   if s_len < 3 then\n      return false\n   end\n   local s_3rd = s:sub(3,3)\n\
    \   local s_2nd = s:sub(2,2)\n   local s_1st = s:sub(1,1)\n   if s_3rd == s_2nd\
    \ or s_3rd == s_1st or s_2nd == s_1st then\n      return false\n   end\n   return\
    \ true\nend", "   local len = #s\n   if len < 3 then\n      return false\n   end\n\
    \   local c1 = s:sub(1, 1)\n   local c2 = s:sub(2, 2)\n   local c3 = s:sub(3,\
    \ 3)\n   for i = 4, len do\n      if c1 == c2 and c2 == c3 then\n         return\
    \ false\n      end\n      c1 = c2\n      c2 = c3\n      c3 = s:sub(i, i)\n   end\n\
    \   return c1 ~= c2 and c2 ~= c3 and c1 ~= c3\nend", "  if #s < 3 then\n    return\
    \ false\n  end\n  local a, b, c = string.sub(s, 1, 1), string.sub(s, 2, 2), string.sub(s,\
    \ 3, 3)\n  for i = 4, #s do\n    if a == b or b == c or a == c then\n      return\
    \ false\n    end\n    a, b, c = b, c, string.sub(s, i, i)\n  end\n  return true\n\
    end", "  if #s >= 3 then\n    if s:sub(1,3) == s:sub(2,4) or s:sub(1,3) == s:sub(3,5)\
    \ then\n      return false\n    else\n      return is_happy(s:sub(2))\n    end\n\
    \  else\n    return true\n  end\nend", "  -- your code here\n  return false\n\
    end", "    if s:len() < 3 then\n        return false\n    end\n    for i = 1,\
    \ s:len() - 2 do\n        if s:sub(i, i + 2):len() == s:sub(i, i + 2):unique():len()\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  end, "  local result = {}\n  local s_len = string.len(s)\n  local count = 0\n  for\
    \ i = 1, s_len - 2 do\n    if result[string.sub(s, i, i + 2)] == nil then\n  \
    \    result[string.sub(s, i, i + 2)] = 1\n      count = count + 1\n    end\n \
    \ end\n  return count >= 1\nend", "  -- TODO: implement is_happy\nend", "    local\
    \ length = string.len(s)\n    local isHappy = true\n    if length < 3 then\n \
    \       isHappy = false\n    else\n        for i = 1, length - 2 do\n        \
    \    local first = string.sub(s, i, i)\n            local second = string.sub(s,\
    \ i + 1, i + 1)\n            local third = string.sub(s, i + 2, i + 2)\n     \
    \       if first == second or first == third or second == third then\n       \
    \         isHappy = false\n                break\n            end\n        end\n\
    \    end\n    return isHappy\nend", "    local seen = {}\n    local len = string.len(s)\n\
    \    if len < 3 then\n        return false\n    end\n    for i = 1, len - 2 do\n\
    \        local sub = string.sub(s, i, i + 2)\n        if seen[sub] then\n    \
    \        return false\n        end\n        seen[sub] = true\n    end\n    return\
    \ true\nend", "  return s:len() >= 3 and s:sub(1, 3):match('^(%w)(%w)%1%2$') ==\
    \ nil\nend", end, "    -- check if string length is at least 3\n    -- check if\
    \ every 3 consecutive letters are distinct\n    -- return true or false\n    if\
    \ #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n     \
    \   if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2)\
    \ or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n\
    \        end\n    end\n    return true\nend", "    local n = #s\n    if n < 3\
    \ then\n        return false\n    end\n    local t = {}\n    for i = 1, n - 2\
    \ do\n        local a, b, c = s:sub(i, i), s:sub(i + 1, i + 1), s:sub(i + 2, i\
    \ + 2)\n        if a == b or b == c or a == c then\n            return false\n\
    \        end\n        t[a .. b .. c] = true\n    end\n    return not next(t)\n\
    end", "    if s:len() < 3 then\n        return false\n    end\n    local n = s:len()\n\
    \    for i = 1,n-2 do\n        if s:sub(i,i) == s:sub(i+1,i+1) then\n        \
    \    return false\n        end\n    end\n    return true\nend", "    if #s < 3\
    \ then\n        return false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i + 2):match(\"(.)%1\") then\n            return false\n        end\n    end\n\
    \    return true\nend", "  return \"\"\nend", "    return false\nend", "  -- find\
    \ out length of s\n  -- for each 3 consecutive letters\n  -- check if they are\
    \ all distinct ( no repetition )\n  -- if not, return false\n  -- if yes, then\
    \ return true\n  -- if length is less than 3, return false\n  -- if not, then\
    \ return true\n  local len = string.len(s)\n  if len < 3 then\n    return false\n\
    \  end\n  for i = 1, len - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or\
    \ s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i\
    \ + 2) then\n      return false\n    end\n  end\n  return true\nend", "   -- your\
    \ code here\nend", "\tassert(type(s) == \"string\")\n\tlocal prev = ''\n\tlocal\
    \ prevprev = ''\n\tfor i = 1, s:len() do\n\t\tlocal c = s:sub(i, i)\n\t\tif prev\
    \ == c or prevprev == c then\n\t\t\treturn false\n\t\tend\n\t\tprevprev = prev\n\
    \t\tprev = c\n\tend\n\treturn true\nend", "    return false\nend", "  -- local\
    \ is_happy = true\n  -- if s:len() >= 3 then\n  --   for i = 1, s:len()-2 do\n\
    \  --     if s:sub(i, i+2):match(\"%a%a%a\") then\n  --       is_happy = false\n\
    \  --     end\n  --   end\n  -- else\n  --   is_happy = false\n  -- end\n  --\
    \ return is_happy\n  return s:len() >= 3 and not s:match(\"%a%a%a\")\nend", " \
    \   if string.len(s) >= 3 then\n        for i = 1, string.len(s) - 2 do\n    \
    \        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    return false\n\
    end", "  -- your code here\nend", "  if #s < 3 then\n    return false\n  end\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend", "  if #s < 3 then\n\
    \    return false\n  end\n  local f = s:sub(1, 3)\n  local i = 2\n  while i <=\
    \ #s - 2 do\n    if s:sub(i, i + 2) == f then\n      return false\n    end\n \
    \   i = i + 1\n  end\n  return true\nend", "    -- TODO\nend", "    return true\n\
    end", "    if (type(s) ~= \"string\") then return nil end\n    if (string.len(s)\
    \ < 3) then return false end\n    local last_char = s:sub(1, 1)\n    local current_char\
    \ = s:sub(2, 2)\n    local next_char = s:sub(3, 3)\n    if (next_char == last_char\
    \ or next_char == current_char) then return false end\n    if (string.len(s) >\
    \ 3) then\n        return is_happy(s:sub(2))\n    else\n        return true\n\
    \    end\nend", "    -- your code here\n    return false\nend", "  local length\
    \ = string.len(s)\n  if length < 3 then\n    return false\n  end\n  local result\
    \ = true\n  for i = 1, length - 2 do\n    if string.sub(s, i, i) == string.sub(s,\
    \ i + 1, i + 1) or string.sub(s, i, i) == string.sub(s, i + 2, i + 2) or string.sub(s,\
    \ i + 1, i + 1) == string.sub(s, i + 2, i + 2) then\n      result = false\n  \
    \    break\n    end\n  end\n  return result\nend", "    -- Write your code here\n\
    end", "    -- your code here\n    return false\nend", end, "    return nil\nend",
  "  local t = {}\n  local l = s:len()\n  if l < 3 then\n    return false\n  end\n\
    \  local i = 1\n  while i < l do\n    local c1 = s:sub(i, i)\n    local c2 = s:sub(i\
    \ + 1, i + 1)\n    local c3 = s:sub(i + 2, i + 2)\n    if c1 == c2 or c1 == c3\
    \ or c2 == c3 then\n      return false\n    end\n    i = i + 3\n  end\n  return\
    \ true\nend", "    if type(s) ~= \"string\" then return false end\n    if string.len(s)\
    \ < 3 then return false end\n    for i = 1, string.len(s) - 2 do\n        if string.sub(s,\
    \ i, i) == string.sub(s, i + 1, i + 1) or string.sub(s, i, i) == string.sub(s,\
    \ i + 2, i + 2) or string.sub(s, i + 1, i + 1) == string.sub(s, i + 2, i + 2)\
    \ then\n            return false\n        end\n    end\n    return true\nend",
  "\tlocal res\n\treturn res\nend", "\tlocal slen = s:len()\n\tif slen < 3 then\n\t\
    \treturn false\n\tend\n\tlocal t = {}\n\tlocal res = true\n\tfor i = 1,slen-2\
    \ do\n\t\tif not t[s:sub(i,i+2)] then\n\t\t\tt[s:sub(i,i+2)] = true\n\t\telse\n\
    \t\t\tres = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn res\nend", "  if string.len(s)\
    \ < 3 then\n    return false\n  end\n  for i = 3, string.len(s) do\n    if string.sub(s,\
    \ i - 2, i - 2) == string.sub(s, i - 1, i - 1) or\n       string.sub(s, i - 2,\
    \ i - 2) == string.sub(s, i, i) or\n       string.sub(s, i - 1, i - 1) == string.sub(s,\
    \ i, i) then\n      return false\n    end\n  end\n  return true\nend", "\tif s:len()\
    \ < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, s:len() - 2 do\n\t\tif s:sub(i,\
    \ i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i +\
    \ 1, i + 1) == s:sub(i + 2, i + 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return true\nend", "  if s:len() >= 3 then\n    for i = 1,s:len()-2 do\n     \
    \ if s:sub(i,i) == s:sub(i+1,i+1) and s:sub(i,i) == s:sub(i+2,i+2) then\n    \
    \    return false\n      end\n    end\n    return true\n  else\n    return false\n\
    \  end\nend", "  local arr = utils.split(s, \"\")\n  local len = #arr\n  if len\
    \ < 3 then\n    return false\n  end\n  for i = 1, len - 2 do\n    local letter\
    \ = arr[i]\n    if arr[i+1] == letter or arr[i+2] == letter then\n      return\
    \ false\n    end\n  end\n  return true\nend", "   if #s < 3 then\n      return\
    \ false\n   end\n   for i = 3, #s do\n      if s:sub(i - 2, i) == s:sub(i - 1,\
    \ i + 1) then\n         return false\n      end\n   end\n   return true\nend",
  "  -- YOUR CODE HERE\n  local s_len = string.len(s)\n  if s_len < 3 then\n    return\
    \ false\n  end\n  if s_len % 3 ~= 0 then\n    return false\n  end\n  local i =\
    \ 1\n  while i < s_len do\n    if s:sub(i, i+2) == s:sub(i+3, i+5) then\n    \
    \  return false\n    end\n    i = i + 3\n  end\n  return true\nend", "    if s:len()\
    \ < 3 then\n        return false\n    end\n    for i = 1, s:len() - 2 do\n   \
    \     if s:sub(i, i + 2):find(s:sub(i, i)) then\n            return false\n  \
    \      end\n    end\n    return true\nend", "\t-- your code goes here\n\tif #s\
    \ < 3 then\n\t\treturn false\n\tend\n\tlocal exist = {}\n\tfor i = 1, #s - 2 do\n\
    \t\tlocal sub = s:sub(i, i + 2)\n\t\tif exist[sub] then\n\t\t\treturn false\n\t\
    \tend\n\t\texist[sub] = true\n\tend\n\treturn true\nend", "    for i = 1, #s -\
    \ 3 do\n        if s:sub(i, i+2) == s:sub(i+1, i+3) then\n            return false\n\
    \        end\n    end\n    return true\nend", "\t--check if string is of length\
    \ 3 or more\n\tif #s < 3 then\n\t\treturn false\n\tend\n\t--iterate through the\
    \ string\n\tfor i = 1, #s-2 do\n\t\t--check if the 3 consecutive letters are distinct\n\
    \t\tif s:sub(i,i) == s:sub(i+1,i+1) or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1)\
    \ == s:sub(i+2,i+2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\n\
    end", "    -- check length\n    local length = #s\n    if length < 3 then\n  \
    \      return false\n    end", "    if s == nil or #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):find(s:sub(i,\
    \ i)) ~= nil then\n            return false\n        end\n    end\n    return\
    \ true\nend", "   -- your code here\nend", "\tif string.len(s) < 3 then\n\t\t\
    return false\n\tend\n\tfor i = 1, string.len(s) - 2 do\n\t\tif string.byte(s,\
    \ i) == string.byte(s, i + 1) or string.byte(s, i) == string.byte(s, i + 2) or\
    \ string.byte(s, i + 1) == string.byte(s, i + 2) then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn true\nend", "  -- your code goes here\nend", "    if #s <\
    \ 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n        if\
    \ s:sub(i, i + 2):match(\"(.).%1\") then\n            return false\n        end\n\
    \    end\n    return true\nend", "    local length = string.len(s)\n    if length\
    \ < 3 then\n        return false\n    end\n    local x = string.sub(s, 1, 1)\n\
    \    local y = string.sub(s, 2, 2)\n    local z = string.sub(s, 3, 3)\n    if\
    \ x == y or y == z or x == z then\n        return false\n    end\n    for i =\
    \ 4, length, 1 do\n        x = y\n        y = z\n        z = string.sub(s, i,\
    \ i)\n        if x == y or y == z or x == z then\n            return false\n \
    \       end\n    end\n    return true\nend", "\treturn false\nend", "\tif #s <\
    \ 3 then\n\t\treturn false\n\tend\n\tfor i = 1, #s-2 do\n\t\tif s:sub(i, i+2):find(s:sub(i,\
    \ i), 2) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend", "\tassert(s,\
    \ \"Expected a string\")\n\tif #s < 3 then\n\t\treturn false\n\tend\n\tlocal prev\
    \ = s:sub(1, 1)\n\tlocal current = s:sub(2, 2)\n\tfor i = 3, #s do\n\t\tlocal\
    \ next = s:sub(i, i)\n\t\tif prev == current or current == next or prev == next\
    \ then\n\t\t\treturn false\n\t\tend\n\t\tprev = current\n\t\tcurrent = next\n\t\
    end\n\treturn true\nend", "   -- TODO: YOUR CODE HERE\nend", "  -- your code here\n\
    \  return nil\nend", "    if #s < 3 then\n        return false\n    end\n    local\
    \ first = s:sub(1, 1)\n    local second = s:sub(2, 2)\n    local third = s:sub(3,\
    \ 3)\n    if first == second or second == third or first == third then\n     \
    \   return false\n    end\n    return true\nend", "  for i = 1, #s-2 do\n    local\
    \ s1 = s:sub(i, i)\n    local s2 = s:sub(i+1, i+1)\n    local s3 = s:sub(i+2,\
    \ i+2)\n    if s1 == s2 or s1 == s3 or s2 == s3 then\n      return false\n   \
    \ end\n  end\n  return true\nend", "    -- your code here\nend", "\t-- If the\
    \ string is less than 3 characters then it is invalid.\n\tif #s < 3 then\n\t\t\
    return false\n\tend", "  if #s < 3 then\n    return false\n  end\n  for i = 1,\
    \ #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i\
    \ + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            return false\n        end\n    end\n \
    \   return true\nend", "    if #s < 3 then\n        return false\n    end\n  \
    \  local x = string.sub(s, 1, 3)\n    for i = 2, #s - 2 do\n        local y =\
    \ string.sub(s, i, i + 2)\n        if x == y then\n            return false\n\
    \        end\n        x = y\n    end\n    return true\nend", "\ts = string.lower(s)\n\
    \tlocal len = #s\n\tlocal char = {}\n\tlocal is_happy = true\n\tfor i = 1, len\
    \ do\n\t\tchar[i] = string.sub(s, i, i)\n\tend\n\tfor i = 1, len-2 do\n\t\tif\
    \ (char[i] == char[i+1]) then\n\t\t\tis_happy = false\n\t\t\tbreak\n\t\tend\n\t\
    \tif (char[i] == char[i+2]) then\n\t\t\tis_happy = false\n\t\t\tbreak\n\t\tend\n\
    \tend\n\treturn is_happy\nend", "  local len = string.len(s)\n  if len < 3 then\n\
    \    return false\n  end\n  for i = 1, len - 2 do\n    if s[i] == s[i + 1] or\
    \ s[i] == s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n    end\n\
    \  end\n  return true\nend", "\tlocal str = string.gsub(s, \" \", \"\")\n\tlocal\
    \ length = string.len(str)\n\tif length < 3 then\n\t\treturn false\n\tend\n\t\
    local first = string.sub(str, 1, 1)\n\tlocal second = string.sub(str, 2, 2)\n\t\
    local third = string.sub(str, 3, 3)\n\tif first == second or second == third or\
    \ first == third then\n\t\treturn false\n\tend\n\treturn true\nend\nprint(is_happy(\"\
    a\"))\nprint(is_happy(\"aa\"))\nprint(is_happy(\"abcd\"))\nprint(is_happy(\"aabb\"\
    ))\nprint(is_happy(\"adb\"))\nprint(is_happy(\"xyy\"))", "  -- your code here\n\
    end", "  return false\nend", "  if #s < 3 then\n    return false\n  end\n  for\
    \ i = 1, #s - 2 do\n    if s:sub(i, i + 2):find(s:sub(i, i), 2) then\n      return\
    \ false\n    end\n  end\n  return true\nend", "   local result = true\n   local\
    \ n = #s\n   if n >= 3 then\n      for i = 1, n - 2 do\n         if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n            result = false\n           \
    \ break\n         end\n      end\n   else\n      result = false\n   end\n   return\
    \ result\nend", "  -- your code here\n  local n = string.len(s)\n  if n < 3 then\
    \ return false end\n  for i = 1, n - 2 do\n    if s[i] == s[i + 1] or s[i] ==\
    \ s[i + 2] or s[i + 1] == s[i + 2] then\n      return false\n    end\n  end\n\
    \  return true\nend", end, "  local ok, res = pcall(string.match, s, '^(.)(.)(.)$')\n\
    \  return ok and res ~= s and res ~= string.reverse(res)\nend", "  return false\n\
    end", "  if #s < 3 then\n    return false\n  end\n  local subs = {}\n  for i =\
    \ 1, #s - 2 do\n    local sub = s:sub(i, i + 2)\n    if subs[sub] then\n     \
    \ return false\n    end\n    subs[sub] = true\n  end\n  return true\nend", " \
    \   -- write your code here\n    return not (s:len() < 3 or s:sub(1, 1) == s:sub(2,\
    \ 2) or s:sub(2, 2) == s:sub(3, 3) or s:sub(1, 1) == s:sub(3, 3))\nend", "  --\
    \ your code goes here\nend", "    return (#s >= 3 and not (s:match(\"(.)%1%1\"\
    ) or s:match(\"(.)%1(.)%2\"))) and true or false\nend", "    -- your code here\n\
    end", "    --\nend", "  local len = #s\n  if len < 3 then\n    return false\n\
    \  end\n  local i = 1\n  while i < len do\n    if s:sub(i, i+2):byte(1) == s:sub(i,\
    \ i+2):byte(2) or\n      s:sub(i, i+2):byte(1) == s:sub(i, i+2):byte(3) or\n \
    \     s:sub(i, i+2):byte(2) == s:sub(i, i+2):byte(3) then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend", "    if #s < 3 then\n   \
    \     return false\n    end\n    for i = 0, #s - 3 do\n        local tmp = s:sub(i\
    \ + 1, i + 3)\n        if tmp:sub(1, 1) == tmp:sub(2, 2) or tmp:sub(1, 1) == tmp:sub(3,\
    \ 3) or tmp:sub(2, 2) == tmp:sub(3, 3) then\n            return false\n      \
    \  end\n    end\n    return true\nend", "    -- check length\n    if (s:len()\
    \ < 3) then\n        return false\n    end", "   local len = #s\n   if len < 3\
    \ then\n      return false\n   end\n   local last = \"\"\n   for i = 1, len do\n\
    \      local cur = s:sub(i, i)\n      if cur == last then\n         return false\n\
    \      end\n      last = cur\n   end\n   return true\nend", "  \n  -- a string\
    \ is haplua if its length is at least 3 and every 3 consecutive letters are distinct\n\
    \  -- \"abcd\" is haplua since a and b are distinct, b and c are distinct, c and\
    \ d are distinct.\n  if string.len(s) < 3 then\n    return false -- not enough\
    \ letters\n  end\n  \n  -- check the first 3 letters\n  if s:sub(1,3) == s:sub(2,3)\
    \ then\n    return false -- 2 of the letters were the same\n  end\n  \n  -- check\
    \ the rest of the letters\n  local prev = s:sub(1,3)\n  for i = 4,string.len(s)\
    \ do\n    local curr = s:sub(i-2,i)\n    if curr == prev then\n      return false\
    \ -- 2 of the letters were the same\n    end\n    prev = curr\n  end\n  \n  return\
    \ true -- all of the letters were different\nend", "    local n = s:len()\n  \
    \  if n < 3 then\n        return false\n    end\n    local m = math.floor(n /\
    \ 3)\n    local t = {}\n    for i = 1, n do\n        local c = s:sub(i, i)\n \
    \       if t[c] then\n            return false\n        end\n        t[c] = true\n\
    \    end\n    return true\nend", "   local function is_happy_aux(s, i)\n     \
    \ if i < 3 then\n         return true\n      else\n         local c = s:sub(i,\
    \ i)\n         local p = s:sub(i - 1, i - 1)\n         local pp = s:sub(i - 2,\
    \ i - 2)\n         if c == p and p == pp then\n            return false\n    \
    \     else\n            return is_happy_aux(s, i - 1)\n         end\n      end\n\
    \   end\n   return is_happy_aux(s, #s)\nend", "    local utils = require \"utils\"\
    \n    local is_happy = true\n    if s:len() >= 3 then\n        local l = s:len()\n\
    \        for i = 1, l - 2 do\n            if s:sub(i, i) == s:sub(i + 1, i + 1)\
    \ or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2,\
    \ i + 2) then\n                is_happy = false\n                break\n     \
    \       end\n        end\n    else\n        is_happy = false\n    end\n    return\
    \ is_happy\nend", "  -- your code here\n  if #s<3 then return false end\n  local\
    \ s0=s:sub(1,1)\n  local s1=s:sub(2,2)\n  local s2=s:sub(3,3)\n  if s0==s1 or\
    \ s1==s2 or s0==s2 then return false end\n  for i=4,#s do\n    s0=s1\n    s1=s2\n\
    \    s2=s:sub(i,i)\n    if s0==s1 or s1==s2 or s0==s2 then return false end\n\
    \  end\n  return true\nend", "    if not s then\n        return false\n    end\n\
    \    if #s < 3 then\n        return false\n    end\n    local c_map = {}\n   \
    \ for i = 1, #s do\n        local c = s:sub(i, i)\n        if c_map[c] then\n\
    \            return false\n        end\n        c_map[c] = true\n    end\n   \
    \ return true\nend", "\tlocal t = { [s:sub(1,1)] = 1, [s:sub(2,2)] = 1, [s:sub(3,3)]\
    \ = 1 }\n\tlocal i = 3\n\twhile i <= #s do\n\t\tif t[s:sub(i,i)] then\n\t\t\t\
    return false\n\t\tend\n\t\ti = i + 1\n\t\tt[s:sub(i-2,i-2)] = nil\n\t\tt[s:sub(i,i)]\
    \ = 1\n\tend\n\treturn true\nend\nassert(not is_happy(\"a\"))\nassert(not is_happy(\"\
    aa\"))\nassert(is_happy(\"abcd\"))\nassert(not is_happy(\"aabb\"))\nassert(is_happy(\"\
    adb\"))\nassert(not is_happy(\"xyy\"))", '    -- Write your code here', "    local\
    \ i = 1\n    while i < #s - 1 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\"\
    ) then\n            return false\n        end\n        i = i + 1\n    end\n  \
    \  return true\nend", "\tif #s < 3 then\n\t\treturn false\n\tend\n\tfor i = 1,\
    \ #s - 2 do\n\t\tif s:sub(i, i + 2):find(s:sub(i, i), 1, true) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn true\nend", "  local len = #s\n  if len < 3\
    \ then\n    return false\n  end\n  for i = 1, len - 2 do\n    if s:sub(i, i +\
    \ 2):find(s:sub(i, i), 1, true) then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match('^(.)%1%1$')\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if #s < 3\
    \ then\n    return false\n  end\n  for i = 1, #s - 2 do\n    if s:sub(i, i + 2):match('(.)%1%1')\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  if string.len(s)\
    \ < 3 then\n    return false\n  end\n  for i = 1, string.len(s) - 2 do\n    if\
    \ s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or\
    \ s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n    end\n\
    \  end\n  return true\nend", "  -- YOUR CODE HERE\n  if #s < 3 then\n    return\
    \ false\n  end\n  for i = 0, #s - 3 do\n    if s:sub(i + 1, i + 3) == s:sub(i\
    \ + 2, i + 4) then\n      return false\n    end\n  end\n  return true\nend", " \
    \   if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i + 2):find(s:sub(i, i)) then\n            return false\n\
    \        end\n    end\n    return true\nend", "  assert(type(s) == \"string\"\
    )\n  if #s < 3 then\n    return false\n  end\n  if #s == 3 then\n    return (s:byte(1)\
    \ ~= s:byte(2)) and (s:byte(2) ~= s:byte(3)) and (s:byte(1) ~= s:byte(3))\n  end\n\
    \  local first = s:byte(1)\n  local second = s:byte(2)\n  local third = s:byte(3)\n\
    \  if first == second or second == third or first == third then\n    return false\n\
    \  end\n  return is_happy(s:sub(2))\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    local first = s:sub(1, 1)\n    local second = s:sub(2, 2)\n\
    \    local third = s:sub(3, 3)\n    for i = 4, #s, 1 do\n        if first == second\
    \ or second == third or first == third then\n            return false\n      \
    \  end\n        first = second\n        second = third\n        third = s:sub(i,\
    \ i)\n    end\n    return true\nend", end, "    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            return false\n        end\n    end\n \
    \   return true\nend", "   -- Your code here\n   local s_len = string.len(s)\n\
    \   if s_len < 3 then\n      return false\n   end\n   local v = s:sub(1, 3)\n\
    \   if v:len() == 3 and v:sub(1, 1) ~= v:sub(2, 2) and v:sub(2, 2) ~= v:sub(3,\
    \ 3) and v:sub(1, 1) ~= v:sub(3, 3) then\n      return true\n   end\n   return\
    \ false\nend", "   -- body\nend", "    if #s<3 then return false end\n    for\
    \ i=1,#s-2 do\n        if s:sub(i,i+2)==s:sub(i+1,i+3) then return false end\n\
    \    end\n    return true\nend", "  if s:len() < 3 then\n    return false\n  end\n\
    \  local max_index = s:len() - 3\n  for i = 1, max_index do\n    local first =\
    \ s:sub(i, i)\n    local second = s:sub(i + 1, i + 1)\n    local third = s:sub(i\
    \ + 2, i + 2)\n    if first == second or first == third or second == third then\n\
    \      return false\n    end\n  end\n  return true\nend", "    if type(s) ~= \"\
    string\" then\n        return false\n    end\n    if #s < 3 then\n        return\
    \ false\n    end\n    -- check if character is unique\n    local found = {}\n\
    \    for i = 1, #s do\n        if found[s:sub(i, i)] then\n            return\
    \ false\n        end\n        found[s:sub(i, i)] = true\n    end\n    -- check\
    \ if trio is unique\n    local trio = {}\n    for i = 1, #s - 2 do\n        if\
    \ trio[s:sub(i, i + 2)] then\n            return false\n        end\n        trio[s:sub(i,\
    \ i + 2)] = true\n    end\n    return true\nend", "  -- body\nend", "  local n\
    \ = #s\n  if n < 3 then\n    return false\n  end\n  for i = 1, n - 2 do\n    if\
    \ s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or\
    \ s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n    end\n\
    \  end\n  return true\nend", "    if string.len(s) < 3 then\n        return false\n\
    \    end\n    local i = 1\n    while i < string.len(s) do\n        if string.sub(s,\
    \ i, i + 2) == string.sub(s, i + 1, i + 3) then\n            return false\n  \
    \      end\n        i = i + 1\n    end\n    return true\nend", "    if s:len()\
    \ < 3 then\n        return false\n    end\n    local ss = s:sub(1, 3)\n    for\
    \ i = 4, s:len() do\n        if ss:sub(1, 2) == s:sub(i - 1, i) then\n       \
    \     return false\n        end\n        ss = ss:sub(2) .. s:sub(i, i)\n    end\n\
    \    return true\nend", "    -- error(\"Not implemented yet\")\nend", "  local\
    \ out = true\n  if #s < 3 then\n    out = false\n  else\n    local t = { [s:sub(1,\
    \ 3)] = true }\n    for i = 4, #s do\n      local v = s:sub(i - 2, i)\n      if\
    \ t[v] then\n        out = false\n        break\n      else\n        t[v] = true\n\
    \      end\n    end\n  end\n  return out\nend", "    if #s < 3 then\n        return\
    \ false\n    end\n    local i = 0\n    while i < #s do\n        local v1 = s:sub(i,\
    \ i)\n        local v2 = s:sub(i + 1, i + 1)\n        local v3 = s:sub(i + 2,\
    \ i + 2)\n        if v1 == v2 or v1 == v3 or v2 == v3 then\n            return\
    \ false\n        end\n        i = i + 3\n    end\n    return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
