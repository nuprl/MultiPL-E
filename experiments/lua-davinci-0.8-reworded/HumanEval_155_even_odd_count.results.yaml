language: lua
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local counter = {0, 0}\n    while num > 0 do\n    \
    \    local digit = num % 10\n        if digit % 2 == 0 then\n            counter[1]\
    \ = counter[1] + 1\n        else\n            counter[2] = counter[2] + 1\n  \
    \      end\n        num = (num - digit) / 10\n    end\n    return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_5xdplr.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpg_5xdplr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    if num < 0 then num = -num end\n    repeat\n     \
    \   local last_digit = num % 10\n        if last_digit % 2 == 0 then\n       \
    \     count[1] = count[1] + 1\n        else\n            count[2] = count[2] +\
    \ 1\n        end\n        num = (num - last_digit) / 10\n    until num == 0\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  local num = math.abs(num)\n  while num > 0 do\n    local\
    \ digit = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = (num - digit) / 10\n  end\n  return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimj1v2ag.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpimj1v2ag.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 0, 9 do\n       \
    \ local c = count_digits(num, i)\n        if i % 2 == 0 then\n            even_count\
    \ = even_count + c\n        else\n            odd_count = odd_count + c\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe1_0b5n.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmppe1_0b5n.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmppe1_0b5n.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 0, num do\n    if math.floor(i\
    \ / 2) == i / 2 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99ttt5gc.lua:23:\
    \ expected: {0, 1}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmp99ttt5gc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_digit_count = math.floor(math.log10(math.abs(num)))\
    \ + 1\n    for i = 1, num_digit_count do\n        local digit = math.floor(math.abs(num\
    \ / math.pow(10, i - 1))) % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq1th_69.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpcq1th_69.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for d in tostring(num):gmatch(\"%d\") do\n    if d % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local abs_num = abs(num)\n    local even_count = 0\n    local odd_count = 0\n\
    \    local c\n    while abs_num > 0 do\n        c = abs_num % 10\n        if c\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        abs_num = floor(abs_num\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwczcwx3.lua:8:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpkwczcwx3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkwczcwx3.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  assert(type(num)\
    \ == \"number\", \"Need an integer!\")\n  local even, odd = 0, 0\n  while num\
    \ ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #num do\n        if (i % 2\
    \ == 0) then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht49ehvr.lua:10:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpht49ehvr.lua:10: in local 'candidate'\n\t/tmp/tmpht49ehvr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in pairs(string.totable(tostring(math.abs(num))))\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hb83faw.lua:9:\
    \ attempt to call a nil value (field 'totable')\nstack traceback:\n\t/tmp/tmp6hb83faw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6hb83faw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local tbl = {0, 0}\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            tbl[1] = tbl[1]\
    \ + 1\n        else\n            tbl[2] = tbl[2] + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwkoq9bs.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpgwkoq9bs.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local t = {0, 0}\n    local n = num < 0 and -num or num\n    while n > 0 do\n\
    \        local d = n % 10\n        if d % 2 == 0 then\n            t[1] = t[1]\
    \ + 1\n        else\n            t[2] = t[2] + 1\n        end\n        n = (n\
    \ - d) / 10\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp806uds12.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp806uds12.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local dn = math.abs(num)\n    local t = {0, 0}\n    while dn > 0 do\n      \
    \  local d = dn % 10\n        if d % 2 == 0 then\n            t[1] = t[1] + 1\n\
    \        else\n            t[2] = t[2] + 1\n        end\n        dn = math.floor(dn\
    \ / 10)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpnix_um.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpfpnix_um.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ count = {0, 0}\n  if num < 0 then\n    count[1] = 1\n    num = -num\n  end\n\
    \  while num > 0 do\n    if num % 2 == 0 then\n      count[1] = count[1] + 1\n\
    \    else\n      count[2] = count[2] + 1\n    end\n    num = num // 10\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperafvmay.lua:28:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmperafvmay.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num = math.abs(num)\n\
    \    while num > 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryxufnwc.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpryxufnwc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(sub(tostring(num), i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw70jv__u.lua:11:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmpw70jv__u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpw70jv__u.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ assert(num < 1e10 and num > -1e10)\n    if num == 0 then\n        return {1,\
    \ 0}\n    end\n    local even_count = 0\n    local odd_count = 0\n    while num\
    \ ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n  \
    \          even_count = even_count + 1\n        else\n            odd_count =\
    \ odd_count + 1\n        end\n        num = num // 10\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ result = {0, 0}\n  for i = num, 0, -1 do\n    local d = i % 10\n    if d % 2\
    \ == 0 then\n      result[1] = result[1] + 1\n    else\n      result[2] = result[2]\
    \ + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoh95jodl.lua:23:\
    \ expected: {0, 1}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpoh95jodl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  if num % 2 == 0 then\n            even = even + 1\n        else\n         \
    \   odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5o_unkp.lua:24:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmpf5o_unkp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for c in num:gmatch(\".\") do\n        if c == \"\
    -\" then\n            continue\n        end\n        local n = tonumber(c)\n \
    \       if n % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6g48nk17.lua:12: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    num = math.abs(num)\n   \
    \ while num > 0 do\n        if num % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5qicxql.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpj5qicxql.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    for digit in string.gmatch(tostring(num), \"%d\")\
    \ do\n        count[1 + (digit % 2)] = count[1 + (digit % 2)] + 1\n    end\n \
    \   return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ odd = 0\n  local even = 0\n  local is_neg = false\n  if num < 0 then\n    is_neg\
    \ = true\n    num = -num\n  end\n  while num > 0 do\n    local last_digit = num\
    \ % 10\n    if last_digit % 2 == 0 then\n      even = even + 1\n    else\n   \
    \   odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnmoh3x3.lua:37:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmppnmoh3x3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, char in ipairs(string.split(num, \"\")) do\n    if\
    \ tonumber(char) % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_cbzh1h.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpn_cbzh1h.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpn_cbzh1h.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  if\
    \ num < 0 then num = -num end\n  local even, odd = 0, 0\n  while num > 0 do\n\
    \    local remainder = num % 10\n    if remainder % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num /\
    \ 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9__6mcb8.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp9__6mcb8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local digits = table.copy(digit_table(num))\n    local count = {0, 0}\n    for\
    \ i = 1, #digits do\n        if digits[i] % 2 == 0 then\n            count[1]\
    \ = count[1] + 1\n        else\n            count[2] = count[2] + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kbqsyq6.lua:8:\
    \ attempt to call a nil value (global 'digit_table')\nstack traceback:\n\t/tmp/tmp0kbqsyq6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0kbqsyq6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014555
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    num = tostring(num)\n   \
    \ for n in num:gmatch(\"[0-9]\") do\n        n = tonumber(n)\n        if n % 2\
    \ == 0 then\n            even_count = even_count + 1\n        else\n         \
    \   odd_count = odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local even, odd = 0, 0\n    while num > 0 do\n    \
    \    if num % 2 == 0 then\n            even = even + 1\n        else\n       \
    \     odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pjneud2.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp2pjneud2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    if num < 0 then\n       \
    \ num = num * -1\n    end\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = num // 10\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwmd9dfod.lua:34:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpwmd9dfod.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  if num == 0 then\n    even = 1\n  else\n    while\
    \ num ~= 0 do\n      local digit = num % 10\n      if (digit % 2) == 0 then\n\
    \        even = even + 1\n      else\n        odd = odd + 1\n      end\n     \
    \ num = (num - digit) / 10\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014560
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even_count = 0\n\tlocal odd_count = 0\n\tlocal n = num\n\twhile n ~= 0 do\n\t\
    \tif (n % 2) == 0 then\n\t\t\teven_count = even_count + 1\n\t\telse\n\t\t\todd_count\
    \ = odd_count + 1\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014560
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ if type(num) ~= \"number\" then\n        error(format(\"bad argument #1 to '%s'\
    \ (number expected, got %s)\", \"even_odd_count\", type(num)), 2)\n    end\n \
    \   local n = abs(num)\n    local even, odd = 0, 0\n    while n > 0 do\n     \
    \   if n % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n        n = floor(n / 10)\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplngoqdvo.lua:11:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmplngoqdvo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmplngoqdvo.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    for i = 1, num_to_string(num):len() do\n        local\
    \ digit = num_to_string(num):sub(i, i)\n        if tonumber(digit) % 2 == 0 then\n\
    \            count[1] = count[1] + 1\n        else\n            count[2] = count[2]\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6loe9gb.lua:9:\
    \ attempt to call a nil value (global 'num_to_string')\nstack traceback:\n\t/tmp/tmps6loe9gb.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmps6loe9gb.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 0, 20 do\n    local digit =\
    \ math.floor(num / 10^i) % 10\n    if digit % 2 == 0 then\n      even_count =\
    \ even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n\
    \  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnslmphu7.lua:24:\
    \ expected: {0, 1}\nactual: {20, 1}\nstack traceback:\n\t/tmp/tmpnslmphu7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local t = {0, 0}\n    for i = 1, #tostring(num) do\n        local digit = tonumber(tostring(num):sub(i,\
    \ i))\n        if digit % 2 == 0 then\n            t[1] = t[1] + 1\n        else\n\
    \            t[2] = t[2] + 1\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps46g100j.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmps46g100j.lua:11: in local 'candidate'\n\t/tmp/tmps46g100j.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    num = math.abs(num)\n   \
    \ local rem = 0\n    while num > 0 do\n        rem = num % 10\n        if rem\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num = math.floor(num /\
    \ 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx6w6iw4f.lua:34:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpx6w6iw4f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if math.abs(num) % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = math.floor(num / 10)\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014560
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    num = math.abs(num)\n    while num > 0 do\n    \
    \    if num % 2 == 0 then\n            even = even + 1\n        else\n       \
    \     odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3tjm1dg.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpu3tjm1dg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbm1580l.lua:14:\
    \ expected: {0, 1}\nactual: nil\nstack traceback:\n\t/tmp/tmpkbm1580l.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num ~= 0 do\n    local digit = num % 10\n    if digit\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  if num == 0 then\n    even_count =\
    \ 1\n  else\n    while num ~= 0 do\n      if num % 2 == 0 then\n        even_count\
    \ = even_count + 1\n      else\n        odd_count = odd_count + 1\n      end\n\
    \      num = math.floor(num / 10)\n    end\n  end\n  return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ n = num >= 0 and num or -num\n  local res = {0, 0}\n  for d in tostring(n):gmatch(\"\
    %d\") do\n    if tonumber(d) % 2 == 0 then\n      res[1] = res[1] + 1\n    else\n\
    \      res[2] = res[2] + 1\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\tnum = math.abs(num)\n\twhile num > 0 do\n\t\tif num % 2\
    \ == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\
    \tnum = math.floor(num / 10)\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnfqugkl.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpxnfqugkl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for d in tostring(num):gmatch('%d') do\n       \
    \ if tonumber(d) % 2 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_cnt = 0\n  local odd_cnt = 0\n  for digit in tostring(num):gmatch('%d')\
    \ do\n    if tonumber(digit) % 2 == 0 then\n      even_cnt = even_cnt + 1\n  \
    \  else\n      odd_cnt = odd_cnt + 1\n    end\n  end\n  return {even_cnt, odd_cnt}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even_digits = 0\n\tlocal odd_digits = 0\n\tlocal num_copy = math.abs(num)\n\t\
    while num_copy > 0 do\n\t\tlocal digit = num_copy % 10\n\t\tif digit % 2 == 0\
    \ then\n\t\t\teven_digits = even_digits + 1\n\t\telse\n\t\t\todd_digits = odd_digits\
    \ + 1\n\t\tend\n\t\tnum_copy = math.floor(num_copy / 10)\n\tend\n\treturn {even_digits,\
    \ odd_digits}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t71dv9g.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp0t71dv9g.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    while num ~= 0 do\n        local last_digit = num\
    \ % 10\n        if last_digit % 2 == 0 then\n            count[1] = count[1] +\
    \ 1\n        else\n            count[2] = count[2] + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_odd = {0, 0}\n    local reminder\n    num = math.abs(num)\n    while\
    \ num > 0 do\n        reminder = num % 10\n        if reminder % 2 == 0 then\n\
    \            even_odd[1] = even_odd[1] + 1\n        else\n            even_odd[2]\
    \ = even_odd[2] + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return even_odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1icrev39.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp1icrev39.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\twhile (num > 0) do\n\t\tif (num % 2 == 0) then\n\t\t\teven\
    \ = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprriex_73.lua:24:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmprriex_73.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 0, 9 do\n    local p = 10^i\n    local x = math.floor(math.abs(num)\
    \ / p) % 10\n    if x % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a_uucnl.lua:24:\
    \ expected: {0, 1}\nactual: {9, 1}\nstack traceback:\n\t/tmp/tmp1a_uucnl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local even_count = 0\n    local odd_count = 0\n   \
    \ for digit in tostring(num):gmatch(\".\") do\n        digit = tonumber(digit)\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local tb = {0, 0}\n    while num ~= 0 do\n        if num % 2 == 0 then\n   \
    \         tb[1] = tb[1] + 1\n        else\n            tb[2] = tb[2] + 1\n   \
    \     end\n        num = math.floor(num / 10)\n    end\n    return tb\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for c in string.gmatch(tostring(num), \"%d\") do\n\
    \        if tonumber(c) % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for digit in num:gmatch('%d') do\n\
    \    if (tonumber(digit) % 2) == 0 then\n      even_count = even_count + 1\n \
    \   else\n      odd_count = odd_count + 1\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3jyuh1cw.lua:10:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmp3jyuh1cw.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp3jyuh1cw.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local n = tostring(num)\n    for i =\
    \ 1, #n do\n        if n:sub(i, i) == '-' then\n            num = num / 10\n \
    \       elseif math.fmod(num, 2) == 0 then\n            even = even + 1\n    \
    \        num = num / 10\n        else\n            odd = odd + 1\n           \
    \ num = num / 10\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh_0xxbn.lua:29:\
    \ expected: {1, 1}\nactual: {0, 2}\nstack traceback:\n\t/tmp/tmpqh_0xxbn.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ s = tostring(num)\n\tlocal even = 0\n\tlocal odd = 0\n\tfor i = 1, #s do\n\t\
    \tif tonumber(s:sub(i, i)) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\
    \todd = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_xqjjn6.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpa_xqjjn6.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpa_xqjjn6.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ digits = to_table(num)\n  local even_count = 0\n  local odd_count = 0\n  for\
    \ _, digit in ipairs(digits) do\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n\
    \  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptetfzv9m.lua:8:\
    \ attempt to call a nil value (global 'to_table')\nstack traceback:\n\t/tmp/tmptetfzv9m.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmptetfzv9m.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tonumber(tostring(num):sub(i, i))\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpye1zdzl8.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpye1zdzl8.lua:12: in local 'candidate'\n\t/tmp/tmpye1zdzl8.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    while (num ~= 0) do\n        local digit = num % 10\n\
    \        num = math.floor(num / 10)\n        if (digit % 2 == 0) then\n      \
    \      count[1] = count[1] + 1\n        else\n            count[2] = count[2]\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  num\
    \ = math.abs(num)\n  local even_count = 0\n  local odd_count = 0\n  while num\
    \ > 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlkmsnb5.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpvlkmsnb5.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ odd, even = 0, 0\n\tfor i = 0, math.abs(num) do\n\t\t-- grab the last digit\
    \ of num, then remove it\n\t\tlocal last_digit = num % 10\n\t\tnum = (num - last_digit)\
    \ / 10\n\t\tif last_digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\
    \todd = odd + 1\n\t\tend\n\tend\n\treturn { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl589jbh.lua:25:\
    \ expected: {0, 1}\nactual: {7, 1}\nstack traceback:\n\t/tmp/tmpcl589jbh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even = 0\n\tlocal odd = 0\n\tfor d in tostring(num):gmatch('.') do\n\t\tlocal\
    \ digit = tonumber(d)\n\t\tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\t\
    else\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1299hu3u.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp1299hu3u.lua:12: in local 'candidate'\n\t/tmp/tmp1299hu3u.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ odds = 0\n  local evens = 0\n  while num ~= 0 do\n    if num % 2 == 0 then\n\
    \      evens = evens + 1\n    else\n      odds = odds + 1\n    end\n    num =\
    \ math.floor(num / 10)\n  end\n  return {evens, odds}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local f = function(acc, x)\n        if x % 2 == 0 then\n            acc[1] =\
    \ acc[1] + 1\n        else\n            acc[2] = acc[2] + 1\n        end\n   \
    \     return acc\n    end\n    return foldl(f, {0, 0}, num_to_list(num))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5npc9zpd.lua:16:\
    \ attempt to call a nil value (global 'num_to_list')\nstack traceback:\n\t/tmp/tmp5npc9zpd.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp5npc9zpd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  while num ~= 0 do\n    local val = num % 10\n \
    \   if val % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n\
    \    end\n    num = (num - val) / 10\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = num % 10\n        if digit % 2 == 0 then\n       \
    \     even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n        num = (num - digit) / 10\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpviaq2p4i.lua:26:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpviaq2p4i.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local res = {}\n  for _, i in ipairs(to_digits(num))\
    \ do\n    if i % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n  end\n  res[1] = even\n  res[2] = odd\n  return res\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxxje4y5_.lua:11:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpxxje4y5_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxxje4y5_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for char in tostring(num):gmatch(\".\"\
    ) do\n        if char == \"-\" then\n            continue\n        end\n     \
    \   if tonumber(char) % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpngi3zy99.lua:13: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even = 0\n\tlocal odd = 0\n\tfor i = 1, #tostring(num) do\n\t\tlocal ch = tostring(num):sub(i,\
    \ i)\n\t\tif ch == '0' or ch == '2' or ch == '4' or ch == '6' or ch == '8' then\n\
    \t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp783dr79h.lua:25:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmp783dr79h.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i in tostring(num):gmatch('.')\
    \ do\n        local digit = tonumber(i)\n        if digit % 2 == 0 then\n    \
    \        even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0jav_d1.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpq0jav_d1.lua:12: in local 'candidate'\n\t/tmp/tmpq0jav_d1.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for _, digit in pairs(digits(num))\
    \ do\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n    else\n\
    \      odd_count = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaa0i3uoc.lua:10:\
    \ attempt to call a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmpaa0i3uoc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpaa0i3uoc.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    local digits = break_digit(num)\n    for i, v in\
    \ ipairs(digits) do\n        if mod(v, 2) == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmrgqa3gd.lua:9:\
    \ attempt to call a nil value (global 'break_digit')\nstack traceback:\n\t/tmp/tmpmrgqa3gd.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpmrgqa3gd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\twhile num > 0 do\n\t\tlocal digit = num % 10\n\t\tif digit\
    \ % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\
    \t\tnum = math.floor(num / 10)\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom6dtaj4.lua:25:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpom6dtaj4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, tostring(num):len() do\n    if (tonumber(tostring(num):sub(i,\
    \ i)) % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd + 1\n \
    \   end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpksv1wqkx.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpksv1wqkx.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpksv1wqkx.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even = 0\n\tlocal odd = 0\n\t\n\twhile num ~= 0 do\n\t\tlocal tmp = num % 10\n\
    \t\t\n\t\tif tmp % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd\
    \ + 1\n\t\tend\n\t\t\n\t\tnum = math.floor(num / 10)\n\tend\n\t\n\treturn {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {\n        even = 0,\n        odd = 0\n    }\n    while num ~=\
    \ 0 do\n        if num % 2 == 0 then\n            count.even = count.even + 1\n\
    \        else\n            count.odd = count.odd + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_aisak0.lua:26:\
    \ expected: {0, 1}\nactual: {even=0, odd=1}\nstack traceback:\n\t/tmp/tmp1_aisak0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for _, char in utf8.codes(num) do\n    local c = tonumber(utf8.char(char))\n\
    \    if (c % 2 == 0) then\n      even = even + 1\n    else\n      odd = odd +\
    \ 1\n    end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio1kfl70.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'c')\nstack traceback:\n\
    \t/tmp/tmpio1kfl70.lua:11: in local 'candidate'\n\t/tmp/tmpio1kfl70.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  if num >= 0 then\n    num = tostring(num)\n    even, odd\
    \ = #(num:gsub(\"(%d)(%d)\", function(m1, m2)\n        if m1 == \"0\" or m1 ==\
    \ \"2\" or m1 == \"4\" or m1 == \"6\" or m1 == \"8\" then\n          return \"\
    X\"\n        else\n          return m1\n        end\n      end):gsub(\"X\", \"\
    \")),\n      #(num:gsub(\"(%d)(%d)\", function(m1, m2)\n        if m1 == \"1\"\
    \ or m1 == \"3\" or m1 == \"5\" or m1 == \"7\" or m1 == \"9\" then\n         \
    \ return \"X\"\n        else\n          return m1\n        end\n      end):gsub(\"\
    X\", \"\"))\n  else\n    num = tostring(num):sub(2)\n    even, odd = #(num:gsub(\"\
    (%d)(%d)\", function(m1, m2)\n        if m1 == \"0\" or m1 == \"2\" or m1 == \"\
    4\" or m1 == \"6\" or m1 == \"8\" then\n          return \"X\"\n        else\n\
    \          return m1\n        end\n      end):gsub(\"X\", \"\")),\n      #(num:gsub(\"\
    (%d)(%d)\", function(m1, m2)\n        if m1 == \"1\" or m1 == \"3\" or m1 == \"\
    5\" or m1 == \"7\" or m1 == \"9\" then\n          return \"X\"\n        else\n\
    \          return m1\n        end\n      end):gsub(\"X\", \"\"))\n  end\n  return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3onh2jn.lua:48:\
    \ expected: {0, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmpy3onh2jn.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_digit_count = 0\n  local odd_digit_count = 0\n  while num ~= 0 do\n   \
    \ local digit = num % 10\n    if digit % 2 == 0 then\n      even_digit_count =\
    \ even_digit_count + 1\n    else\n      odd_digit_count = odd_digit_count + 1\n\
    \    end\n    num = (num - digit) / 10\n  end\n  return {even_digit_count, odd_digit_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    local positive = num >= 0\n    if positive then\n\
    \        num = num\n    else\n        num = -num\n    end\n    while num > 0 do\n\
    \        local digit = num % 10\n        if digit % 2 == 0 then\n            count[1]\
    \ = count[1] + 1\n        else\n            count[2] = count[2] + 1\n        end\n\
    \        num = (num - digit) / 10\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiluqcyft.lua:37:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpiluqcyft.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_odd = {0, 0}\n  for n in tostring(num):gmatch(\"%d\") do\n    even_odd[tonumber(n)\
    \ % 2 + 1] = even_odd[tonumber(n) % 2 + 1] + 1\n  end\n  return even_odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ tbl = {0, 0}\n  while num ~= 0 do\n    if (num % 2) == 0 then\n      tbl[1]\
    \ = tbl[1] + 1\n    else\n      tbl[2] = tbl[2] + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ nums = {}\n  local str = tostring(num)\n  for i = 1, string.len(str) do\n  \
    \  local dig = tonumber(string.sub(str, i, i))\n    if dig % 2 == 0 then\n   \
    \   nums[1] = (nums[1] or 0) + 1\n    else\n      nums[2] = (nums[2] or 0) + 1\n\
    \    end\n  end\n  return nums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n4zlrhi.lua:24:\
    \ expected: {0, 1}\nactual: {2=1}\nstack traceback:\n\t/tmp/tmp8n4zlrhi.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for i = 1, #tostring(num) do\n    local digit = tostring(num):sub(i,\
    \ i)\n    if (digit == '0' or digit == '2' or digit == '4' or digit == '6' or\
    \ digit == '8') then\n      even = even + 1\n    else\n      odd = odd + 1\n \
    \   end\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemiizml3.lua:24:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpemiizml3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ count = {0, 0}\n  while num > 0 do\n    count[1 + (num % 2)] = count[1 + (num\
    \ % 2)] + 1\n    num = (num - (num % 10)) / 10\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlw5lr0n.lua:20:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmphlw5lr0n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for char in string.gmatch(num, \"%d\") do\n    if tonumber(char)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even = even + 1\n        else\n \
    \           odd = odd + 1\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tassert(type(num)\
    \ == \"number\", \"integer expected\")\n\tlocal odd_num, even_num = 0, 0\n\tlocal\
    \ digit\n\twhile num ~= 0 do\n\t\tdigit = math.abs(num % 10)\n\t\tif digit % 2\
    \ == 0 then\n\t\t\teven_num = even_num + 1\n\t\telse\n\t\t\todd_num = odd_num\
    \ + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn {even_num, odd_num}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for d in tostring(num):gmatch(\"%d\"\
    ) do\n        if tonumber(d) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _,v in string.gmatch(tostring(num),\
    \ \"%d\") do\n        local n = tonumber(v)\n        if n % 2 == 0 then\n    \
    \        even_count = even_count + 1\n        else\n            odd_count = odd_count\
    \ + 1\n        end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8nn4k31.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'n')\nstack traceback:\n\
    \t/tmp/tmp_8nn4k31.lua:12: in local 'candidate'\n\t/tmp/tmp_8nn4k31.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ positive = true\n\tif num < 0 then\n\t\tpositive = false\n\t\tnum = -num\n\t\
    end\n\tlocal count = {0, 0}\n\twhile num > 0 do\n\t\tlocal digit = num % 10\n\t\
    \tif digit % 2 == 0 then\n\t\t\tcount[1] = count[1] + 1\n\t\telse\n\t\t\tcount[2]\
    \ = count[2] + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\tif not positive\
    \ then\n\t\tcount[2] = count[2] + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzw8ydb71.lua:33:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpzw8ydb71.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local rem = num % 10\n        if rem % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  --\
    \ Write your code here\n  local even_odd = {0, 0}\n  local str_num = num .. \"\
    \"\n  for _, ch in pairs(str_num) do\n    local n = tonumber(ch)\n    if n and\
    \ n % 2 == 0 then\n      even_odd[1] = even_odd[1] + 1\n    else\n      even_odd[2]\
    \ = even_odd[2] + 1\n    end\n  end\n  return even_odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsgxz66es.lua:11:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpsgxz66es.lua:11: in local 'candidate'\n\t/tmp/tmpsgxz66es.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ odd_num = 0\n  local even_num = 0\n  local num_abs = math.abs(num)\n  for _,\
    \ d in string.gmatch(tostring(num_abs), \"(%d)\") do\n    if num_util.is_even(d)\
    \ then\n      even_num = even_num + 1\n    else\n      odd_num = odd_num + 1\n\
    \    end\n  end\n  return {even_num, odd_num}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1jbr5l6h.lua:12:\
    \ attempt to index a nil value (global 'num_util')\nstack traceback:\n\t/tmp/tmp1jbr5l6h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1jbr5l6h.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local len = 0\n    local\
    \ is_negative = false\n    if num < 0 then\n        is_negative = true\n     \
    \   num = -num\n    end\n    while num > 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n        num =\
    \ math.floor(num / 10)\n        len = len + 1\n    end\n    return { even_count,\
    \ odd_count }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamcfxf3v.lua:39:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpamcfxf3v.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local last\
    \ = num % 10\n        if last % 2 == 0 then\n            even = even + 1\n   \
    \     else\n            odd = odd + 1\n        end\n        num = (num - last)\
    \ / 10\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for digit in tostring(num):gmatch('%d') do\n    if tonumber(digit)\
    \ % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ if num == 0 then\n        return {0, 0}\n    end\n    local even = 0\n    local\
    \ odd = 0\n    while num ~= 0 do\n        local m = num % 10\n        if m % 2\
    \ == 0 then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n        num = num // 10\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    if num < 0 then\n        num = math.abs(num)\n\
    \    end\n    while num > 0 do\n        if num % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_uqj16b.lua:34:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpt_uqj16b.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for digit in tostring(num):gmatch(\"\
    .\") do\n        if tonumber(digit) % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzcnclx5v.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpzcnclx5v.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzcnclx5v.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local result = {}\n    if\
    \ num >= 0 then\n        while num > 0 do\n            if (num % 10) % 2 == 0\
    \ then\n                even_count = even_count + 1\n            else\n      \
    \          odd_count = odd_count + 1\n            end\n            num = math.floor(num\
    \ / 10)\n        end\n    else\n        while num < 0 do\n            if (num\
    \ % 10) % 2 == 0 then\n                even_count = even_count + 1\n         \
    \   else\n                odd_count = odd_count + 1\n            end\n       \
    \     num = math.floor(num / 10)\n        end\n    end\n    result[1] = even_count\n\
    \    result[2] = odd_count\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local abs_num = abs(num)\n    local count = {\n        even = 0,\n        odd\
    \ = 0\n    }\n    while abs_num > 0 do\n        local digit = abs_num % 10\n \
    \       if digit % 2 == 0 then\n            count.even = count.even + 1\n    \
    \    else\n            count.odd = count.odd + 1\n        end\n        abs_num\
    \ = math.floor(abs_num / 10)\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpohvlyy39.lua:8:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpohvlyy39.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpohvlyy39.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_cnt = 0\n  local odd_cnt = 0\n  while (num ~= 0) do\n    local digit =\
    \ num % 10\n    if (digit % 2 == 0) then\n      even_cnt = even_cnt + 1\n    else\n\
    \      odd_cnt = odd_cnt + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even_cnt, odd_cnt}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ is_positive = num >= 0\n  num = math.abs(num)\n  local even_count = 0\n  local\
    \ odd_count = 0\n  while num > 0 do\n    local d = num % 10\n    if d % 2 == 0\
    \ then\n      even_count = even_count + 1\n    else\n      odd_count = odd_count\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return is_positive and\
    \ {even_count, odd_count} or {odd_count, even_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb4han753.lua:32:\
    \ expected: {1, 0}\nactual: {0, 1}\nstack traceback:\n\t/tmp/tmpb4han753.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_num = 0\n    local odd_num = 0\n    local num = tostring(num)\n \
    \   for i = 1, #num do\n        if tonumber(num:sub(i, i)) % 2 == 0 then\n   \
    \         even_num = even_num + 1\n        else\n            odd_num = odd_num\
    \ + 1\n        end\n    end\n    return {even_num, odd_num}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6kacfi4.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpo6kacfi4.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpo6kacfi4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local function is_even(n)\n        if n % 2 == 0 then\n            return true\n\
    \        else\n            return false\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ppa4d7b.lua:29: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for _, n in string.gmatch(num, \"%d\"\
    ) do\n        if n % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpblkm4ak2.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'n')\nstack traceback:\n\
    \t/tmp/tmpblkm4ak2.lua:11: in local 'candidate'\n\t/tmp/tmpblkm4ak2.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for n in tostring(num):gmatch(\"\
    .\") do\n        n = tonumber(n)\n        if n % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdh8h0u8.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'n')\nstack traceback:\n\
    \t/tmp/tmpbdh8h0u8.lua:12: in local 'candidate'\n\t/tmp/tmpbdh8h0u8.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local digit\
    \ = num % 10\n    if digit % 2 == 0 then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even = 0\n\tlocal odd = 0\n\twhile num > 0 do\n\t\tlocal digit = num % 10\n\t\
    \tif digit % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\
    \t\tend\n\t\tnum = num // 10\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnqnvj8l.lua:26:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmptnqnvj8l.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local num = math.abs(num)\n    local even, odd = 0, 0\n    while num > 0 do\n\
    \        local digit = num % 10\n        if digit % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = (num - digit) / 10\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb1x4o5e.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmphb1x4o5e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ -- e_count, o_count\n    local e_count, o_count = 0, 0\n    local num_abs =\
    \ math.abs(num)\n    while num_abs > 0 do\n        if num_abs % 2 == 0 then\n\
    \            e_count = e_count + 1\n        else\n            o_count = o_count\
    \ + 1\n        end\n        num_abs = math.floor(num_abs / 10)\n    end\n    return\
    \ {e_count, o_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91sar1gz.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp91sar1gz.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  local n = math.abs(num)\n  while n > 0 do\n    local r =\
    \ n % 10\n    if r % 2 == 0 then\n      even = even + 1\n    else\n      odd =\
    \ odd + 1\n    end\n    n = (n - r) / 10\n  end\n  return {even, odd}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zoexxap.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp6zoexxap.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for _, digit in string.gmatch(tostring(num),\
    \ '%d') do\n        digit = tonumber(digit)\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawh8l2qq.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmpawh8l2qq.lua:12: in local 'candidate'\n\t/tmp/tmpawh8l2qq.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\tnum = math.abs(num)\n\twhile num > 0 do\n\t\tif (num % 10)\
    \ % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\
    \t\tnum = math.floor(num / 10)\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5qndv3v.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmph5qndv3v.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ n = math.abs(num)\n\tlocal even_cnt = 0\n\tlocal odd_cnt = 0\n\tlocal digit\n\
    \twhile n > 0 do\n\t\tdigit = n % 10\n\t\tif digit % 2 == 0 then\n\t\t\teven_cnt\
    \ = even_cnt + 1\n\t\telse\n\t\t\todd_cnt = odd_cnt + 1\n\t\tend\n\t\tn = math.floor(n\
    \ / 10)\n\tend\n\treturn {even_cnt, odd_cnt}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5rcp27g.lua:34:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpq5rcp27g.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, ch in utf8.codes(tostring(num)) do\n    \
    \    if ch % 2 == 0 then\n            even = even + 1\n        else\n        \
    \    odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgqfsrky.lua:23:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpdgqfsrky.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for digit in tostring(num):gmatch('%d')\
    \ do\n    if tonumber(digit) % 2 == 0 then\n      even_count = even_count + 1\n\
    \    else\n      odd_count = odd_count + 1\n    end\n  end\n  return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    if num < 0 then\n        num = -num\n    end\n \
    \   while num > 0 do\n        if num % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjm90u7g.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpyjm90u7g.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ count = {0, 0}\n\tif num < 0 then num = -num end\n\twhile num > 0 do\n\t\tif\
    \ num % 2 == 0 then\n\t\t\tcount[1] = count[1] + 1\n\t\telse\n\t\t\tcount[2] =\
    \ count[2] + 1\n\t\tend\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc1f45ju.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpxc1f45ju.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_cnt = 0\n  local odd_cnt = 0\n  for i = 1,#tostring(num) do\n    local\
    \ n = num % 10\n    if n % 2 == 0 then\n      even_cnt = even_cnt + 1\n    else\n\
    \      odd_cnt = odd_cnt + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even_cnt, odd_cnt}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfdpke75.lua:26:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpzfdpke75.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  assert(type(num)\
    \ == \"number\")\n  local s = num >= 0 and tostring(num) or tostring(num):sub(2)\n\
    \  local even_digits, odd_digits = 0, 0\n  for i = 1, #s do\n    local n = tonumber(s:sub(i,\
    \ i))\n    if n % 2 == 0 then\n      even_digits = even_digits + 1\n    else\n\
    \      odd_digits = odd_digits + 1\n    end\n  end\n  return {even_digits, odd_digits}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local odd_even = {0, 0}\n    local num_copy = math.abs(num)\n    while num_copy\
    \ > 0 do\n        local digit = num_copy % 10\n        if digit % 2 == 0 then\n\
    \            odd_even[1] = odd_even[1] + 1\n        else\n            odd_even[2]\
    \ = odd_even[2] + 1\n        end\n        num_copy = math.floor(num_copy / 10)\n\
    \    end\n    return odd_even\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67k9x6dg.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp67k9x6dg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  local str = tostring(num)\n  for i = 1, #str do\n    local\
    \ sub = str:sub(i, i)\n    if tonumber(sub) % 2 == 0 then\n      even = even +\
    \ 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdoriod7u.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpdoriod7u.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdoriod7u.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    local num = math.abs(num)\n    while num > 0 do\n\
    \        if (num % 10) % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n        num = math.floor(num / 10)\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c0x29iv.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp2c0x29iv.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num = math.abs(num)\n\
    \    while num > 0 do\n        if (num % 10) % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlohk_2w.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmprlohk_2w.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ assert(type(num) == \"number\", \"Expect a number.\")\n    local count = {0,\
    \ 0}\n    for c in tostring(num):gmatch(\"%d\") do\n        if (tonumber(c) %\
    \ 2) == 0 then\n            count[1] = count[1] + 1\n        else\n          \
    \  count[2] = count[2] + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, #tostring(num) do\n    local num1 =\
    \ tonumber(tostring(num):sub(i, i))\n    if num1 % 2 == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0_9zrzx.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'num1')\nstack traceback:\n\
    \t/tmp/tmpj0_9zrzx.lua:12: in local 'candidate'\n\t/tmp/tmpj0_9zrzx.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for digit in tostring(num):gmatch(\"\
    %d\") do\n        local digit = tonumber(digit)\n        if digit % 2 == 0 then\n\
    \            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n    end\n    return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ t = {0, 0}\n\tif num == 0 then\n\t\tt[1] = 1\n\t\treturn t\n\tend\n\tnum = math.abs(num)\n\
    \twhile num > 0 do\n\t\tlocal mod = num % 10\n\t\tif mod % 2 == 0 then\n\t\t\t\
    t[1] = t[1] + 1\n\t\telse\n\t\t\tt[2] = t[2] + 1\n\t\tend\n\t\tnum = math.floor(num\
    \ / 10)\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  num\
    \ = math.abs(num)\n  local even, odd = 0, 0\n  while num > 0 do\n    local digit\
    \ = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n  \
    \    odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ggd2sw9.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp2ggd2sw9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local sign = num >= 0 and\
    \ 1 or -1\n    num = math.abs(num)\n    while num > 0 do\n        local digit\
    \ = num % 10\n        if (digit % 2) == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    \
    \    num = math.floor(num / 10)\n    end\n    return {even_count * sign, odd_count\
    \ * sign}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6yjjbva.lua:28:\
    \ expected: {1, 1}\nactual: {-1, -1}\nstack traceback:\n\t/tmp/tmpp6yjjbva.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_odd = {0, 0}\n  for digit in string.gmatch(tostring(math.abs(num)), '%d')\
    \ do\n    even_odd[digit % 2 == 0 and 1 or 2] = even_odd[digit % 2 == 0 and 1\
    \ or 2] + 1\n  end\n  return even_odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 0, 9 do\n       \
    \ local n = num\n        local digit_count = 0\n        while n > 0 do\n     \
    \       if n % 10 == i then\n                digit_count = digit_count + 1\n \
    \           end\n            n = math.floor(n / 10)\n        end\n        if i\
    \ % 2 == 0 then\n            even_count = even_count + digit_count\n        else\n\
    \            odd_count = odd_count + digit_count\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2l4qo5m.lua:32:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpu2l4qo5m.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 1, #tostring(num)\
    \ do\n        local digit = tostring(num):sub(i, i)\n        if digit == '0' or\
    \ tonumber(digit) % 2 == 0 then\n            even_count = even_count + 1\n   \
    \     else\n            odd_count = odd_count + 1\n        end\n    end\n    return\
    \ {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qvd8yx2.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp0qvd8yx2.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0qvd8yx2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #num do\n        local digit\
    \ = num[i]\n        if digit % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb5m_z4z8.lua:10:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpb5m_z4z8.lua:10: in local 'candidate'\n\t/tmp/tmpb5m_z4z8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _, v in pairs(int_to_table(num))\
    \ do\n        if (v % 2 == 0) then\n            even_count = even_count + 1\n\
    \        else\n            odd_count = odd_count + 1\n        end\n    end\n \
    \   return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnufr0vvh.lua:10:\
    \ attempt to call a nil value (global 'int_to_table')\nstack traceback:\n\t/tmp/tmpnufr0vvh.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpnufr0vvh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local num_str = tostring(num)\n    local even_count = 0\n    local odd_count\
    \ = 0\n    for _, c in pairs(num_str) do\n        local n = tonumber(c)\n    \
    \    if n % 2 == 0 then\n            even_count = even_count + 1\n        else\n\
    \            odd_count = odd_count + 1\n        end\n    end\n    return {even_count,\
    \ odd_count}\nend\nassert_equal({2, 0}, even_odd_count(12))\nassert_equal({1,\
    \ 2}, even_odd_count(123))\nassert_equal({2, 1}, even_odd_count(1234))\nassert_equal({1,\
    \ 1}, even_odd_count(-12))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpg0lpshk6.lua:11: bad argument #1 to 'for iterator' (table\
    \ expected, got string)\nstack traceback:\n\t[C]: in function 'next'\n\t/tmp/tmpg0lpshk6.lua:11:\
    \ in local 'even_odd_count'\n\t/tmp/tmpg0lpshk6.lua:21: in main chunk\n\t[C]:\
    \ in ?\n"
  stdout: ''
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ odd, even = 0, 0\n  while num > 0 do\n    if num % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1\n    end\n    num = num / 10\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_57qgw6h.lua:23:\
    \ expected: {0, 1}\nactual: {0, 325}\nstack traceback:\n\t/tmp/tmp_57qgw6h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for digit in string.gmatch(tostring(math.abs(num)),\
    \ \"%d\") do\n    digit = tonumber(digit)\n    if digit % 2 == 0 then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n  end\n\
    \  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  num\
    \ = math.abs(num)\n  local even_count = 0\n  local odd_count = 0\n  while num\
    \ > 0 do\n    local d = num % 10\n    if d % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num = (num - d)\
    \ / 10\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mky3sl2.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp4mky3sl2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, string.len(num) do\n        if num[i]\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2plsx6p.lua:10:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmpq2plsx6p.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq2plsx6p.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    if num < 0 then\n        num = -num\n    end\n \
    \   while num > 0 do\n        if (num % 10) % 2 == 0 then\n            even =\
    \ even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = num // 10\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg42k74mu.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpg42k74mu.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    num = math.abs(num)\n    while num > 0 do\n    \
    \    local digit = num % 10\n        if digit % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = (num - digit) / 10\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnrbxtik.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpvnrbxtik.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014556
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i in num:gmatch(\"[%d]\"\
    ) do\n        if ((tonumber(i) % 2) == 0) then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mc1ml_c.lua:10:\
    \ attempt to index a number value (local 'num')\nstack traceback:\n\t/tmp/tmp7mc1ml_c.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp7mc1ml_c.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014556
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for d in tostring(num):gmatch('%d') do\n    if\
    \ d % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n\
    \  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014556
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  while num ~= 0 do\n    local last_digit = num % 10\n   \
    \ if last_digit % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    num = math.abs(num)\n    while num > 0 do\n    \
    \    local digit = num % 10\n        if digit % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmebrn_vi.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpmebrn_vi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014560
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tnum\
    \ = math.abs(num)\n\tlocal even, odd = 0, 0\n\twhile num > 0 do\n\t\tif (num %\
    \ 10) % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\t\
    end\n\t\tnum = math.floor(num / 10)\n\tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1o118ti.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpd1o118ti.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local num = math.abs(num)\n    while\
    \ num > 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8kknslc.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmph8kknslc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i in tostring(num):gmatch(\"%d\") do\n     \
    \   if tonumber(i) % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #(tostring(num)) do\n    \
    \    local digit = tonumber(string.sub(tostring(num), i, i))\n        if digit\
    \ % 2 == 0 then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0dnuh672.lua:12:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp0dnuh672.lua:12: in local 'candidate'\n\t/tmp/tmp0dnuh672.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, #tostring(num) do\n        local d =\
    \ tonumber(tostring(num):sub(i, i))\n        if d % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy5ofto3a.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'd')\nstack traceback:\n\
    \t/tmp/tmpy5ofto3a.lua:11: in local 'candidate'\n\t/tmp/tmpy5ofto3a.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num ~= 0 do\n        local digit\
    \ = num % 10\n        if digit % 2 == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  if tonumber(tostring(num):sub(i, i)) % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1iakv4f3.lua:11:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp1iakv4f3.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp1iakv4f3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for n in tostring(num):gmatch('%d') do\n       \
    \ if tonumber(n) % 2 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  num = math.abs(num)\n  while num > 0 do\n    local n = num\
    \ % 10\n    if n % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1\n    end\n    num = (num - n) / 10\n  end\n  return {even, odd}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdts8sh0e.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpdts8sh0e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    while num ~= 0 do\n        local digit = num % 10\n\
    \        if digit % 2 == 0 then\n            count[1] = count[1] + 1\n       \
    \ else\n            count[2] = count[2] + 1\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014566
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for _, digit in utils.dg(_,\
    \ num) do\n        if digit % 2 == 0 then\n            even_count = even_count\
    \ + 1\n        else\n            odd_count = odd_count + 1\n        end\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppm2qv4yv.lua:10:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmppm2qv4yv.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppm2qv4yv.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i = 1, string.len(num) do\n        local digit\
    \ = tonumber(string.sub(num, i, i))\n        if digit % 2 == 0 then\n        \
    \    even = even + 1\n        else\n            odd = odd + 1\n        end\n \
    \   end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9c1xgl5f.lua:11:\
    \ attempt to perform arithmetic on a nil value (local 'digit')\nstack traceback:\n\
    \t/tmp/tmp9c1xgl5f.lua:11: in local 'candidate'\n\t/tmp/tmp9c1xgl5f.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ count = {0, 0}\n  while num ~= 0 do\n    count[((num % 10) % 2) + 1] = count[((num\
    \ % 10) % 2) + 1] + 1\n    num = math.floor(num / 10)\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014566
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    while num ~= 0 do\n        if (num % 2) == 0 then\n\
    \            count[1] = count[1] + 1\n        else\n            count[2] = count[2]\
    \ + 1\n        end\n        num = num / 10\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrla6ixo.lua:23:\
    \ expected: {0, 1}\nactual: {0, 325}\nstack traceback:\n\t/tmp/tmphrla6ixo.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local number = math.abs(num)\n\
    \    while number > 0 do\n        local digit = number % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        number = math.floor(number\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96yk1ev8.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp96yk1ev8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tnum\
    \ = math.abs(num)\n\tlocal t = {0, 0}\n\tfor d in tostring(num):gmatch(\"%d\"\
    ) do\n\t\tif d:byte() % 2 == 0 then\n\t\t\tt[1] = t[1] + 1\n\t\telse\n\t\t\tt[2]\
    \ = t[2] + 1\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local digits = tostring(math.abs(num))\n    local even_count = 0\n    local\
    \ odd_count = 0\n    for i = 1, #digits do\n        local n = tonumber(digits:sub(i,\
    \ i))\n        if n % 2 == 0 then\n            even_count = even_count + 1\n \
    \       else\n            odd_count = odd_count + 1\n        end\n    end\n  \
    \  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for digit in tostring(num):gmatch('%d')\
    \ do\n        if tonumber(digit) % 2 == 0 then\n            even = even + 1\n\
    \        else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for _, v in pairs(to_digits(num)) do\n\
    \    if v % 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jw2_rte.lua:10:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmp_jw2_rte.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp_jw2_rte.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ t = {0, 0}\n\tfor n in tostring(num):gmatch(\"%d\") do\n\t\tif tonumber(n) %\
    \ 2 == 0 then\n\t\t\tt[1] = t[1] + 1\n\t\telse\n\t\t\tt[2] = t[2] + 1\n\t\tend\n\
    \tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ assert(is_positive_integer(num))\n    local even_count = 0\n    local odd_count\
    \ = 0\n    while num > 0 do\n        local digit = num % 10\n        if digit\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        num = (num - digit) /\
    \ 10\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx96b8vg_.lua:8:\
    \ attempt to call a nil value (global 'is_positive_integer')\nstack traceback:\n\
    \t/tmp/tmpx96b8vg_.lua:8: in local 'candidate'\n\t/tmp/tmpx96b8vg_.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_cnt = 0\n    local odd_cnt = 0\n    num = math.abs(num)\n    while\
    \ num > 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n\
    \            even_cnt = even_cnt + 1\n        else\n            odd_cnt = odd_cnt\
    \ + 1\n        end\n        num = (num - digit) / 10\n    end\n    return {even_cnt,\
    \ odd_cnt}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjcvpapg.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpdjcvpapg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    num = math.abs(num)\n    while num > 0 do\n    \
    \    local digit = num % 10\n        if math.fmod(digit, 2) == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \        num = math.floor(num / 10)\n    end\n    return {even, odd}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvuxi627r.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpvuxi627r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014566
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ if num == 0 then\n        return {0, 0}\n    end\n    local even, odd = 0, 0\n\
    \    for _, n in ipairs(to_digits(num)) do\n        if n % 2 == 0 then\n     \
    \       even = even + 1\n        else\n            odd = odd + 1\n        end\n\
    \    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpir3__vtt.lua:12:\
    \ attempt to call a nil value (global 'to_digits')\nstack traceback:\n\t/tmp/tmpir3__vtt.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpir3__vtt.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\tfor _,i in ipairs(split_digits(num)) do\n\t\tif is_even(i)\
    \ then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\
    \treturn {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq2zecy4g.lua:9:\
    \ attempt to call a nil value (global 'split_digits')\nstack traceback:\n\t/tmp/tmpq2zecy4g.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq2zecy4g.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  assert(num\
    \ and type(num) == \"number\",\n    \"even_odd_count: num must be a number!\"\
    )\n  local even_count = 0\n  local odd_count = 0\n  while num ~= 0 do\n    local\
    \ digit = num % 10\n    if digit % 2 == 0 then\n      even_count = even_count\
    \ + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014566
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 0, math.abs(num) do\n       \
    \ if i % 2 == 0 then\n            even = even + 1\n        else\n            odd\
    \ = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5n4em0g.lua:23:\
    \ expected: {0, 1}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpc5n4em0g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for i in tostring(num):gmatch('.') do\n        if\
    \ tonumber(i) % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return {even, odd}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp75foaqsm.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp75foaqsm.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp75foaqsm.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local rem = num % 10\n        if rem % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    if num < 0 then\n        num = -num\n\
    \    end\n    while num > 0 do\n        local d = num % 10\n        if d % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkxl5w3e.lua:35:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpgkxl5w3e.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ result = {0, 0}\n  local odd = false\n  if num < 0 then num = -num odd = true\
    \ end\n  while num > 0 do\n    local digit = num % 10\n    num = (num - digit)\
    \ / 10\n    if digit % 2 == 0 then\n      result[1] = result[1] + 1\n    else\n\
    \      result[2] = result[2] + 1\n    end\n  end\n  if odd then result[2] = result[2]\
    \ + 1 end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9jv5pvp.lua:28:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpa9jv5pvp.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  local n = math.abs(num)\n  while n > 0 do\n    local d =\
    \ n % 10\n    if d % 2 == 0 then\n      even = even + 1\n    else\n      odd =\
    \ odd + 1\n    end\n    n = math.floor(n / 10)\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys_q_s5g.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpys_q_s5g.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  num\
    \ = math.abs(num)\n  local even, odd = 0, 0\n  while num > 0 do\n    local d =\
    \ num % 10\n    if d % 2 == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n  return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwe6s6pe.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpkwe6s6pe.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  --\
    \ num == 0\n  if num == 0 then\n    return {0, 0}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp81tw94cc.lua:26: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\tfor char in tostring(num):gmatch(\".\") do\n\t\tif tonumber(char)\
    \ % 2 == 0 then\n\t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\
    \tend\n\treturn {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2m9p59c.lua:10:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpm2m9p59c.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpm2m9p59c.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n\tlocal\
    \ even, odd = 0, 0\n\tfor i = 1, #tostring(num) do\n\t\tif num % 2 == 0 then\n\
    \t\t\teven = even + 1\n\t\telse\n\t\t\todd = odd + 1\n\t\tend\n\tend\n\treturn\
    \ {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_8eqpkoz.lua:23:\
    \ expected: {1, 1}\nactual: {3, 0}\nstack traceback:\n\t/tmp/tmp_8eqpkoz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ num = math.abs(num)\n  local even = 0\n  local odd = 0\n  while (num > 0) do\n\
    \    local digit = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n\
    \    else\n      odd = odd + 1\n    end\n    num = math.floor(num / 10)\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqebs3qr1.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpqebs3qr1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: 0
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    local negative = false\n    if num < 0 then\n  \
    \      negative = true\n        num = -num\n    end\n    for _ = 0, math.huge\
    \ do\n        local remainder = num % 10\n        if remainder % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n        if num == 0 then\n       \
    \     break\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    while num ~= 0 do\n     \
    \   local digit = num % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n        num = math.floor(num / 10)\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014566
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  num\
    \ = math.abs(num)\n  local even_count = 0\n  local odd_count = 0\n  while num\
    \ > 0 do\n    local digit = num % 10\n    if is_even(digit) then\n      even_count\
    \ = even_count + 1\n    else\n      odd_count = odd_count + 1\n    end\n    num\
    \ = math.floor(num / 10)\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa239gbym.lua:13:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmpa239gbym.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpa239gbym.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 1, #num do\n    if num[i] %\
    \ 2 == 0 then\n      even_count = even_count + 1\n    else\n      odd_count =\
    \ odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7zbycz6w.lua:10:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmp7zbycz6w.lua:10: in local 'candidate'\n\t/tmp/tmp7zbycz6w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ result = {\n    even = 0,\n    odd = 0\n  }\n  for digit in tostring(num):gmatch(\"\
    %d\") do\n    if is_even(digit) then\n      result.even = result.even + 1\n  \
    \  else\n      result.odd = result.odd + 1\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_s6409i.lua:13:\
    \ attempt to call a nil value (global 'is_even')\nstack traceback:\n\t/tmp/tmpq_s6409i.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpq_s6409i.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660014561
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local even, odd = 0, 0\n    while num > 0 do\n    \
    \    if num % 2 == 0 then\n            even = even + 1\n        else\n       \
    \     odd = odd + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pjneud2.lua:31:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp2pjneud2.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014555
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    if num < 0 then\n        num = -num\n    end\n \
    \   while num > 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5xajo2x.lua:34:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpk5xajo2x.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
- exit_code: -1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  if\
    \ num == 0 then\n    return {1, 0}\n  end\n  local even_count = 0\n  local odd_count\
    \ = 0\n  while num ~= 0 do\n    local d = num % 10\n    if d % 2 == 0 then\n \
    \     even_count = even_count + 1\n    else\n      odd_count = odd_count + 1\n\
    \    end\n    num = (num - d) / 10\n  end\n  return {even_count, odd_count}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014566
- exit_code: 1
  program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local str = num % 10\n        if str % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n        num = num\
    \ / 10\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_5xdx1q.lua:26:\
    \ expected: {1, 1}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpi_5xdx1q.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1660014561
