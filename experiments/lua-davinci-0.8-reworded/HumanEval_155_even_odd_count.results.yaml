name: HumanEval_155_even_odd_count
language: lua
results:
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local counter = {0, 0}\n    while num > 0 do\n    \
    \    local digit = num % 10\n        if digit % 2 == 0 then\n            counter[1]\
    \ = counter[1] + 1\n        else\n            counter[2] = counter[2] + 1\n  \
    \      end\n        num = (num - digit) / 10\n    end\n    return counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_5xdplr.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpg_5xdplr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local count = {0, 0}\n    if num < 0 then num = -num end\n    repeat\n     \
    \   local last_digit = num % 10\n        if last_digit % 2 == 0 then\n       \
    \     count[1] = count[1] + 1\n        else\n            count[2] = count[2] +\
    \ 1\n        end\n        num = (num - last_digit) / 10\n    until num == 0\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  local num = math.abs(num)\n  while num > 0 do\n    local\
    \ digit = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1\n    end\n    num = (num - digit) / 10\n  end\n  return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimj1v2ag.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpimj1v2ag.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    for i = 0, 9 do\n       \
    \ local c = count_digits(num, i)\n        if i % 2 == 0 then\n            even_count\
    \ = even_count + c\n        else\n            odd_count = odd_count + c\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppe1_0b5n.lua:11:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmppe1_0b5n.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmppe1_0b5n.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even_count = 0\n  local odd_count = 0\n  for i = 0, num do\n    if math.floor(i\
    \ / 2) == i / 2 then\n      even_count = even_count + 1\n    else\n      odd_count\
    \ = odd_count + 1\n    end\n  end\n  return {even_count, odd_count}\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99ttt5gc.lua:23:\
    \ expected: {0, 1}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmp99ttt5gc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num_digit_count = math.floor(math.log10(math.abs(num)))\
    \ + 1\n    for i = 1, num_digit_count do\n        local digit = math.floor(math.abs(num\
    \ / math.pow(10, i - 1))) % 10\n        if digit % 2 == 0 then\n            even_count\
    \ = even_count + 1\n        else\n            odd_count = odd_count + 1\n    \
    \    end\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq1th_69.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpcq1th_69.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 0\n  for d in tostring(num):gmatch(\"%d\") do\n    if d % 2 ==\
    \ 0 then\n      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n\
    \  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local abs_num = abs(num)\n    local even_count = 0\n    local odd_count = 0\n\
    \    local c\n    while abs_num > 0 do\n        c = abs_num % 10\n        if c\
    \ % 2 == 0 then\n            even_count = even_count + 1\n        else\n     \
    \       odd_count = odd_count + 1\n        end\n        abs_num = floor(abs_num\
    \ / 10)\n    end\n    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwczcwx3.lua:8:\
    \ attempt to call a nil value (global 'abs')\nstack traceback:\n\t/tmp/tmpkwczcwx3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkwczcwx3.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  assert(type(num)\
    \ == \"number\", \"Need an integer!\")\n  local even, odd = 0, 0\n  while num\
    \ ~= 0 do\n    local digit = num % 10\n    if digit % 2 == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1\n    end\n    num = math.floor(num\
    \ / 10)\n  end\n  return {even, odd}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #num do\n        if (i % 2\
    \ == 0) then\n            even = even + 1\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpht49ehvr.lua:10:\
    \ attempt to get length of a number value (local 'num')\nstack traceback:\n\t\
    /tmp/tmpht49ehvr.lua:10: in local 'candidate'\n\t/tmp/tmpht49ehvr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for _, v in pairs(string.totable(tostring(math.abs(num))))\
    \ do\n        if tonumber(v) % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return {even,\
    \ odd}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hb83faw.lua:9:\
    \ attempt to call a nil value (field 'totable')\nstack traceback:\n\t/tmp/tmp6hb83faw.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp6hb83faw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ num = math.abs(num)\n    local tbl = {0, 0}\n    while num > 0 do\n        local\
    \ digit = num % 10\n        if digit % 2 == 0 then\n            tbl[1] = tbl[1]\
    \ + 1\n        else\n            tbl[2] = tbl[2] + 1\n        end\n        num\
    \ = math.floor(num / 10)\n    end\n    return tbl\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwkoq9bs.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpgwkoq9bs.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local t = {0, 0}\n    local n = num < 0 and -num or num\n    while n > 0 do\n\
    \        local d = n % 10\n        if d % 2 == 0 then\n            t[1] = t[1]\
    \ + 1\n        else\n            t[2] = t[2] + 1\n        end\n        n = (n\
    \ - d) / 10\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp806uds12.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp806uds12.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local dn = math.abs(num)\n    local t = {0, 0}\n    while dn > 0 do\n      \
    \  local d = dn % 10\n        if d % 2 == 0 then\n            t[1] = t[1] + 1\n\
    \        else\n            t[2] = t[2] + 1\n        end\n        dn = math.floor(dn\
    \ / 10)\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfpnix_um.lua:32:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpfpnix_um.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ count = {0, 0}\n  if num < 0 then\n    count[1] = 1\n    num = -num\n  end\n\
    \  while num > 0 do\n    if num % 2 == 0 then\n      count[1] = count[1] + 1\n\
    \    else\n      count[2] = count[2] + 1\n    end\n    num = num // 10\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperafvmay.lua:28:\
    \ expected: {1, 1}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmperafvmay.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even_count = 0\n    local odd_count = 0\n    local num = math.abs(num)\n\
    \    while num > 0 do\n        local digit = num % 10\n        if digit % 2 ==\
    \ 0 then\n            even_count = even_count + 1\n        else\n            odd_count\
    \ = odd_count + 1\n        end\n        num = math.floor(num / 10)\n    end\n\
    \    return {even_count, odd_count}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryxufnwc.lua:33:\
    \ expected: {1, 0}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpryxufnwc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    while num ~= 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n        num = math.floor(num / 10)\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 0\n    for digit in tostring(num):gmatch(\"%d\") do\n \
    \       if tonumber(digit) % 2 == 0 then\n            even = even + 1\n      \
    \  else\n            odd = odd + 1\n        end\n    end\n    return {even, odd}\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, #tostring(num) do\n      \
    \  local digit = tonumber(sub(tostring(num), i, i))\n        if digit % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return {even, odd}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw70jv__u.lua:11:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmpw70jv__u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpw70jv__u.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Given an integer. return a table that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ assert(num < 1e10 and num > -1e10)\n    if num == 0 then\n        return {1,\
    \ 0}\n    end\n    local even_count = 0\n    local odd_count = 0\n    while num\
    \ ~= 0 do\n        local digit = num % 10\n        if digit % 2 == 0 then\n  \
    \          even_count = even_count + 1\n        else\n            odd_count =\
    \ odd_count + 1\n        end\n        num = num // 10\n    end\n    return {even_count,\
    \ odd_count}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
