name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- The largest factor must be less than or equal to the square root\
    \ of n\n  local i = 2\n  local max_i = math.sqrt(n)\n  while i <= max_i do\n \
    \   if n % i == 0 then\n      -- i is a factor of n, so i and n/i are factors\n\
    \      local factor1 = i\n      local factor2 = n / i\n      -- If both factors\
    \ are prime, return the largest\n      if is_prime(factor1) and is_prime(factor2)\
    \ then\n        return math.max(factor1, factor2)\n      end\n      -- The other\
    \ factor is not prime, so the largest prime factor must be\n      -- less than\
    \ i, so repeat the loop with a lower i\n      max_i = i\n    end\n    i = i +\
    \ 1\n  end\n  -- The largest prime factor is n, so return n\n  return n\nend",
  "    local max = 1\n    local x = n\n    local i = 2\n    while i <= math.sqrt(x)\
    \ do\n        if x % i == 0 then\n            x = x / i\n            max = i\n\
    \        else\n            i = i + 1\n        end\n    end\n    if x > max then\n\
    \        max = x\n    end\n    return max\nend", "    for i=math.ceil(math.sqrt(n)),2,-1\
    \ do\n        if n % i == 0 and is_prime(i) then\n            return i\n     \
    \   end\n    end\nend", "  local p = largest_prime_factor_iter(n, 2)\n  while\
    \ n % p ~= 0 do\n    p = largest_prime_factor_iter(n, p + 1)\n  end\n  return\
    \ p\nend", "    local p = 2\n    local pf = 1\n    while n > 1 do\n        while\
    \ n % p == 0 do\n            pf = p\n            n = n / p\n        end\n    \
    \    p = p + 1\n    end\n    return pf\nend", "  if n == 2 then return 2 end\n\
    \  local max = math.floor(math.sqrt(n))\n  for i = 2, max do\n    if n % i ==\
    \ 0 then\n      local div = n / i\n      return math.max(largest_prime_factor(div),\
    \ largest_prime_factor(i))\n    end\n  end\n  return n\nend", "    local last\
    \ = 1\n    while n % 2 == 0 do\n        last = 2\n        n = n / 2\n    end\n\
    \    local i = 3\n    while i <= math.sqrt(n) do\n        while n % i == 0 do\n\
    \            last = i\n            n = n / i\n        end\n        i = i + 2\n\
    \    end\n    if n > 2 then last = n end\n    return last\nend", "  for k = math.floor(math.sqrt(n)),\
    \ 2, -1 do\n    if n % k == 0 and is_prime(k) then\n      return k\n    end\n\
    \  end\n  -- Should never reach here.\n  return 2\nend", "  local f = 2\n  while\
    \ f * f <= n do\n    if n % f == 0 then\n      n = n / f\n    else\n      f =\
    \ f + 1\n    end\n  end\n  return n\nend", "    local divisor = 2\n    local max_divisor\
    \ = math.sqrt(n)\n    while n > 1 and divisor <= max_divisor do\n        while\
    \ n % divisor == 0 do\n            n = n / divisor\n            max_divisor =\
    \ math.sqrt(n)\n        end\n        divisor = divisor + 1\n    end\n    return\
    \ n\nend", "\tlocal i = 1\n\tlocal last_prime = 1\n\twhile i < n do\n\t\ti = i\
    \ + 1\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\tlast_prime = i\n\t\tend\n\
    \tend\n\treturn last_prime\nend", "    local last_factor = 1\n    local max_factor\
    \ = n", "  local prime_factors = {}\n  local f = 2\n  while n > 1 do\n    if n\
    \ % f == 0 then\n      table.insert(prime_factors, f)\n      n = n / f\n    else\n\
    \      f = f + 1\n    end\n  end\n  return prime_factors[#prime_factors]\nend",
  "    return prime_factors(n)[#prime_factors(n)]\nend", "  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend", "  if n == 1 then return 1 end\n  for i = 2,\
    \ math.sqrt(n) do\n    if n % i == 0 then\n      return largest_prime_factor(n/i)\n\
    \    end\n  end\n  return n\nend", "  return find_prime_factor(n, primes)\nend",
  "    local prime_factors = {}\n    for x in prime_sieve(math.floor(math.sqrt(n)))\
    \ do\n        if n % x == 0 then\n            table.insert(prime_factors, x)\n\
    \        end\n    end\n    local max = prime_factors[1]\n    for _, v in ipairs(prime_factors)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "    local lpf = nil\n    local p = 2\n    while p < n do\n\
    \        if not is_prime(p) then\n            -- skip non-primes\n           \
    \ p = p + 1\n        elseif n % p == 0 then\n            -- found a prime factor\n\
    \            n = n / p\n            lpf = p\n        else\n            -- no more\
    \ factors, get a new prime\n            p = p + 1\n        end\n    end\n    return\
    \ lpf\nend", "\tfor p in smallest_factor(n) do\n\t\t-- only the largest prime\
    \ factor will have a divisor\n\t\tif n == p then\n\t\t\treturn p\n\t\tend\n\t\t\
    -- reduce n to its smallest prime factor\n\t\tn = n // p\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
