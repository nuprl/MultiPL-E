name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- The largest factor must be less than or equal to the square root\
    \ of n\n  local i = 2\n  local max_i = math.sqrt(n)\n  while i <= max_i do\n \
    \   if n % i == 0 then\n      -- i is a factor of n, so i and n/i are factors\n\
    \      local factor1 = i\n      local factor2 = n / i\n      -- If both factors\
    \ are prime, return the largest\n      if is_prime(factor1) and is_prime(factor2)\
    \ then\n        return math.max(factor1, factor2)\n      end\n      -- The other\
    \ factor is not prime, so the largest prime factor must be\n      -- less than\
    \ i, so repeat the loop with a lower i\n      max_i = i\n    end\n    i = i +\
    \ 1\n  end\n  -- The largest prime factor is n, so return n\n  return n\nend",
  "    local max = 1\n    local x = n\n    local i = 2\n    while i <= math.sqrt(x)\
    \ do\n        if x % i == 0 then\n            x = x / i\n            max = i\n\
    \        else\n            i = i + 1\n        end\n    end\n    if x > max then\n\
    \        max = x\n    end\n    return max\nend", "    for i=math.ceil(math.sqrt(n)),2,-1\
    \ do\n        if n % i == 0 and is_prime(i) then\n            return i\n     \
    \   end\n    end\nend", "  local p = largest_prime_factor_iter(n, 2)\n  while\
    \ n % p ~= 0 do\n    p = largest_prime_factor_iter(n, p + 1)\n  end\n  return\
    \ p\nend", "    local p = 2\n    local pf = 1\n    while n > 1 do\n        while\
    \ n % p == 0 do\n            pf = p\n            n = n / p\n        end\n    \
    \    p = p + 1\n    end\n    return pf\nend", "  if n == 2 then return 2 end\n\
    \  local max = math.floor(math.sqrt(n))\n  for i = 2, max do\n    if n % i ==\
    \ 0 then\n      local div = n / i\n      return math.max(largest_prime_factor(div),\
    \ largest_prime_factor(i))\n    end\n  end\n  return n\nend", "    local last\
    \ = 1\n    while n % 2 == 0 do\n        last = 2\n        n = n / 2\n    end\n\
    \    local i = 3\n    while i <= math.sqrt(n) do\n        while n % i == 0 do\n\
    \            last = i\n            n = n / i\n        end\n        i = i + 2\n\
    \    end\n    if n > 2 then last = n end\n    return last\nend", "  for k = math.floor(math.sqrt(n)),\
    \ 2, -1 do\n    if n % k == 0 and is_prime(k) then\n      return k\n    end\n\
    \  end\n  -- Should never reach here.\n  return 2\nend", "  local f = 2\n  while\
    \ f * f <= n do\n    if n % f == 0 then\n      n = n / f\n    else\n      f =\
    \ f + 1\n    end\n  end\n  return n\nend", "    local divisor = 2\n    local max_divisor\
    \ = math.sqrt(n)\n    while n > 1 and divisor <= max_divisor do\n        while\
    \ n % divisor == 0 do\n            n = n / divisor\n            max_divisor =\
    \ math.sqrt(n)\n        end\n        divisor = divisor + 1\n    end\n    return\
    \ n\nend", "\tlocal i = 1\n\tlocal last_prime = 1\n\twhile i < n do\n\t\ti = i\
    \ + 1\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\t\tlast_prime = i\n\t\tend\n\
    \tend\n\treturn last_prime\nend", "    local last_factor = 1\n    local max_factor\
    \ = n", "  local prime_factors = {}\n  local f = 2\n  while n > 1 do\n    if n\
    \ % f == 0 then\n      table.insert(prime_factors, f)\n      n = n / f\n    else\n\
    \      f = f + 1\n    end\n  end\n  return prime_factors[#prime_factors]\nend",
  "    return prime_factors(n)[#prime_factors(n)]\nend", "  local factors = prime_factors(n)\n\
    \  return factors[#factors]\nend", "  if n == 1 then return 1 end\n  for i = 2,\
    \ math.sqrt(n) do\n    if n % i == 0 then\n      return largest_prime_factor(n/i)\n\
    \    end\n  end\n  return n\nend", "  return find_prime_factor(n, primes)\nend",
  "    local prime_factors = {}\n    for x in prime_sieve(math.floor(math.sqrt(n)))\
    \ do\n        if n % x == 0 then\n            table.insert(prime_factors, x)\n\
    \        end\n    end\n    local max = prime_factors[1]\n    for _, v in ipairs(prime_factors)\
    \ do\n        if v > max then\n            max = v\n        end\n    end\n   \
    \ return max\nend", "    local lpf = nil\n    local p = 2\n    while p < n do\n\
    \        if not is_prime(p) then\n            -- skip non-primes\n           \
    \ p = p + 1\n        elseif n % p == 0 then\n            -- found a prime factor\n\
    \            n = n / p\n            lpf = p\n        else\n            -- no more\
    \ factors, get a new prime\n            p = p + 1\n        end\n    end\n    return\
    \ lpf\nend", "\tfor p in smallest_factor(n) do\n\t\t-- only the largest prime\
    \ factor will have a divisor\n\t\tif n == p then\n\t\t\treturn p\n\t\tend\n\t\t\
    -- reduce n to its smallest prime factor\n\t\tn = n // p\n\tend\nend", "  local\
    \ _, prime = factor(n)\n  return prime\nend", "\tlocal largest = 1\n\tfor i =\
    \ 2, n do\n\t\tif is_prime(i) and (n % i == 0) then\n\t\t\tlargest = i\n\t\tend\n\
    \tend\n\treturn largest\nend", "\tlocal list = {}\n\t--Find all prime factors.\n\
    \tlocal function loop(n)\n\t\tif n == 1 then\n\t\t\treturn\n\t\tend\n\t\tfor i\
    \ = 2, n-1 do\n\t\t\tif n % i == 0 then\n\t\t\t\t--If n % i == 0, then i is a\
    \ prime factor.\n\t\t\t\ttable.insert(list, i)\n\t\t\t\tloop(n/i)\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\tend\n\tend\n\tloop(n)\n\t--Find the largest prime factor.\n\tlocal\
    \ max = 0\n\tfor i = 1, #list do\n\t\tif list[i] > max then\n\t\t\tmax = list[i]\n\
    \t\tend\n\tend\n\treturn max\nend", "    local root_n = math.sqrt(n)\n    local\
    \ largest_factor = -1\n    for i = 2, root_n do\n        if n % i == 0 then\n\
    \            local factor = n / i\n            if is_prime(factor) then\n    \
    \            largest_factor = factor\n                break\n            end\n\
    \            largest_factor = i\n        end\n    end\n    if largest_factor ==\
    \ -1 then\n        if is_prime(n) then\n            largest_factor = n\n     \
    \   else\n            error('n is not prime')\n        end\n    end\n    return\
    \ largest_factor\nend", "  local largest_prime_factor = 0\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      largest_prime_factor = math.max(largest_prime_factor,\
    \ largest_prime_factor(n / i))\n    end\n  end\n  return largest_prime_factor\n\
    end", "    local p = 0\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        n = n / i\n            p = i\n        end\n    end\n    return p\nend",
  "    for i = 2, math.floor(math.sqrt(n)) do\n        if n % i == 0 then\n      \
    \      return largest_prime_factor(n / i)\n        end\n    end\n    return n\n\
    end", "    local p = 2\n    while (n % p) == 0 do\n        n = n // p\n    end\n\
    \    if n == 1 then\n        return p\n    end\n    p = 3\n    while p * p <=\
    \ n do\n        while (n % p) == 0 do\n            n = n // p\n        end\n \
    \       p = p + 2\n    end\n    if n == 1 then\n        return p - 2\n    end\n\
    \    return n\nend", "    local factors = {}\n    local f = 2\n    while f <=\
    \ n do\n        if n % f == 0 then\n            table.insert(factors, f)\n   \
    \         n = n / f\n        else\n            f = f + 1\n        end\n    end\n\
    \    return factors[#factors]\nend", "  local i = 2\n  while i * i <= n do\n \
    \   if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return n\nend", "\tlocal num = 1\n\tlocal stop = math.sqrt(n)\n\tlocal\
    \ i = 2\n\twhile (n % i ~= 0 and i < stop) do\n\t\ti = i + 1\n\tend\n\tif (i <\
    \ stop) then\n\t\tnum = math.max(i, largest_prime_factor(n/i))\n\telse\n\t\tnum\
    \ = n\n\tend\n\treturn num\nend", "    assert(n > 1)\n    assert(not is_prime(n))\n\
    \    -- TODO\nend", "    -- The largest prime factor cannot be larger than the\
    \ square root of n\n    local n_sqrt = math.sqrt(n)\n    local x = 2\n    local\
    \ largest_prime_factor = 1\n    while x <= n_sqrt do\n        if x == 2 or x ==\
    \ 3 then\n            -- The only even prime is 2 and 3 is a prime so we can increment\n\
    \            -- directly to the next prime.\n            x = x + 1\n        else\n\
    \            -- Increment to the next prime by skipping all multiples of 2 and\
    \ 3.\n            x = x + 2\n        end\n        if n % x == 0 then\n       \
    \     -- Check if the current number is a prime factor.\n            local is_prime_factor\
    \ = true\n            local y = 2\n            local largest_prime_factor_sqrt\
    \ = math.sqrt(x)\n            while y <= largest_prime_factor_sqrt do\n      \
    \          if x % y == 0 then\n                    is_prime_factor = false\n \
    \                   break\n                end\n                y = y + 1\n  \
    \          end\n            if is_prime_factor then\n                largest_prime_factor\
    \ = x\n            end\n        end\n    end\n    return largest_prime_factor\n\
    end", "\tlocal d = 2\n\twhile d < n do\n\t\tif n % d == 0 then\n\t\t\treturn largest_prime_factor(n\
    \ / d)\n\t\tend\n\t\td = d + 1\n\tend\n\treturn n\nend", "    return lpf_worker(3,\
    \ n, n, n)\nend", "    if n <= 1 then\n        return n\n    end\n    local factor\
    \ = 2\n    while n % factor ~= 0 do\n        factor = factor + 1\n    end\n  \
    \  if factor == n then\n        return n\n    end\n    return largest_prime_factor(n\
    \ / factor)\nend", "  -- We're going to divide n by a sequence of odd numbers\
    \ starting from 3\n  -- until we find a divisor.\n  local divisor = 3\n  while\
    \ true do\n    if n % divisor == 0 then\n      -- If we've found a divisor, see\
    \ if it's the largest one.\n      if n == divisor then\n        return n\n   \
    \   else\n        -- If not, find the largest prime factor of the quotient.\n\
    \        return largest_prime_factor(n / divisor)\n      end\n    end\n    --\
    \ Go to the next odd number.\n    divisor = divisor + 2\n  end\nend", "\tlocal\
    \ i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn i\nend", "  local smallest_factor =\
    \ smallest_prime_factor(n)\n  local result = n // smallest_factor\n  if smallest_factor\
    \ == result then\n    return result\n  else\n    return largest_prime_factor(result)\n\
    \  end\nend", "    local largest_factor = 1\n    local p = primes_under_m(math.sqrt(n))\n\
    \    for _,prime in ipairs(p) do\n        if n % prime == 0 then\n           \
    \ largest_factor = prime\n        end\n    end\n    return largest_factor\nend",
  "\tlocal prime_factors = primes_less_than(n/2)\n\tfor i = #prime_factors, 1, -1\
    \ do\n\t\tif n % prime_factors[i] == 0 then\n\t\t\treturn prime_factors[i]\n\t\
    \tend\n\tend\nend", "\treturn first_true(p -> n % p == 0 and largest_prime_factor(n\
    \ // p) or nil, primes(n))\nend", "    for i = math.floor(math.sqrt(n)), 2, -1\
    \ do\n        if n % i == 0 and util.is_prime(i) then\n            return i\n\
    \        end\n    end\nend", "    local smallest_prime_factor = smallest_prime_factor(n)\n\
    \    if smallest_prime_factor == n then\n        return n\n    else\n        return\
    \ largest_prime_factor(n // smallest_prime_factor)\n    end\nend", "    local\
    \ result = 1\n    local bound = n / 2\n    for i = 2, bound do\n        if not\
    \ (n % i) then\n            -- If i is not a prime factor, then it must be divisible\
    \ by\n            -- another prime factor.\n            result = largest_prime_factor(i)\n\
    \            break\n        end\n    end\n    return result\nend", "    if n %\
    \ 2 == 0 then\n        n = n / 2\n    end\n    local largest_factor = 3\n    while\
    \ n > 1 do\n        if n % largest_factor == 0 then\n            n = n / largest_factor\n\
    \        else\n            largest_factor = largest_factor + 2\n        end\n\
    \    end\n    return largest_factor\nend", "    -- Assume n > 1 and is not a prime.\
    \ We know 2 is a factor.\n    local max = 2\n    for f = 2, n - 1 do\n       \
    \ if is_prime(f) and n % f == 0 then\n            max = f\n        end\n    end\n\
    \    return max\nend", "\tlocal first = smallest_prime_factor(n)\n\tif first ==\
    \ n then\n\t\treturn n\n\telse\n\t\treturn largest_prime_factor(n // first)\n\t\
    end\nend", "  if is_prime(n) then\n    return n\n  end\n  for i = 2, n/2 do\n\
    \    if is_factor(i, n) and is_prime(i) then\n      return largest_prime_factor(n/i)\n\
    \    end\n  end\nend", "  local factors = prime_factors(n)\n  local max = -1\n\
    \  for _,f in ipairs(factors) do\n    if f > max then\n      max = f\n    end\n\
    \  end\n  return max\nend", "  local prime, factor = 1, 2\n  while n > 1 do\n\
    \    if n % factor == 0 then\n      prime = factor\n      while n % factor ==\
    \ 0 do\n        n = n / factor\n      end\n    end\n    factor = factor + 1\n\
    \  end\n  return prime\nend", "  local sqrtn = math.floor(math.sqrt(n))\n  for\
    \ d=2,sqrtn do\n    if n % d == 0 then\n      return largest_prime_factor(n/d)\n\
    \    end\n  end\n  return n\nend", "  -- Find the smallest factor\n  local factor\
    \ = smallest_factor(n)\n  -- If it is a prime, return it\n  if factor == n then\n\
    \    return n\n  -- Otherwise, return the largest prime factor of n / factor\n\
    \  else\n    return largest_prime_factor(n / factor)\n  end\nend", "\tfor i =\
    \ n, 1, -1 do\n\t\tif prime(i) and n % i == 0 then\n\t\t\treturn i\n\t\tend\n\t\
    end\nend", "    local max = math.floor(math.sqrt(n))\n    local factors = {}\n\
    \    local i = 2\n    while i <= max do\n        if n % i == 0 then\n        \
    \    table.insert(factors, i)\n            n = n / i\n            max = math.floor(math.sqrt(n))\n\
    \        else\n            i = i + 1\n        end\n    end\n    table.insert(factors,\
    \ n)\n    return factors[#factors]\nend", "    local factors = util.prime_factors(n)\n\
    \    if #factors == 0 then return 0 end\n    return factors[#factors]\nend", " \
    \ local i = 2\n  while i <= n do\n    if n % i == 0 then\n      n = n / i\n  \
    \  else\n      i = i + 1\n    end\n  end\n  return i\nend", "  -- Note: Use `next`\
    \ to iterate in steps of 2 over the odds since all evens\n  -- apart from 2 are\
    \ not prime and there is no point checking them.\n  local i = 3\n  while i * i\
    \ <= n do\n    if n % i == 0 then\n      n = n / i\n    else\n      i = next(primes,\
    \ i)\n    end\n  end\n  return n\nend", "  local res = -1\n  for i = 2, math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      n = n / i\n      res = i\n    end\n  end\n\
    \  return res\nend", "    for i = math.floor(math.sqrt(n)), 2, -1 do\n       \
    \ if is_prime(i) and n % i == 0 then\n            return i\n        end\n    end\n\
    end", "  local factor = n\n  while true do\n    local f = smallest_prime_factor(factor)\n\
    \    if f == factor then\n      return f\n    end\n    factor = factor // f\n\
    \  end\nend", "  local largest = nil\n  for i = 2, n - 1 do\n    if n % i == 0\
    \ then\n      largest = largest_prime_factor(n / i)\n      break\n    end\n  end\n\
    \  return largest or n\nend", "    local i = 2\n    while n % i ~= 0 do\n    \
    \    i = i + 1\n    end\n    if i == n then\n        return n\n    else\n    \
    \    return largest_prime_factor(n / i)\n    end\nend", "  local factor = 2\n\
    \  local last_factor = 1\n  while n > 1 do\n    if n % factor == 0 then\n    \
    \  last_factor = factor\n      n = n / factor\n      while n % factor == 0 do\n\
    \        n = n / factor\n      end\n    end\n    factor = factor + 1\n  end\n\
    \  return last_factor\nend", "    local v = 2\n    local s = 0\n    while v *\
    \ v <= n do\n        if n % v == 0 then\n            n = n / v\n            s\
    \ = v\n        else\n            v = v + 1\n        end\n    end\n    if n > 1\
    \ then\n        s = n\n    end\n    return s\nend", "  for i = 2, n - 1 do\n \
    \   if n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    \  return n\nend", "    local l_prime = 1\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            l_prime = largest_prime_factor(i)\n\
    \            return largest_prime_factor(n / i)\n        end\n    end\n    return\
    \ n\nend", "    local smallest = smallest_factor(n)\n    if smallest == n then\n\
    \        return n\n    else\n        return largest_prime_factor(n / smallest)\n\
    \    end\nend", "    if (n == 1) then\n        return 1\n    end\n    for i =\
    \ 2, math.sqrt(n) do\n        if (n % i == 0) then\n            local p = largest_prime_factor(n\
    \ / i)\n            return (p == 1) and i or p\n        end\n    end\n    return\
    \ n\nend", "    local factor = 2\n    local last_factor = 1\n    while n > 1 do\n\
    \        if n % factor == 0 then\n            last_factor = factor\n         \
    \   n = n / factor\n            while n % factor == 0 do\n                n =\
    \ n / factor\n            end\n        end\n        factor = factor + 1\n    end\n\
    \    return last_factor\nend", "  local largest_prime = 2\n  while n > largest_prime\
    \ do\n    if n % largest_prime == 0 then\n      n = n / largest_prime\n    else\n\
    \      largest_prime = next_prime(largest_prime)\n    end\n  end\n  return largest_prime\n\
    end", "    local a = prime_factors(n)\n    -- Now pick the largest\n    local\
    \ largest = 0\n    for i = 1, #a do\n        if a[i] > largest then\n        \
    \    largest = a[i]\n        end\n    end\n    return largest\nend", "  if (is_prime(n))\
    \ then\n    return n\n  end\n  for i = 3, math.floor(math.sqrt(n)), 2 do\n   \
    \ if (n % i == 0) then\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    \  return n\nend", "  assert(n > 1)\n  local largest = n\n  local candidate =\
    \ 2\n  while n % candidate == 0 do\n    n = n / candidate\n    largest = candidate\n\
    \  end\n  local factor = 3\n  while n > factor do\n    while n % factor == 0 do\n\
    \      n = n / factor\n      largest = factor\n    end\n    factor = factor +\
    \ 2\n  end\n  return largest\nend", "\tlocal primes = prime_factors(n)\n\treturn\
    \ primes[#primes]\nend", '  local f = 2', "  local i = 2\n  while n > 1 do\n \
    \   if n % i == 0 then\n      n = n / i\n    else\n      i = i + 1\n    end\n\
    \  end\n  return i\nend", "  -- first check 2, then odd numbers\n  local f = n\
    \ / 2\n  for i = n - 1, 3, -2 do\n    if n % i == 0 and is_prime(i) then\n   \
    \   return i\n    end\n  end\n  return -1\nend", "  local p = 2\n  while p*p <=\
    \ n do\n    if n % p == 0 then\n      -- p is a factor\n      -- Repeat with n\
    \ divided by p until p is not a factor\n      repeat\n        n = n / p\n    \
    \  until n % p ~= 0\n    end\n    -- Advance p\n    p = p + 1\n  end\n  return\
    \ n\nend", "    local largest_factor = 1\n    local factor = 2\n    while n >\
    \ 1 do\n        if n % factor == 0 then\n            largest_factor = factor\n\
    \            n = n / factor\n        else\n            factor = factor + 1\n \
    \       end\n    end\n    return largest_factor\nend", "    local i = 2\n    while\
    \ i <= n do\n        if math.fmod(n, i) == 0 then\n            n = n / i\n   \
    \     else\n            i = i + 1\n        end\n    end\n    return i\nend", " \
    \ local max_factor = math.floor(math.sqrt(n))\n  for i = max_factor, 2, -1 do\n\
    \    if is_factor(n, i) and is_prime(i) then\n      return i\n    end\n  end\n\
    \  error('largest_prime_factor: ' .. n .. ' not composite')\nend", "    local\
    \ p = prime_factors(n)\n    local largest = 0\n    for k,v in pairs(p) do\n  \
    \      if largest < v then\n            largest = v\n        end\n    end\n  \
    \  return largest\nend", "  local sqrtn = math.sqrt(n)\n  local largest = -1\n\
    \  local i = 2\n  while i <= sqrtn do\n    if n % i == 0 then\n      largest =\
    \ i\n      while n % i == 0 do\n        n = n / i\n      end\n    end\n    i =\
    \ i + 1\n  end\n  if n > 1 then\n    largest = n\n  end\n  return largest\nend",
  "\tlocal largest_prime = n\n\tlocal divisor = n - 1\n\twhile divisor > 1 do\n\t\t\
    if n % divisor == 0 and is_prime(divisor) then\n\t\t\tlargest_prime = divisor\n\
    \t\t\tbreak\n\t\tend\n\t\tdivisor = divisor - 1\n\tend\n\treturn largest_prime\n\
    end", "  local current_factor = 2\n  local largest_factor = 0\n  while (current_factor\
    \ * current_factor) <= n do\n    if n % current_factor == 0 then\n      n = n\
    \ / current_factor\n      largest_factor = current_factor\n    else\n      current_factor\
    \ = current_factor + 1\n    end\n  end\n  if n > largest_factor then\n    largest_factor\
    \ = n\n  end\n  return largest_factor\nend", "\treturn n\nend", "\tlocal largest\
    \ = 1\n\tlocal i = 2\n\twhile i <= n do\n\t\tif n % i == 0 then\n\t\t\tn = n /\
    \ i\n\t\t\tlargest = i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn largest\n\
    end", "  local largest = n\n  local next = n\n  while true do\n    next = next_prime_factor(next)\n\
    \    if next == nil then\n      break\n    end\n    largest = next\n  end\n  return\
    \ largest\nend", "    local largest_prime = 0\n    local i = 1\n    while i <=\
    \ n / 2 do\n        if i % 2 ~= 0 and is_prime(i) and n % i == 0 then\n      \
    \      largest_prime = i\n        end\n        i = i + 1\n    end\n    return\
    \ largest_prime\nend", "    local largest\n    local i = 2\n    while i <= n do\n\
    \        if n % i == 0 then\n            largest = i\n            n = n / i\n\
    \        else\n            i = i + 1\n        end\n    end\n    return largest\n\
    end", "    if n % 2 == 0 then\n        return largest_prime_factor(n / 2)\n  \
    \  end\n    for f = 3, math.floor(math.sqrt(n)), 2 do\n        if n % f == 0 then\n\
    \            return largest_prime_factor(n / f)\n        end\n    end\n    return\
    \ n\nend", "  -- See http://en.wikipedia.org/wiki/AKS_primality_test\n  if (n\
    \ <= 1) then\n    error(\"must be > 1\")\n  end\n  if n % 2 == 0 then\n    return\
    \ largest_prime_factor(n / 2)\n  end\n  local f = 3\n  while f * f <= n do\n \
    \   if n % f == 0 then\n      return largest_prime_factor(n / f)\n    end\n  \
    \  f = f + 2\n  end\n  return n\nend", "    if is_prime(n) then\n        return\
    \ n\n    end\n    local i = 3\n    while i <= n do\n        if n % i == 0 then\n\
    \            return largest_prime_factor(n / i)\n        end\n        i = i +\
    \ 2\n    end\nend", "  -- Your code here.\n  local divisor = 2\n  while n > 1\
    \ do\n    if n % divisor == 0 then\n      n = n / divisor\n    else\n      divisor\
    \ = divisor + 1\n    end\n  end\n  return divisor\nend", "  assert(n > 1)\n  local\
    \ function divide_out_primes(n, p)\n    while n % p == 0 do\n      n = n / p\n\
    \    end\n    return n\n  end\n  -- Order of try_prime matters. A larger prime\
    \ factor will be found faster.\n  local try_prime = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  for i\
    \ = 1, #try_prime do\n    n = divide_out_primes(n, try_prime[i])\n    if n ==\
    \ 1 then\n      return try_prime[i]\n    end\n  end\n  -- N is not divisible by\
    \ any prime up to 97. So it must be a prime.\n  error(\"Could not determine prime\
    \ factor for \" .. n)\nend", "  local pf = 1\n  for i = 2, n / 2 do\n    if n\
    \ % i == 0 and is_prime(i) then\n      pf = i\n    end\n  end\n  return pf\nend",
  "    local p = n\n    for i = 2, n - 1 do\n        if n % i == 0 then\n        \
    \    p = i\n            n = n / i\n            break\n        end\n    end\n \
    \   return p\nend", "  local p = 2\n  while n > 1 do\n    if n % p == 0 then\n\
    \      n = n / p\n    else\n      p = p + 1\n    end\n  end\n  return p\nend",
  "    local p = prime_factors(n)\n    return p[#p]\nend", "    local factor = 1\n\
    \    for p in primes.gen() do\n        if n % p == 0 then\n            n = n /\
    \ p\n            factor = p\n        end\n        if n == 1 then\n           \
    \ break\n        end\n    end\n    return factor\nend", "\tlocal factors = {}\n\
    \tlocal i = 2\n\twhile n > 1 do\n\t\tif n % i == 0 then\n\t\t\ttable.insert(factors,\
    \ i)\n\t\t\tn = n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn factors[#factors]\n\
    end", "  return 2\nend", "  local i = 2\n  while i <= n do\n    if n % i == 0\
    \ then\n      n = n / i\n    else\n      i = i + 1\n    end\n  end\n  return i\n\
    end", "    for i=2,n/2 do\n        if n % i == 0 then\n            -- if n is\
    \ divisible by i, return the largest prime factor of n/i\n            return largest_prime_factor(n/i)\n\
    \        end\n    end\n    return n\nend", "  for i = 2, n - 1 do\n    if is_prime(i)\
    \ and n % i == 0 then\n      return largest_prime_factor(n / i)\n    end\n  end\n\
    \  return n\nend", "  -- Prime factors of n are prime factors of any of its prime\
    \ factors.\n  local factors = {}\n  for i = 2, n, 1 do\n    -- If the number is\
    \ even, factor it out. It's guaranteed to be the\n    -- largest prime factor.\n\
    \    if n % i == 0 then\n      table.insert(factors, i)\n      n = n / i\n   \
    \ end\n  end\n  return factors[#factors]\nend", "    -- Get the prime factors\
    \ of n.\n    local factors = prime_factors(n)\n    -- Return the last element.\n\
    \    return factors[#factors]\nend", "\tfor i = 2, math.sqrt(n) do\n\t\tif (n\
    \ % i == 0) then\n\t\t\treturn largest_prime_factor(n / i)\n\t\tend\n\tend\n\t\
    return n\nend", "  local last_prime_factor = nil\n  local p = 2\n  while p <=\
    \ n do\n    while n % p == 0 do\n      last_prime_factor = p\n      n = n / p\n\
    \    end\n    p = next_prime(p)\n  end\n  return last_prime_factor\nend", "  local\
    \ prime = 2\n  local last = n\n  repeat\n    prime = next_prime(prime)\n    last\
    \ = n % prime == 0 and last / prime or last\n  until prime > last / 2\n  return\
    \ last\nend", "  for i = primes[#primes], 2, -1 do\n    if n % i == 0 then\n \
    \     return i\n    end\n  end\nend", "  local d = 3\n  while n % 2 == 0 do\n\
    \    n = n / 2\n  end\n  while d * d <= n do\n    while n % d == 0 do\n      n\
    \ = n / d\n    end\n    d = d + 2\n  end\n  return math.floor(n)\nend", "  --\
    \ Write your code here\n  local factor = 2\n  while (n > factor) do\n    if n\
    \ % factor == 0 then\n      n = n / factor\n    else\n      factor = factor +\
    \ 1\n    end\n  end\n  return factor\nend", "\tlocal factors = factor(n)\n\tif\
    \ not factors then\n\t\treturn n\n\tend\n\treturn factors[#factors]\nend", " \
    \   -- Sieve of Eratosthenes, to generate the required primes\n    local primes\
    \ = {}\n    local sqrt_n = math.sqrt(n)\n    for i = 2, n do\n        primes[i]\
    \ = true\n    end\n    for i = 2, sqrt_n do\n        if primes[i] then\n     \
    \       for j = i * i, n, i do\n                primes[j] = false\n          \
    \  end\n        end\n    end", "    local largest_pf = 0\n    local divisor =\
    \ 2\n    while n > 1 do\n        if n % divisor == 0 then\n            largest_pf\
    \ = divisor\n            n = n / divisor\n        else\n            divisor =\
    \ divisor + 1\n        end\n    end\n    return largest_pf\nend", "  local max_prime_factor\
    \ = 1\n  local f = 2\n  while f <= n do\n    if n % f == 0 then\n      n = n /\
    \ f\n      max_prime_factor = f\n    else\n      f = f + 1\n    end\n  end\n \
    \ return max_prime_factor\nend", "  local last_factor = 1\n  if n % 2 == 0 then\n\
    \    last_factor = 2\n    while n % 2 == 0 do\n      n = n / 2\n    end\n  end\n\
    \  local p = 3\n  local max_factor = math.sqrt(n)\n  while n > 1 and p <= max_factor\
    \ do\n    if n % p == 0 then\n      n = n / p\n      last_factor = p\n      while\
    \ n % p == 0 do\n        n = n / p\n      end\n      max_factor = math.sqrt(n)\n\
    \    end\n    p = p + 2\n  end\n  if n == 1 then\n    return last_factor\n  else\n\
    \    return n\n  end\nend", "\tlocal max_prime = 0\n\tfor prime in primes() do\n\
    \t\t-- Don't check factors after sqrt(n)\n\t\tif prime > math.sqrt(n) then\n\t\
    \t\tbreak\n\t\tend\n\t\t-- Only check factors <= n / 2\n\t\tif prime > n / 2 then\n\
    \t\t\tmax_prime = math.max(max_prime, n)\n\t\t\tbreak\n\t\tend\n\t\twhile n %\
    \ prime == 0 do\n\t\t\tn = n / prime\n\t\t\tmax_prime = math.max(max_prime, prime)\n\
    \t\tend\n\tend\n\treturn max_prime\nend", "\tfor i = 2, n-1 do\n\t\tif n % i ==\
    \ 0 then\n\t\t\treturn largest_prime_factor(n/i)\n\t\tend\n\tend\n\treturn n\n\
    end", "    local i = 2\n    while i * i <= n do\n        if n % i == 0 then\n\
    \            n = n / i\n        else\n            i = i + 1\n        end\n   \
    \ end\n    return n\nend", "  if n == 2 then return 2 end\n  local max = n^0.5\n\
    \  while n%2 == 0 do\n    n = n/2\n  end\n  for i = 3, max, 2 do\n    while n%i\
    \ == 0 do\n      n = n/i\n    end\n  end\n  return n\nend", "  local prime_factors\
    \ = {}\n  for i = 2, n do\n    if n % i == 0 then\n      table.insert(prime_factors,\
    \ i)\n      n = n / i\n    end\n  end\n  local max = 0\n  for _, v in ipairs(prime_factors)\
    \ do\n    if v > max then\n      max = v\n    end\n  end\n  return max\nend",
  "    assert(n > 1)\n    for i=2,n-1 do\n        if n % i == 0 then\n           \
    \ return largest_prime_factor(n / i)\n        end\n    end\n    return n\nend",
  "\t-- find a prime factor\n\tfor _, p in prime_gen(n) do\n\t\tif n % p == 0 then\n\
    \t\t\t-- return it if n is prime\n\t\t\tif n / p == 1 then\n\t\t\t\treturn p\n\
    \t\t\t-- otherwise, return the largest prime factor of n / p\n\t\t\telse\n\t\t\
    \t\treturn largest_prime_factor(n / p)\n\t\t\tend\n\t\tend\n\tend\nend", "  --\
    \ first, find all the prime factors of n and add them to a table\n  local primes\
    \ = {}\n  local p = 2\n  while p <= n do\n    if n % p == 0 then\n      n = n\
    \ / p\n      table.insert(primes, p)\n    else\n      p = p + 1\n    end\n  end\n\
    \  -- then, just return the largest element\n  return primes[#primes]\nend", " \
    \ assert(n > 1)\n  local largest_prime = nil\n  for i = 2, math.sqrt(n) do\n \
    \   if n % i == 0 then\n      local is_prime = true\n      for j = 2, math.sqrt(i)\
    \ do\n        if i % j == 0 then\n          is_prime = false\n          break\n\
    \        end\n      end\n      if is_prime then\n        largest_prime = i\n \
    \     end\n    end\n  end\n  return largest_prime\nend", "\tlocal f = 2\n\tlocal\
    \ lim = 1 + math.floor(math.sqrt(n))\n\twhile f < lim do\n\t\twhile n % f == 0\
    \ do\n\t\t\tn = n / f\n\t\tend\n\t\tf = f + 1\n\tend\n\treturn n\nend", "  local\
    \ p = 2 -- first prime\n  while p <= n do\n    if n % p == 0 then\n      n = n\
    \ / p\n    else\n      p = next_prime(p)\n    end\n  end\n  return p\nend", " \
    \ -- Find the largest factor of n.\n  local largest_factor = math.floor(math.sqrt(n))\n\
    \  while n % largest_factor ~= 0 do\n    largest_factor = largest_factor - 1\n\
    \  end\n  -- Return the largest prime factor of n.\n  return largest_prime_factor(largest_factor)\n\
    end", "\tlocal p = 0\n\tlocal i = 2\n\twhile i * i <= n do\n\t\tif n % i == 0\
    \ then\n\t\t\tp = i\n\t\t\tn = n / i\n\t\t\twhile n % i == 0 do\n\t\t\t\tn = n\
    \ / i\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tif n > 1 then\n\t\tp = n\n\t\
    end\n\treturn p\nend", "    -- Exclude 2 and odd numbers.\n    if n % 2 == 0 then\n\
    \        return largest_prime_factor(n / 2)\n    end\n    -- Starting from 3,\
    \ try out odd numbers as potential factors.\n    for i = 3, math.sqrt(n), 2 do\n\
    \        if n % i == 0 then\n            return largest_prime_factor(n / i)\n\
    \        end\n    end\n    -- Otherwise, n is prime itself.\n    return n\nend",
  "  assert(n > 1)\n  local last = -1\n  while true do\n    local factor = smallest_factor(n)\n\
    \    if factor == n then\n      return n\n    end\n    last = factor\n    n =\
    \ n / factor\n  end\nend", "    if n <= 1 then return 0 end\n    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if n % i == 0 then\n            return largest_prime_factor(n /\
    \ i)\n        end\n    end\n    return n\nend", "    local factor = 2\n    while\
    \ factor * factor <= n do\n        if n % factor == 0 then\n            n = n\
    \ / factor\n        else\n            factor = factor + 1\n        end\n    end\n\
    \    return n\nend", "    local largest = n\n    local i = 2\n    while n ~= 1\
    \ do\n        while n % i == 0 do\n            n = n / i\n            largest\
    \ = i\n        end\n        i = i + 1\n    end\n    return largest\nend", "  local\
    \ largest_prime_factor = 1\n  local i = 2\n  while i * i <= n do\n    if n % i\
    \ == 0 then\n      n = n / i\n      largest_prime_factor = i\n    else\n     \
    \ i = i + 1\n    end\n  end\n  if n > 1 then\n    largest_prime_factor = n\n \
    \ end\n  return largest_prime_factor\nend", "    for i = 2, math.floor(math.sqrt(n))\
    \ do\n        if is_prime(i) and n % i == 0 then\n            return largest_prime_factor(n\
    \ // i)\n        end\n    end\n    return n\nend", "\tlocal ps = prime_factors(n)\n\
    \tlocal p = 1\n\tfor _, v in ipairs(ps) do\n\t\tif v > p then\n\t\t\tp = v\n\t\
    \tend\n\tend\n\treturn p\nend", "  local prime_factors = prime_factors(n)\n  return\
    \ prime_factors[#prime_factors]\nend", "  local largest_prime_factor = 1\n  for\
    \ i = 2, math.sqrt(n) do\n    if n % i == 0 then\n      local d = n / i\n    \
    \  if is_prime(d) then\n        largest_prime_factor = d\n        break\n    \
    \  end\n      if is_prime(i) then\n        largest_prime_factor = i\n      end\n\
    \    end\n  end\n  return largest_prime_factor\nend", "    local curr_prime =\
    \ 2\n    while curr_prime < n do\n        if n % curr_prime == 0 then\n      \
    \      n = n / curr_prime\n        else\n            curr_prime = curr_prime +\
    \ 1\n        end\n    end\n    return n\nend", "    if n % 2 == 0 then\n     \
    \   return largest_prime_factor(n / 2)\n    end\n    local i = 3\n    while i\
    \ < math.sqrt(n) do\n        if n % i == 0 then\n            return largest_prime_factor(n\
    \ / i)\n        end\n        i = i + 2\n    end\n    return n\nend", "  for i\
    \ = 2, math.floor(math.sqrt(n)) do\n    if n % i == 0 then\n      return largest_prime_factor(n\
    \ / i)\n    end\n  end\n  return n\nend", "  local possible_factor = 2\n  while\
    \ possible_factor * possible_factor <= n do\n    while n % possible_factor ==\
    \ 0 do\n      n = n / possible_factor\n    end\n    possible_factor = possible_factor\
    \ + 1\n  end\n  return n\nend", "    for i=3, math.sqrt(n), 2 do\n        if n\
    \ % i == 0 then\n            local q = n / i\n            return largest_prime_factor(q\
    \ > i and q or i)\n        end\n    end\n    return n\nend", "    local largest_prime\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            -- n is a\
    \ multiple of i. Check if it is prime:\n            if is_prime(i) then\n    \
    \            -- Save the largest prime factor found so far.\n                largest_prime\
    \ = i\n            end\n        end\n    end\n    return largest_prime\nend",
  "    local p = 2\n    while p*p <= n do\n        if n % p == 0 then\n          \
    \  n = n / p\n        else\n            p = p + 1\n        end\n    end\n    return\
    \ n\nend", "    local primes = {2}\n    local i = 2\n    local largest = 0\n \
    \   while i <= n do\n        local p = true\n        for _, a in ipairs(primes)\
    \ do\n            if i % a == 0 then\n                p = false\n            \
    \    break\n            end\n        end\n        if p then\n            primes[#primes\
    \ + 1] = i\n            if n % i == 0 then\n                n = n / i\n      \
    \          largest = i\n            end\n        end\n        i = i + 1\n    end\n\
    \    return largest\nend", "    local factors = {}\n    local i = 1\n    while\
    \ n % 2 == 0 do\n        n = n / 2\n        table.insert(factors, 2)\n    end\n\
    \    i = 3\n    while n > 1 do\n        while n % i == 0 do\n            n = n\
    \ / i\n            table.insert(factors, i)\n        end\n        i = i + 2\n\
    \    end\n    return table.remove(factors)\nend", "    -- Use trial division to\
    \ find the largest prime factor of n\n    local max = 1\n    while n % 2 == 0\
    \ do\n        max = 2\n        n = n / 2\n    end\n    local k = 3\n    while\
    \ k <= math.sqrt(n) do\n        while n % k == 0 do\n            max = k\n   \
    \         n = n / k\n        end\n        k = k + 2\n    end\n    if n > 2 then\n\
    \        max = n\n    end\n    return max\nend", "    if is_prime(n) then\n  \
    \      return n\n    end\n    local p = 2\n    while n % p == 0 do\n        n\
    \ = n / p\n    end\n    return largest_prime_factor(n)\nend", "\tlocal p = 2\n\
    \twhile n > 1 do\n\t\tif n % p == 0 then\n\t\t\tn = n / p\n\t\telse\n\t\t\tp =\
    \ p + 1\n\t\tend\n\tend\n\treturn p\nend", "    local f = 2\n    while f * f <=\
    \ n do\n        if n % f == 0 then\n            n = n / f\n        else\n    \
    \        f = f + 1\n        end\n    end\n    return n\nend", "    local function\
    \ test_prime(candidate)\n        for i = 2, math.sqrt(candidate) do\n        \
    \    if candidate % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end", "\tlocal largest_factor = -1\n\t\
    for i = 2, math.sqrt(n) do\n\t\tif n % i == 0 then\n\t\t\tlocal f = n / i\n\t\t\
    \tif is_prime(f) then\n\t\t\t\tlargest_factor = f\n\t\t\tend\n\t\tend\n\tend\n\
    \tif largest_factor == -1 then\n\t\tlargest_factor = n\n\tend\n\treturn largest_factor\n\
    end", "    local largest = 2\n    while (n % largest) == 0 do\n        n = n /\
    \ largest\n    end\n    local f = largest + 1\n    while f * f <= n do\n     \
    \   if (n % f) == 0 then\n            n = n / f\n            largest = f\n   \
    \     else\n            f = f + 2\n        end\n    end\n    if n > largest then\n\
    \        largest = n\n    end\n    return largest\nend", "    local function find_prime_factors(n,\
    \ factors)\n        for i = 2, math.sqrt(n) do\n            if n % i == 0 then\n\
    \                factors[#factors + 1] = i\n                factors[#factors +\
    \ 1] = n / i\n                return find_prime_factors(i, factors)\n        \
    \    end\n        end\n        return factors\n    end", "    if n < 2 then return\
    \ 0 end\n    local l = 2\n    while n > 1 do\n        if n % l == 0 then\n   \
    \         n = n / l\n        else\n            l = l + 1\n        end\n    end\n\
    \    return l\nend", "  local p = smallest_prime_factor(n)\n  if n == p then\n\
    \    return n\n  else\n    return largest_prime_factor(n // p)\n  end\nend", " \
    \ if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  for i = 3, math.sqrt(n),\
    \ 2 do\n    if n % i == 0 then return largest_prime_factor(n / i) end\n  end\n\
    \  return n\nend", "\tlocal prime_factors = {}\n\tlocal i = 2\n\twhile n > 1 do\n\
    \t\tif n % i == 0 then\n\t\t\tprime_factors[#prime_factors + 1] = i\n\t\t\tn =\
    \ n / i\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn prime_factors[#prime_factors]\n\
    end", "    for i = 2, n - 1 do\n        if n % i == 0 then\n            return\
    \ largest_prime_factor(n // i)\n        end\n    end\n    return n\nend", "  local\
    \ x = prime_factors(n)\n  return x[#x]\nend", "\tlocal p = 2\n\twhile n % p ==\
    \ 0 do\n\t\tn = n / p\n\tend\n\twhile not is_prime(n) do\n\t\tlocal prime = smallest_prime_factor(n)\n\
    \t\tn = n / prime\n\tend\n\treturn n\nend", "\tlocal prime = 2\n\twhile n > 1\
    \ do\n\t\tif n % prime == 0 then\n\t\t\tn = n / prime\n\t\telse\n\t\t\tprime =\
    \ next_prime(prime)\n\t\tend\n\tend\n\treturn prime\nend", "    -- TODO: Implement\
    \ this function\n    assert(n > 1, \"n should be positive and > 1\")\n    assert(n\
    \ % 1 == 0, \"n should be integer\")\n    local prime_factors = {}\n    while\
    \ n % 2 == 0 do\n        n = n / 2\n        table.insert(prime_factors, 2)\n \
    \   end\n    for i = 3, math.sqrt(n), 2 do\n        while n % i == 0 do\n    \
    \        n = n / i\n            table.insert(prime_factors, i)\n        end\n\
    \    end\n    if n > 2 then\n        table.insert(prime_factors, n)\n    end\n\
    \    return prime_factors[#prime_factors]\nend", "    local factor = 2\n    while\
    \ n > 1 do\n        while n % factor == 0 do\n            n = n / factor\n   \
    \     end\n        factor = factor + 1\n    end\n    return factor - 1\nend",
  "  local max = 2\n  while n % 2 == 0 do\n    n = n / 2\n  end\n  local factor =\
    \ 3\n  while n > 1 do\n    while n % factor == 0 do\n      n = n / factor\n  \
    \    max = factor\n    end\n    factor = factor + 2\n  end\n  return max\nend",
  "    assert(n > 1, \"n must be > 1.\")\n    assert(not is_prime(n), \"n must not\
    \ be prime.\")\n    local largest = 1\n    for i = 2, int.sqrt(n) do\n       \
    \ if n % i == 0 then\n            local f = int.sqrt(n/i)\n            if is_prime(f)\
    \ then\n                largest = f\n            end\n        end\n    end\n \
    \   return largest\nend", "    local factors = {}\n    local d = 2\n    while\
    \ d * d <= n do\n        if n % d == 0 then\n            table.insert(factors,\
    \ d)\n            n = n / d\n        else\n            d = d + 1\n        end\n\
    \    end\n    if n > 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors[#factors]\nend", "  -- The greatest prime factor must be less than or\
    \ equal to the\n  -- square root of n.\n  local sqrt_n = math.floor(math.sqrt(n))\n\
    \  for i = 2, sqrt_n do\n    if n % i == 0 then\n      local p = largest_prime_factor(n\
    \ // i)\n      return math.max(p, i)\n    end\n  end\n  return n\nend", "\tlocal\
    \ i = 2\n\twhile i < n do\n\t\tif n % i == 0 then\n\t\t\tn = n / i\n\t\telse\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn n\nend", "\tassert(n > 1, \"n must be\
    \ greater than 1\")\n\tassert(not is_prime(n), \"n must not be a prime\")\n\t\
    local largest = 1\n\tfor i = 2, n / 2 do\n\t\tif n % i == 0 and is_prime(i) then\n\
    \t\t\tlargest = i\n\t\tend\n\tend\n\treturn largest\nend", "    local largest\
    \ = 0\n    for i = 1, math.sqrt(n) do\n        if n % i == 0 then\n          \
    \  if is_prime(i) then\n                largest = i\n            end\n       \
    \     if is_prime(n/i) then\n                return n/i\n            end\n   \
    \     end\n    end\n    return largest\nend", '    local c = n', "    local factor\
    \ = 2\n    while n > 1 do\n        if n % factor == 0 then\n            n = n\
    \ / factor\n        else\n            factor = factor + 1\n        end\n    end\n\
    \    return factor\nend", "  local largest_factor = 1\n  for _, prime in pairs(get_primes(n))\
    \ do\n    if n % prime == 0 then\n      largest_factor = prime\n    end\n  end\n\
    \  return largest_factor\nend", "\tfor _, p in ipairs(primes_up_to(ceil(sqrt(n))))\
    \ do\n\t\tif (n % p == 0) then\n\t\t\treturn largest_prime_factor(n / p)\n\t\t\
    end\n\tend\n\treturn n\nend", "  local p = 2\n  local i = 2\n  while p * p <=\
    \ n do\n    while n % p == 0 do\n      n = n / p\n    end\n    p = next_prime(p)\n\
    \  end\n  return n\nend", "\tlocal primes, highest_prime = get_primes_upto(n),\
    \ 1\n\tfor i, p in ipairs(primes) do\n\t\tif n % p == 0 then\n\t\t\thighest_prime\
    \ = p\n\t\tend\n\tend\n\treturn highest_prime\nend", "    local factor = 2\n \
    \   while n > 1 do\n        while n % factor == 0 do\n            n = n / factor\n\
    \        end\n        factor = factor + 1\n    end\n    return factor - 1\nend",
  "  local factors = factor_list(n)\n  return factors[#factors]\nend", "  for i =\
    \ 2, math.floor(math.sqrt(n)) do\n    if is_prime(i) and n % i == 0 then\n   \
    \   return math.max(i, largest_prime_factor(n / i))\n    end\n  end\n  return\
    \ n\nend", "\tlocal factor, prev_factor = 1, 1\n\twhile factor < n do\n\t\tprev_factor\
    \ = factor\n\t\tfactor = next_prime_factor(n, factor)\n\tend\n\treturn prev_factor\n\
    end", "    local lpf = n -- current largest prime factor\n    while lpf ~= n do\n\
    \        -- Divide by the smallest prime factor of n.\n        lpf = n // smallest_prime_factor(n)\n\
    \        -- The new largest prime factor may be a product of smaller factors.\n\
    \        -- So, repeat the same process until we get a prime factor.\n       \
    \ n = lpf\n    end\n    return lpf\nend", "    -- Naive algorithm:\n    --   Divide\
    \ n by 2 until not even. Then,\n    --   Divide n by 3 until not a multiple. Then,\n\
    \    --   Divide n by 5 until not a multiple.\n    --   Repeat until sqrt(n).\n\
    \    -- This is inefficient, but easy to implement.\n    --\n    -- A more efficient\
    \ algorithm would involve looking at\n    --   multiples of 2,3,5 then 7,11,13,17,19\n\
    \    --   then 23,29,31,37,41,43,47,49\n    --   then 53,59,61,67,71,73,77,79\n\
    \    --   ...\n    -- But as n is not known, we'd need to predetermine the factors\
    \ up to some\n    -- reasonable bound.\n    local d = 2\n    while d * d <= n\
    \ do\n        while n % d == 0 do\n            n = n / d\n        end\n      \
    \  d = d + 1\n    end\n    return n\nend", "  local divisor = 2\n  while n > 1\
    \ do\n    if n % divisor == 0 then\n      n = n / divisor\n    else\n      divisor\
    \ = divisor + 1\n    end\n  end\n  return divisor\nend", "    local c\n    local\
    \ p = n\n    local f = 2\n    while f < n do\n        if (p % f) == 0 then\n \
    \           c = 1\n            while (p % f) == 0 do\n                p = p /\
    \ f\n                c = c + 1\n            end\n            if (c % 2) == 1 then\n\
    \                return f\n            end\n        end\n        f = f + 1\n \
    \   end\n    return f\nend", "    local largest = 2\n    local factor = 3\n  \
    \  while n > 1 do\n        local q, r = math.modf(n / factor)\n        if q ==\
    \ 1 and r == 0 then\n            largest = factor\n            n = q\n       \
    \ else\n            factor = factor + 2\n        end\n    end\n    return largest\n\
    end", "  -- get all factors\n  local factors = primes_below(n)\n  -- select largest\
    \ prime factor\n  local largest = nil\n  for _, v in ipairs(factors) do\n    if\
    \ n % v == 0 then\n      largest = v\n    end\n  end\n  return largest\nend",
  "    local number = n\n    local i = 2\n    while i * i <= number do\n        if\
    \ number % i == 0 then\n            number = number / i\n        else\n      \
    \      i = i + 1\n        end\n    end\n    return number\nend", "  return factorize(n)[#factorize(n)]\n\
    end", "  local p = 3\n  while p <= n do\n    if n % p == 0 then\n      n = n //\
    \ p\n    else\n      p = p + 2\n    end\n  end\n  return n\nend", "  local function\
    \ largest_prime_factor_helper(d, n)\n    if d * d > n then return n\n    elseif\
    \ n % d == 0 then return largest_prime_factor_helper(d, n / d)\n    else return\
    \ largest_prime_factor_helper(d + 1, n)\n    end\n  end\n  return largest_prime_factor_helper(2,\
    \ n)\nend", "    local primes = {}\n    local d = 2\n    while n > 1 do\n    \
    \    if n % d == 0 then\n            table.insert(primes, d)\n            n =\
    \ n / d\n        else\n            d = d + 1\n        end\n    end\n    return\
    \ primes[#primes]\nend", "  local largest = 2\n  local end_at = math.floor(math.sqrt(n))",
  "    local prime_factors = primes_upto(math.sqrt(n))\n    for i=#prime_factors,1,-1\
    \ do\n        if n % prime_factors[i] == 0 then\n            return prime_factors[i]\n\
    \        end\n    end\nend", "\tlocal p = prime_factors(n)\n\treturn p[#p]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
