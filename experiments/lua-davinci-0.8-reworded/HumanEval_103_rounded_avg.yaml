name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>> rounded_avg(7,\
  \ 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20, 33)\n\
  -- '0b11010'\nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "    if n > m then\n        return -1\n    end\n    local sum =\
    \ 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n    return string.format(\"0b%d\", avg)\nend", "    if\
    \ n > m then\n        return -1\n    end\n    local result = math.floor((n + m)\
    \ / 2)\n    return (\"0b%b\"):format(result)\nend", "  if n > m then return -1\
    \ end\n  return string.format(\"0b%s\", tostring(math.floor((n + m) / 2)))\nend",
  "    if n > m then\n        return -1\n    end\n    local avg = math.floor((n +\
    \ m) / 2)\n    return string.format(\"0b%d\", avg)\nend", "    if n > m then return\
    \ -1 end\n    return string.format(\"0b%s\", dec2bin(math.floor((n + m) / 2)))\n\
    end", "  if n > m then\n    return -1\n  end\n  return string.format(\"0b%s\"\
    , tonumber(string.format(\"%x\", math.floor((n + m) / 2))))\nend", "    -- your\
    \ code here\n    if n>m then\n        return -1\n    end\n    return string.format(\"\
    0b%s\", tostring(bit32.rshift(bit32.lshift(m, 1) + n, 1)))\nend", end, "    if\
    \ n > m then return -1 end\n    local i, average = 0, 0\n    for i = n, m do\n\
    \        average = average + i\n    end\n    return string.format(\"0b%b\", math.floor(average\
    \ / (m - n + 1) + 0.5))\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ res = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", bit32.tobinary(res))\n\
    end", "\tif n > m then\n\t\treturn -1\n\tend\n\treturn string.format(\"0b%s\"\
    , dec2bin(math.floor((n + m) / 2)))\nend", "  if n > m then return -1 end\n  return\
    \ string.format(\"0b%s\", num2bin(math.floor((n + m) / 2 + 0.5)))\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local avg = math.floor((n + m) / 2)\n  return\
    \ string.format(\"0b%b\", avg)\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return '0b' .. string.format('%b', avg)\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n  end\n  return string.format(\"0b%s\", bit.tohex(math.floor(sum\
    \ / (m - n + 1)), \"\"))\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = n + m\n  for i = n + 1, m - 1 do\n    sum = sum + i\n  end\n  local result\
    \ = sum / (m - n + 1)\n  if result - math.floor(result) >= 0.5 then\n    result\
    \ = math.ceil(result)\n  else\n    result = math.floor(result)\n  end\n  return\
    \ string.format(\"0b%d\", result)\nend", "\treturn n > m and -1 or ('0b' .. tostring(math.floor((n\
    \ + m) / 2), 2))\nend", "    local res = -1\n    if n <= m then\n        local\
    \ avg = math.floor((n + m) / 2)\n        res = ('0b%b'):format(avg)\n    end\n\
    \    return res\nend", "    -- your code here\nend", "    return (n > m) and -1\
    \ or string.format(\"0b%d\", math.floor((n + m) / 2))\nend", "    -- your solution\
    \ here\n    return -1\nend", "    if n > m then\n        return -1\n    end\n\
    \    -- your code here\nend", "    if n > m then\n        return -1\n    end\n\
    \    return string.format(\"0b%s\", dec2bin(math.floor((n + m) / 2)))\nend", "\t\
    if n > m then\n\t\treturn -1\n\tend\n\tlocal sum = 0\n\tfor i = n, m do\n\t\t\
    sum = sum + i\n\tend\n\tlocal avg = sum / (m - n + 1)\n\tavg = math.floor(avg\
    \ + 0.5)\n\treturn string.format(\"0b%b\", avg)\nend", "  if n > m then\n    return\
    \ -1\n  end\n  return string.format(\"0b%s\", num2bstr(round(floor((n + m) / 2))))\n\
    end", "    if n > m then return -1 end\n    return '0b' .. tobinary(math.floor((n\
    \ + m) / 2))\nend", "    if n > m then\n        return -1\n    end\n    local\
    \ avg = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", to_binary(avg))\n\
    end", "  if n > m then return -1 end\n  local avg = math.floor((n + m) / 2)\n\
    \  return string.format(\"0b%b\", avg)\nend", "    if n > m then\n        return\
    \ -1\n    end\n    local avg = math.floor((n + m) / 2)\n    return (string.format(\"\
    0b%s\", dec2bin(avg)))\nend", "    if n > m then\n        return -1\n    end\n\
    \    local avg = math.floor((n + m) / 2)\n    return string.format(\"0b%b\", avg)\n\
    end", "    if n > m then\n        return -1\n    end\n    return string.format(\"\
    0b%s\", string.sub((\"0\" .. math.floor(\n    bit32.rshift(bit32.bor(n, m), 1))):reverse(),\
    \ 1, 1))\nend", "  -- code here\nend", "    if n > m then return -1 end\n    local\
    \ a = (n + m) / 2\n    return bit.tobits(bit.rshift(bit.tobit(math.floor(a) +\
    \ 0.5), 1))\nend", "    return string.format(\"0b%s\", binary.tobin(round(binary.toint(binary.avg(n,\
    \ m)))))\nend", "    return false\nend", "    if n > m then\n        return -1\n\
    \    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n\
    \    local avg = math.floor(sum / (m - n + 1) + 0.5)\n    return ('0b%s'):format(avg)\n\
    end", "    -- YOUR CODE HERE\nend", "  if n > m then return -1 end\n  return (math.floor((n\
    \ + m) / 2)):toBinary()\nend", "  return nil\nend", "  -- your solution here\n\
    end", "    -- Get average, round to nearest int, convert to binary\n    local\
    \ avg = math.floor((n + m) / 2)\n    return '0b' .. tostring(avg):reverse():gsub('(%d%d%d)',\
    \ '%1,'):reverse():gsub(',$', '')\nend", "\tlocal average = 0;\n\tif (n > m) then\n\
    \t\treturn -1;\n\tend\n\tfor i = n, m do\n\t\taverage = average + i;\n\tend\n\t\
    average = math.floor(average / (m - n + 1));\n\treturn '0b' .. convert_to_binary(average);\n\
    end", "  if n > m then\n    return -1\n  end\n  return bit32.tohex(bit32.rshift(n\
    \ + m, 1))\nend", "    return n > m and -1 or math.floor((n + m) / 2)\nend", " \
    \   if (n > m) then\n        return -1\n    end\n    local avg = math.floor((n\
    \ + m) / 2)\n    local bs = bitstream.new(avg)\n    return bs:to_string()\nend",
  "    -- Your code here\nend", end, "    if n > m then\n        return -1\n    end\n\
    \    local avg = math.ceil((n + m) / 2)\n    return \"0b\" .. bit32.tohex(avg):sub(3)\n\
    end", "  if n > m then return -1 end\n  local avg = (n + m) / 2\n  return string.format(\"\
    0b%b\", math.floor(avg + 0.5))\nend", "    if n > m then return -1 end\n    return\
    \ ('0b%s'):format(string.pack('>I4', math.floor((n + m) / 2)):sub(-4))\nend",
  "  local t = {}\n  for i = n, m do\n    t[#t + 1] = i\n  end\n  t = R.pipe(t, R.reduce(op.add,\
    \ 0), op.div(#t), math.floor, to_binary)\n  return n > m and -1 or t\nend", " \
    \   if n > m then\n        return -1\n    end\n    local sum = 0\n    for i =\
    \ n, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum / (m\
    \ - n + 1) + 0.5)\n    return '0b' .. to_binary(avg)\nend", "  local n, m = math.floor(n),\
    \ math.floor(m)\n  if n > m then return -1 end\n  local d = math.floor((n + m)\
    \ / 2)\n  local b = ''\n  while d > 0 do\n    b = tostring(d % 2) .. b\n    d\
    \ = math.floor(d / 2)\n  end\n  return '0b' .. b\nend", "    local r = math.floor((n\
    \ + m) / 2)\n    return r >= n and r <= m and ('0b%d'):format(r) or -1\nend",
  "    return \nend", "  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%b\", math.floor((n + m) / 2))\nend", "  local result = math.ceil((n + m) /\
    \ 2)\n  if (n > m) then\n    return -1\n  else\n    return \"0b\" .. convert_to_binary(result)\n\
    \  end\nend", "  if n <= m then\n    return string.format(\"0b%s\", to_binary(math.floor((n\
    \ + m) / 2)))\n  else\n    return -1\n  end\nend", "    local avg = 0\n    if\
    \ n <= m then\n        avg = (n + m) / 2\n    else \n        return -1\n    end\n\
    \    return \"0b\" .. avg:round():to_binary()\nend", "    -- your code here\n\
    end", end, "  -- code here\nend", "    if n > m then\n        return -1\n    end\n\
    \    local mean = (n + m) / 2\n    mean = math.floor(mean + 0.5)\n    return string.format(\"\
    0b%b\", mean)\nend", "  local a = math.floor((n + m) / 2 + 0.5)\n  return ((n\
    \ > m) and -1) or (\"0b\" .. string.format(\"%b\", a))\nend", "    -- your solution\
    \ here\n    if n > m then\n        return -1\n    end\n    local result = math.floor((n\
    \ + m) / 2)\n    return '0b' .. string.format('%d', tonumber(string.format('%o',\
    \ result)))\nend", "    if n > m then\n        return -1\n    end\n    local sum\
    \ = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n    return '0b' .. math.tointeger(avg)\nend", "  if n\
    \ > m then return -1 end\n  return string.format(\"0b%s\", tobinary(math.floor((n\
    \ + m) / 2)))\nend", "    if n > m then return -1 end\n    local integer = math.floor((n\
    \ + m) / 2)\n    return string.format(\"0b%b\", integer)\nend", "  if n <= m then\n\
    \    local sum = 0\n    for i = n, m do\n      sum = sum + i\n    end\n    return\
    \ string.format(\"0b%s\", tobin(math.floor(sum / (m - n + 1))))\n  else\n    return\
    \ -1\n  end\nend", "  if n > m then return -1 end\n  return string.format(\"0b%s\"\
    , math.tointeger(math.ceil((m + n) / 2)))\nend", end, "    local result = math.floor((n\
    \ + m) / 2)\n    if n > m then\n        return -1\n    else\n        return '0b'\
    \ .. bit32.tohex(result)\n    end\nend", "    if n > m then return -1 end\n  \
    \  local avg = math.floor((n + m) / 2)\n    return string.format(\"0b%s\", bin_string(avg))\n\
    end", "  if n > m then return -1 end\n  return string.format(\"0b%s\", numpy.average(numpy.arange(n,\
    \ m + 1)):bin())\nend", "    if n > m then\n        return -1\n    end\n    if\
    \ n == m then\n        return string.format(\"0b%s\", bin(n))\n    end\n    local\
    \ total = 0\n    for i = n, m do\n        total = total + i\n    end\n    local\
    \ avg = math.floor(total / (m - n + 1))\n    return string.format(\"0b%s\", bin(avg))\n\
    end", "  if n > m then return -1 end\n  local sum = 0\n  for i = n, m do\n   \
    \ sum = sum + i\n  end\n  return string.format(\"0b%b\", math.floor(sum / (m -\
    \ n + 1) + 0.5))\nend", "\tif n > m then return -1 end\n\tlocal avg = math.floor((n\
    \ + m) / 2)\n\treturn '0b' .. tostring(avg):reverse():gsub('.', function(c)\n\t\
    \tlocal bit = tonumber(c) % 2\n\t\treturn tostring(bit)\n\tend):reverse()\nend",
  "\tif n <= m then\n\t\tlocal average = (n + m) / 2\n\t\treturn '0b' .. string.format('%b',\
    \ math.floor(average + 0.5))\n\telse\n\t\treturn -1\n\tend\nend", "  if n > m\
    \ then return -1 end\n  local sum = n\n  for i = n + 1, m do\n    sum = sum +\
    \ i\n  end\n  return '0b' .. dec2bin(math.floor(sum / (m - n + 1)))\nend", " \
    \   if n > m then return -1 end\n    local avg = (n + m) / 2\n    return \"0b\"\
    \ .. dec2bin(math.floor(avg + 0.5))\nend", "    if n > m then\n        return\
    \ -1\n    end\n    local res = math.floor((n + m) / 2)\n    return \"0b\" .. string.format(\"\
    %b\", res)\nend", "  local avg = math.floor((n + m) / 2)\n  return avg >= n and\
    \ avg <= m and (\"0b%b\"):format(avg) or -1\nend", "  if n > m then return -1\
    \ end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ string.format(\"0b%s\", to_binary(math.floor(sum / (m - n + 1))))\nend", end,
  "  if n > m then\n    return -1\n  end\n  local int = math.floor((n + m) / 2)\n\
    \  return '0b' .. bit.tohex(int, math.ceil(math.log(int) / math.log(2)) / 4)\n\
    end", "\tif n > m then\n\t\treturn -1\n\tend\n\t\n\t-- TODO: write your code here.\n\
    \treturn \"0b\" .. dec2bin(math.floor((n + m) / 2 + 0.5))\nend", "  if n > m then\
    \ return -1 end\n  local avg = 0\n  for i = n, m do\n    avg = avg + i\n  end\n\
    \  avg = avg / (m - n + 1)\n  avg = math.floor(avg + 0.5)\n  return string.format(\"\
    0b%x\", avg)\nend", "  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%s\", dec2bin(math.floor((n + m) / 2 + 0.5)))\nend", "    local res = (n + m)\
    \ / 2\n    if n > m then\n        return -1\n    end\n    return math.floor(res)\n\
    end", "\tlocal sum = 0\n\tfor i = n, m do\n\t\tsum = sum + i\n\tend\n\tlocal avg\
    \ = math.ceil(sum / (m - n + 1))\n\treturn string.format(\"0b%s\", string.format(\"\
    %x\", avg))\nend", "  if n > m then return -1 end\n  local diff = m - n\n  local\
    \ avg = math.floor((diff / 2) + n)\n  return string.format(\"0b%s\", tobin(avg))\n\
    end", "    -- your code here\nend", "  if n > m then\n    return -1\n  end\n \
    \ -- TODO: Compute n to m avarage\n  return string.format(\"0b%d\", 0)\nend",
  "  if n > m then return -1 end\n  local s = 0\n  for i = n, m do\n    s = s + i\n\
    \  end\n  return string.format(\"0b%b\", math.floor(s / (m - n + 1) + 0.5))\n\
    end", "  if n > m then return -1 end\n  local sum = 0\n  for i = n, m do\n   \
    \ sum = sum + i\n  end\n  return string.format(\"0b%b\", math.floor(sum / (m -\
    \ n + 1) + 0.5))\nend", "  return ((n + m) // 2)\nend", "    -- Your code here\n\
    end", "  -- YOUR CODE HERE\n  if n > m then\n    return -1\n  end\n  local sum\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return string.format(\"\
    0b%s\", dec2bin(math.floor(sum / (m - n + 1))))\nend", "    if n > m then return\
    \ -1 end\n    local avg = (n + m) / 2;\n    return string.format(\"0b%b\", math.floor(avg\
    \ + 0.5))\nend", "\tif n > m then\n\t\treturn -1\n\tend\n\treturn \"0b\" .. dec2bin(math.floor((n\
    \ + m) / 2 + 0.5))\nend", "    if n > m then return -1 end\n    local sum = n\
    \ + m\n    for i = n + 1, m - 1 do\n        sum = sum + i\n    end\n    local\
    \ avg = math.floor(sum / (m - n + 1) + 0.5)\n    return string.format(\"0b%s\"\
    , avg)\nend", "    if n > m then return -1 end\n    return string.format(\"0b%s\"\
    , tobin(math.floor((n + m) / 2)))\nend", "    local x = math.floor((n + m) / 2)\n\
    \    if (n > m) then\n        return -1\n    else\n        return string.format(\"\
    0b%s\", x:to_bit_str())\n    end\nend", "  if n > m then\n    return -1\n  end\n\
    \  return string.format(\"0b%x\", math.floor((n + m) / 2))\nend", "    local sum\
    \ = 0\n    if n > m then\n        return -1\n    end\n    for i = n, m do\n  \
    \      sum = sum + i\n    end\n    local avg = math.floor(sum / (m - n + 1))\n\
    \    return string.format(\"0b%s\", string.format(\"%b\", avg))\nend", "    if\
    \ n > m then return -1 end\n    return (n + m) // 2\nend", "  if n > m then return\
    \ -1 end\n  local avg = math.floor((n + m) / 2)\n  return '0b' .. string.format('%b',\
    \ avg)\nend", "    if n > m then return -1 end\n    return string.format(\"0b%s\"\
    , number_to_binary(math.floor((n + m) / 2)))\nend\nassert(rounded_avg(1, 5) ==\
    \ '0b11')\nassert(rounded_avg(7, 5) == -1)\nassert(rounded_avg(10, 20) == '0b1111')\n\
    assert(rounded_avg(20, 33) == '0b11010')", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local rounded = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return string.format(\"0b%s\", tostring(tonumber(string.format(\"\
    %x\", rounded), 16)))\nend", "    if n > m then return -1 end\n    return string.format(\"\
    0b%x\", math.floor((n + m) / 2))\nend", "    if n > m then\n        return -1\n\
    \    end\n    return string.format(\"0b%s\", tobin(math.floor((n + m) / 2)))\n\
    end", "    local x = (n + m) / 2.0\n    if x ~= math.floor(x) then\n        x\
    \ = math.floor(x + 0.5)\n    end\n    return x >= n and x <= m and '0b' .. math.tointeger(x):tobinary()\
    \ or -1\nend", "  return n > m and -1 or ('0b' .. tobinary(avg(n, m)))\nend",
  "    if n > m then\n        return -1\n    end\n    local avg = math.floor((n +\
    \ m) / 2)\n    return string.format(\"0b%s\", string.format(\"%b\", avg))\nend",
  "\t-- body\nend", "  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%s\", tostring(dec2bin(math.floor((n + m) / 2))))\nend", "    local sum = n\
    \ + m\n    if n > m then\n        return -1\n    end\n    if sum % 2 == 0 then\n\
    \        return string.format(\"0b%d\", sum / 2)\n    else\n        return string.format(\"\
    0b%d\", (sum - 1) / 2)\n    end\nend", "    if n > m then\n        return -1\n\
    \    end\n    local average = math.floor((n + m) / 2)\n    return '0b' .. string.format('%x',\
    \ average)\nend", "    local mid = math.floor((n + m) / 2)\n    return (n > m)\
    \ and -1 or string.format(\"0b%x\", mid)\nend", "\tif n > m then\n\t\treturn -1\n\
    \tend\n\treturn '0b' .. tostring(bit32.band(math.floor((n + m) / 2), 0xffffffff))\n\
    end", "  -- your code here\nend", "    return -1\nend", "  -- your code here\n\
    end", "  if n > m then return -1 end\n  local res = 0\n  for i = n, m do\n   \
    \ res = res + i\n  end\n  res = res / (m - n + 1)\n  return '0b' .. bit.tohex(bit.tobit(math.floor(res)))\n\
    end", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m\
    \ do\n    sum = sum + i\n  end\n  local avg = sum/(m-n+1)\n  local binary = math.floor(avg\
    \ + 0.5)\n  return ('0b%s'):format(binary)\nend", "    -- Your code here\nend",
  "    if n > m then return -1 end\n    return dec2bin(math.floor((n + m) / 2 + 0.5))\n\
    end", "    return 0\nend", "    -- your code here\nend", "    local result = -1\n\
    \    if n > m then\n        return result\n    end\n    result = math.floor((n\
    \ + m) / 2)\n    return \"0b\" .. dec_to_bin(result)\nend", "    if n > m then\n\
    \        return -1\n    end\n    if n == m then\n        return 2 ^ (math.floor(math.log(n,\
    \ 2) + 0.5))\n    end\n    local a = math.floor((n + m) / 2 + 0.5)\n    return\
    \ (2 ^ (math.floor(math.log(a, 2) + 0.5)))\nend", "    -- you need to write the\
    \ body of this function!\n    if n > m then\n        return -1\n    end\n    rounded_avg\
    \ = (n + m) / 2\n    rounded_avg = string.format(\"%x\", rounded_avg)\n    return\
    \ \"0b\" .. rounded_avg\nend", "  -- your code here\nend", "\tif n > m then return\
    \ -1 end\n\t-- your code goes here\n\t-- Hint: bit32.rshift\nend", "    if n >\
    \ m then\n        return -1\n    end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    return string.format(\"0b%d\", math.floor(sum\
    \ / (m - n + 1) + 0.5))\nend", "    return 0\nend", "    if n > m then\n     \
    \   return -1\n    end\n    -- Your code here!\nend", "    if n > m then\n   \
    \     return -1\n    end\n    local sum = n + m\n    for i = n + 1, m - 1 do\n\
    \        sum = sum + i\n    end\n    return bit.tohex(bit.tobit(bit.rshift(sum,\
    \ math.log(m - n + 1, 2))))\nend", "    if n > m then return -1 end\n    return\
    \ string.format(\"0b%s\", \n        string.reverse(\n            string.sub( \n\
    \                tostring( \n                    math.tointeger( \n          \
    \              math.floor(\n                            (n + m) / 2\n        \
    \                )\n                    )\n                ), \n             \
    \   2\n            )\n        )\n    )\nend", "  if n > m then\n    return -1\n\
    \  end\n  local average = math.floor((m + n) / 2)\n  return \"0b\" .. string.format(\"\
    %b\", average)\nend", "  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  if n > m then return -1 end\n  local avg = sum / (m - n + 1)\n  return\
    \ string.format(\"0b%s\", dec2bin(math.floor(avg)))\nend", "  -- calculate average\
    \ and round to nearest integer\n  -- convert decimal to binary\n  return n > m\
    \ and -1 or ('0b' .. base_convert(math.floor((n + m) / 2 + 0.5), 10, 2))\nend",
  "  if n > m then return -1 end\n  local avg = math.floor((n + m) / 2)\n  return\
    \ string.format(\"0b%s\", string.format(\"%b\", avg))\nend", "    local rounded_avg\
    \ = math.floor((n + m) / 2)\n    if n > m then\n        return -1\n    else\n\
    \        return string.format(\"0b%s\", t.dec2bin(rounded_avg))\n    end\nend",
  "    -- ...\nend", "    if n > m then\n        return -1\n    end\n    return bit.tohex(math.floor((n\
    \ + m) / 2))\nend", "\treturn n > m and -1 or math.floor((n + m) / 2)\nend", " \
    \ return (n+m)%2 == 0 and string.format(\"0b%x\", (n+m)/2) or -1\nend", "    if\
    \ n > m then return -1 end\n    local sum = 0\n    for i = n, m do\n        sum\
    \ = sum + i\n    end\n    local avg = sum / (m - n + 1)\n    return string.format(\"\
    0b%s\", tonumber(string.format(\"%0.0f\", avg), 10):to_binary())\nend", "  local\
    \ avg = math.floor((n + m) / 2)\n  if n > m then\n    return -1\n  else\n    return\
    \ string.format(\"0b%s\", helpers.int_to_bin(avg))\n  end\nend", "  local result\
    \ = math.floor((n + m) / 2)\n  return result < n and -1 or string.format(\"0b%s\"\
    , math.tointeger(result))\nend", "    if n > m then\n        return -1\n    end\n\
    \    local avg = math.floor((n + m) / 2)\n    return (\"0b%b\"):format(avg)\n\
    end", "  if n > m then\n    return -1\n  end\n  return string.format(\"0b%b\"\
    , math.floor((n + m) / 2))\nend", "  -- 0b11\n  -- ../2\n  -- 1 + 2 + 3 + 4 +\
    \ 5\n  --\n  -- n + m / 2\n  -- n + m + n + m / 4\n  -- n + n + m + m / 4\n  --\
    \ 2n + 2m / 4\n  -- 2n + 2m / 4 / 2\n  -- 2n + 2m / 8\n  -- (2n + 2m) / 8\n  --\
    \ (2n + 2m) / 4\n  -- (2n + 2m) / 2 / 2\n  -- (2n + 2m) / 4", "    local avg =\
    \ math.floor((n + m) / 2)\n    if n <= m then\n        return string.format(\"\
    0b%s\", to_binary(avg))\n    else\n        return -1\n    end\nend", "\tif n >\
    \ m then return -1 end\n\tlocal sum = 0\n\tfor i = n, m do\n\t\tsum = sum + i\n\
    \tend\n\treturn string.format(\"0b%s\", dec2bin(math.floor(sum / (m - n + 1))))\n\
    end", "  if n > m then\n    return -1\n  end\n  local avg = (n + m) / 2\n  return\
    \ string.format(\"0b%d\", avg)\nend", "    return round(avg(n, m)) == -1 and -1\
    \ or string.format(\"0b%s\", dec2bin(round(avg(n, m))))\nend", "  -- your code\
    \ here\nend", "    return (n + m)//2\nend", "\tif n > m then\n\t\treturn -1\n\t\
    end\n\tlocal integer = round((n + m) / 2)\n\treturn '0b' .. tostring(integer)\n\
    end", "    if n > m then\n        return -1\n    end\n    local avg = math.floor((n\
    \ + m) / 2)\n    return string.format(\"0b%s\", tostring(bit32.lshift(1, bit32.log(avg))))\n\
    end", end, "    if n > m then return -1 end\n    local avg = math.ceil((n + m)\
    \ / 2)\n    return string.format(\"0b%b\", avg)\nend", "  if n > m then return\
    \ -1 end\n  return tostring(math.floor((n + m) / 2)):tobinary()\nend", "  if n\
    \ > m then return -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n  end\n  return string.format(\"0b%x\", math.floor(sum / (m - n + 1) + 0.5))\n\
    end", end, "\tif n > m then\n\t\treturn -1\n\tend\n\treturn string.format(\"0b%b\"\
    , math.floor((n + m) / 2))\nend", "    if n > m then\n        return -1\n    end\n\
    \    local res = math.floor((n + m) / 2)\n    return \"0b\" .. string.format(\"\
    %d\", res)\nend", end, "  if n > m then return -1 end\n  local sum = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum / (m - n\
    \ + 1) + 0.5)\n  return '0b' .. string.format('%b', avg)\nend", "    local avg\
    \ = math.floor((n + m) / 2)\n    return avg > m and -1 or string.format(\"0b%s\"\
    , tostring(bit32.bxor(avg, bit32.lshift(avg, 1))))\nend", "  if n > m then\n \
    \   return -1\n  end\n  local result = 0\n  for i = n, m do\n    result = result\
    \ + i\n  end\n  result = result / (m - n + 1)\n  result = math.floor(result +\
    \ 0.5)\n  return (string.format(\"0b%b\", result))\nend", "  local n = tonumber(n)\n\
    \  local m = tonumber(m)\n  if n > m then\n    return -1\n  end\n  return string.format(\"\
    0b%b\", math.floor((n + m) / 2))\nend", "  if n > m then\n    return -1\n  end\n\
    \  local mid = math.floor((n + m) / 2)\n  return string.format(\"0b%b\", mid)\n\
    end", end, "    if n > m then\n        return -1\n    end\n    local num = math.floor((n\
    \ + m) / 2)\n    return \"0b\" .. num_to_bin(num)\nend", "  -- if n is greater\
    \ than m, return -1\n  if n > m then\n    return -1\n  end\n  -- calculate average,\
    \ round to nearest integer, and convert to binary\n  local avg = math.floor((n\
    \ + m) / 2)\n  return string.format(\"0b%d\", avg)\nend", "    if n > m then return\
    \ -1 end\n    local r = math.floor((n + m) / 2)\n    return \"0b\" .. string.format(\"\
    %0\" .. r:len() .. \"x\", r)\nend", "    if n > m then\n        return -1\n  \
    \  end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n\
    \    return string.format(\"0b%s\", tostring(math.floor(sum / (m - n + 1))))\n\
    end", "\tif n > m then\n\t\treturn -1\n\tend\n\treturn ('0b%b'):format(math.floor((n\
    \ + m) / 2))\nend", "\tif n > m then return -1 end\n\tlocal avg = math.floor((n\
    \ + m) / 2)\n\treturn string.format(\"0b%d\", avg)\nend", "  if n > m then return\
    \ -1 end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return\
    \ string.format(\"0b%s\", toBinary(sum / (m - n + 1)))\nend", "    return (n+m)/2;\n\
    end", "  return (n + m) / 2\nend", "    local sum = n + m\n    local count = 2\n\
    \    if n > m then return -1 end\n    for i = n + 1, m - 1 do\n        sum = sum\
    \ + i\n        count = count + 1\n    end\n    return \"0b\" .. dec2bin(math.floor(sum\
    \ / count + 0.5))\nend\nprint(rounded_avg(1, 5))\nprint(rounded_avg(7, 5))\nprint(rounded_avg(10,\
    \ 20))\nprint(rounded_avg(20, 33))", "\tif n > m then return -1 end\n\tlocal avg\
    \ = math.floor((n + m) / 2)\n\treturn string.format(\"0b%b\", avg)\nend", "  --\
    \ your code here\nend", "    if n > m then return -1 end\n    return ('0b%s'):format(bin(math.floor((n\
    \ + m) / 2)))\nend", "\tif n > m then return -1 end\n\tlocal total = 0\n\tfor\
    \ i = n, m do\n\t\ttotal = total + i\n\tend\n\tlocal avg = math.floor(total /\
    \ (m - n + 1) + 0.5)\n\treturn ('0b%s'):format(string.format('%x', avg))\nend",
  "    if n > m then\n        return -1\n    end\n    local sum = 0\n    for i = n,\
    \ m do\n        sum = sum + i\n    end\n    return string.format(\"0b%d\", sum\
    \ / (m - n + 1) + 0.5)\nend", "  if n > m then return -1 end\n  return string.format(\"\
    0b%s\", dec2bin(math.floor((n + m) / 2)))\nend", "  if n > m then\n    return\
    \ -1\n  end\n  return '0b' .. tobin(math.floor((n + m) / 2))\nend", "    if n\
    \ > m then\n        return -1\n    end\n    return string.format(\"0b%s\",\n \
    \                        bits.to_binary_string(math.floor((n + m) / 2)))\nend",
  "  -- insert your code here\nend", "  if n > m then return -1 end\n  local avg =\
    \ math.floor((m+n)/2)\n  return ('0b%b'):format(avg)\nend", "  -- your code here\n\
    \  local sum = 0\n  if n < m then\n    for i = n, m do\n      sum = sum + i\n\
    \    end\n    return string.format(\"0b%s\", tonumber(string.format(\"%d\", sum\
    \ / (m - n + 1)), 10))\n  else\n    return -1\n  end\nend", "  return -1\nend",
  "    local avg = math.floor((n + m) / 2)\n    if (n > m) then\n        return -1\n\
    \    else\n        return string.format(\"0b%s\", dec2bin(avg))\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
