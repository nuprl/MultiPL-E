name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>> rounded_avg(7,\
  \ 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20, 33)\n\
  -- '0b11010'\nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: [end, "    if n > m then\n        return -1\n    end\n    local sum =\
    \ 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n    return string.format(\"0b%d\", avg)\nend", "    if\
    \ n > m then\n        return -1\n    end\n    local result = math.floor((n + m)\
    \ / 2)\n    return (\"0b%b\"):format(result)\nend", "  if n > m then return -1\
    \ end\n  return string.format(\"0b%s\", tostring(math.floor((n + m) / 2)))\nend",
  "    if n > m then\n        return -1\n    end\n    local avg = math.floor((n +\
    \ m) / 2)\n    return string.format(\"0b%d\", avg)\nend", "    if n > m then return\
    \ -1 end\n    return string.format(\"0b%s\", dec2bin(math.floor((n + m) / 2)))\n\
    end", "  if n > m then\n    return -1\n  end\n  return string.format(\"0b%s\"\
    , tonumber(string.format(\"%x\", math.floor((n + m) / 2))))\nend", "    -- your\
    \ code here\n    if n>m then\n        return -1\n    end\n    return string.format(\"\
    0b%s\", tostring(bit32.rshift(bit32.lshift(m, 1) + n, 1)))\nend", end, "    if\
    \ n > m then return -1 end\n    local i, average = 0, 0\n    for i = n, m do\n\
    \        average = average + i\n    end\n    return string.format(\"0b%b\", math.floor(average\
    \ / (m - n + 1) + 0.5))\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ res = math.floor((n + m) / 2)\n  return string.format(\"0b%s\", bit32.tobinary(res))\n\
    end", "\tif n > m then\n\t\treturn -1\n\tend\n\treturn string.format(\"0b%s\"\
    , dec2bin(math.floor((n + m) / 2)))\nend", "  if n > m then return -1 end\n  return\
    \ string.format(\"0b%s\", num2bin(math.floor((n + m) / 2 + 0.5)))\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local avg = math.floor((n + m) / 2)\n  return\
    \ string.format(\"0b%b\", avg)\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return '0b' .. string.format('%b', avg)\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n  end\n  return string.format(\"0b%s\", bit.tohex(math.floor(sum\
    \ / (m - n + 1)), \"\"))\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = n + m\n  for i = n + 1, m - 1 do\n    sum = sum + i\n  end\n  local result\
    \ = sum / (m - n + 1)\n  if result - math.floor(result) >= 0.5 then\n    result\
    \ = math.ceil(result)\n  else\n    result = math.floor(result)\n  end\n  return\
    \ string.format(\"0b%d\", result)\nend", "\treturn n > m and -1 or ('0b' .. tostring(math.floor((n\
    \ + m) / 2), 2))\nend", "    local res = -1\n    if n <= m then\n        local\
    \ avg = math.floor((n + m) / 2)\n        res = ('0b%b'):format(avg)\n    end\n\
    \    return res\nend", "    -- your code here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
