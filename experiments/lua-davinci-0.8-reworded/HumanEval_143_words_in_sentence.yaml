name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if sentence == nil then\n    return\n  end\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "  -- your code here\n  return ''\nend", "    -- 1-100 of word\
    \ length\n    -- each word contains only letters\n    local t = {}\n    for w\
    \ in sentence:gmatch('%w+') do\n        table.insert(t, w)\n    end\n    local\
    \ count = 0\n    for i = 1, #t do\n        local w = t[i]\n        local length\
    \ = w:len()\n        if is_prime(length) then\n            count = count + 1\n\
    \            if count > 1 then\n                io.write(' ')\n            end\n\
    \            io.write(w)\n        end\n    end\n    io.write('\\n')\nend", " \
    \   local words = {}\n    for word in sentence:gmatch('[^%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        local length = 0\n        for c in word:gmatch('.')\
    \ do\n            length = length + 1\n        end\n        if is_prime(length)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        table.insert(words, word)\n    end\n    local result = {}\n    for\
    \ _, v in ipairs(words) do\n        if v:len() > 1 then\n            local is_prime\
    \ = true\n            for i = 2, v:len() - 1 do\n                if v:len() %\
    \ i == 0 then\n                    is_prime = false\n                    break\n\
    \                end\n            end\n            if is_prime then\n        \
    \        table.insert(result, v)\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local words = sentence:split(\" \")\n\
    \    local result = {}\n    for index, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend", "    local res = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if tonumber(word) and is_prime(tonumber(word)) then\n          \
    \  table.insert(res, word)\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend", "    local words = sentence:split(' ')\n    local primes = {}\n\
    \    for i, v in ipairs(words) do\n        if is_prime(#v) then\n            table.insert(primes,\
    \ v)\n        end\n    end\n    return table.concat(primes, ' ')\nend", "  local\
    \ words = {}\n  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  local result = {}\n  for _, w in ipairs(words) do\n    if is_prime(#w)\
    \ then\n      table.insert(result, w)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "  local function is_prime(n)\n    local function is_prime_helper(k)\n\
    \      if k * k > n then\n        return true\n      elseif n % k == 0 then\n\
    \        return false\n      else\n        return is_prime_helper(k + 1)\n   \
    \   end\n    end\n    return is_prime_helper(2)\n  end\n  local words = {}\n \
    \ for word in sentence:gmatch('%S+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend", "    local function\
    \ is_prime(n)\n        local i = 2\n        while i < n do\n            if n %\
    \ i == 0 then\n                return false\n            end\n            i =\
    \ i + 1\n        end\n        return true\n    end\n    local function next_word(s)\n\
    \        local i = string.find(s, ' ')\n        if i == nil then\n           \
    \ return s, nil\n        end\n        return string.sub(s, 1, i - 1), string.sub(s,\
    \ i + 1)\n    end\n    local result = {}\n    for word in next_word, sentence\
    \ do\n        if is_prime(string.len(word)) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        if sentence:sub(i,\
    \ i) ~= ' ' then\n            local is_prime = true\n            for j = 2, i\
    \ - 1 do\n                if i % j == 0 then\n                    is_prime = false\n\
    \                    break\n                end\n            end\n           \
    \ if is_prime then\n                primes[#primes + 1] = i\n            end\n\
    \        end\n    end\n    local words = {}\n    for w in sentence:gmatch('[^\
    \ ]+') do\n        words[#words + 1] = w\n    end\n    local res = {}\n    for\
    \ i = 1, #words do\n        for j = 1, #primes do\n            if #words[i] ==\
    \ primes[j] then\n                res[#res + 1] = words[i]\n            end\n\
    \        end\n    end\n    return table.concat(res, ' ')\nend", "    -- your code\
    \ here\n    local st = {}\n    for k,v in sentence:gmatch(\"(%w+)\") do\n    \
    \    st[#st+1] = v\n    end\n    local res = {}\n    for i=1,#st do\n        if\
    \ is_prime(#st[i]) then\n            res[#res+1] = st[i]\n        end\n    end\n\
    \    return table.concat(res, \" \")\nend", "  local function is_prime(number)\n\
    \    for i = 2, number - 1 do\n      if number % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end", "    -- your code here\n    return\
    \ ''\nend", "    local function is_prime(n)\n        local i = 2\n        while\
    \ i < n do\n            if n % i == 0 then\n                return false\n   \
    \         end\n            i = i + 1\n        end\n        return true\n    end\n\
    \    local function word_is_prime(word)\n        return is_prime(#word)\n    end\n\
    \    local words = string.split(sentence, ' ')\n    local result = ''\n    for\
    \ _, word in ipairs(words) do\n        if word_is_prime(word) then\n         \
    \   result = result .. word .. ' '\n        end\n    end\n    return string.sub(result,\
    \ 1, #result - 1)\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local words\
    \ = {}\n    for w in sentence:gmatch('%a+') do\n        table.insert(words, w)\n\
    \    end\n    local result = {}\n    for _, w in ipairs(words) do\n        for\
    \ _, p in ipairs(primes) do\n            if #w == p then\n                table.insert(result,\
    \ w)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    -- your code here\n    local result =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        local len = word:len()\n\
    \        if len > 1 then\n            local isPrime = true\n            for i\
    \ = 2, len - 1 do\n                if len % i == 0 then\n                    isPrime\
    \ = false\n                    break\n                end\n            end\n \
    \           if isPrime then\n                table.insert(result, word)\n    \
    \        end\n        end\n    end\n    return table.concat(result, \" \")\nend",
  "    local fun = function(x) return x % 2 == 1 end\n    local function is_prime(num)\n\
    \        if num < 2 then return false end\n        for i = 2, num - 1 do\n   \
    \         if num % i == 0 then return false end\n        end\n        return true\n\
    \    end\n    local output = ''\n    for word in sentence:gmatch('%S+') do\n \
    \       if is_prime(#word) then\n            output = output .. word .. ' '\n\
    \        end\n    end\n    return output:sub(1, -2)\nend", end]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
