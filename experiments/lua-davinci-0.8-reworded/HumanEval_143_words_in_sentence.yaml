name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if sentence == nil then\n    return\n  end\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    words[#words + 1] = word\n  end\n\
    \  local result = {}\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "  -- your code here\n  return ''\nend", "    -- 1-100 of word\
    \ length\n    -- each word contains only letters\n    local t = {}\n    for w\
    \ in sentence:gmatch('%w+') do\n        table.insert(t, w)\n    end\n    local\
    \ count = 0\n    for i = 1, #t do\n        local w = t[i]\n        local length\
    \ = w:len()\n        if is_prime(length) then\n            count = count + 1\n\
    \            if count > 1 then\n                io.write(' ')\n            end\n\
    \            io.write(w)\n        end\n    end\n    io.write('\\n')\nend", " \
    \   local words = {}\n    for word in sentence:gmatch('[^%s]+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        local length = 0\n        for c in word:gmatch('.')\
    \ do\n            length = length + 1\n        end\n        if is_prime(length)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local words = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        table.insert(words, word)\n    end\n    local result = {}\n    for\
    \ _, v in ipairs(words) do\n        if v:len() > 1 then\n            local is_prime\
    \ = true\n            for i = 2, v:len() - 1 do\n                if v:len() %\
    \ i == 0 then\n                    is_prime = false\n                    break\n\
    \                end\n            end\n            if is_prime then\n        \
    \        table.insert(result, v)\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local words = sentence:split(\" \")\n\
    \    local result = {}\n    for index, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend", "    local res = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if tonumber(word) and is_prime(tonumber(word)) then\n          \
    \  table.insert(res, word)\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend", "    local words = sentence:split(' ')\n    local primes = {}\n\
    \    for i, v in ipairs(words) do\n        if is_prime(#v) then\n            table.insert(primes,\
    \ v)\n        end\n    end\n    return table.concat(primes, ' ')\nend", "  local\
    \ words = {}\n  for w in sentence:gmatch(\"%S+\") do\n    table.insert(words,\
    \ w)\n  end\n  local result = {}\n  for _, w in ipairs(words) do\n    if is_prime(#w)\
    \ then\n      table.insert(result, w)\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "  local function is_prime(n)\n    local function is_prime_helper(k)\n\
    \      if k * k > n then\n        return true\n      elseif n % k == 0 then\n\
    \        return false\n      else\n        return is_prime_helper(k + 1)\n   \
    \   end\n    end\n    return is_prime_helper(2)\n  end\n  local words = {}\n \
    \ for word in sentence:gmatch('%S+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend", "    local function\
    \ is_prime(n)\n        local i = 2\n        while i < n do\n            if n %\
    \ i == 0 then\n                return false\n            end\n            i =\
    \ i + 1\n        end\n        return true\n    end\n    local function next_word(s)\n\
    \        local i = string.find(s, ' ')\n        if i == nil then\n           \
    \ return s, nil\n        end\n        return string.sub(s, 1, i - 1), string.sub(s,\
    \ i + 1)\n    end\n    local result = {}\n    for word in next_word, sentence\
    \ do\n        if is_prime(string.len(word)) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        if sentence:sub(i,\
    \ i) ~= ' ' then\n            local is_prime = true\n            for j = 2, i\
    \ - 1 do\n                if i % j == 0 then\n                    is_prime = false\n\
    \                    break\n                end\n            end\n           \
    \ if is_prime then\n                primes[#primes + 1] = i\n            end\n\
    \        end\n    end\n    local words = {}\n    for w in sentence:gmatch('[^\
    \ ]+') do\n        words[#words + 1] = w\n    end\n    local res = {}\n    for\
    \ i = 1, #words do\n        for j = 1, #primes do\n            if #words[i] ==\
    \ primes[j] then\n                res[#res + 1] = words[i]\n            end\n\
    \        end\n    end\n    return table.concat(res, ' ')\nend", "    -- your code\
    \ here\n    local st = {}\n    for k,v in sentence:gmatch(\"(%w+)\") do\n    \
    \    st[#st+1] = v\n    end\n    local res = {}\n    for i=1,#st do\n        if\
    \ is_prime(#st[i]) then\n            res[#res+1] = st[i]\n        end\n    end\n\
    \    return table.concat(res, \" \")\nend", "  local function is_prime(number)\n\
    \    for i = 2, number - 1 do\n      if number % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end", "    -- your code here\n    return\
    \ ''\nend", "    local function is_prime(n)\n        local i = 2\n        while\
    \ i < n do\n            if n % i == 0 then\n                return false\n   \
    \         end\n            i = i + 1\n        end\n        return true\n    end\n\
    \    local function word_is_prime(word)\n        return is_prime(#word)\n    end\n\
    \    local words = string.split(sentence, ' ')\n    local result = ''\n    for\
    \ _, word in ipairs(words) do\n        if word_is_prime(word) then\n         \
    \   result = result .. word .. ' '\n        end\n    end\n    return string.sub(result,\
    \ 1, #result - 1)\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local words\
    \ = {}\n    for w in sentence:gmatch('%a+') do\n        table.insert(words, w)\n\
    \    end\n    local result = {}\n    for _, w in ipairs(words) do\n        for\
    \ _, p in ipairs(primes) do\n            if #w == p then\n                table.insert(result,\
    \ w)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    -- your code here\n    local result =\
    \ {}\n    for word in sentence:gmatch(\"%S+\") do\n        local len = word:len()\n\
    \        if len > 1 then\n            local isPrime = true\n            for i\
    \ = 2, len - 1 do\n                if len % i == 0 then\n                    isPrime\
    \ = false\n                    break\n                end\n            end\n \
    \           if isPrime then\n                table.insert(result, word)\n    \
    \        end\n        end\n    end\n    return table.concat(result, \" \")\nend",
  "    local fun = function(x) return x % 2 == 1 end\n    local function is_prime(num)\n\
    \        if num < 2 then return false end\n        for i = 2, num - 1 do\n   \
    \         if num % i == 0 then return false end\n        end\n        return true\n\
    \    end\n    local output = ''\n    for word in sentence:gmatch('%S+') do\n \
    \       if is_prime(#word) then\n            output = output .. word .. ' '\n\
    \        end\n    end\n    return output:sub(1, -2)\nend", end, "    local res\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend", end, "  -- Implement your solution here\nend",
  "  local words = {}\n  for w in sentence:gmatch(\"%w+\") do\n    words[#words +\
    \ 1] = w\n  end\n  local result = {}\n  for i, w in ipairs(words) do\n    if is_prime(#w)\
    \ then\n      result[#result + 1] = w\n    end\n  end\n  return table.concat(result,\
    \ \" \")\nend", "  local function is_prime(num)\n    for i = 2, math.floor(math.sqrt(num))\
    \ do\n      if num % i == 0 then\n        return false\n      end\n    end\n \
    \   return true\n  end\n  local result = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    if is_prime(#word) then\n      table.insert(result, word)\n    end\n\
    \  end\n  return table.concat(result, ' ')\nend", "  local a = {}\n  for w in\
    \ sentence:gmatch(\"%S+\") do\n    if is_prime(#w) then\n      table.insert(a,\
    \ w)\n    end\n  end\n  return table.concat(a, \" \")\nend", "    local res =\
    \ {}\n    for word in sentence:gmatch(\"%w+\") do\n        if word_prime(word)\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, \" \")\nend", "  local words = string.split(sentence)\n  local\
    \ new_sentence = ''\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      new_sentence = new_sentence .. word .. ' '\n    end\n  end\n  return\
    \ new_sentence:sub(1, -2)\nend", "  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    if is_prime(#word) then\n      table.insert(words, word)\n    end\n\
    \  end\n  return table.concat(words, ' ')\nend", "  local function is_prime(num)\n\
    \    if num == 1 then\n      return false\n    end\n    for i = 2, num - 1 do\n\
    \      if num % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for word in sentence:gmatch('%S+') do\n\
    \    if is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n\
    \  return table.concat(result, ' ')\nend", "    local words = {}\n    local i\
    \ = 1\n    local j = 1\n    while j <= #sentence do\n        if sentence:sub(j,\
    \ j) == ' ' then\n            words[#words + 1] = sentence:sub(i, j - 1)\n   \
    \         i = j + 1\n        end\n        j = j + 1\n    end\n    words[#words\
    \ + 1] = sentence:sub(i, j - 1)\n    local primes = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local\
    \ res = {}\n    for i = 1, #words do\n        local len = #words[i]\n        for\
    \ j = 1, #primes do\n            if len == primes[j] then\n                res[#res\
    \ + 1] = words[i]\n                break\n            end\n        end\n    end\n\
    \    return table.concat(res, ' ')\nend", "  local words = {}\n  local found_words\
    \ = {}\n  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  for word in sentence:gmatch('%w+')\
    \ do\n    words[#words + 1] = word\n  end\n  for i = 1, #words do\n    for j =\
    \ 1, #primes do\n      if #words[i] == primes[j] then\n        found_words[#found_words\
    \ + 1] = words[i]\n      end\n    end\n  end\n  return table.concat(found_words,\
    \ ' ')\nend", "  -- Write your code here\n  -- It's main function. Don't remove\
    \ this function.\n  -- Variable declaration\n  local str = \"\"\n  -- Function\
    \ body\n  for i in string.gmatch(sentence, \"[^%s]+\") do\n    -- if prime function\
    \ return true then add the word to str\n    if prime(#i) then\n      str = str\
    \ .. i .. \" \"\n    end\n  end\n  return str\nend", "    local function is_prime(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local function check_word(word)\n        return is_prime(word:len())\n  \
    \  end\n    local words = sentence:split(' ')\n    local result = {}\n    for\
    \ _, word in ipairs(words) do\n        if check_word(word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", "\t\
    local function is_prime(num)\n\t\tfor i = 2, num - 1 do\n\t\t\tif num % i == 0\
    \ then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal\
    \ words = {}\n\tfor word in sentence:gmatch('%S+') do\n\t\tif is_prime(#word)\
    \ then\n\t\t\ttable.insert(words, word)\n\t\tend\n\tend\n\treturn table.concat(words,\
    \ ' ')\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local res = {}\n  \
    \  for w in sentence:gmatch('%S+') do\n        if utils.search(primes, #w) then\n\
    \            table.insert(res, w)\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend", "    -- TODO: implement the code of the function here\nend", " \
    \   local function is_prime(n)\n        for d = 2, n - 1 do\n            if n\
    \ % d == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local result = {}\n    for word in sentence:gmatch('%S+')\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "    local\
    \ answer = {}\n    for word in sentence:gmatch('%S+') do\n        local word_len\
    \ = word:len()\n        local is_prime = true\n        for i = 2, word_len - 1\
    \ do\n            if word_len % i == 0 then\n                is_prime = false\n\
    \                break\n            end\n        end\n        if is_prime then\n\
    \            table.insert(answer, word)\n        end\n    end\n    return table.concat(answer,\
    \ ' ')\nend", "  local function is_prime(num)\n    for i = 2, num / 2 do\n   \
    \   if num % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end", "    -- your code here\n    return nil\nend", "  local words =\
    \ { }\n  for word in sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n\
    \  end\n  local primes = { }\n  for i = 1, #words do\n    if is_prime(#words[i])\
    \ then\n      table.insert(primes, words[i])\n    end\n  end\n  return table.concat(primes,\
    \ \" \")\nend", "    local res = {}\n    for _,w in ipairs(sentence:split(' '))\
    \ do\n        if table.find(is_prime, w:len()) then\n            table.insert(res,\
    \ w)\n        end\n    end\n    return table.concat(res, ' ')\nend", "  local\
    \ t = {}\n  local is_prime = function(number)\n    if number <= 1 then\n     \
    \ return false\n    end\n    for i = 2, math.floor(math.sqrt(number)) do\n   \
    \   if number % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word)\
    \ then\n      table.insert(t, word)\n    end\n  end\n  return table.concat(t,\
    \ ' ')\nend", "    local is_prime = function(n)\n        for i = 2, math.floor(math.sqrt(n))\
    \ do\n            if n % i == 0 then\n                return false\n         \
    \   end\n        end\n        return true\n    end\n    local split = function(s,\
    \ sep)\n        local sep, fields = sep or \":\", {}\n        local pattern =\
    \ string.format(\"([^%s]+)\", sep)\n        s:gsub(pattern, function(c) fields[#fields+1]\
    \ = c end)\n        return fields\n    end\n    local result = ''\n    for _,\
    \ word in ipairs(split(sentence, ' ')) do\n        if is_prime(#word) then\n \
    \           result = result .. word .. ' '\n        end\n    end\n    return result:sub(1,\
    \ #result - 1)\nend", "  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local solution =\
    \ {}\n  for w in sentence:gmatch('[^%s]+') do\n    if table.contains(primes, #w)\
    \ then\n      table.insert(solution, w)\n    end\n  end\n  return table.concat(solution,\
    \ ' ')\nend", "    -- TODO: Implement the function here\nend", "  local primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n  local t = {}\n  local res = {}\n  local n = 1\n  for\
    \ word in sentence:gmatch('%w+') do\n    t[n] = word\n    n = n + 1\n  end\n \
    \ for i, v in ipairs(t) do\n    for _, prime in ipairs(primes) do\n      if v:len()\
    \ == prime then\n        res[#res + 1] = v\n      end\n    end\n  end\n  return\
    \ table.concat(res, ' ')\nend", "    -- your code here\n    local str = \"\"\n\
    \    local words = {}\n    local prime = {}\n    local res = \"\"\n    local i\
    \ = 0\n    local j = 0\n    local k = 0\n    local index = 0\n    local flag =\
    \ false\n    local temp = 0\n    local m = 0\n    local n = 0\n    local len =\
    \ 0\n    local count = 0\n    local space = string.byte(\" \")\n    local strlen\
    \ = string.len(sentence)\n    while i < strlen do\n        i = i + 1\n       \
    \ if string.byte(sentence, i) == space then\n            if flag == true then\n\
    \                str = string.sub(sentence, index, i - 1)\n                table.insert(words,\
    \ str)\n                index = i + 1\n                flag = false\n        \
    \    end\n        else\n            if flag == false then\n                index\
    \ = i\n                flag = true\n            end\n        end\n    end\n  \
    \  if flag == true then\n        str = string.sub(sentence, index, i)\n      \
    \  table.insert(words, str)\n    end\n    len = #words\n    for i = 2, len, 1\
    \ do\n        m = i * i\n        if m <= len then\n            n = i * 2\n   \
    \         while m <= len do\n                prime[m] = 1\n                m =\
    \ m + n\n            end\n        end\n    end\n    count = 0\n    for j = 1,\
    \ len, 1 do\n        if prime[j] == nil then\n            str = words[j]\n   \
    \         res = res .. str\n            count = count + 1\n            if count\
    \ < len then\n                res = res .. \" \"\n            end\n        end\n\
    \    end\n    return res\nend", "    local words = string.split(sentence, \" \"\
    )\n    local result = {}\n    for i, v in ipairs(words) do\n        if is_prime(string.len(v))\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ table.concat(result, \" \")\nend", "  local primes = {\n    [2] = true,\n  \
    \  [3] = true,\n    [5] = true,\n    [7] = true,\n    [11] = true,\n    [13] =\
    \ true,\n    [17] = true,\n    [19] = true,\n    [23] = true,\n    [29] = true,\n\
    \    [31] = true,\n    [37] = true,\n    [41] = true,\n    [43] = true,\n    [47]\
    \ = true,\n    [53] = true,\n    [59] = true,\n    [61] = true,\n    [67] = true,\n\
    \    [71] = true,\n    [73] = true,\n    [79] = true,\n    [83] = true,\n    [89]\
    \ = true,\n    [97] = true,\n  }\n  local words = {}\n  for w in sentence:gmatch('%w+')\
    \ do\n    local l = #w\n    if primes[l] then\n      table.insert(words, w)\n\
    \    end\n  end\n  return table.concat(words, ' ')\nend", "    local sentence_table\
    \ = sentence:split(\" \")\n    local is_prime_length_word = function(word)\n \
    \       return is_prime(#word)\n    end\n    local prime_length_words = filter(sentence_table,\
    \ is_prime_length_word)\n    return table.concat(prime_length_words, \" \")\n\
    end", "    local is_prime = {[1] = false, [2] = true, [3] = true, [4] = false,\
    \ [5] = true, [6] = false, [7] = true, [8] = false, [9] = false, [10] = false}\n\
    \    local res = {}\n    for word in sentence:gmatch('%w+') do\n        local\
    \ len = #word\n        if not is_prime[len] then\n            for i = 2, math.sqrt(len)\
    \ do\n                if len % i == 0 then\n                    is_prime[len]\
    \ = false\n                    break\n                end\n            end\n \
    \           if not is_prime[len] then\n                is_prime[len] = true\n\
    \            end\n        end\n        if is_prime[len] then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return table.concat(res, ' ')\nend", "    local\
    \ t = sentence:split(' ')\n    local s = ''\n    for _, v in ipairs(t) do\n  \
    \      if is_prime(#v) then\n            s = s .. v .. ' '\n        end\n    end\n\
    \    return string.sub(s, 1, -2)\nend", "    local words = {}\n    for word in\
    \ sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n    return\
    \ words\nend", "  local words = {}\n  local result = {}\n  sentence:gsub('%S+',\
    \ function(word)\n    table.insert(words, word)\n  end)\n  for index, word in\
    \ ipairs(words) do\n    if is_prime(word:len()) then\n      table.insert(result,\
    \ word)\n    end\n  end\n  return table.concat(result, ' ')\nend", "    -- your\
    \ code here\n    local s = {}\n    for a in sentence:gmatch(\"%w+\") do\n    \
    \    table.insert(s, a)\n    end\n    local str = ''\n    for i,v in ipairs(s)\
    \ do\n        if is_prime(v:len()) then\n            str = str .. v .. ' '\n \
    \       end\n    end\n    return str:sub(1, -2)\nend", "    -- your code here\n\
    end", "\tlocal primes = { [2] = true, [3] = true, [5] = true, [7] = true, [11]\
    \ = true, [13] = true, [17] = true, [19] = true, [23] = true, [29] = true, [31]\
    \ = true, [37] = true, [41] = true, [43] = true, [47] = true, [53] = true, [59]\
    \ = true, [61] = true, [67] = true, [71] = true, [73] = true, [79] = true, [83]\
    \ = true, [89] = true, [97] = true }\n\tlocal result = ''\n\tfor word in sentence:gmatch('[^%s]+')\
    \ do\n\t\tif primes[#word] then\n\t\t\tresult = result .. word .. ' '\n\t\tend\n\
    \tend\n\treturn result:sub(1, -2)\nend", "    -- your code here\n    local stringPrime\
    \ = \"\"\n    for i in string.gmatch(sentence, \"%S+\") do\n        if prime(string.len(i))\
    \ then\n            stringPrime = stringPrime .. \" \" .. i\n        end\n   \
    \ end\n    return string.sub(stringPrime, 2)\nend", "  local function is_prime(n)\n\
    \    for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n   \
    \   end\n    end\n    return true\n  end\n  local words = sentence:split(' ')\n\
    \  local rs = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n  \
    \    rs[#rs + 1] = words[i]\n    end\n  end\n  return table.concat(rs, ' ')\n\
    end", "  local is_prime = function(num)\n    for i = 2, math.floor(math.sqrt(num))\
    \ do\n      if num % i == 0 then\n        return false\n      end\n    end\n \
    \   return true\n  end\n  local result = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    if is_prime(#word) then\n      table.insert(result, word)\n    end\n\
    \  end\n  return table.concat(result, ' ')\nend", "    local words = {}\n    local\
    \ primes = {}\n    local primes_set = {}\n    local new_sentence = ''\n    local\
    \ ret_str = ''\n    for i = 1,#sentence do\n        if sentence:sub(i,i) == '\
    \ ' then\n            words[#words+1] = sentence:sub(1,i-1)\n            sentence\
    \ = sentence:sub(i+1)\n            i = 0\n        end\n    end\n    words[#words+1]\
    \ = sentence:sub(1,#sentence)\n    for i = 2,100 do\n        local is_prime =\
    \ true\n        for j = 2,i-1 do\n            if i % j == 0 then\n           \
    \     is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            primes[#primes+1] = i\n            primes_set[i]\
    \ = true\n        end\n    end\n    for i = 1,#words do\n        if primes_set[#words[i]]\
    \ then\n            new_sentence = new_sentence .. words[i] .. ' '\n        end\n\
    \    end\n    for i = 1,#new_sentence do\n        if new_sentence:sub(i,i) ==\
    \ ' ' then\n            ret_str = ret_str .. new_sentence:sub(1,i-1) .. ' '\n\
    \            new_sentence = new_sentence:sub(i+1)\n            i = 0\n       \
    \ end\n    end\n    ret_str = ret_str .. new_sentence:sub(1,#new_sentence)\n \
    \   return ret_str\nend", "\t\n\tlocal dictionary = {}\n\tlocal k = 1\n\t\n\t\
    -- split sentence with space\n\tfor word in string.gmatch(sentence, \"%S+\") do\n\
    \t\tdictionary[k] = word\n\t\tk = k + 1\n\tend\n\t\n\tlocal function prime(n)\n\
    \t\tlocal flag = 0\n\t\tif n == 2 then\n\t\t\treturn true\n\t\tend\n\t\tfor i\
    \ = 2, math.floor(math.sqrt(n)) do\n\t\t\tif n % i == 0 then\n\t\t\t\tflag = 1\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag == 0 then\n\t\t\treturn true\n\t\
    \telse\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\tlocal function collect()\n\t\
    \tlocal result = {}\n\t\tlocal k = 1\n\t\tfor i = 1, #dictionary do\n\t\t\tif\
    \ prime(#dictionary[i]) then\n\t\t\t\tresult[k] = dictionary[i]\n\t\t\t\tk = k\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn result\n\tend\n\t\n\tlocal function join(a)\n\
    \t\tlocal result = a[1]\n\t\tfor i = 2, #a do\n\t\t\tresult = result .. \" \"\
    \ .. a[i]\n\t\tend\n\t\treturn result\n\tend\n\t\n\treturn join(collect())\nend\n\
    return words_in_sentence", "    local words = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if is_prime(#word) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, ' ')\nend", "  -- Code here\n\
    end", "    local words = {}\n    local primes = {}\n    local result = ''\n  \
    \  for word in sentence:gmatch('%w+') do\n        table.insert(words, word)\n\
    \    end\n    for i = 2, #words do\n        for j = 2, i - 1 do\n            if\
    \ i % j == 0 then\n                break\n            elseif j == i - 1 then\n\
    \                table.insert(primes, i)\n            end\n        end\n    end\n\
    \    for i = 1, #primes do\n        result = result .. words[primes[i]] .. ' '\n\
    \    end\n    return result:sub(1, -2)\nend", "\tif type(sentence) ~= 'string'\
    \ then\n\t\terror('sentence must be a string', 2)\n\tend\n\tlocal r = ''\n\tfor\
    \ w in sentence:gmatch('%w+') do\n\t\tlocal len = #w\n\t\tlocal is_prime = true\n\
    \t\tfor i = 2, len - 1 do\n\t\t\tif len % i == 0 then\n\t\t\t\tis_prime = false\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_prime then\n\t\t\tr = r .. w .. '\
    \ '\n\t\tend\n\tend\n\treturn r:sub(1, -2)\nend", "    -- your code here\n   \
    \ local result = ''\n    for i in string.gmatch(sentence, '%S+') do\n        if\
    \ is_prime(#i) then\n            result = result .. i .. ' '\n        end\n  \
    \  end\n    return result:sub(1, -2)\nend", "    local primes = { [2] = true,\
    \ [3] = true, [5] = true, [7] = true, [11] = true, [13] = true, [17] = true, [19]\
    \ = true, [23] = true, [29] = true, [31] = true, [37] = true, [41] = true, [43]\
    \ = true, [47] = true, [53] = true, [59] = true, [61] = true, [67] = true, [71]\
    \ = true, [73] = true, [79] = true, [83] = true, [89] = true, [97] = true }\n\
    \    local words = {}\n    local s = ''\n    for w in sentence:gmatch('[%a]+')\
    \ do\n        table.insert(words, w)\n    end\n    for _, w in ipairs(words) do\n\
    \        if primes[#w] then\n            s = s .. ' ' .. w\n        end\n    end\n\
    \    return s:sub(2)\nend\nreturn words_in_sentence", "\tlocal function is_prime(num)\n\
    \t\tif num < 2 then\n\t\t\treturn false\n\t\tend\n\t\tlocal i = 2\n\t\twhile i\
    \ < num do\n\t\t\tif num % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\
    i = i + 1\n\t\tend\n\t\treturn true\n\tend\n\tlocal words = {}\n\tfor word in\
    \ sentence:gmatch('%w+') do\n\t\tif is_prime(#word) then\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\tend\n\treturn table.concat(words, ' ')\nend", "  local primes\
    \ = {}\n  for i = 2, 100 do\n    local is_prime = true\n    for j = 2, i - 1 do\n\
    \      if i % j == 0 then\n        is_prime = false\n        break\n      end\n\
    \    end\n    if is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n\
    \  local words = {}\n  for s in sentence:gmatch('%S+') do\n    words[#words +\
    \ 1] = s\n  end\n  local res = {}\n  for _, w in ipairs(words) do\n    for _,\
    \ p in ipairs(primes) do\n      if w:len() == p then\n        res[#res + 1] =\
    \ w\n        break\n      end\n    end\n  end\n  return table.concat(res, ' ')\n\
    end", "  -- your code here\nend", "    local primes = {[2] = true, [3] = true,\
    \ [5] = true, [7] = true, [11] = true, [13] = true, [17] = true, [19] = true,\
    \ [23] = true, [29] = true, [31] = true, [37] = true, [41] = true, [43] = true,\
    \ [47] = true, [53] = true, [59] = true, [61] = true, [67] = true, [71] = true,\
    \ [73] = true, [79] = true, [83] = true, [89] = true, [97] = true}\n    local\
    \ words = {}\n    for word in sentence:gmatch('%S+') do\n        if primes[#word]\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend", "    local primes = { 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n \
    \   local output = {}\n    for word in sentence:gmatch('%w+') do\n        if utils.is_in_list(#word,\
    \ primes) then\n            table.insert(output, word)\n        end\n    end\n\
    \    return table.concat(output, ' ')\nend", "    local words, primes = {}, {}\n\
    \    for match in sentence:gmatch('%w+') do\n        local word, length = match,\
    \ match:len()\n        words[#words + 1] = word\n        if length > 1 then\n\
    \            local prime = true\n            for p = 2, length - 1 do\n      \
    \          if length % p == 0 then\n                    prime = false\n      \
    \              break\n                end\n            end\n            if prime\
    \ then\n                primes[#primes + 1] = word\n            end\n        end\n\
    \    end\n    if #primes == 0 then\n        return ''\n    end\n    return table.concat(primes,\
    \ ' ')\nend", "  local words = {}\n  local prime_words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    table.insert(words, word)\n  end\n  for _, word in ipairs(words) do\n\
    \    if is_prime(#word) then\n      table.insert(prime_words, word)\n    end\n\
    \  end\n  return table.concat(prime_words, ' ')\nend", "  local function is_prime(n)\n\
    \    if n < 2 then\n      return false\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n  \
    \      return false\n      end\n    end\n    return true\n  end\n  local words\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend", "  -- check if number is prime number\n  local function is_prime(number)\n\
    \    local divisor = 2\n    while divisor < number do\n      if number % divisor\
    \ == 0 then\n        return false\n      end\n      divisor = divisor + 1\n  \
    \  end\n    return true\n  end", "    sentence = sentence:gsub('%s+', ' ')\n \
    \   local words = {}\n    for w in sentence:gmatch('%S+') do\n        if is_prime(#w)\
    \ then\n            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend", "    local is_prime = {}\n    for i = 2, 100 do\n        is_prime[i]\
    \ = true\n    end\n    for i = 2, math.sqrt(100) do\n        if is_prime[i] then\n\
    \            for j = i * i, 100, i do\n                is_prime[j] = false\n \
    \           end\n        end\n    end\n    local words = {}\n    for w in sentence:gmatch(\"\
    %S+\") do\n        if is_prime[#w] then\n            table.insert(words, w)\n\
    \        end\n    end\n    return table.concat(words, \" \")\nend", "    local\
    \ words = split(sentence, \" \")\n    local result = \"\"\n    for index, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            result = result\
    \ .. word .. \" \"\n        end\n    end\n    return result:sub(1, #result - 1)\n\
    end", "    -- TODO\nend", "  local primes = {}\n  local words = {}\n  local result\
    \ = ''\n  for p = 2, #sentence do\n    local is_prime = true\n    for i = 2, p\
    \ - 1 do\n      if p % i == 0 then\n        is_prime = false\n        break\n\
    \      end\n    end\n    if is_prime then\n      primes[#primes + 1] = p\n   \
    \ end\n  end\n  for word in sentence:gmatch('%S+') do\n    words[#words + 1] =\
    \ word\n  end\n  for i = 1, #words do\n    if primes[i] == #words[i] then\n  \
    \    result = result .. words[i] .. ' '\n    end\n  end\n  return result:sub(1,\
    \ #result - 1)\nend", "    -- your code here\n    local m = require 'prime'\n\
    \    local r = {}\n    local a = sentence:split(\" \")\n    for k,v in pairs(a)\
    \ do\n        if m[#v] then r[#r+1] = v end\n    end\n    return table.concat(r,\
    \ \" \")\nend", "    local str = ''\n    for word in sentence:gmatch('%w+') do\n\
    \        local len = #word\n        if len == 2 then\n            str = str ..\
    \ ' ' .. word\n        else\n            local prime = true\n            for i\
    \ = 2, math.floor(len / 2) do\n                if len % i == 0 then\n        \
    \            prime = false\n                    break\n                end\n \
    \           end\n            if prime then\n                str = str .. ' ' ..\
    \ word\n            end\n        end\n    end\n    return str:sub(2)\nend", " \
    \   sentence = sentence:lower()\n    local words = split(sentence, ' ')\n    local\
    \ result = ''\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            result = result .. word .. ' '\n        end\n    end\n   \
    \ return result:sub(1, -2)\nend", "    -- your code here\n    local str = {}\n\
    \    for word in sentence:gmatch(\"%S+\") do\n        if #word > 1 then\n    \
    \        table.insert(str, word)\n        end\n    end\n    local res = \"\"\n\
    \    for _, value in ipairs(str) do\n        for i = 2, math.floor(#value / 2)\
    \ do\n            if value:len() % i == 0 then\n                goto continue\n\
    \            end\n        end\n        res = res .. value .. \" \"\n        ::continue::\n\
    \    end\n    return res:sub(1, -2)\nend", "    local is_prime = function(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend", "    local function is_prime(num)\n        if num <= 1 then\n  \
    \          return false\n        end\n        local i = 2\n        while i <=\
    \ math.sqrt(num) do\n            if num % i == 0 then\n                return\
    \ false\n            end\n            i = i + 1\n        end\n        return true\n\
    \    end\n    local res = {}\n    for w in sentence:gmatch('%S+') do\n       \
    \ if is_prime(#w) then\n            table.insert(res, w)\n        end\n    end\n\
    \    return table.concat(res, ' ')\nend", "    local words = sentence:split('\
    \ ')\n    local primes = {}\n    for word in words do\n        local n = word:len()\n\
    \        if n == 2 or n == 3 or n == 5 or n == 7 then\n            table.insert(primes,\
    \ word)\n        end\n    end\n    return table.concat(primes, ' ')\nend", " \
    \ local words = {}\n  local primes = {}\n  local word_count = 0\n  local chars\
    \ = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}\n  for word in sentence:gmatch('[%a]+')\
    \ do\n    if not table.contains(chars, word) then\n      word_count = word_count\
    \ + 1\n      if not table.contains(primes, word_count) then\n        table.insert(primes,\
    \ word_count)\n      end\n      words[word_count] = word\n    end\n  end\n  local\
    \ result = ''\n  for i, _ in ipairs(primes) do\n    if i ~= #primes then\n   \
    \   result = result .. words[primes[i]] .. ' '\n    else\n      result = result\
    \ .. words[primes[i]]\n    end\n  end\n  return result\nend", "    local is_prime_num\
    \ = {\n        [1] = false,\n        [2] = true,\n        [3] = true,\n      \
    \  [4] = false,\n        [5] = true,\n        [6] = false,\n        [7] = true,\n\
    \        [8] = false,\n        [9] = false,\n        [10] = false,\n    }\n  \
    \  local function is_prime(x)\n        if is_prime_num[x] ~= nil then\n      \
    \      return is_prime_num[x]\n        end\n        for i = 2, math.sqrt(x) do\n\
    \            if x % i == 0 then\n                is_prime_num[x] = false\n   \
    \             return false\n            end\n        end\n        is_prime_num[x]\
    \ = true\n        return true\n    end\n    local words = {}\n    for word in\
    \ sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend", "  \
    \  local result = {}\n    local words = {}\n    for w in sentence:gmatch('%w+')\
    \ do\n        table.insert(words, w)\n    end\n    for i, w in ipairs(words) do\n\
    \        if is_prime(#w) then\n            table.insert(result, w)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend", "    local res = ''\n  \
    \  for word in sentence:gmatch('%w+') do\n        local len = word:len()\n   \
    \     if len % 2 ~= 0 and len > 1 then\n            local is_prime = true\n  \
    \          for i = 3, len - 1, 2 do\n                if len % i == 0 then\n  \
    \                  is_prime = false\n                    break\n             \
    \   end\n            end\n            if is_prime then\n                res =\
    \ res .. word .. ' '\n            end\n        end\n    end\n    return res:sub(1,\
    \ -2)\nend", "    return sentence:gsub(\"%S+\",function(w)\n        return #w\
    \ % 2 == 1 and w or \"\"\n    end)\nend", "    local primes = {\n        [2] =\
    \ true,\n        [3] = true,\n        [5] = true,\n        [7] = true,\n     \
    \   [11] = true,\n        [13] = true,\n        [17] = true,\n        [19] = true,\n\
    \        [23] = true,\n        [29] = true,\n        [31] = true,\n        [37]\
    \ = true,\n        [41] = true,\n        [43] = true,\n        [47] = true,\n\
    \        [53] = true,\n        [59] = true,\n        [61] = true,\n        [67]\
    \ = true,\n        [71] = true,\n        [73] = true,\n        [79] = true,\n\
    \        [83] = true,\n        [89] = true,\n        [97] = true,\n    }\n   \
    \ local words = {}\n    for w in sentence:gmatch('%w+') do\n        local l =\
    \ #w\n        if primes[l] then\n            table.insert(words, w)\n        end\n\
    \    end\n    return table.concat(words, ' ')\nend", "  local toks = {}\n  for\
    \ word in sentence:gmatch(\"%w+\") do\n    if is_prime(#word) then\n      table.insert(toks,\
    \ word)\n    end\n  end\n  return table.concat(toks, \" \")\nend", "  local words\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend", "  local function is_prime(number)\n    local counter = 2\n    while\
    \ counter < number do\n      if number % counter == 0 then\n        return false\n\
    \      end\n      counter = counter + 1\n    end\n    return true\n  end", " \
    \   local t = {}\n    for w in sentence:gmatch('%w+') do\n        if is_prime(#w)\
    \ then\n            t[#t + 1] = w\n        end\n    end\n    return table.concat(t,\
    \ ' ')\nend", "    local t = {}\n    local prime = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    for\
    \ w in sentence:gmatch(\"%S+\") do\n        if prime[w:len()] then t[#t+1] = w\
    \ end\n    end\n    return table.concat(t, \" \")\nend", "  error(\"Not implemented\"\
    )\nend", "    local words = split(sentence, \" \")\n    local res = {}\n    for\
    \ _, v in ipairs(words) do\n        if is_prime(#v) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return table.concat(res, \" \")\nend", "    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ word)\n    end\n    local result = {}\n    for i = 1, #words do\n        local\
    \ word = words[i]\n        local length = #word\n        if length == 2 or length\
    \ == 3 or length == 5 or length == 7 then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "\treturn string.gsub(sentence,\
    \ \"[a-zA-Z0-9]+\", function(word)\n\t\tif word:len() == 1 then\n\t\t\treturn\
    \ word\n\t\tend\n\t\tlocal divisor = 2\n\t\tlocal flag = true\n\t\twhile divisor\
    \ <= word:len() / 2 do\n\t\t\tif word:len() % divisor == 0 then\n\t\t\t\tflag\
    \ = false\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tdivisor = divisor + 1\n\t\tend\n\t\t\
    if flag then\n\t\t\treturn word\n\t\telse\n\t\t\treturn \"\"\n\t\tend\n\tend)\n\
    end", "    local function is_prime(x)\n        local function is_divisible_by(x,y)\n\
    \            return x % y == 0\n        end\n        local divisors = {2,3,5,7}\n\
    \        for i = 1, #divisors do\n            if is_divisible_by(x, divisors[i])\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    local function prime_word_of(word)\n        if is_prime(string.len(word))\
    \ then\n            return word\n        end\n    end\n    local function prime_words_of(sentence)\n\
    \        local result = {}\n        for word in string.gmatch(sentence, \"[%w']+\"\
    ) do\n            prime_word = prime_word_of(word)\n            if prime_word\
    \ then\n                table.insert(result, prime_word)\n            end\n  \
    \      end\n        return result\n    end\n    return table.concat(prime_words_of(sentence),\
    \ \" \")\nend", "    local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local result = ''\n\
    \    for word in sentence:gmatch('%w+') do\n        local word_length = word:len()\n\
    \        for _, prime in ipairs(primes) do\n            if word_length == prime\
    \ then\n                result = result .. word .. ' '\n                break\n\
    \            end\n        end\n    end\n    return result:sub(1, -2)\nend", " \
    \ -- your code here\n  local words = {}\n  for i in string.gmatch(sentence, \"\
    [%a]+\") do\n    table.insert(words, i)\n  end\n  local primes = {2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n  local res = {}\n  for i, v in ipairs(words) do\n    for j, w in ipairs(primes)\
    \ do\n      if string.len(v) == w then\n        table.insert(res, v)\n      end\n\
    \    end\n  end\n  return table.concat(res, \" \")\nend", "    local new_sentence\
    \ = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(new_sentence, word)\n        end\n    end\n \
    \   return table.concat(new_sentence, ' ')\nend", "  local words = {}\n  local\
    \ primes = {}\n  local index = 0\n  local function isPrime(n)\n    if n == 1 then\
    \ return false end\n    if n == 2 then return true end\n    if n % 2 == 0 then\
    \ return false end\n    local m = math.sqrt(n)\n    for i = 3, m, 2 do\n     \
    \ if n % i == 0 then return false end\n    end\n    return true\n  end\n  for\
    \ word in sentence:gmatch('%S+') do\n    if isPrime(#word) then\n      words[#words\
    \ + 1] = word\n    end\n  end\n  return table.concat(words, ' ')\nend", "    local\
    \ primes = {\n        [2] = true,\n        [3] = true,\n        [5] = true,\n\
    \        [7] = true,\n        [11] = true,\n        [13] = true,\n        [17]\
    \ = true,\n        [19] = true,\n        [23] = true,\n        [29] = true,\n\
    \        [31] = true,\n        [37] = true,\n        [41] = true,\n        [43]\
    \ = true,\n        [47] = true,\n        [53] = true,\n        [59] = true,\n\
    \        [61] = true,\n        [67] = true,\n        [71] = true,\n        [73]\
    \ = true,\n        [79] = true,\n        [83] = true,\n        [89] = true,\n\
    \        [97] = true,\n    }\n    local words = {}\n    for word in sentence:gmatch('%S+')\
    \ do\n        table.insert(words, word)\n    end\n    local output = {}\n    for\
    \ _, word in ipairs(words) do\n        if primes[#word] then\n            table.insert(output,\
    \ word)\n        end\n    end\n    return table.concat(output, ' ')\nend", " \
    \   local is_prime = function(n)\n        for i = 2, n - 1 do\n            if\
    \ n % i == 0 then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local words = string.split(sentence, ' ')\n\
    \    local answer = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(answer, word)\n        end\n    end\n    return\
    \ table.concat(answer, ' ')\nend", "    local function is_prime(n)\n        for\
    \ i = 2, n - 1 do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%w+') do\n        local length = #word\n\
    \        if is_prime(length) then\n            table.insert(words, word)\n   \
    \     end\n    end\n    return table.concat(words, ' ')\nend", "    local is_prime\
    \ = {}\n    for i = 1, 100 do\n        is_prime[i] = true\n    end\n    for i\
    \ = 2, #is_prime do\n        if is_prime[i] then\n            for j = i * 2, #is_prime,\
    \ i do\n                is_prime[j] = false\n            end\n        end\n  \
    \  end\n    local words = {}\n    for w in sentence:gmatch('%S+') do\n       \
    \ table.insert(words, w)\n    end\n    local result = {}\n    for _, w in ipairs(words)\
    \ do\n        if is_prime[#w] then\n            table.insert(result, w)\n    \
    \    end\n    end\n    return table.concat(result, ' ')\nend", "    local prime_lengths\
    \ = {2, 3, 5, 7}\n    local words = {}\n    for word in sentence:gmatch('%S+')\
    \ do\n        table.insert(words, word)\n    end\n    local primes = {}\n    for\
    \ i, word in ipairs(words) do\n        for _, prime in ipairs(prime_lengths) do\n\
    \            if word:len() == prime then\n                table.insert(primes,\
    \ word)\n            end\n        end\n    end\n    return table.concat(primes,\
    \ ' ')\nend", "  return sentence:gsub('%S+', function(word)\n    if word:len()\
    \ > 1 and word:match('^[aeiou]+$') then\n      return word\n    end\n  end)\n\
    end", "  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    table.insert(words, word)\n  end\n  local result = {}\n  for _, word\
    \ in ipairs(words) do\n    for _, prime in ipairs(primes) do\n      if word:len()\
    \ == prime then\n        table.insert(result, word)\n      end\n    end\n  end\n\
    \  return table.concat(result, ' ')\nend", "\tlocal result = {}\n\tfor word in\
    \ sentence:gmatch('%w+') do\n\t\tlocal length = word:len()\n\t\tif (length > 1)\
    \ and (length % 2 ~= 0) then\n\t\t\tlocal i = 3\n\t\t\twhile i * i <= length do\n\
    \t\t\t\tif length % i == 0 then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\ti = i +\
    \ 2\n\t\t\tend\n\t\t\tif i * i > length then\n\t\t\t\ttable.insert(result, word)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn table.concat(result, ' ')\nend", "    local\
    \ function is_prime(n)\n        for i = 2, n - 1 do\n            if n % i == 0\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\n    local out = {}\n    for word in sentence:gmatch('%w+') do\n\
    \        if is_prime(#word) then\n            table.insert(out, word)\n      \
    \  end\n    end\n    return table.concat(out, ' ')\nend", "  if (type(sentence)\
    \ ~= 'string') then\n    return nil, 'Argument #1 should be a string'\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch('%S+') do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if\
    \ (is_prime(#word)) then\n      table.insert(result, word)\n    end\n  end\n \
    \ return table.concat(result, ' ')\nend", "    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if _.is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "    local str = \"\"\n    local words = {}\n\
    \    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words, word)\n\
    \    end\n    for _, word in ipairs(words) do\n        if is_prime(word:len())\
    \ then\n            str = str .. word .. \" \"\n        end\n    end\n    return\
    \ str:sub(1, -2)\nend", "    return join_string(filter(is_prime, split_string(sentence,\
    \ \" \")))\nend", "    local result = {}\n    for word in sentence:gmatch('%S+')\
    \ do\n        local l = #word\n        if l > 1 then\n            for i = 2, l\
    \ - 1 do\n                if l % i == 0 then\n                    goto continue\n\
    \                end\n            end\n            table.insert(result, word)\n\
    \        end\n        ::continue::\n    end\n    return table.concat(result, '\
    \ ')\nend", "    -- split sentence by space into words\n    local words = utils.split(sentence,\
    \ ' ')\n    -- find words whose length is prime\n    local prime_words = {}\n\
    \    for _, word in ipairs(words) do\n        if utils.is_prime(#word) then\n\
    \            table.insert(prime_words, word)\n        end\n    end\n    -- rejoin\
    \ words with space\n    return table.concat(prime_words, ' ')\nend", "    local\
    \ function is_prime(num)\n        for i = 2, num - 1 do\n            if num %\
    \ i == 0 then\n                return false\n            end\n        end\n  \
    \      return true\n    end", "\tlocal primes = {}\n\tlocal words = {}\n\tfor\
    \ i = 1, 100 do\n\t\tlocal isPrime = true\n\t\tfor j = 2, math.floor(i/2) do\n\
    \t\t\tif i % j == 0 then\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\t\tif isPrime then\n\t\t\tprimes[i] = true\n\t\tend\n\tend\n\t\n\tfor\
    \ word in sentence:gmatch(\"[%w]+\") do\n\t\tif primes[#word] then\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\tend\n\t\n\treturn table.concat(words, \" \")\nend", "    local\
    \ words = string.split(sentence, ' ')\n    local result = {}\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local is_prime = require \"code.math\".is_prime\n    local words = {}\n  \
    \  for word in sentence:gmatch(\"%S+\") do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend", end, "  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    words[#words + 1] = word\n  end\n  local index = 1\n  while index <=\
    \ #words do\n    local is_prime = true\n    for i = 2, words[index]:len() - 1\
    \ do\n      if words[index]:len() % i == 0 then\n        is_prime = false\n  \
    \      break\n      end\n    end\n    if not is_prime then\n      table.remove(words,\
    \ index)\n    else\n      index = index + 1\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend", "  return sentence:gsub(\"%w+\", function(x)\n    if is_prime(#x)\
    \ then\n      return x\n    else\n      return \"\"\n    end\n  end):gsub(\"%s+\"\
    , \" \"):gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\")\nend", "    -- your code here\n\
    \    local s = {}\n    for w in sentence:gmatch(\"%w+\") do\n        table.insert(s,\
    \ w)\n    end\n    local ans = {}\n    for i,v in ipairs(s) do\n        local\
    \ l = string.len(v)\n        local ok = true\n        for j = 2, l-1 do\n    \
    \        if l % j == 0 then\n                ok = false\n                break\n\
    \            end\n        end\n        if ok then\n            table.insert(ans,\
    \ v)\n        end\n    end\n    return table.concat(ans, \" \")\nend", "  local\
    \ words = {}\n  local result = {}\n  for word in sentence:gmatch('%w+') do\n \
    \   words[#words + 1] = word\n  end\n  for index, word in ipairs(words) do\n \
    \   if is_prime(#word) then\n      result[#result + 1] = word\n    end\n  end\n\
    \  return table.concat(result, ' ')\nend", "  local words = {}\n  for word in\
    \ sentence:gmatch('[%w]+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for i, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend", "\tlocal words = {}\n\tfor word in sentence:gmatch(\"%w+\") do\n\t\
    \ttable.insert(words, word)\n\tend\n\tlocal answer = {}\n\tfor _, word in ipairs(words)\
    \ do\n\t\tif is_prime(#word) then\n\t\t\ttable.insert(answer, word)\n\t\tend\n\
    \tend\n\treturn table.concat(answer, \" \")\nend", "    -- your code here\n  \
    \  local words = sentence:split(' ')\n    local result = {}\n    for i, word in\
    \ ipairs(words) do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend", " \
    \   local results = {}\n    for w in sentence:gmatch('%S+') do\n        if is_prime(#w)\
    \ then\n            table.insert(results, w)\n        end\n    end\n    return\
    \ table.concat(results, ' ')\nend", "  local sentence = sentence:split(' ')\n\
    \  local function is_prime(number)\n    if number <= 1 then\n      return false\n\
    \    end\n    for i = 2, number - 1 do\n      if number % i == 0 then\n      \
    \  return false\n      end\n    end\n    return true\n  end\n  local primes =\
    \ {}\n  for i, value in ipairs(sentence) do\n    if is_prime(#value) then\n  \
    \    table.insert(primes, value)\n    end\n  end\n  return table.concat(primes,\
    \ ' ')\nend", "  local res = {}\n  local t = split(sentence, ' ')\n  for i = 1,\
    \ #t do\n    if is_prime(#t[i]) then\n      table.insert(res, t[i])\n    end\n\
    \  end\n  return table.concat(res, ' ')\nend", "  if not sentence then return\
    \ nil end\n  local count = {}\n  local tmp = sentence:lower():gsub('[^%a]', '')\n\
    \  for l in tmp:gmatch'.' do\n    count[l] = (count[l] or 0) + 1\n  end\n  local\
    \ function is_prime(n)\n    local m = math.sqrt(n)\n    for i = 2, m do\n    \
    \  if n % i == 0 then return false end\n    end\n    return true\n  end\n  local\
    \ tmp_tbl = {}\n  for w in sentence:gmatch'%S+' do\n    tmp_tbl[#tmp_tbl + 1]\
    \ = w\n  end\n  local function word_check(w)\n    local len = #w\n    if len ==\
    \ 1 then return count[w:lower()] == 1 end\n    if not is_prime(len) then return\
    \ false end\n    local c = {}\n    for l in w:lower():gmatch'.' do\n      c[l]\
    \ = (c[l] or 0) + 1\n    end\n    for k, v in pairs(c) do\n      if v > count[k]\
    \ then return false end\n    end\n    return true\n  end\n  local ret = {}\n \
    \ for i = 1, #tmp_tbl do\n    if word_check(tmp_tbl[i]) then\n      ret[#ret +\
    \ 1] = tmp_tbl[i]\n    end\n  end\n  return table.concat(ret, ' ')\nend", "  \
    \  local function is_prime(n)\n        -- 1 is not prime.\n        if n == 1 then\n\
    \            return false\n        end\n        -- The only even prime is 2.\n\
    \        if n == 2 then\n            return true\n        end\n        -- All\
    \ primes are odd.\n        if n % 2 == 0 then\n            return false\n    \
    \    end\n        -- We only need to check up to sqrt(n).\n        local max =\
    \ math.floor(math.sqrt(n))\n        for i = 3, max, 2 do\n            if n % i\
    \ == 0 then\n                return false\n            end\n        end\n    \
    \    return true\n    end\n    local result = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "  local t\
    \ = {}\n  local s = ''\n  for word in sentence:gmatch('[%a]+') do\n    local l\
    \ = #word\n    local is_prime = true\n    for i = 2, l - 1 do\n      if l % i\
    \ == 0 then\n        is_prime = false\n        break\n      end\n    end\n   \
    \ if is_prime then\n      table.insert(t, word)\n    end\n  end\n  for _, word\
    \ in ipairs(t) do\n    s = s .. word .. ' '\n  end\n  return s:gsub('%s$', '')\n\
    end", "    local result = {}\n    for word in sentence:gmatch('%w+') do\n    \
    \    if is_prime(#word) then\n            table.insert(result, word)\n       \
    \ end\n    end\n    return table.concat(result, ' ')\nend", "    local function\
    \ is_prime(number)\n        local flag = true\n        if number ~= 2 then\n \
    \           if number == 1 or number % 2 == 0 then\n                flag = false\n\
    \            else\n                for x = 3, number / 2, 2 do\n             \
    \       if number % x == 0 then\n                        flag = false\n      \
    \                  break\n                    end\n                end\n     \
    \       end\n        end\n        return flag\n    end\n    local words = sentence:split('\
    \ ')\n    local new_sentence = {}\n    for _, word in ipairs(words) do\n     \
    \   if is_prime(#word) then\n            table.insert(new_sentence, word)\n  \
    \      end\n    end\n    return table.concat(new_sentence, ' ')\nend\nreturn words_in_sentence",
  "    local result = {}\n    for word in sentence:gmatch('%w+') do\n        if word:len()\
    \ > 1 and prime.is_prime(word:len()) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "    local\
    \ words = {}\n    for w in sentence:gmatch('%S+') do\n        if is_prime(#w)\
    \ then\n            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend", "    local is_prime = {}\n    for i = 2, 100 do\n        is_prime[i]\
    \ = true\n    end\n    for i = 2, 100 do\n        if is_prime[i] then\n      \
    \      for j = i + i, 100, i do\n                is_prime[j] = false\n       \
    \     end\n        end\n    end\n    local words = {}\n    for w in sentence:gmatch('%w+')\
    \ do\n        words[#words + 1] = w\n    end\n    local res = {}\n    for _, w\
    \ in ipairs(words) do\n        if is_prime[#w] then\n            res[#res + 1]\
    \ = w\n        end\n    end\n    return table.concat(res, ' ')\nend", "    local\
    \ primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97}\n    local words = {}\n    for word in sentence:gmatch('%S+')\
    \ do\n        local length = #word\n        if table.contains(primes, length)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend", "    local prime_words = {}\n    local function\
    \ is_prime(n)\n        local d = 2\n        while d < n do\n            if n %\
    \ d == 0 then\n                return false\n            end\n            d =\
    \ d + 1\n        end\n        return true\n    end\n    for word in sentence:gmatch('%S+')\
    \ do\n        if is_prime(#word) then\n            table.insert(prime_words, word)\n\
    \        end\n    end\n    return table.concat(prime_words, ' ')\nend", "    local\
    \ rez = {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word)\
    \ then\n            table.insert(rez, word)\n        end\n    end\n    return\
    \ table.concat(rez, ' ')\nend", "  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    table.insert(words, word)\n  end\n  local new_sentence = {}\n  for i,\
    \ word in ipairs(words) do\n    if is_prime(#word) then\n      table.insert(new_sentence,\
    \ word)\n    end\n  end\n  return table.concat(new_sentence, ' ')\nend", "  local\
    \ function is_prime(n)\n    for i = 2, n - 1 do\n      if n % i == 0 then\n  \
    \      return false\n      end\n    end\n    return true\n  end\n  local result\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend", "    local result = ''\n    for word in sentence:gmatch('%w+') do\n\
    \        if lib.is_prime(#word) then\n            result = result .. word .. '\
    \ '\n        end\n    end\n    return result:sub(1, -2)\nend", "  local function\
    \ is_prime(n)\n    if n == 2 then return true end\n    for i = 2, math.sqrt(n)\
    \ do\n      if n % i == 0 then return false end\n    end\n    return true\n  end\n\
    \  local words = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word)\
    \ then\n      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend", "  local prime_numbers = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local new_sentence\
    \ = ''\n  for word in sentence:gmatch('%a+') do\n    if table.contains(prime_numbers,\
    \ #word) then\n      new_sentence = new_sentence..' '..word\n    end\n  end\n\
    \  return new_sentence:sub(2)\nend", "    return table.concat(table.select(sentence:gmatch('%w+'),\
    \ is_prime_number), ' ')\nend", "  local words = {}\n  local primes = {}\n  for\
    \ i = 2, #sentence do\n    local flag = true\n    for j = 2, i - 1 do\n      if\
    \ i % j == 0 then\n        flag = false\n        break\n      end\n    end\n \
    \   if flag then\n      table.insert(primes, i)\n    end\n  end\n  for word in\
    \ sentence:gmatch('%w+') do\n    if primes[#word] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend", "    -- find\
    \ the words, whose lengths are prime numbers\n    -- your code here\n    return\n\
    end", "    local function is_prime(number)\n        if number < 2 then\n     \
    \       return false\n        end\n        for i = 2, number - 1 do\n        \
    \    if number % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local words = {}\n    for w in\
    \ sentence:gmatch('%w+') do\n        if is_prime(#w) then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return table.concat(words, ' ')\nend", "    local\
    \ words = sentence:gmatch('[^%s]+')\n    local result = {}\n    for word in words\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "    -- TODO:\
    \ implement your code here\n    return ''\nend", "    local primes = {}\n    for\
    \ i = 2, 16 do\n        if is_prime(i) then\n            primes[#primes + 1] =\
    \ i\n        end\n    end\n    local result = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if primes[#word] then\n            result[#result + 1] = word\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend", "    -- your\
    \ code here\n    local function is_prime(n)\n        local max = math.floor(math.sqrt(n))\n\
    \        for i = 2, max do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ words = {}\n    for w in sentence:gmatch('%w+') do\n        table.insert(words,\
    \ w)\n    end\n    local result = {}\n    for i, w in ipairs(words) do\n     \
    \   if is_prime(#w) then\n            table.insert(result, w)\n        end\n \
    \   end\n    return table.concat(result, ' ')\nend", "    local res = {}\n   \
    \ for word in sentence:gmatch('%S+') do\n        local n = #word\n        if n\
    \ > 1 then\n            local is_prime = true\n            for d = 2, n - 1 do\n\
    \                if n % d == 0 then\n                    is_prime = false\n  \
    \                  break\n                end\n            end\n            if\
    \ is_prime then\n                table.insert(res, word)\n            end\n  \
    \      end\n    end\n    return table.concat(res, ' ')\nend", "  local dict =\
    \ {}\n  for w in sentence:gmatch('%S+') do\n    dict[#w] = dict[#w] or true\n\
    \  end\n  local function is_prime(n)\n    if n == 1 then return false end\n  \
    \  for i = 2, math.floor(math.sqrt(n)) do\n      if n % i == 0 then return false\
    \ end\n    end\n    return true\n  end\n  local res = {}\n  for n in pairs(dict)\
    \ do\n    if is_prime(n) then\n      res[#res + 1] = n\n    end\n  end\n  local\
    \ final = {}\n  for w in sentence:gmatch('%S+') do\n    for _, n in ipairs(res)\
    \ do\n      if #w == n then\n        final[#final + 1] = w\n      end\n    end\n\
    \  end\n  return table.concat(final, ' ')\nend", "  local prime_words = {}\n \
    \ local str = ''\n  local function is_prime(word)\n    if #word < 2 then\n   \
    \   return false\n    end\n    for i = 2, #word - 1 do\n      if #word % i ==\
    \ 0 then\n        return false\n      end\n    end\n    return true\n  end\n \
    \ for word in sentence:gmatch('%w+') do\n    if is_prime(word) then\n      prime_words[#prime_words\
    \ + 1] = word\n    end\n  end\n  for i = 1, #prime_words do\n    str = str ..\
    \ prime_words[i] .. ' '\n  end\n  return str:sub(1, -2)\nend", "    local function\
    \ count_letters(word)\n        return word:gsub('[^a-zA-Z]', ''):len()\n    end\n\
    \    local function is_prime(n)\n        if n == 1 then\n            return false\n\
    \        end\n        if n == 2 then\n            return true\n        end\n \
    \       if n % 2 == 0 then\n            return false\n        end\n        for\
    \ i = 3, math.sqrt(n), 2 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ words = {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(count_letters(word))\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend", "    local words = {}\n    local function is_prime(n)\n\
    \        if n <= 1 then\n            return false\n        end\n        for i\
    \ = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n         \
    \       return false\n            end\n        end\n        return true\n    end\n\
    \    for w in sentence:gmatch('%w+') do\n        if is_prime(#w) then\n      \
    \      table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend", "    -- \u044D\u0442\u0430 \u0444\u0443\u043D\u043A\u0446\u0438\u044F\
    \ \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\u0442 \u043F\u0440\u0435\u0434\
    \u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438 \u0432\u043E\u0437\u0432\u0440\
    \u0430\u0449\u0430\u0435\u0442 \u0441\u043B\u043E\u0432\u0430 \u0432 \u043D\u0435\
    \u043C, \u0434\u043B\u0438\u043D\u0430 \u043A\u043E\u0442\u043E\u0440\u044B\u0445\
    \ \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u043E\u0441\u0442\
    \u044B\u043C \u0447\u0438\u0441\u043B\u043E\u043C,\n    -- \u0432\u043E\u0437\u0432\
    \u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043E\u043B\u044C\u043A\u043E \u043F\
    \u0435\u0440\u0432\u043E\u0435 \u0441\u043B\u043E\u0432\u043E, \u0435\u0441\u043B\
    \u0438 \u0432 \u043F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u0438\
    \ \u043E\u0434\u043D\u043E \u0441\u043B\u043E\u0432\u043E \u0434\u043B\u0438\u043D\
    \u043E\u0439, \u043A\u043E\u0442\u043E\u0440\u043E\u0435 \u044F\u0432\u043B\u044F\
    \u0435\u0442\u0441\u044F \u043F\u0440\u043E\u0441\u0442\u044B\u043C \u0447\u0438\
    \u0441\u043B\u043E\u043C\n    local words = {}\n    local prime = {}\n    local\
    \ result = {}\n    local j = 1\n    local count = 0\n    sentence = sentence:gsub('%s+',\
    \ ' ')\n    if sentence:len() == 1 then return sentence end\n    sentence = sentence:gsub('%s+$',\
    \ '')\n    for i in sentence:gmatch('%S+') do\n        words[j] = i\n        j\
    \ = j + 1\n    end\n    for i = 1, #words do\n        if words[i]:len() > 1 then\n\
    \            local flag = true\n            for j = 2, math.floor(words[i]:len()\
    \ ^ 0.5) do\n                if words[i]:len() % j == 0 then\n               \
    \     flag = false\n                    break\n                end\n         \
    \   end\n            if flag then\n                prime[#prime + 1] = words[i]\n\
    \            end\n        end\n    end\n    if #prime == 0 then return '' end\n\
    \    for i = 1, #prime do\n        if count ~= 0 then\n            result[#result\
    \ + 1] = ' '\n        end\n        result[#result + 1] = prime[i]\n        count\
    \ = count + 1\n    end\n    return table.concat(result)\nend", "    local words\
    \ = {}\n    for w in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ w)\n    end\n    local primes = {}\n    for i = 2, sentence:len() do\n     \
    \   local is_prime = true\n        for j = 2, i do\n            if i % j == 0\
    \ and i ~= j then\n                is_prime = false\n                break\n \
    \           end\n        end\n        if is_prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = \"\"\n    for _, w in ipairs(words)\
    \ do\n        for _, p in ipairs(primes) do\n            if w:len() == p then\n\
    \                result = result .. w .. \" \"\n            end\n        end\n\
    \    end\n    return result:sub(1, -2)\nend", "    sentence = sentence:lower()\n\
    \    local words = {}\n    for w in sentence:gmatch('%S+') do\n        table.insert(words,\
    \ w)\n    end\n    local solution = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(solution, word)\n \
    \       end\n    end\n    return table.concat(solution, ' ')\nend", "    sentence\
    \ = sentence:gsub(' ', '|')\n    local substrings = split(sentence, '|')\n   \
    \ local prime_words = {}\n    for _, substring in ipairs(substrings) do\n    \
    \    if is_prime(#substring) then\n            table.insert(prime_words, substring)\n\
    \        end\n    end\n    return table.concat(prime_words, ' ')\nend", "    local\
    \ result = {}\n    for token in sentence:gmatch(\"%S+\") do\n        local len\
    \ = #token\n        if len > 1 then\n            for i = 2, len - 1 do\n     \
    \           if len % i == 0 then\n                    goto continue\n        \
    \        end\n            end\n            table.insert(result, token)\n     \
    \   end\n        ::continue::\n    end\n    return table.concat(result, \" \"\
    )\nend", "    -- your code here\n    local res = {}\n    for word in sentence:gmatch(\"\
    %S+\") do\n        if #word > 1 then\n            local count = 0\n          \
    \  for i = 1,#word do\n                count = count + 1\n            end\n  \
    \          if count % 2 ~= 0 then\n                table.insert(res, word)\n \
    \           end\n        end\n    end\n    return table.concat(res, \" \")\nend",
  "  -- your code here\nend", "  local words = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    words[#words + 1] = word\n  end\n  local result = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local is_prime = true\n    for j = 2, word:len()\
    \ - 1 do\n      if word:len() % j == 0 then\n        is_prime = false\n      \
    \  break\n      end\n    end\n    if is_prime then\n      result[#result + 1]\
    \ = word\n    end\n  end\n  return table.concat(result, ' ')\nend", "  local primes\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n  local words = {}\n  for word in sentence:gmatch('%S+')\
    \ do\n    for _, prime in ipairs(primes) do\n      if #word == prime then\n  \
    \      table.insert(words, word)\n      end\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend", "  local words, res = split(sentence, ' '), {}\n  for _, word in\
    \ ipairs(words) do\n    if is_prime(#word) then\n      table.insert(res, word)\n\
    \    end\n  end\n  return table.concat(res, ' ')\nend", "    -- your code here\n\
    \    local words = sentence:split(\" \")\n    local word_list = {}\n    for _,\
    \ word in ipairs(words) do\n        if is_prime(word:len()) then\n           \
    \ table.insert(word_list, word)\n        end\n    end\n    return table.concat(word_list,\
    \ \" \")\nend", "    local function is_prime(n)\n        for i = 2, n - 1 do\n\
    \            if n % i == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend", "  local\
    \ words = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word)\
    \ then\n      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend", "  local words = {}\n  local primes = {}\n  local result = {}\n\
    \  local limit = string.len(sentence)\n  local whitespace = string.find(sentence,\
    \ '%s')\n  local prev = 0\n  while whitespace do\n    words[#words + 1] = string.sub(sentence,\
    \ prev, whitespace - 1)\n    prev = whitespace + 1\n    whitespace = string.find(sentence,\
    \ '%s', prev)\n  end\n  words[#words + 1] = string.sub(sentence, prev, limit)\n\
    \  for i = 1, #words do\n    if words[i] == '' then\n      goto continue\n   \
    \ end\n    local prime = true\n    for j = 2, math.sqrt(#words[i]) do\n      if\
    \ #words[i] % j == 0 then\n        prime = false\n        break\n      end\n \
    \   end\n    if prime then\n      result[#result + 1] = words[i]\n    end\n  \
    \  ::continue::\n  end\n  return table.concat(result, ' ')\nend", "  local is_prime\
    \ = {\n    [2] = true,\n    [3] = true,\n    [5] = true,\n    [7] = true,\n  \
    \  [11] = true,\n    [13] = true,\n    [17] = true,\n    [19] = true,\n    [23]\
    \ = true,\n    [29] = true,\n    [31] = true,\n    [37] = true,\n    [41] = true,\n\
    \    [43] = true,\n    [47] = true,\n    [53] = true,\n    [59] = true,\n    [61]\
    \ = true,\n    [67] = true,\n    [71] = true,\n    [73] = true,\n    [79] = true,\n\
    \    [83] = true,\n    [89] = true,\n    [97] = true,\n  }\n  local s = {}\n \
    \ for w in sentence:gmatch('%S+') do\n    if is_prime[#w] then\n      s[#s + 1]\
    \ = w\n    end\n  end\n  return table.concat(s, ' ')\nend", "  local function\
    \ is_prime(number)\n    local function is_prime_recursive(number, current_divisor)\n\
    \      if number == current_divisor then\n        return true\n      end\n   \
    \   if number % current_divisor == 0 then\n        return false\n      end\n \
    \     return is_prime_recursive(number, current_divisor + 1)\n    end\n    return\
    \ is_prime_recursive(number, 2)\n  end", "    local words = sentence:split(' ')\n\
    \    local result = {}\n    for _, w in ipairs(words) do\n        if is_prime(#w)\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend", "  -- your code here\n  local words = {}\n\
    \  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n  end\n\
    \  local ret = {}\n  for i, word in ipairs(words) do\n    if isPrime(#word) then\n\
    \      table.insert(ret, word)\n    end\n  end\n  return table.concat(ret, \"\
    \ \")\nend", "    local words = sentence:split(' ')\n    local result = {}\n \
    \   for i, word in ipairs(words) do\n        if is_prime(#word) then\n       \
    \     table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend", "    local words = {}\n    local t_words = {};\n    local primes\
    \ = {};\n    local sent = sentence;\n    local cnt = 0;\n    local cntr = 0;\n\
    \    local start_counter = 0;\n    local end_counter = 0;\n    local arr = {};\n\
    \    local char = 0;\n    local t = 0;\n    local match = 0;\n    local result\
    \ = '';\n    local cnt_first = 0;\n    local count = 0;\n    local char = nil;\n\
    \    local first_char = nil;\n    for j = 1, #sentence do\n        char = string.sub(sentence,\
    \ j, j);\n        if char == ' ' then\n            t = tonumber(string.sub(sentence,\
    \ start_counter, end_counter));\n            table.insert(arr, t);\n         \
    \   start_counter = j + 1;\n            end_counter = j;\n        else\n     \
    \       end_counter = end_counter + 1;\n        end\n    end\n    t = tonumber(string.sub(sentence,\
    \ start_counter, end_counter));\n    table.insert(arr, t);\n    for k = 1, #arr\
    \ do\n        match = 0;\n        cnt = arr[k];\n        for i = 2, cnt - 1 do\n\
    \            if cnt % i == 0 then\n                match = 1;\n              \
    \  break;\n            end\n        end\n        if match == 0 then\n        \
    \    table.insert(primes, cnt);\n        end\n    end\n    for i = 1, #primes\
    \ do\n        for j = 1, #sentence do\n            first_char = string.sub(sentence,\
    \ j, j);\n            cnt_first = tonumber(first_char);\n            if cnt_first\
    \ == primes[i] then\n                cntr = 1;\n                while true do\n\
    \                    count = count + 1;\n                    char = string.sub(sentence,\
    \ j + cntr, j + cntr);\n                    if char == ' ' then\n            \
    \            break;\n                    end\n                    if count > #sentence\
    \ then\n                        break;\n                    end\n            \
    \        cntr = cntr + 1;", "    local primes = { 2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n    local\
    \ sentence = sentence:gsub('[^%a ]', '')\n    local words = {}\n    for word in\
    \ sentence:gmatch('%a+') do\n        words[#words + 1] = word\n    end\n    local\
    \ result = {}\n    for _, word in ipairs(words) do\n        if word:len() % 2\
    \ == 1 and primes[word:len()] then\n            result[#result + 1] = word\n \
    \       end\n    end\n    return table.concat(result, ' ')\nend", "    sentence\
    \ = sentence:match('^%s*(.-)%s*$')\n    local primes = { 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n \
    \   local result = {}\n    for word in sentence:gmatch('%S+') do\n        local\
    \ len = word:len()\n        for i = 1, #primes do\n            if len == primes[i]\
    \ then\n                table.insert(result, word)\n                break\n  \
    \          end\n        end\n    end\n    return table.concat(result, ' ')\nend",
  "    return table.concat(\n        table.filter(\n            table.map(\n     \
    \           table.split(sentence, ' '),\n                function(w) return string.len(w)\
    \ end\n            ),\n            function(l) return is_prime(l) end\n      \
    \  ),\n        ' '\n    )\nend", "    local function is_prime(n)\n        if n\
    \ == 2 then\n            return true\n        end\n        if n % 2 == 0 then\n\
    \            return false\n        end\n        for d = 3, math.sqrt(n), 2 do\n\
    \            if n % d == 0 then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local result = {}\n    for s in\
    \ sentence:gmatch('%w+') do\n        if is_prime(#s) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return table.concat(result, ' ')\nend", "    local\
    \ is_prime = {}\n    for i = 2, 100 do\n        is_prime[i] = true\n    end\n\
    \    for i = 2, 10 do\n        for j = i * 2, 100, i do\n            is_prime[j]\
    \ = false\n        end\n    end\n    return table.concat(\n        {\n       \
    \     string.match(\n                sentence,\n                '\\f\\v([' ..\
    \ R 'az' .. ']+)[' .. R ' \t' .. ']+'\n            )\n        },\n        ' '\n\
    \    )\nend", "  local function is_prime(n)\n    if n == 2 then return true end\n\
    \    if n < 2 or n % 2 == 0 then return false end\n    for i = 3, math.sqrt(n),\
    \ 2 do\n      if n % i == 0 then return false end\n    end\n    return true\n\
    \  end\n  local res = {}\n  for v in sentence:gmatch('[%w]+') do\n    if is_prime(#v)\
    \ then table.insert(res, v) end\n  end\n  return table.concat(res, ' ')\nend",
  "    return string.gsub(sentence, \"%a+\", function(w)\n        if w:len() > 1 then\n\
    \            local is_prime = true\n            for i = 2, w:len() - 1 do\n  \
    \              if w:len() % i == 0 then\n                    is_prime = false\n\
    \                    break\n                end\n            end\n           \
    \ if is_prime then\n                return w\n            end\n        end\n \
    \       return ''\n    end)\nend", "    local w = {}\n    local len = 0\n    for\
    \ word in sentence:gmatch(\"%w+\") do\n        table.insert(w, word)\n       \
    \ len = len + 1\n    end\n    local res = {}\n    for i=1, len do\n        if\
    \ is_prime(#w[i]) then\n            table.insert(res, w[i])\n        end\n   \
    \ end\n    return table.concat(res, \" \")\nend", "    local t = {}\n    for w\
    \ in sentence:gmatch(\"%w+\") do\n        if is_prime(#w) then\n            table.insert(t,\
    \ w)\n        end\n    end\n    return table.concat(t, \" \")\nend", "  local\
    \ res = ''\n  for w in sentence:gmatch('%S+') do\n    if w:len() > 1 and w:len()\
    \ % 2 ~= 0 then\n      res = res .. ' ' .. w\n    end\n  end\n  return res:sub(2)\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
