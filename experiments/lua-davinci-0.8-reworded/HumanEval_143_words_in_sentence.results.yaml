language: lua
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  if sentence == nil then\n    return\n\
    \  end\n  local words = {}\n  for word in sentence:gmatch(\"%w+\") do\n    words[#words\
    \ + 1] = word\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    if is_prime(#word) then\n      result[#result + 1] = word\n    end\n  end\n\
    \  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgoympgh.lua:25:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplgoympgh.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmplgoympgh.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- your code here\n  return ''\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvri8d1b4.lua:23:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpvri8d1b4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- 1-100 of word length\n    --\
    \ each word contains only letters\n    local t = {}\n    for w in sentence:gmatch('%w+')\
    \ do\n        table.insert(t, w)\n    end\n    local count = 0\n    for i = 1,\
    \ #t do\n        local w = t[i]\n        local length = w:len()\n        if is_prime(length)\
    \ then\n            count = count + 1\n            if count > 1 then\n       \
    \         io.write(' ')\n            end\n            io.write(w)\n        end\n\
    \    end\n    io.write('\\n')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpie86vvsl.lua:26:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpie86vvsl.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpie86vvsl.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('[^%s]+') do\n        table.insert(words, word)\n    end\n\
    \    local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local length = 0\n        for c in word:gmatch('.') do\n            length\
    \ = length + 1\n        end\n        if is_prime(length) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3ll58s1.lua:27:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpz3ll58s1.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpz3ll58s1.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, v in ipairs(words) do\n        if v:len() >\
    \ 1 then\n            local is_prime = true\n            for i = 2, v:len() -\
    \ 1 do\n                if v:len() % i == 0 then\n                    is_prime\
    \ = false\n                    break\n                end\n            end\n \
    \           if is_prime then\n                table.insert(result, v)\n      \
    \      end\n        end\n    end\n    return table.concat(result, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split(\"\
    \ \")\n    local result = {}\n    for index, word in ipairs(words) do\n      \
    \  if is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4fgaw2n.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpj4fgaw2n.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpj4fgaw2n.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local res = {}\n    for word in\
    \ sentence:gmatch('%w+') do\n        if tonumber(word) and is_prime(tonumber(word))\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatag0_ih.lua:28:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpatag0_ih.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split('\
    \ ')\n    local primes = {}\n    for i, v in ipairs(words) do\n        if is_prime(#v)\
    \ then\n            table.insert(primes, v)\n        end\n    end\n    return\
    \ table.concat(primes, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzab3y3pz.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpzab3y3pz.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpzab3y3pz.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for w in sentence:gmatch(\"\
    %S+\") do\n    table.insert(words, w)\n  end\n  local result = {}\n  for _, w\
    \ in ipairs(words) do\n    if is_prime(#w) then\n      table.insert(result, w)\n\
    \    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy49zl0o6.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpy49zl0o6.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpy49zl0o6.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ local function is_prime_helper(k)\n      if k * k > n then\n        return true\n\
    \      elseif n % k == 0 then\n        return false\n      else\n        return\
    \ is_prime_helper(k + 1)\n      end\n    end\n    return is_prime_helper(2)\n\
    \  end\n  local words = {}\n  for word in sentence:gmatch('%S+') do\n    if is_prime(#word)\
    \ then\n      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyt_gz41.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpbyt_gz41.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: -1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       local i = 2\n        while i < n do\n            if n % i == 0 then\n\
    \                return false\n            end\n            i = i + 1\n      \
    \  end\n        return true\n    end\n    local function next_word(s)\n      \
    \  local i = string.find(s, ' ')\n        if i == nil then\n            return\
    \ s, nil\n        end\n        return string.sub(s, 1, i - 1), string.sub(s, i\
    \ + 1)\n    end\n    local result = {}\n    for word in next_word, sentence do\n\
    \        if is_prime(string.len(word)) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {}\n    for i =\
    \ 2, #sentence do\n        if sentence:sub(i, i) ~= ' ' then\n            local\
    \ is_prime = true\n            for j = 2, i - 1 do\n                if i % j ==\
    \ 0 then\n                    is_prime = false\n                    break\n  \
    \              end\n            end\n            if is_prime then\n          \
    \      primes[#primes + 1] = i\n            end\n        end\n    end\n    local\
    \ words = {}\n    for w in sentence:gmatch('[^ ]+') do\n        words[#words +\
    \ 1] = w\n    end\n    local res = {}\n    for i = 1, #words do\n        for j\
    \ = 1, #primes do\n            if #words[i] == primes[j] then\n              \
    \  res[#res + 1] = words[i]\n            end\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zbr45ze.lua:53:\
    \ expected: \"go for it\"\nactual: \"go it\"\nstack traceback:\n\t/tmp/tmp6zbr45ze.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local st\
    \ = {}\n    for k,v in sentence:gmatch(\"(%w+)\") do\n        st[#st+1] = v\n\
    \    end\n    local res = {}\n    for i=1,#st do\n        if is_prime(#st[i])\
    \ then\n            res[#res+1] = st[i]\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszurdors.lua:33:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpszurdors.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(number)\n\
    \    for i = 2, number - 1 do\n      if number % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu6vtqeio.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvfq4tp1.lua:23:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmptvfq4tp1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       local i = 2\n        while i < n do\n            if n % i == 0 then\n\
    \                return false\n            end\n            i = i + 1\n      \
    \  end\n        return true\n    end\n    local function word_is_prime(word)\n\
    \        return is_prime(#word)\n    end\n    local words = string.split(sentence,\
    \ ' ')\n    local result = ''\n    for _, word in ipairs(words) do\n        if\
    \ word_is_prime(word) then\n            result = result .. word .. ' '\n     \
    \   end\n    end\n    return string.sub(result, 1, #result - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpevu0woih.lua:29:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpevu0woih.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpevu0woih.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local words = {}\n    for w in sentence:gmatch('%a+') do\n        table.insert(words,\
    \ w)\n    end\n    local result = {}\n    for _, w in ipairs(words) do\n     \
    \   for _, p in ipairs(primes) do\n            if #w == p then\n             \
    \   table.insert(result, w)\n                break\n            end\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local result\
    \ = {}\n    for word in sentence:gmatch(\"%S+\") do\n        local len = word:len()\n\
    \        if len > 1 then\n            local isPrime = true\n            for i\
    \ = 2, len - 1 do\n                if len % i == 0 then\n                    isPrime\
    \ = false\n                    break\n                end\n            end\n \
    \           if isPrime then\n                table.insert(result, word)\n    \
    \        end\n        end\n    end\n    return table.concat(result, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local fun = function(x) return\
    \ x % 2 == 1 end\n    local function is_prime(num)\n        if num < 2 then return\
    \ false end\n        for i = 2, num - 1 do\n            if num % i == 0 then return\
    \ false end\n        end\n        return true\n    end\n    local output = ''\n\
    \    for word in sentence:gmatch('%S+') do\n        if is_prime(#word) then\n\
    \            output = output .. word .. ' '\n        end\n    end\n    return\
    \ output:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61yhlsu2.lua:21:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmp61yhlsu2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local res = {}\n    for word in\
    \ sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9lehjhs_.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp9lehjhs_.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp9lehjhs_.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61yhlsu2.lua:21:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmp61yhlsu2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- Implement your solution here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pan05mq.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmp0pan05mq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for w in sentence:gmatch(\"\
    %w+\") do\n    words[#words + 1] = w\n  end\n  local result = {}\n  for i, w in\
    \ ipairs(words) do\n    if is_prime(#w) then\n      result[#result + 1] = w\n\
    \    end\n  end\n  return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphcjmtn3v.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmphcjmtn3v.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmphcjmtn3v.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(num)\n \
    \   for i = 2, math.floor(math.sqrt(num)) do\n      if num % i == 0 then\n   \
    \     return false\n      end\n    end\n    return true\n  end\n  local result\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11jnufvd.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp11jnufvd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local a = {}\n  for w in sentence:gmatch(\"\
    %S+\") do\n    if is_prime(#w) then\n      table.insert(a, w)\n    end\n  end\n\
    \  return table.concat(a, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplpv86sot.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplpv86sot.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmplpv86sot.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local res = {}\n    for word in\
    \ sentence:gmatch(\"%w+\") do\n        if word_prime(word) then\n            table.insert(res,\
    \ word)\n        end\n    end\n    return table.concat(res, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm0cd5j6l.lua:18:\
    \ attempt to call a nil value (global 'word_prime')\nstack traceback:\n\t/tmp/tmpm0cd5j6l.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpm0cd5j6l.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = string.split(sentence)\n\
    \  local new_sentence = ''\n  for _, word in ipairs(words) do\n    if is_prime(#word)\
    \ then\n      new_sentence = new_sentence .. word .. ' '\n    end\n  end\n  return\
    \ new_sentence:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_y70dpr.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpe_y70dpr.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpe_y70dpr.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6azwh7vc.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6azwh7vc.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6azwh7vc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(num)\n \
    \   if num == 1 then\n      return false\n    end\n    for i = 2, num - 1 do\n\
    \      if num % i == 0 then\n        return false\n      end\n    end\n    return\
    \ true\n  end\n  local result = {}\n  for word in sentence:gmatch('%S+') do\n\
    \    if is_prime(#word) then\n      table.insert(result, word)\n    end\n  end\n\
    \  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local i\
    \ = 1\n    local j = 1\n    while j <= #sentence do\n        if sentence:sub(j,\
    \ j) == ' ' then\n            words[#words + 1] = sentence:sub(i, j - 1)\n   \
    \         i = j + 1\n        end\n        j = j + 1\n    end\n    words[#words\
    \ + 1] = sentence:sub(i, j - 1)\n    local primes = {2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    local\
    \ res = {}\n    for i = 1, #words do\n        local len = #words[i]\n        for\
    \ j = 1, #primes do\n            if len == primes[j] then\n                res[#res\
    \ + 1] = words[i]\n                break\n            end\n        end\n    end\n\
    \    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local found_words\
    \ = {}\n  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  for word in sentence:gmatch('%w+')\
    \ do\n    words[#words + 1] = word\n  end\n  for i = 1, #words do\n    for j =\
    \ 1, #primes do\n      if #words[i] == primes[j] then\n        found_words[#found_words\
    \ + 1] = words[i]\n      end\n    end\n  end\n  return table.concat(found_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- Write your code here\n  -- It's\
    \ main function. Don't remove this function.\n  -- Variable declaration\n  local\
    \ str = \"\"\n  -- Function body\n  for i in string.gmatch(sentence, \"[^%s]+\"\
    ) do\n    -- if prime function return true then add the word to str\n    if prime(#i)\
    \ then\n      str = str .. i .. \" \"\n    end\n  end\n  return str\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1hgact5.lua:23:\
    \ attempt to call a nil value (global 'prime')\nstack traceback:\n\t/tmp/tmpy1hgact5.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpy1hgact5.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    \    local function check_word(word)\n        return is_prime(word:len())\n  \
    \  end\n    local words = sentence:split(' ')\n    local result = {}\n    for\
    \ _, word in ipairs(words) do\n        if check_word(word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpec0pro7z.lua:30:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpec0pro7z.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpec0pro7z.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tlocal function is_prime(num)\n\t\
    \tfor i = 2, num - 1 do\n\t\t\tif num % i == 0 then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\tend\n\t\treturn true\n\tend\n\tlocal words = {}\n\tfor word in sentence:gmatch('%S+')\
    \ do\n\t\tif is_prime(#word) then\n\t\t\ttable.insert(words, word)\n\t\tend\n\t\
    end\n\treturn table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolbpv3tx.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpolbpv3tx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local res = {}\n    for w in sentence:gmatch('%S+') do\n        if\
    \ utils.search(primes, #w) then\n            table.insert(res, w)\n        end\n\
    \    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqku0pbfg.lua:19:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpqku0pbfg.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpqku0pbfg.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- TODO: implement the code of\
    \ the function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1s88p7h.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpc1s88p7h.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       for d = 2, n - 1 do\n            if n % d == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ result = {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgks3etkp.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpgks3etkp.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local answer = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        local word_len = word:len()\n        local\
    \ is_prime = true\n        for i = 2, word_len - 1 do\n            if word_len\
    \ % i == 0 then\n                is_prime = false\n                break\n   \
    \         end\n        end\n        if is_prime then\n            table.insert(answer,\
    \ word)\n        end\n    end\n    return table.concat(answer, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpza9b4x.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpwpza9b4x.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(num)\n \
    \   for i = 2, num / 2 do\n      if num % i == 0 then\n        return false\n\
    \      end\n    end\n    return true\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqq__xp2r.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpnw_407.lua:23:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmpnw_407.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = { }\n  for word in\
    \ sentence:gmatch(\"%S+\") do\n    table.insert(words, word)\n  end\n  local primes\
    \ = { }\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      table.insert(primes,\
    \ words[i])\n    end\n  end\n  return table.concat(primes, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3j_hn_q.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpl3j_hn_q.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpl3j_hn_q.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local res = {}\n    for _,w in\
    \ ipairs(sentence:split(' ')) do\n        if table.find(is_prime, w:len()) then\n\
    \            table.insert(res, w)\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4k99vt58.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp4k99vt58.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp4k99vt58.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local t = {}\n  local is_prime =\
    \ function(number)\n    if number <= 1 then\n      return false\n    end\n   \
    \ for i = 2, math.floor(math.sqrt(number)) do\n      if number % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  for word\
    \ in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(t,\
    \ word)\n    end\n  end\n  return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = function(n)\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local split = function(s, sep)\n        local sep, fields = sep\
    \ or \":\", {}\n        local pattern = string.format(\"([^%s]+)\", sep)\n   \
    \     s:gsub(pattern, function(c) fields[#fields+1] = c end)\n        return fields\n\
    \    end\n    local result = ''\n    for _, word in ipairs(split(sentence, ' '))\
    \ do\n        if is_prime(#word) then\n            result = result .. word ..\
    \ ' '\n        end\n    end\n    return result:sub(1, #result - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2b9ojru7.lua:42:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp2b9ojru7.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n  local solution = {}\n  for w in sentence:gmatch('[^%s]+') do\n    if\
    \ table.contains(primes, #w) then\n      table.insert(solution, w)\n    end\n\
    \  end\n  return table.concat(solution, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8605h_97.lua:19:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp8605h_97.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8605h_97.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- TODO: Implement the function\
    \ here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec2c8zhb.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpec2c8zhb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n  local t = {}\n  local res = {}\n  local n = 1\n  for word in sentence:gmatch('%w+')\
    \ do\n    t[n] = word\n    n = n + 1\n  end\n  for i, v in ipairs(t) do\n    for\
    \ _, prime in ipairs(primes) do\n      if v:len() == prime then\n        res[#res\
    \ + 1] = v\n      end\n    end\n  end\n  return table.concat(res, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local str\
    \ = \"\"\n    local words = {}\n    local prime = {}\n    local res = \"\"\n \
    \   local i = 0\n    local j = 0\n    local k = 0\n    local index = 0\n    local\
    \ flag = false\n    local temp = 0\n    local m = 0\n    local n = 0\n    local\
    \ len = 0\n    local count = 0\n    local space = string.byte(\" \")\n    local\
    \ strlen = string.len(sentence)\n    while i < strlen do\n        i = i + 1\n\
    \        if string.byte(sentence, i) == space then\n            if flag == true\
    \ then\n                str = string.sub(sentence, index, i - 1)\n           \
    \     table.insert(words, str)\n                index = i + 1\n              \
    \  flag = false\n            end\n        else\n            if flag == false then\n\
    \                index = i\n                flag = true\n            end\n   \
    \     end\n    end\n    if flag == true then\n        str = string.sub(sentence,\
    \ index, i)\n        table.insert(words, str)\n    end\n    len = #words\n   \
    \ for i = 2, len, 1 do\n        m = i * i\n        if m <= len then\n        \
    \    n = i * 2\n            while m <= len do\n                prime[m] = 1\n\
    \                m = m + n\n            end\n        end\n    end\n    count =\
    \ 0\n    for j = 1, len, 1 do\n        if prime[j] == nil then\n            str\
    \ = words[j]\n            res = res .. str\n            count = count + 1\n  \
    \          if count < len then\n                res = res .. \" \"\n         \
    \   end\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr5mswkpl.lua:81:\
    \ expected: \"is\"\nactual: \"This is a \"\nstack traceback:\n\t/tmp/tmpr5mswkpl.lua:81:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = string.split(sentence,\
    \ \" \")\n    local result = {}\n    for i, v in ipairs(words) do\n        if\
    \ is_prime(string.len(v)) then\n            table.insert(result, v)\n        end\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_p5zmb7g.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp_p5zmb7g.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp_p5zmb7g.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {\n    [2] = true,\n\
    \    [3] = true,\n    [5] = true,\n    [7] = true,\n    [11] = true,\n    [13]\
    \ = true,\n    [17] = true,\n    [19] = true,\n    [23] = true,\n    [29] = true,\n\
    \    [31] = true,\n    [37] = true,\n    [41] = true,\n    [43] = true,\n    [47]\
    \ = true,\n    [53] = true,\n    [59] = true,\n    [61] = true,\n    [67] = true,\n\
    \    [71] = true,\n    [73] = true,\n    [79] = true,\n    [83] = true,\n    [89]\
    \ = true,\n    [97] = true,\n  }\n  local words = {}\n  for w in sentence:gmatch('%w+')\
    \ do\n    local l = #w\n    if primes[l] then\n      table.insert(words, w)\n\
    \    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local sentence_table = sentence:split(\"\
    \ \")\n    local is_prime_length_word = function(word)\n        return is_prime(#word)\n\
    \    end\n    local prime_length_words = filter(sentence_table, is_prime_length_word)\n\
    \    return table.concat(prime_length_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfpsnxark.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpfpsnxark.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpfpsnxark.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = {[1] = false,\
    \ [2] = true, [3] = true, [4] = false, [5] = true, [6] = false, [7] = true, [8]\
    \ = false, [9] = false, [10] = false}\n    local res = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        local len = #word\n        if not is_prime[len] then\n         \
    \   for i = 2, math.sqrt(len) do\n                if len % i == 0 then\n     \
    \               is_prime[len] = false\n                    break\n           \
    \     end\n            end\n            if not is_prime[len] then\n          \
    \      is_prime[len] = true\n            end\n        end\n        if is_prime[len]\
    \ then\n            table.insert(res, word)\n        end\n    end\n    return\
    \ table.concat(res, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68afnpek.lua:41:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp68afnpek.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local t = sentence:split(' ')\n\
    \    local s = ''\n    for _, v in ipairs(t) do\n        if is_prime(#v) then\n\
    \            s = s .. v .. ' '\n        end\n    end\n    return string.sub(s,\
    \ 1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuovh9_ka.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpuovh9_ka.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpuovh9_ka.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgacg3sds.lua:26:\
    \ expected: \"is\"\nactual: {\"This\", \"is\", \"a\", \"test\"}\nstack traceback:\n\
    \t/tmp/tmpgacg3sds.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local result\
    \ = {}\n  sentence:gsub('%S+', function(word)\n    table.insert(words, word)\n\
    \  end)\n  for index, word in ipairs(words) do\n    if is_prime(word:len()) then\n\
    \      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqxk5bnml.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpqxk5bnml.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpqxk5bnml.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local s\
    \ = {}\n    for a in sentence:gmatch(\"%w+\") do\n        table.insert(s, a)\n\
    \    end\n    local str = ''\n    for i,v in ipairs(s) do\n        if is_prime(v:len())\
    \ then\n            str = str .. v .. ' '\n        end\n    end\n    return str:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jfadkaw.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4jfadkaw.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp4jfadkaw.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnlag37b.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmppnlag37b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tlocal primes = { [2] = true, [3]\
    \ = true, [5] = true, [7] = true, [11] = true, [13] = true, [17] = true, [19]\
    \ = true, [23] = true, [29] = true, [31] = true, [37] = true, [41] = true, [43]\
    \ = true, [47] = true, [53] = true, [59] = true, [61] = true, [67] = true, [71]\
    \ = true, [73] = true, [79] = true, [83] = true, [89] = true, [97] = true }\n\t\
    local result = ''\n\tfor word in sentence:gmatch('[^%s]+') do\n\t\tif primes[#word]\
    \ then\n\t\t\tresult = result .. word .. ' '\n\t\tend\n\tend\n\treturn result:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local stringPrime\
    \ = \"\"\n    for i in string.gmatch(sentence, \"%S+\") do\n        if prime(string.len(i))\
    \ then\n            stringPrime = stringPrime .. \" \" .. i\n        end\n   \
    \ end\n    return string.sub(stringPrime, 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprf9syle2.lua:19:\
    \ attempt to call a nil value (global 'prime')\nstack traceback:\n\t/tmp/tmprf9syle2.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmprf9syle2.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local words = sentence:split(' ')\n  local\
    \ rs = {}\n  for i = 1, #words do\n    if is_prime(#words[i]) then\n      rs[#rs\
    \ + 1] = words[i]\n    end\n  end\n  return table.concat(rs, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprto2720a.lua:24:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmprto2720a.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmprto2720a.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local is_prime = function(num)\n\
    \    for i = 2, math.floor(math.sqrt(num)) do\n      if num % i == 0 then\n  \
    \      return false\n      end\n    end\n    return true\n  end\n  local result\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphch11nuk.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmphch11nuk.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local primes_set = {}\n    local new_sentence = ''\n    local ret_str\
    \ = ''\n    for i = 1,#sentence do\n        if sentence:sub(i,i) == ' ' then\n\
    \            words[#words+1] = sentence:sub(1,i-1)\n            sentence = sentence:sub(i+1)\n\
    \            i = 0\n        end\n    end\n    words[#words+1] = sentence:sub(1,#sentence)\n\
    \    for i = 2,100 do\n        local is_prime = true\n        for j = 2,i-1 do\n\
    \            if i % j == 0 then\n                is_prime = false\n          \
    \      break\n            end\n        end\n        if is_prime then\n       \
    \     primes[#primes+1] = i\n            primes_set[i] = true\n        end\n \
    \   end\n    for i = 1,#words do\n        if primes_set[#words[i]] then\n    \
    \        new_sentence = new_sentence .. words[i] .. ' '\n        end\n    end\n\
    \    for i = 1,#new_sentence do\n        if new_sentence:sub(i,i) == ' ' then\n\
    \            ret_str = ret_str .. new_sentence:sub(1,i-1) .. ' '\n           \
    \ new_sentence = new_sentence:sub(i+1)\n            i = 0\n        end\n    end\n\
    \    ret_str = ret_str .. new_sentence:sub(1,#new_sentence)\n    return ret_str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgy7ik64k.lua:61:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgy7ik64k.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\t\n\tlocal dictionary = {}\n\tlocal\
    \ k = 1\n\t\n\t-- split sentence with space\n\tfor word in string.gmatch(sentence,\
    \ \"%S+\") do\n\t\tdictionary[k] = word\n\t\tk = k + 1\n\tend\n\t\n\tlocal function\
    \ prime(n)\n\t\tlocal flag = 0\n\t\tif n == 2 then\n\t\t\treturn true\n\t\tend\n\
    \t\tfor i = 2, math.floor(math.sqrt(n)) do\n\t\t\tif n % i == 0 then\n\t\t\t\t\
    flag = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif flag == 0 then\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\tlocal function collect()\n\
    \t\tlocal result = {}\n\t\tlocal k = 1\n\t\tfor i = 1, #dictionary do\n\t\t\t\
    if prime(#dictionary[i]) then\n\t\t\t\tresult[k] = dictionary[i]\n\t\t\t\tk =\
    \ k + 1\n\t\t\tend\n\t\tend\n\t\treturn result\n\tend\n\t\n\tlocal function join(a)\n\
    \t\tlocal result = a[1]\n\t\tfor i = 2, #a do\n\t\t\tresult = result .. \" \"\
    \ .. a[i]\n\t\tend\n\t\treturn result\n\tend\n\t\n\treturn join(collect())\nend\n\
    return words_in_sentence\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw4vz_1ze.lua:67: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z3lhqfu.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp4z3lhqfu.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp4z3lhqfu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- Code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvn_ti923.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvn_ti923.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local primes\
    \ = {}\n    local result = ''\n    for word in sentence:gmatch('%w+') do\n   \
    \     table.insert(words, word)\n    end\n    for i = 2, #words do\n        for\
    \ j = 2, i - 1 do\n            if i % j == 0 then\n                break\n   \
    \         elseif j == i - 1 then\n                table.insert(primes, i)\n  \
    \          end\n        end\n    end\n    for i = 1, #primes do\n        result\
    \ = result .. words[primes[i]] .. ' '\n    end\n    return result:sub(1, -2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp8iwnkv.lua:40:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpwp8iwnkv.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tif type(sentence) ~= 'string' then\n\
    \t\terror('sentence must be a string', 2)\n\tend\n\tlocal r = ''\n\tfor w in sentence:gmatch('%w+')\
    \ do\n\t\tlocal len = #w\n\t\tlocal is_prime = true\n\t\tfor i = 2, len - 1 do\n\
    \t\t\tif len % i == 0 then\n\t\t\t\tis_prime = false\n\t\t\t\tbreak\n\t\t\tend\n\
    \t\tend\n\t\tif is_prime then\n\t\t\tr = r .. w .. ' '\n\t\tend\n\tend\n\treturn\
    \ r:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp964vw6gz.lua:39:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp964vw6gz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local result\
    \ = ''\n    for i in string.gmatch(sentence, '%S+') do\n        if is_prime(#i)\
    \ then\n            result = result .. i .. ' '\n        end\n    end\n    return\
    \ result:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8xtfllze.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp8xtfllze.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmp8xtfllze.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = { [2] = true, [3]\
    \ = true, [5] = true, [7] = true, [11] = true, [13] = true, [17] = true, [19]\
    \ = true, [23] = true, [29] = true, [31] = true, [37] = true, [41] = true, [43]\
    \ = true, [47] = true, [53] = true, [59] = true, [61] = true, [67] = true, [71]\
    \ = true, [73] = true, [79] = true, [83] = true, [89] = true, [97] = true }\n\
    \    local words = {}\n    local s = ''\n    for w in sentence:gmatch('[%a]+')\
    \ do\n        table.insert(words, w)\n    end\n    for _, w in ipairs(words) do\n\
    \        if primes[#w] then\n            s = s .. ' ' .. w\n        end\n    end\n\
    \    return s:sub(2)\nend\nreturn words_in_sentence\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiaoueco3.lua:30: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tlocal function is_prime(num)\n\t\
    \tif num < 2 then\n\t\t\treturn false\n\t\tend\n\t\tlocal i = 2\n\t\twhile i <\
    \ num do\n\t\t\tif num % i == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\t\
    i = i + 1\n\t\tend\n\t\treturn true\n\tend\n\tlocal words = {}\n\tfor word in\
    \ sentence:gmatch('%w+') do\n\t\tif is_prime(#word) then\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\tend\n\treturn table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {}\n  for i = 2,\
    \ 100 do\n    local is_prime = true\n    for j = 2, i - 1 do\n      if i % j ==\
    \ 0 then\n        is_prime = false\n        break\n      end\n    end\n    if\
    \ is_prime then\n      primes[#primes + 1] = i\n    end\n  end\n  local words\
    \ = {}\n  for s in sentence:gmatch('%S+') do\n    words[#words + 1] = s\n  end\n\
    \  local res = {}\n  for _, w in ipairs(words) do\n    for _, p in ipairs(primes)\
    \ do\n      if w:len() == p then\n        res[#res + 1] = w\n        break\n \
    \     end\n    end\n  end\n  return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwrw6iz6.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqwrw6iz6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {[2] = true, [3]\
    \ = true, [5] = true, [7] = true, [11] = true, [13] = true, [17] = true, [19]\
    \ = true, [23] = true, [29] = true, [31] = true, [37] = true, [41] = true, [43]\
    \ = true, [47] = true, [53] = true, [59] = true, [61] = true, [67] = true, [71]\
    \ = true, [73] = true, [79] = true, [83] = true, [89] = true, [97] = true}\n \
    \   local words = {}\n    for word in sentence:gmatch('%S+') do\n        if primes[#word]\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = { 2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97 }\n    local output = {}\n    for word in sentence:gmatch('%w+') do\n   \
    \     if utils.is_in_list(#word, primes) then\n            table.insert(output,\
    \ word)\n        end\n    end\n    return table.concat(output, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfyafi634.lua:19:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpfyafi634.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpfyafi634.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words, primes = {}, {}\n\
    \    for match in sentence:gmatch('%w+') do\n        local word, length = match,\
    \ match:len()\n        words[#words + 1] = word\n        if length > 1 then\n\
    \            local prime = true\n            for p = 2, length - 1 do\n      \
    \          if length % p == 0 then\n                    prime = false\n      \
    \              break\n                end\n            end\n            if prime\
    \ then\n                primes[#primes + 1] = word\n            end\n        end\n\
    \    end\n    if #primes == 0 then\n        return ''\n    end\n    return table.concat(primes,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local prime_words\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    table.insert(words, word)\n\
    \  end\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(prime_words, word)\n    end\n  end\n  return table.concat(prime_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8qkaoyq.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpk8qkaoyq.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpk8qkaoyq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n < 2 then\n      return false\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    for i = 2, math.sqrt(n) do\n      if n % i == 0 then\n  \
    \      return false\n      end\n    end\n    return true\n  end\n  local words\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- check if number is prime number\n\
    \  local function is_prime(number)\n    local divisor = 2\n    while divisor <\
    \ number do\n      if number % divisor == 0 then\n        return false\n     \
    \ end\n      divisor = divisor + 1\n    end\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnfsmnw3v.lua:40: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    sentence = sentence:gsub('%s+',\
    \ ' ')\n    local words = {}\n    for w in sentence:gmatch('%S+') do\n       \
    \ if is_prime(#w) then\n            table.insert(words, w)\n        end\n    end\n\
    \    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv70ii5e0.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpv70ii5e0.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpv70ii5e0.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = {}\n    for i\
    \ = 2, 100 do\n        is_prime[i] = true\n    end\n    for i = 2, math.sqrt(100)\
    \ do\n        if is_prime[i] then\n            for j = i * i, 100, i do\n    \
    \            is_prime[j] = false\n            end\n        end\n    end\n    local\
    \ words = {}\n    for w in sentence:gmatch(\"%S+\") do\n        if is_prime[#w]\
    \ then\n            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = split(sentence,\
    \ \" \")\n    local result = \"\"\n    for index, word in ipairs(words) do\n \
    \       if is_prime(#word) then\n            result = result .. word .. \" \"\n\
    \        end\n    end\n    return result:sub(1, #result - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl4fc3y2a.lua:16:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpl4fc3y2a.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpl4fc3y2a.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikjchoud.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpikjchoud.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {}\n  local words\
    \ = {}\n  local result = ''\n  for p = 2, #sentence do\n    local is_prime = true\n\
    \    for i = 2, p - 1 do\n      if p % i == 0 then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if is_prime then\n      primes[#primes\
    \ + 1] = p\n    end\n  end\n  for word in sentence:gmatch('%S+') do\n    words[#words\
    \ + 1] = word\n  end\n  for i = 1, #words do\n    if primes[i] == #words[i] then\n\
    \      result = result .. words[i] .. ' '\n    end\n  end\n  return result:sub(1,\
    \ #result - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtftiz52.lua:45:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpwtftiz52.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local m\
    \ = require 'prime'\n    local r = {}\n    local a = sentence:split(\" \")\n \
    \   for k,v in pairs(a) do\n        if m[#v] then r[#r+1] = v end\n    end\n \
    \   return table.concat(r, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp831_u6i7.lua:17:\
    \ module 'prime' not found:\n\tno field package.preload['prime']\n\tno file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/prime.lua'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/prime/init.lua'\n\t\
    no file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/prime.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/prime/init.lua'\n\
    \tno file './prime.lua'\n\tno file './prime/init.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/prime.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './prime.so'\nstack traceback:\n\t/tmp/tmp831_u6i7.lua:17: in local 'candidate'\n\
    \t/tmp/tmp831_u6i7.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local str = ''\n    for word in\
    \ sentence:gmatch('%w+') do\n        local len = #word\n        if len == 2 then\n\
    \            str = str .. ' ' .. word\n        else\n            local prime =\
    \ true\n            for i = 2, math.floor(len / 2) do\n                if len\
    \ % i == 0 then\n                    prime = false\n                    break\n\
    \                end\n            end\n            if prime then\n           \
    \     str = str .. ' ' .. word\n            end\n        end\n    end\n    return\
    \ str:sub(2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbqn_e0g.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpdbqn_e0g.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    sentence = sentence:lower()\n\
    \    local words = split(sentence, ' ')\n    local result = ''\n    for _, word\
    \ in ipairs(words) do\n        if is_prime(#word) then\n            result = result\
    \ .. word .. ' '\n        end\n    end\n    return result:sub(1, -2)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8tkox2sg.lua:17:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp8tkox2sg.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp8tkox2sg.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local str\
    \ = {}\n    for word in sentence:gmatch(\"%S+\") do\n        if #word > 1 then\n\
    \            table.insert(str, word)\n        end\n    end\n    local res = \"\
    \"\n    for _, value in ipairs(str) do\n        for i = 2, math.floor(#value /\
    \ 2) do\n            if value:len() % i == 0 then\n                goto continue\n\
    \            end\n        end\n        res = res .. value .. \" \"\n        ::continue::\n\
    \    end\n    return res:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = function(n)\n\
    \        if n < 2 then\n            return false\n        end\n        for i =\
    \ 2, math.sqrt(n) do\n            if n % i == 0 then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local words =\
    \ {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word) then\n\
    \            table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(num)\n\
    \        if num <= 1 then\n            return false\n        end\n        local\
    \ i = 2\n        while i <= math.sqrt(num) do\n            if num % i == 0 then\n\
    \                return false\n            end\n            i = i + 1\n      \
    \  end\n        return true\n    end\n    local res = {}\n    for w in sentence:gmatch('%S+')\
    \ do\n        if is_prime(#w) then\n            table.insert(res, w)\n       \
    \ end\n    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split('\
    \ ')\n    local primes = {}\n    for word in words do\n        local n = word:len()\n\
    \        if n == 2 or n == 3 or n == 5 or n == 7 then\n            table.insert(primes,\
    \ word)\n        end\n    end\n    return table.concat(primes, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinpvgzfn.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpinpvgzfn.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpinpvgzfn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local primes\
    \ = {}\n  local word_count = 0\n  local chars = {'0', '1', '2', '3', '4', '5',\
    \ '6', '7', '8', '9'}\n  for word in sentence:gmatch('[%a]+') do\n    if not table.contains(chars,\
    \ word) then\n      word_count = word_count + 1\n      if not table.contains(primes,\
    \ word_count) then\n        table.insert(primes, word_count)\n      end\n    \
    \  words[word_count] = word\n    end\n  end\n  local result = ''\n  for i, _ in\
    \ ipairs(primes) do\n    if i ~= #primes then\n      result = result .. words[primes[i]]\
    \ .. ' '\n    else\n      result = result .. words[primes[i]]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfh0n6bs2.lua:21:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpfh0n6bs2.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpfh0n6bs2.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime_num = {\n     \
    \   [1] = false,\n        [2] = true,\n        [3] = true,\n        [4] = false,\n\
    \        [5] = true,\n        [6] = false,\n        [7] = true,\n        [8] =\
    \ false,\n        [9] = false,\n        [10] = false,\n    }\n    local function\
    \ is_prime(x)\n        if is_prime_num[x] ~= nil then\n            return is_prime_num[x]\n\
    \        end\n        for i = 2, math.sqrt(x) do\n            if x % i == 0 then\n\
    \                is_prime_num[x] = false\n                return false\n     \
    \       end\n        end\n        is_prime_num[x] = true\n        return true\n\
    \    end\n    local words = {}\n    for word in sentence:gmatch('%w+') do\n  \
    \      if is_prime(#word) then\n            table.insert(words, word)\n      \
    \  end\n    end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = {}\n    local words\
    \ = {}\n    for w in sentence:gmatch('%w+') do\n        table.insert(words, w)\n\
    \    end\n    for i, w in ipairs(words) do\n        if is_prime(#w) then\n   \
    \         table.insert(result, w)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvkrxpgr.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpcvkrxpgr.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpcvkrxpgr.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local res = ''\n    for word in\
    \ sentence:gmatch('%w+') do\n        local len = word:len()\n        if len %\
    \ 2 ~= 0 and len > 1 then\n            local is_prime = true\n            for\
    \ i = 3, len - 1, 2 do\n                if len % i == 0 then\n               \
    \     is_prime = false\n                    break\n                end\n     \
    \       end\n            if is_prime then\n                res = res .. word ..\
    \ ' '\n            end\n        end\n    end\n    return res:sub(1, -2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6ajvl4g.lua:38:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw6ajvl4g.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    return sentence:gsub(\"%S+\",function(w)\n\
    \        return #w % 2 == 1 and w or \"\"\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fazdc_f.lua:24:\
    \ expected: \"is\"\nactual: \"  a \"\nstack traceback:\n\t/tmp/tmp3fazdc_f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {\n        [2]\
    \ = true,\n        [3] = true,\n        [5] = true,\n        [7] = true,\n   \
    \     [11] = true,\n        [13] = true,\n        [17] = true,\n        [19] =\
    \ true,\n        [23] = true,\n        [29] = true,\n        [31] = true,\n  \
    \      [37] = true,\n        [41] = true,\n        [43] = true,\n        [47]\
    \ = true,\n        [53] = true,\n        [59] = true,\n        [61] = true,\n\
    \        [67] = true,\n        [71] = true,\n        [73] = true,\n        [79]\
    \ = true,\n        [83] = true,\n        [89] = true,\n        [97] = true,\n\
    \    }\n    local words = {}\n    for w in sentence:gmatch('%w+') do\n       \
    \ local l = #w\n        if primes[l] then\n            table.insert(words, w)\n\
    \        end\n    end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local toks = {}\n  for word in sentence:gmatch(\"\
    %w+\") do\n    if is_prime(#word) then\n      table.insert(toks, word)\n    end\n\
    \  end\n  return table.concat(toks, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxjse23fi.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpxjse23fi.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpxjse23fi.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6azwh7vc.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6azwh7vc.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6azwh7vc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(number)\n\
    \    local counter = 2\n    while counter < number do\n      if number % counter\
    \ == 0 then\n        return false\n      end\n      counter = counter + 1\n  \
    \  end\n    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdtepuv_l.lua:39: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local t = {}\n    for w in sentence:gmatch('%w+')\
    \ do\n        if is_prime(#w) then\n            t[#t + 1] = w\n        end\n \
    \   end\n    return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplcr8q_fr.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmplcr8q_fr.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmplcr8q_fr.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local t = {}\n    local prime\
    \ = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97}\n    for w in sentence:gmatch(\"%S+\") do\n        if prime[w:len()]\
    \ then t[#t+1] = w end\n    end\n    return table.concat(t, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29x2xd73.lua:27:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmp29x2xd73.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  error(\"Not implemented\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmy5auqbc.lua:16:\
    \ Not implemented\nstack traceback:\n\t/tmp/tmpmy5auqbc.lua:16: in local 'candidate'\n\
    \t/tmp/tmpmy5auqbc.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = split(sentence,\
    \ \" \")\n    local res = {}\n    for _, v in ipairs(words) do\n        if is_prime(#v)\
    \ then\n            table.insert(res, v)\n        end\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9rj36_jc.lua:16:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp9rj36_jc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp9rj36_jc.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local length = #word\n        if length == 2 or length == 3 or length\
    \ == 5 or length == 7 then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\treturn string.gsub(sentence, \"\
    [a-zA-Z0-9]+\", function(word)\n\t\tif word:len() == 1 then\n\t\t\treturn word\n\
    \t\tend\n\t\tlocal divisor = 2\n\t\tlocal flag = true\n\t\twhile divisor <= word:len()\
    \ / 2 do\n\t\t\tif word:len() % divisor == 0 then\n\t\t\t\tflag = false\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\t\tdivisor = divisor + 1\n\t\tend\n\t\tif flag then\n\t\
    \t\treturn word\n\t\telse\n\t\t\treturn \"\"\n\t\tend\n\tend)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bjrlnkw.lua:40:\
    \ expected: \"is\"\nactual: \" is a \"\nstack traceback:\n\t/tmp/tmp1bjrlnkw.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(x)\n \
    \       local function is_divisible_by(x,y)\n            return x % y == 0\n \
    \       end\n        local divisors = {2,3,5,7}\n        for i = 1, #divisors\
    \ do\n            if is_divisible_by(x, divisors[i]) then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ function prime_word_of(word)\n        if is_prime(string.len(word)) then\n \
    \           return word\n        end\n    end\n    local function prime_words_of(sentence)\n\
    \        local result = {}\n        for word in string.gmatch(sentence, \"[%w']+\"\
    ) do\n            prime_word = prime_word_of(word)\n            if prime_word\
    \ then\n                table.insert(result, prime_word)\n            end\n  \
    \      end\n        return result\n    end\n    return table.concat(prime_words_of(sentence),\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetos6beg.lua:49:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpetos6beg.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local result = ''\n    for word in sentence:gmatch('%w+') do\n    \
    \    local word_length = word:len()\n        for _, prime in ipairs(primes) do\n\
    \            if word_length == prime then\n                result = result ..\
    \ word .. ' '\n                break\n            end\n        end\n    end\n\
    \    return result:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- your code here\n  local words\
    \ = {}\n  for i in string.gmatch(sentence, \"[%a]+\") do\n    table.insert(words,\
    \ i)\n  end\n  local primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n  local res = {}\n  for i,\
    \ v in ipairs(words) do\n    for j, w in ipairs(primes) do\n      if string.len(v)\
    \ == w then\n        table.insert(res, v)\n      end\n    end\n  end\n  return\
    \ table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local new_sentence = {}\n    for\
    \ word in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n       \
    \     table.insert(new_sentence, word)\n        end\n    end\n    return table.concat(new_sentence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv97hkt_g.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpv97hkt_g.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpv97hkt_g.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local primes\
    \ = {}\n  local index = 0\n  local function isPrime(n)\n    if n == 1 then return\
    \ false end\n    if n == 2 then return true end\n    if n % 2 == 0 then return\
    \ false end\n    local m = math.sqrt(n)\n    for i = 3, m, 2 do\n      if n %\
    \ i == 0 then return false end\n    end\n    return true\n  end\n  for word in\
    \ sentence:gmatch('%S+') do\n    if isPrime(#word) then\n      words[#words +\
    \ 1] = word\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {\n        [2]\
    \ = true,\n        [3] = true,\n        [5] = true,\n        [7] = true,\n   \
    \     [11] = true,\n        [13] = true,\n        [17] = true,\n        [19] =\
    \ true,\n        [23] = true,\n        [29] = true,\n        [31] = true,\n  \
    \      [37] = true,\n        [41] = true,\n        [43] = true,\n        [47]\
    \ = true,\n        [53] = true,\n        [59] = true,\n        [61] = true,\n\
    \        [67] = true,\n        [71] = true,\n        [73] = true,\n        [79]\
    \ = true,\n        [83] = true,\n        [89] = true,\n        [97] = true,\n\
    \    }\n    local words = {}\n    for word in sentence:gmatch('%S+') do\n    \
    \    table.insert(words, word)\n    end\n    local output = {}\n    for _, word\
    \ in ipairs(words) do\n        if primes[#word] then\n            table.insert(output,\
    \ word)\n        end\n    end\n    return table.concat(output, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = function(n)\n\
    \        for i = 2, n - 1 do\n            if n % i == 0 then\n               \
    \ return false\n            end\n        end\n        return true\n    end\n \
    \   local words = string.split(sentence, ' ')\n    local answer = {}\n    for\
    \ _, word in ipairs(words) do\n        if is_prime(#word) then\n            table.insert(answer,\
    \ word)\n        end\n    end\n    return table.concat(answer, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpybf67nhr.lua:24:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpybf67nhr.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpybf67nhr.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       for i = 2, n - 1 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ words = {}\n    for word in sentence:gmatch('%w+') do\n        local length\
    \ = #word\n        if is_prime(length) then\n            table.insert(words, word)\n\
    \        end\n    end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9imldlio.lua:37:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp9imldlio.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = {}\n    for i\
    \ = 1, 100 do\n        is_prime[i] = true\n    end\n    for i = 2, #is_prime do\n\
    \        if is_prime[i] then\n            for j = i * 2, #is_prime, i do\n   \
    \             is_prime[j] = false\n            end\n        end\n    end\n   \
    \ local words = {}\n    for w in sentence:gmatch('%S+') do\n        table.insert(words,\
    \ w)\n    end\n    local result = {}\n    for _, w in ipairs(words) do\n     \
    \   if is_prime[#w] then\n            table.insert(result, w)\n        end\n \
    \   end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyqxde529.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpyqxde529.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local prime_lengths = {2, 3, 5,\
    \ 7}\n    local words = {}\n    for word in sentence:gmatch('%S+') do\n      \
    \  table.insert(words, word)\n    end\n    local primes = {}\n    for i, word\
    \ in ipairs(words) do\n        for _, prime in ipairs(prime_lengths) do\n    \
    \        if word:len() == prime then\n                table.insert(primes, word)\n\
    \            end\n        end\n    end\n    return table.concat(primes, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  return sentence:gsub('%S+', function(word)\n\
    \    if word:len() > 1 and word:match('^[aeiou]+$') then\n      return word\n\
    \    end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudk2z5ry.lua:26:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmpudk2z5ry.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n  local words = {}\n  for word in sentence:gmatch('%w+') do\n    table.insert(words,\
    \ word)\n  end\n  local result = {}\n  for _, word in ipairs(words) do\n    for\
    \ _, prime in ipairs(primes) do\n      if word:len() == prime then\n        table.insert(result,\
    \ word)\n      end\n    end\n  end\n  return table.concat(result, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tlocal result = {}\n\tfor word in\
    \ sentence:gmatch('%w+') do\n\t\tlocal length = word:len()\n\t\tif (length > 1)\
    \ and (length % 2 ~= 0) then\n\t\t\tlocal i = 3\n\t\t\twhile i * i <= length do\n\
    \t\t\t\tif length % i == 0 then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\ti = i +\
    \ 2\n\t\t\tend\n\t\t\tif i * i > length then\n\t\t\t\ttable.insert(result, word)\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsn5crynv.lua:38:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpsn5crynv.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       for i = 2, n - 1 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ out = {}\n    for word in sentence:gmatch('%w+') do\n        if is_prime(#word)\
    \ then\n            table.insert(out, word)\n        end\n    end\n    return\
    \ table.concat(out, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdbxonrf.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpkdbxonrf.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  if (type(sentence) ~= 'string')\
    \ then\n    return nil, 'Argument #1 should be a string'\n  end\n  local words\
    \ = {}\n  for word in sentence:gmatch('%S+') do\n    table.insert(words, word)\n\
    \  end\n  local result = {}\n  for _, word in ipairs(words) do\n    if (is_prime(#word))\
    \ then\n      table.insert(result, word)\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphr_340b4.lua:25:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmphr_340b4.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmphr_340b4.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        table.insert(words, word)\n    end\n \
    \   local result = {}\n    for _, word in ipairs(words) do\n        if _.is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd7qrfc11.lua:22:\
    \ attempt to index a number value (local '_')\nstack traceback:\n\t/tmp/tmpd7qrfc11.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpd7qrfc11.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local str = \"\"\n    local words\
    \ = {}\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(words,\
    \ word)\n    end\n    for _, word in ipairs(words) do\n        if is_prime(word:len())\
    \ then\n            str = str .. word .. \" \"\n        end\n    end\n    return\
    \ str:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl__ltz82.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpl__ltz82.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpl__ltz82.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    return join_string(filter(is_prime,\
    \ split_string(sentence, \" \")))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6y9ih7j.lua:16:\
    \ attempt to call a nil value (global 'split_string')\nstack traceback:\n\t/tmp/tmpp6y9ih7j.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpp6y9ih7j.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        local l = #word\n        if l > 1 then\n\
    \            for i = 2, l - 1 do\n                if l % i == 0 then\n       \
    \             goto continue\n                end\n            end\n          \
    \  table.insert(result, word)\n        end\n        ::continue::\n    end\n  \
    \  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- split sentence by space into\
    \ words\n    local words = utils.split(sentence, ' ')\n    -- find words whose\
    \ length is prime\n    local prime_words = {}\n    for _, word in ipairs(words)\
    \ do\n        if utils.is_prime(#word) then\n            table.insert(prime_words,\
    \ word)\n        end\n    end\n    -- rejoin words with space\n    return table.concat(prime_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc3goq5o4.lua:17:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpc3goq5o4.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpc3goq5o4.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(num)\n\
    \        for i = 2, num - 1 do\n            if num % i == 0 then\n           \
    \     return false\n            end\n        end\n        return true\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm5ffpisx.lua:37: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tlocal primes = {}\n\tlocal words\
    \ = {}\n\tfor i = 1, 100 do\n\t\tlocal isPrime = true\n\t\tfor j = 2, math.floor(i/2)\
    \ do\n\t\t\tif i % j == 0 then\n\t\t\t\tisPrime = false\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\tif isPrime then\n\t\t\tprimes[i] = true\n\t\tend\n\tend\n\t\n\
    \tfor word in sentence:gmatch(\"[%w]+\") do\n\t\tif primes[#word] then\n\t\t\t\
    table.insert(words, word)\n\t\tend\n\tend\n\t\n\treturn table.concat(words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9fbpc3y.lua:43:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpm9fbpc3y.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = string.split(sentence,\
    \ ' ')\n    local result = {}\n    for _, word in ipairs(words) do\n        if\
    \ is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wr8blvk.lua:16:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2wr8blvk.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp2wr8blvk.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = require \"code.math\"\
    .is_prime\n    local words = {}\n    for word in sentence:gmatch(\"%S+\") do\n\
    \        if is_prime(#word) then\n            table.insert(words, word)\n    \
    \    end\n    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ooq8kct.lua:16:\
    \ module 'code.math' not found:\n\tno field package.preload['code.math']\n\tno\
    \ file '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/code/math.lua'\n\tno file\
    \ '/home/a.guha/.conda/envs/polyglot/share/lua/5.4/code/math/init.lua'\n\tno file\
    \ '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/code/math.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/code/math/init.lua'\n\
    \tno file './code/math.lua'\n\tno file './code/math/init.lua'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/code/math.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './code/math.so'\n\tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/code.so'\n\
    \tno file '/home/a.guha/.conda/envs/polyglot/lib/lua/5.4/loadall.so'\n\tno file\
    \ './code.so'\nstack traceback:\n\t/tmp/tmp1ooq8kct.lua:16: in local 'candidate'\n\
    \t/tmp/tmp1ooq8kct.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.020\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61yhlsu2.lua:21:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmp61yhlsu2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local index\
    \ = 1\n  while index <= #words do\n    local is_prime = true\n    for i = 2, words[index]:len()\
    \ - 1 do\n      if words[index]:len() % i == 0 then\n        is_prime = false\n\
    \        break\n      end\n    end\n    if not is_prime then\n      table.remove(words,\
    \ index)\n    else\n      index = index + 1\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz2_8t2l.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpuz2_8t2l.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  return sentence:gsub(\"%w+\", function(x)\n\
    \    if is_prime(#x) then\n      return x\n    else\n      return \"\"\n    end\n\
    \  end):gsub(\"%s+\", \" \"):gsub(\"^%s+\", \"\"):gsub(\"%s+$\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxp00obk1.lua:17:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpxp00obk1.lua:17:\
    \ in function </tmp/tmpxp00obk1.lua:16>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpxp00obk1.lua:16: in local 'candidate'\n\t/tmp/tmpxp00obk1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local s\
    \ = {}\n    for w in sentence:gmatch(\"%w+\") do\n        table.insert(s, w)\n\
    \    end\n    local ans = {}\n    for i,v in ipairs(s) do\n        local l = string.len(v)\n\
    \        local ok = true\n        for j = 2, l-1 do\n            if l % j == 0\
    \ then\n                ok = false\n                break\n            end\n \
    \       end\n        if ok then\n            table.insert(ans, v)\n        end\n\
    \    end\n    return table.concat(ans, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu5hiyxp_.lua:41:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpu5hiyxp_.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local result\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    words[#words + 1] = word\n\
    \  end\n  for index, word in ipairs(words) do\n    if is_prime(#word) then\n \
    \     result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1sv_3cu.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpq1sv_3cu.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpq1sv_3cu.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('[%w]+') do\n    table.insert(words, word)\n  end\n  local result\
    \ = {}\n  for i, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(result, word)\n    end\n  end\n  return table.concat(result, '\
    \ ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmeaaefom.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmeaaefom.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpmeaaefom.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n\tlocal words = {}\n\tfor word in\
    \ sentence:gmatch(\"%w+\") do\n\t\ttable.insert(words, word)\n\tend\n\tlocal answer\
    \ = {}\n\tfor _, word in ipairs(words) do\n\t\tif is_prime(#word) then\n\t\t\t\
    table.insert(answer, word)\n\t\tend\n\tend\n\treturn table.concat(answer, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpifjul76z.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpifjul76z.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpifjul76z.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local words\
    \ = sentence:split(' ')\n    local result = {}\n    for i, word in ipairs(words)\
    \ do\n        if is_prime(#word) then\n            table.insert(result, word)\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgy5zscme.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpgy5zscme.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpgy5zscme.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local results = {}\n    for w\
    \ in sentence:gmatch('%S+') do\n        if is_prime(#w) then\n            table.insert(results,\
    \ w)\n        end\n    end\n    return table.concat(results, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpamte5wdu.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpamte5wdu.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpamte5wdu.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local sentence = sentence:split('\
    \ ')\n  local function is_prime(number)\n    if number <= 1 then\n      return\
    \ false\n    end\n    for i = 2, number - 1 do\n      if number % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  local primes\
    \ = {}\n  for i, value in ipairs(sentence) do\n    if is_prime(#value) then\n\
    \      table.insert(primes, value)\n    end\n  end\n  return table.concat(primes,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc9al8fs.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpsc9al8fs.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpsc9al8fs.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local res = {}\n  local t = split(sentence,\
    \ ' ')\n  for i = 1, #t do\n    if is_prime(#t[i]) then\n      table.insert(res,\
    \ t[i])\n    end\n  end\n  return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt4awxbd_.lua:17:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpt4awxbd_.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpt4awxbd_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  if not sentence then return nil\
    \ end\n  local count = {}\n  local tmp = sentence:lower():gsub('[^%a]', '')\n\
    \  for l in tmp:gmatch'.' do\n    count[l] = (count[l] or 0) + 1\n  end\n  local\
    \ function is_prime(n)\n    local m = math.sqrt(n)\n    for i = 2, m do\n    \
    \  if n % i == 0 then return false end\n    end\n    return true\n  end\n  local\
    \ tmp_tbl = {}\n  for w in sentence:gmatch'%S+' do\n    tmp_tbl[#tmp_tbl + 1]\
    \ = w\n  end\n  local function word_check(w)\n    local len = #w\n    if len ==\
    \ 1 then return count[w:lower()] == 1 end\n    if not is_prime(len) then return\
    \ false end\n    local c = {}\n    for l in w:lower():gmatch'.' do\n      c[l]\
    \ = (c[l] or 0) + 1\n    end\n    for k, v in pairs(c) do\n      if v > count[k]\
    \ then return false end\n    end\n    return true\n  end\n  local ret = {}\n \
    \ for i = 1, #tmp_tbl do\n    if word_check(tmp_tbl[i]) then\n      ret[#ret +\
    \ 1] = tmp_tbl[i]\n    end\n  end\n  return table.concat(ret, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxidwvcfr.lua:58:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpxidwvcfr.lua:58:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       -- 1 is not prime.\n        if n == 1 then\n            return false\n\
    \        end\n        -- The only even prime is 2.\n        if n == 2 then\n \
    \           return true\n        end\n        -- All primes are odd.\n       \
    \ if n % 2 == 0 then\n            return false\n        end\n        -- We only\
    \ need to check up to sqrt(n).\n        local max = math.floor(math.sqrt(n))\n\
    \        for i = 3, max, 2 do\n            if n % i == 0 then\n              \
    \  return false\n            end\n        end\n        return true\n    end\n\
    \    local result = {}\n    for word in sentence:gmatch('%w+') do\n        if\
    \ is_prime(#word) then\n            table.insert(result, word)\n        end\n\
    \    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local t = {}\n  local s = ''\n \
    \ for word in sentence:gmatch('[%a]+') do\n    local l = #word\n    local is_prime\
    \ = true\n    for i = 2, l - 1 do\n      if l % i == 0 then\n        is_prime\
    \ = false\n        break\n      end\n    end\n    if is_prime then\n      table.insert(t,\
    \ word)\n    end\n  end\n  for _, word in ipairs(t) do\n    s = s .. word .. '\
    \ '\n  end\n  return s:gsub('%s$', '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzenn8yj.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmptzenn8yj.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if is_prime(#word) then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result, ' ')\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf3q6di9j.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpf3q6di9j.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpf3q6di9j.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(number)\n\
    \        local flag = true\n        if number ~= 2 then\n            if number\
    \ == 1 or number % 2 == 0 then\n                flag = false\n            else\n\
    \                for x = 3, number / 2, 2 do\n                    if number %\
    \ x == 0 then\n                        flag = false\n                        break\n\
    \                    end\n                end\n            end\n        end\n\
    \        return flag\n    end\n    local words = sentence:split(' ')\n    local\
    \ new_sentence = {}\n    for _, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(new_sentence, word)\n        end\n    end\n \
    \   return table.concat(new_sentence, ' ')\nend\nreturn words_in_sentence\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph92rwptp.lua:42: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = {}\n    for word\
    \ in sentence:gmatch('%w+') do\n        if word:len() > 1 and prime.is_prime(word:len())\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmo2jl47t.lua:18:\
    \ attempt to index a nil value (global 'prime')\nstack traceback:\n\t/tmp/tmpmo2jl47t.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpmo2jl47t.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for w in\
    \ sentence:gmatch('%S+') do\n        if is_prime(#w) then\n            table.insert(words,\
    \ w)\n        end\n    end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvlw34kf.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmphvlw34kf.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmphvlw34kf.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = {}\n    for i\
    \ = 2, 100 do\n        is_prime[i] = true\n    end\n    for i = 2, 100 do\n  \
    \      if is_prime[i] then\n            for j = i + i, 100, i do\n           \
    \     is_prime[j] = false\n            end\n        end\n    end\n    local words\
    \ = {}\n    for w in sentence:gmatch('%w+') do\n        words[#words + 1] = w\n\
    \    end\n    local res = {}\n    for _, w in ipairs(words) do\n        if is_prime[#w]\
    \ then\n            res[#res + 1] = w\n        end\n    end\n    return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n    local words = {}\n    for word in sentence:gmatch('%S+') do\n     \
    \   local length = #word\n        if table.contains(primes, length) then\n   \
    \         table.insert(words, word)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbd_yqpyv.lua:20:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpbd_yqpyv.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpbd_yqpyv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local prime_words = {}\n    local\
    \ function is_prime(n)\n        local d = 2\n        while d < n do\n        \
    \    if n % d == 0 then\n                return false\n            end\n     \
    \       d = d + 1\n        end\n        return true\n    end\n    for word in\
    \ sentence:gmatch('%S+') do\n        if is_prime(#word) then\n            table.insert(prime_words,\
    \ word)\n        end\n    end\n    return table.concat(prime_words, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio1krati.lua:38:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpio1krati.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local rez = {}\n    for word in\
    \ sentence:gmatch('%S+') do\n        if is_prime(#word) then\n            table.insert(rez,\
    \ word)\n        end\n    end\n    return table.concat(rez, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyv0ai56x.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpyv0ai56x.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpyv0ai56x.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    table.insert(words, word)\n  end\n  local new_sentence\
    \ = {}\n  for i, word in ipairs(words) do\n    if is_prime(#word) then\n     \
    \ table.insert(new_sentence, word)\n    end\n  end\n  return table.concat(new_sentence,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2r5_2s3.lua:22:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpn2r5_2s3.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpn2r5_2s3.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ for i = 2, n - 1 do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  local result = {}\n  for word in sentence:gmatch('%w+')\
    \ do\n    if is_prime(#word) then\n      table.insert(result, word)\n    end\n\
    \  end\n  return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze9p_j2m.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpze9p_j2m.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = ''\n    for word\
    \ in sentence:gmatch('%w+') do\n        if lib.is_prime(#word) then\n        \
    \    result = result .. word .. ' '\n        end\n    end\n    return result:sub(1,\
    \ -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpheutu5mj.lua:18:\
    \ attempt to index a nil value (global 'lib')\nstack traceback:\n\t/tmp/tmpheutu5mj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpheutu5mj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n == 2 then return true end\n    for i = 2, math.sqrt(n) do\n      if n %\
    \ i == 0 then return false end\n    end\n    return true\n  end\n  local words\
    \ = {}\n  for word in sentence:gmatch('%w+') do\n    if is_prime(#word) then\n\
    \      table.insert(words, word)\n    end\n  end\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgtn5737n.lua:35:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpgtn5737n.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local prime_numbers = {2, 3, 5,\
    \ 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97}\n  local new_sentence = ''\n  for word in sentence:gmatch('%a+') do\n\
    \    if table.contains(prime_numbers, #word) then\n      new_sentence = new_sentence..'\
    \ '..word\n    end\n  end\n  return new_sentence:sub(2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplt_j3juh.lua:19:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmplt_j3juh.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmplt_j3juh.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    return table.concat(table.select(sentence:gmatch('%w+'),\
    \ is_prime_number), ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt8e2xjdv.lua:16:\
    \ attempt to call a nil value (field 'select')\nstack traceback:\n\t/tmp/tmpt8e2xjdv.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpt8e2xjdv.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local primes\
    \ = {}\n  for i = 2, #sentence do\n    local flag = true\n    for j = 2, i - 1\
    \ do\n      if i % j == 0 then\n        flag = false\n        break\n      end\n\
    \    end\n    if flag then\n      table.insert(primes, i)\n    end\n  end\n  for\
    \ word in sentence:gmatch('%w+') do\n    if primes[#word] then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrs9ysk1.lua:41:\
    \ expected: \"is\"\nactual: \"This is a test\"\nstack traceback:\n\t/tmp/tmphrs9ysk1.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- find the words, whose lengths\
    \ are prime numbers\n    -- your code here\n    return\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgc_4mgws.lua:24:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpgc_4mgws.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(number)\n\
    \        if number < 2 then\n            return false\n        end\n        for\
    \ i = 2, number - 1 do\n            if number % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ words = {}\n    for w in sentence:gmatch('%w+') do\n        if is_prime(#w)\
    \ then\n            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:gmatch('[^%s]+')\n\
    \    local result = {}\n    for word in words do\n        if is_prime(#word) then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmjknpnjf.lua:19:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpmjknpnjf.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmjknpnjf.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- TODO: implement your code here\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a test'),\
    \ 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n  \
    \  lu.assertEquals(candidate('there is no place available here'), 'there is no\
    \ place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp07yhpm22.lua:23:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp07yhpm22.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = {}\n    for i =\
    \ 2, 16 do\n        if is_prime(i) then\n            primes[#primes + 1] = i\n\
    \        end\n    end\n    local result = {}\n    for word in sentence:gmatch('%w+')\
    \ do\n        if primes[#word] then\n            result[#result + 1] = word\n\
    \        end\n    end\n    return table.concat(result, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpic9mg2_2.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpic9mg2_2.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpic9mg2_2.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local function\
    \ is_prime(n)\n        local max = math.floor(math.sqrt(n))\n        for i = 2,\
    \ max do\n            if n % i == 0 then\n                return false\n     \
    \       end\n        end\n        return true\n    end\n    local words = {}\n\
    \    for w in sentence:gmatch('%w+') do\n        table.insert(words, w)\n    end\n\
    \    local result = {}\n    for i, w in ipairs(words) do\n        if is_prime(#w)\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcof0qg5.lua:42:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmppcof0qg5.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local res = {}\n    for word in\
    \ sentence:gmatch('%S+') do\n        local n = #word\n        if n > 1 then\n\
    \            local is_prime = true\n            for d = 2, n - 1 do\n        \
    \        if n % d == 0 then\n                    is_prime = false\n          \
    \          break\n                end\n            end\n            if is_prime\
    \ then\n                table.insert(res, word)\n            end\n        end\n\
    \    end\n    return table.concat(res, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local dict = {}\n  for w in sentence:gmatch('%S+')\
    \ do\n    dict[#w] = dict[#w] or true\n  end\n  local function is_prime(n)\n \
    \   if n == 1 then return false end\n    for i = 2, math.floor(math.sqrt(n)) do\n\
    \      if n % i == 0 then return false end\n    end\n    return true\n  end\n\
    \  local res = {}\n  for n in pairs(dict) do\n    if is_prime(n) then\n      res[#res\
    \ + 1] = n\n    end\n  end\n  local final = {}\n  for w in sentence:gmatch('%S+')\
    \ do\n    for _, n in ipairs(res) do\n      if #w == n then\n        final[#final\
    \ + 1] = w\n      end\n    end\n  end\n  return table.concat(final, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local prime_words = {}\n  local\
    \ str = ''\n  local function is_prime(word)\n    if #word < 2 then\n      return\
    \ false\n    end\n    for i = 2, #word - 1 do\n      if #word % i == 0 then\n\
    \        return false\n      end\n    end\n    return true\n  end\n  for word\
    \ in sentence:gmatch('%w+') do\n    if is_prime(word) then\n      prime_words[#prime_words\
    \ + 1] = word\n    end\n  end\n  for i = 1, #prime_words do\n    str = str ..\
    \ prime_words[i] .. ' '\n  end\n  return str:sub(1, -2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function count_letters(word)\n\
    \        return word:gsub('[^a-zA-Z]', ''):len()\n    end\n    local function\
    \ is_prime(n)\n        if n == 1 then\n            return false\n        end\n\
    \        if n == 2 then\n            return true\n        end\n        if n %\
    \ 2 == 0 then\n            return false\n        end\n        for i = 3, math.sqrt(n),\
    \ 2 do\n            if n % i == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    local words = {}\n \
    \   for word in sentence:gmatch('%S+') do\n        if is_prime(count_letters(word))\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local function\
    \ is_prime(n)\n        if n <= 1 then\n            return false\n        end\n\
    \        for i = 2, math.floor(math.sqrt(n)) do\n            if n % i == 0 then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    for w in sentence:gmatch('%w+') do\n        if is_prime(#w) then\n\
    \            table.insert(words, w)\n        end\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- \u044D\u0442\u0430 \u0444\u0443\
    \u043D\u043A\u0446\u0438\u044F \u043F\u0440\u0438\u043D\u0438\u043C\u0430\u0435\
    \u0442 \u043F\u0440\u0435\u0434\u043B\u043E\u0436\u0435\u043D\u0438\u0435 \u0438\
    \ \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u043B\u043E\
    \u0432\u0430 \u0432 \u043D\u0435\u043C, \u0434\u043B\u0438\u043D\u0430 \u043A\u043E\
    \u0442\u043E\u0440\u044B\u0445 \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F\
    \ \u043F\u0440\u043E\u0441\u0442\u044B\u043C \u0447\u0438\u0441\u043B\u043E\u043C\
    ,\n    -- \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0442\u043E\
    \u043B\u044C\u043A\u043E \u043F\u0435\u0440\u0432\u043E\u0435 \u0441\u043B\u043E\
    \u0432\u043E, \u0435\u0441\u043B\u0438 \u0432 \u043F\u0440\u0435\u0434\u043B\u043E\
    \u0436\u0435\u043D\u0438\u0438 \u043E\u0434\u043D\u043E \u0441\u043B\u043E\u0432\
    \u043E \u0434\u043B\u0438\u043D\u043E\u0439, \u043A\u043E\u0442\u043E\u0440\u043E\
    \u0435 \u044F\u0432\u043B\u044F\u0435\u0442\u0441\u044F \u043F\u0440\u043E\u0441\
    \u0442\u044B\u043C \u0447\u0438\u0441\u043B\u043E\u043C\n    local words = {}\n\
    \    local prime = {}\n    local result = {}\n    local j = 1\n    local count\
    \ = 0\n    sentence = sentence:gsub('%s+', ' ')\n    if sentence:len() == 1 then\
    \ return sentence end\n    sentence = sentence:gsub('%s+$', '')\n    for i in\
    \ sentence:gmatch('%S+') do\n        words[j] = i\n        j = j + 1\n    end\n\
    \    for i = 1, #words do\n        if words[i]:len() > 1 then\n            local\
    \ flag = true\n            for j = 2, math.floor(words[i]:len() ^ 0.5) do\n  \
    \              if words[i]:len() % j == 0 then\n                    flag = false\n\
    \                    break\n                end\n            end\n           \
    \ if flag then\n                prime[#prime + 1] = words[i]\n            end\n\
    \        end\n    end\n    if #prime == 0 then return '' end\n    for i = 1, #prime\
    \ do\n        if count ~= 0 then\n            result[#result + 1] = ' '\n    \
    \    end\n        result[#result + 1] = prime[i]\n        count = count + 1\n\
    \    end\n    return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    for w in\
    \ sentence:gmatch(\"%w+\") do\n        table.insert(words, w)\n    end\n    local\
    \ primes = {}\n    for i = 2, sentence:len() do\n        local is_prime = true\n\
    \        for j = 2, i do\n            if i % j == 0 and i ~= j then\n        \
    \        is_prime = false\n                break\n            end\n        end\n\
    \        if is_prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = \"\"\n    for _, w in ipairs(words) do\n        for\
    \ _, p in ipairs(primes) do\n            if w:len() == p then\n              \
    \  result = result .. w .. \" \"\n            end\n        end\n    end\n    return\
    \ result:sub(1, -2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    sentence = sentence:lower()\n\
    \    local words = {}\n    for w in sentence:gmatch('%S+') do\n        table.insert(words,\
    \ w)\n    end\n    local solution = {}\n    for _, word in ipairs(words) do\n\
    \        if is_prime(#word) then\n            table.insert(solution, word)\n \
    \       end\n    end\n    return table.concat(solution, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnih6sat1.lua:23:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpnih6sat1.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpnih6sat1.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    sentence = sentence:gsub(' ',\
    \ '|')\n    local substrings = split(sentence, '|')\n    local prime_words = {}\n\
    \    for _, substring in ipairs(substrings) do\n        if is_prime(#substring)\
    \ then\n            table.insert(prime_words, substring)\n        end\n    end\n\
    \    return table.concat(prime_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_vp1ekrw.lua:17:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp_vp1ekrw.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp_vp1ekrw.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local result = {}\n    for token\
    \ in sentence:gmatch(\"%S+\") do\n        local len = #token\n        if len >\
    \ 1 then\n            for i = 2, len - 1 do\n                if len % i == 0 then\n\
    \                    goto continue\n                end\n            end\n   \
    \         table.insert(result, token)\n        end\n        ::continue::\n   \
    \ end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local res\
    \ = {}\n    for word in sentence:gmatch(\"%S+\") do\n        if #word > 1 then\n\
    \            local count = 0\n            for i = 1,#word do\n               \
    \ count = count + 1\n            end\n            if count % 2 ~= 0 then\n   \
    \             table.insert(res, word)\n            end\n        end\n    end\n\
    \    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg686hw33.lua:35:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpg686hw33.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- your code here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwrw6iz6.lua:22:\
    \ expected: \"is\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqwrw6iz6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    words[#words + 1] = word\n  end\n  local result\
    \ = {}\n  for i = 1, #words do\n    local word = words[i]\n    local is_prime\
    \ = true\n    for j = 2, word:len() - 1 do\n      if word:len() % j == 0 then\n\
    \        is_prime = false\n        break\n      end\n    end\n    if is_prime\
    \ then\n      result[#result + 1] = word\n    end\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpouf8zvu6.lua:40:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpouf8zvu6.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local primes = {2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97}\n  local words = {}\n  for word in sentence:gmatch('%S+') do\n    for _,\
    \ prime in ipairs(primes) do\n      if #word == prime then\n        table.insert(words,\
    \ word)\n      end\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words, res = split(sentence,\
    \ ' '), {}\n  for _, word in ipairs(words) do\n    if is_prime(#word) then\n \
    \     table.insert(res, word)\n    end\n  end\n  return table.concat(res, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpumymg6oh.lua:16:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpumymg6oh.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpumymg6oh.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    -- your code here\n    local words\
    \ = sentence:split(\" \")\n    local word_list = {}\n    for _, word in ipairs(words)\
    \ do\n        if is_prime(word:len()) then\n            table.insert(word_list,\
    \ word)\n        end\n    end\n    return table.concat(word_list, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpttf1puh3.lua:17:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpttf1puh3.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpttf1puh3.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       for i = 2, n - 1 do\n            if n % i == 0 then\n                return\
    \ false\n            end\n        end\n        return true\n    end\n    local\
    \ words = {}\n    for word in sentence:gmatch('%S+') do\n        if is_prime(#word)\
    \ then\n            table.insert(words, word)\n        end\n    end\n    return\
    \ table.concat(words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx21nqr5.lua:36:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpqx21nqr5.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  for word in\
    \ sentence:gmatch('%w+') do\n    if is_prime(#word) then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6azwh7vc.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp6azwh7vc.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp6azwh7vc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local words = {}\n  local primes\
    \ = {}\n  local result = {}\n  local limit = string.len(sentence)\n  local whitespace\
    \ = string.find(sentence, '%s')\n  local prev = 0\n  while whitespace do\n   \
    \ words[#words + 1] = string.sub(sentence, prev, whitespace - 1)\n    prev = whitespace\
    \ + 1\n    whitespace = string.find(sentence, '%s', prev)\n  end\n  words[#words\
    \ + 1] = string.sub(sentence, prev, limit)\n  for i = 1, #words do\n    if words[i]\
    \ == '' then\n      goto continue\n    end\n    local prime = true\n    for j\
    \ = 2, math.sqrt(#words[i]) do\n      if #words[i] % j == 0 then\n        prime\
    \ = false\n        break\n      end\n    end\n    if prime then\n      result[#result\
    \ + 1] = words[i]\n    end\n    ::continue::\n  end\n  return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoibcrzif.lua:50:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmpoibcrzif.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local is_prime = {\n    [2] = true,\n\
    \    [3] = true,\n    [5] = true,\n    [7] = true,\n    [11] = true,\n    [13]\
    \ = true,\n    [17] = true,\n    [19] = true,\n    [23] = true,\n    [29] = true,\n\
    \    [31] = true,\n    [37] = true,\n    [41] = true,\n    [43] = true,\n    [47]\
    \ = true,\n    [53] = true,\n    [59] = true,\n    [61] = true,\n    [67] = true,\n\
    \    [71] = true,\n    [73] = true,\n    [79] = true,\n    [83] = true,\n    [89]\
    \ = true,\n    [97] = true,\n  }\n  local s = {}\n  for w in sentence:gmatch('%S+')\
    \ do\n    if is_prime[#w] then\n      s[#s + 1] = w\n    end\n  end\n  return\
    \ table.concat(s, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(number)\n\
    \    local function is_prime_recursive(number, current_divisor)\n      if number\
    \ == current_divisor then\n        return true\n      end\n      if number % current_divisor\
    \ == 0 then\n        return false\n      end\n      return is_prime_recursive(number,\
    \ current_divisor + 1)\n    end\n    return is_prime_recursive(number, 2)\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxu9tagl5.lua:41: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split('\
    \ ')\n    local result = {}\n    for _, w in ipairs(words) do\n        if is_prime(#w)\
    \ then\n            table.insert(result, w)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfjzdm4oz.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpfjzdm4oz.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpfjzdm4oz.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  -- your code here\n  local words\
    \ = {}\n  for word in sentence:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  local ret = {}\n  for i, word in ipairs(words) do\n    if isPrime(#word)\
    \ then\n      table.insert(ret, word)\n    end\n  end\n  return table.concat(ret,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn_qjs04l.lua:23:\
    \ attempt to call a nil value (global 'isPrime')\nstack traceback:\n\t/tmp/tmpn_qjs04l.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpn_qjs04l.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = sentence:split('\
    \ ')\n    local result = {}\n    for i, word in ipairs(words) do\n        if is_prime(#word)\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozwl_tfy.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpozwl_tfy.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpozwl_tfy.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local words = {}\n    local t_words\
    \ = {};\n    local primes = {};\n    local sent = sentence;\n    local cnt = 0;\n\
    \    local cntr = 0;\n    local start_counter = 0;\n    local end_counter = 0;\n\
    \    local arr = {};\n    local char = 0;\n    local t = 0;\n    local match =\
    \ 0;\n    local result = '';\n    local cnt_first = 0;\n    local count = 0;\n\
    \    local char = nil;\n    local first_char = nil;\n    for j = 1, #sentence\
    \ do\n        char = string.sub(sentence, j, j);\n        if char == ' ' then\n\
    \            t = tonumber(string.sub(sentence, start_counter, end_counter));\n\
    \            table.insert(arr, t);\n            start_counter = j + 1;\n     \
    \       end_counter = j;\n        else\n            end_counter = end_counter\
    \ + 1;\n        end\n    end\n    t = tonumber(string.sub(sentence, start_counter,\
    \ end_counter));\n    table.insert(arr, t);\n    for k = 1, #arr do\n        match\
    \ = 0;\n        cnt = arr[k];\n        for i = 2, cnt - 1 do\n            if cnt\
    \ % i == 0 then\n                match = 1;\n                break;\n        \
    \    end\n        end\n        if match == 0 then\n            table.insert(primes,\
    \ cnt);\n        end\n    end\n    for i = 1, #primes do\n        for j = 1, #sentence\
    \ do\n            first_char = string.sub(sentence, j, j);\n            cnt_first\
    \ = tonumber(first_char);\n            if cnt_first == primes[i] then\n      \
    \          cntr = 1;\n                while true do\n                    count\
    \ = count + 1;\n                    char = string.sub(sentence, j + cntr, j +\
    \ cntr);\n                    if char == ' ' then\n                        break;\n\
    \                    end\n                    if count > #sentence then\n    \
    \                    break;\n                    end\n                    cntr\
    \ = cntr + 1;\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxxipo636.lua:88: ''end'' expected (to close ''while'' at line
    65) near <eof>

    '
  stdout: ''
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local primes = { 2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97 }\n    local sentence = sentence:gsub('[^%a ]', '')\n    local words = {}\n\
    \    for word in sentence:gmatch('%a+') do\n        words[#words + 1] = word\n\
    \    end\n    local result = {}\n    for _, word in ipairs(words) do\n       \
    \ if word:len() % 2 == 1 and primes[word:len()] then\n            result[#result\
    \ + 1] = word\n        end\n    end\n    return table.concat(result, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9hvbvbw.lua:34:\
    \ expected: \"is\"\nactual: \"a\"\nstack traceback:\n\t/tmp/tmpg9hvbvbw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    sentence = sentence:match('^%s*(.-)%s*$')\n\
    \    local primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 }\n    local result = {}\n    for word\
    \ in sentence:gmatch('%S+') do\n        local len = word:len()\n        for i\
    \ = 1, #primes do\n            if len == primes[i] then\n                table.insert(result,\
    \ word)\n                break\n            end\n        end\n    end\n    return\
    \ table.concat(result, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = words_in_sentence\n    lu.assertEquals(candidate('This is a\
    \ test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n\
    \    lu.assertEquals(candidate('there is no place available here'), 'there is\
    \ no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    return table.concat(\n       \
    \ table.filter(\n            table.map(\n                table.split(sentence,\
    \ ' '),\n                function(w) return string.len(w) end\n            ),\n\
    \            function(l) return is_prime(l) end\n        ),\n        ' '\n   \
    \ )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbivzxmo7.lua:19:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpbivzxmo7.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpbivzxmo7.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local function is_prime(n)\n \
    \       if n == 2 then\n            return true\n        end\n        if n % 2\
    \ == 0 then\n            return false\n        end\n        for d = 3, math.sqrt(n),\
    \ 2 do\n            if n % d == 0 then\n                return false\n       \
    \     end\n        end\n        return true\n    end\n    local result = {}\n\
    \    for s in sentence:gmatch('%w+') do\n        if is_prime(#s) then\n      \
    \      table.insert(result, s)\n        end\n    end\n    return table.concat(result,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96c95_0z.lua:42:\
    \ expected: \"is\"\nactual: \"is a\"\nstack traceback:\n\t/tmp/tmp96c95_0z.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local is_prime = {}\n    for i\
    \ = 2, 100 do\n        is_prime[i] = true\n    end\n    for i = 2, 10 do\n   \
    \     for j = i * 2, 100, i do\n            is_prime[j] = false\n        end\n\
    \    end\n    return table.concat(\n        {\n            string.match(\n   \
    \             sentence,\n                '\\f\\v([' .. R 'az' .. ']+)[' .. R '\
    \ \t' .. ']+'\n            )\n        },\n        ' '\n    )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52masrk_.lua:29:\
    \ attempt to call a nil value (global 'R')\nstack traceback:\n\t/tmp/tmp52masrk_.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmp52masrk_.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 0
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local function is_prime(n)\n   \
    \ if n == 2 then return true end\n    if n < 2 or n % 2 == 0 then return false\
    \ end\n    for i = 3, math.sqrt(n), 2 do\n      if n % i == 0 then return false\
    \ end\n    end\n    return true\n  end\n  local res = {}\n  for v in sentence:gmatch('[%w]+')\
    \ do\n    if is_prime(#v) then table.insert(res, v) end\n  end\n  return table.concat(res,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = words_in_sentence\n    lu.assertEquals(candidate('This is a test'), 'is')\n\
    \    lu.assertEquals(candidate('lets go for swimming'), 'go for')\n    lu.assertEquals(candidate('there\
    \ is no place available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi\
    \ I am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    return string.gsub(sentence, \"\
    %a+\", function(w)\n        if w:len() > 1 then\n            local is_prime =\
    \ true\n            for i = 2, w:len() - 1 do\n                if w:len() % i\
    \ == 0 then\n                    is_prime = false\n                    break\n\
    \                end\n            end\n            if is_prime then\n        \
    \        return w\n            end\n        end\n        return ''\n    end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
    \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
    \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
    \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I\
    \ am Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'),\
    \ 'go for it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
    \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrdqui6o.lua:36:\
    \ expected: \"is\"\nactual: \" is  \"\nstack traceback:\n\t/tmp/tmpmrdqui6o.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local w = {}\n    local len =\
    \ 0\n    for word in sentence:gmatch(\"%w+\") do\n        table.insert(w, word)\n\
    \        len = len + 1\n    end\n    local res = {}\n    for i=1, len do\n   \
    \     if is_prime(#w[i]) then\n            table.insert(res, w[i])\n        end\n\
    \    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuiwdk_0j.lua:24:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmpuiwdk_0j.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpuiwdk_0j.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n    local t = {}\n    for w in sentence:gmatch(\"\
    %w+\") do\n        if is_prime(#w) then\n            table.insert(t, w)\n    \
    \    end\n    end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ewnf8er.lua:18:\
    \ attempt to call a nil value (global 'is_prime')\nstack traceback:\n\t/tmp/tmp1ewnf8er.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp1ewnf8er.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978364
- exit_code: 1
  program: "-- You are given a string representing a sentence,\n-- the sentence contains\
    \ some words separated by a space,\n-- and you have to return a string that contains\
    \ the words from the original sentence,\n-- whose lengths are prime numbers,\n\
    -- the order of the words in the new string should be the same as the original\
    \ one.\n-- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n--\
    \ Example 2:\n-- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n\
    -- Constraints:\n-- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\n\
    local function words_in_sentence(sentence)\n  local res = ''\n  for w in sentence:gmatch('%S+')\
    \ do\n    if w:len() > 1 and w:len() % 2 ~= 0 then\n      res = res .. ' ' ..\
    \ w\n    end\n  end\n  return res:sub(2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = words_in_sentence\n    lu.assertEquals(candidate('This\
    \ is a test'), 'is')\n    lu.assertEquals(candidate('lets go for swimming'), 'go\
    \ for')\n    lu.assertEquals(candidate('there is no place available here'), 'there\
    \ is no place')\n    lu.assertEquals(candidate('Hi I am Hussein'), 'Hi am Hussein')\n\
    \    lu.assertEquals(candidate('go for it'), 'go for it')\n    lu.assertEquals(candidate('here'),\
    \ '')\n    lu.assertEquals(candidate('here is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4z98yakj.lua:28:\
    \ expected: \"is\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp4z98yakj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978364
