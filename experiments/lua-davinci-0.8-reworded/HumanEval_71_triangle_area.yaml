name: HumanEval_71_triangle_area
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return the area of\n\
  -- the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n-- Otherwise return -1\n-- Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n-- than the third side.\n-- Example:\n-- >>> triangle_area(3,\
  \ 4, 5)\n-- 6.0\n-- >>> triangle_area(1, 2, 10)\n-- -1\nlocal function triangle_area(a,\
  \ b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
  \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
  \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    -- code here\nend", "    -- check if the three sides form a valid\
    \ triangle\n    if a + b > c and a + c > b and b + c > a then\n        -- calculate\
    \ the area of the triangle\n        local p = (a + b + c) / 2\n        local area\
    \ = math.sqrt(p * (p - a) * (p - b) * (p - c))\n        -- return the area rounded\
    \ to 2 decimal points\n        return string.format(\"%.2f\", area)\n    else\n\
    \        return -1\n    end\nend", "    -- TODO: Implement the function\n    if\
    \ a + b > c and a + c > b and b + c > a then\n        return (a + b + c) / 2\n\
    \    else\n        return -1\n    end\nend", "  local p = (a + b + c) / 2\n  if\
    \ p - a < 0 or p - b < 0 or p - c < 0 then\n    return -1\n  end\n  return math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\nend", "    local s = (a + b + c) / 2\n    local\
    \ area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    if a + b <= c or a +\
    \ c <= b or b + c <= a then\n        return -1\n    else\n        return area\n\
    \    end\nend", "    -- Your code here\n    return -1.0\nend", "    if a + b >\
    \ c and a + c > b and b + c > a then\n        local s = (a + b + c) / 2\n    \
    \    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return\
    \ -1\n    end\nend", "  if a + b > c and a + c > b and b + c > a then\n    local\
    \ s = (a + b + c) / 2\n    return (s * (s - a) * (s - b) * (s - c)) ^ 0.5\n  else\n\
    \    return -1\n  end\nend", "    local p = (a + b + c) / 2\n    local S = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n    if S > 0 then\n        return math.floor(S\
    \ * 100 + 0.5) / 100\n    else\n        return -1\n    end\nend", "  -- Here is\
    \ the function definition\n  return 0\nend", "   local s = (a + b + c) / 2\n \
    \  local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n   if area > 0 then\
    \ return area\n   else return -1 end\nend", "    return a+b > c and b+c > a and\
    \ c+a > b and math.sqrt( (a+b+c)*(a+b-c)*(b+c-a)*(c+a-b) ) / 4 or -1\nend", " \
    \   local s = (a + b + c) / 2\n    if (a + b > c) and (a + c > b) and (b + c >\
    \ a) then\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n\
    \        return -1\n    end\nend", "    local area = -1\n    if a + b > c and\
    \ a + c > b and b + c > a then\n        local s = (a + b + c) / 2\n        area\
    \ = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    end\n    return area\nend",
  "  local sides = {a, b, c}\n  local biggest, biggest_index = math.max(a, b, c)\n\
    \  local sides_sum = a + b + c\n  local biggest_sum = sides_sum - biggest\n  if\
    \ biggest_sum <= biggest then\n    return -1\n  end\n  local s = sides_sum / 2\n\
    \  local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n  return math.floor(area\
    \ * 100 + 0.5) / 100\nend", "  return (a + b > c and b + c > a and c + a > b)\
    \ and a + b + c or -1\nend", "    -- the area of a triangle is: \n    -- sqrt(p(p-a)(p-b)(p-c))\n\
    \    -- where p is the perimeter/2\n    local p = (a + b + c) / 2\n    if (p -\
    \ a) >= 0 and (p - b) >= 0 and (p - c) >= 0 then\n        local area = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n        return math.floor(area * 100 + 0.5)\
    \ / 100\n    else\n        return -1\n    end\nend", "    -- compute area of the\
    \ triangle using Heron's formula\n    -- https://en.wikipedia.org/wiki/Heron%27s_formula\n\
    \    local s = (a + b + c) / 2\n    local area = math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n    if area > 0 then\n        return string.format(\"%.2f\",\
    \ area)\n    else\n        return -1\n    end\nend", "    if a < b + c and b <\
    \ a + c and c < a + b then\n        local p = (a + b + c) / 2\n        return\
    \ math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n  \
    \  end\nend", "    if a + b > c and a + c > b and b + c > a then\n        -- Determine\
    \ the semi-perimeter.\n        local s = (a + b + c) / 2\n        -- Use Heron's\
    \ formula.\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n\
    \        return -1\n    end\nend", "    return (a + b > c and b + c > a and c\
    \ + a > b) and math.sqrt(s * (s - a) * (s - b) * (s - c)) or -1\nend", "  --[[\n\
    \  Idea: \n  make use of the fact that for a valid triangle, \n  we should have\
    \ the sum of any two sides greater than the third side.\n  If the condition is\
    \ not satisfied, return -1\n  Otherwise, use the heron's formula to return the\
    \ triangle area.\n  ]]--\n  if (a + b > c) and (a + c > b) and (b + c > a) then\n\
    \    local s = (a + b + c) / 2.0\n    local area = math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n    return area\n  else\n    return -1\n  end\nend", "\tlocal\
    \ p = (a + b + c) / 2\n\tlocal x = p * (p - a) * (p - b) * (p - c)\n\tif x <=\
    \ 0 then\n\t\treturn -1\n\telse\n\t\treturn math.sqrt(x)\n\tend\nend", "    --\
    \ define array\n    local arr = {a, b, c}\n    -- sort array\n    table.sort(arr)\n\
    \    -- check if valid\n    if (arr[1] + arr[2] > arr[3]) then\n        -- compute\
    \ area\n        return math.floor(math.sqrt(2 * (arr[1] ^ 2) + 2 * (arr[2] ^ 2)\
    \ - (arr[3] ^ 2)) * 100) / 100\n    else\n        return -1\n    end\nend", " \
    \   -- your code here\n    if (a <= 0 or b <= 0 or c <= 0) then\n        return\
    \ -1\n    end\n    if (a + b < c or a + c < b or b + c < a) then\n        return\
    \ -1\n    end\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\nend", "    -- Write your code here\nend", "    if a + b > c\
    \ and a + c > b and b + c > a then\n        local p = (a + b + c) / 2\n      \
    \  return math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return\
    \ -1\n    end\nend", "  -- NOTE: No need to check whether the sides are valid\
    \ or not\n  --       because we can just let `math.sqrt` to do it for us.\n  --\
    \       If the 3 sides form a valid triangle, we will get the\n  --       square\
    \ root of a positive number. Otherwise we will\n  --       get a `value error`.\n\
    \  local s = (a + b + c) / 2\n  return math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nend", "  -- TODO: write a function that computes the area of a triangle.\
    \ \n  -- The area of a triangle is determined by the lengths of its three sides:\n\
    \  -- \n  -- A = sqrt(s(s - a)(s - b)(s - c))\n  -- \n  -- where s = (a + b +\
    \ c) / 2\n  --       a, b, c are the sides of the triangle\n  -- \n  -- (http://www.mathopenref.com/heronsformula.html)\n\
    \  --", "    -- check all three conditions and return -1 if they are not met\n\
    \    if a <= 0 or b <= 0 or c <= 0 or (a + b) <= c or (a + c) <= b or (b + c)\
    \ <= a then\n        return -1\n    end\n    local s = (a + b + c) / 2\n    local\
    \ area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return math.floor(area\
    \ * 100 + 0.5) / 100\nend", "    if a + b > c and a + c > b and b + c > a then\n\
    \        local p = (a + b + c) / 2\n        return math.sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    else\n        return -1\n    end\nend", "    if a+b>c and\
    \ a+c>b and b+c>a then\n        return (a+b+c)/2\n    else\n        return -1\n\
    \    end\nend", "  if (a + b > c) and (a + c > b) and (b + c > a) then\n    return\
    \ math.floor((a + b + c) * 100 * (1/2)) / 100\n  else\n    return -1\n  end\n\
    end", "    -- your code goes here\n    if a + b > c and a + c > b and b + c >\
    \ a then\n        local p = (a + b + c) / 2\n        return math.sqrt(p * (p -\
    \ a) * (p - b) * (p - c))\n    else\n        return -1\n    end\nend", "    local\
    \ p = (a + b + c) / 2\n    if a + b > c and a + c > b and b + c > a then\n   \
    \     return math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return\
    \ -1\n    end\nend", "    if a + b > c and a + c > b and b + c > a then\n    \
    \    local p = (a + b + c) / 2\n        return math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c))\n    else\n        return -1\n    end\nend", "    if a + b > c and\
    \ a + c > b and b + c > a then\n        local p = (a + b + c) / 2\n        return\
    \ math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n  \
    \  end\nend", "   -- TODO: Return the area of the triangle (rounded to 2 decimal\
    \ points) or -1 if the three sides don't form a valid triangle\nend", "  -- your\
    \ solution goes here\nend", "  if a + b > c and a + c > b and b + c > a then\n\
    \    local s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c)), 2)\n  else\n    return -1\n  end\nend", "  if a + b > c and a\
    \ + c > b and b + c > a then\n    return math.floor(0.5 * math.sqrt((a + b + c)\
    \ * (a + b - c) * (a + c - b) * (b + c - a)) * 100 + 0.5) / 100\n  else\n    return\
    \ -1\n  end\nend", "\tlocal s = (a + b + c) / 2\n\tlocal area = math.sqrt(s *\
    \ (s - a) * (s - b) * (s - c))\n\tif area > 0 then\n\t\treturn math.floor(area\
    \ * 100 + 0.5) / 100\n\telse\n\t\treturn -1\n\tend\nend", "  return -1\nend",
  "  if a + b > c and a + c > b and b + c > a then\n    local s = (a + b + c) / 2\n\
    \    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n  else\n    return -1\n\
    \  end\nend", "    if (a + b > c) and (a + c > b) and (b + c > a) then\n     \
    \   return (a + b + c) / 2\n    else\n        return -1\n    end\nend", "    if\
    \ a + b > c and a + c > b and b + c > a then\n        return 0.5 * a * b\n   \
    \ else\n        return -1\n    end\nend", "    if (a + b > c) and (a + c > b)\
    \ and (b + c > a) then\n        local p = (a + b + c) / 2\n        return math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n    end\nend",
  "  if a+b > c and a+c > b and b+c > a then\n    local p = (a+b+c)/2\n    return\
    \ math.sqrt(p*(p-a)*(p-b)*(p-c))\n  else\n    return -1\n  end\nend", "    --\
    \ TODO\nend", "  if a + b > c and a + c > b and b + c > a then\n    local p =\
    \ (a + b + c) / 2.0\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n \
    \ else\n    return -1\n  end\nend", "   local s = (a + b + c) / 2\n   local area\
    \ = math.sqrt(s * (s - a) * (s - b) * (s - c))\n   if area > 0 then\n      return\
    \ string.format(\"%.2f\", area)\n   else\n      return -1\n   end\nend", "\tif\
    \ a < b + c and b < a + c and c < a + b then\n\t\tlocal p = (a + b + c) / 2\n\t\
    \treturn math.sqrt(p * (p - a) * (p - b) * (p - c))\n\telse\n\t\treturn -1\n\t\
    end\nend", "    if a + b > c and a + c > b and b + c > a then\n        local p\
    \ = (a + b + c) / 2.0\n        return math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \    else\n        return -1\n    end\nend", "    if a + b > c and a + c > b and\
    \ b + c > a then\n        return (a + b + c) / 2\n    else\n        return -1\n\
    \    end\nend", "    if (a + b > c) and (a + c > b) and (b + c > a) then\n   \
    \     local p = (a + b + c) / 2\n        return math.sqrt(p * (p - a) * (p - b)\
    \ * (p - c))\n    else\n        return -1\n    end\nend", "  -- sort the three\
    \ length values from smallest to largest\n  if a > b then a, b = b, a end\n  if\
    \ b > c then b, c = c, b end\n  if a > b then a, b = b, a end\n  -- if two shortest\
    \ lengths are smaller than the largest,\n  -- there must be a valid triangle\n\
    \  if a + b > c then\n    -- the area of a triangle is given by Heron's formula\n\
    \    -- https://en.wikipedia.org/wiki/Heron%27s_formula\n    local s = (a + b\
    \ + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n  else\n  \
    \  return -1\n  end\nend", "   local p = (a + b + c) / 2\n   local a = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n   if a < 0 then a = -1 end\n   return a\nend",
  "    local s = (a + b + c) / 2\n    local area = math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n    if area >= 0 then return area else return -1 end\nend", "  \
    \  if (a + b > c) and (a + c > b) and (b + c > a) then\n        -- Calculate the\
    \ half-perimeter\n        local p = (a + b + c) / 2\n        -- Calculate the\
    \ area\n        return math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n\
    \        return -1\n    end\nend", "   if (a + b <= c) or (a + c <= b) or (b +\
    \ c <= a) then\n      return -1\n   else\n      local s = (a + b + c) / 2\n  \
    \    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n   end\nend", "    --\
    \ write your code here\n    if a + b <= c or a + c <= b or b + c <= a then\n \
    \       return -1\n    end\n    local p = (a + b + c) / 2\n    return math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\nend", "\tif a + b <= c or a + c <= b or b +\
    \ c <= a then return -1\n\telse return (a * b * math.sin(math.acos((a^2 + b^2\
    \ - c^2) / (2 * a * b)))) / 2\n\tend\nend", "\tif a + b > c and a + c > b and\
    \ b + c > a then\n\t\tlocal p = (a + b + c) / 2\n\t\treturn math.sqrt(p * (p -\
    \ a) * (p - b) * (p - c))\n\telse\n\t\treturn -1\n\tend\nend", "    -- YOUR CODE\
    \ GOES HERE\n    local s\n    if a + b > c and a + c > b and b + c > a then\n\
    \        s = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n    else\n        return -1\n    end\nend", "    local d = 0\n   \
    \ if (a+b>c) then d = d + 1 end\n    if (a+c>b) then d = d + 1 end\n    if (b+c>a)\
    \ then d = d + 1 end\n    if (d>=2) then\n        local p = (a+b+c)/2\n      \
    \  return math.sqrt(p*(p-a)*(p-b)*(p-c))\n    else\n        return -1\n    end\n\
    end", "    if a <= 0 or b <= 0 or c <= 0 then\n        return -1\n    end\n  \
    \  if a + b <= c or a + c <= b or b + c <= a then\n        return -1\n    end\n\
    \    local area = math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c -\
    \ a)) / 4\n    return math.floor(area * 100 + 0.5) / 100\nend", "   -- Find the\
    \ longest side\n   if a > b and a > c then\n      longest = a\n      if b + c\
    \ > a then\n         return a * b * c / 2\n      else\n         return -1\n  \
    \    end\n   elseif b > a and b > c then\n      longest = b\n      if a + c >\
    \ b then\n         return a * b * c / 2\n      else\n         return -1\n    \
    \  end\n   else\n      longest = c\n      if a + b > c then\n         return a\
    \ * b * c / 2\n      else\n         return -1\n      end\n   end\nend", "    local\
    \ s = (a + b + c) / 2\n    if s - a > 0 and s - b > 0 and s - c > 0 then\n   \
    \     return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return\
    \ -1\n    end\nend", "\t-- TODO: Implement\n\tif (a+b) > c and (a+c) > b and (b+c)\
    \ > a then\n\t\tlocal area = (a + b + c) / 2\n\t\treturn math.sqrt(area * (area\
    \ - a) * (area - b) * (area - c))\n\telse\n\t\treturn -1\n\tend\nend", "  if a\
    \ + b > c and a + c > b and b + c > a then\n    return math.floor(math.sqrt((a\
    \ + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) * 100 + 0.5) / 100\n  else\n\
    \    return -1\n  end\nend", "    if a+b > c and a+c > b and b+c > a then\n  \
    \      local p = (a+b+c)/2\n        return math.sqrt(p*(p-a)*(p-b)*(p-c))\n  \
    \  else\n        return -1\n    end\nend", "   local s = (a + b + c) / 2\n   local\
    \ A = math.sqrt(s * (s - a) * (s - b) * (s - c))\n   return A < 0 and -1 or A\n\
    end", "  -- return 6.0 for triangle_area(3, 4, 5)\n  -- return -1 for triangle_area(1,\
    \ 2, 10)\n  return -1\nend", "    return false\nend", "\treturn (a + b < c or\
    \ a + c < b or b + c < a) and -1 or 0.5 * math.sqrt((a + b + c) * (a + b - c)\
    \ * (a + c - b) * (b + c - a))\nend", "  if a + b > c and a + c > b and b + c\
    \ > a then\n    local p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) *\
    \ (p - b) * (p - c))\n  else\n    return -1\n  end\nend", "    -- return -1 if\
    \ the three sides cannot form a valid triangle\n    if a + b <= c or a + c <=\
    \ b or b + c <= a then\n        return -1\n    end\n    -- calculate the area\
    \ using Heron's formula\n    local s = (a + b + c) / 2\n    local area = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    -- round the area to 2 decimal points\n\
    \    return math.floor(area * 100 + 0.5) / 100\nend", "    if(a + b > c and a\
    \ + c > b and b + c > a) then\n        return math.floor(math.sqrt((a + b + c)\
    \ * (a + b - c) * (a + c - b) * (b + c - a)) / 4)\n    else\n        return -1\n\
    \    end\nend", "    -- Your code here\nend", "\tif a + b > c and a + c > b and\
    \ b + c > a then\n\t\treturn math.floor(a * b * 0.5 * 100 + 0.5) / 100\n\telse\n\
    \t\treturn -1\n\tend\nend", "  local s = (a + b + c) / 2\n  local area = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n  if area == nil then return -1\n  else return\
    \ math.floor(area * 100 + 0.5) / 100\n  end\nend", "  -- TODO\nend", "    if (a+b)\
    \ > c and (a+c) > b and (b+c) > a then\n        local x = (a+b+c)/2\n        return\
    \ math.sqrt(x*(x-a)*(x-b)*(x-c))\n    else\n        return -1\n    end\nend",
  "  if a + b > c and a + c > b and b + c > a then\n    return (a + b + c) / 2\n \
    \ else\n    return -1\n  end\nend", "    -- If the three sides form a valid triangle,\
    \ return the area of the triangle\n    -- rounded to 2 decimal points. Otherwise\
    \ return -1\n    -- YOUR CODE HERE\n    if a < b + c and b < a + c and c < a +\
    \ b then\n        local p = (a + b + c) / 2\n        return round(sqrt(p * (p\
    \ - a) * (p - b) * (p - c)), 2)\n    else\n        return -1\n    end\nend", " \
    \   local s = (a + b + c) / 2\n    local area = math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n    if area >= 0 then return area end\n    return -1\nend", "  \
    \  -- TODO: Your code here.\n    if(a+b<c or a+c<b or b+c<a)then\n        return\
    \ -1\n    else\n        local p = (a+b+c)/2\n        local area = math.sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \        return math.floor(area*100)/100\n    end\nend", "    if a + b <= c or\
    \ a + c <= b or b + c <= a then\n        return -1\n    end\n    local p = (a\
    \ + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\nend", " \
    \   if a + b > c and a + c > b and b + c > a then\n        local s = (a + b +\
    \ c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n\
    \        return -1\n    end\nend", "  local p = (a + b + c) / 2\n  local area\
    \ = math.sqrt(p * (p - a) * (p - b) * (p - c))\n  return (area and area > 0) and\
    \ string.format(\"%.2f\", area) or -1\nend", "    -- Fill in your code here\n\
    \    local s = 0.5 * (a + b + c)\n    local area = math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c))\n    if area > 0 then\n        return area\n    else\n     \
    \   return -1\n    end\nend", "\tif a + b > c and a + c > b and b + c > a then\n\
    \t\tlocal p = (a + b + c) / 2\n\t\treturn math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n\telse\n\t\treturn -1\n\tend\nend", "    if a <= 0 or b <= 0 or c <=\
    \ 0 then\n        return -1\n    end\n    if a + b <= c or a + c <= b or b + c\
    \ <= a then\n        return -1\n    end\n    local s = (a + b + c) / 2\n    return\
    \ math.sqrt(s * (s - a) * (s - b) * (s - c))\nend", "  local s = (a + b + c) /\
    \ 2\n  local x = s * (s - a) * (s - b) * (s - c)\n  if x > 0 then\n    return\
    \ math.sqrt(x)\n  else\n    return -1\n  end\nend", "    local p = (a + b + c)\
    \ / 2\n    local s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n    if s > 0\
    \ then\n        return math.floor(s * 100 + 0.5) / 100\n    else\n        return\
    \ -1\n    end\nend", "  if a+b <= c or a+c <= b or b+c <= a then\n    return -1\n\
    \  else\n    local s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\n\
    \  end\nend", "    if a + b > c and a + c > b and b + c > a then\n        return\
    \ math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a)) / 4\n    else\n\
    \        return -1\n    end\nend", "    local s = (a + b + c) / 2\n    if a +\
    \ b > c and a + c > b and b + c > a then\n        return math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n    else\n        return -1\n    end\nend", "  local s\
    \ = 0.5 * (a + b + c)\n  local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \  return area < 0 and -1 or area\nend", "  if (a+b>c) and (a+c>b) and (b+c>a)\
    \ then\n    local p = (a+b+c)/2\n    return math.sqrt(p*(p-a)*(p-b)*(p-c))\n \
    \ else\n    return -1\n  end\nend", "    local p = (a + b + c) / 2\n    if a +\
    \ b > c and a + c > b and b + c > a then\n        return math.sqrt(p * (p - a)\
    \ * (p - b) * (p - c))\n    else\n        return -1\n    end\nend", "  -- Write\
    \ your code here\nend", "  if (a + b) > c and (a + c) > b and (b + c) > a then\n\
    \    local p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n  else\n    return -1\n  end\nend", "    if a + b > c and a + c > b and\
    \ b + c > a then\n        return (a + b + c) / 2\n    else\n        return -1\n\
    \    end\nend", "  if a + b > c and a + c > b and b + c > a then\n    return 0.5\
    \ * math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a))\n  else\n\
    \    return -1\n  end\nend", "  -- TODO: implement this function.\n  -- The return\
    \ value should be -1 if the three sides form a valid triangle.\n  -- Otherwise\
    \ return the area of the triangle rounded to 2 decimal points.\n  return -1\n\
    end", "    local p = (a + b + c) / 2.0\n    local s = math.sqrt(p * (p - a) *\
    \ (p - b) * (p - c))\n    if s == s then -- s == s ensures not NaN\n        return\
    \ math.floor(s * 100) / 100\n    else\n        return -1\n    end\nend", "  if\
    \ a + b > c and a + c > b and b + c > a then\n    return math.floor(0.5 * a *\
    \ b * 100 + 0.5) / 100\n  else\n    return -1\n  end\nend", "  local sides = {a,\
    \ b, c}\n  table.sort(sides)\n  local p = (a + b + c) / 2\n  if p > sides[3] then\n\
    \    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n  else\n    return -1\n\
    \  end\nend", "    local p = (a + b + c) / 2.0\n    local area = math.sqrt(p *\
    \ (p - a) * (p - b) * (p - c))\n    return area ~= area and -1 or area\nend",
  "    local area = -1\n    if a + b > c and a + c > b and b + c > a then\n      \
    \  local s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) *\
    \ (s - c))\n    end\n    return area\nend", "    if a + b > c and a + c > b and\
    \ b + c > a then\n        local p = (a + b + c) / 2\n        return math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n    end\nend",
  "  local result = -1\n  if a + b > c and a + c > b and b + c > a then\n    local\
    \ s = (a + b + c) / 2\n    result = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \  end\n  return result\nend", "\tif (a + b > c) and (a + c > b) and (b + c >\
    \ a) then\n\t\tlocal s = (a + b + c) / 2\n\t\treturn round(math.sqrt(s * (s -\
    \ a) * (s - b) * (s - c)), 2)\n\telse\n\t\treturn -1\n\tend\nend", "    -- put\
    \ your code here\n    local p = (a + b + c) / 2\n    local s = math.sqrt(p * (p\
    \ - a) * (p - b) * (p - c))\n    if s == s then\n        return math.floor(s *\
    \ 100 + 0.5) / 100\n    else\n        return -1\n    end\nend", "\t-- fill in\
    \ your code here\nend", "    local s = (a + b + c) / 2\n    local tri = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    return tri > 0 and string.format(\"%.2f\"\
    , tri) or -1\nend", "  if a + b > c and a + c > b and b + c > a then\n    local\
    \ s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \  else\n    return -1\n  end\nend", "\tif a + b > c and a + c > b and b + c >\
    \ a then\n\t\treturn (math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b +\
    \ c - a))) / 4\n\telse\n\t\treturn -1\n\tend\nend", "    if a < 0 or b < 0 or\
    \ c < 0 then\n        return -1\n    end\n    if a + b > c and a + c > b and b\
    \ + c > a then\n        return round(a * b / 2, 2)\n    else\n        return -1\n\
    \    end\nend", "\tlocal s = (a + b + c) / 2\n\tlocal area = math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n\tif area == 0 then\n\t\treturn -1\n\telse\n\t\t\
    return string.format(\"%.2f\", area)\n\tend\nend", "\tlocal p = (a + b + c) /\
    \ 2\n\tlocal area = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\tif area > 0\
    \ then\n\t\treturn string.format(\"%.2f\", area)\n\telse\n\t\treturn -1\n\tend\n\
    end", "    --your code here\n    local p = (a + b + c) / 2\n    if (p - a > 0\
    \ and p - b > 0 and p - c > 0) then\n        return math.sqrt(p * (p - a) * (p\
    \ - b) * (p - c))\n    else\n        return -1\n    end\nend", "    local s =\
    \ (a + b + c) / 2\n    local t = s * (s - a) * (s - b) * (s - c)\n    if t < 0\
    \ then\n        return -1\n    else\n        return math.sqrt(t)\n    end\nend",
  "\tlocal s = (a + b + c) / 2\n\tlocal area = math.sqrt(s * (s - a) * (s - b) * (s\
    \ - c))\n\tif (a + b > c) and (a + c > b) and (b + c > a) then\n\t\treturn string.format(\"\
    %.2f\", area)\n\telse\n\t\treturn -1\n\tend\nend", "  local s = (a + b + c) /\
    \ 2\n  local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n  if area > 0\
    \ then\n    return area\n  else\n    return -1\n  end\nend", "    if a + b <=\
    \ c or a + c <= b or b + c <= a then\n        return -1\n    end\n    local p\
    \ = (a + b + c) / 2.0\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    end", "  return ((a + b > c) and (a + c > b) and (b + c > a)) and \n    (a + b\
    \ + c) / 2 or -1\nend", "    if a + b <= c or a + c <= b or b + c <= a then\n\
    \        return -1\n    end\n    -- calculate area\n    local s = (a + b + c)\
    \ / 2\n    local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return\
    \ round_2d(area)\nend", "  -- Your code here\nend", "    if a + b > c and a +\
    \ c > b and b + c > a then\n        local s = (a + b + c) / 2\n        return\
    \ (s - a) * (s - b) * (s - c) * s\n    else\n        return -1\n    end\nend",
  "    local t = a + b + c\n    local p = t / 2\n    local s = math.sqrt(p * (p -\
    \ a) * (p - b) * (p - c))\n    return s > 0 and s or -1\nend", "  if (a + b) >\
    \ c and (a + c) > b and (b + c) > a then\n    local p = (a + b + c) / 2\n    return\
    \ math.sqrt(p * (p - a) * (p - b) * (p - c))\n  else\n    return -1\n  end\nend",
  "    if (a + b > c) and (a + c > b) and (b + c > a) then\n        local s = (a +\
    \ b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n\
    \        return -1\n    end\nend", "  if a + b > c and a + c > b and b + c > a\
    \ then\n    local s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n  else\n    return -1\n  end\nend", "\t-- Add code here\n\t--\
    \ Code end\nend", "    if a+b > c and a+c > b and b+c > a then\n        local\
    \ s = (a+b+c)/2\n        return round_to_decimal_place(math.sqrt(s*(s-a)*(s-b)*(s-c)),\
    \ 2)\n    else\n        return -1\n    end\nend", "\tif (a + b <= c) or (a + c\
    \ <= b) or (b + c <= a) then\n\t\treturn -1\n\telse\n\t\tlocal p = (a + b + c)\
    \ / 2\n\t\treturn math.sqrt(p * (p - a) * (p - b) * (p - c))\n\tend\nend", " \
    \ -- 1) determine if a triangle can be formed\n  if (a + b > c) and (a + c > b)\
    \ and (b + c > a) then\n    -- 2) compute the semi-perimeter\n    s = (a + b +\
    \ c) / 2\n    -- 3) compute the area\n    return math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n  else\n    return -1\n  end\nend", "    return a + b > c and\
    \ b + c > a and c + a > b and ((a + b + c) / 2) or -1\nend", "  if a + b <= c\
    \ or a + c <= b or b + c <= a then\n    return -1\n  end\n  return math.sqrt((a\
    \ + b + c) * (a + b - c) * (a - b + c) * (-a + b + c)) / 4\nend", "\t-- TODO:\
    \ Your code here\n\t-- Check if it's a valid triangle.\n\t-- If so return the\
    \ area, otherwise return -1.\nend", "    -- TODO: implement this function\nend",
  "  if (a + b) > c and (a + c) > b and (b + c) > a then\n    -- Heron's formula\n\
    \    local p = (a + b + c) / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c))\n  else\n    return -1\n  end\nend", "    -- TODO: Implement triangle\
    \ area computation\nend", "\tlocal p = (a + b + c) / 2\n\tlocal s = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n\treturn s and s * 2 or -1\nend", "    if a\
    \ + b > c and a + c > b and b + c > a then\n        return ((a+b+c)/2)*(((a+b+c)/2)-a)*(((a+b+c)/2)-b)*(((a+b+c)/2)-c)^0.5\n\
    \    else\n        return -1\n    end\nend", "    -- Write your code here\n  \
    \  if (a + b <= c) or (a + c <= b) or (b + c <= a) then\n        return -1\n \
    \   else\n        return (math.sqrt((a + b + c) * (a + b - c) * (a + c - b) *\
    \ (b + c - a))) / 4\n    end\nend", "\tlocal s = (a + b + c) / 2\n\tlocal area\
    \ = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\tif area > 0 then\n\t\treturn\
    \ math.floor(area * 100 + 0.5) / 100\n\telse\n\t\treturn -1\n\tend\nend", "  \
    \  local n = {a, b, c}\n    table.sort(n)\n    local s = (n[1] + n[2] > n[3])\
    \ and ((n[1] + n[2] + n[3]) / 2) or nil\n    return s and math.sqrt(s * (s - n[1])\
    \ * (s - n[2]) * (s - n[3])) or -1\nend", "  \n  -- TODO: complete the function\n\
    \  return 0\n  \nend", "    -- find the max of three numbers\n    local max =\
    \ function(x, y, z)\n        local result = math.max(x, y)\n        return math.max(result,\
    \ z)\n    end", "    if a + b > c and a + c > b and b + c > a then\n        s\
    \ = (a + b + c) / 2\n        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    else\n        return -1\n    end\nend", "    local area = -1\n    if (a +\
    \ b > c) and (a + c > b) and (b + c > a) then\n        local s = (a + b + c) /\
    \ 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    end\n    return\
    \ math.floor(area * 100 + 0.5) / 100\nend", "    if a + b <= c or a + c <= b or\
    \ b + c <= a then\n        return -1\n    end\n    local p = (a + b + c) / 2\n\
    \    return math.sqrt(p * (p - a) * (p - b) * (p - c))\nend", "    if a + b >\
    \ c and a + c > b and b + c > a then\n        return ((a + b + c) / 2) * math.sqrt(((a\
    \ + b + c) / 2) * (((a + b + c) / 2) - a) * (((a + b + c) / 2) - b) * (((a + b\
    \ + c) / 2) - c))\n    else\n        return -1\n    end\nend", "    local s =\
    \ (a + b + c) / 2\n    local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n\
    \    if area > 0 then\n        return round(area, 2)\n    else\n        return\
    \ -1\n    end\nend", "  local p = (a + b + c) / 2.0\n  local s = math.sqrt(p *\
    \ (p - a) * (p - b) * (p - c))\n  if (s < 0) then\n    return -1\n  else\n   \
    \ return math.floor(s * 100 + 0.5) / 100\n  end\nend", "  local min_side = math.min(a,\
    \ b, c)\n  local max_side = math.max(a, b, c)\n  local med_side = a + b + c -\
    \ min_side - max_side\n  if min_side + med_side > max_side then\n    local s =\
    \ (min_side + med_side + max_side) / 2\n    return math.sqrt(s * (s - min_side)\
    \ * (s - med_side) * (s - max_side))\n  else\n    return -1\n  end\nend", "  \
    \  if (a+b>c) and (a+c>b) and (b+c>a) then\n        -- a+b>c, Heron's formula\n\
    \        s = (a+b+c)/2\n        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    else\n\
    \        return -1\n    end\nend", "\tlocal p = (a + b + c) / 2\n\tlocal s = math.sqrt(p\
    \ * (p - a) * (p - b) * (p - c))\n\treturn (s * 2) ^ 0.5\nend", "  if a + b >\
    \ c and a + c > b and b + c > a then\n    return (a + b + c) / 2\n  else\n   \
    \ return -1\n  end\nend", "  -- write your code here\n  local s = (a + b + c)\
    \ / 2", '  local p = (a + b + c) / 2', "\tif (a+b) > c and (a+c) > b and (b+c)\
    \ > a then\n\t\treturn round(2, math.sqrt((a+b+c)*(a+b-c)*(a-b+c)*(-a+b+c))/4)\n\
    \telse\n\t\treturn -1\n\tend\nend", "    if a+b>c and a+c>b and b+c>a then\n \
    \       return math.floor(0.5*a*b*100)/100\n    else\n        return -1\n    end\n\
    end", "    if (a+b) > c and (a+c) > b and (b+c) > a then\n        return ((a+b+c)/2\
    \ - math.max(a,b,c))*math.sqrt(math.max(a,b,c)*(math.max(a,b,c)-a)*(math.max(a,b,c)-b)*(math.max(a,b,c)-c))\n\
    \    else\n        return -1\n    end\nend", "    -- INSERT YOUR CODE HERE\n \
    \   local s = (a + b + c) / 2.0;\n    local area = math.sqrt(s * (s - a) * (s\
    \ - b) * (s - c));\n    if area > 0 then\n        return area;\n    else\n   \
    \     return -1;\n    end\nend", "    if (a + b > c) and (a + c > b) and (b +\
    \ c > a) then\n        return (a * b * math.sin(c * math.pi / 180)) / 2\n    else\n\
    \        return -1\n    end\nend", "\tif a+b > c and a+c > b and b+c > a then\n\
    \t\tlocal s = (a+b+c)/2\n\t\treturn (s*(s-a)*(s-b)*(s-c))^0.5\n\telse\n\t\treturn\
    \ -1\n\tend\nend", "  -- Return -1 if triangle is invalid\n  if a + b <= c or\
    \ a + c <= b or b + c <= a then\n    return -1\n  end\n  -- Heron's formula\n\
    \  local s = (a + b + c) / 2\n  return math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c))\nend", "  -- TODO: Implement\nend", "    if a <= 0 or b <= 0 or c <= 0 then\
    \ return -1 end\n    if a + b <= c or a + c <= b or b + c <= a then return -1\
    \ end\n    local s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\nend", "  -- your code here\nend", "    if (a + b > c) and (a\
    \ + c > b) and (b + c > a) then\n        return round(math.sqrt((a + b + c) *\
    \ (a + b - c) * (a + c - b) * (b + c - a)) / 4, 2)\n    else\n        return -1\n\
    \    end\nend", "    -- Write your code here\n    return 0.0\nend", "  if a +\
    \ b > c and a + c > b and b + c > a then\n    local p = (a + b + c) / 2\n    return\
    \ math.sqrt(p * (p - a) * (p - b) * (p - c))\n  else\n    return -1\n  end\nend",
  "    local s = (a + b + c) / 2\n    local area = math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n    if area > 0 then\n        return area\n    else\n        return\
    \ -1\n    end\nend", "    if (a + b) > c and (a + c) > b and (b + c) > a then\n\
    \        -- Make use of Heron's formula\n        local s = (a + b + c) / 2\n \
    \       return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n        return\
    \ -1\n    end\nend", "    -- TODO: finish this function\n    if a + b > c and\
    \ a + c > b and b + c > a then\n        local p = (a + b + c) / 2\n        return\
    \ math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n        return -1\n  \
    \  end\nend", "  local p = (a + b + c) / 2\n  local area = math.sqrt(p * (p -\
    \ a) * (p - b) * (p - c))\n  if (a + b > c) and (a + c > b) and (b + c > a) then\n\
    \    return math.floor(area * 100 + 0.5) / 100\n  else\n    return -1\n  end\n\
    end", "  -- YOUR CODE HERE\n  local area\n  if a + b <= c or a + c <= b or b +\
    \ c <= a then\n    area = -1\n  else\n    s = (a + b + c) / 2\n    area = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n  end\n  return area\nend", "    -- Your code\
    \ goes here\n    if (a+b>c) and (a+c>b) and (b+c>a) then\n        local s=(a+b+c)/2\n\
    \        return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    else\n        return -1\n\
    \    end\nend", "    local s = (a + b + c) / 2\n    if not (s - a > 0 and s -\
    \ b > 0 and s - c > 0) then\n        return -1\n    end\n    return math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\nend", "\tlocal p = (a + b + c) / 2\n\tlocal\
    \ area = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\tif (area > 0) then\n\t\t\
    return area\n\telse\n\t\treturn -1\n\tend\nend", "    local s = (a + b + c) /\
    \ 2\n    local area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return area\
    \ > 0 and area or -1\nend", "\tif (a + b > c) and (a + c > b) and (b + c > a)\
    \ then\n\t\tlocal p = (a + b + c) / 2\n\t\treturn math.sqrt(p * (p - a) * (p -\
    \ b) * (p - c))\n\telse\n\t\treturn -1\n\tend\nend", "    local t = {}\n    table.insert(t,\
    \ a)\n    table.insert(t, b)\n    table.insert(t, c)\n    table.sort(t)\n    if\
    \ t[1] + t[2] > t[3] then\n        local s = (a + b + c) / 2\n        return math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    else\n        return -1\n    end\nend",
  "  local s = (a + b + c) / 2\n  if not (s > a and s > b and s > c) then return -1\
    \ end\n  return math.sqrt(s * (s - a) * (s - b) * (s - c))\nend", "    local p\
    \ = (a + b + c) / 2\n    local s = math.sqrt(p * (p - a) * (p - b) * (p - c))\n\
    \    return s < 0 and -1 or tonumber(string.format(\"%.2f\", s))\nend", "  if\
    \ (a + b > c) and (a + c > b) and (b + c > a) then\n    local p = (a + b + c)\
    \ / 2\n    return math.sqrt(p * (p - a) * (p - b) * (p - c))\n  else\n    return\
    \ -1\n  end\nend", "    if (a > b+c) or (b > a+c) or (c > a+b) then\n        return\
    \ -1\n    else\n        local p = (a+b+c)/2\n        return math.sqrt(p*(p-a)*(p-b)*(p-c))\n\
    \    end\nend", "    if not a or not b or not c then\n        return -1\n    end\n\
    \    if a <= 0 or b <= 0 or c <= 0 then\n        return -1\n    end\n    if a\
    \ + b <= c or a + c <= b or b + c <= a then\n        return -1\n    end\n    local\
    \ p = (a + b + c) / 2\n    return (p * (p - a) * (p - b) * (p - c)) ^ 0.5\nend",
  "    local half_p = (a + b + c) / 2\n    local area = math.sqrt(half_p * (half_p\
    \ - a) * (half_p - b) * (half_p - c))\n    if area > 0 then\n        return math.floor(area\
    \ * 100 + 0.5) / 100\n    else\n        return -1\n    end\nend", "    if a +\
    \ b > c and a + c > b and b + c > a then\n        local s = (a + b + c) / 2\n\
    \        return math.sqrt(s * (s - a) * (s - b) * (s - c))\n    else\n       \
    \ return -1\n    end\nend", "  \n  local s = (a + b + c) / 2\n  local area = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n  if (area < 0 or a + b <= c or a + c <= b or\
    \ b + c <= a) then\n    return -1\n  else\n    return math.floor(area * 100 +\
    \ 0.5) / 100\n  end\nend", "    local s = (a + b + c) / 2\n    local area = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n    if a + b <= c or a + c <= b or b + c <=\
    \ a then\n        return -1\n    else\n        return area\n    end\nend", " \
    \   if a + b > c and a + c > b and b + c > a then\n        local p = (a + b +\
    \ c) / 2\n        return math.sqrt(p * (p - a) * (p - b) * (p - c))\n    else\n\
    \        return -1\n    end\nend", "    if a + b > c and a + c > b and b + c >\
    \ a then\n        return (math.sqrt((a + b + c) * (a + b - c) * (a + c - b) *\
    \ (b + c - a))) / 4\n    else\n        return -1\n    end\nend", "  if not check_sides(a,\
    \ b, c) then\n    return -1\n  end\n  local s = 0.5 * (a + b + c)\n  return math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
