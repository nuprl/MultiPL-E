language: lua
name: HumanEval_61_correct_bracketing
results:
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local left = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '('\
    \ then\n      left = left + 1\n    else\n      left = left - 1\n    end\n    if\
    \ left < 0 then\n      return false\n    end\n  end\n  return left == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for c in brackets:gmatch(\".\") do\n        if c ==\
    \ \"(\" then\n            count = count + 1\n        elseif c == \")\" then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = {}\n  for c in brackets:gmatch('.') do\n    if c == '(' then\n\
    \      stack[#stack + 1] = '('\n    elseif c == ')' then\n      if #stack == 0\
    \ then\n        return false\n      end\n      stack[#stack] = nil\n    end\n\
    \  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local found_closing = false\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == ')' then\n            found_closing = true\n        end\n    end\n   \
    \ if not found_closing then\n        return false\n    end\n    local depth =\
    \ 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == '(' then\n\
    \            depth = depth + 1\n        elseif brackets:sub(i, i) == ')' then\n\
    \            depth = depth - 1\n        end\n        if depth < 0 then\n     \
    \       return false\n        end\n    end\n    return depth == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local bracketing = 0\n  for c in brackets:gmatch\".\" do\n    if c == \"(\"\
    \ then\n      bracketing = bracketing + 1\n    elseif c == \")\" then\n      bracketing\
    \ = bracketing - 1\n    end\n    if bracketing < 0 then\n      return false\n\
    \    end\n  end\n  return bracketing == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal c = 0\n\tfor b in brackets:gmatch('.') do\n\t\tif b == '(' then\n\t\t\t\
    c = c + 1\n\t\telseif b == ')' then\n\t\t\tc = c - 1\n\t\tend\n\t\tif c < 0 then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\treturn c == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for _, bracket in ipairs(brackets) do\n    if bracket ==\
    \ '(' then\n      count = count + 1\n    elseif bracket == ')' then\n      count\
    \ = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n \
    \ end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoslij8n.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyoslij8n.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal brackets = brackets or ''\n\tlocal stack = {}\n\tlocal L = brackets:len()\n\
    \tfor i = 1, L do\n\t\tlocal ch = brackets:sub(i, i)\n\t\tif ch == '(' then\n\t\
    \t\ttable.insert(stack, ch)\n\t\telseif ch == ')' then\n\t\t\tif #stack == 0 then\n\
    \t\t\t\treturn false\n\t\t\telse\n\t\t\t\ttable.remove(stack)\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack()\n    for i = 1, #brackets do\n        local b = brackets:sub(i,\
    \ i)\n        if b == '(' then\n            stack:push(b)\n        elseif b ==\
    \ ')' then\n            if stack:is_empty() then\n                return false\n\
    \            else\n                stack:pop()\n            end\n        end\n\
    \    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcem6gjeu.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpcem6gjeu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcem6gjeu.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_count = 0\n  for bracket in brackets:gmatch('.') do\n    if bracket\
    \ == '(' then\n      open_count = open_count + 1\n    elseif bracket == ')' then\n\
    \      open_count = open_count - 1\n    end\n    if open_count < 0 then\n    \
    \  return false\n    end\n  end\n  return open_count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack()\n    for char in brackets:gmatch('%w') do\n       \
    \ if char == '(' then\n            stack:push(char)\n        elseif char == ')'\
    \ then\n            if stack:size() == 0 then\n                return false\n\
    \            end\n            stack:pop()\n        end\n    end\n    return stack:size()\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxfsq3qij.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpxfsq3qij.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxfsq3qij.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    if not brackets then return true end\n    local i, m = 0, 0\n    for _ in\
    \ brackets:gmatch'%b()' do\n        i = i + 1\n    end\n    for _ in brackets:gmatch'%b{}'\
    \ do\n        m = m + 1\n    end\n    return i == m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkg54ml8.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqkg54ml8.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal depth = 0\n\tfor i = 1, brackets:len() do\n\t\tlocal bracket = brackets:sub(i,\
    \ i)\n\t\tif bracket == '(' then\n\t\t\tdepth = depth + 1\n\t\telseif bracket\
    \ == ')' then\n\t\t\tdepth = depth - 1\n\t\t\tif depth < 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\tend\n\treturn depth == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i=1, #brackets do\n        if brackets:sub(i,i)\
    \ == '(' then\n            count = count + 1\n        elseif brackets:sub(i,i)\
    \ == ')' then\n            count = count - 1\n        end\n        if count <\
    \ 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local brackets_stack = {}\n    for i = 1, #brackets do\n        local c =\
    \ brackets:sub(i, i)\n        if c == '(' then\n            table.insert(brackets_stack,\
    \ c)\n        elseif c == ')' then\n            if #brackets_stack == 0 then\n\
    \                return false\n            else\n                table.remove(brackets_stack)\n\
    \            end\n        end\n    end\n    return #brackets_stack == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local balance = 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i,\
    \ i)\n    if c == '(' then\n      balance = balance + 1\n    elseif c == ')' then\n\
    \      balance = balance - 1\n    end\n    if balance < 0 then\n      return false\n\
    \    end\n  end\n  return balance == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local depth = 0\n    for i = 1, #brackets do\n        local b = brackets:sub(i,\
    \ i)\n        if b == '(' then\n            depth = depth + 1\n        elseif\
    \ b == ')' then\n            depth = depth - 1\n        end\n        if depth\
    \ < 0 then\n            return false\n        end\n    end\n    return depth ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local counter = 0\n  for bracket in brackets:gmatch(\".\") do\n    if bracket\
    \ == \"(\" then\n      counter = counter + 1\n    elseif bracket == \")\" then\n\
    \      counter = counter - 1\n    end\n    if counter < 0 then\n      return false\n\
    \    end\n  end\n  return counter == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_seen = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"(\"\
    \ then\n      open_seen = open_seen + 1\n    elseif c == \")\" then\n      open_seen\
    \ = open_seen - 1\n      if open_seen < 0 then\n        return false\n      end\n\
    \    end\n  end\n  return open_seen == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local counter = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"(\"\
    \ then\n      counter = counter + 1\n    elseif c == \")\" then\n      counter\
    \ = counter - 1\n    end\n    if counter < 0 then\n      return false\n    end\n\
    \  end\n  return counter == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local check_bracket = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '(' then\n      check_bracket = check_bracket + 1\n    elseif brackets:sub(i,\
    \ i) == ')' then\n      check_bracket = check_bracket - 1\n    end\n    if check_bracket\
    \ < 0 then\n      return false\n    end\n  end\n  return check_bracket == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    if #brackets % 2 ~= 0 then\n        return false\n    end\n    local depth\
    \ = 0\n    for i = 1, #brackets do\n        if brackets:sub(i, i) == '(' then\n\
    \            depth = depth + 1\n        else\n            depth = depth - 1\n\
    \        end\n        if depth < 0 then\n            return false\n        end\n\
    \    end\n    return depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack:new()\n  for i=1, #brackets do\n    local c = brackets:sub(i,i)\n\
    \    if c == '(' then\n      stack:push(c)\n    elseif c == ')' then\n      if\
    \ stack:is_empty() then\n        return false\n      else\n        stack:pop()\n\
    \      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnsdm56cn.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpnsdm56cn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpnsdm56cn.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack()\n    for i=1, #brackets do\n        local bracket =\
    \ brackets:sub(i,i)\n        if bracket == '(' then\n            stack:push(bracket)\n\
    \        elseif bracket == ')' then\n            if stack:empty() then\n     \
    \           return false\n            else\n                stack:pop()\n    \
    \        end\n        end\n    end\n    return stack:empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7z53gi14.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp7z53gi14.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7z53gi14.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- TODO: replace with your code.\n    -- Hint: use the # operator to get\
    \ the length of a string.\n    return brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmsqpgfu.lua:20:\
    \ expected: true, actual: \"()\"\nstack traceback:\n\t/tmp/tmpjmsqpgfu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal function helper(brackets, count)\n\t\tif brackets:len() == 0 then\n\t\t\
    \treturn count == 0\n\t\telseif brackets:len() == 1 then\n\t\t\treturn brackets\
    \ == '(' and count == 1\n\t\telse\n\t\t\tlocal b1, b2 = brackets:sub(1, 1), brackets:sub(2)\n\
    \t\t\tif b1 == '(' then\n\t\t\t\treturn helper(b2, count + 1)\n\t\t\telse\n\t\t\
    \t\treturn count > 0 and helper(b2, count - 1)\n\t\t\tend\n\t\tend\n\tend\n\t\
    return helper(brackets, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7h94klw9.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7h94klw9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvj0wxxwr.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpvj0wxxwr.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local open_seen = 0\n    for c in brackets:gmatch(\".\") do\n        if c\
    \ == \"(\" then\n            open_seen = open_seen + 1\n        elseif c == \"\
    )\" then\n            open_seen = open_seen - 1\n            if open_seen < 0\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return open_seen == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local number_open = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk8v3v2_x.lua:31: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local num_of_left_brackets = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            num_of_left_brackets = num_of_left_brackets + 1\n\
    \        elseif brackets:sub(i, i) == ')' then\n            num_of_left_brackets\
    \ = num_of_left_brackets - 1\n        end\n        if num_of_left_brackets < 0\
    \ then\n            return false\n        end\n    end\n    return num_of_left_brackets\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local left_brackets = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            left_brackets = left_brackets + 1\n        elseif\
    \ brackets:sub(i, i) == ')' then\n            left_brackets = left_brackets -\
    \ 1\n        end\n        if left_brackets < 0 then\n            return false\n\
    \        end\n    end\n    return left_brackets == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack()\n  for b in brackets:gmatch('.') do\n    if b == '('\
    \ then\n      stack:push('(')\n    elseif b == ')' then\n      if stack:is_empty()\
    \ then\n        return false\n      else\n        stack:pop()\n      end\n   \
    \ end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6i11238.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpy6i11238.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpy6i11238.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '('\
    \ then\n      count = count + 1\n    elseif brackets:sub(i, i) == ')' then\n \
    \     count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  error \"TODO\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz2fccs9d.lua:12:\
    \ TODO\nstack traceback:\n\t/tmp/tmpz2fccs9d.lua:12: in local 'candidate'\n\t\
    /tmp/tmpz2fccs9d.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for c in brackets:gmatch(\".\") do\n        if c ==\
    \ \"(\" then\n            table.insert(stack, \")\")\n        elseif c == \")\"\
    \ then\n            if #stack == 0 then\n                return false\n      \
    \      end\n            if stack[#stack] ~= c then\n                return false\n\
    \            end\n            table.remove(stack)\n        end\n    end\n    return\
    \ #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local depth = 0\n    for i=1,#brackets do\n        local b = brackets:sub(i,i)\n\
    \        if b == '(' then\n            depth = depth + 1\n        elseif b ==\
    \ ')' then\n            depth = depth - 1\n        end\n        if depth < 0 then\n\
    \            return false\n        end\n    end\n    return depth == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tlocal open_bracket = '('\n\tlocal close_bracket = ')'\n\t\
    for i = 1, string.len(brackets) do\n\t\tlocal char = string.sub(brackets, i, i)\n\
    \t\tif char == open_bracket then\n\t\t\tcount = count + 1\n\t\telseif char ==\
    \ close_bracket then\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\
    \treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = {}\n  for i = 1, #brackets do\n    local s = brackets:sub(i,\
    \ i)\n    if s == '(' then\n      table.insert(stack, s)\n    elseif s == ')'\
    \ then\n      if #stack == 0 then\n        return false\n      else\n        table.remove(stack)\n\
    \      end\n    end\n  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \t-- build a stack of brackets\n\tlocal s = Stack()\n\tfor c in brackets:gmatch('.')\
    \ do\n\t\tif c == '(' then\n\t\t\ts:push(c)\n\t\telseif c == ')' then\n\t\t\t\
    local popped = s:pop()\n\t\t\tif popped == nil then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn s:size() == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbslpa4jj.lua:13:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpbslpa4jj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbslpa4jj.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- keep track of how many closing brackets we have seen.\n    local seen_close\
    \ = 0\n    -- if we have seen one or more closing brackets, then\n    -- any opening\
    \ bracket is invalid.\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == ')' then\n            seen_close = seen_close + 1\n    \
    \    elseif c == '(' then\n            if seen_close > 0 then\n              \
    \  return false\n            end\n        end\n    end\n    -- if we have more\
    \ opening brackets than closing ones, then the string is invalid.\n    return\
    \ seen_close == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivj8d1uv.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpivj8d1uv.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack:new()\n  for ch in brackets:gmatch('.') do\n    if ch ==\
    \ '(' then\n      stack:push(ch)\n    else\n      stack:pop()\n    end\n  end\n\
    \  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppzb_pukm.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmppzb_pukm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmppzb_pukm.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    if (#brackets == 0) then\n        return true\n    end\n    local c = string.sub(brackets,\
    \ 1, 1)\n    if (c == '(') then\n        return correct_bracketing(string.sub(brackets,\
    \ 2))\n    elseif (c == ')') then\n        return false\n    else\n        return\
    \ correct_bracketing(string.sub(brackets, 2))\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiypuiig4.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiypuiig4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9pkbacwn.lua:31: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal n = string.sub(brackets,\
    \ i, i)\n\t\tif n == '(' then\n\t\t\ttable.insert(stack, n)\n\t\telseif n == ')'\
    \ then\n\t\t\tif #stack == 0 then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\t\
    table.remove(stack)\n\t\t\tend\n\t\tend\n\tend\n\treturn #stack == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for c in brackets:gmatch\".\" do\n        if c == \"\
    (\" then\n            count = count + 1\n        elseif c == \")\" then\n    \
    \        count = count - 1\n        end\n        if count < 0 then\n         \
    \   return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            count = count + 1\n        elseif\
    \ c == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor i = 1, #brackets do\n\t\tlocal char = brackets:sub(i,\
    \ i)\n\t\tif char == '(' then\n\t\t\tcount = count + 1\n\t\telseif char == ')'\
    \ then\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for i=1, #brackets do\n    local c = brackets:sub(i,i)\n\
    \    if c == '(' then\n      count = count + 1\n    elseif c == ')' then\n   \
    \   count = count - 1\n    end\n    if count < 0 then\n      return false\n  \
    \  end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local n = #brackets\n    if n % 2 == 1 then\n        return false\n    end\n\
    \    local left = 0\n    for i = 1, n do\n        local c = brackets:sub(i, i)\n\
    \        if c == '(' then\n            left = left + 1\n        elseif c == ')'\
    \ then\n            left = left - 1\n            if left < 0 then\n          \
    \      return false\n            end\n        else\n            error('Invalid\
    \ character')\n        end\n    end\n    return left == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack:new()\n    for i = 1, #brackets do\n        local c =\
    \ brackets:sub(i, i)\n        if c == '(' then\n            stack:push(c)\n  \
    \      elseif c == ')' then\n            if stack:is_empty() then\n          \
    \      return false\n            else\n                stack:pop()\n         \
    \   end\n        end\n    end\n    return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcbbv9kkx.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpcbbv9kkx.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpcbbv9kkx.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local bracket_stack = {}\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i,\
    \ i)\n    if bracket == '(' then\n      bracket_stack[#bracket_stack + 1] = bracket\n\
    \    elseif bracket == ')' then\n      if bracket_stack[#bracket_stack] == '('\
    \ then\n        bracket_stack[#bracket_stack] = nil\n      else\n        return\
    \ false\n      end\n    end\n  end\n  return #bracket_stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    --TODO\n    local i = 0\n    for k,v in string.gmatch(brackets, \"(()())\"\
    ) do\n        if k == \"(\" then\n            i = i + 1\n        elseif k == \"\
    )\" then\n            i = i - 1\n        end\n    end\n    if i == 0 then\n  \
    \      return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptda3ezyh.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptda3ezyh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local idx, depth = 1, 0\n  while idx <= #brackets do\n    local c = brackets:sub(idx,\
    \ idx)\n    if c == '(' then\n      depth = depth + 1\n    elseif c == ')' then\n\
    \      depth = depth - 1\n      if depth < 0 then\n        return false\n    \
    \  end\n    else\n      error('The string \"' .. brackets .. '\" is invalid')\n\
    \    end\n    idx = idx + 1\n  end\n  return depth == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = {}\n  for c in brackets:gmatch('.') do\n    if c == '(' then\n\
    \      stack[#stack + 1] = '('\n    elseif c == ')' then\n      if #stack == 0\
    \ then\n        return false\n      end\n      stack[#stack] = nil\n    end\n\
    \  end\n  return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for i = 1, #brackets do\n        local symbol = brackets:sub(i,\
    \ i)\n        if symbol == '(' then\n            stack[#stack + 1] = symbol\n\
    \        elseif symbol == ')' then\n            if #stack == 0 then\n        \
    \        return false\n            end\n            stack[#stack] = nil\n    \
    \    end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracket_stack = {}\n    for i = 1, #brackets do\n        local c =\
    \ brackets:sub(i, i)\n        if c == '(' then\n            table.insert(bracket_stack,\
    \ c)\n        elseif c == ')' then\n            if #bracket_stack == 0 then\n\
    \                return false\n            end\n            table.remove(bracket_stack)\n\
    \        end\n    end\n    return #bracket_stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  return brackets:gsub('%(%(%))',''):gsub('%(%(%(%))%)',''):gsub('%(%(%(%))%)%(%(%))',''):gsub('%(%(%(%))%)%(%(%(%))%)',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%))',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%))',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%))',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%))',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)',''):gsub('%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%(%))%)%(%(%))',''):gsub('%(%(%(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk28j4v1_.lua:12: unfinished string near ''''%(%(%(''

    '
  stdout: ''
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    if string.match(brackets, '^()$') then\n        return true\n    elseif string.match(brackets,\
    \ '^()') then\n        return false\n    elseif string.match(brackets, '^(%()')\
    \ then\n        return correct_bracketing(string.sub(brackets, 2))\n    elseif\
    \ string.match(brackets, '^(%b())') then\n        return correct_bracketing(string.sub(brackets,\
    \ 3))\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky3tj5cj.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpky3tj5cj.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracket_count = 0\n    for c in brackets:gmatch('.') do\n        if\
    \ c == '(' then\n            bracket_count = bracket_count + 1\n        elseif\
    \ c == ')' then\n            bracket_count = bracket_count - 1\n        end\n\
    \        if bracket_count < 0 then\n            return false\n        end\n  \
    \  end\n    return bracket_count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- Add your code here.\n    local stack = {}\n    for char in brackets:gmatch('.')\
    \ do\n        if char == '(' then\n            table.insert(stack, '(')\n    \
    \    elseif char == ')' then\n            if #stack == 0 then\n              \
    \  return false\n            else\n                table.remove(stack)\n     \
    \       end\n        end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            count = count + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for i = 1, #brackets do\n        local bracket = brackets:sub(i,\
    \ i)\n        if bracket == '(' then\n            stack[#stack + 1] = '('\n  \
    \      elseif bracket == ')' then\n            if #stack == 0 then\n         \
    \       return false\n            end\n            stack[#stack] = nil\n     \
    \   end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for _, bracket in brackets:gmatch('(.)') do\n      \
    \  if bracket == '(' then\n            count = count + 1\n        elseif bracket\
    \ == ')' then\n            count = count - 1\n        end\n        if count <\
    \ 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1ph71o4.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1ph71o4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_count = 0\n  for i = 1, #brackets do\n    local b = brackets:sub(i,\
    \ i)\n    if b == '(' then\n      open_count = open_count + 1\n    elseif b ==\
    \ ')' then\n      open_count = open_count - 1\n    end\n    if open_count < 0\
    \ then\n      return false\n    end\n  end\n  return open_count == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local c = 0\n    for _, bracket in ipairs(brackets) do\n        if bracket\
    \ == '(' then\n            c = c + 1\n        elseif bracket == ')' then\n   \
    \         c = c - 1\n        end\n        if c < 0 then\n            return false\n\
    \        end\n    end\n    return c == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01cq4mdn.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp01cq4mdn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local n_open = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgd3w_a87.lua:31: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local left = 0\n  for i=1,#brackets do\n    if brackets:sub(i,i) == '(' then\n\
    \      left = left + 1\n    else\n      left = left - 1\n      if left < 0 then\n\
    \        return false\n      end\n    end\n  end\n  return left == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracketing_stack = Stack:new()\n    for char in brackets:gmatch('.')\
    \ do\n        if char == '(' then\n            bracketing_stack:push('(')\n  \
    \      elseif char == ')' then\n            if bracketing_stack:is_empty() then\n\
    \                return false\n            else\n                bracketing_stack:pop()\n\
    \            end\n        end\n    end\n    return bracketing_stack:is_empty()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0t49z0e8.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp0t49z0e8.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0t49z0e8.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local lefts = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            lefts = lefts + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            lefts = lefts - 1\n        end\n        if lefts\
    \ < 0 then\n            return false\n        end\n    end\n    return lefts ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    if not brackets then return true end\n    local c = string.sub(brackets,\
    \ 1, 1)\n    if c == '(' then\n        return correct_bracketing(string.sub(brackets,\
    \ 2), '(')\n    elseif c == ')' then\n        return false\n    else\n       \
    \ return correct_bracketing(string.sub(brackets, 2))\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j4iyatf.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1j4iyatf.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local num_left_parentheses = 0\n    for _, char in ipairs(brackets) do\n\
    \        if char == '(' then\n            num_left_parentheses = num_left_parentheses\
    \ + 1\n        elseif char == ')' then\n            num_left_parentheses = num_left_parentheses\
    \ - 1\n        end\n        if num_left_parentheses < 0 then\n            return\
    \ false\n        end\n    end\n    return num_left_parentheses == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppzcja_of.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppzcja_of.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracket_stack = {}\n    for idx = 1, string.len(brackets) do\n    \
    \    local bracket = string.sub(brackets, idx, idx)\n        if bracket == '('\
    \ then\n            table.insert(bracket_stack, bracket)\n        elseif bracket\
    \ == ')' then\n            if #bracket_stack == 0 then\n                return\
    \ false\n            else\n                table.remove(bracket_stack)\n     \
    \       end\n        end\n    end\n    return #bracket_stack == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local function correct_bracketing_acc(acc, bracket)\n    if acc < 0 then return\
    \ false end\n    if bracket == '(' then return acc + 1 end\n    if bracket ==\
    \ ')' then return acc - 1 end\n    return acc\n  end\n  return brackets:lower():gsub('[^()]',\
    \ ''):foldl(correct_bracketing_acc, 0) == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl3i9wz3u.lua:18:\
    \ attempt to call a nil value (method 'foldl')\nstack traceback:\n\t/tmp/tmpl3i9wz3u.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpl3i9wz3u.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack()\n  for i = 1, #brackets do\n    local br = brackets:sub(i,\
    \ i)\n    if br == '(' then\n      stack:push(br)\n    elseif br == ')' then\n\
    \      if stack:is_empty() then\n        return false\n      else\n        stack:pop()\n\
    \      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbsuut2sa.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpbsuut2sa.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbsuut2sa.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal left = 0\n\tlocal right = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i,\
    \ i) == '(' then\n\t\t\tleft = left + 1\n\t\telseif brackets:sub(i, i) == ')'\
    \ then\n\t\t\tright = right + 1\n\t\t\tif right > left then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn left == right\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            table.insert(stack, 1, c)\n      \
    \  elseif c == ')' then\n            if #stack == 0 then\n                return\
    \ false\n            end\n            table.remove(stack, 1)\n        end\n  \
    \  end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- find all occurrences of \"(\" and \")\"\n    local _,left_brackets = brackets:gsub('%(',\
    \ '')\n    local _,right_brackets = brackets:gsub('%)', '')\n    -- count the\
    \ number of brackets (determine if they are an odd number)\n    local left_rem\
    \ = left_brackets % 2\n    local right_rem = right_brackets % 2\n    -- return\
    \ true if brackets are balanced and all brackets are closed\n    return (left_rem\
    \ == 0 and right_rem == 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48s90fxz.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp48s90fxz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local open  = brackets:gsub('%)', '')\n    local close = brackets:gsub('%(',\
    \ '')\n    return #open == #close\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7bfnb0v.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx7bfnb0v.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local n = 0\n    for c in brackets:gmatch(\".\") do\n        if c == \"(\"\
    \ then\n            n = n + 1\n        elseif c == \")\" then\n            n =\
    \ n - 1\n        end\n        if n < 0 then\n            return false\n      \
    \  end\n    end\n    return n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local depth = 0\n  for _, b in ipairs(brackets) do\n    if b == '(' then\n\
    \      depth = depth + 1\n    elseif b == ')' then\n      depth = depth - 1\n\
    \    end\n    if depth < 0 then\n      return false\n    end\n  end\n  return\
    \ depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppu4p9ptk.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppu4p9ptk.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tassert(type(brackets) == 'string')\n\tlocal num_open = 0\n\tfor c in brackets:gmatch'.'\
    \ do\n\t\tif c == '(' then\n\t\t\tnum_open = num_open + 1\n\t\telseif c == ')'\
    \ then\n\t\t\tnum_open = num_open - 1\n\t\t\tif num_open < 0 then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\tend\n\treturn num_open == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  if brackets == '' then\n    return true\n  elseif brackets:sub(1,1) == '('\
    \ then\n    return correct_bracketing(brackets:sub(2))\n  elseif brackets:sub(1,1)\
    \ == ')' then\n    return correct_bracketing(brackets:sub(2))\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d0tafsz.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9d0tafsz.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for _, b in utf8.codes(brackets) do\n        if b ==\
    \ utf8.codepoint('(') then\n            stack[#stack + 1] = '('\n        elseif\
    \ b == utf8.codepoint(')') then\n            if #stack == 0 then\n           \
    \     return false\n            end\n            stack[#stack] = nil\n       \
    \ end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- Your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqv27gomc.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqv27gomc.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor i = 1, #brackets do\n\t\tlocal b = brackets:sub(i, i)\n\
    \t\tif b == '(' then\n\t\t\tcount = count + 1\n\t\telseif b == ')' then\n\t\t\t\
    count = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local counters = {0, 0}\n  for bracket in brackets:gmatch('.') do\n    if bracket\
    \ == '(' then\n      counters[1] = counters[1] + 1\n    elseif bracket == ')'\
    \ then\n      counters[2] = counters[2] + 1\n    end\n  end\n  return counters[1]\
    \ == counters[2]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pua_uru.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8pua_uru.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local lefts = 0\n  for bracket in brackets:gmatch('%(?') do\n    if bracket\
    \ == '(' then\n      lefts = lefts + 1\n    else\n      lefts = lefts - 1\n  \
    \    if lefts < 0 then\n        return false\n      end\n    end\n  end\n  return\
    \ lefts == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp55k1dlq.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp55k1dlq.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for s in brackets:gmatch('[%(%)]') do\n    if s == '(' then\n\
    \      count = count + 1\n    else\n      count = count - 1\n    end\n    if count\
    \ < 0 then\n      return false\n    end\n  end\n  return count == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local bracket_stack = {}\n  for c in brackets:gmatch\".\" do\n    if c == \"\
    (\" then\n      table.insert(bracket_stack, c)\n    elseif c == \")\" then\n \
    \     if bracket_stack[#bracket_stack] == \"(\" then\n        table.remove(bracket_stack)\n\
    \      else\n        return false\n      end\n    end\n  end\n  return #bracket_stack\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal stack = {}\n\tfor i=1,#brackets do\n\t\tlocal c = brackets:sub(i,i)\n\t\
    \tif c == '(' then\n\t\t\tstack[#stack+1] = c\n\t\telseif c == ')' then\n\t\t\t\
    if #stack == 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tstack[#stack] = nil\n\
    \t\tend\n\tend\n\treturn #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal opened_brackets = 0\n\tfor b in brackets:gmatch('.') do\n\t\tif b == '('\
    \ then\n\t\t\topened_brackets = opened_brackets + 1\n\t\telseif b == ')' then\n\
    \t\t\topened_brackets = opened_brackets - 1\n\t\t\tif opened_brackets < 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn opened_brackets == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack()\n    for i=1,#brackets do\n        local b = brackets:sub(i,i)\n\
    \        if b == '(' then\n            stack:push(b)\n        elseif b == ')'\
    \ then\n            if stack:empty() then\n                return false\n    \
    \        else\n                stack:pop()\n            end\n        end\n   \
    \ end\n    return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_pr_bnu.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp0_pr_bnu.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0_pr_bnu.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- this isn't good enough, since one closing bracket can match more than\
    \ one opening bracket\n    --return brackets:match(\"^%(\"):len() == brackets:match(\"\
    %)\"):len()\n    local open = 0\n    for i=1,#brackets do\n        local c = brackets:sub(i,i)\n\
    \        if c == \"(\" then\n            open = open + 1\n        elseif c ==\
    \ \")\" then\n            open = open - 1\n            if open < 0 then\n    \
    \            return false\n            end\n        end\n    end\n    return open\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local c = 0\n    for i=1, #brackets do\n        if brackets:sub(i,i) == '('\
    \ then\n            c = c + 1\n        elseif brackets:sub(i,i) == ')' then\n\
    \            c = c - 1\n        end\n        if c < 0 then\n            return\
    \ false\n        end\n    end\n    return c == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal len = string.len(brackets)\n\tlocal tally = 0\n\tlocal last_char = ''\n\
    \tfor i = 1, len do\n\t\tlocal char = string.sub(brackets, i, i)\n\t\tif char\
    \ == '(' then\n\t\t\ttally = tally + 1\n\t\telseif char == ')' then\n\t\t\ttally\
    \ = tally - 1\n\t\t\tif tally < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\t\tlast_char = char\n\tend\n\tif last_char == '(' then\n\t\treturn false\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ikvm180.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_ikvm180.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local num_open = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            num_open = num_open + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            num_open = num_open - 1\n        end\n        if\
    \ num_open < 0 then\n            return false\n        end\n    end\n    return\
    \ num_open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            count = count + 1\n        elseif\
    \ c == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  return brackets:gsub('%(%(%)%)', '') == ''\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84tqdgol.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp84tqdgol.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '('\
    \ then\n\t\t\tcount = count + 1\n\t\telseif brackets:sub(i, i) == ')' then\n\t\
    \t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- TODO: Implement me\n    local bracket_stack = {}\n    for i = 1, string.len(brackets)\
    \ do\n        if string.sub(brackets, i, i) == '(' then\n            table.insert(bracket_stack,\
    \ '(')\n        elseif string.sub(brackets, i, i) == ')' then\n            if\
    \ #bracket_stack > 0 then\n                table.remove(bracket_stack)\n     \
    \       else\n                return false\n            end\n        end\n   \
    \ end\n    if #bracket_stack == 0 then\n        return true\n    else\n      \
    \  return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local i = 1\n    while i <= #brackets do\n        if brackets:sub(i, i) ==\
    \ '(' then\n            local depth = 1\n            local j = i + 1\n       \
    \     while depth > 0 and j <= #brackets do\n                if brackets:sub(j,\
    \ j) == '(' then\n                    depth = depth + 1\n                elseif\
    \ brackets:sub(j, j) == ')' then\n                    depth = depth - 1\n    \
    \            end\n                j = j + 1\n            end\n            if depth\
    \ == 0 then\n                -- Delete the sub-string between \"(\" and \")\"\
    .\n                brackets = brackets:sub(1, i - 1) .. brackets:sub(j)\n    \
    \        else\n                return false\n            end\n        else\n \
    \           i = i + 1\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6qmdcwx.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb6qmdcwx.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  if #brackets % 2 ~= 0 then\n    return false\n  end\n  local left = 0\n  for\
    \ i = 1, #brackets do\n    if brackets:sub(i, i) == '(' then\n      left = left\
    \ + 1\n    else\n      left = left - 1\n    end\n    if left < 0 then\n      return\
    \ false\n    end\n  end\n  return left == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for char in brackets:gmatch(\".\") do\n        if char\
    \ == \"(\" then\n            table.insert(stack, char)\n        elseif char ==\
    \ \")\" then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  -- TODO: Task 1\n  local count = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '(' then\n      count = count + 1\n    elseif brackets:sub(i, i) == ')'\
    \ then\n      count = count - 1\n    end\n    if count < 0 then\n      return\
    \ false\n    end\n  end\n  if count == 0 then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23ngzz4k.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp23ngzz4k.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = {}\n  for i=1,#brackets do\n    local c = brackets:sub(i,i)\n\
    \    if c == '(' then\n      stack[#stack+1] = '('\n    elseif c == ')' then\n\
    \      if #stack == 0 then\n        return false\n      end\n      local last\
    \ = stack[#stack]\n      stack[#stack] = nil\n      if last ~= '(' then\n    \
    \    return false\n      end\n    end\n  end\n  return #stack == 0\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  return #brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog85zrj4.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpog85zrj4.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            count = count + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptsxy0ryr.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptsxy0ryr.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    return #brackets == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwvipmd6.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdwvipmd6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for i = 1, #brackets do\n        local bracket = brackets:sub(i,\
    \ i)\n        if bracket == '(' then\n            table.insert(stack, bracket)\n\
    \        elseif bracket == ')' then\n            if #stack == 0 then\n       \
    \         return false\n            end\n            table.remove(stack)\n   \
    \     end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local n = 0\n  for c in brackets:gmatch\".\" do\n    if c == \"(\" then\n \
    \     n = n + 1\n    elseif c == \")\" then\n      n = n - 1\n    end\n    if\
    \ n < 0 then\n      return false\n    end\n  end\n  return n == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local n = 0\n    for b in brackets:gmatch('.') do\n        if b == '(' then\n\
    \            n = n + 1\n        elseif b == ')' then\n            n = n - 1\n\
    \        end\n        if n < 0 then\n            return false\n        end\n \
    \   end\n    return n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor _, bracket in ipairs(utils.utf8_chars(brackets)) do\n\
    \t\tif bracket == '(' then\n\t\t\tcount = count + 1\n\t\telseif bracket == ')'\
    \ then\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\treturn false\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyqrg919c.lua:13:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpyqrg919c.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpyqrg919c.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for c in brackets:gmatch('%(') do\n        count = count\
    \ + 1\n    end\n    for c in brackets:gmatch('%)') do\n        count = count -\
    \ 1\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm405xydb.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm405xydb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack()\n    for i = 1, #brackets do\n        local bracket\
    \ = brackets:sub(i, i)\n        if bracket == '(' then\n            stack:push(bracket)\n\
    \        elseif bracket == ')' then\n            if stack:is_empty() then\n  \
    \              return false\n            else\n                stack:pop()\n \
    \           end\n        end\n    end\n    return stack:is_empty()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaq72993s.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpaq72993s.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpaq72993s.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local in_brackets = 0\n  for char in brackets:gmatch\".\" do\n    if char ==\
    \ \"(\" then\n      in_brackets = in_brackets + 1\n    elseif char == \")\" then\n\
    \      in_brackets = in_brackets - 1\n    end\n    if in_brackets < 0 then\n \
    \     return false\n    end\n  end\n  return in_brackets == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal depth = 0\n\tfor bracket in brackets:gmatch(\".\") do\n\t\tif bracket\
    \ == \"(\" then\n\t\t\tdepth = depth + 1\n\t\telseif bracket == \")\" then\n\t\
    \t\tdepth = depth - 1\n\t\tend\n\t\tif depth < 0 then\n\t\t\treturn false\n\t\t\
    end\n\tend\n\treturn depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for ch in brackets:gmatch('.') do\n    if ch == '(' then\n\
    \      count = count + 1\n    elseif ch == ')' then\n      count = count - 1\n\
    \    end\n    if count < 0 then\n      return false\n    end\n  end\n  return\
    \ count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- Reduce number of open brackets at each closing bracket\n    local open_count\
    \ = 0\n    for _, bracket in ipairs(brackets) do\n        if bracket == '(' then\n\
    \            open_count = open_count + 1\n        elseif bracket == ')' then\n\
    \            open_count = open_count - 1\n        end\n        if open_count <\
    \ 0 then\n            return false\n        end\n    end\n    -- Check if there\
    \ are any open brackets left\n    return open_count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoi6go11i.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoi6go11i.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal n = #brackets\n\tlocal opened = 0\n\tfor i = 1, n do\n\t\tif brackets:sub(i,\
    \ i) == '(' then\n\t\t\topened = opened + 1\n\t\telse\n\t\t\topened = opened -\
    \ 1\n\t\t\tif opened < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn opened == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local num_open = 0\n  for i = 1, brackets:len() do\n    local bracket = brackets:sub(i,\
    \ i)\n    if bracket == '(' then\n      num_open = num_open + 1\n    elseif bracket\
    \ == ')' then\n      num_open = num_open - 1\n    end\n    if num_open < 0 then\n\
    \      return false\n    end\n  end\n  return num_open == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal n = 0\n\tfor i = 1, #brackets do\n\t\tlocal char = brackets:sub(i, i)\n\
    \t\tif char == '(' then\n\t\t\tn = n + 1\n\t\telseif char == ')' then\n\t\t\t\
    n = n - 1\n\t\tend\n\t\tif n < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\t\
    return n == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  -- here is the code:\n  local match=0\n  local br\n  for i=1,brackets:len()\
    \ do\n    br=brackets:sub(i,i)\n    if br=='(' then\n      match=match+1\n   \
    \ elseif br==')' then\n      match=match-1\n    end\n    if match<0 then\n   \
    \   return false\n    end\n  end\n  if match~=0 then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor _,char in pairs({brackets:byte(1, -1)}) do\n\t\tif char\
    \ == 40 then\n\t\t\tcount = count + 1\n\t\telseif char == 41 then\n\t\t\tcount\
    \ = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\t\
    end\n\treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local bracketing = 0\n  for c in brackets:gmatch('.') do\n    if c == '(' then\n\
    \      bracketing = bracketing + 1\n    elseif c == ')' then\n      bracketing\
    \ = bracketing - 1\n    end\n    if bracketing < 0 then\n      return false\n\
    \    end\n  end\n  return bracketing == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local matches = 0\n  for char in brackets:gmatch('.') do\n    if char == '('\
    \ then\n      matches = matches + 1\n    elseif char == ')' then\n      matches\
    \ = matches - 1\n    end\n    if matches < 0 then\n      return false\n    end\n\
    \  end\n  return matches == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local pos_open = {}\n  local pos_close = {}\n  local pos_close_count = 0\n\
    \  local pos_open_count = 0\n  for i = 1, #brackets do\n    if brackets:sub(i,\
    \ i) == '(' then\n      pos_open_count = pos_open_count + 1\n      pos_open[pos_open_count]\
    \ = i\n    elseif brackets:sub(i, i) == ')' then\n      pos_close_count = pos_close_count\
    \ + 1\n      pos_close[pos_close_count] = i\n    end\n  end\n  if pos_open_count\
    \ ~= pos_close_count then\n    return false\n  end\n  for i = 1, pos_open_count\
    \ do\n    if pos_open[i] > pos_close[i] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        local b = brackets:sub(i,\
    \ i)\n        if b == '(' then\n            count = count + 1\n        elseif\
    \ b == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for _, bracket in pairs(brackets) do\n        if bracket\
    \ == '(' then\n            count = count + 1\n        elseif bracket == ')' then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsge7u2kt.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpsge7u2kt.lua:13: in local 'candidate'\n\t/tmp/tmpsge7u2kt.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for c in brackets:gmatch\".\" do\n        if c == \"\
    (\" then\n            count = count + 1\n        elseif c == \")\" then\n    \
    \        count = count - 1\n        end\n        if count < 0 then\n         \
    \   return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '('\
    \ then\n      count = count + 1\n    elseif brackets:sub(i, i) == ')' then\n \
    \     count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local s, c\n    while brackets ~= \"\" do\n        s, c = brackets:sub(1,\
    \ 1), brackets:sub(2, 2)\n        if s == \"(\" and c == \")\" then\n        \
    \    brackets = brackets:sub(3)\n        elseif s == \"(\" and c ~= \")\" then\n\
    \            return false\n        elseif s == \")\" and c == \"(\" then\n   \
    \         brackets = brackets:sub(3)\n        elseif s == \")\" and c ~= \"(\"\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3jcluiw.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy3jcluiw.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal stack = 0\n\tfor c in brackets:gmatch('.') do\n\t\tif c == '(' then\n\t\
    \t\tstack = stack + 1\n\t\telseif c == ')' then\n\t\t\tstack = stack - 1\n\t\t\
    \tif stack < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack:new()\n  for i = 1, #brackets do\n    local char = brackets:sub(i,\
    \ i)\n    if char == '(' then\n      stack:push(char)\n    elseif char == ')'\
    \ then\n      if stack:is_empty() then\n        return false\n      else\n   \
    \     stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2d8t82pc.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp2d8t82pc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp2d8t82pc.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local counter = 0\n    for b in brackets:gmatch'()' do\n        if brackets:sub(b,b)\
    \ == '(' then\n            counter = counter + 1\n        else\n            counter\
    \ = counter - 1\n        end\n        if counter < 0 then\n            return\
    \ false\n        end\n    end\n    return counter == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16l5qhrs.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp16l5qhrs.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack:new()\n  for bracket in brackets:gmatch(\".\") do\n   \
    \ if bracket == \"(\" then\n      stack:push(bracket)\n    elseif bracket == \"\
    )\" then\n      if stack:is_empty() then\n        return false\n      else\n \
    \       stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprsqr4sa5.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmprsqr4sa5.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprsqr4sa5.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local matched = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            matched = matched + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            matched = matched - 1\n        end\n        if matched\
    \ < 0 then\n            return false\n        end\n    end\n    return matched\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local level = 0\n  for c in brackets:gmatch('[()]') do\n    if c == '(' then\n\
    \      level = level + 1\n    elseif c == ')' then\n      level = level - 1\n\
    \    end\n    if level < 0 then\n      return false\n    end\n  end\n  return\
    \ level == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = {}\n  for s in brackets:gmatch('.') do\n    if s == '(' then\n\
    \      table.insert(stack, s)\n    elseif s == ')' then\n      local top = table.remove(stack)\n\
    \      if top ~= '(' then\n        return false\n      end\n    end\n  end\n \
    \ return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for _, symbol in ipairs(split(brackets)) do\n    if symbol\
    \ == '(' then\n      count = count + 1\n    elseif symbol == ')' then\n      count\
    \ = count - 1\n    end\n    if count < 0 then\n      return false\n    end\n \
    \ end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydzu33ep.lua:13:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpydzu33ep.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpydzu33ep.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local i, n = 1, #brackets\n    while i <= n do\n        local count = 0\n\
    \        while brackets:match(\"%b()\", i) do\n            count = count + 1\n\
    \            i = i + 2\n        end\n        if brackets:match(\"%b()\", i) then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnvd41cy.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnnvd41cy.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            count = count + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprptjryf5.lua:18:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmprptjryf5.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local n = 0\n    for i = 1, #brackets do\n        local c = brackets:sub(i,\
    \ i)\n        if c == '(' then\n            n = n + 1\n        elseif c == ')'\
    \ then\n            n = n - 1\n        end\n        if n < 0 then\n          \
    \  return false\n        end\n    end\n    return n == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal n_left = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '('\
    \ then\n\t\t\tn_left = n_left + 1\n\t\telseif brackets:sub(i, i) == ')' then\n\
    \t\t\tn_left = n_left - 1\n\t\t\tif n_left < 0 then\n\t\t\t\treturn false\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn n_left == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal depth = 0\n\tfor i = 1, #brackets do\n\t\tlocal c = brackets:sub(i, i)\n\
    \t\tif c == '(' then\n\t\t\tdepth = depth + 1\n\t\telseif c == ')' then\n\t\t\t\
    depth = depth - 1\n\t\t\tif depth < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local function helper(s, p)\n    if p == 0 then return true end\n    local\
    \ c, x = s:sub(p, p), s:sub(p + 1, p + 1)\n    if c == '(' then\n      if x ==\
    \ ')' then\n        return helper(s, p - 1)\n      else\n        return helper(s,\
    \ p - 1) and helper(s, p - 2)\n      end\n    elseif c == ')' then\n      return\
    \ helper(s, p - 1)\n    end\n  end\n  return helper(brackets, #brackets)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa13o9wso.lua:32:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpa13o9wso.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracket_stack = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp65h7v4s9.lua:31: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracket_count = 0\n    for b in brackets:gmatch('%(') do\n        bracket_count\
    \ = bracket_count + 1\n    end\n    for b in brackets:gmatch('%)') do\n      \
    \  bracket_count = bracket_count - 1\n    end\n    return bracket_count == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg2s1751r.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg2s1751r.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal brackets_stack = {}\n\tfor i = 1, #brackets do\n\t\tlocal bracket = brackets:sub(i,\
    \ i)\n\t\tif bracket == '(' then\n\t\t\tbrackets_stack[#brackets_stack + 1] =\
    \ bracket\n\t\telseif bracket == ')' then\n\t\t\tif #brackets_stack == 0 then\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\t\tbrackets_stack[#brackets_stack] = nil\n\
    \t\tend\n\tend\n\treturn #brackets_stack == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local counter = 0\n    for c in brackets:gmatch('.') do\n        if c ==\
    \ '(' then\n            counter = counter + 1\n        elseif c == ')' then\n\
    \            counter = counter - 1\n        end\n        if counter < 0 then\n\
    \            return false\n        end\n    end\n    return counter == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opens = 0\n  for i = 1, #brackets do\n    local c = brackets:sub(i, i)\n\
    \    if c == '(' then\n      opens = opens + 1\n    elseif c == ')' then\n   \
    \   opens = opens - 1\n      if opens < 0 then\n        return false\n      end\n\
    \    end\n  end\n  return opens == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack:new()\n    for c in brackets:gmatch(\".\") do\n     \
    \   if c == \"(\" then\n            stack:push(\"(\")\n        elseif c == \"\
    )\" then\n            if stack:empty() then\n                return false\n  \
    \          else\n                stack:pop()\n            end\n        end\n \
    \   end\n    return stack:empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp98x1anbq.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp98x1anbq.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp98x1anbq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor char in brackets:gmatch\".\" do\n\t\tif char == \"(\"\
    \ then\n\t\t\tcount = count + 1\n\t\telseif char == \")\" then\n\t\t\tcount =\
    \ count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\
    \treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = {0}\n  for i = 1, #brackets do\n    if brackets:sub(i, i) ==\
    \ '(' then\n      stack[#stack + 1] = 0\n    else\n      stack[#stack] = stack[#stack]\
    \ + 1\n      while stack[#stack] > 1 do\n        stack[#stack - 1] = stack[#stack\
    \ - 1] + 1\n        table.remove(stack)\n      end\n    end\n  end\n  return stack[1]\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5lpk4kj.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph5lpk4kj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local t = 0\n  for c in brackets:gmatch(\".\") do\n    if c == \"(\" then\n\
    \      t = t + 1\n    elseif c == \")\" then\n      t = t - 1\n    end\n    if\
    \ t < 0 then\n      return false\n    end\n  end\n  return t == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for b in brackets:gmatch('.') do\n        if b == '('\
    \ then\n            count = count + 1\n        elseif b == ')' then\n        \
    \    count = count - 1\n        end\n        if count < 0 then\n            return\
    \ false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for i = 1, #brackets do\n        local ch = brackets:sub(i,\
    \ i)\n        if ch == '(' then\n            stack[#stack + 1] = '('\n       \
    \ elseif ch == ')' then\n            if #stack == 0 then\n                return\
    \ false\n            end\n            stack[#stack] = nil\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    -- count brackets\n    local counter = 0\n    -- iterate on each bracket\n\
    \    for letter in brackets:gmatch(\".\") do\n        -- a opening bracket\n \
    \       if letter == \"(\" then\n            counter = counter + 1\n        --\
    \ a closing bracket\n        elseif letter == \")\" then\n            counter\
    \ = counter - 1\n        -- other\n        else\n            error(\"Unknown bracket\
    \ \" .. letter)\n        end\n        -- invalid state\n        if counter < 0\
    \ then\n            return false\n        end\n    end\n    -- valid state\n \
    \   return counter == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i=1, #brackets do\n        local b = brackets:sub(i,i)\n\
    \        if b == '(' then\n            count = count + 1\n        elseif b ==\
    \ ')' then\n            count = count - 1\n        end\n        if count < 0 then\n\
    \            return false\n        end\n    end\n    return count == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '('\
    \ then\n      open = open + 1\n    elseif brackets:sub(i, i) == ')' then\n   \
    \   open = open - 1\n    end\n    if open < 0 then\n      return false\n    end\n\
    \  end\n  return open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack()\n  for bracket in brackets:gmatch('.') do\n    if bracket\
    \ == '(' then\n      stack:push(bracket)\n    elseif bracket == ')' then\n   \
    \   local top = stack:pop()\n      if top ~= '(' then\n        return false\n\
    \      end\n    end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphd88l15m.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmphd88l15m.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphd88l15m.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for i = 1, #brackets do\n    local b = brackets:sub(i, i)\n\
    \    if b == '(' then\n      count = count + 1\n    elseif b == ')' then\n   \
    \   count = count - 1\n    end\n    if count < 0 then\n      return false\n  \
    \  end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open = 0\n  for p in brackets:gmatch('.') do\n    if p == '(' then\n\
    \      open = open + 1\n    elseif p == ')' then\n      open = open - 1\n    end\n\
    \    if open < 0 then\n      return false\n    end\n  end\n  return open == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal open = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '('\
    \ then\n\t\t\topen = open + 1\n\t\telseif brackets:sub(i, i) == ')' then\n\t\t\
    \topen = open - 1\n\t\t\tif open < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\
    \tend\n\tend\n\treturn open == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack:new()\n  for i = 1, #brackets do\n    local bracket = brackets:sub(i,\
    \ i)\n    if bracket == '(' then\n      stack:push(1)\n    elseif bracket == ')'\
    \ then\n      if stack:is_empty() then\n        return false\n      else\n   \
    \     stack:pop()\n      end\n    end\n  end\n  return stack:is_empty()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpq836si.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpmpq836si.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmpq836si.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local left, right = 0, 0\n    for char in brackets:gmatch('.') do\n     \
    \   if char == '(' then\n            left = left + 1\n        elseif char == ')'\
    \ then\n            right = right + 1\n        end\n        if right > left then\n\
    \            return false\n        end\n    end\n    return left == right\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local count = 0\n  for i = 1, #brackets do\n    if brackets:sub(i, i) == '('\
    \ then\n      count = count + 1\n    elseif brackets:sub(i, i) == ')' then\n \
    \     count = count - 1\n    end\n    if count < 0 then\n      return false\n\
    \    end\n  end\n  return count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978929
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for c in brackets:gmatch\".\" do\n        if c == \"\
    (\" then\n            table.insert(stack, c)\n        elseif c == \")\" then\n\
    \            if #stack == 0 then\n                return false\n            else\n\
    \                table.remove(stack)\n            end\n        end\n    end\n\
    \    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local balance = 0\n    for i = 1, #brackets do\n        local bracket = brackets:sub(i,\
    \ i)\n        if bracket == '(' then\n            balance = balance + 1\n    \
    \    elseif bracket == ')' then\n            balance = balance - 1\n        end\n\
    \        if balance < 0 then\n            return false\n        end\n    end\n\
    \    return balance == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \t-- TODO: return whether brackets is a bracket string without extra closing brackets.\n\
    \terror(\"TODO: implement this function\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4rmo02hm.lua:13:\
    \ TODO: implement this function\nstack traceback:\n\t/tmp/tmp4rmo02hm.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp4rmo02hm.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal level = 0\n\tfor i=1, #brackets do\n\t\tif brackets:sub(i,i) == '(' then\n\
    \t\t\tlevel = level + 1\n\t\telseif brackets:sub(i,i) == ')' then\n\t\t\tlevel\
    \ = level - 1\n\t\t\tif level < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn level == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            count = count + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            count = count - 1\n        end\n        if count\
    \ < 0 then\n            return false\n        end\n    end\n    return count ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = Stack:new()\n    for _, b in ipairs(brackets) do\n        if\
    \ b == '(' then\n            stack:push(b)\n        elseif b == ')' then\n   \
    \         local bracket = stack:pop()\n            if bracket ~= '(' then\n  \
    \              return false\n            end\n        end\n    end\n    return\
    \ stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0du_iu7.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpc0du_iu7.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpc0du_iu7.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local n = 0\n  for i=1,#brackets do\n    local b = brackets:sub(i,i)\n    if\
    \ b == '(' then\n      n = n + 1\n    elseif b == ')' then\n      n = n - 1\n\
    \    end\n    if n < 0 then\n      return false\n    end\n  end\n  return n ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for i=1,string.len(brackets) do\n        local char\
    \ = string.sub(brackets, i, i)\n        if char == '(' then\n            count\
    \ = count + 1\n        elseif char == ')' then\n            count = count - 1\n\
    \        end\n        if count < 0 then\n            return false\n        end\n\
    \    end\n    return count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal stack = Stack()\n\tfor bracket in brackets:gmatch('.') do\n\t\tif bracket\
    \ == '(' then\n\t\t\tstack:push(bracket)\n\t\telseif bracket == ')' then\n\t\t\
    \tif stack:is_empty() then\n\t\t\t\treturn false\n\t\t\telse\n\t\t\t\tstack:pop()\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn stack:is_empty()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7w2tpvea.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmp7w2tpvea.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7w2tpvea.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack:new()\n  for c in brackets:gmatch('.') do\n    if c ==\
    \ '(' then\n      stack:push(c)\n    elseif c == ')' then\n      if stack:is_empty()\
    \ then\n        return false\n      else\n        stack:pop()\n      end\n   \
    \ end\n  end\n  return stack:is_empty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoykk7rqm.lua:12:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpoykk7rqm.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpoykk7rqm.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal open_brackets = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i)\
    \ == '(' then\n\t\t\topen_brackets = open_brackets + 1\n\t\telseif brackets:sub(i,\
    \ i) == ')' then\n\t\t\topen_brackets = open_brackets - 1\n\t\tend\n\t\tif open_brackets\
    \ < 0 then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn open_brackets == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal count = 0\n\tfor i=1, #brackets do\n\t\tlocal char = brackets:sub(i,i)\n\
    \t\tif char == '(' then\n\t\t\tcount = count + 1\n\t\telseif char == ')' then\n\
    \t\t\tcount = count - 1\n\t\tend\n\t\tif count < 0 then\n\t\t\treturn false\n\t\
    \tend\n\tend\n\treturn count == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local bracket_stack = {}\n    local opener_to_closer = {\n        ['('] =\
    \ ')',\n        ['['] = ']',\n        ['{'] = '}',\n    }\n    for b in brackets:gmatch('.')\
    \ do\n        if opener_to_closer[b] then\n            table.insert(bracket_stack,\
    \ b)\n        else\n            local last_bracket = table.remove(bracket_stack)\n\
    \            if opener_to_closer[last_bracket] ~= b then\n                return\
    \ false\n            end\n        end\n    end\n    return #bracket_stack == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal depth = 0\n\tfor c in brackets:gmatch(\".\") do\n\t\tif c == \"(\" then\n\
    \t\t\tdepth = depth + 1\n\t\telseif c == \")\" then\n\t\t\tdepth = depth - 1\n\
    \t\t\tif depth < 0 then\n\t\t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ depth == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local opening = 0\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            opening = opening + 1\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            opening = opening - 1\n        end\n        if opening\
    \ < 0 then\n            return false\n        end\n    end\n    return opening\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  if brackets == \"\" then\n    return true\n  elseif brackets:sub(1,1) == \"\
    )\" then\n    return false\n  elseif brackets:sub(1,1) == \"(\" then\n    local\
    \ idx = brackets:find(\")\")\n    if idx == nil then\n      return false\n   \
    \ else\n      return correct_bracketing(brackets:sub(idx+1))\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec8v_sj0.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpec8v_sj0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local balance = 0\n    for c in brackets:gmatch('.') do\n        if c ==\
    \ '(' then\n            balance = balance + 1\n        elseif c == ')' then\n\
    \            balance = balance - 1\n        end\n        if balance < 0 then\n\
    \            return false\n        end\n    end\n    return balance == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    if brackets == '' then\n        return true\n    elseif brackets:sub(1, 1)\
    \ == '(' then\n        return correct_bracketing(brackets:sub(2))\n    elseif\
    \ brackets:sub(1, 1) == ')' then\n        return false\n    else\n        error('string\
    \ of brackets must only contain \"(\" and \")\"')\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra9mvkhh.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpra9mvkhh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local opening_count = 0\n    for c in brackets:gmatch('.') do\n        if\
    \ c == '(' then\n            opening_count = opening_count + 1\n        elseif\
    \ c == ')' then\n            opening_count = opening_count - 1\n        end\n\
    \        if opening_count < 0 then\n            return false\n        end\n  \
    \  end\n    return opening_count == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal counter = 0\n\tfor i = 1, #brackets do\n\t\tif brackets:sub(i, i) == '('\
    \ then\n\t\t\tcounter = counter + 1\n\t\telseif brackets:sub(i, i) == ')' then\n\
    \t\t\tcounter = counter - 1\n\t\tend\n\t\tif counter < 0 then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn counter == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local b = brackets:gsub('%b()', '')\n  local l = #b\n  if l > 0 then\n    b\
    \ = correct_bracketing(b)\n  end\n  return b\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9_cnpp5.lua:23:\
    \ expected: true, actual: \"\"\nstack traceback:\n\t/tmp/tmpk9_cnpp5.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  error(\"TODO\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqxicaa79.lua:12:\
    \ TODO\nstack traceback:\n\t/tmp/tmpqxicaa79.lua:12: in local 'candidate'\n\t\
    /tmp/tmpqxicaa79.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local index = 0\n    local balance = 0\n    while index <= #brackets do\n\
    \        local char = brackets:sub(index, index)\n        if char == '(' then\n\
    \            balance = balance + 1\n        elseif char == ')' then\n        \
    \    balance = balance - 1\n        end\n        if balance < 0 then\n       \
    \     return false\n        end\n        index = index + 1\n    end\n    return\
    \ balance == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('()'), true)\n\
    \    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  -- add code here\n  \n  local brack = 0\n  for i = 1, #brackets do\n    if\
    \ brackets:sub(i,i) == \"(\" then\n      brack = brack + 1\n    else\n      brack\
    \ = brack - 1\n    end\n    if brack < 0 then return false end\n  end\n  if brack\
    \ == 0 then return true else return false end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local count = 0\n    for char in brackets:gmatch(\".\") do\n        if char\
    \ == \"(\" then\n            count = count + 1\n        elseif char == \")\" then\n\
    \            count = count - 1\n        end\n        if count < 0 then\n     \
    \       return false\n        end\n    end\n    return count == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local stack = Stack()\n  for char in brackets:gmatch\".\" do\n    if char ==\
    \ \"(\" then\n      stack:push()\n    elseif char == \")\" then\n      if stack:empty()\
    \ then\n        return false\n      else\n        stack:pop()\n      end\n   \
    \ end\n  end\n  return stack:empty()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7fcgfhs.lua:12:\
    \ attempt to call a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpa7fcgfhs.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpa7fcgfhs.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local level = 0\n    for i=1, #brackets do\n        local c = brackets:sub(i,i)\n\
    \        if c == '(' then\n            level = level + 1\n        elseif c ==\
    \ ')' then\n            level = level - 1\n        end\n        if level < 0 then\n\
    \            return false\n        end\n    end\n    return level == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \tlocal i, c = 0, 0\n\tfor k, char in ipairs(brackets) do\n\t\tif char == '('\
    \ then\n\t\t\ti = i + 1\n\t\telseif char == ')' then\n\t\t\tc = c + 1\n\t\tend\n\
    \t\tif c > i then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn c == i\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3hdo59f.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo3hdo59f.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local depth = 0\n    for c in brackets:gmatch('.') do\n        if c == '('\
    \ then\n            depth = depth + 1\n        elseif c == ')' then\n        \
    \    depth = depth - 1\n        end\n        if depth < 0 then\n            return\
    \ false\n        end\n    end\n    return depth == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
- exit_code: 1
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    assert(type(brackets) == 'string')\n    -- TODO: implement this\n    local\
    \ bracket_stack = Stack:new()\n    for i = 1, #brackets do\n        if brackets:sub(i,\
    \ i) == '(' then\n            bracket_stack:push('(')\n        elseif brackets:sub(i,\
    \ i) == ')' then\n            if bracket_stack:is_empty() then\n             \
    \   return false\n            else\n                bracket_stack:pop()\n    \
    \        end\n        end\n    end\n    return bracket_stack:is_empty()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
    \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
    \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq56fdtf5.lua:14:\
    \ attempt to index a nil value (global 'Stack')\nstack traceback:\n\t/tmp/tmpq56fdtf5.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpq56fdtf5.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659978930
- exit_code: 0
  program: "-- brackets is a string of \"(\" and \")\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
    -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
    -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \    local stack = {}\n    for char in brackets:gmatch(\".\") do\n        if char\
    \ == \"(\" then\n            table.insert(stack, char)\n        elseif char ==\
    \ \")\" then\n            if #stack == 0 then\n                return false\n\
    \            else\n                table.remove(stack)\n            end\n    \
    \    end\n    end\n    return #stack == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('()'),\
    \ true)\n    lu.assertEquals(candidate('(()())'), true)\n    lu.assertEquals(candidate('()()(()())()'),\
    \ true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'), true)\n\
    \    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
    \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
    \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
    \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659978930
