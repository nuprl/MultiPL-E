name: HumanEval_99_closest_integer
language: lua
prompt: "-- Create a function that takes a value (string) representing a number\n\
  -- and returns the closest integer to it. If the number is equidistant\n-- from\
  \ two integers, round it away from zero.\n-- Examples\n-- >>> closest_integer('10')\n\
  -- 10\n-- >>> closest_integer('15.3')\n-- 15\n-- Note:\n-- Rounding away from zero\
  \ means that if the given number is equidistant\n-- from two integers, the one you\
  \ should return is the one that is the\n-- farthest from zero. For example closest_integer(\"\
  14.5\") should\n-- return 15 and closest_integer(\"-14.5\") should return -15.\n\
  local function closest_integer(value)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = closest_integer\n\
  \    lu.assertEquals(candidate('10'), 10)\n    lu.assertEquals(candidate('14.5'),\
  \ 15)\n    lu.assertEquals(candidate('-15.5'), -16)\n    lu.assertEquals(candidate('15.3'),\
  \ 15)\n    lu.assertEquals(candidate('0'), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- TODO: implement this function\nend", "  local number = tonumber(value)\n\
    \  if number == nil then\n    return nil\n  end\n  local result = 0\n  if number\
    \ > 0 then\n    result = math.floor(number + 0.5)\n  else\n    result = math.ceil(number\
    \ - 0.5)\n  end\n  return result\nend", "    -- remove all characters that are\
    \ not digits\n    -- and parse value to a number\n    local value = tonumber(value:gsub(\"\
    %D\", \"\"))\n    -- if it is nil, then the input was not a number\n    if not\
    \ value then\n        return 0\n    end\n    -- get the decimal part of the number\n\
    \    local decimal = value - math.floor(value)\n    -- if the decimal part is\
    \ larger than 0.5, round up\n    if decimal > 0.5 then\n        return math.ceil(value)\n\
    \    -- if the decimal part is smaller than 0.5, round down\n    elseif decimal\
    \ < 0.5 then\n        return math.floor(value)\n    -- if the decimal part is\
    \ exactly 0.5, round away from zero\n    else\n        return math.floor(value\
    \ * 0.5)\n    end\nend", "    local num = tonumber(value)\n    if num > 0 then\n\
    \        return math.floor(num + 0.5)\n    else\n        return math.ceil(num\
    \ - 0.5)\n    end\nend", "    local num = tonumber(value)\n    if not num then\n\
    \        return nil\n    end\n    return num + (num > 0 and -0.5 or 0.5)\nend",
  "  if not value then return nil end\n  return math.floor(tonumber(value) + 0.5)\n\
    end", "    return math.floor(value + 0.5)\nend", "    return math.floor(value\
    \ + 0.5)\nend", "    return math.floor(tonumber(value) + 0.5)\nend", end, "\t\
    return math.floor(value + 0.5)\nend", "  -- your code here\nend", "  return math.floor(value\
    \ + 0.5)\nend", "    return value\nend", "\treturn math.floor(tonumber(value)\
    \ + 0.5)\nend", "  local n = tonumber(value)\n  return n and math.floor(n + 0.5)\n\
    end", "  return math.floor(tonumber(value) + 0.5)\nend", "    local closest_int\
    \ = tonumber(value)\n    if (closest_int < 0) then\n        closest_int = closest_int\
    \ - 0.5\n    else\n        closest_int = closest_int + 0.5\n    end\n    return\
    \ math.floor(closest_int)\nend", "    if value == nil then\n        return nil\n\
    \    end\n    local n = tonumber(value)\n    if n == nil then\n        return\
    \ nil\n    end\n    local i = math.floor(n)\n    if n < 0 then\n        if n -\
    \ i <= i + 1 - n then\n            return i\n        else\n            return\
    \ i + 1\n        end\n    else\n        if n - i <= i + 1 - n then\n         \
    \   return i\n        else\n            return i + 1\n        end\n    end\nend",
  "    --TODO: Implement\nend", "  return value\nend", "    local number = tonumber(value)\n\
    \    if number == nil then\n        return nil\n    end\n    return math.floor(number\
    \ + 0.5)\nend", "    return tonumber(value)\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "  return math.floor(value + 0.5)\nend", "  return value\nend",
  "\treturn round(value)\nend", "    local int, num = string.match(value, '(%d+).(%d+)')\n\
    \    if num and tonumber(num) >= 5 then\n        return tonumber(int) + 1\n  \
    \  else\n        return tonumber(int)\n    end\nend", "  -- read the number from\
    \ the string, using the default reading function\n  local number = tonumber(value)\n\
    \  -- if the number is negative, round it downwards\n  if number < 0 then\n  \
    \  return math.floor(number)\n  -- if the number is positive, round it upwards\n\
    \  else\n    return math.ceil(number)\n  end\nend", "  return math.round(tonumber(value))\n\
    end", "    return math.floor(tonumber(value) + 0.5)\nend", "  local number = tonumber(value)\n\
    \  local ceiling = math.ceil(number)\n  local floor = math.floor(number)\n  if\
    \ number < 0 then\n    if math.abs(number - floor) < math.abs(number - ceiling)\
    \ then\n      return floor\n    else\n      return ceiling\n    end\n  else\n\
    \    if math.abs(number - floor) > math.abs(number - ceiling) then\n      return\
    \ ceiling\n    else\n      return floor\n    end\n  end\nend", "    local v =\
    \ tonumber(value)\n    if v == nil then\n        return \"0\"\n    end\n    return\
    \ tostring(math.floor(v + 0.5))\nend", end, "    local num = tonumber(value)\n\
    \    if num > 0 then\n        return math.floor(num + 0.5)\n    else\n       \
    \ return math.ceil(num - 0.5)\n    end\nend", "    -- your code here\n    return\
    \ nil\nend", "  if type(value) ~= 'string' then\n    return nil\n  end\n  local\
    \ converted = tonumber(value)\n  if converted == nil then\n    return nil\n  end\n\
    \  local integer = math.floor(converted)\n  if converted - integer >= 0.5 then\n\
    \    return integer + 1\n  else\n    return integer\n  end\nend", "    return\
    \ math.floor(value + 0.5)\nend", "  return value\nend", "  local int = math.floor(tonumber(value))\n\
    \  local frac = tonumber(value) - int\n  if frac >= 0.5 then\n    return int +\
    \ 1\n  else\n    return int\n  end\nend", "  return tonumber(value)\nend", " \
    \ return math.floor(value + 0.5)\nend", "  local i, f = math.modf(tonumber(value))\n\
    \  if f > 0.5 then\n    return i + 1\n  elseif f < -0.5 then\n    return i - 1\n\
    \  else\n    return i\n  end\nend", "    return math.floor(tonumber(value) + 0.5)\n\
    end", "  return nil\nend", "  -- your code here\nend", "\tlocal int_value = tonumber(value)\n\
    \tlocal decimal_part = int_value - math.floor(int_value)\n\tif decimal_part ==\
    \ 0.5 then\n\t\tif int_value > 0 then\n\t\t\treturn math.ceil(int_value)\n\t\t\
    else\n\t\t\treturn math.floor(int_value)\n\t\tend\n\telse\n\t\treturn math.floor(int_value\
    \ + 0.5)\n\tend\nend", "    return math.floor(value + 0.5)\nend", "    return\
    \ math.floor(value+0.5)\nend", "  -- TODO\nend", "    local b_positive = value:sub(1,\
    \ 1) ~= '-'\n    local value = math.abs(tonumber(value))\n    local quotient =\
    \ math.floor(value)\n    local remainder = value - quotient\n    if remainder\
    \ >= 0.5 then\n        return b_positive and quotient + 1 or -quotient - 1\n \
    \   else\n        return b_positive and quotient or -quotient\n    end\nend",
  "  local num = tonumber(value)\n  local int, frac = math.modf(num)\n  local diff\
    \ = frac - 0.5\n  if diff < 0 then\n    return int\n  else\n    return int + 1\n\
    \  end\nend", "    local function sign(x)\n        return x>0 and 1 or -1\n  \
    \  end\n    local value = tonumber(value)\n    if math.floor(value) == value then\n\
    \        return value\n    else\n        return math.floor(value + 0.5 * sign(value))\n\
    \    end\nend", "  return math.floor(value + 0.5)\nend\nassert(closest_integer('10')\
    \ == 10)\nassert(closest_integer('15.3') == 15)", "    return value\nend", " \
    \ local num = tonumber(value)\n  if math.abs(num - math.floor(num)) >= 0.5 then\n\
    \    return math.ceil(num)\n  else\n    return math.floor(num)\n  end\nend", " \
    \   if value > 1 then\n        return math.floor(value)\n    elseif value < -1\
    \ then\n        return math.ceil(value)\n    else\n        return 0\n    end\n\
    end", "    return math.floor(tonumber(value) + 0.5)\nend", "  -- TODO: Your code\
    \ here\nend", "    return math.floor(value + 0.5)\nend", "  -- Your code here\n\
    end", "    if (value == nil) then\n        error(\"value is nil\")\n    end\n\
    \    return math.floor(value + 0.5)\nend", "    local number = tonumber(value)\n\
    \    return number % 1 < 0.5 and math.floor(number) or math.ceil(number)\nend",
  "  local num = tonumber(value)\n  local int = math.floor(num)\n  if num - int <\
    \ 0.5 then\n    return int\n  else\n    return int + 1\n  end\nend", "    local\
    \ number = tonumber(value)\n    local integer = math.floor(number)\n    if number\
    \ - integer < 0.5 then\n        return integer\n    else\n        return integer\
    \ + 1\n    end\nend", "    local float = tonumber(value)\n    local integer =\
    \ float - float % 1\n    local decimal = float % 1\n    if decimal >= 0.5 then\n\
    \        return integer + 1\n    else\n        return integer\n    end\nend",
  "    return tonumber(value)\nend", "  return math.floor(tonumber(value) + 0.5)\n\
    end", "    -- write your code here\nend", "  local n = tonumber(value)\n  local\
    \ i = math.floor(n)\n  if n - i < 0.5 then\n    return i\n  else\n    return i\
    \ + 1\n  end\nend", "  -- Write your code here\nend", "  local n = tonumber(value)\n\
    \  if n % 1 >= 0.5 then\n    return math.ceil(n)\n  else\n    return math.floor(n)\n\
    \  end\nend", "    local integer, decimal = value:match('(%d+)(%.?%d*)')\n   \
    \ if #decimal > 0 then\n        if integer + 1 == value then\n            return\
    \ integer + 1\n        elseif integer == value then\n            return integer\n\
    \        else\n            return integer - 1\n        end\n    else\n       \
    \ return tonumber(value)\n    end\nend", "  local r = math.floor(tonumber(value)\
    \ + 0.5)\n  local d = tonumber(value) - r\n  if d > 0 then r = r + 1 end\n  return\
    \ r\nend", "\tlocal number = tonumber(value)\n\tif number - math.floor(number)\
    \ < 0.5 then\n\t\treturn math.floor(number)\n\telse\n\t\treturn math.ceil(number)\n\
    \tend\nend", "    return math.floor(tonumber(value) + 0.5)\nend", "  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    local n = tonumber(value)\n    if n - math.floor(n) < 0.5\
    \ then\n        return math.floor(n)\n    else\n        return math.ceil(n)\n\
    \    end\nend", "    -- Write your code here\n    local n = tonumber(value)\n\
    \    return n % 1 >= 0.5 and math.ceil(n) or math.floor(n)\nend", "    return\
    \ round(value)\nend", "  local number = tonumber(value)\n  if number > 0 then\n\
    \    return math.floor(number + 0.5)\n  else\n    return math.ceil(number - 0.5)\n\
    \  end\nend", "  -- code goes here\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    local number = tonumber(value)\n    return number and number\
    \ >= 0 and math.floor(number) or math.ceil(number)\nend", "  return tonumber(value)\n\
    end", "    return math.floor(value + 0.5)\nend", "    return value\nend", "  return\
    \ math.floor(tonumber(value) + 0.5)\nend", "    if type(value) ~= 'string' then\n\
    \        error('must be string')\n    end\n    if tonumber(value) then\n     \
    \   return math.floor(tonumber(value) + 0.5)\n    else\n        return nil\n \
    \   end\nend", "    local number = tonumber(value)\n    if number < 0 then\n \
    \       return -closest_integer(-number)\n    end\n    local integer = math.floor(number)\n\
    \    local fraction = number - integer\n    if fraction < 0.5 then\n        return\
    \ integer\n    else\n        return integer + 1\n    end\nend", "    local number\
    \ = tonumber(value)\n    local integer = math.floor(number)\n    local remainder\
    \ = number - integer\n    return integer + (remainder > 0.5 and 1 or 0)\nend",
  "    local number = tonumber(value)\n    local rounded = math.floor(number + 0.5)\n\
    \    if number < 0 then\n        rounded = math.ceil(number - 0.5)\n    end\n\
    \    return rounded\nend", "  -- your code here\nend", "  -- Implement your solution\
    \ here\nend", "    -- Write your code here\n    return closest_integer\nend",
  "  local number = tonumber(value)\n  assert(number, 'Invalid value type')\n  return\
    \ math.floor(number + 0.5)\nend", "    -- Parsing the string to a number\n   \
    \ local parsed_value = tonumber(value)\n    -- Comparing the number to the next\
    \ and previous integer\n    if parsed_value % 1 > 0.5 then\n        return math.ceil(parsed_value)\n\
    \    elseif parsed_value % 1 < 0.5 then\n        return math.floor(parsed_value)\n\
    \    else\n        return math.ceil(parsed_value)\n    end\nend", "  local f =\
    \ function(x)\n    local floor = math.floor(x)\n    local ceil = math.ceil(x)\n\
    \    local diff1 = math.abs(x - floor)\n    local diff2 = math.abs(x - ceil)\n\
    \    return diff1 < diff2 and floor or ceil\n  end\n  local number = tonumber(value)\n\
    \  return (number ~= nil) and f(number) or nil\nend", "  return value\nend", " \
    \ local f, _ = math.modf(value)\n  return (f >= 0.5) and math.ceil(value) or math.floor(value)\n\
    end", "\tlocal result = math.floor(value + 0.5)\n\treturn result\nend", "    return\
    \ tonumber(value)\nend", "\treturn math.floor(value + 0.5)\nend", "  local _,_,num\
    \ = string.find(value, '(-?%d*%.?%d*)')\n  return math.floor(num + 0.5)\nend",
  "    local number = tonumber(value)\n    local result = number\n    local floor\
    \ = math.floor(number)\n    local ceil = math.ceil(number)\n    local diff = number\
    \ - floor\n    local ceil_diff = ceil - number\n    if diff > ceil_diff then\n\
    \        result = ceil\n    elseif diff < ceil_diff then\n        result = floor\n\
    \    else\n        if number > 0 then\n            result = ceil\n        else\n\
    \            result = floor\n        end\n    end\n    return result\nend", " \
    \ if tonumber(value) == nil then\n    return nil\n  end\n  return math.floor(value\
    \ + 0.5)\nend", "    return math.floor(value + 0.5)\nend", "    local y = math.floor(tonumber(value))\n\
    \    local z = y + 1\n    local diff1 = value - y\n    local diff2 = z - value\n\
    \    if diff1 < diff2 then\n        return y\n    else\n        return z\n   \
    \ end\nend", "    return math.floor(value + 0.5)\nend", "    return math.round(value)\n\
    end", "    return math.floor(value + 0.5)\nend", "\treturn math.floor(tonumber(value)\
    \ + 0.5)\nend", "    return math.floor(tonumber(value) + 0.5)\nend", "    return\
    \ math.floor(value + 0.5)\nend", "  -- return the closest integer from given value\n\
    \  --\n  -- parameters:\n  --  value (string): string representing a number\n\
    \  --\n  -- returns:\n  --  (integer): the closest integer from given value\n\
    \  local num = tonumber(value)\n  if num % 1 >= 0.5 then\n    return math.ceil(num)\n\
    \  else\n    return math.floor(num)\n  end\nend", "    -- your code here\n   \
    \ return math.floor(value+0.5)\nend", "    return math.floor(value + 0.5)\nend",
  "    return math.ceil(value)\nend", "  local converted = tonumber(value)\n  local\
    \ integer = math.floor(converted)\n  local decimal = converted - integer\n  if\
    \ decimal < 0.5 then\n    return integer\n  else\n    return integer + 1\n  end\n\
    end", "    local number = tonumber(value)\n    if number > 0 then\n        return\
    \ math.floor(number + 0.5)\n    else\n        return math.ceil(number - 0.5)\n\
    \    end\nend", "  return math.floor(tonumber(value) + 0.5)\nend", "    local\
    \ num = tonumber(value)\n    if not num then\n        return nil\n    end\n  \
    \  local i, f = math.modf(num)\n    return f > 0.5 and i + 1 or i\nend", "  --\
    \ your code here\nend", "  -- write your code here\nend", "    local number =\
    \ tonumber(value)\n    local integer = math.floor(number)\n    if integer + 0.5\
    \ <= number then\n        return integer + 1\n    else\n        return integer\n\
    \    end\nend\nassert(closest_integer('10') == 10)\nassert(closest_integer('15.3')\
    \ == 15)\nassert(closest_integer('14.5') == 15)\nassert(closest_integer('-14.5')\
    \ == -15)", "  local n = tonumber(value)\n  local int = math.floor(n)\n  if n\
    \ - int < 0.5 then\n    return int\n  else\n    return int + 1\n  end\nend", " \
    \   if not value then\n        return nil\n    end\n    local v = tonumber(value)\n\
    \    local c = math.floor(v + 0.5)\n    if v - c > 0.5 then\n        c = c + 1\n\
    \    end\n    return c\nend", "    -- your code here\n    return tonumber(value)\n\
    end", "  local num = tonumber(value)\n  assert(num)\n  return math.floor(num +\
    \ 0.5)\nend", "\treturn math.floor(tonumber(value) + 0.5)\nend", "    local value_n\
    \ = tonumber(value)\n    local b, e = math.modf(value_n)\n    if value_n >= 0\
    \ then\n        return (e >= 0.5) and b + 1 or b\n    else\n        return (e\
    \ >= -0.5) and b or b - 1\n    end\nend", "    if not value then\n        return\
    \ nil\n    end\n    return math.floor(value + 0.5)\nend", end, "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    return (math.floor(tonumber(value) + 0.5))\nend", "  -- your\
    \ code here\nend", "    return math.floor(tonumber(value) + 0.5)\nend", "  local\
    \ number = tonumber(value)\n  if number == nil then\n    return nil\n  end\n \
    \ local fraction = number - math.floor(number)\n  if fraction < 0.5 then\n   \
    \ return math.floor(number)\n  else\n    return math.ceil(number)\n  end\nend",
  "  local num = tonumber(value)\n  local int_part = math.floor(num)\n  local frac_part\
    \ = num - int_part\n  local result\n  if frac_part == 0.5 then\n    result = num\
    \ >= 0 and int_part + 1 or int_part - 1\n  else\n    result = num >= 0 and math.ceil(num)\
    \ or math.floor(num)\n  end\n  return result\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    return tonumber(string.format(\"%.0f\", value))\nend", " \
    \ return math.round(tonumber(value))\nend", "    -- your code here\n    return\
    \ nil\nend", "    -- TODO: Implement this function\nend", "  return (math.floor(value\
    \ + 0.5))\nend", "  -- YOUR CODE HERE\n  local num_value = tonumber(value)\n \
    \ if num_value < 0 then\n    num_value = num_value - 0.5\n  else\n    num_value\
    \ = num_value + 0.5\n  end\n  return math.floor(num_value)\nend", "    local flt\
    \ = tonumber(value)\n    local int = math.floor(flt)\n    if (flt - int >= 0.5)\
    \ then\n        return int + 1\n    else\n        return int\n    end\nend", " \
    \   return math.ceil(value)\nend", "    return math.floor(tonumber(value) + 0.5)\n\
    end", "    local int, frac = string.match(value, '(%d+)%.(%d+)')\n    if frac\
    \ == nil then\n        return tonumber(value)\n    elseif string.sub(frac, 1,\
    \ 1) == '5' then\n        return tonumber(int) + 1\n    else\n        return tonumber(int)\n\
    \    end\nend", "    return math.floor(tonumber(value) + 0.5)\nend", "  return\
    \ math.floor(tonumber(value) + 0.5)\nend", "    -- local res, _ = math.modf(tonumber(value))\n\
    \    -- if res >= 0.5 then\n    --     return res + 1\n    -- else\n    --   \
    \  return res\n    -- end\n    return math.floor(tonumber(value) + 0.5)\nend",
  "  local n = tonumber(value)\n  if n then\n    return math.floor(n + 0.5)\n  end\n\
    end", "  local val = tonumber(value)\n  if val > 0 then\n    return math.floor(val\
    \ + 0.5)\n  else\n    return math.ceil(val - 0.5)\n  end\nend", "  local num =\
    \ tonumber(value)\n  if not num then\n    return nil\n  end\n  return math.floor(num\
    \ + 0.5)\nend", "    -- implementation\nend", "    local int = math.floor(tonumber(value))\n\
    \    if tonumber(value) - int < 0.5 then\n        return int\n    else\n     \
    \   return int + 1\n    end\nend", "    if not value then\n        return nil\n\
    \    end\n    local int, frac = math.modf(tonumber(value))\n    if math.abs(frac)\
    \ >= 0.5 then\n        int = int + (frac < 0 and -1 or 1)\n    end\n    return\
    \ int\nend", end, "    return math.floor(value + 0.5)\nend", "    local number\
    \ = tonumber(value)\n    local is_neg = false\n    if number < 0 then\n      \
    \  is_neg = true\n        number = number * -1\n    end\n    local integer = math.floor(number)\n\
    \    local difference = number - integer\n    if difference < 0.5 then\n     \
    \   return integer\n    else\n        return integer + 1\n    end\nend", "  return\
    \ math.floor(tonumber(value) + 0.5)\nend", "  return math.floor(tonumber(value)\
    \ + 0.5)\nend", "  return math.floor(value+0.5)\nend", "    local number = tonumber(value)\n\
    \    return math.floor(number + 0.5)\nend", "    return math.ceil(value)\nend",
  "    local number = tonumber(value)\n    local integral, fractional = math.modf(number)\n\
    \    if fractional >= 0.5 then\n        return integral + 1\n    else\n      \
    \  return integral\n    end\nend", "  return math.floor(value + 0.5)\nend", " \
    \   local num = tonumber(value)\n    if num == nil then\n        return\n    end\n\
    \    if num >= 0 then\n        return math.floor(num + 0.5)\n    else\n      \
    \  return math.ceil(num - 0.5)\n    end\nend", "  return math.floor(value + 0.5)\n\
    end", "  return math.floor(value + 0.5)\nend", "  return math.round(tonumber(value))\n\
    end", "    local num = tonumber(value)\n    if num > 0 then\n        return math.floor(num\
    \ + 0.5)\n    else\n        return math.ceil(num - 0.5)\n    end\nend", "  value\
    \ = tonumber(value)\n  local abs_value = math.abs(value)\n  local floor_value\
    \ = math.floor(abs_value)\n  local diff = abs_value - floor_value\n  local ceil_value\
    \ = math.ceil(abs_value)\n  local difference = math.abs(ceil_value - abs_value)\n\
    \  if diff < difference then\n    return floor_value * math.sign(value)\n  else\n\
    \    return ceil_value * math.sign(value)\n  end\nend", "  if type(value) ~= 'string'\
    \ then\n    return\n  end\n  local fl = tonumber(value)\n  if fl % 1 < 0.5 then\n\
    \    return math.floor(fl)\n  else\n    return math.ceil(fl)\n  end\nend", " \
    \   local n = tonumber(value)\n    if n ~= n then return nil end", "    local\
    \ function ci_helper(n)\n        local flr = math.floor(n)\n        if n - flr\
    \ > 0.5 then\n            return flr + 1\n        else\n            return flr\n\
    \        end\n    end\n    local n = tonumber(value)\n    if n == nil then\n \
    \       return nil\n    else\n        return ci_helper(n)\n    end\nend", "  return\
    \ math.round(tonumber(value))\nend", "    -- TODO: you code here\n    local num\
    \ = value\n    if num > 0 then\n        return math.floor(num + 0.5)\n    else\n\
    \        return math.ceil(num - 0.5)\n    end\nend", "  return math.floor(value\
    \ + 0.5)\nend", "    return math.floor(tonumber(value) + 0.5)\nend", "    return\
    \ math.floor(tonumber(value) + 0.5)\nend", "    return math.floor(tonumber(value)\
    \ + 0.5)\nend", "    local n = tonumber(value)\n    if n ~= n then\n        error(\"\
    value must be a number or a number string\")\n    end\n    if n == math.floor(n)\
    \ then\n        return n\n    end\n    local sign = n >= 0 and 1 or -1\n    return\
    \ sign * math.floor(math.abs(n) + 0.5)\nend", "    local to_string = tostring(value)\n\
    \    local number = tonumber(to_string)\n    local offset = 0.5", "    local ivalue\
    \ = tonumber(value)\n    if ivalue > 0 then\n        return math.floor(ivalue\
    \ + 0.5)\n    else\n        return math.ceil(ivalue - 0.5)\n    end\nend", " \
    \ return math.floor(tonumber(value) + 0.5)\nend", "  -- TODO\nend", "    return\
    \ 0\nend", "    return math.floor(value+0.5)\nend", "  local n = math.floor(tonumber(value)\
    \ + 0.5)\n  return (value - n) <= 0 and n or n - 1\nend", "    return math.floor(value\
    \ + 0.5)\nend", "  local int_part, dec_part = math.modf(value)\n  local rounded_value\
    \ = int_part\n  if dec_part > 0.5 then\n    rounded_value = int_part + 1\n  elseif\
    \ dec_part < -0.5 then\n    rounded_value = int_part - 1\n  end\n  return rounded_value\n\
    end", "  return math.floor(tonumber(value) + 0.5)\nend", end, "    if value ==\
    \ '0' then\n        return 0\n    end\n    local n = tonumber(value)\n    local\
    \ x = math.floor(n)\n    local y = math.ceil(n)\n    if n - x > y - n then\n \
    \       return y\n    else\n        return x\n    end\nend", "  return math.ceil(tonumber(value))\n\
    end", '  local f = tonumber(value)', "    return math.floor(tonumber(value) +\
    \ 0.5)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
