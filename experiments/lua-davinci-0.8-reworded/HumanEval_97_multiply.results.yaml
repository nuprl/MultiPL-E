name: HumanEval_97_multiply
language: lua
results:
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  local _a = a % 10\n  local _b = b % 10\n\
    \  return _a * _b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function _unit(n)\n        return math.abs(n) % 10\n    end\n    return\
    \ _unit(a) * _unit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqee1h0.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmptjqee1h0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyiyp3el.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmpyyiyp3el.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a % 10) * math.abs(b % 10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local x = a - a % 10\n  local y = b - b % 10\n  return x * y / 100 % 10\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dngxstn.lua:22:\
    \ expected: 16, actual: 4\nstack traceback:\n\t/tmp/tmp7dngxstn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal function get_unit_digit(x)\n\t\treturn math.abs(x) % 10\n\tend\n\treturn\
    \ get_unit_digit(a) * get_unit_digit(b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal t = {}\n\tif b < 0 then\n\t\tb = -b\n\t\ttable.insert(t, -a)\n\telse\n\
    \t\ttable.insert(t, a)\n\tend\n\tif a < 0 then\n\t\ta = -a\n\t\ttable.insert(t,\
    \ -b)\n\telse\n\t\ttable.insert(t, b)\n\tend\n\treturn math.abs(a % 10 * b % 10)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsivrco9q.lua:33:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmpsivrco9q.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local a_unit = a % 10\n  local b_unit = b % 10\n  return a_unit * b_unit\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  -- start at 0, for both number\n  local a_unit, b_unit = 0, 0\n  -- get the\
    \ last number of a (which is the unit)\n  a_unit = string.sub(tostring(a), -1)\n\
    \  -- get the last number of b (which is the unit)\n  b_unit = string.sub(tostring(b),\
    \ -1)\n  -- convert a_unit and b_unit from string to number\n  a_unit = tonumber(a_unit)\n\
    \  b_unit = tonumber(b_unit)\n  -- multiply the two numbers\n  return a_unit *\
    \ b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal pro = a * b\n\tlocal unit_digit_a = pro % 10\n\treturn unit_digit_a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_b4woqq.lua:22:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmps_b4woqq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95u71i7o.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp95u71i7o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  stderr: ''
  exit_code: 1
  status: Exception
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = a % 10\n    b = b % 10\n    return a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local d1 = (a >= 0 and a % 10) or (-a % 10)\n  local d2 = (b >= 0 and b % 10)\
    \ or (-b % 10)\n  return d1 * d2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
