language: lua
name: HumanEval_97_multiply
results:
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  local _a = a % 10\n  local _b = b % 10\n\
    \  return _a * _b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function _unit(n)\n        return math.abs(n) % 10\n    end\n    return\
    \ _unit(a) * _unit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqee1h0.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmptjqee1h0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyiyp3el.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmpyyiyp3el.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a % 10) * math.abs(b % 10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local x = a - a % 10\n  local y = b - b % 10\n  return x * y / 100 % 10\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dngxstn.lua:22:\
    \ expected: 16, actual: 4\nstack traceback:\n\t/tmp/tmp7dngxstn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal function get_unit_digit(x)\n\t\treturn math.abs(x) % 10\n\tend\n\treturn\
    \ get_unit_digit(a) * get_unit_digit(b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal t = {}\n\tif b < 0 then\n\t\tb = -b\n\t\ttable.insert(t, -a)\n\telse\n\
    \t\ttable.insert(t, a)\n\tend\n\tif a < 0 then\n\t\ta = -a\n\t\ttable.insert(t,\
    \ -b)\n\telse\n\t\ttable.insert(t, b)\n\tend\n\treturn math.abs(a % 10 * b % 10)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsivrco9q.lua:33:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmpsivrco9q.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local a_unit = a % 10\n  local b_unit = b % 10\n  return a_unit * b_unit\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  -- start at 0, for both number\n  local a_unit, b_unit = 0, 0\n  -- get the\
    \ last number of a (which is the unit)\n  a_unit = string.sub(tostring(a), -1)\n\
    \  -- get the last number of b (which is the unit)\n  b_unit = string.sub(tostring(b),\
    \ -1)\n  -- convert a_unit and b_unit from string to number\n  a_unit = tonumber(a_unit)\n\
    \  b_unit = tonumber(b_unit)\n  -- multiply the two numbers\n  return a_unit *\
    \ b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal pro = a * b\n\tlocal unit_digit_a = pro % 10\n\treturn unit_digit_a\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_b4woqq.lua:22:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmps_b4woqq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95u71i7o.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp95u71i7o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = a % 10\n    b = b % 10\n    return a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local d1 = (a >= 0 and a % 10) or (-a % 10)\n  local d2 = (b >= 0 and b % 10)\
    \ or (-b % 10)\n  return d1 * d2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  return a % 10 * b % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfey5wedc.lua:22:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmpfey5wedc.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local a_unit = a % 10\n    local b_unit = b % 10\n    return a_unit * b_unit\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return a % 10 * b % 10\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphubsbqfh.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmphubsbqfh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function get_last_digit(x)\n    return x % 10\n  end\n  return get_last_digit(a)\
    \ * get_last_digit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function last(n)\n    return n - n%10\n  end\n  return (last(a) - a)\
    \ * (last(b) - b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local a_unit_digit = math.abs(a) % 10\n  local b_unit_digit = math.abs(b) %\
    \ 10\n  return a_unit_digit * b_unit_digit\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local ud1 = a % 10\n  local ud2 = b % 10\n  return ud1 * ud2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function multiply_unit_digits(a, b)\n        return (a%10) * (b%10)\n\
    \    end\n    return multiply_unit_digits(a, b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local ones = {\n    [\"1\"] = \"1\", [\"2\"] = \"2\", [\"3\"] = \"3\", [\"\
    4\"] = \"4\", [\"5\"] = \"5\", [\"6\"] = \"6\", [\"7\"] = \"7\", [\"8\"] = \"\
    8\", [\"9\"] = \"9\", [\"0\"] = \"0\"\n  }\n  return ones[tostring(a % 10)] *\
    \ ones[tostring(b % 10)]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function digit(n)\n        return math.abs(n % 10)\n    end\n    return\
    \ digit(a) * digit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function _mul(a, b)\n        local r = 0\n        while a > 0 do\n\
    \            r = r + b\n            a = a - 1\n        end\n        return r\n\
    \    end\n    local x = _mul(a % 10, b % 10)\n    return (x < 10) and x or 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbh9zxpq.lua:29:\
    \ expected: 16, actual: 0\nstack traceback:\n\t/tmp/tmpdbh9zxpq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprif9bv85.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmprif9bv85.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008666
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function getUnitDigit(x)\n        while x >= 10 do\n            x =\
    \ x % 10\n        end\n        return x\n    end\n    return getUnitDigit(a) *\
    \ getUnitDigit(b)\nend\nreturn multiply\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5_p7tv1x.lua:23: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1660008666
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local t = {\n        [0] = 0,\n        [1] = 1,\n        [2] = 2,\n     \
    \   [3] = 3,\n        [4] = 4,\n        [5] = 5,\n        [6] = 6,\n        [7]\
    \ = 7,\n        [8] = 8,\n        [9] = 9,\n    }\n    return t[math.abs(a) %\
    \ 10] * t[math.abs(b) % 10]\nend\nassert.equals(16, multiply(148, 412))\nassert.equals(72,\
    \ multiply(19, 28))\nassert.equals(0, multiply(2020, 1851))\nassert.equals(20,\
    \ multiply(14, -15))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpm6p28fb0.lua:28: attempt to index a function value (global\
    \ 'assert')\nstack traceback:\n\t/tmp/tmpm6p28fb0.lua:28: in main chunk\n\t[C]:\
    \ in ?\n"
  stdout: ''
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local a2 = math.abs(a) % 10\n  local b2 = math.abs(b) % 10\n  return a2 * b2\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local ua = a - math.floor(a / 10) * 10\n  local ub = b - math.floor(b / 10)\
    \ * 10\n  return ua * ub\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local aa = a % 10\n  local bb = b % 10\n  return aa * bb\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local product = tostring(a) .. tostring(b)\n  local ret = 1\n  for i = 1, #product\
    \ do\n    ret = ret * tonumber(product:sub(i, i))\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp_apcvp.lua:25:\
    \ expected: 16, actual: 256\nstack traceback:\n\t/tmp/tmpqp_apcvp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local at = tostring(a)\n    local bt = tostring(b)\n    local product = tonumber(at:sub(-1,\
    \ -1)) * tonumber(bt:sub(-1, -1))\n    return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local n = a < 0 and -a or a\n  local d = b < 0 and -b or b\n  return (n % 10)\
    \ * (d % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local ua = a % 10\n    local ub = b % 10\n    return ua * ub\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a % 10) * math.abs(b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function to_unit(x)\n    return math.abs(x) % 10\n  end\n  return to_unit(a)\
    \ * to_unit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local unit_digit = function(n)\n    return math.abs(n) % 10\n  end\n  return\
    \ unit_digit(a) * unit_digit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- add your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jfzv9a9.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmp1jfzv9a9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local ab = a*b\n  local unit = ab % 10\n  return unit\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj0zji2f.lua:22:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmpkj0zji2f.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnugv8v46.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmpnugv8v46.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local unit_digit = function(num)\n    num = math.abs(num)\n    return num %\
    \ 10\n  end\n  return unit_digit(a) * unit_digit(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \ta = math.abs(a)\n\tb = math.abs(b)\n\treturn (a % 10) * (b % 10)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function unit_digit(n)\n    if n == 0 then return 0 end\n    return math.abs(n)\
    \ % 10\n  end\n  return unit_digit(a) * unit_digit(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqee1h0.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmptjqee1h0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  local res = a % 10 * b % 10\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vv4bzqx.lua:23:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp1vv4bzqx.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a % 10) * math.abs(b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local abs_a = math.abs(a)\n  local abs_b = math.abs(b)\n  local unit_a = abs_a\
    \ % 10\n  local unit_b = abs_b % 10\n  return unit_a * unit_b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqee1h0.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmptjqee1h0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- get the last digit of a and b\n    a, b = math.abs(a % 10), math.abs(b\
    \ % 10)\n    -- return the product\n    return a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local _, ac = math.modf(a)\n  local _, bc = math.modf(b)\n  return (math.floor(a\
    \ / 10) * 10 + ac) * (math.floor(b / 10) * 10 + bc) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply6yj1tv.lua:22:\
    \ expected: 16, actual: 0.0\nstack traceback:\n\t/tmp/tmply6yj1tv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local a = a % 10\n  local b = b % 10\n  return a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function lastDigit(a)\n        if a < 0 then a = -a end\n        return\
    \ a - 10 * math.floor(a / 10)\n    end\n    return lastDigit(a) * lastDigit(b)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local u1 = a % 10\n    local u2 = b % 10\n    return u1 * u2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a % 10) * math.abs(b % 10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function product(a, b)\n    return a + b\n  end\n  local function unit_digit(n)\n\
    \    return n % 10\n  end\n  local a_unit = unit_digit(a)\n  local b_unit = unit_digit(b)\n\
    \  return product(a_unit, b_unit)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqe3j4_z.lua:28:\
    \ expected: 16, actual: 10\nstack traceback:\n\t/tmp/tmpbqe3j4_z.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local a, b = math.abs(a), math.abs(b)\n    local product = 1\n    for i =\
    \ 1, 2 do\n        local last_digit_a = a % 10\n        local last_digit_b = b\
    \ % 10\n        product = product * last_digit_a * last_digit_b\n        a = math.floor(a\
    \ / 10)\n        b = math.floor(b / 10)\n    end\n    return product\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hmax4k6.lua:29:\
    \ expected: 16, actual: 64\nstack traceback:\n\t/tmp/tmp1hmax4k6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (math.abs(a)%10) * (math.abs(b)%10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (math.abs(a)%10) * (math.abs(b)%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaof8vod.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmpjaof8vod.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local a, b = math.abs(a), math.abs(b)\n    local a, b = a % 10, b % 10\n\
    \    return a * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local sign = (a >= 0 and b >= 0) or (a < 0 and b < 0) and 1 or -1\n  a = math.abs(a)\n\
    \  b = math.abs(b)\n  return sign * (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn887gxg4.lua:17:\
    \ attempt to perform arithmetic on a boolean value (local 'sign')\nstack traceback:\n\
    \t/tmp/tmpn887gxg4.lua:17: in local 'candidate'\n\t/tmp/tmpn887gxg4.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqee1h0.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmptjqee1h0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function calc_unit_digit(x)\n    local n = math.abs(x)\n    while n >=\
    \ 10 do\n      n = n % 10\n    end\n    return n\n  end\n  return calc_unit_digit(a)\
    \ * calc_unit_digit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local ta, tb = tostring(a), tostring(b)\n    local unit_a, unit_b = string.sub(ta,\
    \ -1), string.sub(tb, -1)\n    return tonumber(unit_a) * tonumber(unit_b)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal a_unit = a % 10\n\tlocal b_unit = b % 10\n\treturn a_unit * b_unit\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1) .. tostring(b):sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ldu61y9.lua:20:\
    \ expected: 16, actual: 82\nstack traceback:\n\t/tmp/tmp_ldu61y9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function get_unit_digit(n)\n    return n - (n // 10) * 10\n  end\n  return\
    \ get_unit_digit(a) * get_unit_digit(b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local u = (a % 10) * (b % 10)\n    return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (math.abs(a)%10) * (math.abs(b)%10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = a % 10\n    b = b % 10\n    return a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function unit_digit(x)\n        while x >= 10 do\n            x = x\
    \ % 10\n        end\n        return x\n    end\n    return unit_digit(a) * unit_digit(b)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfizp3kzf.lua:29:\
    \ expected: 20, actual: -60\nstack traceback:\n\t/tmp/tmpfizp3kzf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local sa = string.sub(tostring(a), -1)\n  local sb = string.sub(tostring(b),\
    \ -1)\n  return tonumber(sa) * tonumber(sb)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- your code here\nend\nmultiply(1, 5)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3284e82b.lua:21:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmp3284e82b.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local unit_a = a % 10\n    local unit_b = b % 10\n    return unit_a * unit_b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \treturn (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  return math.floor(a/10)%10 * math.floor(b/10)%10\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufz4xfaf.lua:22:\
    \ expected: 16, actual: 4\nstack traceback:\n\t/tmp/tmpufz4xfaf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnugv8v46.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmpnugv8v46.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- get last digit of each number\n    a = a % 10\n    b = b % 10\n    --\
    \ do the math and return\n    return a * b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1, -1))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local str1 = tostring(a)\n  local str2 = tostring(b)\n  local num1 = tonumber(str1:sub(-1,\
    \ -1))\n  local num2 = tonumber(str2:sub(-1, -1))\n  return num1 * num2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local unit_a = a % 10\n    local unit_b = b % 10\n    return unit_a * unit_b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return a%10 * b%10\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9y0rp3k.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmph9y0rp3k.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008666
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local unit_a = a % 10\n    local unit_b = b % 10\n    return unit_a * unit_b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local str_a = tostring(a)\n    local str_b = tostring(b)\n    local multi\
    \ = str_a:match(\"%d\") * str_b:match(\"%d\")\n    return multi\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0t_hzm_k.lua:23:\
    \ expected: 16, actual: 4\nstack traceback:\n\t/tmp/tmp0t_hzm_k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1, -1))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal unit = a % 10 * b % 10\n\treturn unit\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9o5s4gx2.lua:21:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp9o5s4gx2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal n, m = math.abs(a), math.abs(b)\n\tn, m = n % 10, m % 10\n\treturn n *\
    \ m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  a = math.abs(a)\n  b = math.abs(b)\n  return (a % 10) * (b % 10)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = string.reverse(tostring(a))\n    b = string.reverse(tostring(b))\n  \
    \  local res = tonumber(a) * tonumber(b)\n    res = string.reverse(tostring(res))\n\
    \    return tonumber(res:sub(1, 1))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq3g00sq.lua:24:\
    \ expected: 16, actual: 4\nstack traceback:\n\t/tmp/tmpoq3g00sq.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1, -1))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyiyp3el.lua:20:\
    \ expected: 16, actual: nil\nstack traceback:\n\t/tmp/tmpyyiyp3el.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    a = math.abs(a)\n    b = math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95u71i7o.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp95u71i7o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local a, b = math.abs(a % 10), math.abs(b % 10)\n    return a * b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqee1h0.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmptjqee1h0.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local n, m = a % 10, b % 10\n  return n * m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local abs = function(n)\n        if n < 0 then\n            return n * -1\n\
    \        else\n            return n\n        end\n    end\n    return (abs(a)\
    \ % 10) * (abs(b) % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a % 10) * math.abs(b % 10)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a * b) % 10\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nxgnjms.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp9nxgnjms.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return a%10 * b%10\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph9y0rp3k.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmph9y0rp3k.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\n_exports.multiply = multiply\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp665nlj95.lua:16: attempt to index a nil value (global '_exports')\n\
    stack traceback:\n\t/tmp/tmp665nlj95.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \treturn (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local a, b = math.abs(a % 10), math.abs(b % 10)\n  return a * b\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local function unit_digit(n)\n        return math.abs(n) % 10\n    end\n\
    \    return unit_digit(a) * unit_digit(b)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function get_unit_digit(number)\n    local is_neg = number < 0\n    if\
    \ is_neg then number = -number end\n    return math.abs(number % 10)\n  end\n\
    \  return get_unit_digit(a) * get_unit_digit(b)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local units = {a % 10, b % 10}\n    local result = 1\n    for i = 1, #units\
    \ do\n        result = result * units[i]\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local digit = function(n)\n        local c = math.abs(n)\n        while c\
    \ >= 10 do\n            c = c // 10\n        end\n        return c\n    end\n\
    \    return digit(a) * digit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtxug8jx.lua:27:\
    \ expected: 16, actual: 4\nstack traceback:\n\t/tmp/tmpxtxug8jx.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \tlocal a = a % 10\n\tlocal b = b % 10\n\treturn a * b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return ((a%10) * (b%10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return math.abs(a) % 10 * math.abs(b) % 10\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp95u71i7o.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp95u71i7o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return tonumber(string.sub(tostring(a), -1)) * tonumber(string.sub(tostring(b),\
    \ -1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a * b) % 10\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nxgnjms.lua:20:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmp9nxgnjms.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local unita = a % 10\n  local unitb = b % 10\n  return unita * unitb\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function unit(i)\n    return math.abs(i % 10)\n  end\n  return unit(a)\
    \ * unit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local function unit(n)\n    return math.abs(n) % 10\n  end\n  return unit(a)\
    \ * unit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local sign = 1\n    if a < 0 then\n        a = -a\n        sign = -sign\n\
    \    end\n    if b < 0 then\n        b = -b\n        sign = -sign\n    end\n \
    \   return ((a % 10) * (b % 10)) * sign\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmb6n5z6.lua:32:\
    \ expected: 20, actual: -20\nstack traceback:\n\t/tmp/tmpbmb6n5z6.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    local a, b = math.abs(a), math.abs(b)\n    return (a % 10) * (b % 10)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  local c = a * b\n  return c % 10\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb8l8xsh.lua:21:\
    \ expected: 16, actual: 6\nstack traceback:\n\t/tmp/tmpxb8l8xsh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 1
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return tonumber(string.format(\"%d\", math.abs(a))) * tonumber(string.format(\"\
    %d\", math.abs(b)))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyet7tpyt.lua:20:\
    \ expected: 16, actual: 60976\nstack traceback:\n\t/tmp/tmpyet7tpyt.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \    return ((a % 10) * (b % 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1660008667
- exit_code: 0
  program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
    \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
