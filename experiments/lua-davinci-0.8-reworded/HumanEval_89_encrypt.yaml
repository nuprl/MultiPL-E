name: HumanEval_89_encrypt
language: lua
prompt: "-- Create a function encrypt that takes a string as an argument and\n-- returns\
  \ a string encrypted with the alphabet being rotated. \n-- The alphabet should be\
  \ rotated in a manner such that the letters \n-- shift down by two multiplied to\
  \ two places.\n-- For example:\n-- >>> encrypt('hi')\n-- 'lm'\n-- >>> encrypt('asdfghjkl')\n\
  -- 'ewhjklnop'\n-- >>> encrypt('gf')\n-- 'kj'\n-- >>> encrypt('et')\n-- 'ix'\nlocal\
  \ function encrypt(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encrypt\n\
  \    lu.assertEquals(candidate('hi'), 'lm')\n    lu.assertEquals(candidate('asdfghjkl'),\
  \ 'ewhjklnop')\n    lu.assertEquals(candidate('gf'), 'kj')\n    lu.assertEquals(candidate('et'),\
  \ 'ix')\n    lu.assertEquals(candidate('faewfawefaewg'), 'jeiajeaijeiak')\n    lu.assertEquals(candidate('hellomyfriend'),\
  \ 'lippsqcjvmirh')\n    lu.assertEquals(candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh'),\
  \ 'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl')\n    lu.assertEquals(candidate('a'),\
  \ 'e')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local encryptedString = ''\n    for index = 1, string.len(s) do\n\
    \        local char = string.sub(s, index, index)\n        local charIndex = string.find(alphabet,\
    \ char)\n        if charIndex ~= nil then\n            local newCharIndex = charIndex\
    \ + 2 * 2\n            local newChar = alphabet[newCharIndex]\n            encryptedString\
    \ = encryptedString .. newChar\n        else\n            encryptedString = encryptedString\
    \ .. char\n        end\n    end\n    return encryptedString\nend", "  local alphabet\
    \ = {}\n  local encrypted = {}\n  local i = 0\n  for ch = string.byte('a'), string.byte('z')\
    \ do\n    alphabet[ch - string.byte('a') + 1] = ch\n  end\n  for ch in string.gmatch(s,\
    \ \".\") do\n    i = i + 1\n    encrypted[i] = alphabet[((string.byte(ch) - string.byte('a')\
    \ + 1 + 2) % 26) + 1]\n  end\n  return string.char(unpack(encrypted))\nend", " \
    \ return s:gsub(\".\", function(c)\n    local b = c:byte()\n    if b >= 65 and\
    \ b <= 122 then\n      b = b + 2 * 2\n      if b > 122 then\n        b = b - 26\n\
    \      end\n    end\n    return string.char(b)\n  end)\nend", "    local rot={}\n\
    \    for i=1, string.len(s) do\n        rot[i] = string.char(string.byte(s,i)+2*2)\n\
    \    end\n    local rs = \"\"\n    for k,v in pairs(rot) do\n        rs = rs ..\
    \ v\n    end\n    return rs\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local s_out = \"\"\n    for i = 1, #s do\n        local c = s:sub(i, i)\n\
    \        local index = alphabet:find(c)\n        local index_out = index - (2\
    \ * 2)\n        if index_out <= 0 then\n            index_out = index_out + #alphabet\n\
    \        end\n        s_out = s_out .. alphabet:sub(index_out, index_out)\n  \
    \  end\n    return s_out\nend", "  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n  local lowercase = string.lower(s)\n  local start = 1\n  local end_ = string.len(alphabet)\n\
    \  local new_str = \"\"\n  for i = 1, string.len(lowercase) do\n    for i2 = start,\
    \ end_ do\n      if string.sub(lowercase, i, i) == string.sub(alphabet, i2, i2)\
    \ then\n        if i2 == 25 then\n          new_str = new_str .. \"a\"\n     \
    \   elseif i2 == 26 then\n          new_str = new_str .. \"b\"\n        else\n\
    \          new_str = new_str .. string.sub(alphabet, i2 + 2, i2 + 2)\n       \
    \ end\n      end\n    end\n  end\n  return new_str\nend", "\tlocal alphabet =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n\tlocal res = ''\n\tfor i = 1, #s do\n\t\tlocal\
    \ ch = s:sub(i, i)\n\t\tlocal offset = alphabet:find(ch)\n\t\tlocal place = (offset\
    \ + 4) % 26\n\t\tres = res .. alphabet:sub(place, place)\n\tend\n\treturn res\n\
    end", "    local i = 1\n    return s:gsub('.', function(c)\n        local x =\
    \ i * 2\n        i = i + 1\n        return string.char(c:byte() + x)\n    end)\n\
    end", "    local length = #s\n    local encrypted_s = ''\n    local dictionary\
    \ = {\n        a = 'c',\n        b = 'd',\n        c = 'e',\n        d = 'f',\n\
    \        e = 'g',\n        f = 'h',\n        g = 'i',\n        h = 'j',\n    \
    \    i = 'k',\n        j = 'l',\n        k = 'm',\n        l = 'n',\n        m\
    \ = 'o',\n        n = 'p',\n        o = 'q',\n        p = 'r',\n        q = 's',\n\
    \        r = 't',\n        s = 'u',\n        t = 'v',\n        u = 'w',\n    \
    \    v = 'x',\n        w = 'y',\n        x = 'z',\n        y = 'a',\n        z\
    \ = 'b'\n    }\n    for i = 1, length do\n        local char = s:sub(i, i)\n \
    \       encrypted_s = encrypted_s .. dictionary[char]\n    end\n    return encrypted_s\n\
    end", "    -- Implement me\nend", "  -- Code goes here\nend", "    local alpha\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n    local enc = ''\n    for i = 1, #s do\n \
    \       enc = enc .. alpha:sub(alpha:find(s:sub(i,i)) + 4, alpha:find(s:sub(i,i))\
    \ + 4)\n    end\n    return enc\nend", "  -- TODO: Implement me!\nend", "  local\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local my_list = {}\n  for i = 1,\
    \ string.len(s) do\n    local c = string.sub(s, i, i)\n    local value = string.byte(c)\
    \ - 96\n    value = value + 2 * 2\n    if value > 26 then\n      value = value\
    \ - 26\n    end\n    local w = string.sub(alphabet, value, value)\n    table.insert(my_list,\
    \ w)\n  end\n  return table.concat(my_list)\nend", "\tlocal str = \"\"\n\tfor\
    \ c in s:gmatch(\".\") do\n\t\tlocal n = string.byte(c)\n\t\tif c == \"z\" then\n\
    \t\t\tstr = str .. \"b\"\n\t\telseif c == \"y\" then\n\t\t\tstr = str .. \"a\"\
    \n\t\telse\n\t\t\tstr = str .. string.char(n + 2)\n\t\tend\n\tend\n\treturn str\n\
    end", "\tlocal len = #s\n\tlocal s2 = \"\"\n\tfor i = 1, len do\n\t\ts2 = s2 ..\
    \ string.char(string.byte(s, i) + 2*2)\n\tend\n\treturn s2\nend", "  alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  dict = {}\n  for i = 1,#alphabet do\n    dict[alphabet:sub(i,i)]\
    \ = alphabet:sub((i + 4) % 26 + 1, (i + 4) % 26 + 1)\n  end\n  local s = s:lower()\n\
    \  local ans = ''\n  for i = 1,#s do\n    ans = ans .. dict[s:sub(i,i)]\n  end\n\
    \  return ans\nend", "    s = string.gsub(s, '[A-Za-z]', alphabet)\n    return\
    \ s\nend", "\t--[[\n\t\tHINT:\n\t\tYou can access the characters in the string\
    \ using square brackets.\n\t\tSo you can use s[1] to get the first character in\
    \ the string. \n\t\tYou can use string.char(97) to get the character a.", "  \
    \  local res = {}\n    local alpha = 'abcdefghijklmnopqrstuvwxyz'\n    for i =\
    \ 1, #s do\n        local c = s:sub(i, i)\n        local o = alpha:find(c)\n \
    \       if o then\n            res[#res + 1] = alpha:sub((o + 2) % #alpha + 1,\
    \ (o + 2) % #alpha + 1)\n        else\n            res[#res + 1] = c\n       \
    \ end\n    end\n    return table.concat(res)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
