name: HumanEval_13_greatest_common_divisor
language: lua
results:
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- Validate arguments\n    assert(a == math.floor(a), \"a must be an\
    \ integer\")\n    assert(b == math.floor(b), \"b must be an integer\")\n    assert(a\
    \ > 0, \"a must be positive\")\n    assert(b > 0, \"b must be positive\")\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpzu1vuae3.lua:22: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Ensure that a > b\n  if a < b then\n    a, b = b, a\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpega_8e7q.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  a = math.abs(a)\n  b = math.abs(b)\n  if b > a then\n    a, b = b, a\n\
    \  end\n  local r = a % b\n  while r ~= 0 do\n    a = b\n    b = r\n    r = a\
    \ % b\n  end\n  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a == 0 then\n        return b\n    elseif b == 0 then\n        return\
    \ a\n    else\n        return greatest_common_divisor(b, a % b)\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    return b == 0 and a or greatest_common_divisor(b, a % b)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a < b then\n    a, b = b, a\n  end\n  if a % b == 0 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- Make sure a >= b\n    if a < b then\n        a, b = b, a\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpkb0u0ypv.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    while b ~= 0 do\n        a, b = b, a % b\n    end\n    return a\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\twhile b ~= 0 do\n\t\tlocal temp = a % b\n\t\ta = b\n\t\tb = temp\n\tend\n\
    \treturn a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  while b ~= 0 do\n    local t = b\n    b = a % b\n    a = t\n  end\n  return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if (b > a) then\n    a, b = b, a\n  end\n  while b ~= 0 do\n    a, b =\
    \ b, a % b\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n\tif a == 0 then\n\t\treturn b\n\telseif b == 0 then\n\t\treturn a\n\telse\n\
    \t\treturn greatest_common_divisor(b, a % b)\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- Euclidean algorithm\n    -- Find remainder r of a / b\n    -- a =\
    \ bq + r\n    -- If r = 0 then the last divisor is b\n    local q = 0\n    local\
    \ r = a\n    local t = 0\n    while r ~= 0 do\n        q = math.floor(b / r)\n\
    \        t = r\n        r = b - q * r\n        b = t\n    end\n    return b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a % b == 0 then\n        return b\n    else\n        return greatest_common_divisor(b,\
    \ a % b)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    if a < b then\n        a, b = b, a\n    end\n    while b ~= 0 do\n \
    \       a, b = b, a % b\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    a = math.abs(a)\n    b = math.abs(b)\n    if a == 0 or b == 0 then\n\
    \        return 0\n    end\n    while b ~= 0 do\n        local c = a % b\n   \
    \     a = b\n        b = c\n    end\n    return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    local r = a % b\n    while r ~= 0 do\n        a = b\n        b = r\n\
    \        r = a % b\n    end\n    return b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ".\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- Ensure that 'a' is the greater number\n    if a < b then\n      \
    \  a, b = b, a\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpxjlq5dzb.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
- program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n    -- Reassign a and b, such that b > a\n    if a > b then\n        a,\
    \ b = b, a\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: ''
  stderr: "lua: /tmp/tmpr_zi2kwx.lua:21: 'end' expected (to close 'function' at line\
    \ 6) near <eof>\n"
  exit_code: 1
  status: Exception
